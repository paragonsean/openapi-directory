# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error import Error
from openapi_server.models.issuer_parameters import IssuerParameters
import re
from openapi_server import util


class CertificateOperation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cancellation_requested: bool=None, csr: str=None, error: Error=None, id: str=None, issuer: IssuerParameters=None, request_id: str=None, status: str=None, status_details: str=None, target: str=None):
        """CertificateOperation - a model defined in OpenAPI

        :param cancellation_requested: The cancellation_requested of this CertificateOperation.
        :param csr: The csr of this CertificateOperation.
        :param error: The error of this CertificateOperation.
        :param id: The id of this CertificateOperation.
        :param issuer: The issuer of this CertificateOperation.
        :param request_id: The request_id of this CertificateOperation.
        :param status: The status of this CertificateOperation.
        :param status_details: The status_details of this CertificateOperation.
        :param target: The target of this CertificateOperation.
        """
        self.openapi_types = {
            'cancellation_requested': bool,
            'csr': str,
            'error': Error,
            'id': str,
            'issuer': IssuerParameters,
            'request_id': str,
            'status': str,
            'status_details': str,
            'target': str
        }

        self.attribute_map = {
            'cancellation_requested': 'cancellation_requested',
            'csr': 'csr',
            'error': 'error',
            'id': 'id',
            'issuer': 'issuer',
            'request_id': 'request_id',
            'status': 'status',
            'status_details': 'status_details',
            'target': 'target'
        }

        self._cancellation_requested = cancellation_requested
        self._csr = csr
        self._error = error
        self._id = id
        self._issuer = issuer
        self._request_id = request_id
        self._status = status
        self._status_details = status_details
        self._target = target

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateOperation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateOperation of this CertificateOperation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cancellation_requested(self):
        """Gets the cancellation_requested of this CertificateOperation.

        Indicates if cancellation was requested on the certificate operation.

        :return: The cancellation_requested of this CertificateOperation.
        :rtype: bool
        """
        return self._cancellation_requested

    @cancellation_requested.setter
    def cancellation_requested(self, cancellation_requested):
        """Sets the cancellation_requested of this CertificateOperation.

        Indicates if cancellation was requested on the certificate operation.

        :param cancellation_requested: The cancellation_requested of this CertificateOperation.
        :type cancellation_requested: bool
        """

        self._cancellation_requested = cancellation_requested

    @property
    def csr(self):
        """Gets the csr of this CertificateOperation.

        The certificate signing request (CSR) that is being used in the certificate operation.

        :return: The csr of this CertificateOperation.
        :rtype: str
        """
        return self._csr

    @csr.setter
    def csr(self, csr):
        """Sets the csr of this CertificateOperation.

        The certificate signing request (CSR) that is being used in the certificate operation.

        :param csr: The csr of this CertificateOperation.
        :type csr: str
        """
        if csr is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', csr):
            raise ValueError("Invalid value for `csr`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")

        self._csr = csr

    @property
    def error(self):
        """Gets the error of this CertificateOperation.


        :return: The error of this CertificateOperation.
        :rtype: Error
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this CertificateOperation.


        :param error: The error of this CertificateOperation.
        :type error: Error
        """

        self._error = error

    @property
    def id(self):
        """Gets the id of this CertificateOperation.

        The certificate id.

        :return: The id of this CertificateOperation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CertificateOperation.

        The certificate id.

        :param id: The id of this CertificateOperation.
        :type id: str
        """

        self._id = id

    @property
    def issuer(self):
        """Gets the issuer of this CertificateOperation.


        :return: The issuer of this CertificateOperation.
        :rtype: IssuerParameters
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this CertificateOperation.


        :param issuer: The issuer of this CertificateOperation.
        :type issuer: IssuerParameters
        """

        self._issuer = issuer

    @property
    def request_id(self):
        """Gets the request_id of this CertificateOperation.

        Identifier for the certificate operation.

        :return: The request_id of this CertificateOperation.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this CertificateOperation.

        Identifier for the certificate operation.

        :param request_id: The request_id of this CertificateOperation.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def status(self):
        """Gets the status of this CertificateOperation.

        Status of the certificate operation.

        :return: The status of this CertificateOperation.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CertificateOperation.

        Status of the certificate operation.

        :param status: The status of this CertificateOperation.
        :type status: str
        """

        self._status = status

    @property
    def status_details(self):
        """Gets the status_details of this CertificateOperation.

        The status details of the certificate operation.

        :return: The status_details of this CertificateOperation.
        :rtype: str
        """
        return self._status_details

    @status_details.setter
    def status_details(self, status_details):
        """Sets the status_details of this CertificateOperation.

        The status details of the certificate operation.

        :param status_details: The status_details of this CertificateOperation.
        :type status_details: str
        """

        self._status_details = status_details

    @property
    def target(self):
        """Gets the target of this CertificateOperation.

        Location which contains the result of the certificate operation.

        :return: The target of this CertificateOperation.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this CertificateOperation.

        Location which contains the result of the certificate operation.

        :param target: The target of this CertificateOperation.
        :type target: str
        """

        self._target = target
