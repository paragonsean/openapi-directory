# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubjectAlternativeNames(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dns_names: List[str]=None, emails: List[str]=None, upns: List[str]=None):
        """SubjectAlternativeNames - a model defined in OpenAPI

        :param dns_names: The dns_names of this SubjectAlternativeNames.
        :param emails: The emails of this SubjectAlternativeNames.
        :param upns: The upns of this SubjectAlternativeNames.
        """
        self.openapi_types = {
            'dns_names': List[str],
            'emails': List[str],
            'upns': List[str]
        }

        self.attribute_map = {
            'dns_names': 'dns_names',
            'emails': 'emails',
            'upns': 'upns'
        }

        self._dns_names = dns_names
        self._emails = emails
        self._upns = upns

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubjectAlternativeNames':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubjectAlternativeNames of this SubjectAlternativeNames.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dns_names(self):
        """Gets the dns_names of this SubjectAlternativeNames.

        Domain names.

        :return: The dns_names of this SubjectAlternativeNames.
        :rtype: List[str]
        """
        return self._dns_names

    @dns_names.setter
    def dns_names(self, dns_names):
        """Sets the dns_names of this SubjectAlternativeNames.

        Domain names.

        :param dns_names: The dns_names of this SubjectAlternativeNames.
        :type dns_names: List[str]
        """

        self._dns_names = dns_names

    @property
    def emails(self):
        """Gets the emails of this SubjectAlternativeNames.

        Email addresses.

        :return: The emails of this SubjectAlternativeNames.
        :rtype: List[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this SubjectAlternativeNames.

        Email addresses.

        :param emails: The emails of this SubjectAlternativeNames.
        :type emails: List[str]
        """

        self._emails = emails

    @property
    def upns(self):
        """Gets the upns of this SubjectAlternativeNames.

        User principal names.

        :return: The upns of this SubjectAlternativeNames.
        :rtype: List[str]
        """
        return self._upns

    @upns.setter
    def upns(self, upns):
        """Sets the upns of this SubjectAlternativeNames.

        User principal names.

        :param upns: The upns of this SubjectAlternativeNames.
        :type upns: List[str]
        """

        self._upns = upns
