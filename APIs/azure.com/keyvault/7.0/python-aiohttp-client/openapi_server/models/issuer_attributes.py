# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IssuerAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: int=None, enabled: bool=None, updated: int=None):
        """IssuerAttributes - a model defined in OpenAPI

        :param created: The created of this IssuerAttributes.
        :param enabled: The enabled of this IssuerAttributes.
        :param updated: The updated of this IssuerAttributes.
        """
        self.openapi_types = {
            'created': int,
            'enabled': bool,
            'updated': int
        }

        self.attribute_map = {
            'created': 'created',
            'enabled': 'enabled',
            'updated': 'updated'
        }

        self._created = created
        self._enabled = enabled
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssuerAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IssuerAttributes of this IssuerAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this IssuerAttributes.

        Creation time in UTC.

        :return: The created of this IssuerAttributes.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this IssuerAttributes.

        Creation time in UTC.

        :param created: The created of this IssuerAttributes.
        :type created: int
        """

        self._created = created

    @property
    def enabled(self):
        """Gets the enabled of this IssuerAttributes.

        Determines whether the issuer is enabled.

        :return: The enabled of this IssuerAttributes.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this IssuerAttributes.

        Determines whether the issuer is enabled.

        :param enabled: The enabled of this IssuerAttributes.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def updated(self):
        """Gets the updated of this IssuerAttributes.

        Last updated time in UTC.

        :return: The updated of this IssuerAttributes.
        :rtype: int
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this IssuerAttributes.

        Last updated time in UTC.

        :param updated: The updated of this IssuerAttributes.
        :type updated: int
        """

        self._updated = updated
