# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.storage_account_attributes import StorageAccountAttributes
from openapi_server import util


class StorageAccountUpdateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_key_name: str=None, attributes: StorageAccountAttributes=None, auto_regenerate_key: bool=None, regeneration_period: str=None, tags: Dict[str, str]=None):
        """StorageAccountUpdateParameters - a model defined in OpenAPI

        :param active_key_name: The active_key_name of this StorageAccountUpdateParameters.
        :param attributes: The attributes of this StorageAccountUpdateParameters.
        :param auto_regenerate_key: The auto_regenerate_key of this StorageAccountUpdateParameters.
        :param regeneration_period: The regeneration_period of this StorageAccountUpdateParameters.
        :param tags: The tags of this StorageAccountUpdateParameters.
        """
        self.openapi_types = {
            'active_key_name': str,
            'attributes': StorageAccountAttributes,
            'auto_regenerate_key': bool,
            'regeneration_period': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'active_key_name': 'activeKeyName',
            'attributes': 'attributes',
            'auto_regenerate_key': 'autoRegenerateKey',
            'regeneration_period': 'regenerationPeriod',
            'tags': 'tags'
        }

        self._active_key_name = active_key_name
        self._attributes = attributes
        self._auto_regenerate_key = auto_regenerate_key
        self._regeneration_period = regeneration_period
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageAccountUpdateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageAccountUpdateParameters of this StorageAccountUpdateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_key_name(self):
        """Gets the active_key_name of this StorageAccountUpdateParameters.

        The current active storage account key name.

        :return: The active_key_name of this StorageAccountUpdateParameters.
        :rtype: str
        """
        return self._active_key_name

    @active_key_name.setter
    def active_key_name(self, active_key_name):
        """Sets the active_key_name of this StorageAccountUpdateParameters.

        The current active storage account key name.

        :param active_key_name: The active_key_name of this StorageAccountUpdateParameters.
        :type active_key_name: str
        """

        self._active_key_name = active_key_name

    @property
    def attributes(self):
        """Gets the attributes of this StorageAccountUpdateParameters.


        :return: The attributes of this StorageAccountUpdateParameters.
        :rtype: StorageAccountAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this StorageAccountUpdateParameters.


        :param attributes: The attributes of this StorageAccountUpdateParameters.
        :type attributes: StorageAccountAttributes
        """

        self._attributes = attributes

    @property
    def auto_regenerate_key(self):
        """Gets the auto_regenerate_key of this StorageAccountUpdateParameters.

        whether keyvault should manage the storage account for the user.

        :return: The auto_regenerate_key of this StorageAccountUpdateParameters.
        :rtype: bool
        """
        return self._auto_regenerate_key

    @auto_regenerate_key.setter
    def auto_regenerate_key(self, auto_regenerate_key):
        """Sets the auto_regenerate_key of this StorageAccountUpdateParameters.

        whether keyvault should manage the storage account for the user.

        :param auto_regenerate_key: The auto_regenerate_key of this StorageAccountUpdateParameters.
        :type auto_regenerate_key: bool
        """

        self._auto_regenerate_key = auto_regenerate_key

    @property
    def regeneration_period(self):
        """Gets the regeneration_period of this StorageAccountUpdateParameters.

        The key regeneration time duration specified in ISO-8601 format.

        :return: The regeneration_period of this StorageAccountUpdateParameters.
        :rtype: str
        """
        return self._regeneration_period

    @regeneration_period.setter
    def regeneration_period(self, regeneration_period):
        """Sets the regeneration_period of this StorageAccountUpdateParameters.

        The key regeneration time duration specified in ISO-8601 format.

        :param regeneration_period: The regeneration_period of this StorageAccountUpdateParameters.
        :type regeneration_period: str
        """

        self._regeneration_period = regeneration_period

    @property
    def tags(self):
        """Gets the tags of this StorageAccountUpdateParameters.

        Application specific metadata in the form of key-value pairs.

        :return: The tags of this StorageAccountUpdateParameters.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this StorageAccountUpdateParameters.

        Application specific metadata in the form of key-value pairs.

        :param tags: The tags of this StorageAccountUpdateParameters.
        :type tags: Dict[str, str]
        """

        self._tags = tags
