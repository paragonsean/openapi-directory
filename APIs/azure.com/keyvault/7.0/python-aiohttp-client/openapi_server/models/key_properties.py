# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KeyProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, crv: str=None, exportable: bool=None, key_size: int=None, kty: str=None, reuse_key: bool=None):
        """KeyProperties - a model defined in OpenAPI

        :param crv: The crv of this KeyProperties.
        :param exportable: The exportable of this KeyProperties.
        :param key_size: The key_size of this KeyProperties.
        :param kty: The kty of this KeyProperties.
        :param reuse_key: The reuse_key of this KeyProperties.
        """
        self.openapi_types = {
            'crv': str,
            'exportable': bool,
            'key_size': int,
            'kty': str,
            'reuse_key': bool
        }

        self.attribute_map = {
            'crv': 'crv',
            'exportable': 'exportable',
            'key_size': 'key_size',
            'kty': 'kty',
            'reuse_key': 'reuse_key'
        }

        self._crv = crv
        self._exportable = exportable
        self._key_size = key_size
        self._kty = kty
        self._reuse_key = reuse_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeyProperties of this KeyProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def crv(self):
        """Gets the crv of this KeyProperties.

        Elliptic curve name. For valid values, see JsonWebKeyCurveName.

        :return: The crv of this KeyProperties.
        :rtype: str
        """
        return self._crv

    @crv.setter
    def crv(self, crv):
        """Sets the crv of this KeyProperties.

        Elliptic curve name. For valid values, see JsonWebKeyCurveName.

        :param crv: The crv of this KeyProperties.
        :type crv: str
        """
        allowed_values = ["P-256", "P-384", "P-521", "P-256K"]  # noqa: E501
        if crv not in allowed_values:
            raise ValueError(
                "Invalid value for `crv` ({0}), must be one of {1}"
                .format(crv, allowed_values)
            )

        self._crv = crv

    @property
    def exportable(self):
        """Gets the exportable of this KeyProperties.

        Indicates if the private key can be exported.

        :return: The exportable of this KeyProperties.
        :rtype: bool
        """
        return self._exportable

    @exportable.setter
    def exportable(self, exportable):
        """Sets the exportable of this KeyProperties.

        Indicates if the private key can be exported.

        :param exportable: The exportable of this KeyProperties.
        :type exportable: bool
        """

        self._exportable = exportable

    @property
    def key_size(self):
        """Gets the key_size of this KeyProperties.

        The key size in bits. For example: 2048, 3072, or 4096 for RSA.

        :return: The key_size of this KeyProperties.
        :rtype: int
        """
        return self._key_size

    @key_size.setter
    def key_size(self, key_size):
        """Sets the key_size of this KeyProperties.

        The key size in bits. For example: 2048, 3072, or 4096 for RSA.

        :param key_size: The key_size of this KeyProperties.
        :type key_size: int
        """

        self._key_size = key_size

    @property
    def kty(self):
        """Gets the kty of this KeyProperties.

        The type of key pair to be used for the certificate.

        :return: The kty of this KeyProperties.
        :rtype: str
        """
        return self._kty

    @kty.setter
    def kty(self, kty):
        """Sets the kty of this KeyProperties.

        The type of key pair to be used for the certificate.

        :param kty: The kty of this KeyProperties.
        :type kty: str
        """
        allowed_values = ["EC", "EC-HSM", "RSA", "RSA-HSM", "oct"]  # noqa: E501
        if kty not in allowed_values:
            raise ValueError(
                "Invalid value for `kty` ({0}), must be one of {1}"
                .format(kty, allowed_values)
            )

        self._kty = kty

    @property
    def reuse_key(self):
        """Gets the reuse_key of this KeyProperties.

        Indicates if the same key pair will be used on certificate renewal.

        :return: The reuse_key of this KeyProperties.
        :rtype: bool
        """
        return self._reuse_key

    @reuse_key.setter
    def reuse_key(self, reuse_key):
        """Sets the reuse_key of this KeyProperties.

        Indicates if the same key pair will be used on certificate renewal.

        :param reuse_key: The reuse_key of this KeyProperties.
        :type reuse_key: bool
        """

        self._reuse_key = reuse_key
