/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SecretAttributes from './SecretAttributes';
import SecretBundle from './SecretBundle';

/**
 * The DeletedSecretBundle model module.
 * @module model/DeletedSecretBundle
 * @version 7.0
 */
class DeletedSecretBundle {
    /**
     * Constructs a new <code>DeletedSecretBundle</code>.
     * A Deleted Secret consisting of its previous id, attributes and its tags, as well as information on when it will be purged.
     * @alias module:model/DeletedSecretBundle
     * @implements module:model/SecretBundle
     */
    constructor() { 
        SecretBundle.initialize(this);
        DeletedSecretBundle.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeletedSecretBundle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeletedSecretBundle} obj Optional instance to populate.
     * @return {module:model/DeletedSecretBundle} The populated <code>DeletedSecretBundle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeletedSecretBundle();
            SecretBundle.constructFromObject(data, obj);

            if (data.hasOwnProperty('deletedDate')) {
                obj['deletedDate'] = ApiClient.convertToType(data['deletedDate'], 'Number');
            }
            if (data.hasOwnProperty('recoveryId')) {
                obj['recoveryId'] = ApiClient.convertToType(data['recoveryId'], 'String');
            }
            if (data.hasOwnProperty('scheduledPurgeDate')) {
                obj['scheduledPurgeDate'] = ApiClient.convertToType(data['scheduledPurgeDate'], 'Number');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = SecretAttributes.constructFromObject(data['attributes']);
            }
            if (data.hasOwnProperty('contentType')) {
                obj['contentType'] = ApiClient.convertToType(data['contentType'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kid')) {
                obj['kid'] = ApiClient.convertToType(data['kid'], 'String');
            }
            if (data.hasOwnProperty('managed')) {
                obj['managed'] = ApiClient.convertToType(data['managed'], 'Boolean');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeletedSecretBundle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeletedSecretBundle</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['recoveryId'] && !(typeof data['recoveryId'] === 'string' || data['recoveryId'] instanceof String)) {
            throw new Error("Expected the field `recoveryId` to be a primitive type in the JSON string but got " + data['recoveryId']);
        }
        // validate the optional field `attributes`
        if (data['attributes']) { // data not null
          SecretAttributes.validateJSON(data['attributes']);
        }
        // ensure the json data is a string
        if (data['contentType'] && !(typeof data['contentType'] === 'string' || data['contentType'] instanceof String)) {
            throw new Error("Expected the field `contentType` to be a primitive type in the JSON string but got " + data['contentType']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kid'] && !(typeof data['kid'] === 'string' || data['kid'] instanceof String)) {
            throw new Error("Expected the field `kid` to be a primitive type in the JSON string but got " + data['kid']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * The time when the secret was deleted, in UTC
 * @member {Number} deletedDate
 */
DeletedSecretBundle.prototype['deletedDate'] = undefined;

/**
 * The url of the recovery object, used to identify and recover the deleted secret.
 * @member {String} recoveryId
 */
DeletedSecretBundle.prototype['recoveryId'] = undefined;

/**
 * The time when the secret is scheduled to be purged, in UTC
 * @member {Number} scheduledPurgeDate
 */
DeletedSecretBundle.prototype['scheduledPurgeDate'] = undefined;

/**
 * @member {module:model/SecretAttributes} attributes
 */
DeletedSecretBundle.prototype['attributes'] = undefined;

/**
 * The content type of the secret.
 * @member {String} contentType
 */
DeletedSecretBundle.prototype['contentType'] = undefined;

/**
 * The secret id.
 * @member {String} id
 */
DeletedSecretBundle.prototype['id'] = undefined;

/**
 * If this is a secret backing a KV certificate, then this field specifies the corresponding key backing the KV certificate.
 * @member {String} kid
 */
DeletedSecretBundle.prototype['kid'] = undefined;

/**
 * True if the secret's lifetime is managed by key vault. If this is a secret backing a certificate, then managed will be true.
 * @member {Boolean} managed
 */
DeletedSecretBundle.prototype['managed'] = undefined;

/**
 * Application specific metadata in the form of key-value pairs.
 * @member {Object.<String, String>} tags
 */
DeletedSecretBundle.prototype['tags'] = undefined;

/**
 * The secret value.
 * @member {String} value
 */
DeletedSecretBundle.prototype['value'] = undefined;


// Implement SecretBundle interface:
/**
 * @member {module:model/SecretAttributes} attributes
 */
SecretBundle.prototype['attributes'] = undefined;
/**
 * The content type of the secret.
 * @member {String} contentType
 */
SecretBundle.prototype['contentType'] = undefined;
/**
 * The secret id.
 * @member {String} id
 */
SecretBundle.prototype['id'] = undefined;
/**
 * If this is a secret backing a KV certificate, then this field specifies the corresponding key backing the KV certificate.
 * @member {String} kid
 */
SecretBundle.prototype['kid'] = undefined;
/**
 * True if the secret's lifetime is managed by key vault. If this is a secret backing a certificate, then managed will be true.
 * @member {Boolean} managed
 */
SecretBundle.prototype['managed'] = undefined;
/**
 * Application specific metadata in the form of key-value pairs.
 * @member {Object.<String, String>} tags
 */
SecretBundle.prototype['tags'] = undefined;
/**
 * The secret value.
 * @member {String} value
 */
SecretBundle.prototype['value'] = undefined;




export default DeletedSecretBundle;

