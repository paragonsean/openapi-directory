/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IssuerAttributes from './IssuerAttributes';
import IssuerCredentials from './IssuerCredentials';
import OrganizationDetails from './OrganizationDetails';

/**
 * The CertificateIssuerSetParameters model module.
 * @module model/CertificateIssuerSetParameters
 * @version 7.0
 */
class CertificateIssuerSetParameters {
    /**
     * Constructs a new <code>CertificateIssuerSetParameters</code>.
     * The certificate issuer set parameters.
     * @alias module:model/CertificateIssuerSetParameters
     * @param provider {String} The issuer provider.
     */
    constructor(provider) { 
        
        CertificateIssuerSetParameters.initialize(this, provider);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, provider) { 
        obj['provider'] = provider;
    }

    /**
     * Constructs a <code>CertificateIssuerSetParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateIssuerSetParameters} obj Optional instance to populate.
     * @return {module:model/CertificateIssuerSetParameters} The populated <code>CertificateIssuerSetParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateIssuerSetParameters();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = IssuerAttributes.constructFromObject(data['attributes']);
            }
            if (data.hasOwnProperty('credentials')) {
                obj['credentials'] = IssuerCredentials.constructFromObject(data['credentials']);
            }
            if (data.hasOwnProperty('org_details')) {
                obj['org_details'] = OrganizationDetails.constructFromObject(data['org_details']);
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateIssuerSetParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateIssuerSetParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CertificateIssuerSetParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `attributes`
        if (data['attributes']) { // data not null
          IssuerAttributes.validateJSON(data['attributes']);
        }
        // validate the optional field `credentials`
        if (data['credentials']) { // data not null
          IssuerCredentials.validateJSON(data['credentials']);
        }
        // validate the optional field `org_details`
        if (data['org_details']) { // data not null
          OrganizationDetails.validateJSON(data['org_details']);
        }
        // ensure the json data is a string
        if (data['provider'] && !(typeof data['provider'] === 'string' || data['provider'] instanceof String)) {
            throw new Error("Expected the field `provider` to be a primitive type in the JSON string but got " + data['provider']);
        }

        return true;
    }


}

CertificateIssuerSetParameters.RequiredProperties = ["provider"];

/**
 * @member {module:model/IssuerAttributes} attributes
 */
CertificateIssuerSetParameters.prototype['attributes'] = undefined;

/**
 * @member {module:model/IssuerCredentials} credentials
 */
CertificateIssuerSetParameters.prototype['credentials'] = undefined;

/**
 * @member {module:model/OrganizationDetails} org_details
 */
CertificateIssuerSetParameters.prototype['org_details'] = undefined;

/**
 * The issuer provider.
 * @member {String} provider
 */
CertificateIssuerSetParameters.prototype['provider'] = undefined;






export default CertificateIssuerSetParameters;

