/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KeyAttributes from './KeyAttributes';

/**
 * The KeyUpdateParameters model module.
 * @module model/KeyUpdateParameters
 * @version 7.0
 */
class KeyUpdateParameters {
    /**
     * Constructs a new <code>KeyUpdateParameters</code>.
     * The key update parameters.
     * @alias module:model/KeyUpdateParameters
     */
    constructor() { 
        
        KeyUpdateParameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>KeyUpdateParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KeyUpdateParameters} obj Optional instance to populate.
     * @return {module:model/KeyUpdateParameters} The populated <code>KeyUpdateParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KeyUpdateParameters();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = KeyAttributes.constructFromObject(data['attributes']);
            }
            if (data.hasOwnProperty('key_ops')) {
                obj['key_ops'] = ApiClient.convertToType(data['key_ops'], ['String']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KeyUpdateParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KeyUpdateParameters</code>.
     */
    static validateJSON(data) {
        // validate the optional field `attributes`
        if (data['attributes']) { // data not null
          KeyAttributes.validateJSON(data['attributes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['key_ops'])) {
            throw new Error("Expected the field `key_ops` to be an array in the JSON data but got " + data['key_ops']);
        }

        return true;
    }


}



/**
 * @member {module:model/KeyAttributes} attributes
 */
KeyUpdateParameters.prototype['attributes'] = undefined;

/**
 * Json web key operations. For more information on possible key operations, see JsonWebKeyOperation.
 * @member {Array.<module:model/KeyUpdateParameters.KeyOpsEnum>} key_ops
 */
KeyUpdateParameters.prototype['key_ops'] = undefined;

/**
 * Application specific metadata in the form of key-value pairs.
 * @member {Object.<String, String>} tags
 */
KeyUpdateParameters.prototype['tags'] = undefined;





/**
 * Allowed values for the <code>keyOps</code> property.
 * @enum {String}
 * @readonly
 */
KeyUpdateParameters['KeyOpsEnum'] = {

    /**
     * value: "encrypt"
     * @const
     */
    "encrypt": "encrypt",

    /**
     * value: "decrypt"
     * @const
     */
    "decrypt": "decrypt",

    /**
     * value: "sign"
     * @const
     */
    "sign": "sign",

    /**
     * value: "verify"
     * @const
     */
    "verify": "verify",

    /**
     * value: "wrapKey"
     * @const
     */
    "wrapKey": "wrapKey",

    /**
     * value: "unwrapKey"
     * @const
     */
    "unwrapKey": "unwrapKey"
};



export default KeyUpdateParameters;

