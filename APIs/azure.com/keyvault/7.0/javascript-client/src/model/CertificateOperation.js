/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Error from './Error';
import IssuerParameters from './IssuerParameters';

/**
 * The CertificateOperation model module.
 * @module model/CertificateOperation
 * @version 7.0
 */
class CertificateOperation {
    /**
     * Constructs a new <code>CertificateOperation</code>.
     * A certificate operation is returned in case of asynchronous requests.
     * @alias module:model/CertificateOperation
     */
    constructor() { 
        
        CertificateOperation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CertificateOperation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateOperation} obj Optional instance to populate.
     * @return {module:model/CertificateOperation} The populated <code>CertificateOperation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateOperation();

            if (data.hasOwnProperty('cancellation_requested')) {
                obj['cancellation_requested'] = ApiClient.convertToType(data['cancellation_requested'], 'Boolean');
            }
            if (data.hasOwnProperty('csr')) {
                obj['csr'] = ApiClient.convertToType(data['csr'], 'Blob');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = Error.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('issuer')) {
                obj['issuer'] = IssuerParameters.constructFromObject(data['issuer']);
            }
            if (data.hasOwnProperty('request_id')) {
                obj['request_id'] = ApiClient.convertToType(data['request_id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('status_details')) {
                obj['status_details'] = ApiClient.convertToType(data['status_details'], 'String');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateOperation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateOperation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `error`
        if (data['error']) { // data not null
          Error.validateJSON(data['error']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `issuer`
        if (data['issuer']) { // data not null
          IssuerParameters.validateJSON(data['issuer']);
        }
        // ensure the json data is a string
        if (data['request_id'] && !(typeof data['request_id'] === 'string' || data['request_id'] instanceof String)) {
            throw new Error("Expected the field `request_id` to be a primitive type in the JSON string but got " + data['request_id']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['status_details'] && !(typeof data['status_details'] === 'string' || data['status_details'] instanceof String)) {
            throw new Error("Expected the field `status_details` to be a primitive type in the JSON string but got " + data['status_details']);
        }
        // ensure the json data is a string
        if (data['target'] && !(typeof data['target'] === 'string' || data['target'] instanceof String)) {
            throw new Error("Expected the field `target` to be a primitive type in the JSON string but got " + data['target']);
        }

        return true;
    }


}



/**
 * Indicates if cancellation was requested on the certificate operation.
 * @member {Boolean} cancellation_requested
 */
CertificateOperation.prototype['cancellation_requested'] = undefined;

/**
 * The certificate signing request (CSR) that is being used in the certificate operation.
 * @member {Blob} csr
 */
CertificateOperation.prototype['csr'] = undefined;

/**
 * @member {module:model/Error} error
 */
CertificateOperation.prototype['error'] = undefined;

/**
 * The certificate id.
 * @member {String} id
 */
CertificateOperation.prototype['id'] = undefined;

/**
 * @member {module:model/IssuerParameters} issuer
 */
CertificateOperation.prototype['issuer'] = undefined;

/**
 * Identifier for the certificate operation.
 * @member {String} request_id
 */
CertificateOperation.prototype['request_id'] = undefined;

/**
 * Status of the certificate operation.
 * @member {String} status
 */
CertificateOperation.prototype['status'] = undefined;

/**
 * The status details of the certificate operation.
 * @member {String} status_details
 */
CertificateOperation.prototype['status_details'] = undefined;

/**
 * Location which contains the result of the certificate operation.
 * @member {String} target
 */
CertificateOperation.prototype['target'] = undefined;






export default CertificateOperation;

