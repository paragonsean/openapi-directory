/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attributes from './Attributes';

/**
 * The CertificateAttributes model module.
 * @module model/CertificateAttributes
 * @version 7.0
 */
class CertificateAttributes {
    /**
     * Constructs a new <code>CertificateAttributes</code>.
     * The certificate management attributes.
     * @alias module:model/CertificateAttributes
     * @implements module:model/Attributes
     */
    constructor() { 
        Attributes.initialize(this);
        CertificateAttributes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CertificateAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateAttributes} obj Optional instance to populate.
     * @return {module:model/CertificateAttributes} The populated <code>CertificateAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateAttributes();
            Attributes.constructFromObject(data, obj);

            if (data.hasOwnProperty('recoveryLevel')) {
                obj['recoveryLevel'] = ApiClient.convertToType(data['recoveryLevel'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Number');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('exp')) {
                obj['exp'] = ApiClient.convertToType(data['exp'], 'Number');
            }
            if (data.hasOwnProperty('nbf')) {
                obj['nbf'] = ApiClient.convertToType(data['nbf'], 'Number');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateAttributes</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['recoveryLevel'] && !(typeof data['recoveryLevel'] === 'string' || data['recoveryLevel'] instanceof String)) {
            throw new Error("Expected the field `recoveryLevel` to be a primitive type in the JSON string but got " + data['recoveryLevel']);
        }

        return true;
    }


}



/**
 * Reflects the deletion recovery level currently in effect for certificates in the current vault. If it contains 'Purgeable', the certificate can be permanently deleted by a privileged user; otherwise, only the system can purge the certificate, at the end of the retention interval.
 * @member {module:model/CertificateAttributes.RecoveryLevelEnum} recoveryLevel
 */
CertificateAttributes.prototype['recoveryLevel'] = undefined;

/**
 * Creation time in UTC.
 * @member {Number} created
 */
CertificateAttributes.prototype['created'] = undefined;

/**
 * Determines whether the object is enabled.
 * @member {Boolean} enabled
 */
CertificateAttributes.prototype['enabled'] = undefined;

/**
 * Expiry date in UTC.
 * @member {Number} exp
 */
CertificateAttributes.prototype['exp'] = undefined;

/**
 * Not before date in UTC.
 * @member {Number} nbf
 */
CertificateAttributes.prototype['nbf'] = undefined;

/**
 * Last updated time in UTC.
 * @member {Number} updated
 */
CertificateAttributes.prototype['updated'] = undefined;


// Implement Attributes interface:
/**
 * Creation time in UTC.
 * @member {Number} created
 */
Attributes.prototype['created'] = undefined;
/**
 * Determines whether the object is enabled.
 * @member {Boolean} enabled
 */
Attributes.prototype['enabled'] = undefined;
/**
 * Expiry date in UTC.
 * @member {Number} exp
 */
Attributes.prototype['exp'] = undefined;
/**
 * Not before date in UTC.
 * @member {Number} nbf
 */
Attributes.prototype['nbf'] = undefined;
/**
 * Last updated time in UTC.
 * @member {Number} updated
 */
Attributes.prototype['updated'] = undefined;



/**
 * Allowed values for the <code>recoveryLevel</code> property.
 * @enum {String}
 * @readonly
 */
CertificateAttributes['RecoveryLevelEnum'] = {

    /**
     * value: "Purgeable"
     * @const
     */
    "Purgeable": "Purgeable",

    /**
     * value: "Recoverable+Purgeable"
     * @const
     */
    "Recoverable+Purgeable": "Recoverable+Purgeable",

    /**
     * value: "Recoverable"
     * @const
     */
    "Recoverable": "Recoverable",

    /**
     * value: "Recoverable+ProtectedSubscription"
     * @const
     */
    "Recoverable+ProtectedSubscription": "Recoverable+ProtectedSubscription"
};



export default CertificateAttributes;

