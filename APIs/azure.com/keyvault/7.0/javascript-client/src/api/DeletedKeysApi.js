/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeletedKeyBundle from '../model/DeletedKeyBundle';
import DeletedKeyListResult from '../model/DeletedKeyListResult';
import KeyBundle from '../model/KeyBundle';
import KeyVaultError from '../model/KeyVaultError';

/**
* DeletedKeys service.
* @module api/DeletedKeysApi
* @version 7.0
*/
export default class DeletedKeysApi {

    /**
    * Constructs a new DeletedKeysApi. 
    * @alias module:api/DeletedKeysApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getDeletedKey operation.
     * @callback module:api/DeletedKeysApi~getDeletedKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletedKeyBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the public part of a deleted key.
     * The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/get permission. 
     * @param {String} keyName The name of the key.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DeletedKeysApi~getDeletedKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletedKeyBundle}
     */
    getDeletedKey(keyName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling getDeletedKey");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getDeletedKey");
      }

      let pathParams = {
        'key-name': keyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeletedKeyBundle;
      return this.apiClient.callApi(
        '/deletedkeys/{key-name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeletedKeys operation.
     * @callback module:api/DeletedKeysApi~getDeletedKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletedKeyListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the deleted keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/list permission.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxresults] Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param {module:api/DeletedKeysApi~getDeletedKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletedKeyListResult}
     */
    getDeletedKeys(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getDeletedKeys");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxresults': opts['maxresults'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeletedKeyListResult;
      return this.apiClient.callApi(
        '/deletedkeys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the purgeDeletedKey operation.
     * @callback module:api/DeletedKeysApi~purgeDeletedKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Permanently deletes the specified key.
     * The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/purge permission.
     * @param {String} keyName The name of the key
     * @param {String} apiVersion Client API version.
     * @param {module:api/DeletedKeysApi~purgeDeletedKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    purgeDeletedKey(keyName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling purgeDeletedKey");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling purgeDeletedKey");
      }

      let pathParams = {
        'key-name': keyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/deletedkeys/{key-name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recoverDeletedKey operation.
     * @callback module:api/DeletedKeysApi~recoverDeletedKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recovers the deleted key to its latest version.
     * The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults. It recovers the deleted key back to its latest version under /keys. An attempt to recover an non-deleted key will return an error. Consider this the inverse of the delete operation on soft-delete enabled vaults. This operation requires the keys/recover permission.
     * @param {String} keyName The name of the deleted key.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DeletedKeysApi~recoverDeletedKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyBundle}
     */
    recoverDeletedKey(keyName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling recoverDeletedKey");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recoverDeletedKey");
      }

      let pathParams = {
        'key-name': keyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = KeyBundle;
      return this.apiClient.callApi(
        '/deletedkeys/{key-name}/recover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
