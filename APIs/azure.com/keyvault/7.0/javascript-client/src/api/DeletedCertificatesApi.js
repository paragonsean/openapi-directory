/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CertificateBundle from '../model/CertificateBundle';
import DeletedCertificateBundle from '../model/DeletedCertificateBundle';
import DeletedCertificateListResult from '../model/DeletedCertificateListResult';
import KeyVaultError from '../model/KeyVaultError';

/**
* DeletedCertificates service.
* @module api/DeletedCertificatesApi
* @version 7.0
*/
export default class DeletedCertificatesApi {

    /**
    * Constructs a new DeletedCertificatesApi. 
    * @alias module:api/DeletedCertificatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getDeletedCertificate operation.
     * @callback module:api/DeletedCertificatesApi~getDeletedCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletedCertificateBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the specified deleted certificate.
     * The GetDeletedCertificate operation retrieves the deleted certificate information plus its attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.
     * @param {String} certificateName The name of the certificate
     * @param {String} apiVersion Client API version.
     * @param {module:api/DeletedCertificatesApi~getDeletedCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletedCertificateBundle}
     */
    getDeletedCertificate(certificateName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'certificateName' is set
      if (certificateName === undefined || certificateName === null) {
        throw new Error("Missing the required parameter 'certificateName' when calling getDeletedCertificate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getDeletedCertificate");
      }

      let pathParams = {
        'certificate-name': certificateName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeletedCertificateBundle;
      return this.apiClient.callApi(
        '/deletedcertificates/{certificate-name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeletedCertificates operation.
     * @callback module:api/DeletedCertificatesApi~getDeletedCertificatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletedCertificateListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the deleted certificates in the specified vault currently available for recovery.
     * The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state and ready for recovery or purging. This operation includes deletion-specific information. This operation requires the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxresults] Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param {Boolean} [includePending] Specifies whether to include certificates which are not completely provisioned.
     * @param {module:api/DeletedCertificatesApi~getDeletedCertificatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletedCertificateListResult}
     */
    getDeletedCertificates(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getDeletedCertificates");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxresults': opts['maxresults'],
        'includePending': opts['includePending'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeletedCertificateListResult;
      return this.apiClient.callApi(
        '/deletedcertificates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the purgeDeletedCertificate operation.
     * @callback module:api/DeletedCertificatesApi~purgeDeletedCertificateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Permanently deletes the specified deleted certificate.
     * The PurgeDeletedCertificate operation performs an irreversible deletion of the specified certificate, without possibility for recovery. The operation is not available if the recovery level does not specify 'Purgeable'. This operation requires the certificate/purge permission.
     * @param {String} certificateName The name of the certificate
     * @param {String} apiVersion Client API version.
     * @param {module:api/DeletedCertificatesApi~purgeDeletedCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    purgeDeletedCertificate(certificateName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'certificateName' is set
      if (certificateName === undefined || certificateName === null) {
        throw new Error("Missing the required parameter 'certificateName' when calling purgeDeletedCertificate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling purgeDeletedCertificate");
      }

      let pathParams = {
        'certificate-name': certificateName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/deletedcertificates/{certificate-name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recoverDeletedCertificate operation.
     * @callback module:api/DeletedCertificatesApi~recoverDeletedCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recovers the deleted certificate back to its current version under /certificates.
     * The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The operation is applicable in vaults enabled for soft-delete, and must be issued during the retention interval (available in the deleted certificate's attributes). This operation requires the certificates/recover permission.
     * @param {String} certificateName The name of the deleted certificate
     * @param {String} apiVersion Client API version.
     * @param {module:api/DeletedCertificatesApi~recoverDeletedCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateBundle}
     */
    recoverDeletedCertificate(certificateName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'certificateName' is set
      if (certificateName === undefined || certificateName === null) {
        throw new Error("Missing the required parameter 'certificateName' when calling recoverDeletedCertificate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recoverDeletedCertificate");
      }

      let pathParams = {
        'certificate-name': certificateName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CertificateBundle;
      return this.apiClient.callApi(
        '/deletedcertificates/{certificate-name}/recover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
