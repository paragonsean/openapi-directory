/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BackupCertificateResult from '../model/BackupCertificateResult';
import CertificateBundle from '../model/CertificateBundle';
import CertificateCreateParameters from '../model/CertificateCreateParameters';
import CertificateImportParameters from '../model/CertificateImportParameters';
import CertificateIssuerListResult from '../model/CertificateIssuerListResult';
import CertificateIssuerSetParameters from '../model/CertificateIssuerSetParameters';
import CertificateIssuerUpdateParameters from '../model/CertificateIssuerUpdateParameters';
import CertificateListResult from '../model/CertificateListResult';
import CertificateMergeParameters from '../model/CertificateMergeParameters';
import CertificateOperation from '../model/CertificateOperation';
import CertificateOperationUpdateParameter from '../model/CertificateOperationUpdateParameter';
import CertificatePolicy from '../model/CertificatePolicy';
import CertificateRestoreParameters from '../model/CertificateRestoreParameters';
import CertificateUpdateParameters from '../model/CertificateUpdateParameters';
import Contacts from '../model/Contacts';
import DeletedCertificateBundle from '../model/DeletedCertificateBundle';
import IssuerBundle from '../model/IssuerBundle';
import KeyVaultError from '../model/KeyVaultError';

/**
* Certificates service.
* @module api/CertificatesApi
* @version 7.0
*/
export default class CertificatesApi {

    /**
    * Constructs a new CertificatesApi. 
    * @alias module:api/CertificatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the backupCertificate operation.
     * @callback module:api/CertificatesApi~backupCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupCertificateResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Backs up the specified certificate.
     * Requests that a backup of the specified certificate be downloaded to the client. All versions of the certificate will be downloaded. This operation requires the certificates/backup permission.
     * @param {String} certificateName The name of the certificate.
     * @param {String} apiVersion Client API version.
     * @param {module:api/CertificatesApi~backupCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupCertificateResult}
     */
    backupCertificate(certificateName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'certificateName' is set
      if (certificateName === undefined || certificateName === null) {
        throw new Error("Missing the required parameter 'certificateName' when calling backupCertificate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling backupCertificate");
      }

      let pathParams = {
        'certificate-name': certificateName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BackupCertificateResult;
      return this.apiClient.callApi(
        '/certificates/{certificate-name}/backup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCertificate operation.
     * @callback module:api/CertificatesApi~createCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateOperation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new certificate.
     * If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.
     * @param {String} certificateName The name of the certificate.
     * @param {String} apiVersion Client API version.
     * @param {module:model/CertificateCreateParameters} parameters The parameters to create a certificate.
     * @param {module:api/CertificatesApi~createCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateOperation}
     */
    createCertificate(certificateName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'certificateName' is set
      if (certificateName === undefined || certificateName === null) {
        throw new Error("Missing the required parameter 'certificateName' when calling createCertificate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling createCertificate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling createCertificate");
      }

      let pathParams = {
        'certificate-name': certificateName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CertificateOperation;
      return this.apiClient.callApi(
        '/certificates/{certificate-name}/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCertificate operation.
     * @callback module:api/CertificatesApi~deleteCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletedCertificateBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a certificate from a specified key vault.
     * Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used to remove individual versions of a certificate object. This operation requires the certificates/delete permission.
     * @param {String} certificateName The name of the certificate.
     * @param {String} apiVersion Client API version.
     * @param {module:api/CertificatesApi~deleteCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletedCertificateBundle}
     */
    deleteCertificate(certificateName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'certificateName' is set
      if (certificateName === undefined || certificateName === null) {
        throw new Error("Missing the required parameter 'certificateName' when calling deleteCertificate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteCertificate");
      }

      let pathParams = {
        'certificate-name': certificateName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeletedCertificateBundle;
      return this.apiClient.callApi(
        '/certificates/{certificate-name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCertificateContacts operation.
     * @callback module:api/CertificatesApi~deleteCertificateContactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contacts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the certificate contacts for a specified key vault.
     * Deletes the certificate contacts for a specified key vault certificate. This operation requires the certificates/managecontacts permission.
     * @param {String} apiVersion Client API version.
     * @param {module:api/CertificatesApi~deleteCertificateContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Contacts}
     */
    deleteCertificateContacts(apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteCertificateContacts");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Contacts;
      return this.apiClient.callApi(
        '/certificates/contacts', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCertificateIssuer operation.
     * @callback module:api/CertificatesApi~deleteCertificateIssuerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssuerBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified certificate issuer.
     * The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the vault. This operation requires the certificates/manageissuers/deleteissuers permission.
     * @param {String} issuerName The name of the issuer.
     * @param {String} apiVersion Client API version.
     * @param {module:api/CertificatesApi~deleteCertificateIssuerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssuerBundle}
     */
    deleteCertificateIssuer(issuerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'issuerName' is set
      if (issuerName === undefined || issuerName === null) {
        throw new Error("Missing the required parameter 'issuerName' when calling deleteCertificateIssuer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteCertificateIssuer");
      }

      let pathParams = {
        'issuer-name': issuerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IssuerBundle;
      return this.apiClient.callApi(
        '/certificates/issuers/{issuer-name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCertificateOperation operation.
     * @callback module:api/CertificatesApi~deleteCertificateOperationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateOperation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the creation operation for a specific certificate.
     * Deletes the creation operation for a specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the certificates/update permission.
     * @param {String} certificateName The name of the certificate.
     * @param {String} apiVersion Client API version.
     * @param {module:api/CertificatesApi~deleteCertificateOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateOperation}
     */
    deleteCertificateOperation(certificateName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'certificateName' is set
      if (certificateName === undefined || certificateName === null) {
        throw new Error("Missing the required parameter 'certificateName' when calling deleteCertificateOperation");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteCertificateOperation");
      }

      let pathParams = {
        'certificate-name': certificateName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CertificateOperation;
      return this.apiClient.callApi(
        '/certificates/{certificate-name}/pending', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCertificate operation.
     * @callback module:api/CertificatesApi~getCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a certificate.
     * Gets information about a specific certificate. This operation requires the certificates/get permission.
     * @param {String} certificateName The name of the certificate in the given vault.
     * @param {String} certificateVersion The version of the certificate.
     * @param {String} apiVersion Client API version.
     * @param {module:api/CertificatesApi~getCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateBundle}
     */
    getCertificate(certificateName, certificateVersion, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'certificateName' is set
      if (certificateName === undefined || certificateName === null) {
        throw new Error("Missing the required parameter 'certificateName' when calling getCertificate");
      }
      // verify the required parameter 'certificateVersion' is set
      if (certificateVersion === undefined || certificateVersion === null) {
        throw new Error("Missing the required parameter 'certificateVersion' when calling getCertificate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getCertificate");
      }

      let pathParams = {
        'certificate-name': certificateName,
        'certificate-version': certificateVersion
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CertificateBundle;
      return this.apiClient.callApi(
        '/certificates/{certificate-name}/{certificate-version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCertificateContacts operation.
     * @callback module:api/CertificatesApi~getCertificateContactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contacts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the certificate contacts for a specified key vault.
     * The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault. This operation requires the certificates/managecontacts permission.
     * @param {String} apiVersion Client API version.
     * @param {module:api/CertificatesApi~getCertificateContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Contacts}
     */
    getCertificateContacts(apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getCertificateContacts");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Contacts;
      return this.apiClient.callApi(
        '/certificates/contacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCertificateIssuer operation.
     * @callback module:api/CertificatesApi~getCertificateIssuerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssuerBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the specified certificate issuer.
     * The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
     * @param {String} issuerName The name of the issuer.
     * @param {String} apiVersion Client API version.
     * @param {module:api/CertificatesApi~getCertificateIssuerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssuerBundle}
     */
    getCertificateIssuer(issuerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'issuerName' is set
      if (issuerName === undefined || issuerName === null) {
        throw new Error("Missing the required parameter 'issuerName' when calling getCertificateIssuer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getCertificateIssuer");
      }

      let pathParams = {
        'issuer-name': issuerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IssuerBundle;
      return this.apiClient.callApi(
        '/certificates/issuers/{issuer-name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCertificateIssuers operation.
     * @callback module:api/CertificatesApi~getCertificateIssuersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateIssuerListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List certificate issuers for a specified key vault.
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxresults] Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param {module:api/CertificatesApi~getCertificateIssuersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateIssuerListResult}
     */
    getCertificateIssuers(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getCertificateIssuers");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxresults': opts['maxresults'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CertificateIssuerListResult;
      return this.apiClient.callApi(
        '/certificates/issuers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCertificateOperation operation.
     * @callback module:api/CertificatesApi~getCertificateOperationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateOperation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the creation operation of a certificate.
     * Gets the creation operation associated with a specified certificate. This operation requires the certificates/get permission.
     * @param {String} certificateName The name of the certificate.
     * @param {String} apiVersion Client API version.
     * @param {module:api/CertificatesApi~getCertificateOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateOperation}
     */
    getCertificateOperation(certificateName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'certificateName' is set
      if (certificateName === undefined || certificateName === null) {
        throw new Error("Missing the required parameter 'certificateName' when calling getCertificateOperation");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getCertificateOperation");
      }

      let pathParams = {
        'certificate-name': certificateName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CertificateOperation;
      return this.apiClient.callApi(
        '/certificates/{certificate-name}/pending', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCertificatePolicy operation.
     * @callback module:api/CertificatesApi~getCertificatePolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificatePolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the policy for a certificate.
     * The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault. This operation requires the certificates/get permission.
     * @param {String} certificateName The name of the certificate in a given key vault.
     * @param {String} apiVersion Client API version.
     * @param {module:api/CertificatesApi~getCertificatePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificatePolicy}
     */
    getCertificatePolicy(certificateName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'certificateName' is set
      if (certificateName === undefined || certificateName === null) {
        throw new Error("Missing the required parameter 'certificateName' when calling getCertificatePolicy");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getCertificatePolicy");
      }

      let pathParams = {
        'certificate-name': certificateName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CertificatePolicy;
      return this.apiClient.callApi(
        '/certificates/{certificate-name}/policy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCertificateVersions operation.
     * @callback module:api/CertificatesApi~getCertificateVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the versions of a certificate.
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission.
     * @param {String} certificateName The name of the certificate.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxresults] Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param {module:api/CertificatesApi~getCertificateVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateListResult}
     */
    getCertificateVersions(certificateName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'certificateName' is set
      if (certificateName === undefined || certificateName === null) {
        throw new Error("Missing the required parameter 'certificateName' when calling getCertificateVersions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getCertificateVersions");
      }

      let pathParams = {
        'certificate-name': certificateName
      };
      let queryParams = {
        'maxresults': opts['maxresults'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CertificateListResult;
      return this.apiClient.callApi(
        '/certificates/{certificate-name}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCertificates operation.
     * @callback module:api/CertificatesApi~getCertificatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List certificates in a specified key vault
     * The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxresults] Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param {Boolean} [includePending] Specifies whether to include certificates which are not completely provisioned.
     * @param {module:api/CertificatesApi~getCertificatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateListResult}
     */
    getCertificates(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getCertificates");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxresults': opts['maxresults'],
        'includePending': opts['includePending'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CertificateListResult;
      return this.apiClient.callApi(
        '/certificates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importCertificate operation.
     * @callback module:api/CertificatesApi~importCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Imports a certificate into a specified key vault.
     * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. This operation requires the certificates/import permission.
     * @param {String} certificateName The name of the certificate.
     * @param {String} apiVersion Client API version.
     * @param {module:model/CertificateImportParameters} parameters The parameters to import the certificate.
     * @param {module:api/CertificatesApi~importCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateBundle}
     */
    importCertificate(certificateName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'certificateName' is set
      if (certificateName === undefined || certificateName === null) {
        throw new Error("Missing the required parameter 'certificateName' when calling importCertificate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling importCertificate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling importCertificate");
      }

      let pathParams = {
        'certificate-name': certificateName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CertificateBundle;
      return this.apiClient.callApi(
        '/certificates/{certificate-name}/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mergeCertificate operation.
     * @callback module:api/CertificatesApi~mergeCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Merges a certificate or a certificate chain with a key pair existing on the server.
     * The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.
     * @param {String} certificateName The name of the certificate.
     * @param {String} apiVersion Client API version.
     * @param {module:model/CertificateMergeParameters} parameters The parameters to merge certificate.
     * @param {module:api/CertificatesApi~mergeCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateBundle}
     */
    mergeCertificate(certificateName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'certificateName' is set
      if (certificateName === undefined || certificateName === null) {
        throw new Error("Missing the required parameter 'certificateName' when calling mergeCertificate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mergeCertificate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling mergeCertificate");
      }

      let pathParams = {
        'certificate-name': certificateName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CertificateBundle;
      return this.apiClient.callApi(
        '/certificates/{certificate-name}/pending/merge', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restoreCertificate operation.
     * @callback module:api/CertificatesApi~restoreCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restores a backed up certificate to a vault.
     * Restores a backed up certificate, and all its versions, to a vault. This operation requires the certificates/restore permission.
     * @param {String} apiVersion Client API version.
     * @param {module:model/CertificateRestoreParameters} parameters The parameters to restore the certificate.
     * @param {module:api/CertificatesApi~restoreCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateBundle}
     */
    restoreCertificate(apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling restoreCertificate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling restoreCertificate");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CertificateBundle;
      return this.apiClient.callApi(
        '/certificates/restore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setCertificateContacts operation.
     * @callback module:api/CertificatesApi~setCertificateContactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contacts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the certificate contacts for the specified key vault.
     * Sets the certificate contacts for the specified key vault. This operation requires the certificates/managecontacts permission.
     * @param {String} apiVersion Client API version.
     * @param {module:model/Contacts} contacts The contacts for the key vault certificate.
     * @param {module:api/CertificatesApi~setCertificateContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Contacts}
     */
    setCertificateContacts(apiVersion, contacts, callback) {
      let postBody = contacts;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling setCertificateContacts");
      }
      // verify the required parameter 'contacts' is set
      if (contacts === undefined || contacts === null) {
        throw new Error("Missing the required parameter 'contacts' when calling setCertificateContacts");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Contacts;
      return this.apiClient.callApi(
        '/certificates/contacts', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setCertificateIssuer operation.
     * @callback module:api/CertificatesApi~setCertificateIssuerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssuerBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the specified certificate issuer.
     * The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission.
     * @param {String} issuerName The name of the issuer.
     * @param {String} apiVersion Client API version.
     * @param {module:model/CertificateIssuerSetParameters} parameter Certificate issuer set parameter.
     * @param {module:api/CertificatesApi~setCertificateIssuerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssuerBundle}
     */
    setCertificateIssuer(issuerName, apiVersion, parameter, callback) {
      let postBody = parameter;
      // verify the required parameter 'issuerName' is set
      if (issuerName === undefined || issuerName === null) {
        throw new Error("Missing the required parameter 'issuerName' when calling setCertificateIssuer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling setCertificateIssuer");
      }
      // verify the required parameter 'parameter' is set
      if (parameter === undefined || parameter === null) {
        throw new Error("Missing the required parameter 'parameter' when calling setCertificateIssuer");
      }

      let pathParams = {
        'issuer-name': issuerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IssuerBundle;
      return this.apiClient.callApi(
        '/certificates/issuers/{issuer-name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCertificate operation.
     * @callback module:api/CertificatesApi~updateCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified attributes associated with the given certificate.
     * The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate's attributes. This operation requires the certificates/update permission.
     * @param {String} certificateName The name of the certificate in the given key vault.
     * @param {String} certificateVersion The version of the certificate.
     * @param {String} apiVersion Client API version.
     * @param {module:model/CertificateUpdateParameters} parameters The parameters for certificate update.
     * @param {module:api/CertificatesApi~updateCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateBundle}
     */
    updateCertificate(certificateName, certificateVersion, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'certificateName' is set
      if (certificateName === undefined || certificateName === null) {
        throw new Error("Missing the required parameter 'certificateName' when calling updateCertificate");
      }
      // verify the required parameter 'certificateVersion' is set
      if (certificateVersion === undefined || certificateVersion === null) {
        throw new Error("Missing the required parameter 'certificateVersion' when calling updateCertificate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling updateCertificate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling updateCertificate");
      }

      let pathParams = {
        'certificate-name': certificateName,
        'certificate-version': certificateVersion
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CertificateBundle;
      return this.apiClient.callApi(
        '/certificates/{certificate-name}/{certificate-version}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCertificateIssuer operation.
     * @callback module:api/CertificatesApi~updateCertificateIssuerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssuerBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified certificate issuer.
     * The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission.
     * @param {String} issuerName The name of the issuer.
     * @param {String} apiVersion Client API version.
     * @param {module:model/CertificateIssuerUpdateParameters} parameter Certificate issuer update parameter.
     * @param {module:api/CertificatesApi~updateCertificateIssuerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssuerBundle}
     */
    updateCertificateIssuer(issuerName, apiVersion, parameter, callback) {
      let postBody = parameter;
      // verify the required parameter 'issuerName' is set
      if (issuerName === undefined || issuerName === null) {
        throw new Error("Missing the required parameter 'issuerName' when calling updateCertificateIssuer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling updateCertificateIssuer");
      }
      // verify the required parameter 'parameter' is set
      if (parameter === undefined || parameter === null) {
        throw new Error("Missing the required parameter 'parameter' when calling updateCertificateIssuer");
      }

      let pathParams = {
        'issuer-name': issuerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IssuerBundle;
      return this.apiClient.callApi(
        '/certificates/issuers/{issuer-name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCertificateOperation operation.
     * @callback module:api/CertificatesApi~updateCertificateOperationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateOperation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a certificate operation.
     * Updates a certificate creation operation that is already in progress. This operation requires the certificates/update permission.
     * @param {String} certificateName The name of the certificate.
     * @param {String} apiVersion Client API version.
     * @param {module:model/CertificateOperationUpdateParameter} certificateOperation The certificate operation response.
     * @param {module:api/CertificatesApi~updateCertificateOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateOperation}
     */
    updateCertificateOperation(certificateName, apiVersion, certificateOperation, callback) {
      let postBody = certificateOperation;
      // verify the required parameter 'certificateName' is set
      if (certificateName === undefined || certificateName === null) {
        throw new Error("Missing the required parameter 'certificateName' when calling updateCertificateOperation");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling updateCertificateOperation");
      }
      // verify the required parameter 'certificateOperation' is set
      if (certificateOperation === undefined || certificateOperation === null) {
        throw new Error("Missing the required parameter 'certificateOperation' when calling updateCertificateOperation");
      }

      let pathParams = {
        'certificate-name': certificateName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CertificateOperation;
      return this.apiClient.callApi(
        '/certificates/{certificate-name}/pending', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCertificatePolicy operation.
     * @callback module:api/CertificatesApi~updateCertificatePolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificatePolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the policy for a certificate.
     * Set specified members in the certificate policy. Leave others as null. This operation requires the certificates/update permission.
     * @param {String} certificateName The name of the certificate in the given vault.
     * @param {String} apiVersion Client API version.
     * @param {module:model/CertificatePolicy} certificatePolicy The policy for the certificate.
     * @param {module:api/CertificatesApi~updateCertificatePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificatePolicy}
     */
    updateCertificatePolicy(certificateName, apiVersion, certificatePolicy, callback) {
      let postBody = certificatePolicy;
      // verify the required parameter 'certificateName' is set
      if (certificateName === undefined || certificateName === null) {
        throw new Error("Missing the required parameter 'certificateName' when calling updateCertificatePolicy");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling updateCertificatePolicy");
      }
      // verify the required parameter 'certificatePolicy' is set
      if (certificatePolicy === undefined || certificatePolicy === null) {
        throw new Error("Missing the required parameter 'certificatePolicy' when calling updateCertificatePolicy");
      }

      let pathParams = {
        'certificate-name': certificateName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CertificatePolicy;
      return this.apiClient.callApi(
        '/certificates/{certificate-name}/policy', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
