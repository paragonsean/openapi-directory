/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BackupKeyResult from '../model/BackupKeyResult';
import DeletedKeyBundle from '../model/DeletedKeyBundle';
import KeyBundle from '../model/KeyBundle';
import KeyCreateParameters from '../model/KeyCreateParameters';
import KeyImportParameters from '../model/KeyImportParameters';
import KeyListResult from '../model/KeyListResult';
import KeyOperationResult from '../model/KeyOperationResult';
import KeyOperationsParameters from '../model/KeyOperationsParameters';
import KeyRestoreParameters from '../model/KeyRestoreParameters';
import KeySignParameters from '../model/KeySignParameters';
import KeyUpdateParameters from '../model/KeyUpdateParameters';
import KeyVaultError from '../model/KeyVaultError';
import KeyVerifyParameters from '../model/KeyVerifyParameters';
import KeyVerifyResult from '../model/KeyVerifyResult';

/**
* Keys service.
* @module api/KeysApi
* @version 7.0
*/
export default class KeysApi {

    /**
    * Constructs a new KeysApi. 
    * @alias module:api/KeysApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the backupKey operation.
     * @callback module:api/KeysApi~backupKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupKeyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Requests that a backup of the specified key be downloaded to the client.
     * The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does NOT return key material in a form that can be used outside the Azure Key Vault system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to allow a client to GENERATE a key in one Azure Key Vault instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance. The BACKUP operation may be used to export, in protected form, any key type from Azure Key Vault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed within geographical boundaries only; meaning that a BACKUP from one geographical area cannot be restored to another geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical area. This operation requires the key/backup permission.
     * @param {String} keyName The name of the key.
     * @param {String} apiVersion Client API version.
     * @param {module:api/KeysApi~backupKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupKeyResult}
     */
    backupKey(keyName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling backupKey");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling backupKey");
      }

      let pathParams = {
        'key-name': keyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BackupKeyResult;
      return this.apiClient.callApi(
        '/keys/{key-name}/backup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createKey operation.
     * @callback module:api/KeysApi~createKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new key, stores it, then returns key parameters and attributes to the client.
     * The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the keys/create permission.
     * @param {String} keyName The name for the new key. The system will generate the version name for the new key.
     * @param {String} apiVersion Client API version.
     * @param {module:model/KeyCreateParameters} parameters The parameters to create a key.
     * @param {module:api/KeysApi~createKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyBundle}
     */
    createKey(keyName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling createKey");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling createKey");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling createKey");
      }

      let pathParams = {
        'key-name': keyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KeyBundle;
      return this.apiClient.callApi(
        '/keys/{key-name}/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the decrypt operation.
     * @callback module:api/KeysApi~decryptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyOperationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Decrypts a single block of encrypted data.
     * The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key and specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The DECRYPT operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/decrypt permission.
     * @param {String} keyName The name of the key.
     * @param {String} keyVersion The version of the key.
     * @param {String} apiVersion Client API version.
     * @param {module:model/KeyOperationsParameters} parameters The parameters for the decryption operation.
     * @param {module:api/KeysApi~decryptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyOperationResult}
     */
    decrypt(keyName, keyVersion, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling decrypt");
      }
      // verify the required parameter 'keyVersion' is set
      if (keyVersion === undefined || keyVersion === null) {
        throw new Error("Missing the required parameter 'keyVersion' when calling decrypt");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling decrypt");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling decrypt");
      }

      let pathParams = {
        'key-name': keyName,
        'key-version': keyVersion
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KeyOperationResult;
      return this.apiClient.callApi(
        '/keys/{key-name}/{key-version}/decrypt', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteKey operation.
     * @callback module:api/KeysApi~deleteKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletedKeyBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a key of any type from storage in Azure Key Vault.
     * The delete key operation cannot be used to remove individual versions of a key. This operation removes the cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the keys/delete permission.
     * @param {String} keyName The name of the key to delete.
     * @param {String} apiVersion Client API version.
     * @param {module:api/KeysApi~deleteKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletedKeyBundle}
     */
    deleteKey(keyName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling deleteKey");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteKey");
      }

      let pathParams = {
        'key-name': keyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeletedKeyBundle;
      return this.apiClient.callApi(
        '/keys/{key-name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the encrypt operation.
     * @callback module:api/KeysApi~encryptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyOperationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault.
     * The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is stored in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The ENCRYPT operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/encrypt permission.
     * @param {String} keyName The name of the key.
     * @param {String} keyVersion The version of the key.
     * @param {String} apiVersion Client API version.
     * @param {module:model/KeyOperationsParameters} parameters The parameters for the encryption operation.
     * @param {module:api/KeysApi~encryptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyOperationResult}
     */
    encrypt(keyName, keyVersion, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling encrypt");
      }
      // verify the required parameter 'keyVersion' is set
      if (keyVersion === undefined || keyVersion === null) {
        throw new Error("Missing the required parameter 'keyVersion' when calling encrypt");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling encrypt");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling encrypt");
      }

      let pathParams = {
        'key-name': keyName,
        'key-version': keyVersion
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KeyOperationResult;
      return this.apiClient.callApi(
        '/keys/{key-name}/{key-version}/encrypt', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getKey operation.
     * @callback module:api/KeysApi~getKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the public part of a stored key.
     * The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is released in the response. This operation requires the keys/get permission.
     * @param {String} keyName The name of the key to get.
     * @param {String} keyVersion Adding the version parameter retrieves a specific version of a key.
     * @param {String} apiVersion Client API version.
     * @param {module:api/KeysApi~getKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyBundle}
     */
    getKey(keyName, keyVersion, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling getKey");
      }
      // verify the required parameter 'keyVersion' is set
      if (keyVersion === undefined || keyVersion === null) {
        throw new Error("Missing the required parameter 'keyVersion' when calling getKey");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getKey");
      }

      let pathParams = {
        'key-name': keyName,
        'key-version': keyVersion
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = KeyBundle;
      return this.apiClient.callApi(
        '/keys/{key-name}/{key-version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getKeyVersions operation.
     * @callback module:api/KeysApi~getKeyVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of individual key versions with the same key name.
     * The full key identifier, attributes, and tags are provided in the response. This operation requires the keys/list permission.
     * @param {String} keyName The name of the key.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxresults] Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param {module:api/KeysApi~getKeyVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyListResult}
     */
    getKeyVersions(keyName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling getKeyVersions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getKeyVersions");
      }

      let pathParams = {
        'key-name': keyName
      };
      let queryParams = {
        'maxresults': opts['maxresults'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = KeyListResult;
      return this.apiClient.callApi(
        '/keys/{key-name}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getKeys operation.
     * @callback module:api/KeysApi~getKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier, attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. This operation requires the keys/list permission.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxresults] Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param {module:api/KeysApi~getKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyListResult}
     */
    getKeys(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getKeys");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxresults': opts['maxresults'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = KeyListResult;
      return this.apiClient.callApi(
        '/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importKey operation.
     * @callback module:api/KeysApi~importKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Imports an externally created key, stores it, and returns key parameters and attributes to the client.
     * The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the keys/import permission.
     * @param {String} keyName Name for the imported key.
     * @param {String} apiVersion Client API version.
     * @param {module:model/KeyImportParameters} parameters The parameters to import a key.
     * @param {module:api/KeysApi~importKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyBundle}
     */
    importKey(keyName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling importKey");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling importKey");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling importKey");
      }

      let pathParams = {
        'key-name': keyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KeyBundle;
      return this.apiClient.callApi(
        '/keys/{key-name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restoreKey operation.
     * @callback module:api/KeysApi~restoreKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restores a backed up key to a vault.
     * Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and access control policies. The RESTORE operation may be used to import a previously backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when it was backed up. If the key name is not available in the target Key Vault, the RESTORE operation will be rejected. While the key name is retained during restore, the final key identifier will change if the key is restored to a different vault. Restore will restore all versions and preserve version identifiers. The RESTORE operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as the source Key Vault The user must have RESTORE permission in the target Key Vault. This operation requires the keys/restore permission.
     * @param {String} apiVersion Client API version.
     * @param {module:model/KeyRestoreParameters} parameters The parameters to restore the key.
     * @param {module:api/KeysApi~restoreKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyBundle}
     */
    restoreKey(apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling restoreKey");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling restoreKey");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KeyBundle;
      return this.apiClient.callApi(
        '/keys/restore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sign operation.
     * @callback module:api/KeysApi~signCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyOperationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a signature from a digest using the specified key.
     * The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault since this operation uses the private portion of the key. This operation requires the keys/sign permission.
     * @param {String} keyName The name of the key.
     * @param {String} keyVersion The version of the key.
     * @param {String} apiVersion Client API version.
     * @param {module:model/KeySignParameters} parameters The parameters for the signing operation.
     * @param {module:api/KeysApi~signCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyOperationResult}
     */
    sign(keyName, keyVersion, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling sign");
      }
      // verify the required parameter 'keyVersion' is set
      if (keyVersion === undefined || keyVersion === null) {
        throw new Error("Missing the required parameter 'keyVersion' when calling sign");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sign");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling sign");
      }

      let pathParams = {
        'key-name': keyName,
        'key-version': keyVersion
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KeyOperationResult;
      return this.apiClient.callApi(
        '/keys/{key-name}/{key-version}/sign', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unwrapKey operation.
     * @callback module:api/KeysApi~unwrapKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyOperationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unwraps a symmetric key using the specified key that was initially used for wrapping that key.
     * The UNWRAP operation supports decryption of a symmetric key using the target key encryption key. This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/unwrapKey permission.
     * @param {String} keyName The name of the key.
     * @param {String} keyVersion The version of the key.
     * @param {String} apiVersion Client API version.
     * @param {module:model/KeyOperationsParameters} parameters The parameters for the key operation.
     * @param {module:api/KeysApi~unwrapKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyOperationResult}
     */
    unwrapKey(keyName, keyVersion, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling unwrapKey");
      }
      // verify the required parameter 'keyVersion' is set
      if (keyVersion === undefined || keyVersion === null) {
        throw new Error("Missing the required parameter 'keyVersion' when calling unwrapKey");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling unwrapKey");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling unwrapKey");
      }

      let pathParams = {
        'key-name': keyName,
        'key-version': keyVersion
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KeyOperationResult;
      return this.apiClient.callApi(
        '/keys/{key-name}/{key-version}/unwrapkey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateKey operation.
     * @callback module:api/KeysApi~updateKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.
     * In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed. This operation requires the keys/update permission.
     * @param {String} keyName The name of key to update.
     * @param {String} keyVersion The version of the key to update.
     * @param {String} apiVersion Client API version.
     * @param {module:model/KeyUpdateParameters} parameters The parameters of the key to update.
     * @param {module:api/KeysApi~updateKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyBundle}
     */
    updateKey(keyName, keyVersion, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling updateKey");
      }
      // verify the required parameter 'keyVersion' is set
      if (keyVersion === undefined || keyVersion === null) {
        throw new Error("Missing the required parameter 'keyVersion' when calling updateKey");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling updateKey");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling updateKey");
      }

      let pathParams = {
        'key-name': keyName,
        'key-version': keyVersion
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KeyBundle;
      return this.apiClient.callApi(
        '/keys/{key-name}/{key-version}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verify operation.
     * @callback module:api/KeysApi~verifyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyVerifyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verifies a signature using a specified key.
     * The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification can be performed using the public portion of the key but this operation is supported as a convenience for callers that only have a key-reference and not the public portion of the key. This operation requires the keys/verify permission.
     * @param {String} keyName The name of the key.
     * @param {String} keyVersion The version of the key.
     * @param {String} apiVersion Client API version.
     * @param {module:model/KeyVerifyParameters} parameters The parameters for verify operations.
     * @param {module:api/KeysApi~verifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyVerifyResult}
     */
    verify(keyName, keyVersion, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling verify");
      }
      // verify the required parameter 'keyVersion' is set
      if (keyVersion === undefined || keyVersion === null) {
        throw new Error("Missing the required parameter 'keyVersion' when calling verify");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling verify");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling verify");
      }

      let pathParams = {
        'key-name': keyName,
        'key-version': keyVersion
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KeyVerifyResult;
      return this.apiClient.callApi(
        '/keys/{key-name}/{key-version}/verify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the wrapKey operation.
     * @callback module:api/KeysApi~wrapKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyOperationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Wraps a symmetric key using a specified key.
     * The WRAP operation supports encryption of a symmetric key using a key encryption key that has previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using the public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/wrapKey permission.
     * @param {String} keyName The name of the key.
     * @param {String} keyVersion The version of the key.
     * @param {String} apiVersion Client API version.
     * @param {module:model/KeyOperationsParameters} parameters The parameters for wrap operation.
     * @param {module:api/KeysApi~wrapKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyOperationResult}
     */
    wrapKey(keyName, keyVersion, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling wrapKey");
      }
      // verify the required parameter 'keyVersion' is set
      if (keyVersion === undefined || keyVersion === null) {
        throw new Error("Missing the required parameter 'keyVersion' when calling wrapKey");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling wrapKey");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling wrapKey");
      }

      let pathParams = {
        'key-name': keyName,
        'key-version': keyVersion
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KeyOperationResult;
      return this.apiClient.callApi(
        '/keys/{key-name}/{key-version}/wrapkey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
