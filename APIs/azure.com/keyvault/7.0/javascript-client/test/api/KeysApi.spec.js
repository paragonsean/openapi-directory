/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KeyVaultClient);
  }
}(this, function(expect, KeyVaultClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KeyVaultClient.KeysApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('KeysApi', function() {
    describe('backupKey', function() {
      it('should call backupKey successfully', function(done) {
        //uncomment below and update the code to test backupKey
        //instance.backupKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createKey', function() {
      it('should call createKey successfully', function(done) {
        //uncomment below and update the code to test createKey
        //instance.createKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('decrypt', function() {
      it('should call decrypt successfully', function(done) {
        //uncomment below and update the code to test decrypt
        //instance.decrypt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteKey', function() {
      it('should call deleteKey successfully', function(done) {
        //uncomment below and update the code to test deleteKey
        //instance.deleteKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('encrypt', function() {
      it('should call encrypt successfully', function(done) {
        //uncomment below and update the code to test encrypt
        //instance.encrypt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getKey', function() {
      it('should call getKey successfully', function(done) {
        //uncomment below and update the code to test getKey
        //instance.getKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getKeyVersions', function() {
      it('should call getKeyVersions successfully', function(done) {
        //uncomment below and update the code to test getKeyVersions
        //instance.getKeyVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getKeys', function() {
      it('should call getKeys successfully', function(done) {
        //uncomment below and update the code to test getKeys
        //instance.getKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importKey', function() {
      it('should call importKey successfully', function(done) {
        //uncomment below and update the code to test importKey
        //instance.importKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restoreKey', function() {
      it('should call restoreKey successfully', function(done) {
        //uncomment below and update the code to test restoreKey
        //instance.restoreKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sign', function() {
      it('should call sign successfully', function(done) {
        //uncomment below and update the code to test sign
        //instance.sign(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unwrapKey', function() {
      it('should call unwrapKey successfully', function(done) {
        //uncomment below and update the code to test unwrapKey
        //instance.unwrapKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateKey', function() {
      it('should call updateKey successfully', function(done) {
        //uncomment below and update the code to test updateKey
        //instance.updateKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('verify', function() {
      it('should call verify successfully', function(done) {
        //uncomment below and update the code to test verify
        //instance.verify(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('wrapKey', function() {
      it('should call wrapKey successfully', function(done) {
        //uncomment below and update the code to test wrapKey
        //instance.wrapKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
