/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KeyVaultClient);
  }
}(this, function(expect, KeyVaultClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KeyVaultClient.JsonWebKey();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('JsonWebKey', function() {
    it('should create an instance of JsonWebKey', function() {
      // uncomment below and update the code to test JsonWebKey
      //var instance = new KeyVaultClient.JsonWebKey();
      //expect(instance).to.be.a(KeyVaultClient.JsonWebKey);
    });

    it('should have the property crv (base name: "crv")', function() {
      // uncomment below and update the code to test the property crv
      //var instance = new KeyVaultClient.JsonWebKey();
      //expect(instance).to.be();
    });

    it('should have the property d (base name: "d")', function() {
      // uncomment below and update the code to test the property d
      //var instance = new KeyVaultClient.JsonWebKey();
      //expect(instance).to.be();
    });

    it('should have the property dp (base name: "dp")', function() {
      // uncomment below and update the code to test the property dp
      //var instance = new KeyVaultClient.JsonWebKey();
      //expect(instance).to.be();
    });

    it('should have the property dq (base name: "dq")', function() {
      // uncomment below and update the code to test the property dq
      //var instance = new KeyVaultClient.JsonWebKey();
      //expect(instance).to.be();
    });

    it('should have the property e (base name: "e")', function() {
      // uncomment below and update the code to test the property e
      //var instance = new KeyVaultClient.JsonWebKey();
      //expect(instance).to.be();
    });

    it('should have the property k (base name: "k")', function() {
      // uncomment below and update the code to test the property k
      //var instance = new KeyVaultClient.JsonWebKey();
      //expect(instance).to.be();
    });

    it('should have the property keyHsm (base name: "key_hsm")', function() {
      // uncomment below and update the code to test the property keyHsm
      //var instance = new KeyVaultClient.JsonWebKey();
      //expect(instance).to.be();
    });

    it('should have the property keyOps (base name: "key_ops")', function() {
      // uncomment below and update the code to test the property keyOps
      //var instance = new KeyVaultClient.JsonWebKey();
      //expect(instance).to.be();
    });

    it('should have the property kid (base name: "kid")', function() {
      // uncomment below and update the code to test the property kid
      //var instance = new KeyVaultClient.JsonWebKey();
      //expect(instance).to.be();
    });

    it('should have the property kty (base name: "kty")', function() {
      // uncomment below and update the code to test the property kty
      //var instance = new KeyVaultClient.JsonWebKey();
      //expect(instance).to.be();
    });

    it('should have the property n (base name: "n")', function() {
      // uncomment below and update the code to test the property n
      //var instance = new KeyVaultClient.JsonWebKey();
      //expect(instance).to.be();
    });

    it('should have the property p (base name: "p")', function() {
      // uncomment below and update the code to test the property p
      //var instance = new KeyVaultClient.JsonWebKey();
      //expect(instance).to.be();
    });

    it('should have the property q (base name: "q")', function() {
      // uncomment below and update the code to test the property q
      //var instance = new KeyVaultClient.JsonWebKey();
      //expect(instance).to.be();
    });

    it('should have the property qi (base name: "qi")', function() {
      // uncomment below and update the code to test the property qi
      //var instance = new KeyVaultClient.JsonWebKey();
      //expect(instance).to.be();
    });

    it('should have the property x (base name: "x")', function() {
      // uncomment below and update the code to test the property x
      //var instance = new KeyVaultClient.JsonWebKey();
      //expect(instance).to.be();
    });

    it('should have the property y (base name: "y")', function() {
      // uncomment below and update the code to test the property y
      //var instance = new KeyVaultClient.JsonWebKey();
      //expect(instance).to.be();
    });

  });

}));
