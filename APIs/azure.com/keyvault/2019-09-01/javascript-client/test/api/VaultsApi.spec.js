/**
 * KeyVaultManagementClient
 * The Azure management API provides a RESTful set of web services that interact with Azure Key Vault.
 *
 * The version of the OpenAPI document: 2019-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KeyVaultManagementClient);
  }
}(this, function(expect, KeyVaultManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KeyVaultManagementClient.VaultsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VaultsApi', function() {
    describe('vaultsCheckNameAvailability', function() {
      it('should call vaultsCheckNameAvailability successfully', function(done) {
        //uncomment below and update the code to test vaultsCheckNameAvailability
        //instance.vaultsCheckNameAvailability(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultsCreateOrUpdate', function() {
      it('should call vaultsCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test vaultsCreateOrUpdate
        //instance.vaultsCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultsDelete', function() {
      it('should call vaultsDelete successfully', function(done) {
        //uncomment below and update the code to test vaultsDelete
        //instance.vaultsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultsGet', function() {
      it('should call vaultsGet successfully', function(done) {
        //uncomment below and update the code to test vaultsGet
        //instance.vaultsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultsGetDeleted', function() {
      it('should call vaultsGetDeleted successfully', function(done) {
        //uncomment below and update the code to test vaultsGetDeleted
        //instance.vaultsGetDeleted(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultsList', function() {
      it('should call vaultsList successfully', function(done) {
        //uncomment below and update the code to test vaultsList
        //instance.vaultsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultsListByResourceGroup', function() {
      it('should call vaultsListByResourceGroup successfully', function(done) {
        //uncomment below and update the code to test vaultsListByResourceGroup
        //instance.vaultsListByResourceGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultsListBySubscription', function() {
      it('should call vaultsListBySubscription successfully', function(done) {
        //uncomment below and update the code to test vaultsListBySubscription
        //instance.vaultsListBySubscription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultsListDeleted', function() {
      it('should call vaultsListDeleted successfully', function(done) {
        //uncomment below and update the code to test vaultsListDeleted
        //instance.vaultsListDeleted(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultsPurgeDeleted', function() {
      it('should call vaultsPurgeDeleted successfully', function(done) {
        //uncomment below and update the code to test vaultsPurgeDeleted
        //instance.vaultsPurgeDeleted(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultsUpdate', function() {
      it('should call vaultsUpdate successfully', function(done) {
        //uncomment below and update the code to test vaultsUpdate
        //instance.vaultsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultsUpdateAccessPolicy', function() {
      it('should call vaultsUpdateAccessPolicy successfully', function(done) {
        //uncomment below and update the code to test vaultsUpdateAccessPolicy
        //instance.vaultsUpdateAccessPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
