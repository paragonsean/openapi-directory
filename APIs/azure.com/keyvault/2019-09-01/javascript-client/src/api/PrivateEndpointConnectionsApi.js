/**
 * KeyVaultManagementClient
 * The Azure management API provides a RESTful set of web services that interact with Azure Key Vault.
 *
 * The version of the OpenAPI document: 2019-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import PrivateEndpointConnection from '../model/PrivateEndpointConnection';

/**
* PrivateEndpointConnections service.
* @module api/PrivateEndpointConnectionsApi
* @version 2019-09-01
*/
export default class PrivateEndpointConnectionsApi {

    /**
    * Constructs a new PrivateEndpointConnectionsApi. 
    * @alias module:api/PrivateEndpointConnectionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the privateEndpointConnectionsDelete operation.
     * @callback module:api/PrivateEndpointConnectionsApi~privateEndpointConnectionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrivateEndpointConnection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified private endpoint connection associated with the key vault.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the resource group that contains the key vault.
     * @param {String} vaultName The name of the key vault.
     * @param {String} privateEndpointConnectionName Name of the private endpoint connection associated with the key vault.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/PrivateEndpointConnectionsApi~privateEndpointConnectionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrivateEndpointConnection}
     */
    privateEndpointConnectionsDelete(subscriptionId, resourceGroupName, vaultName, privateEndpointConnectionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling privateEndpointConnectionsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling privateEndpointConnectionsDelete");
      }
      // verify the required parameter 'vaultName' is set
      if (vaultName === undefined || vaultName === null) {
        throw new Error("Missing the required parameter 'vaultName' when calling privateEndpointConnectionsDelete");
      }
      // verify the required parameter 'privateEndpointConnectionName' is set
      if (privateEndpointConnectionName === undefined || privateEndpointConnectionName === null) {
        throw new Error("Missing the required parameter 'privateEndpointConnectionName' when calling privateEndpointConnectionsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling privateEndpointConnectionsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'vaultName': vaultName,
        'privateEndpointConnectionName': privateEndpointConnectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PrivateEndpointConnection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/privateEndpointConnections/{privateEndpointConnectionName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateEndpointConnectionsGet operation.
     * @callback module:api/PrivateEndpointConnectionsApi~privateEndpointConnectionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrivateEndpointConnection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified private endpoint connection associated with the key vault.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the resource group that contains the key vault.
     * @param {String} vaultName The name of the key vault.
     * @param {String} privateEndpointConnectionName Name of the private endpoint connection associated with the key vault.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/PrivateEndpointConnectionsApi~privateEndpointConnectionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrivateEndpointConnection}
     */
    privateEndpointConnectionsGet(subscriptionId, resourceGroupName, vaultName, privateEndpointConnectionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling privateEndpointConnectionsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling privateEndpointConnectionsGet");
      }
      // verify the required parameter 'vaultName' is set
      if (vaultName === undefined || vaultName === null) {
        throw new Error("Missing the required parameter 'vaultName' when calling privateEndpointConnectionsGet");
      }
      // verify the required parameter 'privateEndpointConnectionName' is set
      if (privateEndpointConnectionName === undefined || privateEndpointConnectionName === null) {
        throw new Error("Missing the required parameter 'privateEndpointConnectionName' when calling privateEndpointConnectionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling privateEndpointConnectionsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'vaultName': vaultName,
        'privateEndpointConnectionName': privateEndpointConnectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PrivateEndpointConnection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/privateEndpointConnections/{privateEndpointConnectionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateEndpointConnectionsPut operation.
     * @callback module:api/PrivateEndpointConnectionsApi~privateEndpointConnectionsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrivateEndpointConnection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified private endpoint connection associated with the key vault.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the resource group that contains the key vault.
     * @param {String} vaultName The name of the key vault.
     * @param {String} privateEndpointConnectionName Name of the private endpoint connection associated with the key vault.
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/PrivateEndpointConnection} properties The intended state of private endpoint connection.
     * @param {module:api/PrivateEndpointConnectionsApi~privateEndpointConnectionsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrivateEndpointConnection}
     */
    privateEndpointConnectionsPut(subscriptionId, resourceGroupName, vaultName, privateEndpointConnectionName, apiVersion, properties, callback) {
      let postBody = properties;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling privateEndpointConnectionsPut");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling privateEndpointConnectionsPut");
      }
      // verify the required parameter 'vaultName' is set
      if (vaultName === undefined || vaultName === null) {
        throw new Error("Missing the required parameter 'vaultName' when calling privateEndpointConnectionsPut");
      }
      // verify the required parameter 'privateEndpointConnectionName' is set
      if (privateEndpointConnectionName === undefined || privateEndpointConnectionName === null) {
        throw new Error("Missing the required parameter 'privateEndpointConnectionName' when calling privateEndpointConnectionsPut");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling privateEndpointConnectionsPut");
      }
      // verify the required parameter 'properties' is set
      if (properties === undefined || properties === null) {
        throw new Error("Missing the required parameter 'properties' when calling privateEndpointConnectionsPut");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'vaultName': vaultName,
        'privateEndpointConnectionName': privateEndpointConnectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PrivateEndpointConnection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/privateEndpointConnections/{privateEndpointConnectionName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
