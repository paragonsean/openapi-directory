/**
 * KeyVaultManagementClient
 * The Azure management API provides a RESTful set of web services that interact with Azure Key Vault.
 *
 * The version of the OpenAPI document: 2019-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Permissions from './Permissions';

/**
 * The AccessPolicyEntry model module.
 * @module model/AccessPolicyEntry
 * @version 2019-09-01
 */
class AccessPolicyEntry {
    /**
     * Constructs a new <code>AccessPolicyEntry</code>.
     * An identity that have access to the key vault. All identities in the array must use the same tenant ID as the key vault&#39;s tenant ID.
     * @alias module:model/AccessPolicyEntry
     * @param objectId {String} The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies.
     * @param permissions {module:model/Permissions} 
     * @param tenantId {String} The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
     */
    constructor(objectId, permissions, tenantId) { 
        
        AccessPolicyEntry.initialize(this, objectId, permissions, tenantId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, objectId, permissions, tenantId) { 
        obj['objectId'] = objectId;
        obj['permissions'] = permissions;
        obj['tenantId'] = tenantId;
    }

    /**
     * Constructs a <code>AccessPolicyEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccessPolicyEntry} obj Optional instance to populate.
     * @return {module:model/AccessPolicyEntry} The populated <code>AccessPolicyEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccessPolicyEntry();

            if (data.hasOwnProperty('applicationId')) {
                obj['applicationId'] = ApiClient.convertToType(data['applicationId'], 'String');
            }
            if (data.hasOwnProperty('objectId')) {
                obj['objectId'] = ApiClient.convertToType(data['objectId'], 'String');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = Permissions.constructFromObject(data['permissions']);
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccessPolicyEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccessPolicyEntry</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AccessPolicyEntry.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['applicationId'] && !(typeof data['applicationId'] === 'string' || data['applicationId'] instanceof String)) {
            throw new Error("Expected the field `applicationId` to be a primitive type in the JSON string but got " + data['applicationId']);
        }
        // ensure the json data is a string
        if (data['objectId'] && !(typeof data['objectId'] === 'string' || data['objectId'] instanceof String)) {
            throw new Error("Expected the field `objectId` to be a primitive type in the JSON string but got " + data['objectId']);
        }
        // validate the optional field `permissions`
        if (data['permissions']) { // data not null
          Permissions.validateJSON(data['permissions']);
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }

        return true;
    }


}

AccessPolicyEntry.RequiredProperties = ["objectId", "permissions", "tenantId"];

/**
 *  Application ID of the client making request on behalf of a principal
 * @member {String} applicationId
 */
AccessPolicyEntry.prototype['applicationId'] = undefined;

/**
 * The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies.
 * @member {String} objectId
 */
AccessPolicyEntry.prototype['objectId'] = undefined;

/**
 * @member {module:model/Permissions} permissions
 */
AccessPolicyEntry.prototype['permissions'] = undefined;

/**
 * The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
 * @member {String} tenantId
 */
AccessPolicyEntry.prototype['tenantId'] = undefined;






export default AccessPolicyEntry;

