# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.access_policy_entry import AccessPolicyEntry
from openapi_server.models.network_rule_set import NetworkRuleSet
from openapi_server.models.sku import Sku
from openapi_server import util


class VaultPatchProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_policies: List[AccessPolicyEntry]=None, create_mode: str=None, enable_purge_protection: bool=None, enable_soft_delete: bool=None, enabled_for_deployment: bool=None, enabled_for_disk_encryption: bool=None, enabled_for_template_deployment: bool=None, network_acls: NetworkRuleSet=None, sku: Sku=None, tenant_id: str=None):
        """VaultPatchProperties - a model defined in OpenAPI

        :param access_policies: The access_policies of this VaultPatchProperties.
        :param create_mode: The create_mode of this VaultPatchProperties.
        :param enable_purge_protection: The enable_purge_protection of this VaultPatchProperties.
        :param enable_soft_delete: The enable_soft_delete of this VaultPatchProperties.
        :param enabled_for_deployment: The enabled_for_deployment of this VaultPatchProperties.
        :param enabled_for_disk_encryption: The enabled_for_disk_encryption of this VaultPatchProperties.
        :param enabled_for_template_deployment: The enabled_for_template_deployment of this VaultPatchProperties.
        :param network_acls: The network_acls of this VaultPatchProperties.
        :param sku: The sku of this VaultPatchProperties.
        :param tenant_id: The tenant_id of this VaultPatchProperties.
        """
        self.openapi_types = {
            'access_policies': List[AccessPolicyEntry],
            'create_mode': str,
            'enable_purge_protection': bool,
            'enable_soft_delete': bool,
            'enabled_for_deployment': bool,
            'enabled_for_disk_encryption': bool,
            'enabled_for_template_deployment': bool,
            'network_acls': NetworkRuleSet,
            'sku': Sku,
            'tenant_id': str
        }

        self.attribute_map = {
            'access_policies': 'accessPolicies',
            'create_mode': 'createMode',
            'enable_purge_protection': 'enablePurgeProtection',
            'enable_soft_delete': 'enableSoftDelete',
            'enabled_for_deployment': 'enabledForDeployment',
            'enabled_for_disk_encryption': 'enabledForDiskEncryption',
            'enabled_for_template_deployment': 'enabledForTemplateDeployment',
            'network_acls': 'networkAcls',
            'sku': 'sku',
            'tenant_id': 'tenantId'
        }

        self._access_policies = access_policies
        self._create_mode = create_mode
        self._enable_purge_protection = enable_purge_protection
        self._enable_soft_delete = enable_soft_delete
        self._enabled_for_deployment = enabled_for_deployment
        self._enabled_for_disk_encryption = enabled_for_disk_encryption
        self._enabled_for_template_deployment = enabled_for_template_deployment
        self._network_acls = network_acls
        self._sku = sku
        self._tenant_id = tenant_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VaultPatchProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VaultPatchProperties of this VaultPatchProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_policies(self):
        """Gets the access_policies of this VaultPatchProperties.

        An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.

        :return: The access_policies of this VaultPatchProperties.
        :rtype: List[AccessPolicyEntry]
        """
        return self._access_policies

    @access_policies.setter
    def access_policies(self, access_policies):
        """Sets the access_policies of this VaultPatchProperties.

        An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.

        :param access_policies: The access_policies of this VaultPatchProperties.
        :type access_policies: List[AccessPolicyEntry]
        """

        self._access_policies = access_policies

    @property
    def create_mode(self):
        """Gets the create_mode of this VaultPatchProperties.

        The vault's create mode to indicate whether the vault need to be recovered or not.

        :return: The create_mode of this VaultPatchProperties.
        :rtype: str
        """
        return self._create_mode

    @create_mode.setter
    def create_mode(self, create_mode):
        """Sets the create_mode of this VaultPatchProperties.

        The vault's create mode to indicate whether the vault need to be recovered or not.

        :param create_mode: The create_mode of this VaultPatchProperties.
        :type create_mode: str
        """
        allowed_values = ["recover", "default"]  # noqa: E501
        if create_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `create_mode` ({0}), must be one of {1}"
                .format(create_mode, allowed_values)
            )

        self._create_mode = create_mode

    @property
    def enable_purge_protection(self):
        """Gets the enable_purge_protection of this VaultPatchProperties.

        Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value.

        :return: The enable_purge_protection of this VaultPatchProperties.
        :rtype: bool
        """
        return self._enable_purge_protection

    @enable_purge_protection.setter
    def enable_purge_protection(self, enable_purge_protection):
        """Sets the enable_purge_protection of this VaultPatchProperties.

        Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value.

        :param enable_purge_protection: The enable_purge_protection of this VaultPatchProperties.
        :type enable_purge_protection: bool
        """

        self._enable_purge_protection = enable_purge_protection

    @property
    def enable_soft_delete(self):
        """Gets the enable_soft_delete of this VaultPatchProperties.

        Property to specify whether the 'soft delete' functionality is enabled for this key vault. If omitted, assume true as default value. Once set to true, cannot be reverted to false.

        :return: The enable_soft_delete of this VaultPatchProperties.
        :rtype: bool
        """
        return self._enable_soft_delete

    @enable_soft_delete.setter
    def enable_soft_delete(self, enable_soft_delete):
        """Sets the enable_soft_delete of this VaultPatchProperties.

        Property to specify whether the 'soft delete' functionality is enabled for this key vault. If omitted, assume true as default value. Once set to true, cannot be reverted to false.

        :param enable_soft_delete: The enable_soft_delete of this VaultPatchProperties.
        :type enable_soft_delete: bool
        """

        self._enable_soft_delete = enable_soft_delete

    @property
    def enabled_for_deployment(self):
        """Gets the enabled_for_deployment of this VaultPatchProperties.

        Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.

        :return: The enabled_for_deployment of this VaultPatchProperties.
        :rtype: bool
        """
        return self._enabled_for_deployment

    @enabled_for_deployment.setter
    def enabled_for_deployment(self, enabled_for_deployment):
        """Sets the enabled_for_deployment of this VaultPatchProperties.

        Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.

        :param enabled_for_deployment: The enabled_for_deployment of this VaultPatchProperties.
        :type enabled_for_deployment: bool
        """

        self._enabled_for_deployment = enabled_for_deployment

    @property
    def enabled_for_disk_encryption(self):
        """Gets the enabled_for_disk_encryption of this VaultPatchProperties.

        Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.

        :return: The enabled_for_disk_encryption of this VaultPatchProperties.
        :rtype: bool
        """
        return self._enabled_for_disk_encryption

    @enabled_for_disk_encryption.setter
    def enabled_for_disk_encryption(self, enabled_for_disk_encryption):
        """Sets the enabled_for_disk_encryption of this VaultPatchProperties.

        Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.

        :param enabled_for_disk_encryption: The enabled_for_disk_encryption of this VaultPatchProperties.
        :type enabled_for_disk_encryption: bool
        """

        self._enabled_for_disk_encryption = enabled_for_disk_encryption

    @property
    def enabled_for_template_deployment(self):
        """Gets the enabled_for_template_deployment of this VaultPatchProperties.

        Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.

        :return: The enabled_for_template_deployment of this VaultPatchProperties.
        :rtype: bool
        """
        return self._enabled_for_template_deployment

    @enabled_for_template_deployment.setter
    def enabled_for_template_deployment(self, enabled_for_template_deployment):
        """Sets the enabled_for_template_deployment of this VaultPatchProperties.

        Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.

        :param enabled_for_template_deployment: The enabled_for_template_deployment of this VaultPatchProperties.
        :type enabled_for_template_deployment: bool
        """

        self._enabled_for_template_deployment = enabled_for_template_deployment

    @property
    def network_acls(self):
        """Gets the network_acls of this VaultPatchProperties.


        :return: The network_acls of this VaultPatchProperties.
        :rtype: NetworkRuleSet
        """
        return self._network_acls

    @network_acls.setter
    def network_acls(self, network_acls):
        """Sets the network_acls of this VaultPatchProperties.


        :param network_acls: The network_acls of this VaultPatchProperties.
        :type network_acls: NetworkRuleSet
        """

        self._network_acls = network_acls

    @property
    def sku(self):
        """Gets the sku of this VaultPatchProperties.


        :return: The sku of this VaultPatchProperties.
        :rtype: Sku
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this VaultPatchProperties.


        :param sku: The sku of this VaultPatchProperties.
        :type sku: Sku
        """

        self._sku = sku

    @property
    def tenant_id(self):
        """Gets the tenant_id of this VaultPatchProperties.

        The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.

        :return: The tenant_id of this VaultPatchProperties.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this VaultPatchProperties.

        The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.

        :param tenant_id: The tenant_id of this VaultPatchProperties.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id
