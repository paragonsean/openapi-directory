/**
 * KeyVaultManagementClient
 * The Azure management API provides a RESTful set of web services that interact with Azure Key Vault.
 *
 * The version of the OpenAPI document: 2019-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrivateLinkServiceConnectionState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrivateLinkServiceConnectionState::OAIPrivateLinkServiceConnectionState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrivateLinkServiceConnectionState::OAIPrivateLinkServiceConnectionState() {
    this->initializeModel();
}

OAIPrivateLinkServiceConnectionState::~OAIPrivateLinkServiceConnectionState() {}

void OAIPrivateLinkServiceConnectionState::initializeModel() {

    m_action_required_isSet = false;
    m_action_required_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIPrivateLinkServiceConnectionState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrivateLinkServiceConnectionState::fromJsonObject(QJsonObject json) {

    m_action_required_isValid = ::OpenAPI::fromJsonValue(m_action_required, json[QString("actionRequired")]);
    m_action_required_isSet = !json[QString("actionRequired")].isNull() && m_action_required_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIPrivateLinkServiceConnectionState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrivateLinkServiceConnectionState::asJsonObject() const {
    QJsonObject obj;
    if (m_action_required_isSet) {
        obj.insert(QString("actionRequired"), ::OpenAPI::toJsonValue(m_action_required));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIPrivateLinkServiceConnectionState::getActionRequired() const {
    return m_action_required;
}
void OAIPrivateLinkServiceConnectionState::setActionRequired(const QString &action_required) {
    m_action_required = action_required;
    m_action_required_isSet = true;
}

bool OAIPrivateLinkServiceConnectionState::is_action_required_Set() const{
    return m_action_required_isSet;
}

bool OAIPrivateLinkServiceConnectionState::is_action_required_Valid() const{
    return m_action_required_isValid;
}

QString OAIPrivateLinkServiceConnectionState::getDescription() const {
    return m_description;
}
void OAIPrivateLinkServiceConnectionState::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPrivateLinkServiceConnectionState::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPrivateLinkServiceConnectionState::is_description_Valid() const{
    return m_description_isValid;
}

OAIPrivateEndpointServiceConnectionStatus OAIPrivateLinkServiceConnectionState::getStatus() const {
    return m_status;
}
void OAIPrivateLinkServiceConnectionState::setStatus(const OAIPrivateEndpointServiceConnectionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPrivateLinkServiceConnectionState::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPrivateLinkServiceConnectionState::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIPrivateLinkServiceConnectionState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrivateLinkServiceConnectionState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
