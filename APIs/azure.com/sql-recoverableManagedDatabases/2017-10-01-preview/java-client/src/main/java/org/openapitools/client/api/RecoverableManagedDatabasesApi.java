/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RecoverableManagedDatabase;
import org.openapitools.client.model.RecoverableManagedDatabaseListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RecoverableManagedDatabasesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RecoverableManagedDatabasesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RecoverableManagedDatabasesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for recoverableManagedDatabasesGet
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param recoverableDatabaseName  (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified recoverable managed database. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidRecoverableDatabaseId - Invalid recoverable database identifier.   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recoverableManagedDatabasesGetCall(String resourceGroupName, String managedInstanceName, String recoverableDatabaseName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/recoverableDatabases/{recoverableDatabaseName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managedInstanceName" + "}", localVarApiClient.escapeString(managedInstanceName.toString()))
            .replace("{" + "recoverableDatabaseName" + "}", localVarApiClient.escapeString(recoverableDatabaseName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recoverableManagedDatabasesGetValidateBeforeCall(String resourceGroupName, String managedInstanceName, String recoverableDatabaseName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling recoverableManagedDatabasesGet(Async)");
        }

        // verify the required parameter 'managedInstanceName' is set
        if (managedInstanceName == null) {
            throw new ApiException("Missing the required parameter 'managedInstanceName' when calling recoverableManagedDatabasesGet(Async)");
        }

        // verify the required parameter 'recoverableDatabaseName' is set
        if (recoverableDatabaseName == null) {
            throw new ApiException("Missing the required parameter 'recoverableDatabaseName' when calling recoverableManagedDatabasesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling recoverableManagedDatabasesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling recoverableManagedDatabasesGet(Async)");
        }

        return recoverableManagedDatabasesGetCall(resourceGroupName, managedInstanceName, recoverableDatabaseName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets a recoverable managed database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param recoverableDatabaseName  (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return RecoverableManagedDatabase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified recoverable managed database. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidRecoverableDatabaseId - Invalid recoverable database identifier.   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public RecoverableManagedDatabase recoverableManagedDatabasesGet(String resourceGroupName, String managedInstanceName, String recoverableDatabaseName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<RecoverableManagedDatabase> localVarResp = recoverableManagedDatabasesGetWithHttpInfo(resourceGroupName, managedInstanceName, recoverableDatabaseName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a recoverable managed database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param recoverableDatabaseName  (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;RecoverableManagedDatabase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified recoverable managed database. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidRecoverableDatabaseId - Invalid recoverable database identifier.   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecoverableManagedDatabase> recoverableManagedDatabasesGetWithHttpInfo(String resourceGroupName, String managedInstanceName, String recoverableDatabaseName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = recoverableManagedDatabasesGetValidateBeforeCall(resourceGroupName, managedInstanceName, recoverableDatabaseName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<RecoverableManagedDatabase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a recoverable managed database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param recoverableDatabaseName  (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified recoverable managed database. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidRecoverableDatabaseId - Invalid recoverable database identifier.   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recoverableManagedDatabasesGetAsync(String resourceGroupName, String managedInstanceName, String recoverableDatabaseName, String subscriptionId, String apiVersion, final ApiCallback<RecoverableManagedDatabase> _callback) throws ApiException {

        okhttp3.Call localVarCall = recoverableManagedDatabasesGetValidateBeforeCall(resourceGroupName, managedInstanceName, recoverableDatabaseName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<RecoverableManagedDatabase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recoverableManagedDatabasesListByInstance
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of recoverable managed databases. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recoverableManagedDatabasesListByInstanceCall(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/recoverableDatabases"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managedInstanceName" + "}", localVarApiClient.escapeString(managedInstanceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recoverableManagedDatabasesListByInstanceValidateBeforeCall(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling recoverableManagedDatabasesListByInstance(Async)");
        }

        // verify the required parameter 'managedInstanceName' is set
        if (managedInstanceName == null) {
            throw new ApiException("Missing the required parameter 'managedInstanceName' when calling recoverableManagedDatabasesListByInstance(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling recoverableManagedDatabasesListByInstance(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling recoverableManagedDatabasesListByInstance(Async)");
        }

        return recoverableManagedDatabasesListByInstanceCall(resourceGroupName, managedInstanceName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets a list of recoverable managed databases.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return RecoverableManagedDatabaseListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of recoverable managed databases. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public RecoverableManagedDatabaseListResult recoverableManagedDatabasesListByInstance(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<RecoverableManagedDatabaseListResult> localVarResp = recoverableManagedDatabasesListByInstanceWithHttpInfo(resourceGroupName, managedInstanceName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of recoverable managed databases.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;RecoverableManagedDatabaseListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of recoverable managed databases. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecoverableManagedDatabaseListResult> recoverableManagedDatabasesListByInstanceWithHttpInfo(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = recoverableManagedDatabasesListByInstanceValidateBeforeCall(resourceGroupName, managedInstanceName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<RecoverableManagedDatabaseListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of recoverable managed databases.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of recoverable managed databases. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recoverableManagedDatabasesListByInstanceAsync(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion, final ApiCallback<RecoverableManagedDatabaseListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = recoverableManagedDatabasesListByInstanceValidateBeforeCall(resourceGroupName, managedInstanceName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<RecoverableManagedDatabaseListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
