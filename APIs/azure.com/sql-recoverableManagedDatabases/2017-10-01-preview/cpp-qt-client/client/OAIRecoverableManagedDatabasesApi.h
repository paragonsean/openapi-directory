/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRecoverableManagedDatabasesApi_H
#define OAI_OAIRecoverableManagedDatabasesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRecoverableManagedDatabase.h"
#include "OAIRecoverableManagedDatabaseListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRecoverableManagedDatabasesApi : public QObject {
    Q_OBJECT

public:
    OAIRecoverableManagedDatabasesApi(const int timeOut = 0);
    ~OAIRecoverableManagedDatabasesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  managed_instance_name QString [required]
    * @param[in]  recoverable_database_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void recoverableManagedDatabasesGet(const QString &resource_group_name, const QString &managed_instance_name, const QString &recoverable_database_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  managed_instance_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void recoverableManagedDatabasesListByInstance(const QString &resource_group_name, const QString &managed_instance_name, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void recoverableManagedDatabasesGetCallback(OAIHttpRequestWorker *worker);
    void recoverableManagedDatabasesListByInstanceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void recoverableManagedDatabasesGetSignal(OAIRecoverableManagedDatabase summary);
    void recoverableManagedDatabasesListByInstanceSignal(OAIRecoverableManagedDatabaseListResult summary);


    void recoverableManagedDatabasesGetSignalFull(OAIHttpRequestWorker *worker, OAIRecoverableManagedDatabase summary);
    void recoverableManagedDatabasesListByInstanceSignalFull(OAIHttpRequestWorker *worker, OAIRecoverableManagedDatabaseListResult summary);

    Q_DECL_DEPRECATED_X("Use recoverableManagedDatabasesGetSignalError() instead")
    void recoverableManagedDatabasesGetSignalE(OAIRecoverableManagedDatabase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recoverableManagedDatabasesGetSignalError(OAIRecoverableManagedDatabase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recoverableManagedDatabasesListByInstanceSignalError() instead")
    void recoverableManagedDatabasesListByInstanceSignalE(OAIRecoverableManagedDatabaseListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recoverableManagedDatabasesListByInstanceSignalError(OAIRecoverableManagedDatabaseListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use recoverableManagedDatabasesGetSignalErrorFull() instead")
    void recoverableManagedDatabasesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recoverableManagedDatabasesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recoverableManagedDatabasesListByInstanceSignalErrorFull() instead")
    void recoverableManagedDatabasesListByInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recoverableManagedDatabasesListByInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
