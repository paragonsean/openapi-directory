/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVirtualClustersApi_H
#define OAI_OAIVirtualClustersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIVirtualCluster.h"
#include "OAIVirtualClusterListResult.h"
#include "OAIVirtualClusterUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVirtualClustersApi : public QObject {
    Q_OBJECT

public:
    OAIVirtualClustersApi(const int timeOut = 0);
    ~OAIVirtualClustersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_cluster_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualClustersDelete(const QString &resource_group_name, const QString &virtual_cluster_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_cluster_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualClustersGet(const QString &resource_group_name, const QString &virtual_cluster_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualClustersList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualClustersListByResourceGroup(const QString &resource_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_cluster_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIVirtualClusterUpdate [required]
    */
    virtual void virtualClustersUpdate(const QString &resource_group_name, const QString &virtual_cluster_name, const QString &subscription_id, const QString &api_version, const OAIVirtualClusterUpdate &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void virtualClustersDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualClustersGetCallback(OAIHttpRequestWorker *worker);
    void virtualClustersListCallback(OAIHttpRequestWorker *worker);
    void virtualClustersListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void virtualClustersUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void virtualClustersDeleteSignal();
    void virtualClustersGetSignal(OAIVirtualCluster summary);
    void virtualClustersListSignal(OAIVirtualClusterListResult summary);
    void virtualClustersListByResourceGroupSignal(OAIVirtualClusterListResult summary);
    void virtualClustersUpdateSignal(OAIVirtualCluster summary);


    void virtualClustersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualClustersGetSignalFull(OAIHttpRequestWorker *worker, OAIVirtualCluster summary);
    void virtualClustersListSignalFull(OAIHttpRequestWorker *worker, OAIVirtualClusterListResult summary);
    void virtualClustersListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIVirtualClusterListResult summary);
    void virtualClustersUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualCluster summary);

    Q_DECL_DEPRECATED_X("Use virtualClustersDeleteSignalError() instead")
    void virtualClustersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualClustersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualClustersGetSignalError() instead")
    void virtualClustersGetSignalE(OAIVirtualCluster summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualClustersGetSignalError(OAIVirtualCluster summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualClustersListSignalError() instead")
    void virtualClustersListSignalE(OAIVirtualClusterListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualClustersListSignalError(OAIVirtualClusterListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualClustersListByResourceGroupSignalError() instead")
    void virtualClustersListByResourceGroupSignalE(OAIVirtualClusterListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualClustersListByResourceGroupSignalError(OAIVirtualClusterListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualClustersUpdateSignalError() instead")
    void virtualClustersUpdateSignalE(OAIVirtualCluster summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualClustersUpdateSignalError(OAIVirtualCluster summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use virtualClustersDeleteSignalErrorFull() instead")
    void virtualClustersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualClustersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualClustersGetSignalErrorFull() instead")
    void virtualClustersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualClustersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualClustersListSignalErrorFull() instead")
    void virtualClustersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualClustersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualClustersListByResourceGroupSignalErrorFull() instead")
    void virtualClustersListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualClustersListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualClustersUpdateSignalErrorFull() instead")
    void virtualClustersUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualClustersUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
