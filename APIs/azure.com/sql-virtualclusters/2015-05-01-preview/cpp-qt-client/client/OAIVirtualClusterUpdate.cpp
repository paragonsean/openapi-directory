/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualClusterUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualClusterUpdate::OAIVirtualClusterUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualClusterUpdate::OAIVirtualClusterUpdate() {
    this->initializeModel();
}

OAIVirtualClusterUpdate::~OAIVirtualClusterUpdate() {}

void OAIVirtualClusterUpdate::initializeModel() {

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIVirtualClusterUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualClusterUpdate::fromJsonObject(QJsonObject json) {

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIVirtualClusterUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualClusterUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIVirtualClusterProperties OAIVirtualClusterUpdate::getProperties() const {
    return m_properties;
}
void OAIVirtualClusterUpdate::setProperties(const OAIVirtualClusterProperties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIVirtualClusterUpdate::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIVirtualClusterUpdate::is_properties_Valid() const{
    return m_properties_isValid;
}

QMap<QString, QString> OAIVirtualClusterUpdate::getTags() const {
    return m_tags;
}
void OAIVirtualClusterUpdate::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIVirtualClusterUpdate::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIVirtualClusterUpdate::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIVirtualClusterUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualClusterUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
