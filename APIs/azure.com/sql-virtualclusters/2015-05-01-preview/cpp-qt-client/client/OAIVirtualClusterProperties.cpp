/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualClusterProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualClusterProperties::OAIVirtualClusterProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualClusterProperties::OAIVirtualClusterProperties() {
    this->initializeModel();
}

OAIVirtualClusterProperties::~OAIVirtualClusterProperties() {}

void OAIVirtualClusterProperties::initializeModel() {

    m_child_resources_isSet = false;
    m_child_resources_isValid = false;

    m_family_isSet = false;
    m_family_isValid = false;

    m_subnet_id_isSet = false;
    m_subnet_id_isValid = false;
}

void OAIVirtualClusterProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualClusterProperties::fromJsonObject(QJsonObject json) {

    m_child_resources_isValid = ::OpenAPI::fromJsonValue(m_child_resources, json[QString("childResources")]);
    m_child_resources_isSet = !json[QString("childResources")].isNull() && m_child_resources_isValid;

    m_family_isValid = ::OpenAPI::fromJsonValue(m_family, json[QString("family")]);
    m_family_isSet = !json[QString("family")].isNull() && m_family_isValid;

    m_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_subnet_id, json[QString("subnetId")]);
    m_subnet_id_isSet = !json[QString("subnetId")].isNull() && m_subnet_id_isValid;
}

QString OAIVirtualClusterProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualClusterProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_child_resources.size() > 0) {
        obj.insert(QString("childResources"), ::OpenAPI::toJsonValue(m_child_resources));
    }
    if (m_family_isSet) {
        obj.insert(QString("family"), ::OpenAPI::toJsonValue(m_family));
    }
    if (m_subnet_id_isSet) {
        obj.insert(QString("subnetId"), ::OpenAPI::toJsonValue(m_subnet_id));
    }
    return obj;
}

QList<QString> OAIVirtualClusterProperties::getChildResources() const {
    return m_child_resources;
}
void OAIVirtualClusterProperties::setChildResources(const QList<QString> &child_resources) {
    m_child_resources = child_resources;
    m_child_resources_isSet = true;
}

bool OAIVirtualClusterProperties::is_child_resources_Set() const{
    return m_child_resources_isSet;
}

bool OAIVirtualClusterProperties::is_child_resources_Valid() const{
    return m_child_resources_isValid;
}

QString OAIVirtualClusterProperties::getFamily() const {
    return m_family;
}
void OAIVirtualClusterProperties::setFamily(const QString &family) {
    m_family = family;
    m_family_isSet = true;
}

bool OAIVirtualClusterProperties::is_family_Set() const{
    return m_family_isSet;
}

bool OAIVirtualClusterProperties::is_family_Valid() const{
    return m_family_isValid;
}

QString OAIVirtualClusterProperties::getSubnetId() const {
    return m_subnet_id;
}
void OAIVirtualClusterProperties::setSubnetId(const QString &subnet_id) {
    m_subnet_id = subnet_id;
    m_subnet_id_isSet = true;
}

bool OAIVirtualClusterProperties::is_subnet_id_Set() const{
    return m_subnet_id_isSet;
}

bool OAIVirtualClusterProperties::is_subnet_id_Valid() const{
    return m_subnet_id_isValid;
}

bool OAIVirtualClusterProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_child_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualClusterProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
