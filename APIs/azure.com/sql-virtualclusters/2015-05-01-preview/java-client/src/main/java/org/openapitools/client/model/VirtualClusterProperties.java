/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of a virtual cluster.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:54.200989-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualClusterProperties {
  public static final String SERIALIZED_NAME_CHILD_RESOURCES = "childResources";
  @SerializedName(SERIALIZED_NAME_CHILD_RESOURCES)
  private List<String> childResources = new ArrayList<>();

  public static final String SERIALIZED_NAME_FAMILY = "family";
  @SerializedName(SERIALIZED_NAME_FAMILY)
  private String family;

  public static final String SERIALIZED_NAME_SUBNET_ID = "subnetId";
  @SerializedName(SERIALIZED_NAME_SUBNET_ID)
  private String subnetId;

  public VirtualClusterProperties() {
  }

  public VirtualClusterProperties(
     List<String> childResources, 
     String subnetId
  ) {
    this();
    this.childResources = childResources;
    this.subnetId = subnetId;
  }

  /**
   * List of resources in this virtual cluster.
   * @return childResources
   */
  @javax.annotation.Nullable
  public List<String> getChildResources() {
    return childResources;
  }



  public VirtualClusterProperties family(String family) {
    this.family = family;
    return this;
  }

  /**
   * If the service has different generations of hardware, for the same SKU, then that can be captured here.
   * @return family
   */
  @javax.annotation.Nullable
  public String getFamily() {
    return family;
  }

  public void setFamily(String family) {
    this.family = family;
  }


  /**
   * Subnet resource ID for the virtual cluster.
   * @return subnetId
   */
  @javax.annotation.Nullable
  public String getSubnetId() {
    return subnetId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualClusterProperties virtualClusterProperties = (VirtualClusterProperties) o;
    return Objects.equals(this.childResources, virtualClusterProperties.childResources) &&
        Objects.equals(this.family, virtualClusterProperties.family) &&
        Objects.equals(this.subnetId, virtualClusterProperties.subnetId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(childResources, family, subnetId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualClusterProperties {\n");
    sb.append("    childResources: ").append(toIndentedString(childResources)).append("\n");
    sb.append("    family: ").append(toIndentedString(family)).append("\n");
    sb.append("    subnetId: ").append(toIndentedString(subnetId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("childResources");
    openapiFields.add("family");
    openapiFields.add("subnetId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualClusterProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualClusterProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualClusterProperties is not found in the empty JSON string", VirtualClusterProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualClusterProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualClusterProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("childResources") != null && !jsonObj.get("childResources").isJsonNull() && !jsonObj.get("childResources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `childResources` to be an array in the JSON string but got `%s`", jsonObj.get("childResources").toString()));
      }
      if ((jsonObj.get("family") != null && !jsonObj.get("family").isJsonNull()) && !jsonObj.get("family").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `family` to be a primitive type in the JSON string but got `%s`", jsonObj.get("family").toString()));
      }
      if ((jsonObj.get("subnetId") != null && !jsonObj.get("subnetId").isJsonNull()) && !jsonObj.get("subnetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subnetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subnetId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualClusterProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualClusterProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualClusterProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualClusterProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualClusterProperties>() {
           @Override
           public void write(JsonWriter out, VirtualClusterProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualClusterProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualClusterProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualClusterProperties
   * @throws IOException if the JSON string is invalid with respect to VirtualClusterProperties
   */
  public static VirtualClusterProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualClusterProperties.class);
  }

  /**
   * Convert an instance of VirtualClusterProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

