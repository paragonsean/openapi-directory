# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VirtualClusterProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, child_resources: List[str]=None, family: str=None, subnet_id: str=None):
        """VirtualClusterProperties - a model defined in OpenAPI

        :param child_resources: The child_resources of this VirtualClusterProperties.
        :param family: The family of this VirtualClusterProperties.
        :param subnet_id: The subnet_id of this VirtualClusterProperties.
        """
        self.openapi_types = {
            'child_resources': List[str],
            'family': str,
            'subnet_id': str
        }

        self.attribute_map = {
            'child_resources': 'childResources',
            'family': 'family',
            'subnet_id': 'subnetId'
        }

        self._child_resources = child_resources
        self._family = family
        self._subnet_id = subnet_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualClusterProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualClusterProperties of this VirtualClusterProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def child_resources(self):
        """Gets the child_resources of this VirtualClusterProperties.

        List of resources in this virtual cluster.

        :return: The child_resources of this VirtualClusterProperties.
        :rtype: List[str]
        """
        return self._child_resources

    @child_resources.setter
    def child_resources(self, child_resources):
        """Sets the child_resources of this VirtualClusterProperties.

        List of resources in this virtual cluster.

        :param child_resources: The child_resources of this VirtualClusterProperties.
        :type child_resources: List[str]
        """

        self._child_resources = child_resources

    @property
    def family(self):
        """Gets the family of this VirtualClusterProperties.

        If the service has different generations of hardware, for the same SKU, then that can be captured here.

        :return: The family of this VirtualClusterProperties.
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this VirtualClusterProperties.

        If the service has different generations of hardware, for the same SKU, then that can be captured here.

        :param family: The family of this VirtualClusterProperties.
        :type family: str
        """

        self._family = family

    @property
    def subnet_id(self):
        """Gets the subnet_id of this VirtualClusterProperties.

        Subnet resource ID for the virtual cluster.

        :return: The subnet_id of this VirtualClusterProperties.
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this VirtualClusterProperties.

        Subnet resource ID for the virtual cluster.

        :param subnet_id: The subnet_id of this VirtualClusterProperties.
        :type subnet_id: str
        """

        self._subnet_id = subnet_id
