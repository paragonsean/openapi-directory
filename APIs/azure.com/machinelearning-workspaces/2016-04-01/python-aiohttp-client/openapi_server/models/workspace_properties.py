# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WorkspaceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_time: str=None, key_vault_identifier_id: str=None, owner_email: str=None, studio_endpoint: str=None, user_storage_account_id: str=None, workspace_id: str=None, workspace_state: str=None, workspace_type: str=None):
        """WorkspaceProperties - a model defined in OpenAPI

        :param creation_time: The creation_time of this WorkspaceProperties.
        :param key_vault_identifier_id: The key_vault_identifier_id of this WorkspaceProperties.
        :param owner_email: The owner_email of this WorkspaceProperties.
        :param studio_endpoint: The studio_endpoint of this WorkspaceProperties.
        :param user_storage_account_id: The user_storage_account_id of this WorkspaceProperties.
        :param workspace_id: The workspace_id of this WorkspaceProperties.
        :param workspace_state: The workspace_state of this WorkspaceProperties.
        :param workspace_type: The workspace_type of this WorkspaceProperties.
        """
        self.openapi_types = {
            'creation_time': str,
            'key_vault_identifier_id': str,
            'owner_email': str,
            'studio_endpoint': str,
            'user_storage_account_id': str,
            'workspace_id': str,
            'workspace_state': str,
            'workspace_type': str
        }

        self.attribute_map = {
            'creation_time': 'creationTime',
            'key_vault_identifier_id': 'keyVaultIdentifierId',
            'owner_email': 'ownerEmail',
            'studio_endpoint': 'studioEndpoint',
            'user_storage_account_id': 'userStorageAccountId',
            'workspace_id': 'workspaceId',
            'workspace_state': 'workspaceState',
            'workspace_type': 'workspaceType'
        }

        self._creation_time = creation_time
        self._key_vault_identifier_id = key_vault_identifier_id
        self._owner_email = owner_email
        self._studio_endpoint = studio_endpoint
        self._user_storage_account_id = user_storage_account_id
        self._workspace_id = workspace_id
        self._workspace_state = workspace_state
        self._workspace_type = workspace_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkspaceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkspaceProperties of this WorkspaceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_time(self):
        """Gets the creation_time of this WorkspaceProperties.

        The creation time for this workspace resource.

        :return: The creation_time of this WorkspaceProperties.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this WorkspaceProperties.

        The creation time for this workspace resource.

        :param creation_time: The creation_time of this WorkspaceProperties.
        :type creation_time: str
        """

        self._creation_time = creation_time

    @property
    def key_vault_identifier_id(self):
        """Gets the key_vault_identifier_id of this WorkspaceProperties.

        The key vault identifier used for encrypted workspaces.

        :return: The key_vault_identifier_id of this WorkspaceProperties.
        :rtype: str
        """
        return self._key_vault_identifier_id

    @key_vault_identifier_id.setter
    def key_vault_identifier_id(self, key_vault_identifier_id):
        """Sets the key_vault_identifier_id of this WorkspaceProperties.

        The key vault identifier used for encrypted workspaces.

        :param key_vault_identifier_id: The key_vault_identifier_id of this WorkspaceProperties.
        :type key_vault_identifier_id: str
        """

        self._key_vault_identifier_id = key_vault_identifier_id

    @property
    def owner_email(self):
        """Gets the owner_email of this WorkspaceProperties.

        The email id of the owner for this workspace.

        :return: The owner_email of this WorkspaceProperties.
        :rtype: str
        """
        return self._owner_email

    @owner_email.setter
    def owner_email(self, owner_email):
        """Sets the owner_email of this WorkspaceProperties.

        The email id of the owner for this workspace.

        :param owner_email: The owner_email of this WorkspaceProperties.
        :type owner_email: str
        """
        if owner_email is None:
            raise ValueError("Invalid value for `owner_email`, must not be `None`")

        self._owner_email = owner_email

    @property
    def studio_endpoint(self):
        """Gets the studio_endpoint of this WorkspaceProperties.

        The regional endpoint for the machine learning studio service which hosts this workspace.

        :return: The studio_endpoint of this WorkspaceProperties.
        :rtype: str
        """
        return self._studio_endpoint

    @studio_endpoint.setter
    def studio_endpoint(self, studio_endpoint):
        """Sets the studio_endpoint of this WorkspaceProperties.

        The regional endpoint for the machine learning studio service which hosts this workspace.

        :param studio_endpoint: The studio_endpoint of this WorkspaceProperties.
        :type studio_endpoint: str
        """

        self._studio_endpoint = studio_endpoint

    @property
    def user_storage_account_id(self):
        """Gets the user_storage_account_id of this WorkspaceProperties.

        The fully qualified arm id of the storage account associated with this workspace.

        :return: The user_storage_account_id of this WorkspaceProperties.
        :rtype: str
        """
        return self._user_storage_account_id

    @user_storage_account_id.setter
    def user_storage_account_id(self, user_storage_account_id):
        """Sets the user_storage_account_id of this WorkspaceProperties.

        The fully qualified arm id of the storage account associated with this workspace.

        :param user_storage_account_id: The user_storage_account_id of this WorkspaceProperties.
        :type user_storage_account_id: str
        """
        if user_storage_account_id is None:
            raise ValueError("Invalid value for `user_storage_account_id`, must not be `None`")

        self._user_storage_account_id = user_storage_account_id

    @property
    def workspace_id(self):
        """Gets the workspace_id of this WorkspaceProperties.

        The immutable id associated with this workspace.

        :return: The workspace_id of this WorkspaceProperties.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this WorkspaceProperties.

        The immutable id associated with this workspace.

        :param workspace_id: The workspace_id of this WorkspaceProperties.
        :type workspace_id: str
        """

        self._workspace_id = workspace_id

    @property
    def workspace_state(self):
        """Gets the workspace_state of this WorkspaceProperties.

        The current state of workspace resource.

        :return: The workspace_state of this WorkspaceProperties.
        :rtype: str
        """
        return self._workspace_state

    @workspace_state.setter
    def workspace_state(self, workspace_state):
        """Sets the workspace_state of this WorkspaceProperties.

        The current state of workspace resource.

        :param workspace_state: The workspace_state of this WorkspaceProperties.
        :type workspace_state: str
        """
        allowed_values = ["Deleted", "Enabled", "Disabled", "Migrated", "Updated", "Registered", "Unregistered"]  # noqa: E501
        if workspace_state not in allowed_values:
            raise ValueError(
                "Invalid value for `workspace_state` ({0}), must be one of {1}"
                .format(workspace_state, allowed_values)
            )

        self._workspace_state = workspace_state

    @property
    def workspace_type(self):
        """Gets the workspace_type of this WorkspaceProperties.

        The type of this workspace.

        :return: The workspace_type of this WorkspaceProperties.
        :rtype: str
        """
        return self._workspace_type

    @workspace_type.setter
    def workspace_type(self, workspace_type):
        """Sets the workspace_type of this WorkspaceProperties.

        The type of this workspace.

        :param workspace_type: The workspace_type of this WorkspaceProperties.
        :type workspace_type: str
        """
        allowed_values = ["Production", "Free", "Anonymous", "PaidStandard", "PaidPremium"]  # noqa: E501
        if workspace_type not in allowed_values:
            raise ValueError(
                "Invalid value for `workspace_type` ({0}), must be one of {1}"
                .format(workspace_type, allowed_values)
            )

        self._workspace_type = workspace_type
