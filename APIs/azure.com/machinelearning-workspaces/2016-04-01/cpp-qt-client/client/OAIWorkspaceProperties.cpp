/**
 * Machine Learning Workspaces Management Client
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources. They support CRUD operations for Azure Machine Learning Workspaces.
 *
 * The version of the OpenAPI document: 2016-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkspaceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkspaceProperties::OAIWorkspaceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkspaceProperties::OAIWorkspaceProperties() {
    this->initializeModel();
}

OAIWorkspaceProperties::~OAIWorkspaceProperties() {}

void OAIWorkspaceProperties::initializeModel() {

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_key_vault_identifier_id_isSet = false;
    m_key_vault_identifier_id_isValid = false;

    m_owner_email_isSet = false;
    m_owner_email_isValid = false;

    m_studio_endpoint_isSet = false;
    m_studio_endpoint_isValid = false;

    m_user_storage_account_id_isSet = false;
    m_user_storage_account_id_isValid = false;

    m_workspace_id_isSet = false;
    m_workspace_id_isValid = false;

    m_workspace_state_isSet = false;
    m_workspace_state_isValid = false;

    m_workspace_type_isSet = false;
    m_workspace_type_isValid = false;
}

void OAIWorkspaceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkspaceProperties::fromJsonObject(QJsonObject json) {

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_key_vault_identifier_id_isValid = ::OpenAPI::fromJsonValue(m_key_vault_identifier_id, json[QString("keyVaultIdentifierId")]);
    m_key_vault_identifier_id_isSet = !json[QString("keyVaultIdentifierId")].isNull() && m_key_vault_identifier_id_isValid;

    m_owner_email_isValid = ::OpenAPI::fromJsonValue(m_owner_email, json[QString("ownerEmail")]);
    m_owner_email_isSet = !json[QString("ownerEmail")].isNull() && m_owner_email_isValid;

    m_studio_endpoint_isValid = ::OpenAPI::fromJsonValue(m_studio_endpoint, json[QString("studioEndpoint")]);
    m_studio_endpoint_isSet = !json[QString("studioEndpoint")].isNull() && m_studio_endpoint_isValid;

    m_user_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_user_storage_account_id, json[QString("userStorageAccountId")]);
    m_user_storage_account_id_isSet = !json[QString("userStorageAccountId")].isNull() && m_user_storage_account_id_isValid;

    m_workspace_id_isValid = ::OpenAPI::fromJsonValue(m_workspace_id, json[QString("workspaceId")]);
    m_workspace_id_isSet = !json[QString("workspaceId")].isNull() && m_workspace_id_isValid;

    m_workspace_state_isValid = ::OpenAPI::fromJsonValue(m_workspace_state, json[QString("workspaceState")]);
    m_workspace_state_isSet = !json[QString("workspaceState")].isNull() && m_workspace_state_isValid;

    m_workspace_type_isValid = ::OpenAPI::fromJsonValue(m_workspace_type, json[QString("workspaceType")]);
    m_workspace_type_isSet = !json[QString("workspaceType")].isNull() && m_workspace_type_isValid;
}

QString OAIWorkspaceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkspaceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_key_vault_identifier_id_isSet) {
        obj.insert(QString("keyVaultIdentifierId"), ::OpenAPI::toJsonValue(m_key_vault_identifier_id));
    }
    if (m_owner_email_isSet) {
        obj.insert(QString("ownerEmail"), ::OpenAPI::toJsonValue(m_owner_email));
    }
    if (m_studio_endpoint_isSet) {
        obj.insert(QString("studioEndpoint"), ::OpenAPI::toJsonValue(m_studio_endpoint));
    }
    if (m_user_storage_account_id_isSet) {
        obj.insert(QString("userStorageAccountId"), ::OpenAPI::toJsonValue(m_user_storage_account_id));
    }
    if (m_workspace_id_isSet) {
        obj.insert(QString("workspaceId"), ::OpenAPI::toJsonValue(m_workspace_id));
    }
    if (m_workspace_state_isSet) {
        obj.insert(QString("workspaceState"), ::OpenAPI::toJsonValue(m_workspace_state));
    }
    if (m_workspace_type_isSet) {
        obj.insert(QString("workspaceType"), ::OpenAPI::toJsonValue(m_workspace_type));
    }
    return obj;
}

QString OAIWorkspaceProperties::getCreationTime() const {
    return m_creation_time;
}
void OAIWorkspaceProperties::setCreationTime(const QString &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIWorkspaceProperties::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIWorkspaceProperties::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIWorkspaceProperties::getKeyVaultIdentifierId() const {
    return m_key_vault_identifier_id;
}
void OAIWorkspaceProperties::setKeyVaultIdentifierId(const QString &key_vault_identifier_id) {
    m_key_vault_identifier_id = key_vault_identifier_id;
    m_key_vault_identifier_id_isSet = true;
}

bool OAIWorkspaceProperties::is_key_vault_identifier_id_Set() const{
    return m_key_vault_identifier_id_isSet;
}

bool OAIWorkspaceProperties::is_key_vault_identifier_id_Valid() const{
    return m_key_vault_identifier_id_isValid;
}

QString OAIWorkspaceProperties::getOwnerEmail() const {
    return m_owner_email;
}
void OAIWorkspaceProperties::setOwnerEmail(const QString &owner_email) {
    m_owner_email = owner_email;
    m_owner_email_isSet = true;
}

bool OAIWorkspaceProperties::is_owner_email_Set() const{
    return m_owner_email_isSet;
}

bool OAIWorkspaceProperties::is_owner_email_Valid() const{
    return m_owner_email_isValid;
}

QString OAIWorkspaceProperties::getStudioEndpoint() const {
    return m_studio_endpoint;
}
void OAIWorkspaceProperties::setStudioEndpoint(const QString &studio_endpoint) {
    m_studio_endpoint = studio_endpoint;
    m_studio_endpoint_isSet = true;
}

bool OAIWorkspaceProperties::is_studio_endpoint_Set() const{
    return m_studio_endpoint_isSet;
}

bool OAIWorkspaceProperties::is_studio_endpoint_Valid() const{
    return m_studio_endpoint_isValid;
}

QString OAIWorkspaceProperties::getUserStorageAccountId() const {
    return m_user_storage_account_id;
}
void OAIWorkspaceProperties::setUserStorageAccountId(const QString &user_storage_account_id) {
    m_user_storage_account_id = user_storage_account_id;
    m_user_storage_account_id_isSet = true;
}

bool OAIWorkspaceProperties::is_user_storage_account_id_Set() const{
    return m_user_storage_account_id_isSet;
}

bool OAIWorkspaceProperties::is_user_storage_account_id_Valid() const{
    return m_user_storage_account_id_isValid;
}

QString OAIWorkspaceProperties::getWorkspaceId() const {
    return m_workspace_id;
}
void OAIWorkspaceProperties::setWorkspaceId(const QString &workspace_id) {
    m_workspace_id = workspace_id;
    m_workspace_id_isSet = true;
}

bool OAIWorkspaceProperties::is_workspace_id_Set() const{
    return m_workspace_id_isSet;
}

bool OAIWorkspaceProperties::is_workspace_id_Valid() const{
    return m_workspace_id_isValid;
}

QString OAIWorkspaceProperties::getWorkspaceState() const {
    return m_workspace_state;
}
void OAIWorkspaceProperties::setWorkspaceState(const QString &workspace_state) {
    m_workspace_state = workspace_state;
    m_workspace_state_isSet = true;
}

bool OAIWorkspaceProperties::is_workspace_state_Set() const{
    return m_workspace_state_isSet;
}

bool OAIWorkspaceProperties::is_workspace_state_Valid() const{
    return m_workspace_state_isValid;
}

QString OAIWorkspaceProperties::getWorkspaceType() const {
    return m_workspace_type;
}
void OAIWorkspaceProperties::setWorkspaceType(const QString &workspace_type) {
    m_workspace_type = workspace_type;
    m_workspace_type_isSet = true;
}

bool OAIWorkspaceProperties::is_workspace_type_Set() const{
    return m_workspace_type_isSet;
}

bool OAIWorkspaceProperties::is_workspace_type_Valid() const{
    return m_workspace_type_isValid;
}

bool OAIWorkspaceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_vault_identifier_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_studio_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkspaceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_owner_email_isValid && m_user_storage_account_id_isValid && true;
}

} // namespace OpenAPI
