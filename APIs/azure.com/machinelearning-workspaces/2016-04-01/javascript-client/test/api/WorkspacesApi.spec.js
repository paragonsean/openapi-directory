/**
 * Machine Learning Workspaces Management Client
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources. They support CRUD operations for Azure Machine Learning Workspaces.
 *
 * The version of the OpenAPI document: 2016-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MachineLearningWorkspacesManagementClient);
  }
}(this, function(expect, MachineLearningWorkspacesManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MachineLearningWorkspacesManagementClient.WorkspacesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('WorkspacesApi', function() {
    describe('workspacesCreateOrUpdate', function() {
      it('should call workspacesCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test workspacesCreateOrUpdate
        //instance.workspacesCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workspacesDelete', function() {
      it('should call workspacesDelete successfully', function(done) {
        //uncomment below and update the code to test workspacesDelete
        //instance.workspacesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workspacesGet', function() {
      it('should call workspacesGet successfully', function(done) {
        //uncomment below and update the code to test workspacesGet
        //instance.workspacesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workspacesList', function() {
      it('should call workspacesList successfully', function(done) {
        //uncomment below and update the code to test workspacesList
        //instance.workspacesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workspacesListByResourceGroup', function() {
      it('should call workspacesListByResourceGroup successfully', function(done) {
        //uncomment below and update the code to test workspacesListByResourceGroup
        //instance.workspacesListByResourceGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workspacesListWorkspaceKeys', function() {
      it('should call workspacesListWorkspaceKeys successfully', function(done) {
        //uncomment below and update the code to test workspacesListWorkspaceKeys
        //instance.workspacesListWorkspaceKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workspacesResyncStorageKeys', function() {
      it('should call workspacesResyncStorageKeys successfully', function(done) {
        //uncomment below and update the code to test workspacesResyncStorageKeys
        //instance.workspacesResyncStorageKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workspacesUpdate', function() {
      it('should call workspacesUpdate successfully', function(done) {
        //uncomment below and update the code to test workspacesUpdate
        //instance.workspacesUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
