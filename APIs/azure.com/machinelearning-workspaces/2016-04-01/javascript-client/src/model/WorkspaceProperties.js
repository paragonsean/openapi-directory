/**
 * Machine Learning Workspaces Management Client
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources. They support CRUD operations for Azure Machine Learning Workspaces.
 *
 * The version of the OpenAPI document: 2016-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WorkspaceProperties model module.
 * @module model/WorkspaceProperties
 * @version 2016-04-01
 */
class WorkspaceProperties {
    /**
     * Constructs a new <code>WorkspaceProperties</code>.
     * The properties of a machine learning workspace.
     * @alias module:model/WorkspaceProperties
     * @param ownerEmail {String} The email id of the owner for this workspace.
     * @param userStorageAccountId {String} The fully qualified arm id of the storage account associated with this workspace.
     */
    constructor(ownerEmail, userStorageAccountId) { 
        
        WorkspaceProperties.initialize(this, ownerEmail, userStorageAccountId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ownerEmail, userStorageAccountId) { 
        obj['ownerEmail'] = ownerEmail;
        obj['userStorageAccountId'] = userStorageAccountId;
    }

    /**
     * Constructs a <code>WorkspaceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkspaceProperties} obj Optional instance to populate.
     * @return {module:model/WorkspaceProperties} The populated <code>WorkspaceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkspaceProperties();

            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'String');
            }
            if (data.hasOwnProperty('keyVaultIdentifierId')) {
                obj['keyVaultIdentifierId'] = ApiClient.convertToType(data['keyVaultIdentifierId'], 'String');
            }
            if (data.hasOwnProperty('ownerEmail')) {
                obj['ownerEmail'] = ApiClient.convertToType(data['ownerEmail'], 'String');
            }
            if (data.hasOwnProperty('studioEndpoint')) {
                obj['studioEndpoint'] = ApiClient.convertToType(data['studioEndpoint'], 'String');
            }
            if (data.hasOwnProperty('userStorageAccountId')) {
                obj['userStorageAccountId'] = ApiClient.convertToType(data['userStorageAccountId'], 'String');
            }
            if (data.hasOwnProperty('workspaceId')) {
                obj['workspaceId'] = ApiClient.convertToType(data['workspaceId'], 'String');
            }
            if (data.hasOwnProperty('workspaceState')) {
                obj['workspaceState'] = ApiClient.convertToType(data['workspaceState'], 'String');
            }
            if (data.hasOwnProperty('workspaceType')) {
                obj['workspaceType'] = ApiClient.convertToType(data['workspaceType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkspaceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkspaceProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WorkspaceProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['creationTime'] && !(typeof data['creationTime'] === 'string' || data['creationTime'] instanceof String)) {
            throw new Error("Expected the field `creationTime` to be a primitive type in the JSON string but got " + data['creationTime']);
        }
        // ensure the json data is a string
        if (data['keyVaultIdentifierId'] && !(typeof data['keyVaultIdentifierId'] === 'string' || data['keyVaultIdentifierId'] instanceof String)) {
            throw new Error("Expected the field `keyVaultIdentifierId` to be a primitive type in the JSON string but got " + data['keyVaultIdentifierId']);
        }
        // ensure the json data is a string
        if (data['ownerEmail'] && !(typeof data['ownerEmail'] === 'string' || data['ownerEmail'] instanceof String)) {
            throw new Error("Expected the field `ownerEmail` to be a primitive type in the JSON string but got " + data['ownerEmail']);
        }
        // ensure the json data is a string
        if (data['studioEndpoint'] && !(typeof data['studioEndpoint'] === 'string' || data['studioEndpoint'] instanceof String)) {
            throw new Error("Expected the field `studioEndpoint` to be a primitive type in the JSON string but got " + data['studioEndpoint']);
        }
        // ensure the json data is a string
        if (data['userStorageAccountId'] && !(typeof data['userStorageAccountId'] === 'string' || data['userStorageAccountId'] instanceof String)) {
            throw new Error("Expected the field `userStorageAccountId` to be a primitive type in the JSON string but got " + data['userStorageAccountId']);
        }
        // ensure the json data is a string
        if (data['workspaceId'] && !(typeof data['workspaceId'] === 'string' || data['workspaceId'] instanceof String)) {
            throw new Error("Expected the field `workspaceId` to be a primitive type in the JSON string but got " + data['workspaceId']);
        }
        // ensure the json data is a string
        if (data['workspaceState'] && !(typeof data['workspaceState'] === 'string' || data['workspaceState'] instanceof String)) {
            throw new Error("Expected the field `workspaceState` to be a primitive type in the JSON string but got " + data['workspaceState']);
        }
        // ensure the json data is a string
        if (data['workspaceType'] && !(typeof data['workspaceType'] === 'string' || data['workspaceType'] instanceof String)) {
            throw new Error("Expected the field `workspaceType` to be a primitive type in the JSON string but got " + data['workspaceType']);
        }

        return true;
    }


}

WorkspaceProperties.RequiredProperties = ["ownerEmail", "userStorageAccountId"];

/**
 * The creation time for this workspace resource.
 * @member {String} creationTime
 */
WorkspaceProperties.prototype['creationTime'] = undefined;

/**
 * The key vault identifier used for encrypted workspaces.
 * @member {String} keyVaultIdentifierId
 */
WorkspaceProperties.prototype['keyVaultIdentifierId'] = undefined;

/**
 * The email id of the owner for this workspace.
 * @member {String} ownerEmail
 */
WorkspaceProperties.prototype['ownerEmail'] = undefined;

/**
 * The regional endpoint for the machine learning studio service which hosts this workspace.
 * @member {String} studioEndpoint
 */
WorkspaceProperties.prototype['studioEndpoint'] = undefined;

/**
 * The fully qualified arm id of the storage account associated with this workspace.
 * @member {String} userStorageAccountId
 */
WorkspaceProperties.prototype['userStorageAccountId'] = undefined;

/**
 * The immutable id associated with this workspace.
 * @member {String} workspaceId
 */
WorkspaceProperties.prototype['workspaceId'] = undefined;

/**
 * The current state of workspace resource.
 * @member {module:model/WorkspaceProperties.WorkspaceStateEnum} workspaceState
 */
WorkspaceProperties.prototype['workspaceState'] = undefined;

/**
 * The type of this workspace.
 * @member {module:model/WorkspaceProperties.WorkspaceTypeEnum} workspaceType
 */
WorkspaceProperties.prototype['workspaceType'] = undefined;





/**
 * Allowed values for the <code>workspaceState</code> property.
 * @enum {String}
 * @readonly
 */
WorkspaceProperties['WorkspaceStateEnum'] = {

    /**
     * value: "Deleted"
     * @const
     */
    "Deleted": "Deleted",

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "Migrated"
     * @const
     */
    "Migrated": "Migrated",

    /**
     * value: "Updated"
     * @const
     */
    "Updated": "Updated",

    /**
     * value: "Registered"
     * @const
     */
    "Registered": "Registered",

    /**
     * value: "Unregistered"
     * @const
     */
    "Unregistered": "Unregistered"
};


/**
 * Allowed values for the <code>workspaceType</code> property.
 * @enum {String}
 * @readonly
 */
WorkspaceProperties['WorkspaceTypeEnum'] = {

    /**
     * value: "Production"
     * @const
     */
    "Production": "Production",

    /**
     * value: "Free"
     * @const
     */
    "Free": "Free",

    /**
     * value: "Anonymous"
     * @const
     */
    "Anonymous": "Anonymous",

    /**
     * value: "PaidStandard"
     * @const
     */
    "PaidStandard": "PaidStandard",

    /**
     * value: "PaidPremium"
     * @const
     */
    "PaidPremium": "PaidPremium"
};



export default WorkspaceProperties;

