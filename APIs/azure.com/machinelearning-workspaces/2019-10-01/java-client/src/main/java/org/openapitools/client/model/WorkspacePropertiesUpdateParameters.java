/*
 * Machine Learning Workspaces Management Client
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources. They support CRUD operations for Azure Machine Learning Workspaces.
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Sku;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The parameters for updating the properties of a machine learning workspace.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:18:30.051021-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkspacePropertiesUpdateParameters {
  public static final String SERIALIZED_NAME_KEY_VAULT_IDENTIFIER_ID = "keyVaultIdentifierId";
  @SerializedName(SERIALIZED_NAME_KEY_VAULT_IDENTIFIER_ID)
  private String keyVaultIdentifierId;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private Sku sku;

  /**
   * The current state of workspace resource.
   */
  @JsonAdapter(WorkspaceStateEnum.Adapter.class)
  public enum WorkspaceStateEnum {
    DELETED("Deleted"),
    
    ENABLED("Enabled"),
    
    DISABLED("Disabled"),
    
    MIGRATED("Migrated"),
    
    UPDATED("Updated"),
    
    REGISTERED("Registered"),
    
    UNREGISTERED("Unregistered");

    private String value;

    WorkspaceStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WorkspaceStateEnum fromValue(String value) {
      for (WorkspaceStateEnum b : WorkspaceStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WorkspaceStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WorkspaceStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WorkspaceStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WorkspaceStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WorkspaceStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WORKSPACE_STATE = "workspaceState";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_STATE)
  private WorkspaceStateEnum workspaceState;

  public WorkspacePropertiesUpdateParameters() {
  }

  public WorkspacePropertiesUpdateParameters keyVaultIdentifierId(String keyVaultIdentifierId) {
    this.keyVaultIdentifierId = keyVaultIdentifierId;
    return this;
  }

  /**
   * The key vault identifier used for encrypted workspaces.
   * @return keyVaultIdentifierId
   */
  @javax.annotation.Nullable
  public String getKeyVaultIdentifierId() {
    return keyVaultIdentifierId;
  }

  public void setKeyVaultIdentifierId(String keyVaultIdentifierId) {
    this.keyVaultIdentifierId = keyVaultIdentifierId;
  }


  public WorkspacePropertiesUpdateParameters sku(Sku sku) {
    this.sku = sku;
    return this;
  }

  /**
   * Get sku
   * @return sku
   */
  @javax.annotation.Nullable
  public Sku getSku() {
    return sku;
  }

  public void setSku(Sku sku) {
    this.sku = sku;
  }


  public WorkspacePropertiesUpdateParameters workspaceState(WorkspaceStateEnum workspaceState) {
    this.workspaceState = workspaceState;
    return this;
  }

  /**
   * The current state of workspace resource.
   * @return workspaceState
   */
  @javax.annotation.Nullable
  public WorkspaceStateEnum getWorkspaceState() {
    return workspaceState;
  }

  public void setWorkspaceState(WorkspaceStateEnum workspaceState) {
    this.workspaceState = workspaceState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkspacePropertiesUpdateParameters workspacePropertiesUpdateParameters = (WorkspacePropertiesUpdateParameters) o;
    return Objects.equals(this.keyVaultIdentifierId, workspacePropertiesUpdateParameters.keyVaultIdentifierId) &&
        Objects.equals(this.sku, workspacePropertiesUpdateParameters.sku) &&
        Objects.equals(this.workspaceState, workspacePropertiesUpdateParameters.workspaceState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keyVaultIdentifierId, sku, workspaceState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkspacePropertiesUpdateParameters {\n");
    sb.append("    keyVaultIdentifierId: ").append(toIndentedString(keyVaultIdentifierId)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    workspaceState: ").append(toIndentedString(workspaceState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("keyVaultIdentifierId");
    openapiFields.add("sku");
    openapiFields.add("workspaceState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkspacePropertiesUpdateParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkspacePropertiesUpdateParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkspacePropertiesUpdateParameters is not found in the empty JSON string", WorkspacePropertiesUpdateParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkspacePropertiesUpdateParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkspacePropertiesUpdateParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("keyVaultIdentifierId") != null && !jsonObj.get("keyVaultIdentifierId").isJsonNull()) && !jsonObj.get("keyVaultIdentifierId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyVaultIdentifierId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyVaultIdentifierId").toString()));
      }
      // validate the optional field `sku`
      if (jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) {
        Sku.validateJsonElement(jsonObj.get("sku"));
      }
      if ((jsonObj.get("workspaceState") != null && !jsonObj.get("workspaceState").isJsonNull()) && !jsonObj.get("workspaceState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspaceState").toString()));
      }
      // validate the optional field `workspaceState`
      if (jsonObj.get("workspaceState") != null && !jsonObj.get("workspaceState").isJsonNull()) {
        WorkspaceStateEnum.validateJsonElement(jsonObj.get("workspaceState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkspacePropertiesUpdateParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkspacePropertiesUpdateParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkspacePropertiesUpdateParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkspacePropertiesUpdateParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkspacePropertiesUpdateParameters>() {
           @Override
           public void write(JsonWriter out, WorkspacePropertiesUpdateParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkspacePropertiesUpdateParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkspacePropertiesUpdateParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkspacePropertiesUpdateParameters
   * @throws IOException if the JSON string is invalid with respect to WorkspacePropertiesUpdateParameters
   */
  public static WorkspacePropertiesUpdateParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkspacePropertiesUpdateParameters.class);
  }

  /**
   * Convert an instance of WorkspacePropertiesUpdateParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

