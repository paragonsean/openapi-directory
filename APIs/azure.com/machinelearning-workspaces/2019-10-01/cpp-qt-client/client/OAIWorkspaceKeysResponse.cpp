/**
 * Machine Learning Workspaces Management Client
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources. They support CRUD operations for Azure Machine Learning Workspaces.
 *
 * The version of the OpenAPI document: 2019-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkspaceKeysResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkspaceKeysResponse::OAIWorkspaceKeysResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkspaceKeysResponse::OAIWorkspaceKeysResponse() {
    this->initializeModel();
}

OAIWorkspaceKeysResponse::~OAIWorkspaceKeysResponse() {}

void OAIWorkspaceKeysResponse::initializeModel() {

    m_primary_token_isSet = false;
    m_primary_token_isValid = false;

    m_secondary_token_isSet = false;
    m_secondary_token_isValid = false;
}

void OAIWorkspaceKeysResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkspaceKeysResponse::fromJsonObject(QJsonObject json) {

    m_primary_token_isValid = ::OpenAPI::fromJsonValue(m_primary_token, json[QString("primaryToken")]);
    m_primary_token_isSet = !json[QString("primaryToken")].isNull() && m_primary_token_isValid;

    m_secondary_token_isValid = ::OpenAPI::fromJsonValue(m_secondary_token, json[QString("secondaryToken")]);
    m_secondary_token_isSet = !json[QString("secondaryToken")].isNull() && m_secondary_token_isValid;
}

QString OAIWorkspaceKeysResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkspaceKeysResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_primary_token_isSet) {
        obj.insert(QString("primaryToken"), ::OpenAPI::toJsonValue(m_primary_token));
    }
    if (m_secondary_token_isSet) {
        obj.insert(QString("secondaryToken"), ::OpenAPI::toJsonValue(m_secondary_token));
    }
    return obj;
}

QString OAIWorkspaceKeysResponse::getPrimaryToken() const {
    return m_primary_token;
}
void OAIWorkspaceKeysResponse::setPrimaryToken(const QString &primary_token) {
    m_primary_token = primary_token;
    m_primary_token_isSet = true;
}

bool OAIWorkspaceKeysResponse::is_primary_token_Set() const{
    return m_primary_token_isSet;
}

bool OAIWorkspaceKeysResponse::is_primary_token_Valid() const{
    return m_primary_token_isValid;
}

QString OAIWorkspaceKeysResponse::getSecondaryToken() const {
    return m_secondary_token;
}
void OAIWorkspaceKeysResponse::setSecondaryToken(const QString &secondary_token) {
    m_secondary_token = secondary_token;
    m_secondary_token_isSet = true;
}

bool OAIWorkspaceKeysResponse::is_secondary_token_Set() const{
    return m_secondary_token_isSet;
}

bool OAIWorkspaceKeysResponse::is_secondary_token_Valid() const{
    return m_secondary_token_isValid;
}

bool OAIWorkspaceKeysResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_primary_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkspaceKeysResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
