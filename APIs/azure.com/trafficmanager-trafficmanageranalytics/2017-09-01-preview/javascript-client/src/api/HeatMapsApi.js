/**
 * TrafficManagerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import HeatMapModel from '../model/HeatMapModel';

/**
* HeatMaps service.
* @module api/HeatMapsApi
* @version 2017-09-01-preview
*/
export default class HeatMapsApi {

    /**
    * Constructs a new HeatMapsApi. 
    * @alias module:api/HeatMapsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the heatMapGet operation.
     * @callback module:api/HeatMapsApi~heatMapGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HeatMapModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets latest heatmap for Traffic Manager profile.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group containing the Traffic Manager endpoint.
     * @param {String} profileName The name of the Traffic Manager profile.
     * @param {module:model/String} heatMapType The type of HeatMap for the Traffic Manager profile.
     * @param {String} apiVersion Client Api Version.
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [topLeft] The top left latitude,longitude pair of the rectangular viewport to query for.
     * @param {Array.<Number>} [botRight] The bottom right latitude,longitude pair of the rectangular viewport to query for.
     * @param {module:api/HeatMapsApi~heatMapGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HeatMapModel}
     */
    heatMapGet(subscriptionId, resourceGroupName, profileName, heatMapType, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling heatMapGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling heatMapGet");
      }
      // verify the required parameter 'profileName' is set
      if (profileName === undefined || profileName === null) {
        throw new Error("Missing the required parameter 'profileName' when calling heatMapGet");
      }
      // verify the required parameter 'heatMapType' is set
      if (heatMapType === undefined || heatMapType === null) {
        throw new Error("Missing the required parameter 'heatMapType' when calling heatMapGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling heatMapGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'profileName': profileName,
        'heatMapType': heatMapType
      };
      let queryParams = {
        'topLeft': this.apiClient.buildCollectionParam(opts['topLeft'], 'csv'),
        'botRight': this.apiClient.buildCollectionParam(opts['botRight'], 'csv'),
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HeatMapModel;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
