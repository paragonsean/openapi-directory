/*
 * TrafficManagerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HeatMapEndpoint;
import org.openapitools.client.model.TrafficFlow;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class representing a Traffic Manager HeatMap properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:22:59.889391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HeatMapProperties {
  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_ENDPOINTS = "endpoints";
  @SerializedName(SERIALIZED_NAME_ENDPOINTS)
  private List<HeatMapEndpoint> endpoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_TRAFFIC_FLOWS = "trafficFlows";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_FLOWS)
  private List<TrafficFlow> trafficFlows = new ArrayList<>();

  public HeatMapProperties() {
  }

  public HeatMapProperties endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The ending of the time window for this HeatMap, exclusive.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public HeatMapProperties endpoints(List<HeatMapEndpoint> endpoints) {
    this.endpoints = endpoints;
    return this;
  }

  public HeatMapProperties addEndpointsItem(HeatMapEndpoint endpointsItem) {
    if (this.endpoints == null) {
      this.endpoints = new ArrayList<>();
    }
    this.endpoints.add(endpointsItem);
    return this;
  }

  /**
   * The endpoints used in this HeatMap calculation.
   * @return endpoints
   */
  @javax.annotation.Nullable
  public List<HeatMapEndpoint> getEndpoints() {
    return endpoints;
  }

  public void setEndpoints(List<HeatMapEndpoint> endpoints) {
    this.endpoints = endpoints;
  }


  public HeatMapProperties startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The beginning of the time window for this HeatMap, inclusive.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public HeatMapProperties trafficFlows(List<TrafficFlow> trafficFlows) {
    this.trafficFlows = trafficFlows;
    return this;
  }

  public HeatMapProperties addTrafficFlowsItem(TrafficFlow trafficFlowsItem) {
    if (this.trafficFlows == null) {
      this.trafficFlows = new ArrayList<>();
    }
    this.trafficFlows.add(trafficFlowsItem);
    return this;
  }

  /**
   * The traffic flows produced in this HeatMap calculation.
   * @return trafficFlows
   */
  @javax.annotation.Nullable
  public List<TrafficFlow> getTrafficFlows() {
    return trafficFlows;
  }

  public void setTrafficFlows(List<TrafficFlow> trafficFlows) {
    this.trafficFlows = trafficFlows;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HeatMapProperties heatMapProperties = (HeatMapProperties) o;
    return Objects.equals(this.endTime, heatMapProperties.endTime) &&
        Objects.equals(this.endpoints, heatMapProperties.endpoints) &&
        Objects.equals(this.startTime, heatMapProperties.startTime) &&
        Objects.equals(this.trafficFlows, heatMapProperties.trafficFlows);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTime, endpoints, startTime, trafficFlows);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HeatMapProperties {\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    endpoints: ").append(toIndentedString(endpoints)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    trafficFlows: ").append(toIndentedString(trafficFlows)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTime");
    openapiFields.add("endpoints");
    openapiFields.add("startTime");
    openapiFields.add("trafficFlows");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HeatMapProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HeatMapProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HeatMapProperties is not found in the empty JSON string", HeatMapProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HeatMapProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HeatMapProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("endpoints") != null && !jsonObj.get("endpoints").isJsonNull()) {
        JsonArray jsonArrayendpoints = jsonObj.getAsJsonArray("endpoints");
        if (jsonArrayendpoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("endpoints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `endpoints` to be an array in the JSON string but got `%s`", jsonObj.get("endpoints").toString()));
          }

          // validate the optional field `endpoints` (array)
          for (int i = 0; i < jsonArrayendpoints.size(); i++) {
            HeatMapEndpoint.validateJsonElement(jsonArrayendpoints.get(i));
          };
        }
      }
      if (jsonObj.get("trafficFlows") != null && !jsonObj.get("trafficFlows").isJsonNull()) {
        JsonArray jsonArraytrafficFlows = jsonObj.getAsJsonArray("trafficFlows");
        if (jsonArraytrafficFlows != null) {
          // ensure the json data is an array
          if (!jsonObj.get("trafficFlows").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `trafficFlows` to be an array in the JSON string but got `%s`", jsonObj.get("trafficFlows").toString()));
          }

          // validate the optional field `trafficFlows` (array)
          for (int i = 0; i < jsonArraytrafficFlows.size(); i++) {
            TrafficFlow.validateJsonElement(jsonArraytrafficFlows.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HeatMapProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HeatMapProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HeatMapProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HeatMapProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<HeatMapProperties>() {
           @Override
           public void write(JsonWriter out, HeatMapProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HeatMapProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HeatMapProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HeatMapProperties
   * @throws IOException if the JSON string is invalid with respect to HeatMapProperties
   */
  public static HeatMapProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HeatMapProperties.class);
  }

  /**
   * Convert an instance of HeatMapProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

