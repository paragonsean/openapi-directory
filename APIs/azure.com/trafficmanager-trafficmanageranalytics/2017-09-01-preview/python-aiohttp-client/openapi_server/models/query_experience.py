# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QueryExperience(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint_id: int=None, latency: float=None, query_count: int=None):
        """QueryExperience - a model defined in OpenAPI

        :param endpoint_id: The endpoint_id of this QueryExperience.
        :param latency: The latency of this QueryExperience.
        :param query_count: The query_count of this QueryExperience.
        """
        self.openapi_types = {
            'endpoint_id': int,
            'latency': float,
            'query_count': int
        }

        self.attribute_map = {
            'endpoint_id': 'endpointId',
            'latency': 'latency',
            'query_count': 'queryCount'
        }

        self._endpoint_id = endpoint_id
        self._latency = latency
        self._query_count = query_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryExperience':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryExperience of this QueryExperience.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint_id(self):
        """Gets the endpoint_id of this QueryExperience.

        The id of the endpoint from the 'endpoints' array which these queries were routed to.

        :return: The endpoint_id of this QueryExperience.
        :rtype: int
        """
        return self._endpoint_id

    @endpoint_id.setter
    def endpoint_id(self, endpoint_id):
        """Sets the endpoint_id of this QueryExperience.

        The id of the endpoint from the 'endpoints' array which these queries were routed to.

        :param endpoint_id: The endpoint_id of this QueryExperience.
        :type endpoint_id: int
        """
        if endpoint_id is None:
            raise ValueError("Invalid value for `endpoint_id`, must not be `None`")

        self._endpoint_id = endpoint_id

    @property
    def latency(self):
        """Gets the latency of this QueryExperience.

        The latency experienced by queries originating from this location.

        :return: The latency of this QueryExperience.
        :rtype: float
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """Sets the latency of this QueryExperience.

        The latency experienced by queries originating from this location.

        :param latency: The latency of this QueryExperience.
        :type latency: float
        """

        self._latency = latency

    @property
    def query_count(self):
        """Gets the query_count of this QueryExperience.

        The number of queries originating from this location.

        :return: The query_count of this QueryExperience.
        :rtype: int
        """
        return self._query_count

    @query_count.setter
    def query_count(self, query_count):
        """Sets the query_count of this QueryExperience.

        The number of queries originating from this location.

        :param query_count: The query_count of this QueryExperience.
        :type query_count: int
        """
        if query_count is None:
            raise ValueError("Invalid value for `query_count`, must not be `None`")

        self._query_count = query_count
