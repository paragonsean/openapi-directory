/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ManagedBackupShortTermRetentionPolicy;
import org.openapitools.client.model.ManagedBackupShortTermRetentionPolicyListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagedBackupShortTermRetentionPoliciesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ManagedBackupShortTermRetentionPoliciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagedBackupShortTermRetentionPoliciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for managedBackupShortTermRetentionPoliciesCreateOrUpdate
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database. (required)
     * @param policyName The policy name. Should always be \&quot;default\&quot;. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The short term retention policy info. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the policy. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidBackupRetentionDays - The retention days of {0} is not a valid configuration. Valid backup retention must be in 7-day increments (7, 14, 21, etc.)   * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid   * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 400 InvalidBackupRetentionPeriod - The retention days of {0} is not a valid configuration. Valid backup retention in days must be between {1} and {2}   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found.   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedBackupShortTermRetentionPoliciesCreateOrUpdateCall(String resourceGroupName, String managedInstanceName, String databaseName, String policyName, String subscriptionId, String apiVersion, ManagedBackupShortTermRetentionPolicy parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/backupShortTermRetentionPolicies/{policyName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managedInstanceName" + "}", localVarApiClient.escapeString(managedInstanceName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "policyName" + "}", localVarApiClient.escapeString(policyName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedBackupShortTermRetentionPoliciesCreateOrUpdateValidateBeforeCall(String resourceGroupName, String managedInstanceName, String databaseName, String policyName, String subscriptionId, String apiVersion, ManagedBackupShortTermRetentionPolicy parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managedBackupShortTermRetentionPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'managedInstanceName' is set
        if (managedInstanceName == null) {
            throw new ApiException("Missing the required parameter 'managedInstanceName' when calling managedBackupShortTermRetentionPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling managedBackupShortTermRetentionPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling managedBackupShortTermRetentionPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managedBackupShortTermRetentionPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managedBackupShortTermRetentionPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling managedBackupShortTermRetentionPoliciesCreateOrUpdate(Async)");
        }

        return managedBackupShortTermRetentionPoliciesCreateOrUpdateCall(resourceGroupName, managedInstanceName, databaseName, policyName, subscriptionId, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Updates a managed database&#39;s short term retention policy.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database. (required)
     * @param policyName The policy name. Should always be \&quot;default\&quot;. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The short term retention policy info. (required)
     * @return ManagedBackupShortTermRetentionPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the policy. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidBackupRetentionDays - The retention days of {0} is not a valid configuration. Valid backup retention must be in 7-day increments (7, 14, 21, etc.)   * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid   * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 400 InvalidBackupRetentionPeriod - The retention days of {0} is not a valid configuration. Valid backup retention in days must be between {1} and {2}   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found.   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public ManagedBackupShortTermRetentionPolicy managedBackupShortTermRetentionPoliciesCreateOrUpdate(String resourceGroupName, String managedInstanceName, String databaseName, String policyName, String subscriptionId, String apiVersion, ManagedBackupShortTermRetentionPolicy parameters) throws ApiException {
        ApiResponse<ManagedBackupShortTermRetentionPolicy> localVarResp = managedBackupShortTermRetentionPoliciesCreateOrUpdateWithHttpInfo(resourceGroupName, managedInstanceName, databaseName, policyName, subscriptionId, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a managed database&#39;s short term retention policy.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database. (required)
     * @param policyName The policy name. Should always be \&quot;default\&quot;. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The short term retention policy info. (required)
     * @return ApiResponse&lt;ManagedBackupShortTermRetentionPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the policy. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidBackupRetentionDays - The retention days of {0} is not a valid configuration. Valid backup retention must be in 7-day increments (7, 14, 21, etc.)   * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid   * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 400 InvalidBackupRetentionPeriod - The retention days of {0} is not a valid configuration. Valid backup retention in days must be between {1} and {2}   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found.   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagedBackupShortTermRetentionPolicy> managedBackupShortTermRetentionPoliciesCreateOrUpdateWithHttpInfo(String resourceGroupName, String managedInstanceName, String databaseName, String policyName, String subscriptionId, String apiVersion, ManagedBackupShortTermRetentionPolicy parameters) throws ApiException {
        okhttp3.Call localVarCall = managedBackupShortTermRetentionPoliciesCreateOrUpdateValidateBeforeCall(resourceGroupName, managedInstanceName, databaseName, policyName, subscriptionId, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<ManagedBackupShortTermRetentionPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a managed database&#39;s short term retention policy.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database. (required)
     * @param policyName The policy name. Should always be \&quot;default\&quot;. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The short term retention policy info. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the policy. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidBackupRetentionDays - The retention days of {0} is not a valid configuration. Valid backup retention must be in 7-day increments (7, 14, 21, etc.)   * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid   * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 400 InvalidBackupRetentionPeriod - The retention days of {0} is not a valid configuration. Valid backup retention in days must be between {1} and {2}   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found.   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedBackupShortTermRetentionPoliciesCreateOrUpdateAsync(String resourceGroupName, String managedInstanceName, String databaseName, String policyName, String subscriptionId, String apiVersion, ManagedBackupShortTermRetentionPolicy parameters, final ApiCallback<ManagedBackupShortTermRetentionPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedBackupShortTermRetentionPoliciesCreateOrUpdateValidateBeforeCall(resourceGroupName, managedInstanceName, databaseName, policyName, subscriptionId, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<ManagedBackupShortTermRetentionPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedBackupShortTermRetentionPoliciesGet
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database. (required)
     * @param policyName The policy name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidBackupRetentionDays - The retention days of {0} is not a valid configuration. Valid backup retention must be in 7-day increments (7, 14, 21, etc.)   * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid   * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedBackupShortTermRetentionPoliciesGetCall(String resourceGroupName, String managedInstanceName, String databaseName, String policyName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/backupShortTermRetentionPolicies/{policyName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managedInstanceName" + "}", localVarApiClient.escapeString(managedInstanceName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "policyName" + "}", localVarApiClient.escapeString(policyName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedBackupShortTermRetentionPoliciesGetValidateBeforeCall(String resourceGroupName, String managedInstanceName, String databaseName, String policyName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managedBackupShortTermRetentionPoliciesGet(Async)");
        }

        // verify the required parameter 'managedInstanceName' is set
        if (managedInstanceName == null) {
            throw new ApiException("Missing the required parameter 'managedInstanceName' when calling managedBackupShortTermRetentionPoliciesGet(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling managedBackupShortTermRetentionPoliciesGet(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling managedBackupShortTermRetentionPoliciesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managedBackupShortTermRetentionPoliciesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managedBackupShortTermRetentionPoliciesGet(Async)");
        }

        return managedBackupShortTermRetentionPoliciesGetCall(resourceGroupName, managedInstanceName, databaseName, policyName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets a managed database&#39;s short term retention policy.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database. (required)
     * @param policyName The policy name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ManagedBackupShortTermRetentionPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidBackupRetentionDays - The retention days of {0} is not a valid configuration. Valid backup retention must be in 7-day increments (7, 14, 21, etc.)   * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid   * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ManagedBackupShortTermRetentionPolicy managedBackupShortTermRetentionPoliciesGet(String resourceGroupName, String managedInstanceName, String databaseName, String policyName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ManagedBackupShortTermRetentionPolicy> localVarResp = managedBackupShortTermRetentionPoliciesGetWithHttpInfo(resourceGroupName, managedInstanceName, databaseName, policyName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a managed database&#39;s short term retention policy.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database. (required)
     * @param policyName The policy name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;ManagedBackupShortTermRetentionPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidBackupRetentionDays - The retention days of {0} is not a valid configuration. Valid backup retention must be in 7-day increments (7, 14, 21, etc.)   * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid   * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagedBackupShortTermRetentionPolicy> managedBackupShortTermRetentionPoliciesGetWithHttpInfo(String resourceGroupName, String managedInstanceName, String databaseName, String policyName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = managedBackupShortTermRetentionPoliciesGetValidateBeforeCall(resourceGroupName, managedInstanceName, databaseName, policyName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ManagedBackupShortTermRetentionPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a managed database&#39;s short term retention policy.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database. (required)
     * @param policyName The policy name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidBackupRetentionDays - The retention days of {0} is not a valid configuration. Valid backup retention must be in 7-day increments (7, 14, 21, etc.)   * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid   * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedBackupShortTermRetentionPoliciesGetAsync(String resourceGroupName, String managedInstanceName, String databaseName, String policyName, String subscriptionId, String apiVersion, final ApiCallback<ManagedBackupShortTermRetentionPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedBackupShortTermRetentionPoliciesGetValidateBeforeCall(resourceGroupName, managedInstanceName, databaseName, policyName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ManagedBackupShortTermRetentionPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedBackupShortTermRetentionPoliciesListByDatabase
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidBackupRetentionDays - The retention days of {0} is not a valid configuration. Valid backup retention must be in 7-day increments (7, 14, 21, etc.)   * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid   * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedBackupShortTermRetentionPoliciesListByDatabaseCall(String resourceGroupName, String managedInstanceName, String databaseName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/backupShortTermRetentionPolicies"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managedInstanceName" + "}", localVarApiClient.escapeString(managedInstanceName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedBackupShortTermRetentionPoliciesListByDatabaseValidateBeforeCall(String resourceGroupName, String managedInstanceName, String databaseName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managedBackupShortTermRetentionPoliciesListByDatabase(Async)");
        }

        // verify the required parameter 'managedInstanceName' is set
        if (managedInstanceName == null) {
            throw new ApiException("Missing the required parameter 'managedInstanceName' when calling managedBackupShortTermRetentionPoliciesListByDatabase(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling managedBackupShortTermRetentionPoliciesListByDatabase(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managedBackupShortTermRetentionPoliciesListByDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managedBackupShortTermRetentionPoliciesListByDatabase(Async)");
        }

        return managedBackupShortTermRetentionPoliciesListByDatabaseCall(resourceGroupName, managedInstanceName, databaseName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets a managed database&#39;s short term retention policy list.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ManagedBackupShortTermRetentionPolicyListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidBackupRetentionDays - The retention days of {0} is not a valid configuration. Valid backup retention must be in 7-day increments (7, 14, 21, etc.)   * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid   * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ManagedBackupShortTermRetentionPolicyListResult managedBackupShortTermRetentionPoliciesListByDatabase(String resourceGroupName, String managedInstanceName, String databaseName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ManagedBackupShortTermRetentionPolicyListResult> localVarResp = managedBackupShortTermRetentionPoliciesListByDatabaseWithHttpInfo(resourceGroupName, managedInstanceName, databaseName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a managed database&#39;s short term retention policy list.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;ManagedBackupShortTermRetentionPolicyListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidBackupRetentionDays - The retention days of {0} is not a valid configuration. Valid backup retention must be in 7-day increments (7, 14, 21, etc.)   * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid   * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagedBackupShortTermRetentionPolicyListResult> managedBackupShortTermRetentionPoliciesListByDatabaseWithHttpInfo(String resourceGroupName, String managedInstanceName, String databaseName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = managedBackupShortTermRetentionPoliciesListByDatabaseValidateBeforeCall(resourceGroupName, managedInstanceName, databaseName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ManagedBackupShortTermRetentionPolicyListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a managed database&#39;s short term retention policy list.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidBackupRetentionDays - The retention days of {0} is not a valid configuration. Valid backup retention must be in 7-day increments (7, 14, 21, etc.)   * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid   * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedBackupShortTermRetentionPoliciesListByDatabaseAsync(String resourceGroupName, String managedInstanceName, String databaseName, String subscriptionId, String apiVersion, final ApiCallback<ManagedBackupShortTermRetentionPolicyListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedBackupShortTermRetentionPoliciesListByDatabaseValidateBeforeCall(resourceGroupName, managedInstanceName, databaseName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ManagedBackupShortTermRetentionPolicyListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedBackupShortTermRetentionPoliciesUpdate
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database. (required)
     * @param policyName The policy name. Should always be \&quot;default\&quot;. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The short term retention policy info. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the policy. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidBackupRetentionDays - The retention days of {0} is not a valid configuration. Valid backup retention must be in 7-day increments (7, 14, 21, etc.)   * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid   * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 400 InvalidBackupRetentionPeriod - The retention days of {0} is not a valid configuration. Valid backup retention in days must be between {1} and {2}   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found.   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedBackupShortTermRetentionPoliciesUpdateCall(String resourceGroupName, String managedInstanceName, String databaseName, String policyName, String subscriptionId, String apiVersion, ManagedBackupShortTermRetentionPolicy parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/backupShortTermRetentionPolicies/{policyName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managedInstanceName" + "}", localVarApiClient.escapeString(managedInstanceName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "policyName" + "}", localVarApiClient.escapeString(policyName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedBackupShortTermRetentionPoliciesUpdateValidateBeforeCall(String resourceGroupName, String managedInstanceName, String databaseName, String policyName, String subscriptionId, String apiVersion, ManagedBackupShortTermRetentionPolicy parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managedBackupShortTermRetentionPoliciesUpdate(Async)");
        }

        // verify the required parameter 'managedInstanceName' is set
        if (managedInstanceName == null) {
            throw new ApiException("Missing the required parameter 'managedInstanceName' when calling managedBackupShortTermRetentionPoliciesUpdate(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling managedBackupShortTermRetentionPoliciesUpdate(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling managedBackupShortTermRetentionPoliciesUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managedBackupShortTermRetentionPoliciesUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managedBackupShortTermRetentionPoliciesUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling managedBackupShortTermRetentionPoliciesUpdate(Async)");
        }

        return managedBackupShortTermRetentionPoliciesUpdateCall(resourceGroupName, managedInstanceName, databaseName, policyName, subscriptionId, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Updates a managed database&#39;s short term retention policy.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database. (required)
     * @param policyName The policy name. Should always be \&quot;default\&quot;. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The short term retention policy info. (required)
     * @return ManagedBackupShortTermRetentionPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the policy. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidBackupRetentionDays - The retention days of {0} is not a valid configuration. Valid backup retention must be in 7-day increments (7, 14, 21, etc.)   * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid   * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 400 InvalidBackupRetentionPeriod - The retention days of {0} is not a valid configuration. Valid backup retention in days must be between {1} and {2}   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found.   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public ManagedBackupShortTermRetentionPolicy managedBackupShortTermRetentionPoliciesUpdate(String resourceGroupName, String managedInstanceName, String databaseName, String policyName, String subscriptionId, String apiVersion, ManagedBackupShortTermRetentionPolicy parameters) throws ApiException {
        ApiResponse<ManagedBackupShortTermRetentionPolicy> localVarResp = managedBackupShortTermRetentionPoliciesUpdateWithHttpInfo(resourceGroupName, managedInstanceName, databaseName, policyName, subscriptionId, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a managed database&#39;s short term retention policy.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database. (required)
     * @param policyName The policy name. Should always be \&quot;default\&quot;. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The short term retention policy info. (required)
     * @return ApiResponse&lt;ManagedBackupShortTermRetentionPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the policy. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidBackupRetentionDays - The retention days of {0} is not a valid configuration. Valid backup retention must be in 7-day increments (7, 14, 21, etc.)   * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid   * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 400 InvalidBackupRetentionPeriod - The retention days of {0} is not a valid configuration. Valid backup retention in days must be between {1} and {2}   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found.   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagedBackupShortTermRetentionPolicy> managedBackupShortTermRetentionPoliciesUpdateWithHttpInfo(String resourceGroupName, String managedInstanceName, String databaseName, String policyName, String subscriptionId, String apiVersion, ManagedBackupShortTermRetentionPolicy parameters) throws ApiException {
        okhttp3.Call localVarCall = managedBackupShortTermRetentionPoliciesUpdateValidateBeforeCall(resourceGroupName, managedInstanceName, databaseName, policyName, subscriptionId, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<ManagedBackupShortTermRetentionPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a managed database&#39;s short term retention policy.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database. (required)
     * @param policyName The policy name. Should always be \&quot;default\&quot;. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The short term retention policy info. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the policy. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidBackupRetentionDays - The retention days of {0} is not a valid configuration. Valid backup retention must be in 7-day increments (7, 14, 21, etc.)   * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid   * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 400 InvalidBackupRetentionPeriod - The retention days of {0} is not a valid configuration. Valid backup retention in days must be between {1} and {2}   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found.   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedBackupShortTermRetentionPoliciesUpdateAsync(String resourceGroupName, String managedInstanceName, String databaseName, String policyName, String subscriptionId, String apiVersion, ManagedBackupShortTermRetentionPolicy parameters, final ApiCallback<ManagedBackupShortTermRetentionPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedBackupShortTermRetentionPoliciesUpdateValidateBeforeCall(resourceGroupName, managedInstanceName, databaseName, policyName, subscriptionId, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<ManagedBackupShortTermRetentionPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
