/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ManagedBackupShortTermRetentionPolicy from '../model/ManagedBackupShortTermRetentionPolicy';
import ManagedBackupShortTermRetentionPolicyListResult from '../model/ManagedBackupShortTermRetentionPolicyListResult';

/**
* ManagedBackupShortTermRetentionPolicies service.
* @module api/ManagedBackupShortTermRetentionPoliciesApi
* @version 2017-03-01-preview
*/
export default class ManagedBackupShortTermRetentionPoliciesApi {

    /**
    * Constructs a new ManagedBackupShortTermRetentionPoliciesApi. 
    * @alias module:api/ManagedBackupShortTermRetentionPoliciesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the managedBackupShortTermRetentionPoliciesCreateOrUpdate operation.
     * @callback module:api/ManagedBackupShortTermRetentionPoliciesApi~managedBackupShortTermRetentionPoliciesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagedBackupShortTermRetentionPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a managed database's short term retention policy.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} managedInstanceName The name of the managed instance.
     * @param {String} databaseName The name of the database.
     * @param {module:model/String} policyName The policy name. Should always be \"default\".
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:model/ManagedBackupShortTermRetentionPolicy} parameters The short term retention policy info.
     * @param {module:api/ManagedBackupShortTermRetentionPoliciesApi~managedBackupShortTermRetentionPoliciesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagedBackupShortTermRetentionPolicy}
     */
    managedBackupShortTermRetentionPoliciesCreateOrUpdate(resourceGroupName, managedInstanceName, databaseName, policyName, subscriptionId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managedBackupShortTermRetentionPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'managedInstanceName' is set
      if (managedInstanceName === undefined || managedInstanceName === null) {
        throw new Error("Missing the required parameter 'managedInstanceName' when calling managedBackupShortTermRetentionPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling managedBackupShortTermRetentionPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling managedBackupShortTermRetentionPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managedBackupShortTermRetentionPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managedBackupShortTermRetentionPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling managedBackupShortTermRetentionPoliciesCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'managedInstanceName': managedInstanceName,
        'databaseName': databaseName,
        'policyName': policyName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagedBackupShortTermRetentionPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/backupShortTermRetentionPolicies/{policyName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managedBackupShortTermRetentionPoliciesGet operation.
     * @callback module:api/ManagedBackupShortTermRetentionPoliciesApi~managedBackupShortTermRetentionPoliciesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagedBackupShortTermRetentionPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a managed database's short term retention policy.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} managedInstanceName The name of the managed instance.
     * @param {String} databaseName The name of the database.
     * @param {module:model/String} policyName The policy name.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/ManagedBackupShortTermRetentionPoliciesApi~managedBackupShortTermRetentionPoliciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagedBackupShortTermRetentionPolicy}
     */
    managedBackupShortTermRetentionPoliciesGet(resourceGroupName, managedInstanceName, databaseName, policyName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managedBackupShortTermRetentionPoliciesGet");
      }
      // verify the required parameter 'managedInstanceName' is set
      if (managedInstanceName === undefined || managedInstanceName === null) {
        throw new Error("Missing the required parameter 'managedInstanceName' when calling managedBackupShortTermRetentionPoliciesGet");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling managedBackupShortTermRetentionPoliciesGet");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling managedBackupShortTermRetentionPoliciesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managedBackupShortTermRetentionPoliciesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managedBackupShortTermRetentionPoliciesGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'managedInstanceName': managedInstanceName,
        'databaseName': databaseName,
        'policyName': policyName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagedBackupShortTermRetentionPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/backupShortTermRetentionPolicies/{policyName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managedBackupShortTermRetentionPoliciesListByDatabase operation.
     * @callback module:api/ManagedBackupShortTermRetentionPoliciesApi~managedBackupShortTermRetentionPoliciesListByDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagedBackupShortTermRetentionPolicyListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a managed database's short term retention policy list.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} managedInstanceName The name of the managed instance.
     * @param {String} databaseName The name of the database.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/ManagedBackupShortTermRetentionPoliciesApi~managedBackupShortTermRetentionPoliciesListByDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagedBackupShortTermRetentionPolicyListResult}
     */
    managedBackupShortTermRetentionPoliciesListByDatabase(resourceGroupName, managedInstanceName, databaseName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managedBackupShortTermRetentionPoliciesListByDatabase");
      }
      // verify the required parameter 'managedInstanceName' is set
      if (managedInstanceName === undefined || managedInstanceName === null) {
        throw new Error("Missing the required parameter 'managedInstanceName' when calling managedBackupShortTermRetentionPoliciesListByDatabase");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling managedBackupShortTermRetentionPoliciesListByDatabase");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managedBackupShortTermRetentionPoliciesListByDatabase");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managedBackupShortTermRetentionPoliciesListByDatabase");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'managedInstanceName': managedInstanceName,
        'databaseName': databaseName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagedBackupShortTermRetentionPolicyListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/backupShortTermRetentionPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managedBackupShortTermRetentionPoliciesUpdate operation.
     * @callback module:api/ManagedBackupShortTermRetentionPoliciesApi~managedBackupShortTermRetentionPoliciesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagedBackupShortTermRetentionPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a managed database's short term retention policy.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} managedInstanceName The name of the managed instance.
     * @param {String} databaseName The name of the database.
     * @param {module:model/String} policyName The policy name. Should always be \"default\".
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:model/ManagedBackupShortTermRetentionPolicy} parameters The short term retention policy info.
     * @param {module:api/ManagedBackupShortTermRetentionPoliciesApi~managedBackupShortTermRetentionPoliciesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagedBackupShortTermRetentionPolicy}
     */
    managedBackupShortTermRetentionPoliciesUpdate(resourceGroupName, managedInstanceName, databaseName, policyName, subscriptionId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managedBackupShortTermRetentionPoliciesUpdate");
      }
      // verify the required parameter 'managedInstanceName' is set
      if (managedInstanceName === undefined || managedInstanceName === null) {
        throw new Error("Missing the required parameter 'managedInstanceName' when calling managedBackupShortTermRetentionPoliciesUpdate");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling managedBackupShortTermRetentionPoliciesUpdate");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling managedBackupShortTermRetentionPoliciesUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managedBackupShortTermRetentionPoliciesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managedBackupShortTermRetentionPoliciesUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling managedBackupShortTermRetentionPoliciesUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'managedInstanceName': managedInstanceName,
        'databaseName': databaseName,
        'policyName': policyName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagedBackupShortTermRetentionPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/backupShortTermRetentionPolicies/{policyName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
