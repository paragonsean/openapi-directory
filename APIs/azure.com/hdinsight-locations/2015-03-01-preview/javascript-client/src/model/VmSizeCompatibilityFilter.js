/**
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2015-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VmSizeCompatibilityFilter model module.
 * @module model/VmSizeCompatibilityFilter
 * @version 2015-03-01-preview
 */
class VmSizeCompatibilityFilter {
    /**
     * Constructs a new <code>VmSizeCompatibilityFilter</code>.
     * The virtual machine type compatibility filter.
     * @alias module:model/VmSizeCompatibilityFilter
     */
    constructor() { 
        
        VmSizeCompatibilityFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VmSizeCompatibilityFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VmSizeCompatibilityFilter} obj Optional instance to populate.
     * @return {module:model/VmSizeCompatibilityFilter} The populated <code>VmSizeCompatibilityFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VmSizeCompatibilityFilter();

            if (data.hasOwnProperty('ClusterFlavors')) {
                obj['ClusterFlavors'] = ApiClient.convertToType(data['ClusterFlavors'], ['String']);
            }
            if (data.hasOwnProperty('ClusterVersions')) {
                obj['ClusterVersions'] = ApiClient.convertToType(data['ClusterVersions'], ['String']);
            }
            if (data.hasOwnProperty('FilterMode')) {
                obj['FilterMode'] = ApiClient.convertToType(data['FilterMode'], 'String');
            }
            if (data.hasOwnProperty('NodeTypes')) {
                obj['NodeTypes'] = ApiClient.convertToType(data['NodeTypes'], ['String']);
            }
            if (data.hasOwnProperty('Regions')) {
                obj['Regions'] = ApiClient.convertToType(data['Regions'], ['String']);
            }
            if (data.hasOwnProperty('vmsizes')) {
                obj['vmsizes'] = ApiClient.convertToType(data['vmsizes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VmSizeCompatibilityFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VmSizeCompatibilityFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['ClusterFlavors'])) {
            throw new Error("Expected the field `ClusterFlavors` to be an array in the JSON data but got " + data['ClusterFlavors']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ClusterVersions'])) {
            throw new Error("Expected the field `ClusterVersions` to be an array in the JSON data but got " + data['ClusterVersions']);
        }
        // ensure the json data is a string
        if (data['FilterMode'] && !(typeof data['FilterMode'] === 'string' || data['FilterMode'] instanceof String)) {
            throw new Error("Expected the field `FilterMode` to be a primitive type in the JSON string but got " + data['FilterMode']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['NodeTypes'])) {
            throw new Error("Expected the field `NodeTypes` to be an array in the JSON data but got " + data['NodeTypes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Regions'])) {
            throw new Error("Expected the field `Regions` to be an array in the JSON data but got " + data['Regions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['vmsizes'])) {
            throw new Error("Expected the field `vmsizes` to be an array in the JSON data but got " + data['vmsizes']);
        }

        return true;
    }


}



/**
 * The list of cluster types available.
 * @member {Array.<String>} ClusterFlavors
 */
VmSizeCompatibilityFilter.prototype['ClusterFlavors'] = undefined;

/**
 * The list of cluster versions.
 * @member {Array.<String>} ClusterVersions
 */
VmSizeCompatibilityFilter.prototype['ClusterVersions'] = undefined;

/**
 * The mode for the filter.
 * @member {String} FilterMode
 */
VmSizeCompatibilityFilter.prototype['FilterMode'] = undefined;

/**
 * The list of node types.
 * @member {Array.<String>} NodeTypes
 */
VmSizeCompatibilityFilter.prototype['NodeTypes'] = undefined;

/**
 * The list of regions.
 * @member {Array.<String>} Regions
 */
VmSizeCompatibilityFilter.prototype['Regions'] = undefined;

/**
 * The list of virtual machine sizes.
 * @member {Array.<String>} vmsizes
 */
VmSizeCompatibilityFilter.prototype['vmsizes'] = undefined;






export default VmSizeCompatibilityFilter;

