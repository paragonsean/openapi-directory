/*
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2015-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.QuotaCapability;
import org.openapitools.client.model.RegionsCapability;
import org.openapitools.client.model.VersionsCapability;
import org.openapitools.client.model.VmSizeCompatibilityFilter;
import org.openapitools.client.model.VmSizesCapability;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Get Capabilities operation response.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:58:27.737005-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CapabilitiesResult {
  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private List<String> features = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUOTA = "quota";
  @SerializedName(SERIALIZED_NAME_QUOTA)
  private QuotaCapability quota;

  public static final String SERIALIZED_NAME_REGIONS = "regions";
  @SerializedName(SERIALIZED_NAME_REGIONS)
  private Map<String, RegionsCapability> regions = new HashMap<>();

  public static final String SERIALIZED_NAME_VERSIONS = "versions";
  @SerializedName(SERIALIZED_NAME_VERSIONS)
  private Map<String, VersionsCapability> versions = new HashMap<>();

  public static final String SERIALIZED_NAME_VM_SIZE_FILTERS = "vmSize_filters";
  @SerializedName(SERIALIZED_NAME_VM_SIZE_FILTERS)
  private List<VmSizeCompatibilityFilter> vmSizeFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_VM_SIZES = "vmSizes";
  @SerializedName(SERIALIZED_NAME_VM_SIZES)
  private Map<String, VmSizesCapability> vmSizes = new HashMap<>();

  public CapabilitiesResult() {
  }

  public CapabilitiesResult features(List<String> features) {
    this.features = features;
    return this;
  }

  public CapabilitiesResult addFeaturesItem(String featuresItem) {
    if (this.features == null) {
      this.features = new ArrayList<>();
    }
    this.features.add(featuresItem);
    return this;
  }

  /**
   * The capability features.
   * @return features
   */
  @javax.annotation.Nullable
  public List<String> getFeatures() {
    return features;
  }

  public void setFeatures(List<String> features) {
    this.features = features;
  }


  public CapabilitiesResult quota(QuotaCapability quota) {
    this.quota = quota;
    return this;
  }

  /**
   * Get quota
   * @return quota
   */
  @javax.annotation.Nullable
  public QuotaCapability getQuota() {
    return quota;
  }

  public void setQuota(QuotaCapability quota) {
    this.quota = quota;
  }


  public CapabilitiesResult regions(Map<String, RegionsCapability> regions) {
    this.regions = regions;
    return this;
  }

  public CapabilitiesResult putRegionsItem(String key, RegionsCapability regionsItem) {
    if (this.regions == null) {
      this.regions = new HashMap<>();
    }
    this.regions.put(key, regionsItem);
    return this;
  }

  /**
   * The virtual machine size compatibility features.
   * @return regions
   */
  @javax.annotation.Nullable
  public Map<String, RegionsCapability> getRegions() {
    return regions;
  }

  public void setRegions(Map<String, RegionsCapability> regions) {
    this.regions = regions;
  }


  public CapabilitiesResult versions(Map<String, VersionsCapability> versions) {
    this.versions = versions;
    return this;
  }

  public CapabilitiesResult putVersionsItem(String key, VersionsCapability versionsItem) {
    if (this.versions == null) {
      this.versions = new HashMap<>();
    }
    this.versions.put(key, versionsItem);
    return this;
  }

  /**
   * The version capability.
   * @return versions
   */
  @javax.annotation.Nullable
  public Map<String, VersionsCapability> getVersions() {
    return versions;
  }

  public void setVersions(Map<String, VersionsCapability> versions) {
    this.versions = versions;
  }


  public CapabilitiesResult vmSizeFilters(List<VmSizeCompatibilityFilter> vmSizeFilters) {
    this.vmSizeFilters = vmSizeFilters;
    return this;
  }

  public CapabilitiesResult addVmSizeFiltersItem(VmSizeCompatibilityFilter vmSizeFiltersItem) {
    if (this.vmSizeFilters == null) {
      this.vmSizeFilters = new ArrayList<>();
    }
    this.vmSizeFilters.add(vmSizeFiltersItem);
    return this;
  }

  /**
   * The virtual machine size compatibility filters.
   * @return vmSizeFilters
   */
  @javax.annotation.Nullable
  public List<VmSizeCompatibilityFilter> getVmSizeFilters() {
    return vmSizeFilters;
  }

  public void setVmSizeFilters(List<VmSizeCompatibilityFilter> vmSizeFilters) {
    this.vmSizeFilters = vmSizeFilters;
  }


  public CapabilitiesResult vmSizes(Map<String, VmSizesCapability> vmSizes) {
    this.vmSizes = vmSizes;
    return this;
  }

  public CapabilitiesResult putVmSizesItem(String key, VmSizesCapability vmSizesItem) {
    if (this.vmSizes == null) {
      this.vmSizes = new HashMap<>();
    }
    this.vmSizes.put(key, vmSizesItem);
    return this;
  }

  /**
   * The virtual machine sizes.
   * @return vmSizes
   */
  @javax.annotation.Nullable
  public Map<String, VmSizesCapability> getVmSizes() {
    return vmSizes;
  }

  public void setVmSizes(Map<String, VmSizesCapability> vmSizes) {
    this.vmSizes = vmSizes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CapabilitiesResult capabilitiesResult = (CapabilitiesResult) o;
    return Objects.equals(this.features, capabilitiesResult.features) &&
        Objects.equals(this.quota, capabilitiesResult.quota) &&
        Objects.equals(this.regions, capabilitiesResult.regions) &&
        Objects.equals(this.versions, capabilitiesResult.versions) &&
        Objects.equals(this.vmSizeFilters, capabilitiesResult.vmSizeFilters) &&
        Objects.equals(this.vmSizes, capabilitiesResult.vmSizes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(features, quota, regions, versions, vmSizeFilters, vmSizes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CapabilitiesResult {\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    quota: ").append(toIndentedString(quota)).append("\n");
    sb.append("    regions: ").append(toIndentedString(regions)).append("\n");
    sb.append("    versions: ").append(toIndentedString(versions)).append("\n");
    sb.append("    vmSizeFilters: ").append(toIndentedString(vmSizeFilters)).append("\n");
    sb.append("    vmSizes: ").append(toIndentedString(vmSizes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("features");
    openapiFields.add("quota");
    openapiFields.add("regions");
    openapiFields.add("versions");
    openapiFields.add("vmSize_filters");
    openapiFields.add("vmSizes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CapabilitiesResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CapabilitiesResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CapabilitiesResult is not found in the empty JSON string", CapabilitiesResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CapabilitiesResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CapabilitiesResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull() && !jsonObj.get("features").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `features` to be an array in the JSON string but got `%s`", jsonObj.get("features").toString()));
      }
      // validate the optional field `quota`
      if (jsonObj.get("quota") != null && !jsonObj.get("quota").isJsonNull()) {
        QuotaCapability.validateJsonElement(jsonObj.get("quota"));
      }
      if (jsonObj.get("vmSize_filters") != null && !jsonObj.get("vmSize_filters").isJsonNull()) {
        JsonArray jsonArrayvmSizeFilters = jsonObj.getAsJsonArray("vmSize_filters");
        if (jsonArrayvmSizeFilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vmSize_filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vmSize_filters` to be an array in the JSON string but got `%s`", jsonObj.get("vmSize_filters").toString()));
          }

          // validate the optional field `vmSize_filters` (array)
          for (int i = 0; i < jsonArrayvmSizeFilters.size(); i++) {
            VmSizeCompatibilityFilter.validateJsonElement(jsonArrayvmSizeFilters.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CapabilitiesResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CapabilitiesResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CapabilitiesResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CapabilitiesResult.class));

       return (TypeAdapter<T>) new TypeAdapter<CapabilitiesResult>() {
           @Override
           public void write(JsonWriter out, CapabilitiesResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CapabilitiesResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CapabilitiesResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CapabilitiesResult
   * @throws IOException if the JSON string is invalid with respect to CapabilitiesResult
   */
  public static CapabilitiesResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CapabilitiesResult.class);
  }

  /**
   * Convert an instance of CapabilitiesResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

