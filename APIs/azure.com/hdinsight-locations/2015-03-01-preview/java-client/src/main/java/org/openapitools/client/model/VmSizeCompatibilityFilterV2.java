/*
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2015-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This class represent a single filter object that defines a multidimensional set. The dimensions of this set are Regions, ClusterFlavors, NodeTypes and ClusterVersions. The constraint should be defined based on the following: FilterMode (Exclude vs Include), VMSizes (the vm sizes in affect of exclusion/inclusion) and the ordering of the Filters. Later filters override previous settings if conflicted.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:58:27.737005-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VmSizeCompatibilityFilterV2 {
  public static final String SERIALIZED_NAME_CLUSTER_FLAVORS = "clusterFlavors";
  @SerializedName(SERIALIZED_NAME_CLUSTER_FLAVORS)
  private List<String> clusterFlavors = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLUSTER_VERSIONS = "clusterVersions";
  @SerializedName(SERIALIZED_NAME_CLUSTER_VERSIONS)
  private List<String> clusterVersions = new ArrayList<>();

  /**
   * The filtering mode. Effectively this can enabling or disabling the VM sizes in a particular set.
   */
  @JsonAdapter(FilterModeEnum.Adapter.class)
  public enum FilterModeEnum {
    EXCLUDE("Exclude"),
    
    INCLUDE("Include");

    private String value;

    FilterModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FilterModeEnum fromValue(String value) {
      for (FilterModeEnum b : FilterModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FilterModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FilterModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FilterModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FilterModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FilterModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FILTER_MODE = "filterMode";
  @SerializedName(SERIALIZED_NAME_FILTER_MODE)
  private FilterModeEnum filterMode;

  public static final String SERIALIZED_NAME_NODE_TYPES = "nodeTypes";
  @SerializedName(SERIALIZED_NAME_NODE_TYPES)
  private List<String> nodeTypes = new ArrayList<>();

  /**
   * Gets or Sets osType
   */
  @JsonAdapter(OsTypeEnum.Adapter.class)
  public enum OsTypeEnum {
    WINDOWS("Windows"),
    
    LINUX("Linux");

    private String value;

    OsTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OsTypeEnum fromValue(String value) {
      for (OsTypeEnum b : OsTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OsTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OsTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OsTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OsTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OS_TYPE = "osType";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private List<OsTypeEnum> osType = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGIONS = "regions";
  @SerializedName(SERIALIZED_NAME_REGIONS)
  private List<String> regions = new ArrayList<>();

  public static final String SERIALIZED_NAME_VM_SIZES = "vmSizes";
  @SerializedName(SERIALIZED_NAME_VM_SIZES)
  private List<String> vmSizes = new ArrayList<>();

  public VmSizeCompatibilityFilterV2() {
  }

  public VmSizeCompatibilityFilterV2 clusterFlavors(List<String> clusterFlavors) {
    this.clusterFlavors = clusterFlavors;
    return this;
  }

  public VmSizeCompatibilityFilterV2 addClusterFlavorsItem(String clusterFlavorsItem) {
    if (this.clusterFlavors == null) {
      this.clusterFlavors = new ArrayList<>();
    }
    this.clusterFlavors.add(clusterFlavorsItem);
    return this;
  }

  /**
   * The list of cluster flavors under the effect of the filter.
   * @return clusterFlavors
   */
  @javax.annotation.Nullable
  public List<String> getClusterFlavors() {
    return clusterFlavors;
  }

  public void setClusterFlavors(List<String> clusterFlavors) {
    this.clusterFlavors = clusterFlavors;
  }


  public VmSizeCompatibilityFilterV2 clusterVersions(List<String> clusterVersions) {
    this.clusterVersions = clusterVersions;
    return this;
  }

  public VmSizeCompatibilityFilterV2 addClusterVersionsItem(String clusterVersionsItem) {
    if (this.clusterVersions == null) {
      this.clusterVersions = new ArrayList<>();
    }
    this.clusterVersions.add(clusterVersionsItem);
    return this;
  }

  /**
   * The list of cluster versions affected in Major.Minor format.
   * @return clusterVersions
   */
  @javax.annotation.Nullable
  public List<String> getClusterVersions() {
    return clusterVersions;
  }

  public void setClusterVersions(List<String> clusterVersions) {
    this.clusterVersions = clusterVersions;
  }


  public VmSizeCompatibilityFilterV2 filterMode(FilterModeEnum filterMode) {
    this.filterMode = filterMode;
    return this;
  }

  /**
   * The filtering mode. Effectively this can enabling or disabling the VM sizes in a particular set.
   * @return filterMode
   */
  @javax.annotation.Nullable
  public FilterModeEnum getFilterMode() {
    return filterMode;
  }

  public void setFilterMode(FilterModeEnum filterMode) {
    this.filterMode = filterMode;
  }


  public VmSizeCompatibilityFilterV2 nodeTypes(List<String> nodeTypes) {
    this.nodeTypes = nodeTypes;
    return this;
  }

  public VmSizeCompatibilityFilterV2 addNodeTypesItem(String nodeTypesItem) {
    if (this.nodeTypes == null) {
      this.nodeTypes = new ArrayList<>();
    }
    this.nodeTypes.add(nodeTypesItem);
    return this;
  }

  /**
   * The list of node types affected by the filter.
   * @return nodeTypes
   */
  @javax.annotation.Nullable
  public List<String> getNodeTypes() {
    return nodeTypes;
  }

  public void setNodeTypes(List<String> nodeTypes) {
    this.nodeTypes = nodeTypes;
  }


  public VmSizeCompatibilityFilterV2 osType(List<OsTypeEnum> osType) {
    this.osType = osType;
    return this;
  }

  public VmSizeCompatibilityFilterV2 addOsTypeItem(OsTypeEnum osTypeItem) {
    if (this.osType == null) {
      this.osType = new ArrayList<>();
    }
    this.osType.add(osTypeItem);
    return this;
  }

  /**
   * The OSType affected, Windows or Linux.
   * @return osType
   */
  @javax.annotation.Nullable
  public List<OsTypeEnum> getOsType() {
    return osType;
  }

  public void setOsType(List<OsTypeEnum> osType) {
    this.osType = osType;
  }


  public VmSizeCompatibilityFilterV2 regions(List<String> regions) {
    this.regions = regions;
    return this;
  }

  public VmSizeCompatibilityFilterV2 addRegionsItem(String regionsItem) {
    if (this.regions == null) {
      this.regions = new ArrayList<>();
    }
    this.regions.add(regionsItem);
    return this;
  }

  /**
   * The list of regions under the effect of the filter.
   * @return regions
   */
  @javax.annotation.Nullable
  public List<String> getRegions() {
    return regions;
  }

  public void setRegions(List<String> regions) {
    this.regions = regions;
  }


  public VmSizeCompatibilityFilterV2 vmSizes(List<String> vmSizes) {
    this.vmSizes = vmSizes;
    return this;
  }

  public VmSizeCompatibilityFilterV2 addVmSizesItem(String vmSizesItem) {
    if (this.vmSizes == null) {
      this.vmSizes = new ArrayList<>();
    }
    this.vmSizes.add(vmSizesItem);
    return this;
  }

  /**
   * The list of virtual machine sizes to include or exclude.
   * @return vmSizes
   */
  @javax.annotation.Nullable
  public List<String> getVmSizes() {
    return vmSizes;
  }

  public void setVmSizes(List<String> vmSizes) {
    this.vmSizes = vmSizes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VmSizeCompatibilityFilterV2 vmSizeCompatibilityFilterV2 = (VmSizeCompatibilityFilterV2) o;
    return Objects.equals(this.clusterFlavors, vmSizeCompatibilityFilterV2.clusterFlavors) &&
        Objects.equals(this.clusterVersions, vmSizeCompatibilityFilterV2.clusterVersions) &&
        Objects.equals(this.filterMode, vmSizeCompatibilityFilterV2.filterMode) &&
        Objects.equals(this.nodeTypes, vmSizeCompatibilityFilterV2.nodeTypes) &&
        Objects.equals(this.osType, vmSizeCompatibilityFilterV2.osType) &&
        Objects.equals(this.regions, vmSizeCompatibilityFilterV2.regions) &&
        Objects.equals(this.vmSizes, vmSizeCompatibilityFilterV2.vmSizes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterFlavors, clusterVersions, filterMode, nodeTypes, osType, regions, vmSizes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VmSizeCompatibilityFilterV2 {\n");
    sb.append("    clusterFlavors: ").append(toIndentedString(clusterFlavors)).append("\n");
    sb.append("    clusterVersions: ").append(toIndentedString(clusterVersions)).append("\n");
    sb.append("    filterMode: ").append(toIndentedString(filterMode)).append("\n");
    sb.append("    nodeTypes: ").append(toIndentedString(nodeTypes)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    regions: ").append(toIndentedString(regions)).append("\n");
    sb.append("    vmSizes: ").append(toIndentedString(vmSizes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clusterFlavors");
    openapiFields.add("clusterVersions");
    openapiFields.add("filterMode");
    openapiFields.add("nodeTypes");
    openapiFields.add("osType");
    openapiFields.add("regions");
    openapiFields.add("vmSizes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VmSizeCompatibilityFilterV2
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VmSizeCompatibilityFilterV2.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VmSizeCompatibilityFilterV2 is not found in the empty JSON string", VmSizeCompatibilityFilterV2.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VmSizeCompatibilityFilterV2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VmSizeCompatibilityFilterV2` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("clusterFlavors") != null && !jsonObj.get("clusterFlavors").isJsonNull() && !jsonObj.get("clusterFlavors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterFlavors` to be an array in the JSON string but got `%s`", jsonObj.get("clusterFlavors").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("clusterVersions") != null && !jsonObj.get("clusterVersions").isJsonNull() && !jsonObj.get("clusterVersions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterVersions` to be an array in the JSON string but got `%s`", jsonObj.get("clusterVersions").toString()));
      }
      if ((jsonObj.get("filterMode") != null && !jsonObj.get("filterMode").isJsonNull()) && !jsonObj.get("filterMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filterMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filterMode").toString()));
      }
      // validate the optional field `filterMode`
      if (jsonObj.get("filterMode") != null && !jsonObj.get("filterMode").isJsonNull()) {
        FilterModeEnum.validateJsonElement(jsonObj.get("filterMode"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("nodeTypes") != null && !jsonObj.get("nodeTypes").isJsonNull() && !jsonObj.get("nodeTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeTypes` to be an array in the JSON string but got `%s`", jsonObj.get("nodeTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull() && !jsonObj.get("osType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `osType` to be an array in the JSON string but got `%s`", jsonObj.get("osType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("regions") != null && !jsonObj.get("regions").isJsonNull() && !jsonObj.get("regions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `regions` to be an array in the JSON string but got `%s`", jsonObj.get("regions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("vmSizes") != null && !jsonObj.get("vmSizes").isJsonNull() && !jsonObj.get("vmSizes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmSizes` to be an array in the JSON string but got `%s`", jsonObj.get("vmSizes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VmSizeCompatibilityFilterV2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VmSizeCompatibilityFilterV2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VmSizeCompatibilityFilterV2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VmSizeCompatibilityFilterV2.class));

       return (TypeAdapter<T>) new TypeAdapter<VmSizeCompatibilityFilterV2>() {
           @Override
           public void write(JsonWriter out, VmSizeCompatibilityFilterV2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VmSizeCompatibilityFilterV2 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VmSizeCompatibilityFilterV2 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VmSizeCompatibilityFilterV2
   * @throws IOException if the JSON string is invalid with respect to VmSizeCompatibilityFilterV2
   */
  public static VmSizeCompatibilityFilterV2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VmSizeCompatibilityFilterV2.class);
  }

  /**
   * Convert an instance of VmSizeCompatibilityFilterV2 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

