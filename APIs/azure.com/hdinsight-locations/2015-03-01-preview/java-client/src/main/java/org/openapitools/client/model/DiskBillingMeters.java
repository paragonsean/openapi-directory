/*
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2015-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The disk billing meters.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:58:27.737005-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiskBillingMeters {
  public static final String SERIALIZED_NAME_DISK_RP_METER = "diskRpMeter";
  @SerializedName(SERIALIZED_NAME_DISK_RP_METER)
  private String diskRpMeter;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  /**
   * The managed disk billing tier, Standard or Premium.
   */
  @JsonAdapter(TierEnum.Adapter.class)
  public enum TierEnum {
    STANDARD("Standard"),
    
    PREMIUM("Premium");

    private String value;

    TierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TierEnum fromValue(String value) {
      for (TierEnum b : TierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private TierEnum tier;

  public DiskBillingMeters() {
  }

  public DiskBillingMeters diskRpMeter(String diskRpMeter) {
    this.diskRpMeter = diskRpMeter;
    return this;
  }

  /**
   * The managed disk meter guid.
   * @return diskRpMeter
   */
  @javax.annotation.Nullable
  public String getDiskRpMeter() {
    return diskRpMeter;
  }

  public void setDiskRpMeter(String diskRpMeter) {
    this.diskRpMeter = diskRpMeter;
  }


  public DiskBillingMeters sku(String sku) {
    this.sku = sku;
    return this;
  }

  /**
   * The managed disk billing sku, P30 or S30.
   * @return sku
   */
  @javax.annotation.Nullable
  public String getSku() {
    return sku;
  }

  public void setSku(String sku) {
    this.sku = sku;
  }


  public DiskBillingMeters tier(TierEnum tier) {
    this.tier = tier;
    return this;
  }

  /**
   * The managed disk billing tier, Standard or Premium.
   * @return tier
   */
  @javax.annotation.Nullable
  public TierEnum getTier() {
    return tier;
  }

  public void setTier(TierEnum tier) {
    this.tier = tier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiskBillingMeters diskBillingMeters = (DiskBillingMeters) o;
    return Objects.equals(this.diskRpMeter, diskBillingMeters.diskRpMeter) &&
        Objects.equals(this.sku, diskBillingMeters.sku) &&
        Objects.equals(this.tier, diskBillingMeters.tier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(diskRpMeter, sku, tier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiskBillingMeters {\n");
    sb.append("    diskRpMeter: ").append(toIndentedString(diskRpMeter)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("diskRpMeter");
    openapiFields.add("sku");
    openapiFields.add("tier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiskBillingMeters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiskBillingMeters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiskBillingMeters is not found in the empty JSON string", DiskBillingMeters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiskBillingMeters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiskBillingMeters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("diskRpMeter") != null && !jsonObj.get("diskRpMeter").isJsonNull()) && !jsonObj.get("diskRpMeter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskRpMeter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskRpMeter").toString()));
      }
      if ((jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) && !jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
      if ((jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) && !jsonObj.get("tier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tier").toString()));
      }
      // validate the optional field `tier`
      if (jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) {
        TierEnum.validateJsonElement(jsonObj.get("tier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiskBillingMeters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiskBillingMeters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiskBillingMeters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiskBillingMeters.class));

       return (TypeAdapter<T>) new TypeAdapter<DiskBillingMeters>() {
           @Override
           public void write(JsonWriter out, DiskBillingMeters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiskBillingMeters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiskBillingMeters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiskBillingMeters
   * @throws IOException if the JSON string is invalid with respect to DiskBillingMeters
   */
  public static DiskBillingMeters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiskBillingMeters.class);
  }

  /**
   * Convert an instance of DiskBillingMeters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

