/**
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2015-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiskBillingMeters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiskBillingMeters::OAIDiskBillingMeters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiskBillingMeters::OAIDiskBillingMeters() {
    this->initializeModel();
}

OAIDiskBillingMeters::~OAIDiskBillingMeters() {}

void OAIDiskBillingMeters::initializeModel() {

    m_disk_rp_meter_isSet = false;
    m_disk_rp_meter_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_tier_isSet = false;
    m_tier_isValid = false;
}

void OAIDiskBillingMeters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiskBillingMeters::fromJsonObject(QJsonObject json) {

    m_disk_rp_meter_isValid = ::OpenAPI::fromJsonValue(m_disk_rp_meter, json[QString("diskRpMeter")]);
    m_disk_rp_meter_isSet = !json[QString("diskRpMeter")].isNull() && m_disk_rp_meter_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_tier_isValid = ::OpenAPI::fromJsonValue(m_tier, json[QString("tier")]);
    m_tier_isSet = !json[QString("tier")].isNull() && m_tier_isValid;
}

QString OAIDiskBillingMeters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiskBillingMeters::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_rp_meter_isSet) {
        obj.insert(QString("diskRpMeter"), ::OpenAPI::toJsonValue(m_disk_rp_meter));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_tier_isSet) {
        obj.insert(QString("tier"), ::OpenAPI::toJsonValue(m_tier));
    }
    return obj;
}

QString OAIDiskBillingMeters::getDiskRpMeter() const {
    return m_disk_rp_meter;
}
void OAIDiskBillingMeters::setDiskRpMeter(const QString &disk_rp_meter) {
    m_disk_rp_meter = disk_rp_meter;
    m_disk_rp_meter_isSet = true;
}

bool OAIDiskBillingMeters::is_disk_rp_meter_Set() const{
    return m_disk_rp_meter_isSet;
}

bool OAIDiskBillingMeters::is_disk_rp_meter_Valid() const{
    return m_disk_rp_meter_isValid;
}

QString OAIDiskBillingMeters::getSku() const {
    return m_sku;
}
void OAIDiskBillingMeters::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIDiskBillingMeters::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIDiskBillingMeters::is_sku_Valid() const{
    return m_sku_isValid;
}

QString OAIDiskBillingMeters::getTier() const {
    return m_tier;
}
void OAIDiskBillingMeters::setTier(const QString &tier) {
    m_tier = tier;
    m_tier_isSet = true;
}

bool OAIDiskBillingMeters::is_tier_Set() const{
    return m_tier_isSet;
}

bool OAIDiskBillingMeters::is_tier_Valid() const{
    return m_tier_isValid;
}

bool OAIDiskBillingMeters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_rp_meter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiskBillingMeters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
