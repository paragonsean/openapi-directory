/**
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2015-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmSizeCompatibilityFilterV2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmSizeCompatibilityFilterV2::OAIVmSizeCompatibilityFilterV2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmSizeCompatibilityFilterV2::OAIVmSizeCompatibilityFilterV2() {
    this->initializeModel();
}

OAIVmSizeCompatibilityFilterV2::~OAIVmSizeCompatibilityFilterV2() {}

void OAIVmSizeCompatibilityFilterV2::initializeModel() {

    m_cluster_flavors_isSet = false;
    m_cluster_flavors_isValid = false;

    m_cluster_versions_isSet = false;
    m_cluster_versions_isValid = false;

    m_filter_mode_isSet = false;
    m_filter_mode_isValid = false;

    m_node_types_isSet = false;
    m_node_types_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_regions_isSet = false;
    m_regions_isValid = false;

    m_vm_sizes_isSet = false;
    m_vm_sizes_isValid = false;
}

void OAIVmSizeCompatibilityFilterV2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmSizeCompatibilityFilterV2::fromJsonObject(QJsonObject json) {

    m_cluster_flavors_isValid = ::OpenAPI::fromJsonValue(m_cluster_flavors, json[QString("clusterFlavors")]);
    m_cluster_flavors_isSet = !json[QString("clusterFlavors")].isNull() && m_cluster_flavors_isValid;

    m_cluster_versions_isValid = ::OpenAPI::fromJsonValue(m_cluster_versions, json[QString("clusterVersions")]);
    m_cluster_versions_isSet = !json[QString("clusterVersions")].isNull() && m_cluster_versions_isValid;

    m_filter_mode_isValid = ::OpenAPI::fromJsonValue(m_filter_mode, json[QString("filterMode")]);
    m_filter_mode_isSet = !json[QString("filterMode")].isNull() && m_filter_mode_isValid;

    m_node_types_isValid = ::OpenAPI::fromJsonValue(m_node_types, json[QString("nodeTypes")]);
    m_node_types_isSet = !json[QString("nodeTypes")].isNull() && m_node_types_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_regions_isValid = ::OpenAPI::fromJsonValue(m_regions, json[QString("regions")]);
    m_regions_isSet = !json[QString("regions")].isNull() && m_regions_isValid;

    m_vm_sizes_isValid = ::OpenAPI::fromJsonValue(m_vm_sizes, json[QString("vmSizes")]);
    m_vm_sizes_isSet = !json[QString("vmSizes")].isNull() && m_vm_sizes_isValid;
}

QString OAIVmSizeCompatibilityFilterV2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmSizeCompatibilityFilterV2::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_flavors.size() > 0) {
        obj.insert(QString("clusterFlavors"), ::OpenAPI::toJsonValue(m_cluster_flavors));
    }
    if (m_cluster_versions.size() > 0) {
        obj.insert(QString("clusterVersions"), ::OpenAPI::toJsonValue(m_cluster_versions));
    }
    if (m_filter_mode_isSet) {
        obj.insert(QString("filterMode"), ::OpenAPI::toJsonValue(m_filter_mode));
    }
    if (m_node_types.size() > 0) {
        obj.insert(QString("nodeTypes"), ::OpenAPI::toJsonValue(m_node_types));
    }
    if (m_os_type.size() > 0) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_regions.size() > 0) {
        obj.insert(QString("regions"), ::OpenAPI::toJsonValue(m_regions));
    }
    if (m_vm_sizes.size() > 0) {
        obj.insert(QString("vmSizes"), ::OpenAPI::toJsonValue(m_vm_sizes));
    }
    return obj;
}

QList<QString> OAIVmSizeCompatibilityFilterV2::getClusterFlavors() const {
    return m_cluster_flavors;
}
void OAIVmSizeCompatibilityFilterV2::setClusterFlavors(const QList<QString> &cluster_flavors) {
    m_cluster_flavors = cluster_flavors;
    m_cluster_flavors_isSet = true;
}

bool OAIVmSizeCompatibilityFilterV2::is_cluster_flavors_Set() const{
    return m_cluster_flavors_isSet;
}

bool OAIVmSizeCompatibilityFilterV2::is_cluster_flavors_Valid() const{
    return m_cluster_flavors_isValid;
}

QList<QString> OAIVmSizeCompatibilityFilterV2::getClusterVersions() const {
    return m_cluster_versions;
}
void OAIVmSizeCompatibilityFilterV2::setClusterVersions(const QList<QString> &cluster_versions) {
    m_cluster_versions = cluster_versions;
    m_cluster_versions_isSet = true;
}

bool OAIVmSizeCompatibilityFilterV2::is_cluster_versions_Set() const{
    return m_cluster_versions_isSet;
}

bool OAIVmSizeCompatibilityFilterV2::is_cluster_versions_Valid() const{
    return m_cluster_versions_isValid;
}

QString OAIVmSizeCompatibilityFilterV2::getFilterMode() const {
    return m_filter_mode;
}
void OAIVmSizeCompatibilityFilterV2::setFilterMode(const QString &filter_mode) {
    m_filter_mode = filter_mode;
    m_filter_mode_isSet = true;
}

bool OAIVmSizeCompatibilityFilterV2::is_filter_mode_Set() const{
    return m_filter_mode_isSet;
}

bool OAIVmSizeCompatibilityFilterV2::is_filter_mode_Valid() const{
    return m_filter_mode_isValid;
}

QList<QString> OAIVmSizeCompatibilityFilterV2::getNodeTypes() const {
    return m_node_types;
}
void OAIVmSizeCompatibilityFilterV2::setNodeTypes(const QList<QString> &node_types) {
    m_node_types = node_types;
    m_node_types_isSet = true;
}

bool OAIVmSizeCompatibilityFilterV2::is_node_types_Set() const{
    return m_node_types_isSet;
}

bool OAIVmSizeCompatibilityFilterV2::is_node_types_Valid() const{
    return m_node_types_isValid;
}

QList<QString> OAIVmSizeCompatibilityFilterV2::getOsType() const {
    return m_os_type;
}
void OAIVmSizeCompatibilityFilterV2::setOsType(const QList<QString> &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIVmSizeCompatibilityFilterV2::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIVmSizeCompatibilityFilterV2::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QList<QString> OAIVmSizeCompatibilityFilterV2::getRegions() const {
    return m_regions;
}
void OAIVmSizeCompatibilityFilterV2::setRegions(const QList<QString> &regions) {
    m_regions = regions;
    m_regions_isSet = true;
}

bool OAIVmSizeCompatibilityFilterV2::is_regions_Set() const{
    return m_regions_isSet;
}

bool OAIVmSizeCompatibilityFilterV2::is_regions_Valid() const{
    return m_regions_isValid;
}

QList<QString> OAIVmSizeCompatibilityFilterV2::getVmSizes() const {
    return m_vm_sizes;
}
void OAIVmSizeCompatibilityFilterV2::setVmSizes(const QList<QString> &vm_sizes) {
    m_vm_sizes = vm_sizes;
    m_vm_sizes_isSet = true;
}

bool OAIVmSizeCompatibilityFilterV2::is_vm_sizes_Set() const{
    return m_vm_sizes_isSet;
}

bool OAIVmSizeCompatibilityFilterV2::is_vm_sizes_Valid() const{
    return m_vm_sizes_isValid;
}

bool OAIVmSizeCompatibilityFilterV2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_flavors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_regions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_sizes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmSizeCompatibilityFilterV2::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
