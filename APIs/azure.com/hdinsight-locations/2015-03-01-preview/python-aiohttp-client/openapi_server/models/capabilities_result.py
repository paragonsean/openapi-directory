# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.quota_capability import QuotaCapability
from openapi_server.models.regions_capability import RegionsCapability
from openapi_server.models.versions_capability import VersionsCapability
from openapi_server.models.vm_size_compatibility_filter import VmSizeCompatibilityFilter
from openapi_server.models.vm_sizes_capability import VmSizesCapability
from openapi_server import util


class CapabilitiesResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, features: List[str]=None, quota: QuotaCapability=None, regions: Dict[str, RegionsCapability]=None, versions: Dict[str, VersionsCapability]=None, vm_size_filters: List[VmSizeCompatibilityFilter]=None, vm_sizes: Dict[str, VmSizesCapability]=None):
        """CapabilitiesResult - a model defined in OpenAPI

        :param features: The features of this CapabilitiesResult.
        :param quota: The quota of this CapabilitiesResult.
        :param regions: The regions of this CapabilitiesResult.
        :param versions: The versions of this CapabilitiesResult.
        :param vm_size_filters: The vm_size_filters of this CapabilitiesResult.
        :param vm_sizes: The vm_sizes of this CapabilitiesResult.
        """
        self.openapi_types = {
            'features': List[str],
            'quota': QuotaCapability,
            'regions': Dict[str, RegionsCapability],
            'versions': Dict[str, VersionsCapability],
            'vm_size_filters': List[VmSizeCompatibilityFilter],
            'vm_sizes': Dict[str, VmSizesCapability]
        }

        self.attribute_map = {
            'features': 'features',
            'quota': 'quota',
            'regions': 'regions',
            'versions': 'versions',
            'vm_size_filters': 'vmSize_filters',
            'vm_sizes': 'vmSizes'
        }

        self._features = features
        self._quota = quota
        self._regions = regions
        self._versions = versions
        self._vm_size_filters = vm_size_filters
        self._vm_sizes = vm_sizes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CapabilitiesResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CapabilitiesResult of this CapabilitiesResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def features(self):
        """Gets the features of this CapabilitiesResult.

        The capability features.

        :return: The features of this CapabilitiesResult.
        :rtype: List[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this CapabilitiesResult.

        The capability features.

        :param features: The features of this CapabilitiesResult.
        :type features: List[str]
        """

        self._features = features

    @property
    def quota(self):
        """Gets the quota of this CapabilitiesResult.


        :return: The quota of this CapabilitiesResult.
        :rtype: QuotaCapability
        """
        return self._quota

    @quota.setter
    def quota(self, quota):
        """Sets the quota of this CapabilitiesResult.


        :param quota: The quota of this CapabilitiesResult.
        :type quota: QuotaCapability
        """

        self._quota = quota

    @property
    def regions(self):
        """Gets the regions of this CapabilitiesResult.

        The virtual machine size compatibility features.

        :return: The regions of this CapabilitiesResult.
        :rtype: Dict[str, RegionsCapability]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this CapabilitiesResult.

        The virtual machine size compatibility features.

        :param regions: The regions of this CapabilitiesResult.
        :type regions: Dict[str, RegionsCapability]
        """

        self._regions = regions

    @property
    def versions(self):
        """Gets the versions of this CapabilitiesResult.

        The version capability.

        :return: The versions of this CapabilitiesResult.
        :rtype: Dict[str, VersionsCapability]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this CapabilitiesResult.

        The version capability.

        :param versions: The versions of this CapabilitiesResult.
        :type versions: Dict[str, VersionsCapability]
        """

        self._versions = versions

    @property
    def vm_size_filters(self):
        """Gets the vm_size_filters of this CapabilitiesResult.

        The virtual machine size compatibility filters.

        :return: The vm_size_filters of this CapabilitiesResult.
        :rtype: List[VmSizeCompatibilityFilter]
        """
        return self._vm_size_filters

    @vm_size_filters.setter
    def vm_size_filters(self, vm_size_filters):
        """Sets the vm_size_filters of this CapabilitiesResult.

        The virtual machine size compatibility filters.

        :param vm_size_filters: The vm_size_filters of this CapabilitiesResult.
        :type vm_size_filters: List[VmSizeCompatibilityFilter]
        """

        self._vm_size_filters = vm_size_filters

    @property
    def vm_sizes(self):
        """Gets the vm_sizes of this CapabilitiesResult.

        The virtual machine sizes.

        :return: The vm_sizes of this CapabilitiesResult.
        :rtype: Dict[str, VmSizesCapability]
        """
        return self._vm_sizes

    @vm_sizes.setter
    def vm_sizes(self, vm_sizes):
        """Sets the vm_sizes of this CapabilitiesResult.

        The virtual machine sizes.

        :param vm_sizes: The vm_sizes of this CapabilitiesResult.
        :type vm_sizes: Dict[str, VmSizesCapability]
        """

        self._vm_sizes = vm_sizes
