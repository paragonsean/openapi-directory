# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BillingMeters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, meter: str=None, meter_parameter: str=None, unit: str=None):
        """BillingMeters - a model defined in OpenAPI

        :param meter: The meter of this BillingMeters.
        :param meter_parameter: The meter_parameter of this BillingMeters.
        :param unit: The unit of this BillingMeters.
        """
        self.openapi_types = {
            'meter': str,
            'meter_parameter': str,
            'unit': str
        }

        self.attribute_map = {
            'meter': 'meter',
            'meter_parameter': 'meterParameter',
            'unit': 'unit'
        }

        self._meter = meter
        self._meter_parameter = meter_parameter
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BillingMeters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BillingMeters of this BillingMeters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def meter(self):
        """Gets the meter of this BillingMeters.

        The HDInsight meter guid.

        :return: The meter of this BillingMeters.
        :rtype: str
        """
        return self._meter

    @meter.setter
    def meter(self, meter):
        """Sets the meter of this BillingMeters.

        The HDInsight meter guid.

        :param meter: The meter of this BillingMeters.
        :type meter: str
        """

        self._meter = meter

    @property
    def meter_parameter(self):
        """Gets the meter_parameter of this BillingMeters.

        The virtual machine sizes.

        :return: The meter_parameter of this BillingMeters.
        :rtype: str
        """
        return self._meter_parameter

    @meter_parameter.setter
    def meter_parameter(self, meter_parameter):
        """Sets the meter_parameter of this BillingMeters.

        The virtual machine sizes.

        :param meter_parameter: The meter_parameter of this BillingMeters.
        :type meter_parameter: str
        """

        self._meter_parameter = meter_parameter

    @property
    def unit(self):
        """Gets the unit of this BillingMeters.

        The unit of meter, VMHours or CoreHours.

        :return: The unit of this BillingMeters.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this BillingMeters.

        The unit of meter, VMHours or CoreHours.

        :param unit: The unit of this BillingMeters.
        :type unit: str
        """

        self._unit = unit
