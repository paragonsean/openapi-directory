# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DiskBillingMeters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disk_rp_meter: str=None, sku: str=None, tier: str=None):
        """DiskBillingMeters - a model defined in OpenAPI

        :param disk_rp_meter: The disk_rp_meter of this DiskBillingMeters.
        :param sku: The sku of this DiskBillingMeters.
        :param tier: The tier of this DiskBillingMeters.
        """
        self.openapi_types = {
            'disk_rp_meter': str,
            'sku': str,
            'tier': str
        }

        self.attribute_map = {
            'disk_rp_meter': 'diskRpMeter',
            'sku': 'sku',
            'tier': 'tier'
        }

        self._disk_rp_meter = disk_rp_meter
        self._sku = sku
        self._tier = tier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiskBillingMeters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiskBillingMeters of this DiskBillingMeters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disk_rp_meter(self):
        """Gets the disk_rp_meter of this DiskBillingMeters.

        The managed disk meter guid.

        :return: The disk_rp_meter of this DiskBillingMeters.
        :rtype: str
        """
        return self._disk_rp_meter

    @disk_rp_meter.setter
    def disk_rp_meter(self, disk_rp_meter):
        """Sets the disk_rp_meter of this DiskBillingMeters.

        The managed disk meter guid.

        :param disk_rp_meter: The disk_rp_meter of this DiskBillingMeters.
        :type disk_rp_meter: str
        """

        self._disk_rp_meter = disk_rp_meter

    @property
    def sku(self):
        """Gets the sku of this DiskBillingMeters.

        The managed disk billing sku, P30 or S30.

        :return: The sku of this DiskBillingMeters.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this DiskBillingMeters.

        The managed disk billing sku, P30 or S30.

        :param sku: The sku of this DiskBillingMeters.
        :type sku: str
        """

        self._sku = sku

    @property
    def tier(self):
        """Gets the tier of this DiskBillingMeters.

        The managed disk billing tier, Standard or Premium.

        :return: The tier of this DiskBillingMeters.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this DiskBillingMeters.

        The managed disk billing tier, Standard or Premium.

        :param tier: The tier of this DiskBillingMeters.
        :type tier: str
        """
        allowed_values = ["Standard", "Premium"]  # noqa: E501
        if tier not in allowed_values:
            raise ValueError(
                "Invalid value for `tier` ({0}), must be one of {1}"
                .format(tier, allowed_values)
            )

        self._tier = tier
