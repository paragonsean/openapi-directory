/**
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmSizeCompatibilityFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmSizeCompatibilityFilter::OAIVmSizeCompatibilityFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmSizeCompatibilityFilter::OAIVmSizeCompatibilityFilter() {
    this->initializeModel();
}

OAIVmSizeCompatibilityFilter::~OAIVmSizeCompatibilityFilter() {}

void OAIVmSizeCompatibilityFilter::initializeModel() {

    m_cluster_flavors_isSet = false;
    m_cluster_flavors_isValid = false;

    m_cluster_versions_isSet = false;
    m_cluster_versions_isValid = false;

    m_filter_mode_isSet = false;
    m_filter_mode_isValid = false;

    m_node_types_isSet = false;
    m_node_types_isValid = false;

    m_regions_isSet = false;
    m_regions_isValid = false;

    m_vmsizes_isSet = false;
    m_vmsizes_isValid = false;
}

void OAIVmSizeCompatibilityFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmSizeCompatibilityFilter::fromJsonObject(QJsonObject json) {

    m_cluster_flavors_isValid = ::OpenAPI::fromJsonValue(m_cluster_flavors, json[QString("ClusterFlavors")]);
    m_cluster_flavors_isSet = !json[QString("ClusterFlavors")].isNull() && m_cluster_flavors_isValid;

    m_cluster_versions_isValid = ::OpenAPI::fromJsonValue(m_cluster_versions, json[QString("ClusterVersions")]);
    m_cluster_versions_isSet = !json[QString("ClusterVersions")].isNull() && m_cluster_versions_isValid;

    m_filter_mode_isValid = ::OpenAPI::fromJsonValue(m_filter_mode, json[QString("FilterMode")]);
    m_filter_mode_isSet = !json[QString("FilterMode")].isNull() && m_filter_mode_isValid;

    m_node_types_isValid = ::OpenAPI::fromJsonValue(m_node_types, json[QString("NodeTypes")]);
    m_node_types_isSet = !json[QString("NodeTypes")].isNull() && m_node_types_isValid;

    m_regions_isValid = ::OpenAPI::fromJsonValue(m_regions, json[QString("Regions")]);
    m_regions_isSet = !json[QString("Regions")].isNull() && m_regions_isValid;

    m_vmsizes_isValid = ::OpenAPI::fromJsonValue(m_vmsizes, json[QString("vmsizes")]);
    m_vmsizes_isSet = !json[QString("vmsizes")].isNull() && m_vmsizes_isValid;
}

QString OAIVmSizeCompatibilityFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmSizeCompatibilityFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_flavors.size() > 0) {
        obj.insert(QString("ClusterFlavors"), ::OpenAPI::toJsonValue(m_cluster_flavors));
    }
    if (m_cluster_versions.size() > 0) {
        obj.insert(QString("ClusterVersions"), ::OpenAPI::toJsonValue(m_cluster_versions));
    }
    if (m_filter_mode_isSet) {
        obj.insert(QString("FilterMode"), ::OpenAPI::toJsonValue(m_filter_mode));
    }
    if (m_node_types.size() > 0) {
        obj.insert(QString("NodeTypes"), ::OpenAPI::toJsonValue(m_node_types));
    }
    if (m_regions.size() > 0) {
        obj.insert(QString("Regions"), ::OpenAPI::toJsonValue(m_regions));
    }
    if (m_vmsizes.size() > 0) {
        obj.insert(QString("vmsizes"), ::OpenAPI::toJsonValue(m_vmsizes));
    }
    return obj;
}

QList<QString> OAIVmSizeCompatibilityFilter::getClusterFlavors() const {
    return m_cluster_flavors;
}
void OAIVmSizeCompatibilityFilter::setClusterFlavors(const QList<QString> &cluster_flavors) {
    m_cluster_flavors = cluster_flavors;
    m_cluster_flavors_isSet = true;
}

bool OAIVmSizeCompatibilityFilter::is_cluster_flavors_Set() const{
    return m_cluster_flavors_isSet;
}

bool OAIVmSizeCompatibilityFilter::is_cluster_flavors_Valid() const{
    return m_cluster_flavors_isValid;
}

QList<QString> OAIVmSizeCompatibilityFilter::getClusterVersions() const {
    return m_cluster_versions;
}
void OAIVmSizeCompatibilityFilter::setClusterVersions(const QList<QString> &cluster_versions) {
    m_cluster_versions = cluster_versions;
    m_cluster_versions_isSet = true;
}

bool OAIVmSizeCompatibilityFilter::is_cluster_versions_Set() const{
    return m_cluster_versions_isSet;
}

bool OAIVmSizeCompatibilityFilter::is_cluster_versions_Valid() const{
    return m_cluster_versions_isValid;
}

QString OAIVmSizeCompatibilityFilter::getFilterMode() const {
    return m_filter_mode;
}
void OAIVmSizeCompatibilityFilter::setFilterMode(const QString &filter_mode) {
    m_filter_mode = filter_mode;
    m_filter_mode_isSet = true;
}

bool OAIVmSizeCompatibilityFilter::is_filter_mode_Set() const{
    return m_filter_mode_isSet;
}

bool OAIVmSizeCompatibilityFilter::is_filter_mode_Valid() const{
    return m_filter_mode_isValid;
}

QList<QString> OAIVmSizeCompatibilityFilter::getNodeTypes() const {
    return m_node_types;
}
void OAIVmSizeCompatibilityFilter::setNodeTypes(const QList<QString> &node_types) {
    m_node_types = node_types;
    m_node_types_isSet = true;
}

bool OAIVmSizeCompatibilityFilter::is_node_types_Set() const{
    return m_node_types_isSet;
}

bool OAIVmSizeCompatibilityFilter::is_node_types_Valid() const{
    return m_node_types_isValid;
}

QList<QString> OAIVmSizeCompatibilityFilter::getRegions() const {
    return m_regions;
}
void OAIVmSizeCompatibilityFilter::setRegions(const QList<QString> &regions) {
    m_regions = regions;
    m_regions_isSet = true;
}

bool OAIVmSizeCompatibilityFilter::is_regions_Set() const{
    return m_regions_isSet;
}

bool OAIVmSizeCompatibilityFilter::is_regions_Valid() const{
    return m_regions_isValid;
}

QList<QString> OAIVmSizeCompatibilityFilter::getVmsizes() const {
    return m_vmsizes;
}
void OAIVmSizeCompatibilityFilter::setVmsizes(const QList<QString> &vmsizes) {
    m_vmsizes = vmsizes;
    m_vmsizes_isSet = true;
}

bool OAIVmSizeCompatibilityFilter::is_vmsizes_Set() const{
    return m_vmsizes_isSet;
}

bool OAIVmSizeCompatibilityFilter::is_vmsizes_Valid() const{
    return m_vmsizes_isValid;
}

bool OAIVmSizeCompatibilityFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_flavors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_regions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vmsizes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmSizeCompatibilityFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
