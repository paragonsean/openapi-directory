/**
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBillingMeters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBillingMeters::OAIBillingMeters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBillingMeters::OAIBillingMeters() {
    this->initializeModel();
}

OAIBillingMeters::~OAIBillingMeters() {}

void OAIBillingMeters::initializeModel() {

    m_meter_isSet = false;
    m_meter_isValid = false;

    m_meter_parameter_isSet = false;
    m_meter_parameter_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIBillingMeters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBillingMeters::fromJsonObject(QJsonObject json) {

    m_meter_isValid = ::OpenAPI::fromJsonValue(m_meter, json[QString("meter")]);
    m_meter_isSet = !json[QString("meter")].isNull() && m_meter_isValid;

    m_meter_parameter_isValid = ::OpenAPI::fromJsonValue(m_meter_parameter, json[QString("meterParameter")]);
    m_meter_parameter_isSet = !json[QString("meterParameter")].isNull() && m_meter_parameter_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;
}

QString OAIBillingMeters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBillingMeters::asJsonObject() const {
    QJsonObject obj;
    if (m_meter_isSet) {
        obj.insert(QString("meter"), ::OpenAPI::toJsonValue(m_meter));
    }
    if (m_meter_parameter_isSet) {
        obj.insert(QString("meterParameter"), ::OpenAPI::toJsonValue(m_meter_parameter));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

QString OAIBillingMeters::getMeter() const {
    return m_meter;
}
void OAIBillingMeters::setMeter(const QString &meter) {
    m_meter = meter;
    m_meter_isSet = true;
}

bool OAIBillingMeters::is_meter_Set() const{
    return m_meter_isSet;
}

bool OAIBillingMeters::is_meter_Valid() const{
    return m_meter_isValid;
}

QString OAIBillingMeters::getMeterParameter() const {
    return m_meter_parameter;
}
void OAIBillingMeters::setMeterParameter(const QString &meter_parameter) {
    m_meter_parameter = meter_parameter;
    m_meter_parameter_isSet = true;
}

bool OAIBillingMeters::is_meter_parameter_Set() const{
    return m_meter_parameter_isSet;
}

bool OAIBillingMeters::is_meter_parameter_Valid() const{
    return m_meter_parameter_isValid;
}

QString OAIBillingMeters::getUnit() const {
    return m_unit;
}
void OAIBillingMeters::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIBillingMeters::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIBillingMeters::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIBillingMeters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_meter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meter_parameter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBillingMeters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
