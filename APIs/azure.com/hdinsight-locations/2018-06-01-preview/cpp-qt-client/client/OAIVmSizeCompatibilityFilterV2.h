/**
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVmSizeCompatibilityFilterV2.h
 *
 * This class represent a single filter object that defines a multidimensional set. The dimensions of this set are Regions, ClusterFlavors, NodeTypes and ClusterVersions. The constraint should be defined based on the following: FilterMode (Exclude vs Include), VMSizes (the vm sizes in affect of exclusion/inclusion) and the ordering of the Filters. Later filters override previous settings if conflicted.
 */

#ifndef OAIVmSizeCompatibilityFilterV2_H
#define OAIVmSizeCompatibilityFilterV2_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIVmSizeCompatibilityFilterV2 : public OAIObject {
public:
    OAIVmSizeCompatibilityFilterV2();
    OAIVmSizeCompatibilityFilterV2(QString json);
    ~OAIVmSizeCompatibilityFilterV2() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getClusterFlavors() const;
    void setClusterFlavors(const QList<QString> &cluster_flavors);
    bool is_cluster_flavors_Set() const;
    bool is_cluster_flavors_Valid() const;

    QList<QString> getClusterVersions() const;
    void setClusterVersions(const QList<QString> &cluster_versions);
    bool is_cluster_versions_Set() const;
    bool is_cluster_versions_Valid() const;

    QString getFilterMode() const;
    void setFilterMode(const QString &filter_mode);
    bool is_filter_mode_Set() const;
    bool is_filter_mode_Valid() const;

    QList<QString> getNodeTypes() const;
    void setNodeTypes(const QList<QString> &node_types);
    bool is_node_types_Set() const;
    bool is_node_types_Valid() const;

    QList<QString> getOsType() const;
    void setOsType(const QList<QString> &os_type);
    bool is_os_type_Set() const;
    bool is_os_type_Valid() const;

    QList<QString> getRegions() const;
    void setRegions(const QList<QString> &regions);
    bool is_regions_Set() const;
    bool is_regions_Valid() const;

    QList<QString> getVmSizes() const;
    void setVmSizes(const QList<QString> &vm_sizes);
    bool is_vm_sizes_Set() const;
    bool is_vm_sizes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_cluster_flavors;
    bool m_cluster_flavors_isSet;
    bool m_cluster_flavors_isValid;

    QList<QString> m_cluster_versions;
    bool m_cluster_versions_isSet;
    bool m_cluster_versions_isValid;

    QString m_filter_mode;
    bool m_filter_mode_isSet;
    bool m_filter_mode_isValid;

    QList<QString> m_node_types;
    bool m_node_types_isSet;
    bool m_node_types_isValid;

    QList<QString> m_os_type;
    bool m_os_type_isSet;
    bool m_os_type_isValid;

    QList<QString> m_regions;
    bool m_regions_isSet;
    bool m_regions_isValid;

    QList<QString> m_vm_sizes;
    bool m_vm_sizes_isSet;
    bool m_vm_sizes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVmSizeCompatibilityFilterV2)

#endif // OAIVmSizeCompatibilityFilterV2_H
