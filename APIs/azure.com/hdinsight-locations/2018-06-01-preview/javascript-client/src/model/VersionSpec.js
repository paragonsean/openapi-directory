/**
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VersionSpec model module.
 * @module model/VersionSpec
 * @version 2018-06-01-preview
 */
class VersionSpec {
    /**
     * Constructs a new <code>VersionSpec</code>.
     * The version properties.
     * @alias module:model/VersionSpec
     */
    constructor() { 
        
        VersionSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VersionSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VersionSpec} obj Optional instance to populate.
     * @return {module:model/VersionSpec} The populated <code>VersionSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VersionSpec();

            if (data.hasOwnProperty('componentVersions')) {
                obj['componentVersions'] = ApiClient.convertToType(data['componentVersions'], {'String': 'String'});
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('friendlyName')) {
                obj['friendlyName'] = ApiClient.convertToType(data['friendlyName'], 'String');
            }
            if (data.hasOwnProperty('isDefault')) {
                obj['isDefault'] = ApiClient.convertToType(data['isDefault'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VersionSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VersionSpec</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['friendlyName'] && !(typeof data['friendlyName'] === 'string' || data['friendlyName'] instanceof String)) {
            throw new Error("Expected the field `friendlyName` to be a primitive type in the JSON string but got " + data['friendlyName']);
        }
        // ensure the json data is a string
        if (data['isDefault'] && !(typeof data['isDefault'] === 'string' || data['isDefault'] instanceof String)) {
            throw new Error("Expected the field `isDefault` to be a primitive type in the JSON string but got " + data['isDefault']);
        }

        return true;
    }


}



/**
 * The component version property.
 * @member {Object.<String, String>} componentVersions
 */
VersionSpec.prototype['componentVersions'] = undefined;

/**
 * The display name
 * @member {String} displayName
 */
VersionSpec.prototype['displayName'] = undefined;

/**
 * The friendly name
 * @member {String} friendlyName
 */
VersionSpec.prototype['friendlyName'] = undefined;

/**
 * Whether or not the version is the default version.
 * @member {String} isDefault
 */
VersionSpec.prototype['isDefault'] = undefined;






export default VersionSpec;

