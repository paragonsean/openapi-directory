/**
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VmSizeCompatibilityFilterV2 model module.
 * @module model/VmSizeCompatibilityFilterV2
 * @version 2018-06-01-preview
 */
class VmSizeCompatibilityFilterV2 {
    /**
     * Constructs a new <code>VmSizeCompatibilityFilterV2</code>.
     * This class represent a single filter object that defines a multidimensional set. The dimensions of this set are Regions, ClusterFlavors, NodeTypes and ClusterVersions. The constraint should be defined based on the following: FilterMode (Exclude vs Include), VMSizes (the vm sizes in affect of exclusion/inclusion) and the ordering of the Filters. Later filters override previous settings if conflicted.
     * @alias module:model/VmSizeCompatibilityFilterV2
     */
    constructor() { 
        
        VmSizeCompatibilityFilterV2.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VmSizeCompatibilityFilterV2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VmSizeCompatibilityFilterV2} obj Optional instance to populate.
     * @return {module:model/VmSizeCompatibilityFilterV2} The populated <code>VmSizeCompatibilityFilterV2</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VmSizeCompatibilityFilterV2();

            if (data.hasOwnProperty('clusterFlavors')) {
                obj['clusterFlavors'] = ApiClient.convertToType(data['clusterFlavors'], ['String']);
            }
            if (data.hasOwnProperty('clusterVersions')) {
                obj['clusterVersions'] = ApiClient.convertToType(data['clusterVersions'], ['String']);
            }
            if (data.hasOwnProperty('filterMode')) {
                obj['filterMode'] = ApiClient.convertToType(data['filterMode'], 'String');
            }
            if (data.hasOwnProperty('nodeTypes')) {
                obj['nodeTypes'] = ApiClient.convertToType(data['nodeTypes'], ['String']);
            }
            if (data.hasOwnProperty('osType')) {
                obj['osType'] = ApiClient.convertToType(data['osType'], ['String']);
            }
            if (data.hasOwnProperty('regions')) {
                obj['regions'] = ApiClient.convertToType(data['regions'], ['String']);
            }
            if (data.hasOwnProperty('vmSizes')) {
                obj['vmSizes'] = ApiClient.convertToType(data['vmSizes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VmSizeCompatibilityFilterV2</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VmSizeCompatibilityFilterV2</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['clusterFlavors'])) {
            throw new Error("Expected the field `clusterFlavors` to be an array in the JSON data but got " + data['clusterFlavors']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['clusterVersions'])) {
            throw new Error("Expected the field `clusterVersions` to be an array in the JSON data but got " + data['clusterVersions']);
        }
        // ensure the json data is a string
        if (data['filterMode'] && !(typeof data['filterMode'] === 'string' || data['filterMode'] instanceof String)) {
            throw new Error("Expected the field `filterMode` to be a primitive type in the JSON string but got " + data['filterMode']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['nodeTypes'])) {
            throw new Error("Expected the field `nodeTypes` to be an array in the JSON data but got " + data['nodeTypes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['osType'])) {
            throw new Error("Expected the field `osType` to be an array in the JSON data but got " + data['osType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['regions'])) {
            throw new Error("Expected the field `regions` to be an array in the JSON data but got " + data['regions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['vmSizes'])) {
            throw new Error("Expected the field `vmSizes` to be an array in the JSON data but got " + data['vmSizes']);
        }

        return true;
    }


}



/**
 * The list of cluster flavors under the effect of the filter.
 * @member {Array.<String>} clusterFlavors
 */
VmSizeCompatibilityFilterV2.prototype['clusterFlavors'] = undefined;

/**
 * The list of cluster versions affected in Major.Minor format.
 * @member {Array.<String>} clusterVersions
 */
VmSizeCompatibilityFilterV2.prototype['clusterVersions'] = undefined;

/**
 * The filtering mode. Effectively this can enabling or disabling the VM sizes in a particular set.
 * @member {module:model/VmSizeCompatibilityFilterV2.FilterModeEnum} filterMode
 */
VmSizeCompatibilityFilterV2.prototype['filterMode'] = undefined;

/**
 * The list of node types affected by the filter.
 * @member {Array.<String>} nodeTypes
 */
VmSizeCompatibilityFilterV2.prototype['nodeTypes'] = undefined;

/**
 * The OSType affected, Windows or Linux.
 * @member {Array.<module:model/VmSizeCompatibilityFilterV2.OsTypeEnum>} osType
 */
VmSizeCompatibilityFilterV2.prototype['osType'] = undefined;

/**
 * The list of regions under the effect of the filter.
 * @member {Array.<String>} regions
 */
VmSizeCompatibilityFilterV2.prototype['regions'] = undefined;

/**
 * The list of virtual machine sizes to include or exclude.
 * @member {Array.<String>} vmSizes
 */
VmSizeCompatibilityFilterV2.prototype['vmSizes'] = undefined;





/**
 * Allowed values for the <code>filterMode</code> property.
 * @enum {String}
 * @readonly
 */
VmSizeCompatibilityFilterV2['FilterModeEnum'] = {

    /**
     * value: "Exclude"
     * @const
     */
    "Exclude": "Exclude",

    /**
     * value: "Include"
     * @const
     */
    "Include": "Include"
};


/**
 * Allowed values for the <code>osType</code> property.
 * @enum {String}
 * @readonly
 */
VmSizeCompatibilityFilterV2['OsTypeEnum'] = {

    /**
     * value: "Windows"
     * @const
     */
    "Windows": "Windows",

    /**
     * value: "Linux"
     * @const
     */
    "Linux": "Linux"
};



export default VmSizeCompatibilityFilterV2;

