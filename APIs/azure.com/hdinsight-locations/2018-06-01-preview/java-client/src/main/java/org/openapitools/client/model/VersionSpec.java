/*
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The version properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:58:26.122352-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VersionSpec {
  public static final String SERIALIZED_NAME_COMPONENT_VERSIONS = "componentVersions";
  @SerializedName(SERIALIZED_NAME_COMPONENT_VERSIONS)
  private Map<String, String> componentVersions = new HashMap<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_IS_DEFAULT = "isDefault";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private String isDefault;

  public VersionSpec() {
  }

  public VersionSpec componentVersions(Map<String, String> componentVersions) {
    this.componentVersions = componentVersions;
    return this;
  }

  public VersionSpec putComponentVersionsItem(String key, String componentVersionsItem) {
    if (this.componentVersions == null) {
      this.componentVersions = new HashMap<>();
    }
    this.componentVersions.put(key, componentVersionsItem);
    return this;
  }

  /**
   * The component version property.
   * @return componentVersions
   */
  @javax.annotation.Nullable
  public Map<String, String> getComponentVersions() {
    return componentVersions;
  }

  public void setComponentVersions(Map<String, String> componentVersions) {
    this.componentVersions = componentVersions;
  }


  public VersionSpec displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public VersionSpec friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * The friendly name
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public VersionSpec isDefault(String isDefault) {
    this.isDefault = isDefault;
    return this;
  }

  /**
   * Whether or not the version is the default version.
   * @return isDefault
   */
  @javax.annotation.Nullable
  public String getIsDefault() {
    return isDefault;
  }

  public void setIsDefault(String isDefault) {
    this.isDefault = isDefault;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VersionSpec versionSpec = (VersionSpec) o;
    return Objects.equals(this.componentVersions, versionSpec.componentVersions) &&
        Objects.equals(this.displayName, versionSpec.displayName) &&
        Objects.equals(this.friendlyName, versionSpec.friendlyName) &&
        Objects.equals(this.isDefault, versionSpec.isDefault);
  }

  @Override
  public int hashCode() {
    return Objects.hash(componentVersions, displayName, friendlyName, isDefault);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VersionSpec {\n");
    sb.append("    componentVersions: ").append(toIndentedString(componentVersions)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("componentVersions");
    openapiFields.add("displayName");
    openapiFields.add("friendlyName");
    openapiFields.add("isDefault");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VersionSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VersionSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VersionSpec is not found in the empty JSON string", VersionSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VersionSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VersionSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("friendlyName") != null && !jsonObj.get("friendlyName").isJsonNull()) && !jsonObj.get("friendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyName").toString()));
      }
      if ((jsonObj.get("isDefault") != null && !jsonObj.get("isDefault").isJsonNull()) && !jsonObj.get("isDefault").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isDefault` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isDefault").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VersionSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VersionSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VersionSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VersionSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<VersionSpec>() {
           @Override
           public void write(JsonWriter out, VersionSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VersionSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VersionSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VersionSpec
   * @throws IOException if the JSON string is invalid with respect to VersionSpec
   */
  public static VersionSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VersionSpec.class);
  }

  /**
   * Convert an instance of VersionSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

