# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.regional_quota_capability import RegionalQuotaCapability
from openapi_server import util


class QuotaCapability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cores_used: int=None, max_cores_allowed: int=None, regional_quotas: List[RegionalQuotaCapability]=None):
        """QuotaCapability - a model defined in OpenAPI

        :param cores_used: The cores_used of this QuotaCapability.
        :param max_cores_allowed: The max_cores_allowed of this QuotaCapability.
        :param regional_quotas: The regional_quotas of this QuotaCapability.
        """
        self.openapi_types = {
            'cores_used': int,
            'max_cores_allowed': int,
            'regional_quotas': List[RegionalQuotaCapability]
        }

        self.attribute_map = {
            'cores_used': 'cores_used',
            'max_cores_allowed': 'max_cores_allowed',
            'regional_quotas': 'regionalQuotas'
        }

        self._cores_used = cores_used
        self._max_cores_allowed = max_cores_allowed
        self._regional_quotas = regional_quotas

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuotaCapability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QuotaCapability of this QuotaCapability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cores_used(self):
        """Gets the cores_used of this QuotaCapability.

        The number of cores used in the subscription.

        :return: The cores_used of this QuotaCapability.
        :rtype: int
        """
        return self._cores_used

    @cores_used.setter
    def cores_used(self, cores_used):
        """Sets the cores_used of this QuotaCapability.

        The number of cores used in the subscription.

        :param cores_used: The cores_used of this QuotaCapability.
        :type cores_used: int
        """

        self._cores_used = cores_used

    @property
    def max_cores_allowed(self):
        """Gets the max_cores_allowed of this QuotaCapability.

        The number of cores that the subscription allowed.

        :return: The max_cores_allowed of this QuotaCapability.
        :rtype: int
        """
        return self._max_cores_allowed

    @max_cores_allowed.setter
    def max_cores_allowed(self, max_cores_allowed):
        """Sets the max_cores_allowed of this QuotaCapability.

        The number of cores that the subscription allowed.

        :param max_cores_allowed: The max_cores_allowed of this QuotaCapability.
        :type max_cores_allowed: int
        """

        self._max_cores_allowed = max_cores_allowed

    @property
    def regional_quotas(self):
        """Gets the regional_quotas of this QuotaCapability.

        The list of region quota capabilities.

        :return: The regional_quotas of this QuotaCapability.
        :rtype: List[RegionalQuotaCapability]
        """
        return self._regional_quotas

    @regional_quotas.setter
    def regional_quotas(self, regional_quotas):
        """Sets the regional_quotas of this QuotaCapability.

        The list of region quota capabilities.

        :param regional_quotas: The regional_quotas of this QuotaCapability.
        :type regional_quotas: List[RegionalQuotaCapability]
        """

        self._regional_quotas = regional_quotas
