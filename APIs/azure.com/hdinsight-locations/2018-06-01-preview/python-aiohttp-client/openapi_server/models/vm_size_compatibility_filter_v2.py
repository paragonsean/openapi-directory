# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VmSizeCompatibilityFilterV2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_flavors: List[str]=None, cluster_versions: List[str]=None, filter_mode: str=None, node_types: List[str]=None, os_type: List[str]=None, regions: List[str]=None, vm_sizes: List[str]=None):
        """VmSizeCompatibilityFilterV2 - a model defined in OpenAPI

        :param cluster_flavors: The cluster_flavors of this VmSizeCompatibilityFilterV2.
        :param cluster_versions: The cluster_versions of this VmSizeCompatibilityFilterV2.
        :param filter_mode: The filter_mode of this VmSizeCompatibilityFilterV2.
        :param node_types: The node_types of this VmSizeCompatibilityFilterV2.
        :param os_type: The os_type of this VmSizeCompatibilityFilterV2.
        :param regions: The regions of this VmSizeCompatibilityFilterV2.
        :param vm_sizes: The vm_sizes of this VmSizeCompatibilityFilterV2.
        """
        self.openapi_types = {
            'cluster_flavors': List[str],
            'cluster_versions': List[str],
            'filter_mode': str,
            'node_types': List[str],
            'os_type': List[str],
            'regions': List[str],
            'vm_sizes': List[str]
        }

        self.attribute_map = {
            'cluster_flavors': 'clusterFlavors',
            'cluster_versions': 'clusterVersions',
            'filter_mode': 'filterMode',
            'node_types': 'nodeTypes',
            'os_type': 'osType',
            'regions': 'regions',
            'vm_sizes': 'vmSizes'
        }

        self._cluster_flavors = cluster_flavors
        self._cluster_versions = cluster_versions
        self._filter_mode = filter_mode
        self._node_types = node_types
        self._os_type = os_type
        self._regions = regions
        self._vm_sizes = vm_sizes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VmSizeCompatibilityFilterV2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VmSizeCompatibilityFilterV2 of this VmSizeCompatibilityFilterV2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_flavors(self):
        """Gets the cluster_flavors of this VmSizeCompatibilityFilterV2.

        The list of cluster flavors under the effect of the filter.

        :return: The cluster_flavors of this VmSizeCompatibilityFilterV2.
        :rtype: List[str]
        """
        return self._cluster_flavors

    @cluster_flavors.setter
    def cluster_flavors(self, cluster_flavors):
        """Sets the cluster_flavors of this VmSizeCompatibilityFilterV2.

        The list of cluster flavors under the effect of the filter.

        :param cluster_flavors: The cluster_flavors of this VmSizeCompatibilityFilterV2.
        :type cluster_flavors: List[str]
        """

        self._cluster_flavors = cluster_flavors

    @property
    def cluster_versions(self):
        """Gets the cluster_versions of this VmSizeCompatibilityFilterV2.

        The list of cluster versions affected in Major.Minor format.

        :return: The cluster_versions of this VmSizeCompatibilityFilterV2.
        :rtype: List[str]
        """
        return self._cluster_versions

    @cluster_versions.setter
    def cluster_versions(self, cluster_versions):
        """Sets the cluster_versions of this VmSizeCompatibilityFilterV2.

        The list of cluster versions affected in Major.Minor format.

        :param cluster_versions: The cluster_versions of this VmSizeCompatibilityFilterV2.
        :type cluster_versions: List[str]
        """

        self._cluster_versions = cluster_versions

    @property
    def filter_mode(self):
        """Gets the filter_mode of this VmSizeCompatibilityFilterV2.

        The filtering mode. Effectively this can enabling or disabling the VM sizes in a particular set.

        :return: The filter_mode of this VmSizeCompatibilityFilterV2.
        :rtype: str
        """
        return self._filter_mode

    @filter_mode.setter
    def filter_mode(self, filter_mode):
        """Sets the filter_mode of this VmSizeCompatibilityFilterV2.

        The filtering mode. Effectively this can enabling or disabling the VM sizes in a particular set.

        :param filter_mode: The filter_mode of this VmSizeCompatibilityFilterV2.
        :type filter_mode: str
        """
        allowed_values = ["Exclude", "Include"]  # noqa: E501
        if filter_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `filter_mode` ({0}), must be one of {1}"
                .format(filter_mode, allowed_values)
            )

        self._filter_mode = filter_mode

    @property
    def node_types(self):
        """Gets the node_types of this VmSizeCompatibilityFilterV2.

        The list of node types affected by the filter.

        :return: The node_types of this VmSizeCompatibilityFilterV2.
        :rtype: List[str]
        """
        return self._node_types

    @node_types.setter
    def node_types(self, node_types):
        """Sets the node_types of this VmSizeCompatibilityFilterV2.

        The list of node types affected by the filter.

        :param node_types: The node_types of this VmSizeCompatibilityFilterV2.
        :type node_types: List[str]
        """

        self._node_types = node_types

    @property
    def os_type(self):
        """Gets the os_type of this VmSizeCompatibilityFilterV2.

        The OSType affected, Windows or Linux.

        :return: The os_type of this VmSizeCompatibilityFilterV2.
        :rtype: List[str]
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this VmSizeCompatibilityFilterV2.

        The OSType affected, Windows or Linux.

        :param os_type: The os_type of this VmSizeCompatibilityFilterV2.
        :type os_type: List[str]
        """
        allowed_values = ["Windows", "Linux"]  # noqa: E501
        if not set(os_type).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `os_type` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(os_type) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._os_type = os_type

    @property
    def regions(self):
        """Gets the regions of this VmSizeCompatibilityFilterV2.

        The list of regions under the effect of the filter.

        :return: The regions of this VmSizeCompatibilityFilterV2.
        :rtype: List[str]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this VmSizeCompatibilityFilterV2.

        The list of regions under the effect of the filter.

        :param regions: The regions of this VmSizeCompatibilityFilterV2.
        :type regions: List[str]
        """

        self._regions = regions

    @property
    def vm_sizes(self):
        """Gets the vm_sizes of this VmSizeCompatibilityFilterV2.

        The list of virtual machine sizes to include or exclude.

        :return: The vm_sizes of this VmSizeCompatibilityFilterV2.
        :rtype: List[str]
        """
        return self._vm_sizes

    @vm_sizes.setter
    def vm_sizes(self, vm_sizes):
        """Sets the vm_sizes of this VmSizeCompatibilityFilterV2.

        The list of virtual machine sizes to include or exclude.

        :param vm_sizes: The vm_sizes of this VmSizeCompatibilityFilterV2.
        :type vm_sizes: List[str]
        """

        self._vm_sizes = vm_sizes
