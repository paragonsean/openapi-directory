/**
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportSchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportSchedule::OAIExportSchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportSchedule::OAIExportSchedule() {
    this->initializeModel();
}

OAIExportSchedule::~OAIExportSchedule() {}

void OAIExportSchedule::initializeModel() {

    m_recurrence_isSet = false;
    m_recurrence_isValid = false;

    m_recurrence_period_isSet = false;
    m_recurrence_period_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIExportSchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportSchedule::fromJsonObject(QJsonObject json) {

    m_recurrence_isValid = ::OpenAPI::fromJsonValue(m_recurrence, json[QString("recurrence")]);
    m_recurrence_isSet = !json[QString("recurrence")].isNull() && m_recurrence_isValid;

    m_recurrence_period_isValid = ::OpenAPI::fromJsonValue(m_recurrence_period, json[QString("recurrencePeriod")]);
    m_recurrence_period_isSet = !json[QString("recurrencePeriod")].isNull() && m_recurrence_period_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIExportSchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportSchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_recurrence_isSet) {
        obj.insert(QString("recurrence"), ::OpenAPI::toJsonValue(m_recurrence));
    }
    if (m_recurrence_period.isSet()) {
        obj.insert(QString("recurrencePeriod"), ::OpenAPI::toJsonValue(m_recurrence_period));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIExportSchedule::getRecurrence() const {
    return m_recurrence;
}
void OAIExportSchedule::setRecurrence(const QString &recurrence) {
    m_recurrence = recurrence;
    m_recurrence_isSet = true;
}

bool OAIExportSchedule::is_recurrence_Set() const{
    return m_recurrence_isSet;
}

bool OAIExportSchedule::is_recurrence_Valid() const{
    return m_recurrence_isValid;
}

OAIExportRecurrencePeriod OAIExportSchedule::getRecurrencePeriod() const {
    return m_recurrence_period;
}
void OAIExportSchedule::setRecurrencePeriod(const OAIExportRecurrencePeriod &recurrence_period) {
    m_recurrence_period = recurrence_period;
    m_recurrence_period_isSet = true;
}

bool OAIExportSchedule::is_recurrence_period_Set() const{
    return m_recurrence_period_isSet;
}

bool OAIExportSchedule::is_recurrence_period_Valid() const{
    return m_recurrence_period_isValid;
}

QString OAIExportSchedule::getStatus() const {
    return m_status;
}
void OAIExportSchedule::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIExportSchedule::is_status_Set() const{
    return m_status_isSet;
}

bool OAIExportSchedule::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIExportSchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recurrence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurrence_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportSchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_recurrence_isValid && true;
}

} // namespace OpenAPI
