/**
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryDefinition::OAIQueryDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryDefinition::OAIQueryDefinition() {
    this->initializeModel();
}

OAIQueryDefinition::~OAIQueryDefinition() {}

void OAIQueryDefinition::initializeModel() {

    m_dataset_isSet = false;
    m_dataset_isValid = false;

    m_time_period_isSet = false;
    m_time_period_isValid = false;

    m_timeframe_isSet = false;
    m_timeframe_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIQueryDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryDefinition::fromJsonObject(QJsonObject json) {

    m_dataset_isValid = ::OpenAPI::fromJsonValue(m_dataset, json[QString("dataset")]);
    m_dataset_isSet = !json[QString("dataset")].isNull() && m_dataset_isValid;

    m_time_period_isValid = ::OpenAPI::fromJsonValue(m_time_period, json[QString("timePeriod")]);
    m_time_period_isSet = !json[QString("timePeriod")].isNull() && m_time_period_isValid;

    m_timeframe_isValid = ::OpenAPI::fromJsonValue(m_timeframe, json[QString("timeframe")]);
    m_timeframe_isSet = !json[QString("timeframe")].isNull() && m_timeframe_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIQueryDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset.isSet()) {
        obj.insert(QString("dataset"), ::OpenAPI::toJsonValue(m_dataset));
    }
    if (m_time_period.isSet()) {
        obj.insert(QString("timePeriod"), ::OpenAPI::toJsonValue(m_time_period));
    }
    if (m_timeframe_isSet) {
        obj.insert(QString("timeframe"), ::OpenAPI::toJsonValue(m_timeframe));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIQueryDataset OAIQueryDefinition::getDataset() const {
    return m_dataset;
}
void OAIQueryDefinition::setDataset(const OAIQueryDataset &dataset) {
    m_dataset = dataset;
    m_dataset_isSet = true;
}

bool OAIQueryDefinition::is_dataset_Set() const{
    return m_dataset_isSet;
}

bool OAIQueryDefinition::is_dataset_Valid() const{
    return m_dataset_isValid;
}

OAIQueryTimePeriod OAIQueryDefinition::getTimePeriod() const {
    return m_time_period;
}
void OAIQueryDefinition::setTimePeriod(const OAIQueryTimePeriod &time_period) {
    m_time_period = time_period;
    m_time_period_isSet = true;
}

bool OAIQueryDefinition::is_time_period_Set() const{
    return m_time_period_isSet;
}

bool OAIQueryDefinition::is_time_period_Valid() const{
    return m_time_period_isValid;
}

QString OAIQueryDefinition::getTimeframe() const {
    return m_timeframe;
}
void OAIQueryDefinition::setTimeframe(const QString &timeframe) {
    m_timeframe = timeframe;
    m_timeframe_isSet = true;
}

bool OAIQueryDefinition::is_timeframe_Set() const{
    return m_timeframe_isSet;
}

bool OAIQueryDefinition::is_timeframe_Valid() const{
    return m_timeframe_isValid;
}

QString OAIQueryDefinition::getType() const {
    return m_type;
}
void OAIQueryDefinition::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIQueryDefinition::is_type_Set() const{
    return m_type_isSet;
}

bool OAIQueryDefinition::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIQueryDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeframe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_timeframe_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
