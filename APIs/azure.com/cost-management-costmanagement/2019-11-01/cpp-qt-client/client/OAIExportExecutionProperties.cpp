/**
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportExecutionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportExecutionProperties::OAIExportExecutionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportExecutionProperties::OAIExportExecutionProperties() {
    this->initializeModel();
}

OAIExportExecutionProperties::~OAIExportExecutionProperties() {}

void OAIExportExecutionProperties::initializeModel() {

    m_execution_type_isSet = false;
    m_execution_type_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_processing_end_time_isSet = false;
    m_processing_end_time_isValid = false;

    m_processing_start_time_isSet = false;
    m_processing_start_time_isValid = false;

    m_run_settings_isSet = false;
    m_run_settings_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_submitted_by_isSet = false;
    m_submitted_by_isValid = false;

    m_submitted_time_isSet = false;
    m_submitted_time_isValid = false;
}

void OAIExportExecutionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportExecutionProperties::fromJsonObject(QJsonObject json) {

    m_execution_type_isValid = ::OpenAPI::fromJsonValue(m_execution_type, json[QString("executionType")]);
    m_execution_type_isSet = !json[QString("executionType")].isNull() && m_execution_type_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("fileName")]);
    m_file_name_isSet = !json[QString("fileName")].isNull() && m_file_name_isValid;

    m_processing_end_time_isValid = ::OpenAPI::fromJsonValue(m_processing_end_time, json[QString("processingEndTime")]);
    m_processing_end_time_isSet = !json[QString("processingEndTime")].isNull() && m_processing_end_time_isValid;

    m_processing_start_time_isValid = ::OpenAPI::fromJsonValue(m_processing_start_time, json[QString("processingStartTime")]);
    m_processing_start_time_isSet = !json[QString("processingStartTime")].isNull() && m_processing_start_time_isValid;

    m_run_settings_isValid = ::OpenAPI::fromJsonValue(m_run_settings, json[QString("runSettings")]);
    m_run_settings_isSet = !json[QString("runSettings")].isNull() && m_run_settings_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_submitted_by_isValid = ::OpenAPI::fromJsonValue(m_submitted_by, json[QString("submittedBy")]);
    m_submitted_by_isSet = !json[QString("submittedBy")].isNull() && m_submitted_by_isValid;

    m_submitted_time_isValid = ::OpenAPI::fromJsonValue(m_submitted_time, json[QString("submittedTime")]);
    m_submitted_time_isSet = !json[QString("submittedTime")].isNull() && m_submitted_time_isValid;
}

QString OAIExportExecutionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportExecutionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_execution_type_isSet) {
        obj.insert(QString("executionType"), ::OpenAPI::toJsonValue(m_execution_type));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("fileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_processing_end_time_isSet) {
        obj.insert(QString("processingEndTime"), ::OpenAPI::toJsonValue(m_processing_end_time));
    }
    if (m_processing_start_time_isSet) {
        obj.insert(QString("processingStartTime"), ::OpenAPI::toJsonValue(m_processing_start_time));
    }
    if (m_run_settings.isSet()) {
        obj.insert(QString("runSettings"), ::OpenAPI::toJsonValue(m_run_settings));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_submitted_by_isSet) {
        obj.insert(QString("submittedBy"), ::OpenAPI::toJsonValue(m_submitted_by));
    }
    if (m_submitted_time_isSet) {
        obj.insert(QString("submittedTime"), ::OpenAPI::toJsonValue(m_submitted_time));
    }
    return obj;
}

QString OAIExportExecutionProperties::getExecutionType() const {
    return m_execution_type;
}
void OAIExportExecutionProperties::setExecutionType(const QString &execution_type) {
    m_execution_type = execution_type;
    m_execution_type_isSet = true;
}

bool OAIExportExecutionProperties::is_execution_type_Set() const{
    return m_execution_type_isSet;
}

bool OAIExportExecutionProperties::is_execution_type_Valid() const{
    return m_execution_type_isValid;
}

QString OAIExportExecutionProperties::getFileName() const {
    return m_file_name;
}
void OAIExportExecutionProperties::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIExportExecutionProperties::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIExportExecutionProperties::is_file_name_Valid() const{
    return m_file_name_isValid;
}

QDateTime OAIExportExecutionProperties::getProcessingEndTime() const {
    return m_processing_end_time;
}
void OAIExportExecutionProperties::setProcessingEndTime(const QDateTime &processing_end_time) {
    m_processing_end_time = processing_end_time;
    m_processing_end_time_isSet = true;
}

bool OAIExportExecutionProperties::is_processing_end_time_Set() const{
    return m_processing_end_time_isSet;
}

bool OAIExportExecutionProperties::is_processing_end_time_Valid() const{
    return m_processing_end_time_isValid;
}

QDateTime OAIExportExecutionProperties::getProcessingStartTime() const {
    return m_processing_start_time;
}
void OAIExportExecutionProperties::setProcessingStartTime(const QDateTime &processing_start_time) {
    m_processing_start_time = processing_start_time;
    m_processing_start_time_isSet = true;
}

bool OAIExportExecutionProperties::is_processing_start_time_Set() const{
    return m_processing_start_time_isSet;
}

bool OAIExportExecutionProperties::is_processing_start_time_Valid() const{
    return m_processing_start_time_isValid;
}

OAICommonExportProperties OAIExportExecutionProperties::getRunSettings() const {
    return m_run_settings;
}
void OAIExportExecutionProperties::setRunSettings(const OAICommonExportProperties &run_settings) {
    m_run_settings = run_settings;
    m_run_settings_isSet = true;
}

bool OAIExportExecutionProperties::is_run_settings_Set() const{
    return m_run_settings_isSet;
}

bool OAIExportExecutionProperties::is_run_settings_Valid() const{
    return m_run_settings_isValid;
}

QString OAIExportExecutionProperties::getStatus() const {
    return m_status;
}
void OAIExportExecutionProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIExportExecutionProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIExportExecutionProperties::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIExportExecutionProperties::getSubmittedBy() const {
    return m_submitted_by;
}
void OAIExportExecutionProperties::setSubmittedBy(const QString &submitted_by) {
    m_submitted_by = submitted_by;
    m_submitted_by_isSet = true;
}

bool OAIExportExecutionProperties::is_submitted_by_Set() const{
    return m_submitted_by_isSet;
}

bool OAIExportExecutionProperties::is_submitted_by_Valid() const{
    return m_submitted_by_isValid;
}

QDateTime OAIExportExecutionProperties::getSubmittedTime() const {
    return m_submitted_time;
}
void OAIExportExecutionProperties::setSubmittedTime(const QDateTime &submitted_time) {
    m_submitted_time = submitted_time;
    m_submitted_time_isSet = true;
}

bool OAIExportExecutionProperties::is_submitted_time_Set() const{
    return m_submitted_time_isSet;
}

bool OAIExportExecutionProperties::is_submitted_time_Valid() const{
    return m_submitted_time_isValid;
}

bool OAIExportExecutionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_execution_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submitted_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submitted_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportExecutionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
