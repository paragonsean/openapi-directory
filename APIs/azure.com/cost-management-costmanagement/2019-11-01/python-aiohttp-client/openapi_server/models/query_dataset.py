# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.query_aggregation import QueryAggregation
from openapi_server.models.query_dataset_configuration import QueryDatasetConfiguration
from openapi_server.models.query_filter import QueryFilter
from openapi_server.models.query_grouping import QueryGrouping
from openapi_server import util


class QueryDataset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation: Dict[str, QueryAggregation]=None, configuration: QueryDatasetConfiguration=None, filter: QueryFilter=None, granularity: str=None, grouping: List[QueryGrouping]=None):
        """QueryDataset - a model defined in OpenAPI

        :param aggregation: The aggregation of this QueryDataset.
        :param configuration: The configuration of this QueryDataset.
        :param filter: The filter of this QueryDataset.
        :param granularity: The granularity of this QueryDataset.
        :param grouping: The grouping of this QueryDataset.
        """
        self.openapi_types = {
            'aggregation': Dict[str, QueryAggregation],
            'configuration': QueryDatasetConfiguration,
            'filter': QueryFilter,
            'granularity': str,
            'grouping': List[QueryGrouping]
        }

        self.attribute_map = {
            'aggregation': 'aggregation',
            'configuration': 'configuration',
            'filter': 'filter',
            'granularity': 'granularity',
            'grouping': 'grouping'
        }

        self._aggregation = aggregation
        self._configuration = configuration
        self._filter = filter
        self._granularity = granularity
        self._grouping = grouping

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryDataset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryDataset of this QueryDataset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation(self):
        """Gets the aggregation of this QueryDataset.

        Dictionary of aggregation expression to use in the query. The key of each item in the dictionary is the alias for the aggregated column. Query can have up to 2 aggregation clauses.

        :return: The aggregation of this QueryDataset.
        :rtype: Dict[str, QueryAggregation]
        """
        return self._aggregation

    @aggregation.setter
    def aggregation(self, aggregation):
        """Sets the aggregation of this QueryDataset.

        Dictionary of aggregation expression to use in the query. The key of each item in the dictionary is the alias for the aggregated column. Query can have up to 2 aggregation clauses.

        :param aggregation: The aggregation of this QueryDataset.
        :type aggregation: Dict[str, QueryAggregation]
        """

        self._aggregation = aggregation

    @property
    def configuration(self):
        """Gets the configuration of this QueryDataset.


        :return: The configuration of this QueryDataset.
        :rtype: QueryDatasetConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this QueryDataset.


        :param configuration: The configuration of this QueryDataset.
        :type configuration: QueryDatasetConfiguration
        """

        self._configuration = configuration

    @property
    def filter(self):
        """Gets the filter of this QueryDataset.


        :return: The filter of this QueryDataset.
        :rtype: QueryFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this QueryDataset.


        :param filter: The filter of this QueryDataset.
        :type filter: QueryFilter
        """

        self._filter = filter

    @property
    def granularity(self):
        """Gets the granularity of this QueryDataset.

        The granularity of rows in the query.

        :return: The granularity of this QueryDataset.
        :rtype: str
        """
        return self._granularity

    @granularity.setter
    def granularity(self, granularity):
        """Sets the granularity of this QueryDataset.

        The granularity of rows in the query.

        :param granularity: The granularity of this QueryDataset.
        :type granularity: str
        """
        allowed_values = ["Daily"]  # noqa: E501
        if granularity not in allowed_values:
            raise ValueError(
                "Invalid value for `granularity` ({0}), must be one of {1}"
                .format(granularity, allowed_values)
            )

        self._granularity = granularity

    @property
    def grouping(self):
        """Gets the grouping of this QueryDataset.

        Array of group by expression to use in the query. Query can have up to 2 group by clauses.

        :return: The grouping of this QueryDataset.
        :rtype: List[QueryGrouping]
        """
        return self._grouping

    @grouping.setter
    def grouping(self, grouping):
        """Sets the grouping of this QueryDataset.

        Array of group by expression to use in the query. Query can have up to 2 group by clauses.

        :param grouping: The grouping of this QueryDataset.
        :type grouping: List[QueryGrouping]
        """
        if grouping is not None and len(grouping) > 2:
            raise ValueError("Invalid value for `grouping`, number of items must be less than or equal to `2`")

        self._grouping = grouping
