/**
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The QueryComparisonExpression model module.
 * @module model/QueryComparisonExpression
 * @version 2019-09-01
 */
class QueryComparisonExpression {
    /**
     * Constructs a new <code>QueryComparisonExpression</code>.
     * The comparison expression to be used in the query.
     * @alias module:model/QueryComparisonExpression
     * @param name {String} The name of the column to use in comparison.
     * @param operator {module:model/QueryComparisonExpression.OperatorEnum} The operator to use for comparison.
     * @param values {Array.<String>} Array of values to use for comparison
     */
    constructor(name, operator, values) { 
        
        QueryComparisonExpression.initialize(this, name, operator, values);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, operator, values) { 
        obj['name'] = name;
        obj['operator'] = operator;
        obj['values'] = values;
    }

    /**
     * Constructs a <code>QueryComparisonExpression</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueryComparisonExpression} obj Optional instance to populate.
     * @return {module:model/QueryComparisonExpression} The populated <code>QueryComparisonExpression</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueryComparisonExpression();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueryComparisonExpression</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueryComparisonExpression</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of QueryComparisonExpression.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['values'])) {
            throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
        }

        return true;
    }


}

QueryComparisonExpression.RequiredProperties = ["name", "operator", "values"];

/**
 * The name of the column to use in comparison.
 * @member {String} name
 */
QueryComparisonExpression.prototype['name'] = undefined;

/**
 * The operator to use for comparison.
 * @member {module:model/QueryComparisonExpression.OperatorEnum} operator
 */
QueryComparisonExpression.prototype['operator'] = undefined;

/**
 * Array of values to use for comparison
 * @member {Array.<String>} values
 */
QueryComparisonExpression.prototype['values'] = undefined;





/**
 * Allowed values for the <code>operator</code> property.
 * @enum {String}
 * @readonly
 */
QueryComparisonExpression['OperatorEnum'] = {

    /**
     * value: "In"
     * @const
     */
    "In": "In"
};



export default QueryComparisonExpression;

