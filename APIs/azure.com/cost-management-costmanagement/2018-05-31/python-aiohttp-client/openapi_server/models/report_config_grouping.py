# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_config_column_type import ReportConfigColumnType
from openapi_server import util


class ReportConfigGrouping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column_type: ReportConfigColumnType=None, name: str=None):
        """ReportConfigGrouping - a model defined in OpenAPI

        :param column_type: The column_type of this ReportConfigGrouping.
        :param name: The name of this ReportConfigGrouping.
        """
        self.openapi_types = {
            'column_type': ReportConfigColumnType,
            'name': str
        }

        self.attribute_map = {
            'column_type': 'columnType',
            'name': 'name'
        }

        self._column_type = column_type
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportConfigGrouping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportConfigGrouping of this ReportConfigGrouping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column_type(self):
        """Gets the column_type of this ReportConfigGrouping.


        :return: The column_type of this ReportConfigGrouping.
        :rtype: ReportConfigColumnType
        """
        return self._column_type

    @column_type.setter
    def column_type(self, column_type):
        """Sets the column_type of this ReportConfigGrouping.


        :param column_type: The column_type of this ReportConfigGrouping.
        :type column_type: ReportConfigColumnType
        """
        if column_type is None:
            raise ValueError("Invalid value for `column_type`, must not be `None`")

        self._column_type = column_type

    @property
    def name(self):
        """Gets the name of this ReportConfigGrouping.

        The name of the column to group.

        :return: The name of this ReportConfigGrouping.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReportConfigGrouping.

        The name of the column to group.

        :param name: The name of this ReportConfigGrouping.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
