/*
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-05-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ReportConfigRecurrencePeriod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The schedule associated with a report config.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:40:26.085572-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportConfigSchedule {
  /**
   * The schedule recurrence.
   */
  @JsonAdapter(RecurrenceEnum.Adapter.class)
  public enum RecurrenceEnum {
    DAILY("Daily"),
    
    WEEKLY("Weekly"),
    
    MONTHLY("Monthly"),
    
    ANNUALLY("Annually");

    private String value;

    RecurrenceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecurrenceEnum fromValue(String value) {
      for (RecurrenceEnum b : RecurrenceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecurrenceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecurrenceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecurrenceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecurrenceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RecurrenceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECURRENCE = "recurrence";
  @SerializedName(SERIALIZED_NAME_RECURRENCE)
  private RecurrenceEnum recurrence;

  public static final String SERIALIZED_NAME_RECURRENCE_PERIOD = "recurrencePeriod";
  @SerializedName(SERIALIZED_NAME_RECURRENCE_PERIOD)
  private ReportConfigRecurrencePeriod recurrencePeriod;

  /**
   * The status of the schedule. Whether active or not. If inactive, the report&#39;s scheduled execution is paused.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("Active"),
    
    INACTIVE("Inactive");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public ReportConfigSchedule() {
  }

  public ReportConfigSchedule recurrence(RecurrenceEnum recurrence) {
    this.recurrence = recurrence;
    return this;
  }

  /**
   * The schedule recurrence.
   * @return recurrence
   */
  @javax.annotation.Nonnull
  public RecurrenceEnum getRecurrence() {
    return recurrence;
  }

  public void setRecurrence(RecurrenceEnum recurrence) {
    this.recurrence = recurrence;
  }


  public ReportConfigSchedule recurrencePeriod(ReportConfigRecurrencePeriod recurrencePeriod) {
    this.recurrencePeriod = recurrencePeriod;
    return this;
  }

  /**
   * Get recurrencePeriod
   * @return recurrencePeriod
   */
  @javax.annotation.Nonnull
  public ReportConfigRecurrencePeriod getRecurrencePeriod() {
    return recurrencePeriod;
  }

  public void setRecurrencePeriod(ReportConfigRecurrencePeriod recurrencePeriod) {
    this.recurrencePeriod = recurrencePeriod;
  }


  public ReportConfigSchedule status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the schedule. Whether active or not. If inactive, the report&#39;s scheduled execution is paused.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportConfigSchedule reportConfigSchedule = (ReportConfigSchedule) o;
    return Objects.equals(this.recurrence, reportConfigSchedule.recurrence) &&
        Objects.equals(this.recurrencePeriod, reportConfigSchedule.recurrencePeriod) &&
        Objects.equals(this.status, reportConfigSchedule.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recurrence, recurrencePeriod, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportConfigSchedule {\n");
    sb.append("    recurrence: ").append(toIndentedString(recurrence)).append("\n");
    sb.append("    recurrencePeriod: ").append(toIndentedString(recurrencePeriod)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("recurrence");
    openapiFields.add("recurrencePeriod");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("recurrence");
    openapiRequiredFields.add("recurrencePeriod");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportConfigSchedule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportConfigSchedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportConfigSchedule is not found in the empty JSON string", ReportConfigSchedule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportConfigSchedule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportConfigSchedule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReportConfigSchedule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("recurrence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recurrence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recurrence").toString()));
      }
      // validate the required field `recurrence`
      RecurrenceEnum.validateJsonElement(jsonObj.get("recurrence"));
      // validate the required field `recurrencePeriod`
      ReportConfigRecurrencePeriod.validateJsonElement(jsonObj.get("recurrencePeriod"));
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportConfigSchedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportConfigSchedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportConfigSchedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportConfigSchedule.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportConfigSchedule>() {
           @Override
           public void write(JsonWriter out, ReportConfigSchedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportConfigSchedule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportConfigSchedule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportConfigSchedule
   * @throws IOException if the JSON string is invalid with respect to ReportConfigSchedule
   */
  public static ReportConfigSchedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportConfigSchedule.class);
  }

  /**
   * Convert an instance of ReportConfigSchedule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

