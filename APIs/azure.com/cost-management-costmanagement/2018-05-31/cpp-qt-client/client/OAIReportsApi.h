/**
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-05-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReportsApi_H
#define OAI_OAIReportsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIReportConfig.h"
#include "OAIReportConfigListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReportsApi : public QObject {
    Q_OBJECT

public:
    OAIReportsApi(const int timeOut = 0);
    ~OAIReportsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  report_config_name QString [required]
    * @param[in]  parameters OAIReportConfig [required]
    */
    virtual void reportConfigCreateOrUpdate(const QString &api_version, const QString &subscription_id, const QString &report_config_name, const OAIReportConfig &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  report_config_name QString [required]
    * @param[in]  parameters OAIReportConfig [required]
    */
    virtual void reportConfigCreateOrUpdateByResourceGroupName(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &report_config_name, const OAIReportConfig &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  report_config_name QString [required]
    */
    virtual void reportConfigDelete(const QString &api_version, const QString &subscription_id, const QString &report_config_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  report_config_name QString [required]
    */
    virtual void reportConfigDeleteByResourceGroupName(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &report_config_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  report_config_name QString [required]
    */
    virtual void reportConfigGet(const QString &api_version, const QString &subscription_id, const QString &report_config_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  report_config_name QString [required]
    */
    virtual void reportConfigGetByResourceGroupName(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &report_config_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void reportConfigList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void reportConfigListByResourceGroupName(const QString &api_version, const QString &subscription_id, const QString &resource_group_name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void reportConfigCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void reportConfigCreateOrUpdateByResourceGroupNameCallback(OAIHttpRequestWorker *worker);
    void reportConfigDeleteCallback(OAIHttpRequestWorker *worker);
    void reportConfigDeleteByResourceGroupNameCallback(OAIHttpRequestWorker *worker);
    void reportConfigGetCallback(OAIHttpRequestWorker *worker);
    void reportConfigGetByResourceGroupNameCallback(OAIHttpRequestWorker *worker);
    void reportConfigListCallback(OAIHttpRequestWorker *worker);
    void reportConfigListByResourceGroupNameCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void reportConfigCreateOrUpdateSignal(OAIReportConfig summary);
    void reportConfigCreateOrUpdateByResourceGroupNameSignal(OAIReportConfig summary);
    void reportConfigDeleteSignal();
    void reportConfigDeleteByResourceGroupNameSignal();
    void reportConfigGetSignal(OAIReportConfig summary);
    void reportConfigGetByResourceGroupNameSignal(OAIReportConfig summary);
    void reportConfigListSignal(OAIReportConfigListResult summary);
    void reportConfigListByResourceGroupNameSignal(OAIReportConfigListResult summary);


    void reportConfigCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIReportConfig summary);
    void reportConfigCreateOrUpdateByResourceGroupNameSignalFull(OAIHttpRequestWorker *worker, OAIReportConfig summary);
    void reportConfigDeleteSignalFull(OAIHttpRequestWorker *worker);
    void reportConfigDeleteByResourceGroupNameSignalFull(OAIHttpRequestWorker *worker);
    void reportConfigGetSignalFull(OAIHttpRequestWorker *worker, OAIReportConfig summary);
    void reportConfigGetByResourceGroupNameSignalFull(OAIHttpRequestWorker *worker, OAIReportConfig summary);
    void reportConfigListSignalFull(OAIHttpRequestWorker *worker, OAIReportConfigListResult summary);
    void reportConfigListByResourceGroupNameSignalFull(OAIHttpRequestWorker *worker, OAIReportConfigListResult summary);

    Q_DECL_DEPRECATED_X("Use reportConfigCreateOrUpdateSignalError() instead")
    void reportConfigCreateOrUpdateSignalE(OAIReportConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportConfigCreateOrUpdateSignalError(OAIReportConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportConfigCreateOrUpdateByResourceGroupNameSignalError() instead")
    void reportConfigCreateOrUpdateByResourceGroupNameSignalE(OAIReportConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportConfigCreateOrUpdateByResourceGroupNameSignalError(OAIReportConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportConfigDeleteSignalError() instead")
    void reportConfigDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reportConfigDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportConfigDeleteByResourceGroupNameSignalError() instead")
    void reportConfigDeleteByResourceGroupNameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reportConfigDeleteByResourceGroupNameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportConfigGetSignalError() instead")
    void reportConfigGetSignalE(OAIReportConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportConfigGetSignalError(OAIReportConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportConfigGetByResourceGroupNameSignalError() instead")
    void reportConfigGetByResourceGroupNameSignalE(OAIReportConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportConfigGetByResourceGroupNameSignalError(OAIReportConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportConfigListSignalError() instead")
    void reportConfigListSignalE(OAIReportConfigListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportConfigListSignalError(OAIReportConfigListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportConfigListByResourceGroupNameSignalError() instead")
    void reportConfigListByResourceGroupNameSignalE(OAIReportConfigListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportConfigListByResourceGroupNameSignalError(OAIReportConfigListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use reportConfigCreateOrUpdateSignalErrorFull() instead")
    void reportConfigCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportConfigCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportConfigCreateOrUpdateByResourceGroupNameSignalErrorFull() instead")
    void reportConfigCreateOrUpdateByResourceGroupNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportConfigCreateOrUpdateByResourceGroupNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportConfigDeleteSignalErrorFull() instead")
    void reportConfigDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportConfigDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportConfigDeleteByResourceGroupNameSignalErrorFull() instead")
    void reportConfigDeleteByResourceGroupNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportConfigDeleteByResourceGroupNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportConfigGetSignalErrorFull() instead")
    void reportConfigGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportConfigGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportConfigGetByResourceGroupNameSignalErrorFull() instead")
    void reportConfigGetByResourceGroupNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportConfigGetByResourceGroupNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportConfigListSignalErrorFull() instead")
    void reportConfigListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportConfigListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportConfigListByResourceGroupNameSignalErrorFull() instead")
    void reportConfigListByResourceGroupNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportConfigListByResourceGroupNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
