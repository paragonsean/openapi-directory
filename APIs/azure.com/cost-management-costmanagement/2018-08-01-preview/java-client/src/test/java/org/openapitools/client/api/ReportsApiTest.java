/*
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.Report;
import org.openapitools.client.model.ReportExecutionListResult;
import org.openapitools.client.model.ReportListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReportsApi
 */
@Disabled
public class ReportsApiTest {

    private final ReportsApi api = new ReportsApi();

    /**
     * The operation to create or update a report. Update operation requires latest eTag to be set in the request mandatorily. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsCreateOrUpdateTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String reportName = null;
        Report parameters = null;
        Report response = api.reportsCreateOrUpdate(apiVersion, subscriptionId, reportName, parameters);
        // TODO: test validations
    }

    /**
     * The operation to create or update a report for billingAccount. Update operation requires latest eTag to be set in the request mandatorily. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsCreateOrUpdateByBillingAccountTest() throws ApiException {
        String apiVersion = null;
        String billingAccountId = null;
        String reportName = null;
        Report parameters = null;
        Report response = api.reportsCreateOrUpdateByBillingAccount(apiVersion, billingAccountId, reportName, parameters);
        // TODO: test validations
    }

    /**
     * The operation to create or update a report for department. Update operation requires latest eTag to be set in the request mandatorily. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsCreateOrUpdateByDepartmentTest() throws ApiException {
        String apiVersion = null;
        String departmentId = null;
        String reportName = null;
        Report parameters = null;
        Report response = api.reportsCreateOrUpdateByDepartment(apiVersion, departmentId, reportName, parameters);
        // TODO: test validations
    }

    /**
     * The operation to create or update a report. Update operation requires latest eTag to be set in the request mandatorily. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsCreateOrUpdateByResourceGroupNameTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String reportName = null;
        Report parameters = null;
        Report response = api.reportsCreateOrUpdateByResourceGroupName(apiVersion, subscriptionId, resourceGroupName, reportName, parameters);
        // TODO: test validations
    }

    /**
     * The operation to delete a report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsDeleteTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String reportName = null;
        api.reportsDelete(apiVersion, subscriptionId, reportName);
        // TODO: test validations
    }

    /**
     * The operation to delete a report for billing account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsDeleteByBillingAccountTest() throws ApiException {
        String apiVersion = null;
        String billingAccountId = null;
        String reportName = null;
        api.reportsDeleteByBillingAccount(apiVersion, billingAccountId, reportName);
        // TODO: test validations
    }

    /**
     * The operation to delete a report for department.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsDeleteByDepartmentTest() throws ApiException {
        String apiVersion = null;
        String departmentId = null;
        String reportName = null;
        api.reportsDeleteByDepartment(apiVersion, departmentId, reportName);
        // TODO: test validations
    }

    /**
     * The operation to delete a report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsDeleteByResourceGroupNameTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String reportName = null;
        api.reportsDeleteByResourceGroupName(apiVersion, subscriptionId, resourceGroupName, reportName);
        // TODO: test validations
    }

    /**
     * The operation to execute a report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsExecuteTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String reportName = null;
        api.reportsExecute(apiVersion, subscriptionId, reportName);
        // TODO: test validations
    }

    /**
     * The operation to execute a report by billing account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsExecuteByBillingAccountTest() throws ApiException {
        String apiVersion = null;
        String billingAccountId = null;
        String reportName = null;
        api.reportsExecuteByBillingAccount(apiVersion, billingAccountId, reportName);
        // TODO: test validations
    }

    /**
     * The operation to execute a report by department.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsExecuteByDepartmentTest() throws ApiException {
        String apiVersion = null;
        String departmentId = null;
        String reportName = null;
        api.reportsExecuteByDepartment(apiVersion, departmentId, reportName);
        // TODO: test validations
    }

    /**
     * The operation to execute a report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsExecuteByResourceGroupNameTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String reportName = null;
        api.reportsExecuteByResourceGroupName(apiVersion, subscriptionId, resourceGroupName, reportName);
        // TODO: test validations
    }

    /**
     * Gets the report for a subscription by report name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsGetTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String reportName = null;
        Report response = api.reportsGet(apiVersion, subscriptionId, reportName);
        // TODO: test validations
    }

    /**
     * Gets the report for a billing account by report name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsGetByBillingAccountTest() throws ApiException {
        String apiVersion = null;
        String billingAccountId = null;
        String reportName = null;
        Report response = api.reportsGetByBillingAccount(apiVersion, billingAccountId, reportName);
        // TODO: test validations
    }

    /**
     * Gets the report for a department by report name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsGetByDepartmentTest() throws ApiException {
        String apiVersion = null;
        String departmentId = null;
        String reportName = null;
        Report response = api.reportsGetByDepartment(apiVersion, departmentId, reportName);
        // TODO: test validations
    }

    /**
     * Gets the report for a resource group under a subscription by report name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsGetByResourceGroupNameTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String reportName = null;
        Report response = api.reportsGetByResourceGroupName(apiVersion, subscriptionId, resourceGroupName, reportName);
        // TODO: test validations
    }

    /**
     * Gets the execution history of a report for a subscription by report name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsGetExecutionHistoryTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String reportName = null;
        ReportExecutionListResult response = api.reportsGetExecutionHistory(apiVersion, subscriptionId, reportName);
        // TODO: test validations
    }

    /**
     * Gets the execution history of a report for a billing account by report name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsGetExecutionHistoryByBillingAccountTest() throws ApiException {
        String apiVersion = null;
        String billingAccountId = null;
        String reportName = null;
        ReportExecutionListResult response = api.reportsGetExecutionHistoryByBillingAccount(apiVersion, billingAccountId, reportName);
        // TODO: test validations
    }

    /**
     * Gets the execution history of a report for a department by report name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsGetExecutionHistoryByDepartmentTest() throws ApiException {
        String apiVersion = null;
        String departmentId = null;
        String reportName = null;
        ReportExecutionListResult response = api.reportsGetExecutionHistoryByDepartment(apiVersion, departmentId, reportName);
        // TODO: test validations
    }

    /**
     * Gets the execution history of a report for a resource group by report name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsGetExecutionHistoryByResourceGroupNameTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String reportName = null;
        ReportExecutionListResult response = api.reportsGetExecutionHistoryByResourceGroupName(apiVersion, subscriptionId, resourceGroupName, reportName);
        // TODO: test validations
    }

    /**
     * Lists all reports for a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsListTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        ReportListResult response = api.reportsList(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all reports for a billing account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsListByBillingAccountTest() throws ApiException {
        String apiVersion = null;
        String billingAccountId = null;
        ReportListResult response = api.reportsListByBillingAccount(apiVersion, billingAccountId);
        // TODO: test validations
    }

    /**
     * Lists all reports for a department.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsListByDepartmentTest() throws ApiException {
        String apiVersion = null;
        String departmentId = null;
        ReportListResult response = api.reportsListByDepartment(apiVersion, departmentId);
        // TODO: test validations
    }

    /**
     * Lists all reports for a resource group under a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsListByResourceGroupNameTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        ReportListResult response = api.reportsListByResourceGroupName(apiVersion, subscriptionId, resourceGroupName);
        // TODO: test validations
    }

}
