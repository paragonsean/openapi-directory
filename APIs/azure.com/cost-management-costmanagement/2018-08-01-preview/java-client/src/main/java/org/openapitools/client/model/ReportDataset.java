/*
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ReportAggregation;
import org.openapitools.client.model.ReportDatasetConfiguration;
import org.openapitools.client.model.ReportFilter;
import org.openapitools.client.model.ReportGrouping;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The definition of data present in the report.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:40:00.053776-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportDataset {
  public static final String SERIALIZED_NAME_AGGREGATION = "aggregation";
  @SerializedName(SERIALIZED_NAME_AGGREGATION)
  private Map<String, ReportAggregation> aggregation = new HashMap<>();

  public static final String SERIALIZED_NAME_CONFIGURATION = "configuration";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION)
  private ReportDatasetConfiguration _configuration;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private ReportFilter filter;

  /**
   * The granularity of rows in the report.
   */
  @JsonAdapter(GranularityEnum.Adapter.class)
  public enum GranularityEnum {
    DAILY("Daily"),
    
    HOURLY("Hourly");

    private String value;

    GranularityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GranularityEnum fromValue(String value) {
      for (GranularityEnum b : GranularityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GranularityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GranularityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GranularityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GranularityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GranularityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GRANULARITY = "granularity";
  @SerializedName(SERIALIZED_NAME_GRANULARITY)
  private GranularityEnum granularity;

  public static final String SERIALIZED_NAME_GROUPING = "grouping";
  @SerializedName(SERIALIZED_NAME_GROUPING)
  private List<ReportGrouping> grouping = new ArrayList<>();

  public ReportDataset() {
  }

  public ReportDataset aggregation(Map<String, ReportAggregation> aggregation) {
    this.aggregation = aggregation;
    return this;
  }

  public ReportDataset putAggregationItem(String key, ReportAggregation aggregationItem) {
    if (this.aggregation == null) {
      this.aggregation = new HashMap<>();
    }
    this.aggregation.put(key, aggregationItem);
    return this;
  }

  /**
   * Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
   * @return aggregation
   */
  @javax.annotation.Nullable
  public Map<String, ReportAggregation> getAggregation() {
    return aggregation;
  }

  public void setAggregation(Map<String, ReportAggregation> aggregation) {
    this.aggregation = aggregation;
  }


  public ReportDataset _configuration(ReportDatasetConfiguration _configuration) {
    this._configuration = _configuration;
    return this;
  }

  /**
   * Get _configuration
   * @return _configuration
   */
  @javax.annotation.Nullable
  public ReportDatasetConfiguration getConfiguration() {
    return _configuration;
  }

  public void setConfiguration(ReportDatasetConfiguration _configuration) {
    this._configuration = _configuration;
  }


  public ReportDataset filter(ReportFilter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public ReportFilter getFilter() {
    return filter;
  }

  public void setFilter(ReportFilter filter) {
    this.filter = filter;
  }


  public ReportDataset granularity(GranularityEnum granularity) {
    this.granularity = granularity;
    return this;
  }

  /**
   * The granularity of rows in the report.
   * @return granularity
   */
  @javax.annotation.Nullable
  public GranularityEnum getGranularity() {
    return granularity;
  }

  public void setGranularity(GranularityEnum granularity) {
    this.granularity = granularity;
  }


  public ReportDataset grouping(List<ReportGrouping> grouping) {
    this.grouping = grouping;
    return this;
  }

  public ReportDataset addGroupingItem(ReportGrouping groupingItem) {
    if (this.grouping == null) {
      this.grouping = new ArrayList<>();
    }
    this.grouping.add(groupingItem);
    return this;
  }

  /**
   * Array of group by expression to use in the report. Report can have up to 2 group by clauses.
   * @return grouping
   */
  @javax.annotation.Nullable
  public List<ReportGrouping> getGrouping() {
    return grouping;
  }

  public void setGrouping(List<ReportGrouping> grouping) {
    this.grouping = grouping;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportDataset reportDataset = (ReportDataset) o;
    return Objects.equals(this.aggregation, reportDataset.aggregation) &&
        Objects.equals(this._configuration, reportDataset._configuration) &&
        Objects.equals(this.filter, reportDataset.filter) &&
        Objects.equals(this.granularity, reportDataset.granularity) &&
        Objects.equals(this.grouping, reportDataset.grouping);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregation, _configuration, filter, granularity, grouping);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportDataset {\n");
    sb.append("    aggregation: ").append(toIndentedString(aggregation)).append("\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    granularity: ").append(toIndentedString(granularity)).append("\n");
    sb.append("    grouping: ").append(toIndentedString(grouping)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregation");
    openapiFields.add("configuration");
    openapiFields.add("filter");
    openapiFields.add("granularity");
    openapiFields.add("grouping");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportDataset
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportDataset.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportDataset is not found in the empty JSON string", ReportDataset.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportDataset.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportDataset` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `configuration`
      if (jsonObj.get("configuration") != null && !jsonObj.get("configuration").isJsonNull()) {
        ReportDatasetConfiguration.validateJsonElement(jsonObj.get("configuration"));
      }
      // validate the optional field `filter`
      if (jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) {
        ReportFilter.validateJsonElement(jsonObj.get("filter"));
      }
      if ((jsonObj.get("granularity") != null && !jsonObj.get("granularity").isJsonNull()) && !jsonObj.get("granularity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `granularity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("granularity").toString()));
      }
      // validate the optional field `granularity`
      if (jsonObj.get("granularity") != null && !jsonObj.get("granularity").isJsonNull()) {
        GranularityEnum.validateJsonElement(jsonObj.get("granularity"));
      }
      if (jsonObj.get("grouping") != null && !jsonObj.get("grouping").isJsonNull()) {
        JsonArray jsonArraygrouping = jsonObj.getAsJsonArray("grouping");
        if (jsonArraygrouping != null) {
          // ensure the json data is an array
          if (!jsonObj.get("grouping").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `grouping` to be an array in the JSON string but got `%s`", jsonObj.get("grouping").toString()));
          }

          // validate the optional field `grouping` (array)
          for (int i = 0; i < jsonArraygrouping.size(); i++) {
            ReportGrouping.validateJsonElement(jsonArraygrouping.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportDataset.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportDataset' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportDataset> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportDataset.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportDataset>() {
           @Override
           public void write(JsonWriter out, ReportDataset value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportDataset read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportDataset given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportDataset
   * @throws IOException if the JSON string is invalid with respect to ReportDataset
   */
  public static ReportDataset fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportDataset.class);
  }

  /**
   * Convert an instance of ReportDataset to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

