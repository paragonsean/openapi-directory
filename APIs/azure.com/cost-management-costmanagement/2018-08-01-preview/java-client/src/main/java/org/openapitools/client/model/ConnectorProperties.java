/*
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ConnectorCollectionInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of a Connector
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:40:00.053776-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectorProperties {
  public static final String SERIALIZED_NAME_COLLECTION = "collection";
  @SerializedName(SERIALIZED_NAME_COLLECTION)
  private ConnectorCollectionInfo collection;

  public static final String SERIALIZED_NAME_CREATED_ON = "createdOn";
  @SerializedName(SERIALIZED_NAME_CREATED_ON)
  private OffsetDateTime createdOn;

  public static final String SERIALIZED_NAME_CREDENTIALS_KEY = "credentialsKey";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS_KEY)
  private String credentialsKey;

  public static final String SERIALIZED_NAME_CREDENTIALS_SECRET = "credentialsSecret";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS_SECRET)
  private String credentialsSecret;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_MODIFIED_ON = "modifiedOn";
  @SerializedName(SERIALIZED_NAME_MODIFIED_ON)
  private OffsetDateTime modifiedOn;

  public static final String SERIALIZED_NAME_PROVIDER_ACCOUNT_ID = "providerAccountId";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ACCOUNT_ID)
  private String providerAccountId;

  public static final String SERIALIZED_NAME_REPORT_ID = "reportId";
  @SerializedName(SERIALIZED_NAME_REPORT_ID)
  private String reportId;

  /**
   * Connector status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("active"),
    
    ERROR("error"),
    
    SUSPENDED("suspended");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public ConnectorProperties() {
  }

  public ConnectorProperties(
     OffsetDateTime createdOn, 
     OffsetDateTime modifiedOn, 
     String providerAccountId
  ) {
    this();
    this.createdOn = createdOn;
    this.modifiedOn = modifiedOn;
    this.providerAccountId = providerAccountId;
  }

  public ConnectorProperties collection(ConnectorCollectionInfo collection) {
    this.collection = collection;
    return this;
  }

  /**
   * Get collection
   * @return collection
   */
  @javax.annotation.Nullable
  public ConnectorCollectionInfo getCollection() {
    return collection;
  }

  public void setCollection(ConnectorCollectionInfo collection) {
    this.collection = collection;
  }


  /**
   * Connector definition creation datetime
   * @return createdOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }



  public ConnectorProperties credentialsKey(String credentialsKey) {
    this.credentialsKey = credentialsKey;
    return this;
  }

  /**
   * Credentials authentication key (eg AWS ARN)
   * @return credentialsKey
   */
  @javax.annotation.Nullable
  public String getCredentialsKey() {
    return credentialsKey;
  }

  public void setCredentialsKey(String credentialsKey) {
    this.credentialsKey = credentialsKey;
  }


  public ConnectorProperties credentialsSecret(String credentialsSecret) {
    this.credentialsSecret = credentialsSecret;
    return this;
  }

  /**
   * Credentials secret (eg AWS ExternalId)
   * @return credentialsSecret
   */
  @javax.annotation.Nullable
  public String getCredentialsSecret() {
    return credentialsSecret;
  }

  public void setCredentialsSecret(String credentialsSecret) {
    this.credentialsSecret = credentialsSecret;
  }


  public ConnectorProperties displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Connector DisplayName (defaults to Name)
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  /**
   * Connector last modified datetime
   * @return modifiedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedOn() {
    return modifiedOn;
  }



  /**
   * Connector providerAccountId (determined from credentials)
   * @return providerAccountId
   */
  @javax.annotation.Nullable
  public String getProviderAccountId() {
    return providerAccountId;
  }



  public ConnectorProperties reportId(String reportId) {
    this.reportId = reportId;
    return this;
  }

  /**
   * Identifying source report. (For AWS this is a CUR report name, defined with Daily and with Resources)
   * @return reportId
   */
  @javax.annotation.Nullable
  public String getReportId() {
    return reportId;
  }

  public void setReportId(String reportId) {
    this.reportId = reportId;
  }


  public ConnectorProperties status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Connector status
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorProperties connectorProperties = (ConnectorProperties) o;
    return Objects.equals(this.collection, connectorProperties.collection) &&
        Objects.equals(this.createdOn, connectorProperties.createdOn) &&
        Objects.equals(this.credentialsKey, connectorProperties.credentialsKey) &&
        Objects.equals(this.credentialsSecret, connectorProperties.credentialsSecret) &&
        Objects.equals(this.displayName, connectorProperties.displayName) &&
        Objects.equals(this.modifiedOn, connectorProperties.modifiedOn) &&
        Objects.equals(this.providerAccountId, connectorProperties.providerAccountId) &&
        Objects.equals(this.reportId, connectorProperties.reportId) &&
        Objects.equals(this.status, connectorProperties.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collection, createdOn, credentialsKey, credentialsSecret, displayName, modifiedOn, providerAccountId, reportId, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorProperties {\n");
    sb.append("    collection: ").append(toIndentedString(collection)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    credentialsKey: ").append(toIndentedString(credentialsKey)).append("\n");
    sb.append("    credentialsSecret: ").append(toIndentedString(credentialsSecret)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    modifiedOn: ").append(toIndentedString(modifiedOn)).append("\n");
    sb.append("    providerAccountId: ").append(toIndentedString(providerAccountId)).append("\n");
    sb.append("    reportId: ").append(toIndentedString(reportId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("collection");
    openapiFields.add("createdOn");
    openapiFields.add("credentialsKey");
    openapiFields.add("credentialsSecret");
    openapiFields.add("displayName");
    openapiFields.add("modifiedOn");
    openapiFields.add("providerAccountId");
    openapiFields.add("reportId");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectorProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectorProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectorProperties is not found in the empty JSON string", ConnectorProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectorProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectorProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `collection`
      if (jsonObj.get("collection") != null && !jsonObj.get("collection").isJsonNull()) {
        ConnectorCollectionInfo.validateJsonElement(jsonObj.get("collection"));
      }
      if ((jsonObj.get("credentialsKey") != null && !jsonObj.get("credentialsKey").isJsonNull()) && !jsonObj.get("credentialsKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `credentialsKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("credentialsKey").toString()));
      }
      if ((jsonObj.get("credentialsSecret") != null && !jsonObj.get("credentialsSecret").isJsonNull()) && !jsonObj.get("credentialsSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `credentialsSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("credentialsSecret").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("providerAccountId") != null && !jsonObj.get("providerAccountId").isJsonNull()) && !jsonObj.get("providerAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerAccountId").toString()));
      }
      if ((jsonObj.get("reportId") != null && !jsonObj.get("reportId").isJsonNull()) && !jsonObj.get("reportId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectorProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectorProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectorProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectorProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectorProperties>() {
           @Override
           public void write(JsonWriter out, ConnectorProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectorProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectorProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectorProperties
   * @throws IOException if the JSON string is invalid with respect to ConnectorProperties
   */
  public static ConnectorProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectorProperties.class);
  }

  /**
   * Convert an instance of ConnectorProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

