/*
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConnectorDefinition;
import org.openapitools.client.model.ConnectorDefinitionListResult;
import org.openapitools.client.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConnectorsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConnectorsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConnectorsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for connectorCreateOrUpdate
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param connectorName Connector Name. (required)
     * @param connector Connector details (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public okhttp3.Call connectorCreateOrUpdateCall(String apiVersion, String subscriptionId, String resourceGroupName, String connectorName, ConnectorDefinition connector, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connector;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.CostManagement/connectors/{connectorName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "connectorName" + "}", localVarApiClient.escapeString(connectorName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectorCreateOrUpdateValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String connectorName, ConnectorDefinition connector, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectorCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectorCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling connectorCreateOrUpdate(Async)");
        }

        // verify the required parameter 'connectorName' is set
        if (connectorName == null) {
            throw new ApiException("Missing the required parameter 'connectorName' when calling connectorCreateOrUpdate(Async)");
        }

        // verify the required parameter 'connector' is set
        if (connector == null) {
            throw new ApiException("Missing the required parameter 'connector' when calling connectorCreateOrUpdate(Async)");
        }

        return connectorCreateOrUpdateCall(apiVersion, subscriptionId, resourceGroupName, connectorName, connector, _callback);

    }

    /**
     * 
     * Create or update a connector definition
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param connectorName Connector Name. (required)
     * @param connector Connector details (required)
     * @return ConnectorDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public ConnectorDefinition connectorCreateOrUpdate(String apiVersion, String subscriptionId, String resourceGroupName, String connectorName, ConnectorDefinition connector) throws ApiException {
        ApiResponse<ConnectorDefinition> localVarResp = connectorCreateOrUpdateWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, connectorName, connector);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update a connector definition
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param connectorName Connector Name. (required)
     * @param connector Connector details (required)
     * @return ApiResponse&lt;ConnectorDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public ApiResponse<ConnectorDefinition> connectorCreateOrUpdateWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String connectorName, ConnectorDefinition connector) throws ApiException {
        okhttp3.Call localVarCall = connectorCreateOrUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, connectorName, connector, null);
        Type localVarReturnType = new TypeToken<ConnectorDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update a connector definition
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param connectorName Connector Name. (required)
     * @param connector Connector details (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public okhttp3.Call connectorCreateOrUpdateAsync(String apiVersion, String subscriptionId, String resourceGroupName, String connectorName, ConnectorDefinition connector, final ApiCallback<ConnectorDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectorCreateOrUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, connectorName, connector, _callback);
        Type localVarReturnType = new TypeToken<ConnectorDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectorDelete
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param connectorName Connector Name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public okhttp3.Call connectorDeleteCall(String apiVersion, String subscriptionId, String resourceGroupName, String connectorName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.CostManagement/connectors/{connectorName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "connectorName" + "}", localVarApiClient.escapeString(connectorName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectorDeleteValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String connectorName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectorDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectorDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling connectorDelete(Async)");
        }

        // verify the required parameter 'connectorName' is set
        if (connectorName == null) {
            throw new ApiException("Missing the required parameter 'connectorName' when calling connectorDelete(Async)");
        }

        return connectorDeleteCall(apiVersion, subscriptionId, resourceGroupName, connectorName, _callback);

    }

    /**
     * 
     * Delete a connector definition
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param connectorName Connector Name. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public void connectorDelete(String apiVersion, String subscriptionId, String resourceGroupName, String connectorName) throws ApiException {
        connectorDeleteWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, connectorName);
    }

    /**
     * 
     * Delete a connector definition
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param connectorName Connector Name. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public ApiResponse<Void> connectorDeleteWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String connectorName) throws ApiException {
        okhttp3.Call localVarCall = connectorDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, connectorName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a connector definition
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param connectorName Connector Name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public okhttp3.Call connectorDeleteAsync(String apiVersion, String subscriptionId, String resourceGroupName, String connectorName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectorDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, connectorName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectorGet
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param connectorName Connector Name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public okhttp3.Call connectorGetCall(String apiVersion, String subscriptionId, String resourceGroupName, String connectorName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.CostManagement/connectors/{connectorName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "connectorName" + "}", localVarApiClient.escapeString(connectorName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectorGetValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String connectorName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectorGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectorGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling connectorGet(Async)");
        }

        // verify the required parameter 'connectorName' is set
        if (connectorName == null) {
            throw new ApiException("Missing the required parameter 'connectorName' when calling connectorGet(Async)");
        }

        return connectorGetCall(apiVersion, subscriptionId, resourceGroupName, connectorName, _callback);

    }

    /**
     * 
     * Get a connector definition
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param connectorName Connector Name. (required)
     * @return ConnectorDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public ConnectorDefinition connectorGet(String apiVersion, String subscriptionId, String resourceGroupName, String connectorName) throws ApiException {
        ApiResponse<ConnectorDefinition> localVarResp = connectorGetWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, connectorName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a connector definition
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param connectorName Connector Name. (required)
     * @return ApiResponse&lt;ConnectorDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public ApiResponse<ConnectorDefinition> connectorGetWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String connectorName) throws ApiException {
        okhttp3.Call localVarCall = connectorGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, connectorName, null);
        Type localVarReturnType = new TypeToken<ConnectorDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a connector definition
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param connectorName Connector Name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public okhttp3.Call connectorGetAsync(String apiVersion, String subscriptionId, String resourceGroupName, String connectorName, final ApiCallback<ConnectorDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectorGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, connectorName, _callback);
        Type localVarReturnType = new TypeToken<ConnectorDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectorList
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public okhttp3.Call connectorListCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.CostManagement/connectors"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectorListValidateBeforeCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectorList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectorList(Async)");
        }

        return connectorListCall(apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * List all connector definitions for a subscription
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @return ConnectorDefinitionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public ConnectorDefinitionListResult connectorList(String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ConnectorDefinitionListResult> localVarResp = connectorListWithHttpInfo(apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * List all connector definitions for a subscription
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @return ApiResponse&lt;ConnectorDefinitionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public ApiResponse<ConnectorDefinitionListResult> connectorListWithHttpInfo(String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = connectorListValidateBeforeCall(apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ConnectorDefinitionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all connector definitions for a subscription
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public okhttp3.Call connectorListAsync(String apiVersion, String subscriptionId, final ApiCallback<ConnectorDefinitionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectorListValidateBeforeCall(apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ConnectorDefinitionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectorListByResourceGroupName
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public okhttp3.Call connectorListByResourceGroupNameCall(String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.CostManagement/connectors"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectorListByResourceGroupNameValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectorListByResourceGroupName(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectorListByResourceGroupName(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling connectorListByResourceGroupName(Async)");
        }

        return connectorListByResourceGroupNameCall(apiVersion, subscriptionId, resourceGroupName, _callback);

    }

    /**
     * 
     * List all connector definitions for a resource group under a subscription.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @return ConnectorDefinitionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public ConnectorDefinitionListResult connectorListByResourceGroupName(String apiVersion, String subscriptionId, String resourceGroupName) throws ApiException {
        ApiResponse<ConnectorDefinitionListResult> localVarResp = connectorListByResourceGroupNameWithHttpInfo(apiVersion, subscriptionId, resourceGroupName);
        return localVarResp.getData();
    }

    /**
     * 
     * List all connector definitions for a resource group under a subscription.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @return ApiResponse&lt;ConnectorDefinitionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public ApiResponse<ConnectorDefinitionListResult> connectorListByResourceGroupNameWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName) throws ApiException {
        okhttp3.Call localVarCall = connectorListByResourceGroupNameValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, null);
        Type localVarReturnType = new TypeToken<ConnectorDefinitionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all connector definitions for a resource group under a subscription.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public okhttp3.Call connectorListByResourceGroupNameAsync(String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback<ConnectorDefinitionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectorListByResourceGroupNameValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, _callback);
        Type localVarReturnType = new TypeToken<ConnectorDefinitionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectorUpdate
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param connectorName Connector Name. (required)
     * @param connector Connector details (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public okhttp3.Call connectorUpdateCall(String apiVersion, String subscriptionId, String resourceGroupName, String connectorName, ConnectorDefinition connector, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connector;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.CostManagement/connectors/{connectorName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "connectorName" + "}", localVarApiClient.escapeString(connectorName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectorUpdateValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String connectorName, ConnectorDefinition connector, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectorUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectorUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling connectorUpdate(Async)");
        }

        // verify the required parameter 'connectorName' is set
        if (connectorName == null) {
            throw new ApiException("Missing the required parameter 'connectorName' when calling connectorUpdate(Async)");
        }

        // verify the required parameter 'connector' is set
        if (connector == null) {
            throw new ApiException("Missing the required parameter 'connector' when calling connectorUpdate(Async)");
        }

        return connectorUpdateCall(apiVersion, subscriptionId, resourceGroupName, connectorName, connector, _callback);

    }

    /**
     * 
     * Update a connector definition
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param connectorName Connector Name. (required)
     * @param connector Connector details (required)
     * @return ConnectorDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public ConnectorDefinition connectorUpdate(String apiVersion, String subscriptionId, String resourceGroupName, String connectorName, ConnectorDefinition connector) throws ApiException {
        ApiResponse<ConnectorDefinition> localVarResp = connectorUpdateWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, connectorName, connector);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a connector definition
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param connectorName Connector Name. (required)
     * @param connector Connector details (required)
     * @return ApiResponse&lt;ConnectorDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public ApiResponse<ConnectorDefinition> connectorUpdateWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String connectorName, ConnectorDefinition connector) throws ApiException {
        okhttp3.Call localVarCall = connectorUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, connectorName, connector, null);
        Type localVarReturnType = new TypeToken<ConnectorDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a connector definition
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param connectorName Connector Name. (required)
     * @param connector Connector details (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public okhttp3.Call connectorUpdateAsync(String apiVersion, String subscriptionId, String resourceGroupName, String connectorName, ConnectorDefinition connector, final ApiCallback<ConnectorDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectorUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, connectorName, connector, _callback);
        Type localVarReturnType = new TypeToken<ConnectorDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
