/*
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Alert;
import org.openapitools.client.model.AlertListResult;
import org.openapitools.client.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AlertsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AlertsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AlertsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for alertsGetAlertByManagementGroups
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param managementGroupId Management Group ID (required)
     * @param alertId Alert ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public okhttp3.Call alertsGetAlertByManagementGroupsCall(String apiVersion, String managementGroupId, String alertId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.CostManagement/alerts/{alertId}"
            .replace("{" + "managementGroupId" + "}", localVarApiClient.escapeString(managementGroupId.toString()))
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsGetAlertByManagementGroupsValidateBeforeCall(String apiVersion, String managementGroupId, String alertId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsGetAlertByManagementGroups(Async)");
        }

        // verify the required parameter 'managementGroupId' is set
        if (managementGroupId == null) {
            throw new ApiException("Missing the required parameter 'managementGroupId' when calling alertsGetAlertByManagementGroups(Async)");
        }

        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsGetAlertByManagementGroups(Async)");
        }

        return alertsGetAlertByManagementGroupsCall(apiVersion, managementGroupId, alertId, _callback);

    }

    /**
     * 
     * Gets an alert for Management Groups by alert ID.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param managementGroupId Management Group ID (required)
     * @param alertId Alert ID. (required)
     * @return Alert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public Alert alertsGetAlertByManagementGroups(String apiVersion, String managementGroupId, String alertId) throws ApiException {
        ApiResponse<Alert> localVarResp = alertsGetAlertByManagementGroupsWithHttpInfo(apiVersion, managementGroupId, alertId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets an alert for Management Groups by alert ID.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param managementGroupId Management Group ID (required)
     * @param alertId Alert ID. (required)
     * @return ApiResponse&lt;Alert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public ApiResponse<Alert> alertsGetAlertByManagementGroupsWithHttpInfo(String apiVersion, String managementGroupId, String alertId) throws ApiException {
        okhttp3.Call localVarCall = alertsGetAlertByManagementGroupsValidateBeforeCall(apiVersion, managementGroupId, alertId, null);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets an alert for Management Groups by alert ID.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param managementGroupId Management Group ID (required)
     * @param alertId Alert ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public okhttp3.Call alertsGetAlertByManagementGroupsAsync(String apiVersion, String managementGroupId, String alertId, final ApiCallback<Alert> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsGetAlertByManagementGroupsValidateBeforeCall(apiVersion, managementGroupId, alertId, _callback);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsGetByAccount
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param enrollmentAccountId Enrollment Account Id (required)
     * @param alertId Alert ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public okhttp3.Call alertsGetByAccountCall(String apiVersion, String billingAccountId, String enrollmentAccountId, String alertId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}/providers/Microsoft.CostManagement/alerts/{alertId}"
            .replace("{" + "billingAccountId" + "}", localVarApiClient.escapeString(billingAccountId.toString()))
            .replace("{" + "enrollmentAccountId" + "}", localVarApiClient.escapeString(enrollmentAccountId.toString()))
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsGetByAccountValidateBeforeCall(String apiVersion, String billingAccountId, String enrollmentAccountId, String alertId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsGetByAccount(Async)");
        }

        // verify the required parameter 'billingAccountId' is set
        if (billingAccountId == null) {
            throw new ApiException("Missing the required parameter 'billingAccountId' when calling alertsGetByAccount(Async)");
        }

        // verify the required parameter 'enrollmentAccountId' is set
        if (enrollmentAccountId == null) {
            throw new ApiException("Missing the required parameter 'enrollmentAccountId' when calling alertsGetByAccount(Async)");
        }

        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsGetByAccount(Async)");
        }

        return alertsGetByAccountCall(apiVersion, billingAccountId, enrollmentAccountId, alertId, _callback);

    }

    /**
     * 
     * Gets the alert for an account by alert ID.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param enrollmentAccountId Enrollment Account Id (required)
     * @param alertId Alert ID. (required)
     * @return Alert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public Alert alertsGetByAccount(String apiVersion, String billingAccountId, String enrollmentAccountId, String alertId) throws ApiException {
        ApiResponse<Alert> localVarResp = alertsGetByAccountWithHttpInfo(apiVersion, billingAccountId, enrollmentAccountId, alertId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the alert for an account by alert ID.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param enrollmentAccountId Enrollment Account Id (required)
     * @param alertId Alert ID. (required)
     * @return ApiResponse&lt;Alert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public ApiResponse<Alert> alertsGetByAccountWithHttpInfo(String apiVersion, String billingAccountId, String enrollmentAccountId, String alertId) throws ApiException {
        okhttp3.Call localVarCall = alertsGetByAccountValidateBeforeCall(apiVersion, billingAccountId, enrollmentAccountId, alertId, null);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the alert for an account by alert ID.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param enrollmentAccountId Enrollment Account Id (required)
     * @param alertId Alert ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public okhttp3.Call alertsGetByAccountAsync(String apiVersion, String billingAccountId, String enrollmentAccountId, String alertId, final ApiCallback<Alert> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsGetByAccountValidateBeforeCall(apiVersion, billingAccountId, enrollmentAccountId, alertId, _callback);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsGetByDepartment
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param departmentId Department ID (required)
     * @param alertId Alert ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public okhttp3.Call alertsGetByDepartmentCall(String apiVersion, String billingAccountId, String departmentId, String alertId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}/providers/Microsoft.CostManagement/alerts/{alertId}"
            .replace("{" + "billingAccountId" + "}", localVarApiClient.escapeString(billingAccountId.toString()))
            .replace("{" + "departmentId" + "}", localVarApiClient.escapeString(departmentId.toString()))
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsGetByDepartmentValidateBeforeCall(String apiVersion, String billingAccountId, String departmentId, String alertId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsGetByDepartment(Async)");
        }

        // verify the required parameter 'billingAccountId' is set
        if (billingAccountId == null) {
            throw new ApiException("Missing the required parameter 'billingAccountId' when calling alertsGetByDepartment(Async)");
        }

        // verify the required parameter 'departmentId' is set
        if (departmentId == null) {
            throw new ApiException("Missing the required parameter 'departmentId' when calling alertsGetByDepartment(Async)");
        }

        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsGetByDepartment(Async)");
        }

        return alertsGetByDepartmentCall(apiVersion, billingAccountId, departmentId, alertId, _callback);

    }

    /**
     * 
     * Gets the alert for a department by alert ID.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param departmentId Department ID (required)
     * @param alertId Alert ID. (required)
     * @return Alert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public Alert alertsGetByDepartment(String apiVersion, String billingAccountId, String departmentId, String alertId) throws ApiException {
        ApiResponse<Alert> localVarResp = alertsGetByDepartmentWithHttpInfo(apiVersion, billingAccountId, departmentId, alertId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the alert for a department by alert ID.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param departmentId Department ID (required)
     * @param alertId Alert ID. (required)
     * @return ApiResponse&lt;Alert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public ApiResponse<Alert> alertsGetByDepartmentWithHttpInfo(String apiVersion, String billingAccountId, String departmentId, String alertId) throws ApiException {
        okhttp3.Call localVarCall = alertsGetByDepartmentValidateBeforeCall(apiVersion, billingAccountId, departmentId, alertId, null);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the alert for a department by alert ID.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param departmentId Department ID (required)
     * @param alertId Alert ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public okhttp3.Call alertsGetByDepartmentAsync(String apiVersion, String billingAccountId, String departmentId, String alertId, final ApiCallback<Alert> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsGetByDepartmentValidateBeforeCall(apiVersion, billingAccountId, departmentId, alertId, _callback);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsGetByEnrollment
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param alertId Alert ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public okhttp3.Call alertsGetByEnrollmentCall(String apiVersion, String billingAccountId, String alertId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.CostManagement/alerts/{alertId}"
            .replace("{" + "billingAccountId" + "}", localVarApiClient.escapeString(billingAccountId.toString()))
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsGetByEnrollmentValidateBeforeCall(String apiVersion, String billingAccountId, String alertId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsGetByEnrollment(Async)");
        }

        // verify the required parameter 'billingAccountId' is set
        if (billingAccountId == null) {
            throw new ApiException("Missing the required parameter 'billingAccountId' when calling alertsGetByEnrollment(Async)");
        }

        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsGetByEnrollment(Async)");
        }

        return alertsGetByEnrollmentCall(apiVersion, billingAccountId, alertId, _callback);

    }

    /**
     * 
     * Gets the alert for an enrollment by alert ID.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param alertId Alert ID. (required)
     * @return Alert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public Alert alertsGetByEnrollment(String apiVersion, String billingAccountId, String alertId) throws ApiException {
        ApiResponse<Alert> localVarResp = alertsGetByEnrollmentWithHttpInfo(apiVersion, billingAccountId, alertId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the alert for an enrollment by alert ID.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param alertId Alert ID. (required)
     * @return ApiResponse&lt;Alert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public ApiResponse<Alert> alertsGetByEnrollmentWithHttpInfo(String apiVersion, String billingAccountId, String alertId) throws ApiException {
        okhttp3.Call localVarCall = alertsGetByEnrollmentValidateBeforeCall(apiVersion, billingAccountId, alertId, null);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the alert for an enrollment by alert ID.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param alertId Alert ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public okhttp3.Call alertsGetByEnrollmentAsync(String apiVersion, String billingAccountId, String alertId, final ApiCallback<Alert> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsGetByEnrollmentValidateBeforeCall(apiVersion, billingAccountId, alertId, _callback);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsGetByResourceGroupName
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param alertId Alert ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public okhttp3.Call alertsGetByResourceGroupNameCall(String subscriptionId, String resourceGroupName, String apiVersion, String alertId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CostManagement/alerts/{alertId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsGetByResourceGroupNameValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String alertId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertsGetByResourceGroupName(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling alertsGetByResourceGroupName(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsGetByResourceGroupName(Async)");
        }

        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsGetByResourceGroupName(Async)");
        }

        return alertsGetByResourceGroupNameCall(subscriptionId, resourceGroupName, apiVersion, alertId, _callback);

    }

    /**
     * 
     * Gets the alert for a resource group under a subscription by alert ID.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param alertId Alert ID. (required)
     * @return Alert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public Alert alertsGetByResourceGroupName(String subscriptionId, String resourceGroupName, String apiVersion, String alertId) throws ApiException {
        ApiResponse<Alert> localVarResp = alertsGetByResourceGroupNameWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, alertId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the alert for a resource group under a subscription by alert ID.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param alertId Alert ID. (required)
     * @return ApiResponse&lt;Alert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public ApiResponse<Alert> alertsGetByResourceGroupNameWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String alertId) throws ApiException {
        okhttp3.Call localVarCall = alertsGetByResourceGroupNameValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, alertId, null);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the alert for a resource group under a subscription by alert ID.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param alertId Alert ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public okhttp3.Call alertsGetByResourceGroupNameAsync(String subscriptionId, String resourceGroupName, String apiVersion, String alertId, final ApiCallback<Alert> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsGetByResourceGroupNameValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, alertId, _callback);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsGetBySubscription
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param alertId Alert ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public okhttp3.Call alertsGetBySubscriptionCall(String apiVersion, String subscriptionId, String alertId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.CostManagement/alerts/{alertId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsGetBySubscriptionValidateBeforeCall(String apiVersion, String subscriptionId, String alertId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsGetBySubscription(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertsGetBySubscription(Async)");
        }

        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsGetBySubscription(Async)");
        }

        return alertsGetBySubscriptionCall(apiVersion, subscriptionId, alertId, _callback);

    }

    /**
     * 
     * Gets the alert for a subscription by alert ID.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param alertId Alert ID. (required)
     * @return Alert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public Alert alertsGetBySubscription(String apiVersion, String subscriptionId, String alertId) throws ApiException {
        ApiResponse<Alert> localVarResp = alertsGetBySubscriptionWithHttpInfo(apiVersion, subscriptionId, alertId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the alert for a subscription by alert ID.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param alertId Alert ID. (required)
     * @return ApiResponse&lt;Alert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public ApiResponse<Alert> alertsGetBySubscriptionWithHttpInfo(String apiVersion, String subscriptionId, String alertId) throws ApiException {
        okhttp3.Call localVarCall = alertsGetBySubscriptionValidateBeforeCall(apiVersion, subscriptionId, alertId, null);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the alert for a subscription by alert ID.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param alertId Alert ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/costmanagement/"> Documentation</a>
     */
    public okhttp3.Call alertsGetBySubscriptionAsync(String apiVersion, String subscriptionId, String alertId, final ApiCallback<Alert> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsGetBySubscriptionValidateBeforeCall(apiVersion, subscriptionId, alertId, _callback);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsList
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param $filter May be used to filter alerts by properties/definition/type, properties/definition/category, properties/definition/criteria, properties/costEntityId, properties/creationTime, properties/closeTime, properties/status, properties/source. Supported operators are &#39;eq&#39;,&#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;. (optional)
     * @param $skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N alerts. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsListCall(String apiVersion, String subscriptionId, String $filter, String $skiptoken, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.CostManagement/alerts"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($skiptoken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skiptoken", $skiptoken));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsListValidateBeforeCall(String apiVersion, String subscriptionId, String $filter, String $skiptoken, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertsList(Async)");
        }

        return alertsListCall(apiVersion, subscriptionId, $filter, $skiptoken, $top, _callback);

    }

    /**
     * 
     * List all alerts for a subscription.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param $filter May be used to filter alerts by properties/definition/type, properties/definition/category, properties/definition/criteria, properties/costEntityId, properties/creationTime, properties/closeTime, properties/status, properties/source. Supported operators are &#39;eq&#39;,&#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;. (optional)
     * @param $skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N alerts. (optional)
     * @return AlertListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AlertListResult alertsList(String apiVersion, String subscriptionId, String $filter, String $skiptoken, Integer $top) throws ApiException {
        ApiResponse<AlertListResult> localVarResp = alertsListWithHttpInfo(apiVersion, subscriptionId, $filter, $skiptoken, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * List all alerts for a subscription.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param $filter May be used to filter alerts by properties/definition/type, properties/definition/category, properties/definition/criteria, properties/costEntityId, properties/creationTime, properties/closeTime, properties/status, properties/source. Supported operators are &#39;eq&#39;,&#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;. (optional)
     * @param $skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N alerts. (optional)
     * @return ApiResponse&lt;AlertListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertListResult> alertsListWithHttpInfo(String apiVersion, String subscriptionId, String $filter, String $skiptoken, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = alertsListValidateBeforeCall(apiVersion, subscriptionId, $filter, $skiptoken, $top, null);
        Type localVarReturnType = new TypeToken<AlertListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all alerts for a subscription.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param $filter May be used to filter alerts by properties/definition/type, properties/definition/category, properties/definition/criteria, properties/costEntityId, properties/creationTime, properties/closeTime, properties/status, properties/source. Supported operators are &#39;eq&#39;,&#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;. (optional)
     * @param $skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N alerts. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsListAsync(String apiVersion, String subscriptionId, String $filter, String $skiptoken, Integer $top, final ApiCallback<AlertListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsListValidateBeforeCall(apiVersion, subscriptionId, $filter, $skiptoken, $top, _callback);
        Type localVarReturnType = new TypeToken<AlertListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsListByAccount
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param enrollmentAccountId Enrollment Account Id (required)
     * @param $filter May be used to filter alerts by properties/definition/type, properties/definition/category, properties/definition/criteria, properties/costEntityId, properties/creationTime, properties/closeTime, properties/status, properties/source. Supported operators are &#39;eq&#39;,&#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;. (optional)
     * @param $skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N alerts. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsListByAccountCall(String apiVersion, String billingAccountId, String enrollmentAccountId, String $filter, String $skiptoken, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}/providers/Microsoft.CostManagement/alerts"
            .replace("{" + "billingAccountId" + "}", localVarApiClient.escapeString(billingAccountId.toString()))
            .replace("{" + "enrollmentAccountId" + "}", localVarApiClient.escapeString(enrollmentAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($skiptoken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skiptoken", $skiptoken));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsListByAccountValidateBeforeCall(String apiVersion, String billingAccountId, String enrollmentAccountId, String $filter, String $skiptoken, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsListByAccount(Async)");
        }

        // verify the required parameter 'billingAccountId' is set
        if (billingAccountId == null) {
            throw new ApiException("Missing the required parameter 'billingAccountId' when calling alertsListByAccount(Async)");
        }

        // verify the required parameter 'enrollmentAccountId' is set
        if (enrollmentAccountId == null) {
            throw new ApiException("Missing the required parameter 'enrollmentAccountId' when calling alertsListByAccount(Async)");
        }

        return alertsListByAccountCall(apiVersion, billingAccountId, enrollmentAccountId, $filter, $skiptoken, $top, _callback);

    }

    /**
     * 
     * List all alerts for an account.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param enrollmentAccountId Enrollment Account Id (required)
     * @param $filter May be used to filter alerts by properties/definition/type, properties/definition/category, properties/definition/criteria, properties/costEntityId, properties/creationTime, properties/closeTime, properties/status, properties/source. Supported operators are &#39;eq&#39;,&#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;. (optional)
     * @param $skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N alerts. (optional)
     * @return AlertListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AlertListResult alertsListByAccount(String apiVersion, String billingAccountId, String enrollmentAccountId, String $filter, String $skiptoken, Integer $top) throws ApiException {
        ApiResponse<AlertListResult> localVarResp = alertsListByAccountWithHttpInfo(apiVersion, billingAccountId, enrollmentAccountId, $filter, $skiptoken, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * List all alerts for an account.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param enrollmentAccountId Enrollment Account Id (required)
     * @param $filter May be used to filter alerts by properties/definition/type, properties/definition/category, properties/definition/criteria, properties/costEntityId, properties/creationTime, properties/closeTime, properties/status, properties/source. Supported operators are &#39;eq&#39;,&#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;. (optional)
     * @param $skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N alerts. (optional)
     * @return ApiResponse&lt;AlertListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertListResult> alertsListByAccountWithHttpInfo(String apiVersion, String billingAccountId, String enrollmentAccountId, String $filter, String $skiptoken, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = alertsListByAccountValidateBeforeCall(apiVersion, billingAccountId, enrollmentAccountId, $filter, $skiptoken, $top, null);
        Type localVarReturnType = new TypeToken<AlertListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all alerts for an account.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param enrollmentAccountId Enrollment Account Id (required)
     * @param $filter May be used to filter alerts by properties/definition/type, properties/definition/category, properties/definition/criteria, properties/costEntityId, properties/creationTime, properties/closeTime, properties/status, properties/source. Supported operators are &#39;eq&#39;,&#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;. (optional)
     * @param $skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N alerts. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsListByAccountAsync(String apiVersion, String billingAccountId, String enrollmentAccountId, String $filter, String $skiptoken, Integer $top, final ApiCallback<AlertListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsListByAccountValidateBeforeCall(apiVersion, billingAccountId, enrollmentAccountId, $filter, $skiptoken, $top, _callback);
        Type localVarReturnType = new TypeToken<AlertListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsListByDepartment
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param departmentId Department ID (required)
     * @param $filter May be used to filter alerts by properties/definition/type, properties/definition/category, properties/definition/criteria, properties/costEntityId, properties/creationTime, properties/closeTime, properties/status, properties/source. Supported operators are &#39;eq&#39;,&#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;. (optional)
     * @param $skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N alerts. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsListByDepartmentCall(String apiVersion, String billingAccountId, String departmentId, String $filter, String $skiptoken, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}/providers/Microsoft.CostManagement/alerts"
            .replace("{" + "billingAccountId" + "}", localVarApiClient.escapeString(billingAccountId.toString()))
            .replace("{" + "departmentId" + "}", localVarApiClient.escapeString(departmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($skiptoken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skiptoken", $skiptoken));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsListByDepartmentValidateBeforeCall(String apiVersion, String billingAccountId, String departmentId, String $filter, String $skiptoken, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsListByDepartment(Async)");
        }

        // verify the required parameter 'billingAccountId' is set
        if (billingAccountId == null) {
            throw new ApiException("Missing the required parameter 'billingAccountId' when calling alertsListByDepartment(Async)");
        }

        // verify the required parameter 'departmentId' is set
        if (departmentId == null) {
            throw new ApiException("Missing the required parameter 'departmentId' when calling alertsListByDepartment(Async)");
        }

        return alertsListByDepartmentCall(apiVersion, billingAccountId, departmentId, $filter, $skiptoken, $top, _callback);

    }

    /**
     * 
     * List all alerts for a department.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param departmentId Department ID (required)
     * @param $filter May be used to filter alerts by properties/definition/type, properties/definition/category, properties/definition/criteria, properties/costEntityId, properties/creationTime, properties/closeTime, properties/status, properties/source. Supported operators are &#39;eq&#39;,&#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;. (optional)
     * @param $skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N alerts. (optional)
     * @return AlertListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AlertListResult alertsListByDepartment(String apiVersion, String billingAccountId, String departmentId, String $filter, String $skiptoken, Integer $top) throws ApiException {
        ApiResponse<AlertListResult> localVarResp = alertsListByDepartmentWithHttpInfo(apiVersion, billingAccountId, departmentId, $filter, $skiptoken, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * List all alerts for a department.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param departmentId Department ID (required)
     * @param $filter May be used to filter alerts by properties/definition/type, properties/definition/category, properties/definition/criteria, properties/costEntityId, properties/creationTime, properties/closeTime, properties/status, properties/source. Supported operators are &#39;eq&#39;,&#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;. (optional)
     * @param $skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N alerts. (optional)
     * @return ApiResponse&lt;AlertListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertListResult> alertsListByDepartmentWithHttpInfo(String apiVersion, String billingAccountId, String departmentId, String $filter, String $skiptoken, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = alertsListByDepartmentValidateBeforeCall(apiVersion, billingAccountId, departmentId, $filter, $skiptoken, $top, null);
        Type localVarReturnType = new TypeToken<AlertListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all alerts for a department.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param departmentId Department ID (required)
     * @param $filter May be used to filter alerts by properties/definition/type, properties/definition/category, properties/definition/criteria, properties/costEntityId, properties/creationTime, properties/closeTime, properties/status, properties/source. Supported operators are &#39;eq&#39;,&#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;. (optional)
     * @param $skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N alerts. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsListByDepartmentAsync(String apiVersion, String billingAccountId, String departmentId, String $filter, String $skiptoken, Integer $top, final ApiCallback<AlertListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsListByDepartmentValidateBeforeCall(apiVersion, billingAccountId, departmentId, $filter, $skiptoken, $top, _callback);
        Type localVarReturnType = new TypeToken<AlertListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsListByEnrollment
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param $filter May be used to filter alerts by properties/definition/type, properties/definition/category, properties/definition/criteria, properties/costEntityId, properties/creationTime, properties/closeTime, properties/status, properties/source. Supported operators are &#39;eq&#39;,&#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;. (optional)
     * @param $skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N alerts. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsListByEnrollmentCall(String apiVersion, String billingAccountId, String $filter, String $skiptoken, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.CostManagement/alerts"
            .replace("{" + "billingAccountId" + "}", localVarApiClient.escapeString(billingAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($skiptoken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skiptoken", $skiptoken));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsListByEnrollmentValidateBeforeCall(String apiVersion, String billingAccountId, String $filter, String $skiptoken, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsListByEnrollment(Async)");
        }

        // verify the required parameter 'billingAccountId' is set
        if (billingAccountId == null) {
            throw new ApiException("Missing the required parameter 'billingAccountId' when calling alertsListByEnrollment(Async)");
        }

        return alertsListByEnrollmentCall(apiVersion, billingAccountId, $filter, $skiptoken, $top, _callback);

    }

    /**
     * 
     * List all alerts for an enrollment.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param $filter May be used to filter alerts by properties/definition/type, properties/definition/category, properties/definition/criteria, properties/costEntityId, properties/creationTime, properties/closeTime, properties/status, properties/source. Supported operators are &#39;eq&#39;,&#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;. (optional)
     * @param $skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N alerts. (optional)
     * @return AlertListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AlertListResult alertsListByEnrollment(String apiVersion, String billingAccountId, String $filter, String $skiptoken, Integer $top) throws ApiException {
        ApiResponse<AlertListResult> localVarResp = alertsListByEnrollmentWithHttpInfo(apiVersion, billingAccountId, $filter, $skiptoken, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * List all alerts for an enrollment.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param $filter May be used to filter alerts by properties/definition/type, properties/definition/category, properties/definition/criteria, properties/costEntityId, properties/creationTime, properties/closeTime, properties/status, properties/source. Supported operators are &#39;eq&#39;,&#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;. (optional)
     * @param $skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N alerts. (optional)
     * @return ApiResponse&lt;AlertListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertListResult> alertsListByEnrollmentWithHttpInfo(String apiVersion, String billingAccountId, String $filter, String $skiptoken, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = alertsListByEnrollmentValidateBeforeCall(apiVersion, billingAccountId, $filter, $skiptoken, $top, null);
        Type localVarReturnType = new TypeToken<AlertListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all alerts for an enrollment.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param $filter May be used to filter alerts by properties/definition/type, properties/definition/category, properties/definition/criteria, properties/costEntityId, properties/creationTime, properties/closeTime, properties/status, properties/source. Supported operators are &#39;eq&#39;,&#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;. (optional)
     * @param $skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N alerts. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsListByEnrollmentAsync(String apiVersion, String billingAccountId, String $filter, String $skiptoken, Integer $top, final ApiCallback<AlertListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsListByEnrollmentValidateBeforeCall(apiVersion, billingAccountId, $filter, $skiptoken, $top, _callback);
        Type localVarReturnType = new TypeToken<AlertListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsListByManagementGroups
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param managementGroupId Management Group ID (required)
     * @param $filter May be used to filter alerts by properties/definition/type, properties/definition/category, properties/definition/criteria, properties/costEntityId, properties/creationTime, properties/closeTime, properties/status, properties/source. Supported operators are &#39;eq&#39;,&#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;. (optional)
     * @param $skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N alerts. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsListByManagementGroupsCall(String apiVersion, String managementGroupId, String $filter, String $skiptoken, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.CostManagement/alerts"
            .replace("{" + "managementGroupId" + "}", localVarApiClient.escapeString(managementGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($skiptoken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skiptoken", $skiptoken));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsListByManagementGroupsValidateBeforeCall(String apiVersion, String managementGroupId, String $filter, String $skiptoken, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsListByManagementGroups(Async)");
        }

        // verify the required parameter 'managementGroupId' is set
        if (managementGroupId == null) {
            throw new ApiException("Missing the required parameter 'managementGroupId' when calling alertsListByManagementGroups(Async)");
        }

        return alertsListByManagementGroupsCall(apiVersion, managementGroupId, $filter, $skiptoken, $top, _callback);

    }

    /**
     * 
     * List all alerts for Management Groups.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param managementGroupId Management Group ID (required)
     * @param $filter May be used to filter alerts by properties/definition/type, properties/definition/category, properties/definition/criteria, properties/costEntityId, properties/creationTime, properties/closeTime, properties/status, properties/source. Supported operators are &#39;eq&#39;,&#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;. (optional)
     * @param $skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N alerts. (optional)
     * @return AlertListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AlertListResult alertsListByManagementGroups(String apiVersion, String managementGroupId, String $filter, String $skiptoken, Integer $top) throws ApiException {
        ApiResponse<AlertListResult> localVarResp = alertsListByManagementGroupsWithHttpInfo(apiVersion, managementGroupId, $filter, $skiptoken, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * List all alerts for Management Groups.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param managementGroupId Management Group ID (required)
     * @param $filter May be used to filter alerts by properties/definition/type, properties/definition/category, properties/definition/criteria, properties/costEntityId, properties/creationTime, properties/closeTime, properties/status, properties/source. Supported operators are &#39;eq&#39;,&#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;. (optional)
     * @param $skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N alerts. (optional)
     * @return ApiResponse&lt;AlertListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertListResult> alertsListByManagementGroupsWithHttpInfo(String apiVersion, String managementGroupId, String $filter, String $skiptoken, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = alertsListByManagementGroupsValidateBeforeCall(apiVersion, managementGroupId, $filter, $skiptoken, $top, null);
        Type localVarReturnType = new TypeToken<AlertListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all alerts for Management Groups.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param managementGroupId Management Group ID (required)
     * @param $filter May be used to filter alerts by properties/definition/type, properties/definition/category, properties/definition/criteria, properties/costEntityId, properties/creationTime, properties/closeTime, properties/status, properties/source. Supported operators are &#39;eq&#39;,&#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;. (optional)
     * @param $skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N alerts. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsListByManagementGroupsAsync(String apiVersion, String managementGroupId, String $filter, String $skiptoken, Integer $top, final ApiCallback<AlertListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsListByManagementGroupsValidateBeforeCall(apiVersion, managementGroupId, $filter, $skiptoken, $top, _callback);
        Type localVarReturnType = new TypeToken<AlertListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsListByResourceGroupName
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param $filter May be used to filter alerts by properties/definition/type, properties/definition/category, properties/definition/criteria, properties/costEntityId, properties/creationTime, properties/closeTime, properties/status, properties/source. Supported operators are &#39;eq&#39;,&#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;. (optional)
     * @param $skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N alerts. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsListByResourceGroupNameCall(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, String $skiptoken, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CostManagement/alerts"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($skiptoken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skiptoken", $skiptoken));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsListByResourceGroupNameValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, String $skiptoken, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertsListByResourceGroupName(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling alertsListByResourceGroupName(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsListByResourceGroupName(Async)");
        }

        return alertsListByResourceGroupNameCall(subscriptionId, resourceGroupName, apiVersion, $filter, $skiptoken, $top, _callback);

    }

    /**
     * 
     * List all alerts for a resource group under a subscription.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param $filter May be used to filter alerts by properties/definition/type, properties/definition/category, properties/definition/criteria, properties/costEntityId, properties/creationTime, properties/closeTime, properties/status, properties/source. Supported operators are &#39;eq&#39;,&#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;. (optional)
     * @param $skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N alerts. (optional)
     * @return AlertListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AlertListResult alertsListByResourceGroupName(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, String $skiptoken, Integer $top) throws ApiException {
        ApiResponse<AlertListResult> localVarResp = alertsListByResourceGroupNameWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, $filter, $skiptoken, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * List all alerts for a resource group under a subscription.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param $filter May be used to filter alerts by properties/definition/type, properties/definition/category, properties/definition/criteria, properties/costEntityId, properties/creationTime, properties/closeTime, properties/status, properties/source. Supported operators are &#39;eq&#39;,&#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;. (optional)
     * @param $skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N alerts. (optional)
     * @return ApiResponse&lt;AlertListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertListResult> alertsListByResourceGroupNameWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, String $skiptoken, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = alertsListByResourceGroupNameValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, $filter, $skiptoken, $top, null);
        Type localVarReturnType = new TypeToken<AlertListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all alerts for a resource group under a subscription.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param $filter May be used to filter alerts by properties/definition/type, properties/definition/category, properties/definition/criteria, properties/costEntityId, properties/creationTime, properties/closeTime, properties/status, properties/source. Supported operators are &#39;eq&#39;,&#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;. (optional)
     * @param $skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. (optional)
     * @param $top May be used to limit the number of results to the most recent N alerts. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsListByResourceGroupNameAsync(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, String $skiptoken, Integer $top, final ApiCallback<AlertListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsListByResourceGroupNameValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, $filter, $skiptoken, $top, _callback);
        Type localVarReturnType = new TypeToken<AlertListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsUpdateBillingAccountAlertStatus
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param alertId Alert ID. (required)
     * @param parameters Parameters supplied to the update alerts status operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsUpdateBillingAccountAlertStatusCall(String apiVersion, String billingAccountId, String alertId, Alert parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.CostManagement/alerts/{alertId}/updateStatus"
            .replace("{" + "billingAccountId" + "}", localVarApiClient.escapeString(billingAccountId.toString()))
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsUpdateBillingAccountAlertStatusValidateBeforeCall(String apiVersion, String billingAccountId, String alertId, Alert parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsUpdateBillingAccountAlertStatus(Async)");
        }

        // verify the required parameter 'billingAccountId' is set
        if (billingAccountId == null) {
            throw new ApiException("Missing the required parameter 'billingAccountId' when calling alertsUpdateBillingAccountAlertStatus(Async)");
        }

        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsUpdateBillingAccountAlertStatus(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling alertsUpdateBillingAccountAlertStatus(Async)");
        }

        return alertsUpdateBillingAccountAlertStatusCall(apiVersion, billingAccountId, alertId, parameters, _callback);

    }

    /**
     * 
     * Update alerts status for billing account.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param alertId Alert ID. (required)
     * @param parameters Parameters supplied to the update alerts status operation. (required)
     * @return Alert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Alert alertsUpdateBillingAccountAlertStatus(String apiVersion, String billingAccountId, String alertId, Alert parameters) throws ApiException {
        ApiResponse<Alert> localVarResp = alertsUpdateBillingAccountAlertStatusWithHttpInfo(apiVersion, billingAccountId, alertId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update alerts status for billing account.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param alertId Alert ID. (required)
     * @param parameters Parameters supplied to the update alerts status operation. (required)
     * @return ApiResponse&lt;Alert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Alert> alertsUpdateBillingAccountAlertStatusWithHttpInfo(String apiVersion, String billingAccountId, String alertId, Alert parameters) throws ApiException {
        okhttp3.Call localVarCall = alertsUpdateBillingAccountAlertStatusValidateBeforeCall(apiVersion, billingAccountId, alertId, parameters, null);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update alerts status for billing account.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param alertId Alert ID. (required)
     * @param parameters Parameters supplied to the update alerts status operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsUpdateBillingAccountAlertStatusAsync(String apiVersion, String billingAccountId, String alertId, Alert parameters, final ApiCallback<Alert> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsUpdateBillingAccountAlertStatusValidateBeforeCall(apiVersion, billingAccountId, alertId, parameters, _callback);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsUpdateDepartmentsAlertStatus
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param departmentId Department ID (required)
     * @param alertId Alert ID. (required)
     * @param parameters Parameters supplied to the update alerts status operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsUpdateDepartmentsAlertStatusCall(String apiVersion, String billingAccountId, String departmentId, String alertId, Alert parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}/providers/Microsoft.CostManagement/alerts/{alertId}/updateStatus"
            .replace("{" + "billingAccountId" + "}", localVarApiClient.escapeString(billingAccountId.toString()))
            .replace("{" + "departmentId" + "}", localVarApiClient.escapeString(departmentId.toString()))
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsUpdateDepartmentsAlertStatusValidateBeforeCall(String apiVersion, String billingAccountId, String departmentId, String alertId, Alert parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsUpdateDepartmentsAlertStatus(Async)");
        }

        // verify the required parameter 'billingAccountId' is set
        if (billingAccountId == null) {
            throw new ApiException("Missing the required parameter 'billingAccountId' when calling alertsUpdateDepartmentsAlertStatus(Async)");
        }

        // verify the required parameter 'departmentId' is set
        if (departmentId == null) {
            throw new ApiException("Missing the required parameter 'departmentId' when calling alertsUpdateDepartmentsAlertStatus(Async)");
        }

        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsUpdateDepartmentsAlertStatus(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling alertsUpdateDepartmentsAlertStatus(Async)");
        }

        return alertsUpdateDepartmentsAlertStatusCall(apiVersion, billingAccountId, departmentId, alertId, parameters, _callback);

    }

    /**
     * 
     * Update alerts status for a department.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param departmentId Department ID (required)
     * @param alertId Alert ID. (required)
     * @param parameters Parameters supplied to the update alerts status operation. (required)
     * @return Alert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Alert alertsUpdateDepartmentsAlertStatus(String apiVersion, String billingAccountId, String departmentId, String alertId, Alert parameters) throws ApiException {
        ApiResponse<Alert> localVarResp = alertsUpdateDepartmentsAlertStatusWithHttpInfo(apiVersion, billingAccountId, departmentId, alertId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update alerts status for a department.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param departmentId Department ID (required)
     * @param alertId Alert ID. (required)
     * @param parameters Parameters supplied to the update alerts status operation. (required)
     * @return ApiResponse&lt;Alert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Alert> alertsUpdateDepartmentsAlertStatusWithHttpInfo(String apiVersion, String billingAccountId, String departmentId, String alertId, Alert parameters) throws ApiException {
        okhttp3.Call localVarCall = alertsUpdateDepartmentsAlertStatusValidateBeforeCall(apiVersion, billingAccountId, departmentId, alertId, parameters, null);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update alerts status for a department.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param departmentId Department ID (required)
     * @param alertId Alert ID. (required)
     * @param parameters Parameters supplied to the update alerts status operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsUpdateDepartmentsAlertStatusAsync(String apiVersion, String billingAccountId, String departmentId, String alertId, Alert parameters, final ApiCallback<Alert> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsUpdateDepartmentsAlertStatusValidateBeforeCall(apiVersion, billingAccountId, departmentId, alertId, parameters, _callback);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsUpdateEnrollmentAccountAlertStatus
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param enrollmentAccountId Enrollment Account Id (required)
     * @param alertId Alert ID. (required)
     * @param parameters Parameters supplied to the update alerts status operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsUpdateEnrollmentAccountAlertStatusCall(String apiVersion, String billingAccountId, String enrollmentAccountId, String alertId, Alert parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}/providers/Microsoft.CostManagement/alerts/{alertId}/updateStatus"
            .replace("{" + "billingAccountId" + "}", localVarApiClient.escapeString(billingAccountId.toString()))
            .replace("{" + "enrollmentAccountId" + "}", localVarApiClient.escapeString(enrollmentAccountId.toString()))
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsUpdateEnrollmentAccountAlertStatusValidateBeforeCall(String apiVersion, String billingAccountId, String enrollmentAccountId, String alertId, Alert parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsUpdateEnrollmentAccountAlertStatus(Async)");
        }

        // verify the required parameter 'billingAccountId' is set
        if (billingAccountId == null) {
            throw new ApiException("Missing the required parameter 'billingAccountId' when calling alertsUpdateEnrollmentAccountAlertStatus(Async)");
        }

        // verify the required parameter 'enrollmentAccountId' is set
        if (enrollmentAccountId == null) {
            throw new ApiException("Missing the required parameter 'enrollmentAccountId' when calling alertsUpdateEnrollmentAccountAlertStatus(Async)");
        }

        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsUpdateEnrollmentAccountAlertStatus(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling alertsUpdateEnrollmentAccountAlertStatus(Async)");
        }

        return alertsUpdateEnrollmentAccountAlertStatusCall(apiVersion, billingAccountId, enrollmentAccountId, alertId, parameters, _callback);

    }

    /**
     * 
     * Update alerts status for an enrollment account.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param enrollmentAccountId Enrollment Account Id (required)
     * @param alertId Alert ID. (required)
     * @param parameters Parameters supplied to the update alerts status operation. (required)
     * @return Alert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Alert alertsUpdateEnrollmentAccountAlertStatus(String apiVersion, String billingAccountId, String enrollmentAccountId, String alertId, Alert parameters) throws ApiException {
        ApiResponse<Alert> localVarResp = alertsUpdateEnrollmentAccountAlertStatusWithHttpInfo(apiVersion, billingAccountId, enrollmentAccountId, alertId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update alerts status for an enrollment account.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param enrollmentAccountId Enrollment Account Id (required)
     * @param alertId Alert ID. (required)
     * @param parameters Parameters supplied to the update alerts status operation. (required)
     * @return ApiResponse&lt;Alert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Alert> alertsUpdateEnrollmentAccountAlertStatusWithHttpInfo(String apiVersion, String billingAccountId, String enrollmentAccountId, String alertId, Alert parameters) throws ApiException {
        okhttp3.Call localVarCall = alertsUpdateEnrollmentAccountAlertStatusValidateBeforeCall(apiVersion, billingAccountId, enrollmentAccountId, alertId, parameters, null);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update alerts status for an enrollment account.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param billingAccountId BillingAccount ID (required)
     * @param enrollmentAccountId Enrollment Account Id (required)
     * @param alertId Alert ID. (required)
     * @param parameters Parameters supplied to the update alerts status operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsUpdateEnrollmentAccountAlertStatusAsync(String apiVersion, String billingAccountId, String enrollmentAccountId, String alertId, Alert parameters, final ApiCallback<Alert> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsUpdateEnrollmentAccountAlertStatusValidateBeforeCall(apiVersion, billingAccountId, enrollmentAccountId, alertId, parameters, _callback);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsUpdateManagementGroupAlertStatus
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param managementGroupId Management Group ID (required)
     * @param alertId Alert ID. (required)
     * @param parameters Parameters supplied to the update alerts status operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsUpdateManagementGroupAlertStatusCall(String apiVersion, String managementGroupId, String alertId, Alert parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.CostManagement/alerts/{alertId}/UpdateStatus"
            .replace("{" + "managementGroupId" + "}", localVarApiClient.escapeString(managementGroupId.toString()))
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsUpdateManagementGroupAlertStatusValidateBeforeCall(String apiVersion, String managementGroupId, String alertId, Alert parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsUpdateManagementGroupAlertStatus(Async)");
        }

        // verify the required parameter 'managementGroupId' is set
        if (managementGroupId == null) {
            throw new ApiException("Missing the required parameter 'managementGroupId' when calling alertsUpdateManagementGroupAlertStatus(Async)");
        }

        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsUpdateManagementGroupAlertStatus(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling alertsUpdateManagementGroupAlertStatus(Async)");
        }

        return alertsUpdateManagementGroupAlertStatusCall(apiVersion, managementGroupId, alertId, parameters, _callback);

    }

    /**
     * 
     * Update alerts status for management group.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param managementGroupId Management Group ID (required)
     * @param alertId Alert ID. (required)
     * @param parameters Parameters supplied to the update alerts status operation. (required)
     * @return Alert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Alert alertsUpdateManagementGroupAlertStatus(String apiVersion, String managementGroupId, String alertId, Alert parameters) throws ApiException {
        ApiResponse<Alert> localVarResp = alertsUpdateManagementGroupAlertStatusWithHttpInfo(apiVersion, managementGroupId, alertId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update alerts status for management group.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param managementGroupId Management Group ID (required)
     * @param alertId Alert ID. (required)
     * @param parameters Parameters supplied to the update alerts status operation. (required)
     * @return ApiResponse&lt;Alert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Alert> alertsUpdateManagementGroupAlertStatusWithHttpInfo(String apiVersion, String managementGroupId, String alertId, Alert parameters) throws ApiException {
        okhttp3.Call localVarCall = alertsUpdateManagementGroupAlertStatusValidateBeforeCall(apiVersion, managementGroupId, alertId, parameters, null);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update alerts status for management group.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param managementGroupId Management Group ID (required)
     * @param alertId Alert ID. (required)
     * @param parameters Parameters supplied to the update alerts status operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsUpdateManagementGroupAlertStatusAsync(String apiVersion, String managementGroupId, String alertId, Alert parameters, final ApiCallback<Alert> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsUpdateManagementGroupAlertStatusValidateBeforeCall(apiVersion, managementGroupId, alertId, parameters, _callback);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsUpdateResourceGroupNameAlertStatus
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param alertId Alert ID. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param parameters Parameters supplied to the update alerts status operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsUpdateResourceGroupNameAlertStatusCall(String subscriptionId, String resourceGroupName, String alertId, String apiVersion, Alert parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CostManagement/alerts/{alertId}/updateStatus"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsUpdateResourceGroupNameAlertStatusValidateBeforeCall(String subscriptionId, String resourceGroupName, String alertId, String apiVersion, Alert parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertsUpdateResourceGroupNameAlertStatus(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling alertsUpdateResourceGroupNameAlertStatus(Async)");
        }

        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsUpdateResourceGroupNameAlertStatus(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsUpdateResourceGroupNameAlertStatus(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling alertsUpdateResourceGroupNameAlertStatus(Async)");
        }

        return alertsUpdateResourceGroupNameAlertStatusCall(subscriptionId, resourceGroupName, alertId, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Update alerts status for a resource group under a subscription.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param alertId Alert ID. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param parameters Parameters supplied to the update alerts status operation. (required)
     * @return Alert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Alert alertsUpdateResourceGroupNameAlertStatus(String subscriptionId, String resourceGroupName, String alertId, String apiVersion, Alert parameters) throws ApiException {
        ApiResponse<Alert> localVarResp = alertsUpdateResourceGroupNameAlertStatusWithHttpInfo(subscriptionId, resourceGroupName, alertId, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update alerts status for a resource group under a subscription.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param alertId Alert ID. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param parameters Parameters supplied to the update alerts status operation. (required)
     * @return ApiResponse&lt;Alert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Alert> alertsUpdateResourceGroupNameAlertStatusWithHttpInfo(String subscriptionId, String resourceGroupName, String alertId, String apiVersion, Alert parameters) throws ApiException {
        okhttp3.Call localVarCall = alertsUpdateResourceGroupNameAlertStatusValidateBeforeCall(subscriptionId, resourceGroupName, alertId, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update alerts status for a resource group under a subscription.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Azure Resource Group Name. (required)
     * @param alertId Alert ID. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param parameters Parameters supplied to the update alerts status operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsUpdateResourceGroupNameAlertStatusAsync(String subscriptionId, String resourceGroupName, String alertId, String apiVersion, Alert parameters, final ApiCallback<Alert> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsUpdateResourceGroupNameAlertStatusValidateBeforeCall(subscriptionId, resourceGroupName, alertId, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsUpdateSubscriptionAlertStatus
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param alertId Alert ID. (required)
     * @param parameters Parameters supplied to the update alerts status operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsUpdateSubscriptionAlertStatusCall(String apiVersion, String subscriptionId, String alertId, Alert parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.CostManagement/alerts/{alertId}/updateStatus"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsUpdateSubscriptionAlertStatusValidateBeforeCall(String apiVersion, String subscriptionId, String alertId, Alert parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsUpdateSubscriptionAlertStatus(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertsUpdateSubscriptionAlertStatus(Async)");
        }

        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsUpdateSubscriptionAlertStatus(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling alertsUpdateSubscriptionAlertStatus(Async)");
        }

        return alertsUpdateSubscriptionAlertStatusCall(apiVersion, subscriptionId, alertId, parameters, _callback);

    }

    /**
     * 
     * Update alerts status for a subscription.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param alertId Alert ID. (required)
     * @param parameters Parameters supplied to the update alerts status operation. (required)
     * @return Alert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Alert alertsUpdateSubscriptionAlertStatus(String apiVersion, String subscriptionId, String alertId, Alert parameters) throws ApiException {
        ApiResponse<Alert> localVarResp = alertsUpdateSubscriptionAlertStatusWithHttpInfo(apiVersion, subscriptionId, alertId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update alerts status for a subscription.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param alertId Alert ID. (required)
     * @param parameters Parameters supplied to the update alerts status operation. (required)
     * @return ApiResponse&lt;Alert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Alert> alertsUpdateSubscriptionAlertStatusWithHttpInfo(String apiVersion, String subscriptionId, String alertId, Alert parameters) throws ApiException {
        okhttp3.Call localVarCall = alertsUpdateSubscriptionAlertStatusValidateBeforeCall(apiVersion, subscriptionId, alertId, parameters, null);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update alerts status for a subscription.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-08-01-preview. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param alertId Alert ID. (required)
     * @param parameters Parameters supplied to the update alerts status operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsUpdateSubscriptionAlertStatusAsync(String apiVersion, String subscriptionId, String alertId, Alert parameters, final ApiCallback<Alert> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsUpdateSubscriptionAlertStatusValidateBeforeCall(apiVersion, subscriptionId, alertId, parameters, _callback);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
