/*
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.AlertDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of an Alert.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:40:00.053776-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlertProperties {
  public static final String SERIALIZED_NAME_CLOSE_TIME = "closeTime";
  @SerializedName(SERIALIZED_NAME_CLOSE_TIME)
  private OffsetDateTime closeTime;

  public static final String SERIALIZED_NAME_COST_ENTITY_ID = "costEntityId";
  @SerializedName(SERIALIZED_NAME_COST_ENTITY_ID)
  private String costEntityId;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_DEFINITION = "definition";
  @SerializedName(SERIALIZED_NAME_DEFINITION)
  private AlertDefinition definition;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private Map<String, String> details = new HashMap<>();

  public static final String SERIALIZED_NAME_MODIFICATION_TIME = "modificationTime";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_TIME)
  private OffsetDateTime modificationTime;

  public static final String SERIALIZED_NAME_MODIFICATION_USERNAME = "modificationUsername";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_USERNAME)
  private String modificationUsername;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  /**
   * The source of an Alert
   */
  @JsonAdapter(SourceEnum.Adapter.class)
  public enum SourceEnum {
    PRESET("Preset"),
    
    USER("User");

    private String value;

    SourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceEnum fromValue(String value) {
      for (SourceEnum b : SourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private SourceEnum source;

  /**
   * The current status of the alert.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("Active"),
    
    OVERRIDDEN("Overridden"),
    
    RESOLVED("Resolved"),
    
    DISMISSED("Dismissed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_STATUS_MODIFICATION_TIME = "statusModificationTime";
  @SerializedName(SERIALIZED_NAME_STATUS_MODIFICATION_TIME)
  private OffsetDateTime statusModificationTime;

  public AlertProperties() {
  }

  public AlertProperties(
     OffsetDateTime closeTime, 
     String costEntityId, 
     OffsetDateTime creationTime, 
     String description, 
     Map<String, String> details, 
     OffsetDateTime modificationTime, 
     String modificationUsername, 
     String scope, 
     SourceEnum source, 
     OffsetDateTime statusModificationTime
  ) {
    this();
    this.closeTime = closeTime;
    this.costEntityId = costEntityId;
    this.creationTime = creationTime;
    this.description = description;
    this.details = details;
    this.modificationTime = modificationTime;
    this.modificationUsername = modificationUsername;
    this.scope = scope;
    this.source = source;
    this.statusModificationTime = statusModificationTime;
  }

  /**
   * The time when the alert was closed (resolved / overridden).
   * @return closeTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCloseTime() {
    return closeTime;
  }



  /**
   * The id of the creating cost-entity (budget, invoice, credit).
   * @return costEntityId
   */
  @javax.annotation.Nullable
  public String getCostEntityId() {
    return costEntityId;
  }



  /**
   * The time when the alert was created.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }



  public AlertProperties definition(AlertDefinition definition) {
    this.definition = definition;
    return this;
  }

  /**
   * Get definition
   * @return definition
   */
  @javax.annotation.Nullable
  public AlertDefinition getDefinition() {
    return definition;
  }

  public void setDefinition(AlertDefinition definition) {
    this.definition = definition;
  }


  /**
   * Description of an alert.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * Specific details of an alert - key-value dictionary.
   * @return details
   */
  @javax.annotation.Nullable
  public Map<String, String> getDetails() {
    return details;
  }



  /**
   * The current status when alert was modified.
   * @return modificationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModificationTime() {
    return modificationTime;
  }



  /**
   * The username who modified the alert.
   * @return modificationUsername
   */
  @javax.annotation.Nullable
  public String getModificationUsername() {
    return modificationUsername;
  }



  /**
   * The scope of an alert.
   * @return scope
   */
  @javax.annotation.Nullable
  public String getScope() {
    return scope;
  }



  /**
   * The source of an Alert
   * @return source
   */
  @javax.annotation.Nullable
  public SourceEnum getSource() {
    return source;
  }



  public AlertProperties status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The current status of the alert.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  /**
   * The current status when alert status was modified.
   * @return statusModificationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStatusModificationTime() {
    return statusModificationTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlertProperties alertProperties = (AlertProperties) o;
    return Objects.equals(this.closeTime, alertProperties.closeTime) &&
        Objects.equals(this.costEntityId, alertProperties.costEntityId) &&
        Objects.equals(this.creationTime, alertProperties.creationTime) &&
        Objects.equals(this.definition, alertProperties.definition) &&
        Objects.equals(this.description, alertProperties.description) &&
        Objects.equals(this.details, alertProperties.details) &&
        Objects.equals(this.modificationTime, alertProperties.modificationTime) &&
        Objects.equals(this.modificationUsername, alertProperties.modificationUsername) &&
        Objects.equals(this.scope, alertProperties.scope) &&
        Objects.equals(this.source, alertProperties.source) &&
        Objects.equals(this.status, alertProperties.status) &&
        Objects.equals(this.statusModificationTime, alertProperties.statusModificationTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(closeTime, costEntityId, creationTime, definition, description, details, modificationTime, modificationUsername, scope, source, status, statusModificationTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlertProperties {\n");
    sb.append("    closeTime: ").append(toIndentedString(closeTime)).append("\n");
    sb.append("    costEntityId: ").append(toIndentedString(costEntityId)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    definition: ").append(toIndentedString(definition)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    modificationTime: ").append(toIndentedString(modificationTime)).append("\n");
    sb.append("    modificationUsername: ").append(toIndentedString(modificationUsername)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusModificationTime: ").append(toIndentedString(statusModificationTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("closeTime");
    openapiFields.add("costEntityId");
    openapiFields.add("creationTime");
    openapiFields.add("definition");
    openapiFields.add("description");
    openapiFields.add("details");
    openapiFields.add("modificationTime");
    openapiFields.add("modificationUsername");
    openapiFields.add("scope");
    openapiFields.add("source");
    openapiFields.add("status");
    openapiFields.add("statusModificationTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlertProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlertProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlertProperties is not found in the empty JSON string", AlertProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlertProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlertProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("costEntityId") != null && !jsonObj.get("costEntityId").isJsonNull()) && !jsonObj.get("costEntityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costEntityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costEntityId").toString()));
      }
      // validate the optional field `definition`
      if (jsonObj.get("definition") != null && !jsonObj.get("definition").isJsonNull()) {
        AlertDefinition.validateJsonElement(jsonObj.get("definition"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("modificationUsername") != null && !jsonObj.get("modificationUsername").isJsonNull()) && !jsonObj.get("modificationUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modificationUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modificationUsername").toString()));
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        SourceEnum.validateJsonElement(jsonObj.get("source"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlertProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlertProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlertProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlertProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<AlertProperties>() {
           @Override
           public void write(JsonWriter out, AlertProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlertProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlertProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlertProperties
   * @throws IOException if the JSON string is invalid with respect to AlertProperties
   */
  public static AlertProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlertProperties.class);
  }

  /**
   * Convert an instance of AlertProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

