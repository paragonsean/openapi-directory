# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_dataset import ReportDataset
from openapi_server.models.report_time_period import ReportTimePeriod
from openapi_server import util


class ReportDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset: ReportDataset=None, time_period: ReportTimePeriod=None, timeframe: str=None, type: str=None):
        """ReportDefinition - a model defined in OpenAPI

        :param dataset: The dataset of this ReportDefinition.
        :param time_period: The time_period of this ReportDefinition.
        :param timeframe: The timeframe of this ReportDefinition.
        :param type: The type of this ReportDefinition.
        """
        self.openapi_types = {
            'dataset': ReportDataset,
            'time_period': ReportTimePeriod,
            'timeframe': str,
            'type': str
        }

        self.attribute_map = {
            'dataset': 'dataset',
            'time_period': 'timePeriod',
            'timeframe': 'timeframe',
            'type': 'type'
        }

        self._dataset = dataset
        self._time_period = time_period
        self._timeframe = timeframe
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportDefinition of this ReportDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset(self):
        """Gets the dataset of this ReportDefinition.


        :return: The dataset of this ReportDefinition.
        :rtype: ReportDataset
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this ReportDefinition.


        :param dataset: The dataset of this ReportDefinition.
        :type dataset: ReportDataset
        """

        self._dataset = dataset

    @property
    def time_period(self):
        """Gets the time_period of this ReportDefinition.


        :return: The time_period of this ReportDefinition.
        :rtype: ReportTimePeriod
        """
        return self._time_period

    @time_period.setter
    def time_period(self, time_period):
        """Sets the time_period of this ReportDefinition.


        :param time_period: The time_period of this ReportDefinition.
        :type time_period: ReportTimePeriod
        """

        self._time_period = time_period

    @property
    def timeframe(self):
        """Gets the timeframe of this ReportDefinition.

        The time frame for pulling data for the report. If custom, then a specific time period must be provided.

        :return: The timeframe of this ReportDefinition.
        :rtype: str
        """
        return self._timeframe

    @timeframe.setter
    def timeframe(self, timeframe):
        """Sets the timeframe of this ReportDefinition.

        The time frame for pulling data for the report. If custom, then a specific time period must be provided.

        :param timeframe: The timeframe of this ReportDefinition.
        :type timeframe: str
        """
        allowed_values = ["WeekToDate", "MonthToDate", "Custom"]  # noqa: E501
        if timeframe not in allowed_values:
            raise ValueError(
                "Invalid value for `timeframe` ({0}), must be one of {1}"
                .format(timeframe, allowed_values)
            )

        self._timeframe = timeframe

    @property
    def type(self):
        """Gets the type of this ReportDefinition.

        The type of the report.

        :return: The type of this ReportDefinition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ReportDefinition.

        The type of the report.

        :param type: The type of this ReportDefinition.
        :type type: str
        """
        allowed_values = ["Usage"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
