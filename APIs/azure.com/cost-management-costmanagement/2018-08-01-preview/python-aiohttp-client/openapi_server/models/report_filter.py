# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_comparison_expression import ReportComparisonExpression
from openapi_server import util


class ReportFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _and: List[ReportFilter]=None, dimension: ReportComparisonExpression=None, _not: ReportFilter=None, _or: List[ReportFilter]=None, tag: ReportComparisonExpression=None):
        """ReportFilter - a model defined in OpenAPI

        :param _and: The _and of this ReportFilter.
        :param dimension: The dimension of this ReportFilter.
        :param _not: The _not of this ReportFilter.
        :param _or: The _or of this ReportFilter.
        :param tag: The tag of this ReportFilter.
        """
        self.openapi_types = {
            '_and': List[ReportFilter],
            'dimension': ReportComparisonExpression,
            '_not': ReportFilter,
            '_or': List[ReportFilter],
            'tag': ReportComparisonExpression
        }

        self.attribute_map = {
            '_and': 'and',
            'dimension': 'dimension',
            '_not': 'not',
            '_or': 'or',
            'tag': 'tag'
        }

        self.__and = _and
        self._dimension = dimension
        self.__not = _not
        self.__or = _or
        self._tag = tag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportFilter of this ReportFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _and(self):
        """Gets the _and of this ReportFilter.

        The logical \"AND\" expression. Must have at least 2 items.

        :return: The _and of this ReportFilter.
        :rtype: List[ReportFilter]
        """
        return self.__and

    @_and.setter
    def _and(self, _and):
        """Sets the _and of this ReportFilter.

        The logical \"AND\" expression. Must have at least 2 items.

        :param _and: The _and of this ReportFilter.
        :type _and: List[ReportFilter]
        """
        if _and is not None and len(_and) < 2:
            raise ValueError("Invalid value for `_and`, number of items must be greater than or equal to `2`")

        self.__and = _and

    @property
    def dimension(self):
        """Gets the dimension of this ReportFilter.


        :return: The dimension of this ReportFilter.
        :rtype: ReportComparisonExpression
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """Sets the dimension of this ReportFilter.


        :param dimension: The dimension of this ReportFilter.
        :type dimension: ReportComparisonExpression
        """

        self._dimension = dimension

    @property
    def _not(self):
        """Gets the _not of this ReportFilter.


        :return: The _not of this ReportFilter.
        :rtype: ReportFilter
        """
        return self.__not

    @_not.setter
    def _not(self, _not):
        """Sets the _not of this ReportFilter.


        :param _not: The _not of this ReportFilter.
        :type _not: ReportFilter
        """

        self.__not = _not

    @property
    def _or(self):
        """Gets the _or of this ReportFilter.

        The logical \"OR\" expression. Must have at least 2 items.

        :return: The _or of this ReportFilter.
        :rtype: List[ReportFilter]
        """
        return self.__or

    @_or.setter
    def _or(self, _or):
        """Sets the _or of this ReportFilter.

        The logical \"OR\" expression. Must have at least 2 items.

        :param _or: The _or of this ReportFilter.
        :type _or: List[ReportFilter]
        """
        if _or is not None and len(_or) < 2:
            raise ValueError("Invalid value for `_or`, number of items must be greater than or equal to `2`")

        self.__or = _or

    @property
    def tag(self):
        """Gets the tag of this ReportFilter.


        :return: The tag of this ReportFilter.
        :rtype: ReportComparisonExpression
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this ReportFilter.


        :param tag: The tag of this ReportFilter.
        :type tag: ReportComparisonExpression
        """

        self._tag = tag
