# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connector_collection_info import ConnectorCollectionInfo
from openapi_server import util


class ConnectorProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collection: ConnectorCollectionInfo=None, created_on: datetime=None, credentials_key: str=None, credentials_secret: str=None, display_name: str=None, modified_on: datetime=None, provider_account_id: str=None, report_id: str=None, status: str=None):
        """ConnectorProperties - a model defined in OpenAPI

        :param collection: The collection of this ConnectorProperties.
        :param created_on: The created_on of this ConnectorProperties.
        :param credentials_key: The credentials_key of this ConnectorProperties.
        :param credentials_secret: The credentials_secret of this ConnectorProperties.
        :param display_name: The display_name of this ConnectorProperties.
        :param modified_on: The modified_on of this ConnectorProperties.
        :param provider_account_id: The provider_account_id of this ConnectorProperties.
        :param report_id: The report_id of this ConnectorProperties.
        :param status: The status of this ConnectorProperties.
        """
        self.openapi_types = {
            'collection': ConnectorCollectionInfo,
            'created_on': datetime,
            'credentials_key': str,
            'credentials_secret': str,
            'display_name': str,
            'modified_on': datetime,
            'provider_account_id': str,
            'report_id': str,
            'status': str
        }

        self.attribute_map = {
            'collection': 'collection',
            'created_on': 'createdOn',
            'credentials_key': 'credentialsKey',
            'credentials_secret': 'credentialsSecret',
            'display_name': 'displayName',
            'modified_on': 'modifiedOn',
            'provider_account_id': 'providerAccountId',
            'report_id': 'reportId',
            'status': 'status'
        }

        self._collection = collection
        self._created_on = created_on
        self._credentials_key = credentials_key
        self._credentials_secret = credentials_secret
        self._display_name = display_name
        self._modified_on = modified_on
        self._provider_account_id = provider_account_id
        self._report_id = report_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectorProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectorProperties of this ConnectorProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collection(self):
        """Gets the collection of this ConnectorProperties.


        :return: The collection of this ConnectorProperties.
        :rtype: ConnectorCollectionInfo
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this ConnectorProperties.


        :param collection: The collection of this ConnectorProperties.
        :type collection: ConnectorCollectionInfo
        """

        self._collection = collection

    @property
    def created_on(self):
        """Gets the created_on of this ConnectorProperties.

        Connector definition creation datetime

        :return: The created_on of this ConnectorProperties.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this ConnectorProperties.

        Connector definition creation datetime

        :param created_on: The created_on of this ConnectorProperties.
        :type created_on: datetime
        """

        self._created_on = created_on

    @property
    def credentials_key(self):
        """Gets the credentials_key of this ConnectorProperties.

        Credentials authentication key (eg AWS ARN)

        :return: The credentials_key of this ConnectorProperties.
        :rtype: str
        """
        return self._credentials_key

    @credentials_key.setter
    def credentials_key(self, credentials_key):
        """Sets the credentials_key of this ConnectorProperties.

        Credentials authentication key (eg AWS ARN)

        :param credentials_key: The credentials_key of this ConnectorProperties.
        :type credentials_key: str
        """

        self._credentials_key = credentials_key

    @property
    def credentials_secret(self):
        """Gets the credentials_secret of this ConnectorProperties.

        Credentials secret (eg AWS ExternalId)

        :return: The credentials_secret of this ConnectorProperties.
        :rtype: str
        """
        return self._credentials_secret

    @credentials_secret.setter
    def credentials_secret(self, credentials_secret):
        """Sets the credentials_secret of this ConnectorProperties.

        Credentials secret (eg AWS ExternalId)

        :param credentials_secret: The credentials_secret of this ConnectorProperties.
        :type credentials_secret: str
        """

        self._credentials_secret = credentials_secret

    @property
    def display_name(self):
        """Gets the display_name of this ConnectorProperties.

        Connector DisplayName (defaults to Name)

        :return: The display_name of this ConnectorProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ConnectorProperties.

        Connector DisplayName (defaults to Name)

        :param display_name: The display_name of this ConnectorProperties.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def modified_on(self):
        """Gets the modified_on of this ConnectorProperties.

        Connector last modified datetime

        :return: The modified_on of this ConnectorProperties.
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this ConnectorProperties.

        Connector last modified datetime

        :param modified_on: The modified_on of this ConnectorProperties.
        :type modified_on: datetime
        """

        self._modified_on = modified_on

    @property
    def provider_account_id(self):
        """Gets the provider_account_id of this ConnectorProperties.

        Connector providerAccountId (determined from credentials)

        :return: The provider_account_id of this ConnectorProperties.
        :rtype: str
        """
        return self._provider_account_id

    @provider_account_id.setter
    def provider_account_id(self, provider_account_id):
        """Sets the provider_account_id of this ConnectorProperties.

        Connector providerAccountId (determined from credentials)

        :param provider_account_id: The provider_account_id of this ConnectorProperties.
        :type provider_account_id: str
        """

        self._provider_account_id = provider_account_id

    @property
    def report_id(self):
        """Gets the report_id of this ConnectorProperties.

        Identifying source report. (For AWS this is a CUR report name, defined with Daily and with Resources)

        :return: The report_id of this ConnectorProperties.
        :rtype: str
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this ConnectorProperties.

        Identifying source report. (For AWS this is a CUR report name, defined with Daily and with Resources)

        :param report_id: The report_id of this ConnectorProperties.
        :type report_id: str
        """

        self._report_id = report_id

    @property
    def status(self):
        """Gets the status of this ConnectorProperties.

        Connector status

        :return: The status of this ConnectorProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ConnectorProperties.

        Connector status

        :param status: The status of this ConnectorProperties.
        :type status: str
        """
        allowed_values = ["active", "error", "suspended"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
