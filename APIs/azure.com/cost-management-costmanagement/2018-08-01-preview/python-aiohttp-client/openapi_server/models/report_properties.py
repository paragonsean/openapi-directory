# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_definition import ReportDefinition
from openapi_server.models.report_delivery_info import ReportDeliveryInfo
from openapi_server.models.report_schedule import ReportSchedule
from openapi_server import util


class ReportProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, schedule: ReportSchedule=None, definition: ReportDefinition=None, delivery_info: ReportDeliveryInfo=None, format: str=None):
        """ReportProperties - a model defined in OpenAPI

        :param schedule: The schedule of this ReportProperties.
        :param definition: The definition of this ReportProperties.
        :param delivery_info: The delivery_info of this ReportProperties.
        :param format: The format of this ReportProperties.
        """
        self.openapi_types = {
            'schedule': ReportSchedule,
            'definition': ReportDefinition,
            'delivery_info': ReportDeliveryInfo,
            'format': str
        }

        self.attribute_map = {
            'schedule': 'schedule',
            'definition': 'definition',
            'delivery_info': 'deliveryInfo',
            'format': 'format'
        }

        self._schedule = schedule
        self._definition = definition
        self._delivery_info = delivery_info
        self._format = format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportProperties of this ReportProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def schedule(self):
        """Gets the schedule of this ReportProperties.


        :return: The schedule of this ReportProperties.
        :rtype: ReportSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this ReportProperties.


        :param schedule: The schedule of this ReportProperties.
        :type schedule: ReportSchedule
        """

        self._schedule = schedule

    @property
    def definition(self):
        """Gets the definition of this ReportProperties.


        :return: The definition of this ReportProperties.
        :rtype: ReportDefinition
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this ReportProperties.


        :param definition: The definition of this ReportProperties.
        :type definition: ReportDefinition
        """
        if definition is None:
            raise ValueError("Invalid value for `definition`, must not be `None`")

        self._definition = definition

    @property
    def delivery_info(self):
        """Gets the delivery_info of this ReportProperties.


        :return: The delivery_info of this ReportProperties.
        :rtype: ReportDeliveryInfo
        """
        return self._delivery_info

    @delivery_info.setter
    def delivery_info(self, delivery_info):
        """Sets the delivery_info of this ReportProperties.


        :param delivery_info: The delivery_info of this ReportProperties.
        :type delivery_info: ReportDeliveryInfo
        """
        if delivery_info is None:
            raise ValueError("Invalid value for `delivery_info`, must not be `None`")

        self._delivery_info = delivery_info

    @property
    def format(self):
        """Gets the format of this ReportProperties.

        The format of the report being delivered.

        :return: The format of this ReportProperties.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ReportProperties.

        The format of the report being delivered.

        :param format: The format of this ReportProperties.
        :type format: str
        """
        allowed_values = ["Csv"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format
