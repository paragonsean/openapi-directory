# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_column_type import ReportColumnType
from openapi_server import util


class ReportGrouping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, type: ReportColumnType=None):
        """ReportGrouping - a model defined in OpenAPI

        :param name: The name of this ReportGrouping.
        :param type: The type of this ReportGrouping.
        """
        self.openapi_types = {
            'name': str,
            'type': ReportColumnType
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type'
        }

        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportGrouping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportGrouping of this ReportGrouping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ReportGrouping.

        The name of the column to group.

        :return: The name of this ReportGrouping.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReportGrouping.

        The name of the column to group.

        :param name: The name of this ReportGrouping.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this ReportGrouping.


        :return: The type of this ReportGrouping.
        :rtype: ReportColumnType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ReportGrouping.


        :param type: The type of this ReportGrouping.
        :type type: ReportColumnType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
