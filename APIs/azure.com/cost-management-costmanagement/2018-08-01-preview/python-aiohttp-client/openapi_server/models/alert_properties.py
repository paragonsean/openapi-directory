# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alert_definition import AlertDefinition
from openapi_server import util


class AlertProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, close_time: datetime=None, cost_entity_id: str=None, creation_time: datetime=None, definition: AlertDefinition=None, description: str=None, details: Dict[str, str]=None, modification_time: datetime=None, modification_username: str=None, scope: str=None, source: str=None, status: str=None, status_modification_time: datetime=None):
        """AlertProperties - a model defined in OpenAPI

        :param close_time: The close_time of this AlertProperties.
        :param cost_entity_id: The cost_entity_id of this AlertProperties.
        :param creation_time: The creation_time of this AlertProperties.
        :param definition: The definition of this AlertProperties.
        :param description: The description of this AlertProperties.
        :param details: The details of this AlertProperties.
        :param modification_time: The modification_time of this AlertProperties.
        :param modification_username: The modification_username of this AlertProperties.
        :param scope: The scope of this AlertProperties.
        :param source: The source of this AlertProperties.
        :param status: The status of this AlertProperties.
        :param status_modification_time: The status_modification_time of this AlertProperties.
        """
        self.openapi_types = {
            'close_time': datetime,
            'cost_entity_id': str,
            'creation_time': datetime,
            'definition': AlertDefinition,
            'description': str,
            'details': Dict[str, str],
            'modification_time': datetime,
            'modification_username': str,
            'scope': str,
            'source': str,
            'status': str,
            'status_modification_time': datetime
        }

        self.attribute_map = {
            'close_time': 'closeTime',
            'cost_entity_id': 'costEntityId',
            'creation_time': 'creationTime',
            'definition': 'definition',
            'description': 'description',
            'details': 'details',
            'modification_time': 'modificationTime',
            'modification_username': 'modificationUsername',
            'scope': 'scope',
            'source': 'source',
            'status': 'status',
            'status_modification_time': 'statusModificationTime'
        }

        self._close_time = close_time
        self._cost_entity_id = cost_entity_id
        self._creation_time = creation_time
        self._definition = definition
        self._description = description
        self._details = details
        self._modification_time = modification_time
        self._modification_username = modification_username
        self._scope = scope
        self._source = source
        self._status = status
        self._status_modification_time = status_modification_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlertProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlertProperties of this AlertProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def close_time(self):
        """Gets the close_time of this AlertProperties.

        The time when the alert was closed (resolved / overridden).

        :return: The close_time of this AlertProperties.
        :rtype: datetime
        """
        return self._close_time

    @close_time.setter
    def close_time(self, close_time):
        """Sets the close_time of this AlertProperties.

        The time when the alert was closed (resolved / overridden).

        :param close_time: The close_time of this AlertProperties.
        :type close_time: datetime
        """

        self._close_time = close_time

    @property
    def cost_entity_id(self):
        """Gets the cost_entity_id of this AlertProperties.

        The id of the creating cost-entity (budget, invoice, credit).

        :return: The cost_entity_id of this AlertProperties.
        :rtype: str
        """
        return self._cost_entity_id

    @cost_entity_id.setter
    def cost_entity_id(self, cost_entity_id):
        """Sets the cost_entity_id of this AlertProperties.

        The id of the creating cost-entity (budget, invoice, credit).

        :param cost_entity_id: The cost_entity_id of this AlertProperties.
        :type cost_entity_id: str
        """

        self._cost_entity_id = cost_entity_id

    @property
    def creation_time(self):
        """Gets the creation_time of this AlertProperties.

        The time when the alert was created.

        :return: The creation_time of this AlertProperties.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this AlertProperties.

        The time when the alert was created.

        :param creation_time: The creation_time of this AlertProperties.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def definition(self):
        """Gets the definition of this AlertProperties.


        :return: The definition of this AlertProperties.
        :rtype: AlertDefinition
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this AlertProperties.


        :param definition: The definition of this AlertProperties.
        :type definition: AlertDefinition
        """

        self._definition = definition

    @property
    def description(self):
        """Gets the description of this AlertProperties.

        Description of an alert.

        :return: The description of this AlertProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AlertProperties.

        Description of an alert.

        :param description: The description of this AlertProperties.
        :type description: str
        """

        self._description = description

    @property
    def details(self):
        """Gets the details of this AlertProperties.

        Specific details of an alert - key-value dictionary.

        :return: The details of this AlertProperties.
        :rtype: Dict[str, str]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this AlertProperties.

        Specific details of an alert - key-value dictionary.

        :param details: The details of this AlertProperties.
        :type details: Dict[str, str]
        """

        self._details = details

    @property
    def modification_time(self):
        """Gets the modification_time of this AlertProperties.

        The current status when alert was modified.

        :return: The modification_time of this AlertProperties.
        :rtype: datetime
        """
        return self._modification_time

    @modification_time.setter
    def modification_time(self, modification_time):
        """Sets the modification_time of this AlertProperties.

        The current status when alert was modified.

        :param modification_time: The modification_time of this AlertProperties.
        :type modification_time: datetime
        """

        self._modification_time = modification_time

    @property
    def modification_username(self):
        """Gets the modification_username of this AlertProperties.

        The username who modified the alert.

        :return: The modification_username of this AlertProperties.
        :rtype: str
        """
        return self._modification_username

    @modification_username.setter
    def modification_username(self, modification_username):
        """Sets the modification_username of this AlertProperties.

        The username who modified the alert.

        :param modification_username: The modification_username of this AlertProperties.
        :type modification_username: str
        """

        self._modification_username = modification_username

    @property
    def scope(self):
        """Gets the scope of this AlertProperties.

        The scope of an alert.

        :return: The scope of this AlertProperties.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this AlertProperties.

        The scope of an alert.

        :param scope: The scope of this AlertProperties.
        :type scope: str
        """

        self._scope = scope

    @property
    def source(self):
        """Gets the source of this AlertProperties.

        The source of an Alert

        :return: The source of this AlertProperties.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this AlertProperties.

        The source of an Alert

        :param source: The source of this AlertProperties.
        :type source: str
        """
        allowed_values = ["Preset", "User"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def status(self):
        """Gets the status of this AlertProperties.

        The current status of the alert.

        :return: The status of this AlertProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AlertProperties.

        The current status of the alert.

        :param status: The status of this AlertProperties.
        :type status: str
        """
        allowed_values = ["Active", "Overridden", "Resolved", "Dismissed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_modification_time(self):
        """Gets the status_modification_time of this AlertProperties.

        The current status when alert status was modified.

        :return: The status_modification_time of this AlertProperties.
        :rtype: datetime
        """
        return self._status_modification_time

    @status_modification_time.setter
    def status_modification_time(self, status_modification_time):
        """Sets the status_modification_time of this AlertProperties.

        The current status when alert status was modified.

        :param status_modification_time: The status_modification_time of this AlertProperties.
        :type status_modification_time: datetime
        """

        self._status_modification_time = status_modification_time
