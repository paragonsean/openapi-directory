# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_recurrence_period import ReportRecurrencePeriod
from openapi_server import util


class ReportSchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, recurrence: str=None, recurrence_period: ReportRecurrencePeriod=None, status: str=None):
        """ReportSchedule - a model defined in OpenAPI

        :param recurrence: The recurrence of this ReportSchedule.
        :param recurrence_period: The recurrence_period of this ReportSchedule.
        :param status: The status of this ReportSchedule.
        """
        self.openapi_types = {
            'recurrence': str,
            'recurrence_period': ReportRecurrencePeriod,
            'status': str
        }

        self.attribute_map = {
            'recurrence': 'recurrence',
            'recurrence_period': 'recurrencePeriod',
            'status': 'status'
        }

        self._recurrence = recurrence
        self._recurrence_period = recurrence_period
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportSchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportSchedule of this ReportSchedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recurrence(self):
        """Gets the recurrence of this ReportSchedule.

        The schedule recurrence.

        :return: The recurrence of this ReportSchedule.
        :rtype: str
        """
        return self._recurrence

    @recurrence.setter
    def recurrence(self, recurrence):
        """Sets the recurrence of this ReportSchedule.

        The schedule recurrence.

        :param recurrence: The recurrence of this ReportSchedule.
        :type recurrence: str
        """
        allowed_values = ["Daily", "Weekly", "Monthly", "Annually"]  # noqa: E501
        if recurrence not in allowed_values:
            raise ValueError(
                "Invalid value for `recurrence` ({0}), must be one of {1}"
                .format(recurrence, allowed_values)
            )

        self._recurrence = recurrence

    @property
    def recurrence_period(self):
        """Gets the recurrence_period of this ReportSchedule.


        :return: The recurrence_period of this ReportSchedule.
        :rtype: ReportRecurrencePeriod
        """
        return self._recurrence_period

    @recurrence_period.setter
    def recurrence_period(self, recurrence_period):
        """Sets the recurrence_period of this ReportSchedule.


        :param recurrence_period: The recurrence_period of this ReportSchedule.
        :type recurrence_period: ReportRecurrencePeriod
        """

        self._recurrence_period = recurrence_period

    @property
    def status(self):
        """Gets the status of this ReportSchedule.

        The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.

        :return: The status of this ReportSchedule.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReportSchedule.

        The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.

        :param status: The status of this ReportSchedule.
        :type status: str
        """
        allowed_values = ["Active", "Inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
