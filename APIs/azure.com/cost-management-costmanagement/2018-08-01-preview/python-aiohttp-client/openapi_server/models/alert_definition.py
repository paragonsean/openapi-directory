# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AlertDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, criteria: str=None, type: str=None):
        """AlertDefinition - a model defined in OpenAPI

        :param category: The category of this AlertDefinition.
        :param criteria: The criteria of this AlertDefinition.
        :param type: The type of this AlertDefinition.
        """
        self.openapi_types = {
            'category': str,
            'criteria': str,
            'type': str
        }

        self.attribute_map = {
            'category': 'category',
            'criteria': 'criteria',
            'type': 'type'
        }

        self._category = category
        self._criteria = criteria
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlertDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlertDefinition of this AlertDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this AlertDefinition.

        Category of the alert.

        :return: The category of this AlertDefinition.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this AlertDefinition.

        Category of the alert.

        :param category: The category of this AlertDefinition.
        :type category: str
        """
        allowed_values = ["Cost", "Usage", "Billing"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def criteria(self):
        """Gets the criteria of this AlertDefinition.

        Criteria (condition) of the alert.

        :return: The criteria of this AlertDefinition.
        :rtype: str
        """
        return self._criteria

    @criteria.setter
    def criteria(self, criteria):
        """Sets the criteria of this AlertDefinition.

        Criteria (condition) of the alert.

        :param criteria: The criteria of this AlertDefinition.
        :type criteria: str
        """
        allowed_values = ["CostThresholdExceeded", "UsageThresholdExceeded", "CreditThresholdReached"]  # noqa: E501
        if criteria not in allowed_values:
            raise ValueError(
                "Invalid value for `criteria` ({0}), must be one of {1}"
                .format(criteria, allowed_values)
            )

        self._criteria = criteria

    @property
    def type(self):
        """Gets the type of this AlertDefinition.

        The type of cost-entity the alert is defined on.

        :return: The type of this AlertDefinition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AlertDefinition.

        The type of cost-entity the alert is defined on.

        :param type: The type of this AlertDefinition.
        :type type: str
        """
        allowed_values = ["Budget", "Invoice", "Credit"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
