# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_aggregation import ReportAggregation
from openapi_server.models.report_dataset_configuration import ReportDatasetConfiguration
from openapi_server.models.report_filter import ReportFilter
from openapi_server.models.report_grouping import ReportGrouping
from openapi_server import util


class ReportDataset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation: Dict[str, ReportAggregation]=None, configuration: ReportDatasetConfiguration=None, filter: ReportFilter=None, granularity: str=None, grouping: List[ReportGrouping]=None):
        """ReportDataset - a model defined in OpenAPI

        :param aggregation: The aggregation of this ReportDataset.
        :param configuration: The configuration of this ReportDataset.
        :param filter: The filter of this ReportDataset.
        :param granularity: The granularity of this ReportDataset.
        :param grouping: The grouping of this ReportDataset.
        """
        self.openapi_types = {
            'aggregation': Dict[str, ReportAggregation],
            'configuration': ReportDatasetConfiguration,
            'filter': ReportFilter,
            'granularity': str,
            'grouping': List[ReportGrouping]
        }

        self.attribute_map = {
            'aggregation': 'aggregation',
            'configuration': 'configuration',
            'filter': 'filter',
            'granularity': 'granularity',
            'grouping': 'grouping'
        }

        self._aggregation = aggregation
        self._configuration = configuration
        self._filter = filter
        self._granularity = granularity
        self._grouping = grouping

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportDataset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportDataset of this ReportDataset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation(self):
        """Gets the aggregation of this ReportDataset.

        Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.

        :return: The aggregation of this ReportDataset.
        :rtype: Dict[str, ReportAggregation]
        """
        return self._aggregation

    @aggregation.setter
    def aggregation(self, aggregation):
        """Sets the aggregation of this ReportDataset.

        Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.

        :param aggregation: The aggregation of this ReportDataset.
        :type aggregation: Dict[str, ReportAggregation]
        """

        self._aggregation = aggregation

    @property
    def configuration(self):
        """Gets the configuration of this ReportDataset.


        :return: The configuration of this ReportDataset.
        :rtype: ReportDatasetConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this ReportDataset.


        :param configuration: The configuration of this ReportDataset.
        :type configuration: ReportDatasetConfiguration
        """

        self._configuration = configuration

    @property
    def filter(self):
        """Gets the filter of this ReportDataset.


        :return: The filter of this ReportDataset.
        :rtype: ReportFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ReportDataset.


        :param filter: The filter of this ReportDataset.
        :type filter: ReportFilter
        """

        self._filter = filter

    @property
    def granularity(self):
        """Gets the granularity of this ReportDataset.

        The granularity of rows in the report.

        :return: The granularity of this ReportDataset.
        :rtype: str
        """
        return self._granularity

    @granularity.setter
    def granularity(self, granularity):
        """Sets the granularity of this ReportDataset.

        The granularity of rows in the report.

        :param granularity: The granularity of this ReportDataset.
        :type granularity: str
        """
        allowed_values = ["Daily", "Hourly"]  # noqa: E501
        if granularity not in allowed_values:
            raise ValueError(
                "Invalid value for `granularity` ({0}), must be one of {1}"
                .format(granularity, allowed_values)
            )

        self._granularity = granularity

    @property
    def grouping(self):
        """Gets the grouping of this ReportDataset.

        Array of group by expression to use in the report. Report can have up to 2 group by clauses.

        :return: The grouping of this ReportDataset.
        :rtype: List[ReportGrouping]
        """
        return self._grouping

    @grouping.setter
    def grouping(self, grouping):
        """Sets the grouping of this ReportDataset.

        Array of group by expression to use in the report. Report can have up to 2 group by clauses.

        :param grouping: The grouping of this ReportDataset.
        :type grouping: List[ReportGrouping]
        """
        if grouping is not None and len(grouping) > 2:
            raise ValueError("Invalid value for `grouping`, number of items must be less than or equal to `2`")

        self._grouping = grouping
