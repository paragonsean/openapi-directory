/**
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReportComparisonExpression from './ReportComparisonExpression';

/**
 * The ReportFilter model module.
 * @module model/ReportFilter
 * @version 2018-08-01-preview
 */
class ReportFilter {
    /**
     * Constructs a new <code>ReportFilter</code>.
     * The filter expression to be used in the report.
     * @alias module:model/ReportFilter
     */
    constructor() { 
        
        ReportFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReportFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReportFilter} obj Optional instance to populate.
     * @return {module:model/ReportFilter} The populated <code>ReportFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReportFilter();

            if (data.hasOwnProperty('and')) {
                obj['and'] = ApiClient.convertToType(data['and'], [ReportFilter]);
            }
            if (data.hasOwnProperty('dimension')) {
                obj['dimension'] = ReportComparisonExpression.constructFromObject(data['dimension']);
            }
            if (data.hasOwnProperty('not')) {
                obj['not'] = ReportFilter.constructFromObject(data['not']);
            }
            if (data.hasOwnProperty('or')) {
                obj['or'] = ApiClient.convertToType(data['or'], [ReportFilter]);
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ReportComparisonExpression.constructFromObject(data['tag']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReportFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReportFilter</code>.
     */
    static validateJSON(data) {
        if (data['and']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['and'])) {
                throw new Error("Expected the field `and` to be an array in the JSON data but got " + data['and']);
            }
            // validate the optional field `and` (array)
            for (const item of data['and']) {
                ReportFilter.validateJSON(item);
            };
        }
        // validate the optional field `dimension`
        if (data['dimension']) { // data not null
          ReportComparisonExpression.validateJSON(data['dimension']);
        }
        // validate the optional field `not`
        if (data['not']) { // data not null
          ReportFilter.validateJSON(data['not']);
        }
        if (data['or']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['or'])) {
                throw new Error("Expected the field `or` to be an array in the JSON data but got " + data['or']);
            }
            // validate the optional field `or` (array)
            for (const item of data['or']) {
                ReportFilter.validateJSON(item);
            };
        }
        // validate the optional field `tag`
        if (data['tag']) { // data not null
          ReportComparisonExpression.validateJSON(data['tag']);
        }

        return true;
    }


}



/**
 * The logical \"AND\" expression. Must have at least 2 items.
 * @member {Array.<module:model/ReportFilter>} and
 */
ReportFilter.prototype['and'] = undefined;

/**
 * @member {module:model/ReportComparisonExpression} dimension
 */
ReportFilter.prototype['dimension'] = undefined;

/**
 * @member {module:model/ReportFilter} not
 */
ReportFilter.prototype['not'] = undefined;

/**
 * The logical \"OR\" expression. Must have at least 2 items.
 * @member {Array.<module:model/ReportFilter>} or
 */
ReportFilter.prototype['or'] = undefined;

/**
 * @member {module:model/ReportComparisonExpression} tag
 */
ReportFilter.prototype['tag'] = undefined;






export default ReportFilter;

