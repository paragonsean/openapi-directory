/**
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReportRecurrencePeriod from './ReportRecurrencePeriod';

/**
 * The ReportSchedule model module.
 * @module model/ReportSchedule
 * @version 2018-08-01-preview
 */
class ReportSchedule {
    /**
     * Constructs a new <code>ReportSchedule</code>.
     * The schedule associated with a report.
     * @alias module:model/ReportSchedule
     * @param recurrence {module:model/ReportSchedule.RecurrenceEnum} The schedule recurrence.
     */
    constructor(recurrence) { 
        
        ReportSchedule.initialize(this, recurrence);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, recurrence) { 
        obj['recurrence'] = recurrence;
    }

    /**
     * Constructs a <code>ReportSchedule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReportSchedule} obj Optional instance to populate.
     * @return {module:model/ReportSchedule} The populated <code>ReportSchedule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReportSchedule();

            if (data.hasOwnProperty('recurrence')) {
                obj['recurrence'] = ApiClient.convertToType(data['recurrence'], 'String');
            }
            if (data.hasOwnProperty('recurrencePeriod')) {
                obj['recurrencePeriod'] = ReportRecurrencePeriod.constructFromObject(data['recurrencePeriod']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReportSchedule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReportSchedule</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReportSchedule.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['recurrence'] && !(typeof data['recurrence'] === 'string' || data['recurrence'] instanceof String)) {
            throw new Error("Expected the field `recurrence` to be a primitive type in the JSON string but got " + data['recurrence']);
        }
        // validate the optional field `recurrencePeriod`
        if (data['recurrencePeriod']) { // data not null
          ReportRecurrencePeriod.validateJSON(data['recurrencePeriod']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

ReportSchedule.RequiredProperties = ["recurrence"];

/**
 * The schedule recurrence.
 * @member {module:model/ReportSchedule.RecurrenceEnum} recurrence
 */
ReportSchedule.prototype['recurrence'] = undefined;

/**
 * @member {module:model/ReportRecurrencePeriod} recurrencePeriod
 */
ReportSchedule.prototype['recurrencePeriod'] = undefined;

/**
 * The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
 * @member {module:model/ReportSchedule.StatusEnum} status
 */
ReportSchedule.prototype['status'] = undefined;





/**
 * Allowed values for the <code>recurrence</code> property.
 * @enum {String}
 * @readonly
 */
ReportSchedule['RecurrenceEnum'] = {

    /**
     * value: "Daily"
     * @const
     */
    "Daily": "Daily",

    /**
     * value: "Weekly"
     * @const
     */
    "Weekly": "Weekly",

    /**
     * value: "Monthly"
     * @const
     */
    "Monthly": "Monthly",

    /**
     * value: "Annually"
     * @const
     */
    "Annually": "Annually"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ReportSchedule['StatusEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Inactive"
     * @const
     */
    "Inactive": "Inactive"
};



export default ReportSchedule;

