/**
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConnectorCollectionInfo from './ConnectorCollectionInfo';

/**
 * The ConnectorProperties model module.
 * @module model/ConnectorProperties
 * @version 2018-08-01-preview
 */
class ConnectorProperties {
    /**
     * Constructs a new <code>ConnectorProperties</code>.
     * The properties of a Connector
     * @alias module:model/ConnectorProperties
     */
    constructor() { 
        
        ConnectorProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConnectorProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectorProperties} obj Optional instance to populate.
     * @return {module:model/ConnectorProperties} The populated <code>ConnectorProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectorProperties();

            if (data.hasOwnProperty('collection')) {
                obj['collection'] = ConnectorCollectionInfo.constructFromObject(data['collection']);
            }
            if (data.hasOwnProperty('createdOn')) {
                obj['createdOn'] = ApiClient.convertToType(data['createdOn'], 'Date');
            }
            if (data.hasOwnProperty('credentialsKey')) {
                obj['credentialsKey'] = ApiClient.convertToType(data['credentialsKey'], 'String');
            }
            if (data.hasOwnProperty('credentialsSecret')) {
                obj['credentialsSecret'] = ApiClient.convertToType(data['credentialsSecret'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('modifiedOn')) {
                obj['modifiedOn'] = ApiClient.convertToType(data['modifiedOn'], 'Date');
            }
            if (data.hasOwnProperty('providerAccountId')) {
                obj['providerAccountId'] = ApiClient.convertToType(data['providerAccountId'], 'String');
            }
            if (data.hasOwnProperty('reportId')) {
                obj['reportId'] = ApiClient.convertToType(data['reportId'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectorProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectorProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `collection`
        if (data['collection']) { // data not null
          ConnectorCollectionInfo.validateJSON(data['collection']);
        }
        // ensure the json data is a string
        if (data['credentialsKey'] && !(typeof data['credentialsKey'] === 'string' || data['credentialsKey'] instanceof String)) {
            throw new Error("Expected the field `credentialsKey` to be a primitive type in the JSON string but got " + data['credentialsKey']);
        }
        // ensure the json data is a string
        if (data['credentialsSecret'] && !(typeof data['credentialsSecret'] === 'string' || data['credentialsSecret'] instanceof String)) {
            throw new Error("Expected the field `credentialsSecret` to be a primitive type in the JSON string but got " + data['credentialsSecret']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['providerAccountId'] && !(typeof data['providerAccountId'] === 'string' || data['providerAccountId'] instanceof String)) {
            throw new Error("Expected the field `providerAccountId` to be a primitive type in the JSON string but got " + data['providerAccountId']);
        }
        // ensure the json data is a string
        if (data['reportId'] && !(typeof data['reportId'] === 'string' || data['reportId'] instanceof String)) {
            throw new Error("Expected the field `reportId` to be a primitive type in the JSON string but got " + data['reportId']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * @member {module:model/ConnectorCollectionInfo} collection
 */
ConnectorProperties.prototype['collection'] = undefined;

/**
 * Connector definition creation datetime
 * @member {Date} createdOn
 */
ConnectorProperties.prototype['createdOn'] = undefined;

/**
 * Credentials authentication key (eg AWS ARN)
 * @member {String} credentialsKey
 */
ConnectorProperties.prototype['credentialsKey'] = undefined;

/**
 * Credentials secret (eg AWS ExternalId)
 * @member {String} credentialsSecret
 */
ConnectorProperties.prototype['credentialsSecret'] = undefined;

/**
 * Connector DisplayName (defaults to Name)
 * @member {String} displayName
 */
ConnectorProperties.prototype['displayName'] = undefined;

/**
 * Connector last modified datetime
 * @member {Date} modifiedOn
 */
ConnectorProperties.prototype['modifiedOn'] = undefined;

/**
 * Connector providerAccountId (determined from credentials)
 * @member {String} providerAccountId
 */
ConnectorProperties.prototype['providerAccountId'] = undefined;

/**
 * Identifying source report. (For AWS this is a CUR report name, defined with Daily and with Resources)
 * @member {String} reportId
 */
ConnectorProperties.prototype['reportId'] = undefined;

/**
 * Connector status
 * @member {module:model/ConnectorProperties.StatusEnum} status
 */
ConnectorProperties.prototype['status'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ConnectorProperties['StatusEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "error"
     * @const
     */
    "error": "error",

    /**
     * value: "suspended"
     * @const
     */
    "suspended": "suspended"
};



export default ConnectorProperties;

