/**
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AlertDefinition model module.
 * @module model/AlertDefinition
 * @version 2018-08-01-preview
 */
class AlertDefinition {
    /**
     * Constructs a new <code>AlertDefinition</code>.
     * The definition (rule) of an Alert
     * @alias module:model/AlertDefinition
     */
    constructor() { 
        
        AlertDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AlertDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AlertDefinition} obj Optional instance to populate.
     * @return {module:model/AlertDefinition} The populated <code>AlertDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AlertDefinition();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('criteria')) {
                obj['criteria'] = ApiClient.convertToType(data['criteria'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AlertDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AlertDefinition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['criteria'] && !(typeof data['criteria'] === 'string' || data['criteria'] instanceof String)) {
            throw new Error("Expected the field `criteria` to be a primitive type in the JSON string but got " + data['criteria']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Category of the alert.
 * @member {module:model/AlertDefinition.CategoryEnum} category
 */
AlertDefinition.prototype['category'] = undefined;

/**
 * Criteria (condition) of the alert.
 * @member {module:model/AlertDefinition.CriteriaEnum} criteria
 */
AlertDefinition.prototype['criteria'] = undefined;

/**
 * The type of cost-entity the alert is defined on.
 * @member {module:model/AlertDefinition.TypeEnum} type
 */
AlertDefinition.prototype['type'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
AlertDefinition['CategoryEnum'] = {

    /**
     * value: "Cost"
     * @const
     */
    "Cost": "Cost",

    /**
     * value: "Usage"
     * @const
     */
    "Usage": "Usage",

    /**
     * value: "Billing"
     * @const
     */
    "Billing": "Billing"
};


/**
 * Allowed values for the <code>criteria</code> property.
 * @enum {String}
 * @readonly
 */
AlertDefinition['CriteriaEnum'] = {

    /**
     * value: "CostThresholdExceeded"
     * @const
     */
    "CostThresholdExceeded": "CostThresholdExceeded",

    /**
     * value: "UsageThresholdExceeded"
     * @const
     */
    "UsageThresholdExceeded": "UsageThresholdExceeded",

    /**
     * value: "CreditThresholdReached"
     * @const
     */
    "CreditThresholdReached": "CreditThresholdReached"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
AlertDefinition['TypeEnum'] = {

    /**
     * value: "Budget"
     * @const
     */
    "Budget": "Budget",

    /**
     * value: "Invoice"
     * @const
     */
    "Invoice": "Invoice",

    /**
     * value: "Credit"
     * @const
     */
    "Credit": "Credit"
};



export default AlertDefinition;

