/**
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReportAggregation from './ReportAggregation';
import ReportDatasetConfiguration from './ReportDatasetConfiguration';
import ReportFilter from './ReportFilter';
import ReportGrouping from './ReportGrouping';

/**
 * The ReportDataset model module.
 * @module model/ReportDataset
 * @version 2018-08-01-preview
 */
class ReportDataset {
    /**
     * Constructs a new <code>ReportDataset</code>.
     * The definition of data present in the report.
     * @alias module:model/ReportDataset
     */
    constructor() { 
        
        ReportDataset.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReportDataset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReportDataset} obj Optional instance to populate.
     * @return {module:model/ReportDataset} The populated <code>ReportDataset</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReportDataset();

            if (data.hasOwnProperty('aggregation')) {
                obj['aggregation'] = ApiClient.convertToType(data['aggregation'], {'String': ReportAggregation});
            }
            if (data.hasOwnProperty('configuration')) {
                obj['configuration'] = ReportDatasetConfiguration.constructFromObject(data['configuration']);
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ReportFilter.constructFromObject(data['filter']);
            }
            if (data.hasOwnProperty('granularity')) {
                obj['granularity'] = ApiClient.convertToType(data['granularity'], 'String');
            }
            if (data.hasOwnProperty('grouping')) {
                obj['grouping'] = ApiClient.convertToType(data['grouping'], [ReportGrouping]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReportDataset</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReportDataset</code>.
     */
    static validateJSON(data) {
        // validate the optional field `configuration`
        if (data['configuration']) { // data not null
          ReportDatasetConfiguration.validateJSON(data['configuration']);
        }
        // validate the optional field `filter`
        if (data['filter']) { // data not null
          ReportFilter.validateJSON(data['filter']);
        }
        // ensure the json data is a string
        if (data['granularity'] && !(typeof data['granularity'] === 'string' || data['granularity'] instanceof String)) {
            throw new Error("Expected the field `granularity` to be a primitive type in the JSON string but got " + data['granularity']);
        }
        if (data['grouping']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['grouping'])) {
                throw new Error("Expected the field `grouping` to be an array in the JSON data but got " + data['grouping']);
            }
            // validate the optional field `grouping` (array)
            for (const item of data['grouping']) {
                ReportGrouping.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
 * @member {Object.<String, module:model/ReportAggregation>} aggregation
 */
ReportDataset.prototype['aggregation'] = undefined;

/**
 * @member {module:model/ReportDatasetConfiguration} configuration
 */
ReportDataset.prototype['configuration'] = undefined;

/**
 * @member {module:model/ReportFilter} filter
 */
ReportDataset.prototype['filter'] = undefined;

/**
 * The granularity of rows in the report.
 * @member {module:model/ReportDataset.GranularityEnum} granularity
 */
ReportDataset.prototype['granularity'] = undefined;

/**
 * Array of group by expression to use in the report. Report can have up to 2 group by clauses.
 * @member {Array.<module:model/ReportGrouping>} grouping
 */
ReportDataset.prototype['grouping'] = undefined;





/**
 * Allowed values for the <code>granularity</code> property.
 * @enum {String}
 * @readonly
 */
ReportDataset['GranularityEnum'] = {

    /**
     * value: "Daily"
     * @const
     */
    "Daily": "Daily",

    /**
     * value: "Hourly"
     * @const
     */
    "Hourly": "Hourly"
};



export default ReportDataset;

