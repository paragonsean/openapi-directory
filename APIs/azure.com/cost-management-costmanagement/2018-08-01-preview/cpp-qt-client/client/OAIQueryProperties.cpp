/**
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryProperties::OAIQueryProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryProperties::OAIQueryProperties() {
    this->initializeModel();
}

OAIQueryProperties::~OAIQueryProperties() {}

void OAIQueryProperties::initializeModel() {

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_next_link_isSet = false;
    m_next_link_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;
}

void OAIQueryProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryProperties::fromJsonObject(QJsonObject json) {

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_next_link_isValid = ::OpenAPI::fromJsonValue(m_next_link, json[QString("nextLink")]);
    m_next_link_isSet = !json[QString("nextLink")].isNull() && m_next_link_isValid;

    if(json["rows"].isArray()){
        auto arr = json["rows"].toArray();
        m_rows_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<OAIObject> item;
                m_rows_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_rows_isSet = !jval.isNull() && m_rows_isValid;
                m_rows.push_back(item);
            }
        }
    }
}

QString OAIQueryProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_columns.size() > 0) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_next_link_isSet) {
        obj.insert(QString("nextLink"), ::OpenAPI::toJsonValue(m_next_link));
    }
    if (m_rows.size() > 0) {
        
        obj.insert(QString("rows"), toJsonValue(m_rows));
    }
    return obj;
}

QList<OAIQueryColumn> OAIQueryProperties::getColumns() const {
    return m_columns;
}
void OAIQueryProperties::setColumns(const QList<OAIQueryColumn> &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIQueryProperties::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIQueryProperties::is_columns_Valid() const{
    return m_columns_isValid;
}

QString OAIQueryProperties::getNextLink() const {
    return m_next_link;
}
void OAIQueryProperties::setNextLink(const QString &next_link) {
    m_next_link = next_link;
    m_next_link_isSet = true;
}

bool OAIQueryProperties::is_next_link_Set() const{
    return m_next_link_isSet;
}

bool OAIQueryProperties::is_next_link_Valid() const{
    return m_next_link_isValid;
}

QList<QList<OAIObject>> OAIQueryProperties::getRows() const {
    return m_rows;
}
void OAIQueryProperties::setRows(const QList<QList<OAIObject>> &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAIQueryProperties::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAIQueryProperties::is_rows_Valid() const{
    return m_rows_isValid;
}

bool OAIQueryProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
