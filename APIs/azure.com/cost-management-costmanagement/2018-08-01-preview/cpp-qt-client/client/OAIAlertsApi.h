/**
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAlertsApi_H
#define OAI_OAIAlertsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAlert.h"
#include "OAIAlertListResult.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAlertsApi : public QObject {
    Q_OBJECT

public:
    OAIAlertsApi(const int timeOut = 0);
    ~OAIAlertsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  management_group_id QString [required]
    * @param[in]  alert_id QString [required]
    */
    virtual void alertsGetAlertByManagementGroups(const QString &api_version, const QString &management_group_id, const QString &alert_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  billing_account_id QString [required]
    * @param[in]  enrollment_account_id QString [required]
    * @param[in]  alert_id QString [required]
    */
    virtual void alertsGetByAccount(const QString &api_version, const QString &billing_account_id, const QString &enrollment_account_id, const QString &alert_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  billing_account_id QString [required]
    * @param[in]  department_id QString [required]
    * @param[in]  alert_id QString [required]
    */
    virtual void alertsGetByDepartment(const QString &api_version, const QString &billing_account_id, const QString &department_id, const QString &alert_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  billing_account_id QString [required]
    * @param[in]  alert_id QString [required]
    */
    virtual void alertsGetByEnrollment(const QString &api_version, const QString &billing_account_id, const QString &alert_id);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  alert_id QString [required]
    */
    virtual void alertsGetByResourceGroupName(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const QString &alert_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  alert_id QString [required]
    */
    virtual void alertsGetBySubscription(const QString &api_version, const QString &subscription_id, const QString &alert_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void alertsList(const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  billing_account_id QString [required]
    * @param[in]  enrollment_account_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void alertsListByAccount(const QString &api_version, const QString &billing_account_id, const QString &enrollment_account_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  billing_account_id QString [required]
    * @param[in]  department_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void alertsListByDepartment(const QString &api_version, const QString &billing_account_id, const QString &department_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  billing_account_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void alertsListByEnrollment(const QString &api_version, const QString &billing_account_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  management_group_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void alertsListByManagementGroups(const QString &api_version, const QString &management_group_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void alertsListByResourceGroupName(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  billing_account_id QString [required]
    * @param[in]  alert_id QString [required]
    * @param[in]  parameters OAIAlert [required]
    */
    virtual void alertsUpdateBillingAccountAlertStatus(const QString &api_version, const QString &billing_account_id, const QString &alert_id, const OAIAlert &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  billing_account_id QString [required]
    * @param[in]  department_id QString [required]
    * @param[in]  alert_id QString [required]
    * @param[in]  parameters OAIAlert [required]
    */
    virtual void alertsUpdateDepartmentsAlertStatus(const QString &api_version, const QString &billing_account_id, const QString &department_id, const QString &alert_id, const OAIAlert &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  billing_account_id QString [required]
    * @param[in]  enrollment_account_id QString [required]
    * @param[in]  alert_id QString [required]
    * @param[in]  parameters OAIAlert [required]
    */
    virtual void alertsUpdateEnrollmentAccountAlertStatus(const QString &api_version, const QString &billing_account_id, const QString &enrollment_account_id, const QString &alert_id, const OAIAlert &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  management_group_id QString [required]
    * @param[in]  alert_id QString [required]
    * @param[in]  parameters OAIAlert [required]
    */
    virtual void alertsUpdateManagementGroupAlertStatus(const QString &api_version, const QString &management_group_id, const QString &alert_id, const OAIAlert &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  alert_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIAlert [required]
    */
    virtual void alertsUpdateResourceGroupNameAlertStatus(const QString &subscription_id, const QString &resource_group_name, const QString &alert_id, const QString &api_version, const OAIAlert &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  alert_id QString [required]
    * @param[in]  parameters OAIAlert [required]
    */
    virtual void alertsUpdateSubscriptionAlertStatus(const QString &api_version, const QString &subscription_id, const QString &alert_id, const OAIAlert &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void alertsGetAlertByManagementGroupsCallback(OAIHttpRequestWorker *worker);
    void alertsGetByAccountCallback(OAIHttpRequestWorker *worker);
    void alertsGetByDepartmentCallback(OAIHttpRequestWorker *worker);
    void alertsGetByEnrollmentCallback(OAIHttpRequestWorker *worker);
    void alertsGetByResourceGroupNameCallback(OAIHttpRequestWorker *worker);
    void alertsGetBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void alertsListCallback(OAIHttpRequestWorker *worker);
    void alertsListByAccountCallback(OAIHttpRequestWorker *worker);
    void alertsListByDepartmentCallback(OAIHttpRequestWorker *worker);
    void alertsListByEnrollmentCallback(OAIHttpRequestWorker *worker);
    void alertsListByManagementGroupsCallback(OAIHttpRequestWorker *worker);
    void alertsListByResourceGroupNameCallback(OAIHttpRequestWorker *worker);
    void alertsUpdateBillingAccountAlertStatusCallback(OAIHttpRequestWorker *worker);
    void alertsUpdateDepartmentsAlertStatusCallback(OAIHttpRequestWorker *worker);
    void alertsUpdateEnrollmentAccountAlertStatusCallback(OAIHttpRequestWorker *worker);
    void alertsUpdateManagementGroupAlertStatusCallback(OAIHttpRequestWorker *worker);
    void alertsUpdateResourceGroupNameAlertStatusCallback(OAIHttpRequestWorker *worker);
    void alertsUpdateSubscriptionAlertStatusCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void alertsGetAlertByManagementGroupsSignal(OAIAlert summary);
    void alertsGetByAccountSignal(OAIAlert summary);
    void alertsGetByDepartmentSignal(OAIAlert summary);
    void alertsGetByEnrollmentSignal(OAIAlert summary);
    void alertsGetByResourceGroupNameSignal(OAIAlert summary);
    void alertsGetBySubscriptionSignal(OAIAlert summary);
    void alertsListSignal(OAIAlertListResult summary);
    void alertsListByAccountSignal(OAIAlertListResult summary);
    void alertsListByDepartmentSignal(OAIAlertListResult summary);
    void alertsListByEnrollmentSignal(OAIAlertListResult summary);
    void alertsListByManagementGroupsSignal(OAIAlertListResult summary);
    void alertsListByResourceGroupNameSignal(OAIAlertListResult summary);
    void alertsUpdateBillingAccountAlertStatusSignal(OAIAlert summary);
    void alertsUpdateDepartmentsAlertStatusSignal(OAIAlert summary);
    void alertsUpdateEnrollmentAccountAlertStatusSignal(OAIAlert summary);
    void alertsUpdateManagementGroupAlertStatusSignal(OAIAlert summary);
    void alertsUpdateResourceGroupNameAlertStatusSignal(OAIAlert summary);
    void alertsUpdateSubscriptionAlertStatusSignal(OAIAlert summary);


    void alertsGetAlertByManagementGroupsSignalFull(OAIHttpRequestWorker *worker, OAIAlert summary);
    void alertsGetByAccountSignalFull(OAIHttpRequestWorker *worker, OAIAlert summary);
    void alertsGetByDepartmentSignalFull(OAIHttpRequestWorker *worker, OAIAlert summary);
    void alertsGetByEnrollmentSignalFull(OAIHttpRequestWorker *worker, OAIAlert summary);
    void alertsGetByResourceGroupNameSignalFull(OAIHttpRequestWorker *worker, OAIAlert summary);
    void alertsGetBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIAlert summary);
    void alertsListSignalFull(OAIHttpRequestWorker *worker, OAIAlertListResult summary);
    void alertsListByAccountSignalFull(OAIHttpRequestWorker *worker, OAIAlertListResult summary);
    void alertsListByDepartmentSignalFull(OAIHttpRequestWorker *worker, OAIAlertListResult summary);
    void alertsListByEnrollmentSignalFull(OAIHttpRequestWorker *worker, OAIAlertListResult summary);
    void alertsListByManagementGroupsSignalFull(OAIHttpRequestWorker *worker, OAIAlertListResult summary);
    void alertsListByResourceGroupNameSignalFull(OAIHttpRequestWorker *worker, OAIAlertListResult summary);
    void alertsUpdateBillingAccountAlertStatusSignalFull(OAIHttpRequestWorker *worker, OAIAlert summary);
    void alertsUpdateDepartmentsAlertStatusSignalFull(OAIHttpRequestWorker *worker, OAIAlert summary);
    void alertsUpdateEnrollmentAccountAlertStatusSignalFull(OAIHttpRequestWorker *worker, OAIAlert summary);
    void alertsUpdateManagementGroupAlertStatusSignalFull(OAIHttpRequestWorker *worker, OAIAlert summary);
    void alertsUpdateResourceGroupNameAlertStatusSignalFull(OAIHttpRequestWorker *worker, OAIAlert summary);
    void alertsUpdateSubscriptionAlertStatusSignalFull(OAIHttpRequestWorker *worker, OAIAlert summary);

    Q_DECL_DEPRECATED_X("Use alertsGetAlertByManagementGroupsSignalError() instead")
    void alertsGetAlertByManagementGroupsSignalE(OAIAlert summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsGetAlertByManagementGroupsSignalError(OAIAlert summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsGetByAccountSignalError() instead")
    void alertsGetByAccountSignalE(OAIAlert summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsGetByAccountSignalError(OAIAlert summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsGetByDepartmentSignalError() instead")
    void alertsGetByDepartmentSignalE(OAIAlert summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsGetByDepartmentSignalError(OAIAlert summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsGetByEnrollmentSignalError() instead")
    void alertsGetByEnrollmentSignalE(OAIAlert summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsGetByEnrollmentSignalError(OAIAlert summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsGetByResourceGroupNameSignalError() instead")
    void alertsGetByResourceGroupNameSignalE(OAIAlert summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsGetByResourceGroupNameSignalError(OAIAlert summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsGetBySubscriptionSignalError() instead")
    void alertsGetBySubscriptionSignalE(OAIAlert summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsGetBySubscriptionSignalError(OAIAlert summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsListSignalError() instead")
    void alertsListSignalE(OAIAlertListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsListSignalError(OAIAlertListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsListByAccountSignalError() instead")
    void alertsListByAccountSignalE(OAIAlertListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsListByAccountSignalError(OAIAlertListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsListByDepartmentSignalError() instead")
    void alertsListByDepartmentSignalE(OAIAlertListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsListByDepartmentSignalError(OAIAlertListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsListByEnrollmentSignalError() instead")
    void alertsListByEnrollmentSignalE(OAIAlertListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsListByEnrollmentSignalError(OAIAlertListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsListByManagementGroupsSignalError() instead")
    void alertsListByManagementGroupsSignalE(OAIAlertListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsListByManagementGroupsSignalError(OAIAlertListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsListByResourceGroupNameSignalError() instead")
    void alertsListByResourceGroupNameSignalE(OAIAlertListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsListByResourceGroupNameSignalError(OAIAlertListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsUpdateBillingAccountAlertStatusSignalError() instead")
    void alertsUpdateBillingAccountAlertStatusSignalE(OAIAlert summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsUpdateBillingAccountAlertStatusSignalError(OAIAlert summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsUpdateDepartmentsAlertStatusSignalError() instead")
    void alertsUpdateDepartmentsAlertStatusSignalE(OAIAlert summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsUpdateDepartmentsAlertStatusSignalError(OAIAlert summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsUpdateEnrollmentAccountAlertStatusSignalError() instead")
    void alertsUpdateEnrollmentAccountAlertStatusSignalE(OAIAlert summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsUpdateEnrollmentAccountAlertStatusSignalError(OAIAlert summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsUpdateManagementGroupAlertStatusSignalError() instead")
    void alertsUpdateManagementGroupAlertStatusSignalE(OAIAlert summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsUpdateManagementGroupAlertStatusSignalError(OAIAlert summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsUpdateResourceGroupNameAlertStatusSignalError() instead")
    void alertsUpdateResourceGroupNameAlertStatusSignalE(OAIAlert summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsUpdateResourceGroupNameAlertStatusSignalError(OAIAlert summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsUpdateSubscriptionAlertStatusSignalError() instead")
    void alertsUpdateSubscriptionAlertStatusSignalE(OAIAlert summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsUpdateSubscriptionAlertStatusSignalError(OAIAlert summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use alertsGetAlertByManagementGroupsSignalErrorFull() instead")
    void alertsGetAlertByManagementGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsGetAlertByManagementGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsGetByAccountSignalErrorFull() instead")
    void alertsGetByAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsGetByAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsGetByDepartmentSignalErrorFull() instead")
    void alertsGetByDepartmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsGetByDepartmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsGetByEnrollmentSignalErrorFull() instead")
    void alertsGetByEnrollmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsGetByEnrollmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsGetByResourceGroupNameSignalErrorFull() instead")
    void alertsGetByResourceGroupNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsGetByResourceGroupNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsGetBySubscriptionSignalErrorFull() instead")
    void alertsGetBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsGetBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsListSignalErrorFull() instead")
    void alertsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsListByAccountSignalErrorFull() instead")
    void alertsListByAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsListByAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsListByDepartmentSignalErrorFull() instead")
    void alertsListByDepartmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsListByDepartmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsListByEnrollmentSignalErrorFull() instead")
    void alertsListByEnrollmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsListByEnrollmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsListByManagementGroupsSignalErrorFull() instead")
    void alertsListByManagementGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsListByManagementGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsListByResourceGroupNameSignalErrorFull() instead")
    void alertsListByResourceGroupNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsListByResourceGroupNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsUpdateBillingAccountAlertStatusSignalErrorFull() instead")
    void alertsUpdateBillingAccountAlertStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsUpdateBillingAccountAlertStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsUpdateDepartmentsAlertStatusSignalErrorFull() instead")
    void alertsUpdateDepartmentsAlertStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsUpdateDepartmentsAlertStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsUpdateEnrollmentAccountAlertStatusSignalErrorFull() instead")
    void alertsUpdateEnrollmentAccountAlertStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsUpdateEnrollmentAccountAlertStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsUpdateManagementGroupAlertStatusSignalErrorFull() instead")
    void alertsUpdateManagementGroupAlertStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsUpdateManagementGroupAlertStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsUpdateResourceGroupNameAlertStatusSignalErrorFull() instead")
    void alertsUpdateResourceGroupNameAlertStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsUpdateResourceGroupNameAlertStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsUpdateSubscriptionAlertStatusSignalErrorFull() instead")
    void alertsUpdateSubscriptionAlertStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsUpdateSubscriptionAlertStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
