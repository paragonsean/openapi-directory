/**
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDimensionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDimensionProperties::OAIDimensionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDimensionProperties::OAIDimensionProperties() {
    this->initializeModel();
}

OAIDimensionProperties::~OAIDimensionProperties() {}

void OAIDimensionProperties::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_next_link_isSet = false;
    m_next_link_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_usage_end_isSet = false;
    m_usage_end_isValid = false;

    m_usage_start_isSet = false;
    m_usage_start_isValid = false;
}

void OAIDimensionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDimensionProperties::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_next_link_isValid = ::OpenAPI::fromJsonValue(m_next_link, json[QString("nextLink")]);
    m_next_link_isSet = !json[QString("nextLink")].isNull() && m_next_link_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_usage_end_isValid = ::OpenAPI::fromJsonValue(m_usage_end, json[QString("usageEnd")]);
    m_usage_end_isSet = !json[QString("usageEnd")].isNull() && m_usage_end_isValid;

    m_usage_start_isValid = ::OpenAPI::fromJsonValue(m_usage_start, json[QString("usageStart")]);
    m_usage_start_isSet = !json[QString("usageStart")].isNull() && m_usage_start_isValid;
}

QString OAIDimensionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDimensionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_next_link_isSet) {
        obj.insert(QString("nextLink"), ::OpenAPI::toJsonValue(m_next_link));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_usage_end_isSet) {
        obj.insert(QString("usageEnd"), ::OpenAPI::toJsonValue(m_usage_end));
    }
    if (m_usage_start_isSet) {
        obj.insert(QString("usageStart"), ::OpenAPI::toJsonValue(m_usage_start));
    }
    return obj;
}

QString OAIDimensionProperties::getCategory() const {
    return m_category;
}
void OAIDimensionProperties::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIDimensionProperties::is_category_Set() const{
    return m_category_isSet;
}

bool OAIDimensionProperties::is_category_Valid() const{
    return m_category_isValid;
}

QList<QString> OAIDimensionProperties::getData() const {
    return m_data;
}
void OAIDimensionProperties::setData(const QList<QString> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIDimensionProperties::is_data_Set() const{
    return m_data_isSet;
}

bool OAIDimensionProperties::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIDimensionProperties::getNextLink() const {
    return m_next_link;
}
void OAIDimensionProperties::setNextLink(const QString &next_link) {
    m_next_link = next_link;
    m_next_link_isSet = true;
}

bool OAIDimensionProperties::is_next_link_Set() const{
    return m_next_link_isSet;
}

bool OAIDimensionProperties::is_next_link_Valid() const{
    return m_next_link_isValid;
}

qint32 OAIDimensionProperties::getTotal() const {
    return m_total;
}
void OAIDimensionProperties::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIDimensionProperties::is_total_Set() const{
    return m_total_isSet;
}

bool OAIDimensionProperties::is_total_Valid() const{
    return m_total_isValid;
}

QDateTime OAIDimensionProperties::getUsageEnd() const {
    return m_usage_end;
}
void OAIDimensionProperties::setUsageEnd(const QDateTime &usage_end) {
    m_usage_end = usage_end;
    m_usage_end_isSet = true;
}

bool OAIDimensionProperties::is_usage_end_Set() const{
    return m_usage_end_isSet;
}

bool OAIDimensionProperties::is_usage_end_Valid() const{
    return m_usage_end_isValid;
}

QDateTime OAIDimensionProperties::getUsageStart() const {
    return m_usage_start;
}
void OAIDimensionProperties::setUsageStart(const QDateTime &usage_start) {
    m_usage_start = usage_start;
    m_usage_start_isSet = true;
}

bool OAIDimensionProperties::is_usage_start_Set() const{
    return m_usage_start_isSet;
}

bool OAIDimensionProperties::is_usage_start_Valid() const{
    return m_usage_start_isValid;
}

bool OAIDimensionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDimensionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
