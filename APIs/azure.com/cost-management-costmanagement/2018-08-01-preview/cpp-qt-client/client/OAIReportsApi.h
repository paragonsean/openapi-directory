/**
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReportsApi_H
#define OAI_OAIReportsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIReport.h"
#include "OAIReportExecutionListResult.h"
#include "OAIReportListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReportsApi : public QObject {
    Q_OBJECT

public:
    OAIReportsApi(const int timeOut = 0);
    ~OAIReportsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  report_name QString [required]
    * @param[in]  parameters OAIReport [required]
    */
    virtual void reportsCreateOrUpdate(const QString &api_version, const QString &subscription_id, const QString &report_name, const OAIReport &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  billing_account_id QString [required]
    * @param[in]  report_name QString [required]
    * @param[in]  parameters OAIReport [required]
    */
    virtual void reportsCreateOrUpdateByBillingAccount(const QString &api_version, const QString &billing_account_id, const QString &report_name, const OAIReport &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  department_id QString [required]
    * @param[in]  report_name QString [required]
    * @param[in]  parameters OAIReport [required]
    */
    virtual void reportsCreateOrUpdateByDepartment(const QString &api_version, const QString &department_id, const QString &report_name, const OAIReport &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  report_name QString [required]
    * @param[in]  parameters OAIReport [required]
    */
    virtual void reportsCreateOrUpdateByResourceGroupName(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &report_name, const OAIReport &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  report_name QString [required]
    */
    virtual void reportsDelete(const QString &api_version, const QString &subscription_id, const QString &report_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  billing_account_id QString [required]
    * @param[in]  report_name QString [required]
    */
    virtual void reportsDeleteByBillingAccount(const QString &api_version, const QString &billing_account_id, const QString &report_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  department_id QString [required]
    * @param[in]  report_name QString [required]
    */
    virtual void reportsDeleteByDepartment(const QString &api_version, const QString &department_id, const QString &report_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  report_name QString [required]
    */
    virtual void reportsDeleteByResourceGroupName(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &report_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  report_name QString [required]
    */
    virtual void reportsExecute(const QString &api_version, const QString &subscription_id, const QString &report_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  billing_account_id QString [required]
    * @param[in]  report_name QString [required]
    */
    virtual void reportsExecuteByBillingAccount(const QString &api_version, const QString &billing_account_id, const QString &report_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  department_id QString [required]
    * @param[in]  report_name QString [required]
    */
    virtual void reportsExecuteByDepartment(const QString &api_version, const QString &department_id, const QString &report_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  report_name QString [required]
    */
    virtual void reportsExecuteByResourceGroupName(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &report_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  report_name QString [required]
    */
    virtual void reportsGet(const QString &api_version, const QString &subscription_id, const QString &report_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  billing_account_id QString [required]
    * @param[in]  report_name QString [required]
    */
    virtual void reportsGetByBillingAccount(const QString &api_version, const QString &billing_account_id, const QString &report_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  department_id QString [required]
    * @param[in]  report_name QString [required]
    */
    virtual void reportsGetByDepartment(const QString &api_version, const QString &department_id, const QString &report_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  report_name QString [required]
    */
    virtual void reportsGetByResourceGroupName(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &report_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  report_name QString [required]
    */
    virtual void reportsGetExecutionHistory(const QString &api_version, const QString &subscription_id, const QString &report_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  billing_account_id QString [required]
    * @param[in]  report_name QString [required]
    */
    virtual void reportsGetExecutionHistoryByBillingAccount(const QString &api_version, const QString &billing_account_id, const QString &report_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  department_id QString [required]
    * @param[in]  report_name QString [required]
    */
    virtual void reportsGetExecutionHistoryByDepartment(const QString &api_version, const QString &department_id, const QString &report_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  report_name QString [required]
    */
    virtual void reportsGetExecutionHistoryByResourceGroupName(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &report_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void reportsList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  billing_account_id QString [required]
    */
    virtual void reportsListByBillingAccount(const QString &api_version, const QString &billing_account_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  department_id QString [required]
    */
    virtual void reportsListByDepartment(const QString &api_version, const QString &department_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void reportsListByResourceGroupName(const QString &api_version, const QString &subscription_id, const QString &resource_group_name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void reportsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void reportsCreateOrUpdateByBillingAccountCallback(OAIHttpRequestWorker *worker);
    void reportsCreateOrUpdateByDepartmentCallback(OAIHttpRequestWorker *worker);
    void reportsCreateOrUpdateByResourceGroupNameCallback(OAIHttpRequestWorker *worker);
    void reportsDeleteCallback(OAIHttpRequestWorker *worker);
    void reportsDeleteByBillingAccountCallback(OAIHttpRequestWorker *worker);
    void reportsDeleteByDepartmentCallback(OAIHttpRequestWorker *worker);
    void reportsDeleteByResourceGroupNameCallback(OAIHttpRequestWorker *worker);
    void reportsExecuteCallback(OAIHttpRequestWorker *worker);
    void reportsExecuteByBillingAccountCallback(OAIHttpRequestWorker *worker);
    void reportsExecuteByDepartmentCallback(OAIHttpRequestWorker *worker);
    void reportsExecuteByResourceGroupNameCallback(OAIHttpRequestWorker *worker);
    void reportsGetCallback(OAIHttpRequestWorker *worker);
    void reportsGetByBillingAccountCallback(OAIHttpRequestWorker *worker);
    void reportsGetByDepartmentCallback(OAIHttpRequestWorker *worker);
    void reportsGetByResourceGroupNameCallback(OAIHttpRequestWorker *worker);
    void reportsGetExecutionHistoryCallback(OAIHttpRequestWorker *worker);
    void reportsGetExecutionHistoryByBillingAccountCallback(OAIHttpRequestWorker *worker);
    void reportsGetExecutionHistoryByDepartmentCallback(OAIHttpRequestWorker *worker);
    void reportsGetExecutionHistoryByResourceGroupNameCallback(OAIHttpRequestWorker *worker);
    void reportsListCallback(OAIHttpRequestWorker *worker);
    void reportsListByBillingAccountCallback(OAIHttpRequestWorker *worker);
    void reportsListByDepartmentCallback(OAIHttpRequestWorker *worker);
    void reportsListByResourceGroupNameCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void reportsCreateOrUpdateSignal(OAIReport summary);
    void reportsCreateOrUpdateByBillingAccountSignal(OAIReport summary);
    void reportsCreateOrUpdateByDepartmentSignal(OAIReport summary);
    void reportsCreateOrUpdateByResourceGroupNameSignal(OAIReport summary);
    void reportsDeleteSignal();
    void reportsDeleteByBillingAccountSignal();
    void reportsDeleteByDepartmentSignal();
    void reportsDeleteByResourceGroupNameSignal();
    void reportsExecuteSignal();
    void reportsExecuteByBillingAccountSignal();
    void reportsExecuteByDepartmentSignal();
    void reportsExecuteByResourceGroupNameSignal();
    void reportsGetSignal(OAIReport summary);
    void reportsGetByBillingAccountSignal(OAIReport summary);
    void reportsGetByDepartmentSignal(OAIReport summary);
    void reportsGetByResourceGroupNameSignal(OAIReport summary);
    void reportsGetExecutionHistorySignal(OAIReportExecutionListResult summary);
    void reportsGetExecutionHistoryByBillingAccountSignal(OAIReportExecutionListResult summary);
    void reportsGetExecutionHistoryByDepartmentSignal(OAIReportExecutionListResult summary);
    void reportsGetExecutionHistoryByResourceGroupNameSignal(OAIReportExecutionListResult summary);
    void reportsListSignal(OAIReportListResult summary);
    void reportsListByBillingAccountSignal(OAIReportListResult summary);
    void reportsListByDepartmentSignal(OAIReportListResult summary);
    void reportsListByResourceGroupNameSignal(OAIReportListResult summary);


    void reportsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIReport summary);
    void reportsCreateOrUpdateByBillingAccountSignalFull(OAIHttpRequestWorker *worker, OAIReport summary);
    void reportsCreateOrUpdateByDepartmentSignalFull(OAIHttpRequestWorker *worker, OAIReport summary);
    void reportsCreateOrUpdateByResourceGroupNameSignalFull(OAIHttpRequestWorker *worker, OAIReport summary);
    void reportsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void reportsDeleteByBillingAccountSignalFull(OAIHttpRequestWorker *worker);
    void reportsDeleteByDepartmentSignalFull(OAIHttpRequestWorker *worker);
    void reportsDeleteByResourceGroupNameSignalFull(OAIHttpRequestWorker *worker);
    void reportsExecuteSignalFull(OAIHttpRequestWorker *worker);
    void reportsExecuteByBillingAccountSignalFull(OAIHttpRequestWorker *worker);
    void reportsExecuteByDepartmentSignalFull(OAIHttpRequestWorker *worker);
    void reportsExecuteByResourceGroupNameSignalFull(OAIHttpRequestWorker *worker);
    void reportsGetSignalFull(OAIHttpRequestWorker *worker, OAIReport summary);
    void reportsGetByBillingAccountSignalFull(OAIHttpRequestWorker *worker, OAIReport summary);
    void reportsGetByDepartmentSignalFull(OAIHttpRequestWorker *worker, OAIReport summary);
    void reportsGetByResourceGroupNameSignalFull(OAIHttpRequestWorker *worker, OAIReport summary);
    void reportsGetExecutionHistorySignalFull(OAIHttpRequestWorker *worker, OAIReportExecutionListResult summary);
    void reportsGetExecutionHistoryByBillingAccountSignalFull(OAIHttpRequestWorker *worker, OAIReportExecutionListResult summary);
    void reportsGetExecutionHistoryByDepartmentSignalFull(OAIHttpRequestWorker *worker, OAIReportExecutionListResult summary);
    void reportsGetExecutionHistoryByResourceGroupNameSignalFull(OAIHttpRequestWorker *worker, OAIReportExecutionListResult summary);
    void reportsListSignalFull(OAIHttpRequestWorker *worker, OAIReportListResult summary);
    void reportsListByBillingAccountSignalFull(OAIHttpRequestWorker *worker, OAIReportListResult summary);
    void reportsListByDepartmentSignalFull(OAIHttpRequestWorker *worker, OAIReportListResult summary);
    void reportsListByResourceGroupNameSignalFull(OAIHttpRequestWorker *worker, OAIReportListResult summary);

    Q_DECL_DEPRECATED_X("Use reportsCreateOrUpdateSignalError() instead")
    void reportsCreateOrUpdateSignalE(OAIReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsCreateOrUpdateSignalError(OAIReport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsCreateOrUpdateByBillingAccountSignalError() instead")
    void reportsCreateOrUpdateByBillingAccountSignalE(OAIReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsCreateOrUpdateByBillingAccountSignalError(OAIReport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsCreateOrUpdateByDepartmentSignalError() instead")
    void reportsCreateOrUpdateByDepartmentSignalE(OAIReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsCreateOrUpdateByDepartmentSignalError(OAIReport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsCreateOrUpdateByResourceGroupNameSignalError() instead")
    void reportsCreateOrUpdateByResourceGroupNameSignalE(OAIReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsCreateOrUpdateByResourceGroupNameSignalError(OAIReport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsDeleteSignalError() instead")
    void reportsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reportsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsDeleteByBillingAccountSignalError() instead")
    void reportsDeleteByBillingAccountSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reportsDeleteByBillingAccountSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsDeleteByDepartmentSignalError() instead")
    void reportsDeleteByDepartmentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reportsDeleteByDepartmentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsDeleteByResourceGroupNameSignalError() instead")
    void reportsDeleteByResourceGroupNameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reportsDeleteByResourceGroupNameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsExecuteSignalError() instead")
    void reportsExecuteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reportsExecuteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsExecuteByBillingAccountSignalError() instead")
    void reportsExecuteByBillingAccountSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reportsExecuteByBillingAccountSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsExecuteByDepartmentSignalError() instead")
    void reportsExecuteByDepartmentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reportsExecuteByDepartmentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsExecuteByResourceGroupNameSignalError() instead")
    void reportsExecuteByResourceGroupNameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reportsExecuteByResourceGroupNameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsGetSignalError() instead")
    void reportsGetSignalE(OAIReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsGetSignalError(OAIReport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsGetByBillingAccountSignalError() instead")
    void reportsGetByBillingAccountSignalE(OAIReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsGetByBillingAccountSignalError(OAIReport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsGetByDepartmentSignalError() instead")
    void reportsGetByDepartmentSignalE(OAIReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsGetByDepartmentSignalError(OAIReport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsGetByResourceGroupNameSignalError() instead")
    void reportsGetByResourceGroupNameSignalE(OAIReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsGetByResourceGroupNameSignalError(OAIReport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsGetExecutionHistorySignalError() instead")
    void reportsGetExecutionHistorySignalE(OAIReportExecutionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsGetExecutionHistorySignalError(OAIReportExecutionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsGetExecutionHistoryByBillingAccountSignalError() instead")
    void reportsGetExecutionHistoryByBillingAccountSignalE(OAIReportExecutionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsGetExecutionHistoryByBillingAccountSignalError(OAIReportExecutionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsGetExecutionHistoryByDepartmentSignalError() instead")
    void reportsGetExecutionHistoryByDepartmentSignalE(OAIReportExecutionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsGetExecutionHistoryByDepartmentSignalError(OAIReportExecutionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsGetExecutionHistoryByResourceGroupNameSignalError() instead")
    void reportsGetExecutionHistoryByResourceGroupNameSignalE(OAIReportExecutionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsGetExecutionHistoryByResourceGroupNameSignalError(OAIReportExecutionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsListSignalError() instead")
    void reportsListSignalE(OAIReportListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsListSignalError(OAIReportListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsListByBillingAccountSignalError() instead")
    void reportsListByBillingAccountSignalE(OAIReportListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsListByBillingAccountSignalError(OAIReportListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsListByDepartmentSignalError() instead")
    void reportsListByDepartmentSignalE(OAIReportListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsListByDepartmentSignalError(OAIReportListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsListByResourceGroupNameSignalError() instead")
    void reportsListByResourceGroupNameSignalE(OAIReportListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsListByResourceGroupNameSignalError(OAIReportListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use reportsCreateOrUpdateSignalErrorFull() instead")
    void reportsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsCreateOrUpdateByBillingAccountSignalErrorFull() instead")
    void reportsCreateOrUpdateByBillingAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsCreateOrUpdateByBillingAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsCreateOrUpdateByDepartmentSignalErrorFull() instead")
    void reportsCreateOrUpdateByDepartmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsCreateOrUpdateByDepartmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsCreateOrUpdateByResourceGroupNameSignalErrorFull() instead")
    void reportsCreateOrUpdateByResourceGroupNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsCreateOrUpdateByResourceGroupNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsDeleteSignalErrorFull() instead")
    void reportsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsDeleteByBillingAccountSignalErrorFull() instead")
    void reportsDeleteByBillingAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsDeleteByBillingAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsDeleteByDepartmentSignalErrorFull() instead")
    void reportsDeleteByDepartmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsDeleteByDepartmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsDeleteByResourceGroupNameSignalErrorFull() instead")
    void reportsDeleteByResourceGroupNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsDeleteByResourceGroupNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsExecuteSignalErrorFull() instead")
    void reportsExecuteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsExecuteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsExecuteByBillingAccountSignalErrorFull() instead")
    void reportsExecuteByBillingAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsExecuteByBillingAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsExecuteByDepartmentSignalErrorFull() instead")
    void reportsExecuteByDepartmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsExecuteByDepartmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsExecuteByResourceGroupNameSignalErrorFull() instead")
    void reportsExecuteByResourceGroupNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsExecuteByResourceGroupNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsGetSignalErrorFull() instead")
    void reportsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsGetByBillingAccountSignalErrorFull() instead")
    void reportsGetByBillingAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsGetByBillingAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsGetByDepartmentSignalErrorFull() instead")
    void reportsGetByDepartmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsGetByDepartmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsGetByResourceGroupNameSignalErrorFull() instead")
    void reportsGetByResourceGroupNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsGetByResourceGroupNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsGetExecutionHistorySignalErrorFull() instead")
    void reportsGetExecutionHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsGetExecutionHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsGetExecutionHistoryByBillingAccountSignalErrorFull() instead")
    void reportsGetExecutionHistoryByBillingAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsGetExecutionHistoryByBillingAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsGetExecutionHistoryByDepartmentSignalErrorFull() instead")
    void reportsGetExecutionHistoryByDepartmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsGetExecutionHistoryByDepartmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsGetExecutionHistoryByResourceGroupNameSignalErrorFull() instead")
    void reportsGetExecutionHistoryByResourceGroupNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsGetExecutionHistoryByResourceGroupNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsListSignalErrorFull() instead")
    void reportsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsListByBillingAccountSignalErrorFull() instead")
    void reportsListByBillingAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsListByBillingAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsListByDepartmentSignalErrorFull() instead")
    void reportsListByDepartmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsListByDepartmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsListByResourceGroupNameSignalErrorFull() instead")
    void reportsListByResourceGroupNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsListByResourceGroupNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
