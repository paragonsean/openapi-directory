/**
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportDeliveryDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportDeliveryDestination::OAIReportDeliveryDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportDeliveryDestination::OAIReportDeliveryDestination() {
    this->initializeModel();
}

OAIReportDeliveryDestination::~OAIReportDeliveryDestination() {}

void OAIReportDeliveryDestination::initializeModel() {

    m_container_isSet = false;
    m_container_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_root_folder_path_isSet = false;
    m_root_folder_path_isValid = false;
}

void OAIReportDeliveryDestination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportDeliveryDestination::fromJsonObject(QJsonObject json) {

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("container")]);
    m_container_isSet = !json[QString("container")].isNull() && m_container_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_root_folder_path_isValid = ::OpenAPI::fromJsonValue(m_root_folder_path, json[QString("rootFolderPath")]);
    m_root_folder_path_isSet = !json[QString("rootFolderPath")].isNull() && m_root_folder_path_isValid;
}

QString OAIReportDeliveryDestination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportDeliveryDestination::asJsonObject() const {
    QJsonObject obj;
    if (m_container_isSet) {
        obj.insert(QString("container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_root_folder_path_isSet) {
        obj.insert(QString("rootFolderPath"), ::OpenAPI::toJsonValue(m_root_folder_path));
    }
    return obj;
}

QString OAIReportDeliveryDestination::getContainer() const {
    return m_container;
}
void OAIReportDeliveryDestination::setContainer(const QString &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAIReportDeliveryDestination::is_container_Set() const{
    return m_container_isSet;
}

bool OAIReportDeliveryDestination::is_container_Valid() const{
    return m_container_isValid;
}

QString OAIReportDeliveryDestination::getResourceId() const {
    return m_resource_id;
}
void OAIReportDeliveryDestination::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIReportDeliveryDestination::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIReportDeliveryDestination::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIReportDeliveryDestination::getRootFolderPath() const {
    return m_root_folder_path;
}
void OAIReportDeliveryDestination::setRootFolderPath(const QString &root_folder_path) {
    m_root_folder_path = root_folder_path;
    m_root_folder_path_isSet = true;
}

bool OAIReportDeliveryDestination::is_root_folder_path_Set() const{
    return m_root_folder_path_isSet;
}

bool OAIReportDeliveryDestination::is_root_folder_path_Valid() const{
    return m_root_folder_path_isValid;
}

bool OAIReportDeliveryDestination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_folder_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportDeliveryDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_container_isValid && m_resource_id_isValid && true;
}

} // namespace OpenAPI
