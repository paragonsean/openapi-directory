# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DimensionProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, data: List[str]=None, description: str=None, filter_enabled: bool=None, grouping_enabled: bool=None, next_link: str=None, total: int=None, usage_end: datetime=None, usage_start: datetime=None):
        """DimensionProperties - a model defined in OpenAPI

        :param category: The category of this DimensionProperties.
        :param data: The data of this DimensionProperties.
        :param description: The description of this DimensionProperties.
        :param filter_enabled: The filter_enabled of this DimensionProperties.
        :param grouping_enabled: The grouping_enabled of this DimensionProperties.
        :param next_link: The next_link of this DimensionProperties.
        :param total: The total of this DimensionProperties.
        :param usage_end: The usage_end of this DimensionProperties.
        :param usage_start: The usage_start of this DimensionProperties.
        """
        self.openapi_types = {
            'category': str,
            'data': List[str],
            'description': str,
            'filter_enabled': bool,
            'grouping_enabled': bool,
            'next_link': str,
            'total': int,
            'usage_end': datetime,
            'usage_start': datetime
        }

        self.attribute_map = {
            'category': 'category',
            'data': 'data',
            'description': 'description',
            'filter_enabled': 'filterEnabled',
            'grouping_enabled': 'groupingEnabled',
            'next_link': 'nextLink',
            'total': 'total',
            'usage_end': 'usageEnd',
            'usage_start': 'usageStart'
        }

        self._category = category
        self._data = data
        self._description = description
        self._filter_enabled = filter_enabled
        self._grouping_enabled = grouping_enabled
        self._next_link = next_link
        self._total = total
        self._usage_end = usage_end
        self._usage_start = usage_start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DimensionProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DimensionProperties of this DimensionProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this DimensionProperties.


        :return: The category of this DimensionProperties.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this DimensionProperties.


        :param category: The category of this DimensionProperties.
        :type category: str
        """

        self._category = category

    @property
    def data(self):
        """Gets the data of this DimensionProperties.


        :return: The data of this DimensionProperties.
        :rtype: List[str]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this DimensionProperties.


        :param data: The data of this DimensionProperties.
        :type data: List[str]
        """

        self._data = data

    @property
    def description(self):
        """Gets the description of this DimensionProperties.


        :return: The description of this DimensionProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DimensionProperties.


        :param description: The description of this DimensionProperties.
        :type description: str
        """

        self._description = description

    @property
    def filter_enabled(self):
        """Gets the filter_enabled of this DimensionProperties.


        :return: The filter_enabled of this DimensionProperties.
        :rtype: bool
        """
        return self._filter_enabled

    @filter_enabled.setter
    def filter_enabled(self, filter_enabled):
        """Sets the filter_enabled of this DimensionProperties.


        :param filter_enabled: The filter_enabled of this DimensionProperties.
        :type filter_enabled: bool
        """

        self._filter_enabled = filter_enabled

    @property
    def grouping_enabled(self):
        """Gets the grouping_enabled of this DimensionProperties.


        :return: The grouping_enabled of this DimensionProperties.
        :rtype: bool
        """
        return self._grouping_enabled

    @grouping_enabled.setter
    def grouping_enabled(self, grouping_enabled):
        """Sets the grouping_enabled of this DimensionProperties.


        :param grouping_enabled: The grouping_enabled of this DimensionProperties.
        :type grouping_enabled: bool
        """

        self._grouping_enabled = grouping_enabled

    @property
    def next_link(self):
        """Gets the next_link of this DimensionProperties.


        :return: The next_link of this DimensionProperties.
        :rtype: str
        """
        return self._next_link

    @next_link.setter
    def next_link(self, next_link):
        """Sets the next_link of this DimensionProperties.


        :param next_link: The next_link of this DimensionProperties.
        :type next_link: str
        """

        self._next_link = next_link

    @property
    def total(self):
        """Gets the total of this DimensionProperties.


        :return: The total of this DimensionProperties.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this DimensionProperties.


        :param total: The total of this DimensionProperties.
        :type total: int
        """

        self._total = total

    @property
    def usage_end(self):
        """Gets the usage_end of this DimensionProperties.


        :return: The usage_end of this DimensionProperties.
        :rtype: datetime
        """
        return self._usage_end

    @usage_end.setter
    def usage_end(self, usage_end):
        """Sets the usage_end of this DimensionProperties.


        :param usage_end: The usage_end of this DimensionProperties.
        :type usage_end: datetime
        """

        self._usage_end = usage_end

    @property
    def usage_start(self):
        """Gets the usage_start of this DimensionProperties.


        :return: The usage_start of this DimensionProperties.
        :rtype: datetime
        """
        return self._usage_start

    @usage_start.setter
    def usage_start(self, usage_start):
        """Sets the usage_start of this DimensionProperties.


        :param usage_start: The usage_start of this DimensionProperties.
        :type usage_start: datetime
        """

        self._usage_start = usage_start
