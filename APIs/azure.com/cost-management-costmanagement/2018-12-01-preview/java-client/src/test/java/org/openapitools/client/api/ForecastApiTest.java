/*
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.QueryResult;
import org.openapitools.client.model.ReportConfigDefinition;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ForecastApi
 */
@Disabled
public class ForecastApiTest {

    private final ForecastApi api = new ForecastApi();

    /**
     * Forecast the usage data for billing account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void forecastUsageByBillingAccountTest() throws ApiException {
        String apiVersion = null;
        String billingAccountId = null;
        ReportConfigDefinition parameters = null;
        QueryResult response = api.forecastUsageByBillingAccount(apiVersion, billingAccountId, parameters);
        // TODO: test validations
    }

    /**
     * Forecast the usage data for department.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void forecastUsageByDepartmentTest() throws ApiException {
        String apiVersion = null;
        String billingAccountId = null;
        String departmentId = null;
        ReportConfigDefinition parameters = null;
        QueryResult response = api.forecastUsageByDepartment(apiVersion, billingAccountId, departmentId, parameters);
        // TODO: test validations
    }

    /**
     * Forecast the usage data for an enrollment account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void forecastUsageByEnrollmentAccountTest() throws ApiException {
        String apiVersion = null;
        String billingAccountId = null;
        String enrollmentAccountId = null;
        ReportConfigDefinition parameters = null;
        QueryResult response = api.forecastUsageByEnrollmentAccount(apiVersion, billingAccountId, enrollmentAccountId, parameters);
        // TODO: test validations
    }

    /**
     * Lists the usage data for management group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void forecastUsageByManagmentGroupTest() throws ApiException {
        String apiVersion = null;
        String managementGroupId = null;
        ReportConfigDefinition parameters = null;
        QueryResult response = api.forecastUsageByManagmentGroup(apiVersion, managementGroupId, parameters);
        // TODO: test validations
    }

    /**
     * Forecast the usage data for subscriptionId and resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void forecastUsageByResourceGroupTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        ReportConfigDefinition parameters = null;
        QueryResult response = api.forecastUsageByResourceGroup(apiVersion, subscriptionId, resourceGroupName, parameters);
        // TODO: test validations
    }

    /**
     * Forecast the usage data for subscriptionId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void forecastUsageBySubscriptionTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        ReportConfigDefinition parameters = null;
        QueryResult response = api.forecastUsageBySubscription(apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
