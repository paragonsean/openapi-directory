/*
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ReportConfigComparisonExpression;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The filter expression to be used in the report.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:39:55.794881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportConfigFilter {
  public static final String SERIALIZED_NAME_AND = "and";
  @SerializedName(SERIALIZED_NAME_AND)
  private List<ReportConfigFilter> and = new ArrayList<>();

  public static final String SERIALIZED_NAME_DIMENSION = "dimension";
  @SerializedName(SERIALIZED_NAME_DIMENSION)
  private ReportConfigComparisonExpression dimension;

  public static final String SERIALIZED_NAME_NOT = "not";
  @SerializedName(SERIALIZED_NAME_NOT)
  private ReportConfigFilter not;

  public static final String SERIALIZED_NAME_OR = "or";
  @SerializedName(SERIALIZED_NAME_OR)
  private List<ReportConfigFilter> or = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private ReportConfigComparisonExpression tag;

  public ReportConfigFilter() {
  }

  public ReportConfigFilter and(List<ReportConfigFilter> and) {
    this.and = and;
    return this;
  }

  public ReportConfigFilter addAndItem(ReportConfigFilter andItem) {
    if (this.and == null) {
      this.and = new ArrayList<>();
    }
    this.and.add(andItem);
    return this;
  }

  /**
   * The logical \&quot;AND\&quot; expression. Must have at least 2 items.
   * @return and
   */
  @javax.annotation.Nullable
  public List<ReportConfigFilter> getAnd() {
    return and;
  }

  public void setAnd(List<ReportConfigFilter> and) {
    this.and = and;
  }


  public ReportConfigFilter dimension(ReportConfigComparisonExpression dimension) {
    this.dimension = dimension;
    return this;
  }

  /**
   * Get dimension
   * @return dimension
   */
  @javax.annotation.Nullable
  public ReportConfigComparisonExpression getDimension() {
    return dimension;
  }

  public void setDimension(ReportConfigComparisonExpression dimension) {
    this.dimension = dimension;
  }


  public ReportConfigFilter not(ReportConfigFilter not) {
    this.not = not;
    return this;
  }

  /**
   * Get not
   * @return not
   */
  @javax.annotation.Nullable
  public ReportConfigFilter getNot() {
    return not;
  }

  public void setNot(ReportConfigFilter not) {
    this.not = not;
  }


  public ReportConfigFilter or(List<ReportConfigFilter> or) {
    this.or = or;
    return this;
  }

  public ReportConfigFilter addOrItem(ReportConfigFilter orItem) {
    if (this.or == null) {
      this.or = new ArrayList<>();
    }
    this.or.add(orItem);
    return this;
  }

  /**
   * The logical \&quot;OR\&quot; expression. Must have at least 2 items.
   * @return or
   */
  @javax.annotation.Nullable
  public List<ReportConfigFilter> getOr() {
    return or;
  }

  public void setOr(List<ReportConfigFilter> or) {
    this.or = or;
  }


  public ReportConfigFilter tag(ReportConfigComparisonExpression tag) {
    this.tag = tag;
    return this;
  }

  /**
   * Get tag
   * @return tag
   */
  @javax.annotation.Nullable
  public ReportConfigComparisonExpression getTag() {
    return tag;
  }

  public void setTag(ReportConfigComparisonExpression tag) {
    this.tag = tag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportConfigFilter reportConfigFilter = (ReportConfigFilter) o;
    return Objects.equals(this.and, reportConfigFilter.and) &&
        Objects.equals(this.dimension, reportConfigFilter.dimension) &&
        Objects.equals(this.not, reportConfigFilter.not) &&
        Objects.equals(this.or, reportConfigFilter.or) &&
        Objects.equals(this.tag, reportConfigFilter.tag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(and, dimension, not, or, tag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportConfigFilter {\n");
    sb.append("    and: ").append(toIndentedString(and)).append("\n");
    sb.append("    dimension: ").append(toIndentedString(dimension)).append("\n");
    sb.append("    not: ").append(toIndentedString(not)).append("\n");
    sb.append("    or: ").append(toIndentedString(or)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("and");
    openapiFields.add("dimension");
    openapiFields.add("not");
    openapiFields.add("or");
    openapiFields.add("tag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportConfigFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportConfigFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportConfigFilter is not found in the empty JSON string", ReportConfigFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportConfigFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportConfigFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("and") != null && !jsonObj.get("and").isJsonNull()) {
        JsonArray jsonArrayand = jsonObj.getAsJsonArray("and");
        if (jsonArrayand != null) {
          // ensure the json data is an array
          if (!jsonObj.get("and").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `and` to be an array in the JSON string but got `%s`", jsonObj.get("and").toString()));
          }

          // validate the optional field `and` (array)
          for (int i = 0; i < jsonArrayand.size(); i++) {
            ReportConfigFilter.validateJsonElement(jsonArrayand.get(i));
          };
        }
      }
      // validate the optional field `dimension`
      if (jsonObj.get("dimension") != null && !jsonObj.get("dimension").isJsonNull()) {
        ReportConfigComparisonExpression.validateJsonElement(jsonObj.get("dimension"));
      }
      // validate the optional field `not`
      if (jsonObj.get("not") != null && !jsonObj.get("not").isJsonNull()) {
        ReportConfigFilter.validateJsonElement(jsonObj.get("not"));
      }
      if (jsonObj.get("or") != null && !jsonObj.get("or").isJsonNull()) {
        JsonArray jsonArrayor = jsonObj.getAsJsonArray("or");
        if (jsonArrayor != null) {
          // ensure the json data is an array
          if (!jsonObj.get("or").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `or` to be an array in the JSON string but got `%s`", jsonObj.get("or").toString()));
          }

          // validate the optional field `or` (array)
          for (int i = 0; i < jsonArrayor.size(); i++) {
            ReportConfigFilter.validateJsonElement(jsonArrayor.get(i));
          };
        }
      }
      // validate the optional field `tag`
      if (jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) {
        ReportConfigComparisonExpression.validateJsonElement(jsonObj.get("tag"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportConfigFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportConfigFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportConfigFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportConfigFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportConfigFilter>() {
           @Override
           public void write(JsonWriter out, ReportConfigFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportConfigFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportConfigFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportConfigFilter
   * @throws IOException if the JSON string is invalid with respect to ReportConfigFilter
   */
  public static ReportConfigFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportConfigFilter.class);
  }

  /**
   * Convert an instance of ReportConfigFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

