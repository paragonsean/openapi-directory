/*
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Scope;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of a showback rule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:40:12.695104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShowbackRuleProperties {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_DEPRECATION_TIME = "deprecationTime";
  @SerializedName(SERIALIZED_NAME_DEPRECATION_TIME)
  private OffsetDateTime deprecationTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_MODIFICATION_TIME = "modificationTime";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_TIME)
  private OffsetDateTime modificationTime;

  /**
   * The rule type of the showback rule solution.
   */
  @JsonAdapter(RuleTypeEnum.Adapter.class)
  public enum RuleTypeEnum {
    CUSTOM_PRICE("CustomPrice"),
    
    COST_ALLOCATION("CostAllocation");

    private String value;

    RuleTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RuleTypeEnum fromValue(String value) {
      for (RuleTypeEnum b : RuleTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RuleTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RuleTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RuleTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RuleTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RuleTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RULE_TYPE = "ruleType";
  @SerializedName(SERIALIZED_NAME_RULE_TYPE)
  protected RuleTypeEnum ruleType;

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  private List<Scope> scopes = new ArrayList<>();

  /**
   * The current status of the showback rule.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NOT_ACTIVE("NotActive"),
    
    ACTIVE("Active");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public ShowbackRuleProperties() {
  }

  public ShowbackRuleProperties(
     OffsetDateTime creationTime, 
     OffsetDateTime deprecationTime, 
     OffsetDateTime modificationTime, 
     Integer version
  ) {
    this();
    this.creationTime = creationTime;
    this.deprecationTime = deprecationTime;
    this.modificationTime = modificationTime;
    this.version = version;
  }

  /**
   * The time when the showback rule was created.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }



  /**
   * The current time when showback rule was deprecate.
   * @return deprecationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeprecationTime() {
    return deprecationTime;
  }



  public ShowbackRuleProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of a showback rule.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * The current status when showback rule was modified.
   * @return modificationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModificationTime() {
    return modificationTime;
  }



  public ShowbackRuleProperties ruleType(RuleTypeEnum ruleType) {
    this.ruleType = ruleType;
    return this;
  }

  /**
   * The rule type of the showback rule solution.
   * @return ruleType
   */
  @javax.annotation.Nonnull
  public RuleTypeEnum getRuleType() {
    return ruleType;
  }

  public void setRuleType(RuleTypeEnum ruleType) {
    this.ruleType = ruleType;
  }


  public ShowbackRuleProperties scopes(List<Scope> scopes) {
    this.scopes = scopes;
    return this;
  }

  public ShowbackRuleProperties addScopesItem(Scope scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

  /**
   * List of authorized assigned scopes.
   * @return scopes
   */
  @javax.annotation.Nullable
  public List<Scope> getScopes() {
    return scopes;
  }

  public void setScopes(List<Scope> scopes) {
    this.scopes = scopes;
  }


  public ShowbackRuleProperties status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The current status of the showback rule.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  /**
   * The current version of showback rule.
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShowbackRuleProperties showbackRuleProperties = (ShowbackRuleProperties) o;
    return Objects.equals(this.creationTime, showbackRuleProperties.creationTime) &&
        Objects.equals(this.deprecationTime, showbackRuleProperties.deprecationTime) &&
        Objects.equals(this.description, showbackRuleProperties.description) &&
        Objects.equals(this.modificationTime, showbackRuleProperties.modificationTime) &&
        Objects.equals(this.ruleType, showbackRuleProperties.ruleType) &&
        Objects.equals(this.scopes, showbackRuleProperties.scopes) &&
        Objects.equals(this.status, showbackRuleProperties.status) &&
        Objects.equals(this.version, showbackRuleProperties.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, deprecationTime, description, modificationTime, ruleType, scopes, status, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShowbackRuleProperties {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    deprecationTime: ").append(toIndentedString(deprecationTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    modificationTime: ").append(toIndentedString(modificationTime)).append("\n");
    sb.append("    ruleType: ").append(toIndentedString(ruleType)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationTime");
    openapiFields.add("deprecationTime");
    openapiFields.add("description");
    openapiFields.add("modificationTime");
    openapiFields.add("ruleType");
    openapiFields.add("scopes");
    openapiFields.add("status");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ruleType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShowbackRuleProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShowbackRuleProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShowbackRuleProperties is not found in the empty JSON string", ShowbackRuleProperties.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("ruleType").getAsString();
      switch (discriminatorValue) {
        case "CostAllocationDetailsKind":
          CostAllocationDetailsKind.validateJsonElement(jsonElement);
          break;
        case "CustomPriceDetailsKind":
          CustomPriceDetailsKind.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `ruleType` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of ShowbackRuleProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShowbackRuleProperties
   * @throws IOException if the JSON string is invalid with respect to ShowbackRuleProperties
   */
  public static ShowbackRuleProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShowbackRuleProperties.class);
  }

  /**
   * Convert an instance of ShowbackRuleProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

