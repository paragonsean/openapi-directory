/*
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Markup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents Custom price showback rule model
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:40:12.695104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomPriceDetails {
  /**
   * Gets or Sets benefits
   */
  @JsonAdapter(BenefitsEnum.Adapter.class)
  public enum BenefitsEnum {
    NONE("None"),
    
    ALL("All"),
    
    AHUB("AHUB"),
    
    RESERVATIONS("Reservations");

    private String value;

    BenefitsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BenefitsEnum fromValue(String value) {
      for (BenefitsEnum b : BenefitsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BenefitsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BenefitsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BenefitsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BenefitsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BenefitsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BENEFITS = "benefits";
  @SerializedName(SERIALIZED_NAME_BENEFITS)
  private List<BenefitsEnum> benefits = new ArrayList<>();

  public static final String SERIALIZED_NAME_MARKUPS = "markups";
  @SerializedName(SERIALIZED_NAME_MARKUPS)
  private List<Markup> markups = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICESHEET = "pricesheet";
  @SerializedName(SERIALIZED_NAME_PRICESHEET)
  private String pricesheet;

  public CustomPriceDetails() {
  }

  public CustomPriceDetails benefits(List<BenefitsEnum> benefits) {
    this.benefits = benefits;
    return this;
  }

  public CustomPriceDetails addBenefitsItem(BenefitsEnum benefitsItem) {
    if (this.benefits == null) {
      this.benefits = new ArrayList<>();
    }
    this.benefits.add(benefitsItem);
    return this;
  }

  /**
   * Array of benefits.
   * @return benefits
   */
  @javax.annotation.Nullable
  public List<BenefitsEnum> getBenefits() {
    return benefits;
  }

  public void setBenefits(List<BenefitsEnum> benefits) {
    this.benefits = benefits;
  }


  public CustomPriceDetails markups(List<Markup> markups) {
    this.markups = markups;
    return this;
  }

  public CustomPriceDetails addMarkupsItem(Markup markupsItem) {
    if (this.markups == null) {
      this.markups = new ArrayList<>();
    }
    this.markups.add(markupsItem);
    return this;
  }

  /**
   * List of markups.
   * @return markups
   */
  @javax.annotation.Nullable
  public List<Markup> getMarkups() {
    return markups;
  }

  public void setMarkups(List<Markup> markups) {
    this.markups = markups;
  }


  public CustomPriceDetails pricesheet(String pricesheet) {
    this.pricesheet = pricesheet;
    return this;
  }

  /**
   * Get pricesheet
   * @return pricesheet
   */
  @javax.annotation.Nullable
  public String getPricesheet() {
    return pricesheet;
  }

  public void setPricesheet(String pricesheet) {
    this.pricesheet = pricesheet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomPriceDetails customPriceDetails = (CustomPriceDetails) o;
    return Objects.equals(this.benefits, customPriceDetails.benefits) &&
        Objects.equals(this.markups, customPriceDetails.markups) &&
        Objects.equals(this.pricesheet, customPriceDetails.pricesheet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(benefits, markups, pricesheet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomPriceDetails {\n");
    sb.append("    benefits: ").append(toIndentedString(benefits)).append("\n");
    sb.append("    markups: ").append(toIndentedString(markups)).append("\n");
    sb.append("    pricesheet: ").append(toIndentedString(pricesheet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("benefits");
    openapiFields.add("markups");
    openapiFields.add("pricesheet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomPriceDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomPriceDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomPriceDetails is not found in the empty JSON string", CustomPriceDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomPriceDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomPriceDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("benefits") != null && !jsonObj.get("benefits").isJsonNull() && !jsonObj.get("benefits").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `benefits` to be an array in the JSON string but got `%s`", jsonObj.get("benefits").toString()));
      }
      if (jsonObj.get("markups") != null && !jsonObj.get("markups").isJsonNull()) {
        JsonArray jsonArraymarkups = jsonObj.getAsJsonArray("markups");
        if (jsonArraymarkups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("markups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `markups` to be an array in the JSON string but got `%s`", jsonObj.get("markups").toString()));
          }

          // validate the optional field `markups` (array)
          for (int i = 0; i < jsonArraymarkups.size(); i++) {
            Markup.validateJsonElement(jsonArraymarkups.get(i));
          };
        }
      }
      if ((jsonObj.get("pricesheet") != null && !jsonObj.get("pricesheet").isJsonNull()) && !jsonObj.get("pricesheet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pricesheet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pricesheet").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomPriceDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomPriceDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomPriceDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomPriceDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomPriceDetails>() {
           @Override
           public void write(JsonWriter out, CustomPriceDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomPriceDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomPriceDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomPriceDetails
   * @throws IOException if the JSON string is invalid with respect to CustomPriceDetails
   */
  public static CustomPriceDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomPriceDetails.class);
  }

  /**
   * Convert an instance of CustomPriceDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

