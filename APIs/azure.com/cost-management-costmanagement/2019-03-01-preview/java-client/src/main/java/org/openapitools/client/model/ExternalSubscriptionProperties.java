/*
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConnectorCollectionInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of a ExternalSubscription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:40:12.695104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExternalSubscriptionProperties {
  public static final String SERIALIZED_NAME_COLLECTION_INFO = "collectionInfo";
  @SerializedName(SERIALIZED_NAME_COLLECTION_INFO)
  private ConnectorCollectionInfo collectionInfo;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EXTERNAL_BILLING_ACCOUNT_ID = "externalBillingAccountId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_BILLING_ACCOUNT_ID)
  private String externalBillingAccountId;

  public static final String SERIALIZED_NAME_MANAGEMENT_GROUP_ID = "managementGroupId";
  @SerializedName(SERIALIZED_NAME_MANAGEMENT_GROUP_ID)
  private String managementGroupId;

  public static final String SERIALIZED_NAME_PROVIDER_ACCOUNT_ID = "providerAccountId";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ACCOUNT_ID)
  private String providerAccountId;

  public static final String SERIALIZED_NAME_PROVIDER_BILLING_ACCOUNT_ID = "providerBillingAccountId";
  @SerializedName(SERIALIZED_NAME_PROVIDER_BILLING_ACCOUNT_ID)
  private String providerBillingAccountId;

  public ExternalSubscriptionProperties() {
  }

  public ExternalSubscriptionProperties(
     String displayName, 
     String externalBillingAccountId, 
     String managementGroupId, 
     String providerAccountId, 
     String providerBillingAccountId
  ) {
    this();
    this.displayName = displayName;
    this.externalBillingAccountId = externalBillingAccountId;
    this.managementGroupId = managementGroupId;
    this.providerAccountId = providerAccountId;
    this.providerBillingAccountId = providerBillingAccountId;
  }

  public ExternalSubscriptionProperties collectionInfo(ConnectorCollectionInfo collectionInfo) {
    this.collectionInfo = collectionInfo;
    return this;
  }

  /**
   * Get collectionInfo
   * @return collectionInfo
   */
  @javax.annotation.Nullable
  public ConnectorCollectionInfo getCollectionInfo() {
    return collectionInfo;
  }

  public void setCollectionInfo(ConnectorCollectionInfo collectionInfo) {
    this.collectionInfo = collectionInfo;
  }


  /**
   * ExternalSubscription DisplayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  /**
   * Parent ExternalBillingAccountId
   * @return externalBillingAccountId
   */
  @javax.annotation.Nullable
  public String getExternalBillingAccountId() {
    return externalBillingAccountId;
  }



  /**
   * Assigned ManagementGroupId
   * @return managementGroupId
   */
  @javax.annotation.Nullable
  public String getManagementGroupId() {
    return managementGroupId;
  }



  /**
   * Provider AccountId (eg AWS Linked Account number)
   * @return providerAccountId
   */
  @javax.annotation.Nullable
  public String getProviderAccountId() {
    return providerAccountId;
  }



  /**
   * Provider BillingAccountId (eg AWS Consolidated Account number)
   * @return providerBillingAccountId
   */
  @javax.annotation.Nullable
  public String getProviderBillingAccountId() {
    return providerBillingAccountId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExternalSubscriptionProperties externalSubscriptionProperties = (ExternalSubscriptionProperties) o;
    return Objects.equals(this.collectionInfo, externalSubscriptionProperties.collectionInfo) &&
        Objects.equals(this.displayName, externalSubscriptionProperties.displayName) &&
        Objects.equals(this.externalBillingAccountId, externalSubscriptionProperties.externalBillingAccountId) &&
        Objects.equals(this.managementGroupId, externalSubscriptionProperties.managementGroupId) &&
        Objects.equals(this.providerAccountId, externalSubscriptionProperties.providerAccountId) &&
        Objects.equals(this.providerBillingAccountId, externalSubscriptionProperties.providerBillingAccountId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collectionInfo, displayName, externalBillingAccountId, managementGroupId, providerAccountId, providerBillingAccountId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExternalSubscriptionProperties {\n");
    sb.append("    collectionInfo: ").append(toIndentedString(collectionInfo)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    externalBillingAccountId: ").append(toIndentedString(externalBillingAccountId)).append("\n");
    sb.append("    managementGroupId: ").append(toIndentedString(managementGroupId)).append("\n");
    sb.append("    providerAccountId: ").append(toIndentedString(providerAccountId)).append("\n");
    sb.append("    providerBillingAccountId: ").append(toIndentedString(providerBillingAccountId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("collectionInfo");
    openapiFields.add("displayName");
    openapiFields.add("externalBillingAccountId");
    openapiFields.add("managementGroupId");
    openapiFields.add("providerAccountId");
    openapiFields.add("providerBillingAccountId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExternalSubscriptionProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExternalSubscriptionProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExternalSubscriptionProperties is not found in the empty JSON string", ExternalSubscriptionProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExternalSubscriptionProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExternalSubscriptionProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `collectionInfo`
      if (jsonObj.get("collectionInfo") != null && !jsonObj.get("collectionInfo").isJsonNull()) {
        ConnectorCollectionInfo.validateJsonElement(jsonObj.get("collectionInfo"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("externalBillingAccountId") != null && !jsonObj.get("externalBillingAccountId").isJsonNull()) && !jsonObj.get("externalBillingAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalBillingAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalBillingAccountId").toString()));
      }
      if ((jsonObj.get("managementGroupId") != null && !jsonObj.get("managementGroupId").isJsonNull()) && !jsonObj.get("managementGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managementGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managementGroupId").toString()));
      }
      if ((jsonObj.get("providerAccountId") != null && !jsonObj.get("providerAccountId").isJsonNull()) && !jsonObj.get("providerAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerAccountId").toString()));
      }
      if ((jsonObj.get("providerBillingAccountId") != null && !jsonObj.get("providerBillingAccountId").isJsonNull()) && !jsonObj.get("providerBillingAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerBillingAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerBillingAccountId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExternalSubscriptionProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExternalSubscriptionProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExternalSubscriptionProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExternalSubscriptionProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ExternalSubscriptionProperties>() {
           @Override
           public void write(JsonWriter out, ExternalSubscriptionProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExternalSubscriptionProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExternalSubscriptionProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExternalSubscriptionProperties
   * @throws IOException if the JSON string is invalid with respect to ExternalSubscriptionProperties
   */
  public static ExternalSubscriptionProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExternalSubscriptionProperties.class);
  }

  /**
   * Convert an instance of ExternalSubscriptionProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

