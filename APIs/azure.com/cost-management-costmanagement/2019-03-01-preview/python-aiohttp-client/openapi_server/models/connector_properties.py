# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connector_collection_info import ConnectorCollectionInfo
from openapi_server import util


class ConnectorProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_model: str=None, collection_info: ConnectorCollectionInfo=None, created_on: datetime=None, credentials_key: str=None, credentials_secret: str=None, days_trial_remaining: int=None, default_management_group_id: str=None, display_name: str=None, external_billing_account_id: str=None, modified_on: datetime=None, provider_billing_account_display_name: str=None, provider_billing_account_id: str=None, report_id: str=None, status: str=None, subscription_id: str=None):
        """ConnectorProperties - a model defined in OpenAPI

        :param billing_model: The billing_model of this ConnectorProperties.
        :param collection_info: The collection_info of this ConnectorProperties.
        :param created_on: The created_on of this ConnectorProperties.
        :param credentials_key: The credentials_key of this ConnectorProperties.
        :param credentials_secret: The credentials_secret of this ConnectorProperties.
        :param days_trial_remaining: The days_trial_remaining of this ConnectorProperties.
        :param default_management_group_id: The default_management_group_id of this ConnectorProperties.
        :param display_name: The display_name of this ConnectorProperties.
        :param external_billing_account_id: The external_billing_account_id of this ConnectorProperties.
        :param modified_on: The modified_on of this ConnectorProperties.
        :param provider_billing_account_display_name: The provider_billing_account_display_name of this ConnectorProperties.
        :param provider_billing_account_id: The provider_billing_account_id of this ConnectorProperties.
        :param report_id: The report_id of this ConnectorProperties.
        :param status: The status of this ConnectorProperties.
        :param subscription_id: The subscription_id of this ConnectorProperties.
        """
        self.openapi_types = {
            'billing_model': str,
            'collection_info': ConnectorCollectionInfo,
            'created_on': datetime,
            'credentials_key': str,
            'credentials_secret': str,
            'days_trial_remaining': int,
            'default_management_group_id': str,
            'display_name': str,
            'external_billing_account_id': str,
            'modified_on': datetime,
            'provider_billing_account_display_name': str,
            'provider_billing_account_id': str,
            'report_id': str,
            'status': str,
            'subscription_id': str
        }

        self.attribute_map = {
            'billing_model': 'billingModel',
            'collection_info': 'collectionInfo',
            'created_on': 'createdOn',
            'credentials_key': 'credentialsKey',
            'credentials_secret': 'credentialsSecret',
            'days_trial_remaining': 'daysTrialRemaining',
            'default_management_group_id': 'defaultManagementGroupId',
            'display_name': 'displayName',
            'external_billing_account_id': 'externalBillingAccountId',
            'modified_on': 'modifiedOn',
            'provider_billing_account_display_name': 'providerBillingAccountDisplayName',
            'provider_billing_account_id': 'providerBillingAccountId',
            'report_id': 'reportId',
            'status': 'status',
            'subscription_id': 'subscriptionId'
        }

        self._billing_model = billing_model
        self._collection_info = collection_info
        self._created_on = created_on
        self._credentials_key = credentials_key
        self._credentials_secret = credentials_secret
        self._days_trial_remaining = days_trial_remaining
        self._default_management_group_id = default_management_group_id
        self._display_name = display_name
        self._external_billing_account_id = external_billing_account_id
        self._modified_on = modified_on
        self._provider_billing_account_display_name = provider_billing_account_display_name
        self._provider_billing_account_id = provider_billing_account_id
        self._report_id = report_id
        self._status = status
        self._subscription_id = subscription_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectorProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectorProperties of this ConnectorProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_model(self):
        """Gets the billing_model of this ConnectorProperties.

        Connector billing model

        :return: The billing_model of this ConnectorProperties.
        :rtype: str
        """
        return self._billing_model

    @billing_model.setter
    def billing_model(self, billing_model):
        """Sets the billing_model of this ConnectorProperties.

        Connector billing model

        :param billing_model: The billing_model of this ConnectorProperties.
        :type billing_model: str
        """
        allowed_values = ["trial", "autoUpgrade", "premium", "expired"]  # noqa: E501
        if billing_model not in allowed_values:
            raise ValueError(
                "Invalid value for `billing_model` ({0}), must be one of {1}"
                .format(billing_model, allowed_values)
            )

        self._billing_model = billing_model

    @property
    def collection_info(self):
        """Gets the collection_info of this ConnectorProperties.


        :return: The collection_info of this ConnectorProperties.
        :rtype: ConnectorCollectionInfo
        """
        return self._collection_info

    @collection_info.setter
    def collection_info(self, collection_info):
        """Sets the collection_info of this ConnectorProperties.


        :param collection_info: The collection_info of this ConnectorProperties.
        :type collection_info: ConnectorCollectionInfo
        """

        self._collection_info = collection_info

    @property
    def created_on(self):
        """Gets the created_on of this ConnectorProperties.

        Connector definition creation datetime

        :return: The created_on of this ConnectorProperties.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this ConnectorProperties.

        Connector definition creation datetime

        :param created_on: The created_on of this ConnectorProperties.
        :type created_on: datetime
        """

        self._created_on = created_on

    @property
    def credentials_key(self):
        """Gets the credentials_key of this ConnectorProperties.

        Credentials authentication key (eg AWS ARN)

        :return: The credentials_key of this ConnectorProperties.
        :rtype: str
        """
        return self._credentials_key

    @credentials_key.setter
    def credentials_key(self, credentials_key):
        """Sets the credentials_key of this ConnectorProperties.

        Credentials authentication key (eg AWS ARN)

        :param credentials_key: The credentials_key of this ConnectorProperties.
        :type credentials_key: str
        """

        self._credentials_key = credentials_key

    @property
    def credentials_secret(self):
        """Gets the credentials_secret of this ConnectorProperties.

        Credentials secret (eg AWS ExternalId)

        :return: The credentials_secret of this ConnectorProperties.
        :rtype: str
        """
        return self._credentials_secret

    @credentials_secret.setter
    def credentials_secret(self, credentials_secret):
        """Sets the credentials_secret of this ConnectorProperties.

        Credentials secret (eg AWS ExternalId)

        :param credentials_secret: The credentials_secret of this ConnectorProperties.
        :type credentials_secret: str
        """

        self._credentials_secret = credentials_secret

    @property
    def days_trial_remaining(self):
        """Gets the days_trial_remaining of this ConnectorProperties.

        Number of days remaining of trial

        :return: The days_trial_remaining of this ConnectorProperties.
        :rtype: int
        """
        return self._days_trial_remaining

    @days_trial_remaining.setter
    def days_trial_remaining(self, days_trial_remaining):
        """Sets the days_trial_remaining of this ConnectorProperties.

        Number of days remaining of trial

        :param days_trial_remaining: The days_trial_remaining of this ConnectorProperties.
        :type days_trial_remaining: int
        """

        self._days_trial_remaining = days_trial_remaining

    @property
    def default_management_group_id(self):
        """Gets the default_management_group_id of this ConnectorProperties.

        Default ManagementGroupId

        :return: The default_management_group_id of this ConnectorProperties.
        :rtype: str
        """
        return self._default_management_group_id

    @default_management_group_id.setter
    def default_management_group_id(self, default_management_group_id):
        """Sets the default_management_group_id of this ConnectorProperties.

        Default ManagementGroupId

        :param default_management_group_id: The default_management_group_id of this ConnectorProperties.
        :type default_management_group_id: str
        """

        self._default_management_group_id = default_management_group_id

    @property
    def display_name(self):
        """Gets the display_name of this ConnectorProperties.

        Connector DisplayName

        :return: The display_name of this ConnectorProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ConnectorProperties.

        Connector DisplayName

        :param display_name: The display_name of this ConnectorProperties.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def external_billing_account_id(self):
        """Gets the external_billing_account_id of this ConnectorProperties.

        Associated ExternalBillingAccountId

        :return: The external_billing_account_id of this ConnectorProperties.
        :rtype: str
        """
        return self._external_billing_account_id

    @external_billing_account_id.setter
    def external_billing_account_id(self, external_billing_account_id):
        """Sets the external_billing_account_id of this ConnectorProperties.

        Associated ExternalBillingAccountId

        :param external_billing_account_id: The external_billing_account_id of this ConnectorProperties.
        :type external_billing_account_id: str
        """

        self._external_billing_account_id = external_billing_account_id

    @property
    def modified_on(self):
        """Gets the modified_on of this ConnectorProperties.

        Connector last modified datetime

        :return: The modified_on of this ConnectorProperties.
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this ConnectorProperties.

        Connector last modified datetime

        :param modified_on: The modified_on of this ConnectorProperties.
        :type modified_on: datetime
        """

        self._modified_on = modified_on

    @property
    def provider_billing_account_display_name(self):
        """Gets the provider_billing_account_display_name of this ConnectorProperties.

        The display name of the providerBillingAccountId as defined on the external provider

        :return: The provider_billing_account_display_name of this ConnectorProperties.
        :rtype: str
        """
        return self._provider_billing_account_display_name

    @provider_billing_account_display_name.setter
    def provider_billing_account_display_name(self, provider_billing_account_display_name):
        """Sets the provider_billing_account_display_name of this ConnectorProperties.

        The display name of the providerBillingAccountId as defined on the external provider

        :param provider_billing_account_display_name: The provider_billing_account_display_name of this ConnectorProperties.
        :type provider_billing_account_display_name: str
        """

        self._provider_billing_account_display_name = provider_billing_account_display_name

    @property
    def provider_billing_account_id(self):
        """Gets the provider_billing_account_id of this ConnectorProperties.

        Connector providerBillingAccountId, determined from credentials (eg AWS Consolidated account number)

        :return: The provider_billing_account_id of this ConnectorProperties.
        :rtype: str
        """
        return self._provider_billing_account_id

    @provider_billing_account_id.setter
    def provider_billing_account_id(self, provider_billing_account_id):
        """Sets the provider_billing_account_id of this ConnectorProperties.

        Connector providerBillingAccountId, determined from credentials (eg AWS Consolidated account number)

        :param provider_billing_account_id: The provider_billing_account_id of this ConnectorProperties.
        :type provider_billing_account_id: str
        """

        self._provider_billing_account_id = provider_billing_account_id

    @property
    def report_id(self):
        """Gets the report_id of this ConnectorProperties.

        Identifying source report. (For AWS this is a CUR report name, defined with Daily and with Resources)

        :return: The report_id of this ConnectorProperties.
        :rtype: str
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this ConnectorProperties.

        Identifying source report. (For AWS this is a CUR report name, defined with Daily and with Resources)

        :param report_id: The report_id of this ConnectorProperties.
        :type report_id: str
        """

        self._report_id = report_id

    @property
    def status(self):
        """Gets the status of this ConnectorProperties.

        Connector status

        :return: The status of this ConnectorProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ConnectorProperties.

        Connector status

        :param status: The status of this ConnectorProperties.
        :type status: str
        """
        allowed_values = ["active", "error", "expired", "warning"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def subscription_id(self):
        """Gets the subscription_id of this ConnectorProperties.

        Billing SubscriptionId

        :return: The subscription_id of this ConnectorProperties.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this ConnectorProperties.

        Billing SubscriptionId

        :param subscription_id: The subscription_id of this ConnectorProperties.
        :type subscription_id: str
        """

        self._subscription_id = subscription_id
