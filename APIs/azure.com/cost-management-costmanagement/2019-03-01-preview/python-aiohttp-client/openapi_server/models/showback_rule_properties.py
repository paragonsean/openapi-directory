# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scope import Scope
from openapi_server import util


class ShowbackRuleProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_time: datetime=None, deprecation_time: datetime=None, description: str=None, modification_time: datetime=None, rule_type: str=None, scopes: List[Scope]=None, status: str=None, version: int=None):
        """ShowbackRuleProperties - a model defined in OpenAPI

        :param creation_time: The creation_time of this ShowbackRuleProperties.
        :param deprecation_time: The deprecation_time of this ShowbackRuleProperties.
        :param description: The description of this ShowbackRuleProperties.
        :param modification_time: The modification_time of this ShowbackRuleProperties.
        :param rule_type: The rule_type of this ShowbackRuleProperties.
        :param scopes: The scopes of this ShowbackRuleProperties.
        :param status: The status of this ShowbackRuleProperties.
        :param version: The version of this ShowbackRuleProperties.
        """
        self.openapi_types = {
            'creation_time': datetime,
            'deprecation_time': datetime,
            'description': str,
            'modification_time': datetime,
            'rule_type': str,
            'scopes': List[Scope],
            'status': str,
            'version': int
        }

        self.attribute_map = {
            'creation_time': 'creationTime',
            'deprecation_time': 'deprecationTime',
            'description': 'description',
            'modification_time': 'modificationTime',
            'rule_type': 'ruleType',
            'scopes': 'scopes',
            'status': 'status',
            'version': 'version'
        }

        self._creation_time = creation_time
        self._deprecation_time = deprecation_time
        self._description = description
        self._modification_time = modification_time
        self._rule_type = rule_type
        self._scopes = scopes
        self._status = status
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShowbackRuleProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShowbackRuleProperties of this ShowbackRuleProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_time(self):
        """Gets the creation_time of this ShowbackRuleProperties.

        The time when the showback rule was created.

        :return: The creation_time of this ShowbackRuleProperties.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this ShowbackRuleProperties.

        The time when the showback rule was created.

        :param creation_time: The creation_time of this ShowbackRuleProperties.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def deprecation_time(self):
        """Gets the deprecation_time of this ShowbackRuleProperties.

        The current time when showback rule was deprecate.

        :return: The deprecation_time of this ShowbackRuleProperties.
        :rtype: datetime
        """
        return self._deprecation_time

    @deprecation_time.setter
    def deprecation_time(self, deprecation_time):
        """Sets the deprecation_time of this ShowbackRuleProperties.

        The current time when showback rule was deprecate.

        :param deprecation_time: The deprecation_time of this ShowbackRuleProperties.
        :type deprecation_time: datetime
        """

        self._deprecation_time = deprecation_time

    @property
    def description(self):
        """Gets the description of this ShowbackRuleProperties.

        Description of a showback rule.

        :return: The description of this ShowbackRuleProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ShowbackRuleProperties.

        Description of a showback rule.

        :param description: The description of this ShowbackRuleProperties.
        :type description: str
        """

        self._description = description

    @property
    def modification_time(self):
        """Gets the modification_time of this ShowbackRuleProperties.

        The current status when showback rule was modified.

        :return: The modification_time of this ShowbackRuleProperties.
        :rtype: datetime
        """
        return self._modification_time

    @modification_time.setter
    def modification_time(self, modification_time):
        """Sets the modification_time of this ShowbackRuleProperties.

        The current status when showback rule was modified.

        :param modification_time: The modification_time of this ShowbackRuleProperties.
        :type modification_time: datetime
        """

        self._modification_time = modification_time

    @property
    def rule_type(self):
        """Gets the rule_type of this ShowbackRuleProperties.

        The rule type of the showback rule solution.

        :return: The rule_type of this ShowbackRuleProperties.
        :rtype: str
        """
        return self._rule_type

    @rule_type.setter
    def rule_type(self, rule_type):
        """Sets the rule_type of this ShowbackRuleProperties.

        The rule type of the showback rule solution.

        :param rule_type: The rule_type of this ShowbackRuleProperties.
        :type rule_type: str
        """
        allowed_values = ["CustomPrice", "CostAllocation"]  # noqa: E501
        if rule_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rule_type` ({0}), must be one of {1}"
                .format(rule_type, allowed_values)
            )

        self._rule_type = rule_type

    @property
    def scopes(self):
        """Gets the scopes of this ShowbackRuleProperties.

        List of authorized assigned scopes.

        :return: The scopes of this ShowbackRuleProperties.
        :rtype: List[Scope]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this ShowbackRuleProperties.

        List of authorized assigned scopes.

        :param scopes: The scopes of this ShowbackRuleProperties.
        :type scopes: List[Scope]
        """

        self._scopes = scopes

    @property
    def status(self):
        """Gets the status of this ShowbackRuleProperties.

        The current status of the showback rule.

        :return: The status of this ShowbackRuleProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ShowbackRuleProperties.

        The current status of the showback rule.

        :param status: The status of this ShowbackRuleProperties.
        :type status: str
        """
        allowed_values = ["NotActive", "Active"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def version(self):
        """Gets the version of this ShowbackRuleProperties.

        The current version of showback rule.

        :return: The version of this ShowbackRuleProperties.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ShowbackRuleProperties.

        The current version of showback rule.

        :param version: The version of this ShowbackRuleProperties.
        :type version: int
        """

        self._version = version
