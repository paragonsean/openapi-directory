# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReportConfigSorting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, direction: str=None, name: str=None):
        """ReportConfigSorting - a model defined in OpenAPI

        :param direction: The direction of this ReportConfigSorting.
        :param name: The name of this ReportConfigSorting.
        """
        self.openapi_types = {
            'direction': str,
            'name': str
        }

        self.attribute_map = {
            'direction': 'direction',
            'name': 'name'
        }

        self._direction = direction
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportConfigSorting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportConfigSorting of this ReportConfigSorting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def direction(self):
        """Gets the direction of this ReportConfigSorting.

        Direction of sort.

        :return: The direction of this ReportConfigSorting.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this ReportConfigSorting.

        Direction of sort.

        :param direction: The direction of this ReportConfigSorting.
        :type direction: str
        """
        allowed_values = ["Ascending", "Descending"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def name(self):
        """Gets the name of this ReportConfigSorting.

        The name of the column to sort.

        :return: The name of this ReportConfigSorting.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReportConfigSorting.

        The name of the column to sort.

        :param name: The name of this ReportConfigSorting.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
