# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.markup import Markup
from openapi_server import util


class CustomPriceDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, benefits: List[str]=None, markups: List[Markup]=None, pricesheet: str=None):
        """CustomPriceDetails - a model defined in OpenAPI

        :param benefits: The benefits of this CustomPriceDetails.
        :param markups: The markups of this CustomPriceDetails.
        :param pricesheet: The pricesheet of this CustomPriceDetails.
        """
        self.openapi_types = {
            'benefits': List[str],
            'markups': List[Markup],
            'pricesheet': str
        }

        self.attribute_map = {
            'benefits': 'benefits',
            'markups': 'markups',
            'pricesheet': 'pricesheet'
        }

        self._benefits = benefits
        self._markups = markups
        self._pricesheet = pricesheet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomPriceDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomPriceDetails of this CustomPriceDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def benefits(self):
        """Gets the benefits of this CustomPriceDetails.

        Array of benefits.

        :return: The benefits of this CustomPriceDetails.
        :rtype: List[str]
        """
        return self._benefits

    @benefits.setter
    def benefits(self, benefits):
        """Sets the benefits of this CustomPriceDetails.

        Array of benefits.

        :param benefits: The benefits of this CustomPriceDetails.
        :type benefits: List[str]
        """
        allowed_values = ["None", "All", "AHUB", "Reservations"]  # noqa: E501
        if not set(benefits).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `benefits` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(benefits) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._benefits = benefits

    @property
    def markups(self):
        """Gets the markups of this CustomPriceDetails.

        List of markups.

        :return: The markups of this CustomPriceDetails.
        :rtype: List[Markup]
        """
        return self._markups

    @markups.setter
    def markups(self, markups):
        """Sets the markups of this CustomPriceDetails.

        List of markups.

        :param markups: The markups of this CustomPriceDetails.
        :type markups: List[Markup]
        """

        self._markups = markups

    @property
    def pricesheet(self):
        """Gets the pricesheet of this CustomPriceDetails.


        :return: The pricesheet of this CustomPriceDetails.
        :rtype: str
        """
        return self._pricesheet

    @pricesheet.setter
    def pricesheet(self, pricesheet):
        """Sets the pricesheet of this CustomPriceDetails.


        :param pricesheet: The pricesheet of this CustomPriceDetails.
        :type pricesheet: str
        """

        self._pricesheet = pricesheet
