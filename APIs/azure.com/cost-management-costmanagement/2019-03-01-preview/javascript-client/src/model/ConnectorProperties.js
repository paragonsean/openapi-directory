/**
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConnectorCollectionInfo from './ConnectorCollectionInfo';

/**
 * The ConnectorProperties model module.
 * @module model/ConnectorProperties
 * @version 2019-03-01-preview
 */
class ConnectorProperties {
    /**
     * Constructs a new <code>ConnectorProperties</code>.
     * The properties of a Connector
     * @alias module:model/ConnectorProperties
     */
    constructor() { 
        
        ConnectorProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConnectorProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectorProperties} obj Optional instance to populate.
     * @return {module:model/ConnectorProperties} The populated <code>ConnectorProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectorProperties();

            if (data.hasOwnProperty('billingModel')) {
                obj['billingModel'] = ApiClient.convertToType(data['billingModel'], 'String');
            }
            if (data.hasOwnProperty('collectionInfo')) {
                obj['collectionInfo'] = ConnectorCollectionInfo.constructFromObject(data['collectionInfo']);
            }
            if (data.hasOwnProperty('createdOn')) {
                obj['createdOn'] = ApiClient.convertToType(data['createdOn'], 'Date');
            }
            if (data.hasOwnProperty('credentialsKey')) {
                obj['credentialsKey'] = ApiClient.convertToType(data['credentialsKey'], 'String');
            }
            if (data.hasOwnProperty('credentialsSecret')) {
                obj['credentialsSecret'] = ApiClient.convertToType(data['credentialsSecret'], 'String');
            }
            if (data.hasOwnProperty('daysTrialRemaining')) {
                obj['daysTrialRemaining'] = ApiClient.convertToType(data['daysTrialRemaining'], 'Number');
            }
            if (data.hasOwnProperty('defaultManagementGroupId')) {
                obj['defaultManagementGroupId'] = ApiClient.convertToType(data['defaultManagementGroupId'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('externalBillingAccountId')) {
                obj['externalBillingAccountId'] = ApiClient.convertToType(data['externalBillingAccountId'], 'String');
            }
            if (data.hasOwnProperty('modifiedOn')) {
                obj['modifiedOn'] = ApiClient.convertToType(data['modifiedOn'], 'Date');
            }
            if (data.hasOwnProperty('providerBillingAccountDisplayName')) {
                obj['providerBillingAccountDisplayName'] = ApiClient.convertToType(data['providerBillingAccountDisplayName'], 'String');
            }
            if (data.hasOwnProperty('providerBillingAccountId')) {
                obj['providerBillingAccountId'] = ApiClient.convertToType(data['providerBillingAccountId'], 'String');
            }
            if (data.hasOwnProperty('reportId')) {
                obj['reportId'] = ApiClient.convertToType(data['reportId'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('subscriptionId')) {
                obj['subscriptionId'] = ApiClient.convertToType(data['subscriptionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectorProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectorProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['billingModel'] && !(typeof data['billingModel'] === 'string' || data['billingModel'] instanceof String)) {
            throw new Error("Expected the field `billingModel` to be a primitive type in the JSON string but got " + data['billingModel']);
        }
        // validate the optional field `collectionInfo`
        if (data['collectionInfo']) { // data not null
          ConnectorCollectionInfo.validateJSON(data['collectionInfo']);
        }
        // ensure the json data is a string
        if (data['credentialsKey'] && !(typeof data['credentialsKey'] === 'string' || data['credentialsKey'] instanceof String)) {
            throw new Error("Expected the field `credentialsKey` to be a primitive type in the JSON string but got " + data['credentialsKey']);
        }
        // ensure the json data is a string
        if (data['credentialsSecret'] && !(typeof data['credentialsSecret'] === 'string' || data['credentialsSecret'] instanceof String)) {
            throw new Error("Expected the field `credentialsSecret` to be a primitive type in the JSON string but got " + data['credentialsSecret']);
        }
        // ensure the json data is a string
        if (data['defaultManagementGroupId'] && !(typeof data['defaultManagementGroupId'] === 'string' || data['defaultManagementGroupId'] instanceof String)) {
            throw new Error("Expected the field `defaultManagementGroupId` to be a primitive type in the JSON string but got " + data['defaultManagementGroupId']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['externalBillingAccountId'] && !(typeof data['externalBillingAccountId'] === 'string' || data['externalBillingAccountId'] instanceof String)) {
            throw new Error("Expected the field `externalBillingAccountId` to be a primitive type in the JSON string but got " + data['externalBillingAccountId']);
        }
        // ensure the json data is a string
        if (data['providerBillingAccountDisplayName'] && !(typeof data['providerBillingAccountDisplayName'] === 'string' || data['providerBillingAccountDisplayName'] instanceof String)) {
            throw new Error("Expected the field `providerBillingAccountDisplayName` to be a primitive type in the JSON string but got " + data['providerBillingAccountDisplayName']);
        }
        // ensure the json data is a string
        if (data['providerBillingAccountId'] && !(typeof data['providerBillingAccountId'] === 'string' || data['providerBillingAccountId'] instanceof String)) {
            throw new Error("Expected the field `providerBillingAccountId` to be a primitive type in the JSON string but got " + data['providerBillingAccountId']);
        }
        // ensure the json data is a string
        if (data['reportId'] && !(typeof data['reportId'] === 'string' || data['reportId'] instanceof String)) {
            throw new Error("Expected the field `reportId` to be a primitive type in the JSON string but got " + data['reportId']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['subscriptionId'] && !(typeof data['subscriptionId'] === 'string' || data['subscriptionId'] instanceof String)) {
            throw new Error("Expected the field `subscriptionId` to be a primitive type in the JSON string but got " + data['subscriptionId']);
        }

        return true;
    }


}



/**
 * Connector billing model
 * @member {module:model/ConnectorProperties.BillingModelEnum} billingModel
 */
ConnectorProperties.prototype['billingModel'] = undefined;

/**
 * @member {module:model/ConnectorCollectionInfo} collectionInfo
 */
ConnectorProperties.prototype['collectionInfo'] = undefined;

/**
 * Connector definition creation datetime
 * @member {Date} createdOn
 */
ConnectorProperties.prototype['createdOn'] = undefined;

/**
 * Credentials authentication key (eg AWS ARN)
 * @member {String} credentialsKey
 */
ConnectorProperties.prototype['credentialsKey'] = undefined;

/**
 * Credentials secret (eg AWS ExternalId)
 * @member {String} credentialsSecret
 */
ConnectorProperties.prototype['credentialsSecret'] = undefined;

/**
 * Number of days remaining of trial
 * @member {Number} daysTrialRemaining
 */
ConnectorProperties.prototype['daysTrialRemaining'] = undefined;

/**
 * Default ManagementGroupId
 * @member {String} defaultManagementGroupId
 */
ConnectorProperties.prototype['defaultManagementGroupId'] = undefined;

/**
 * Connector DisplayName
 * @member {String} displayName
 */
ConnectorProperties.prototype['displayName'] = undefined;

/**
 * Associated ExternalBillingAccountId
 * @member {String} externalBillingAccountId
 */
ConnectorProperties.prototype['externalBillingAccountId'] = undefined;

/**
 * Connector last modified datetime
 * @member {Date} modifiedOn
 */
ConnectorProperties.prototype['modifiedOn'] = undefined;

/**
 * The display name of the providerBillingAccountId as defined on the external provider
 * @member {String} providerBillingAccountDisplayName
 */
ConnectorProperties.prototype['providerBillingAccountDisplayName'] = undefined;

/**
 * Connector providerBillingAccountId, determined from credentials (eg AWS Consolidated account number)
 * @member {String} providerBillingAccountId
 */
ConnectorProperties.prototype['providerBillingAccountId'] = undefined;

/**
 * Identifying source report. (For AWS this is a CUR report name, defined with Daily and with Resources)
 * @member {String} reportId
 */
ConnectorProperties.prototype['reportId'] = undefined;

/**
 * Connector status
 * @member {module:model/ConnectorProperties.StatusEnum} status
 */
ConnectorProperties.prototype['status'] = undefined;

/**
 * Billing SubscriptionId
 * @member {String} subscriptionId
 */
ConnectorProperties.prototype['subscriptionId'] = undefined;





/**
 * Allowed values for the <code>billingModel</code> property.
 * @enum {String}
 * @readonly
 */
ConnectorProperties['BillingModelEnum'] = {

    /**
     * value: "trial"
     * @const
     */
    "trial": "trial",

    /**
     * value: "autoUpgrade"
     * @const
     */
    "autoUpgrade": "autoUpgrade",

    /**
     * value: "premium"
     * @const
     */
    "premium": "premium",

    /**
     * value: "expired"
     * @const
     */
    "expired": "expired"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ConnectorProperties['StatusEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "error"
     * @const
     */
    "error": "error",

    /**
     * value: "expired"
     * @const
     */
    "expired": "expired",

    /**
     * value: "warning"
     * @const
     */
    "warning": "warning"
};



export default ConnectorProperties;

