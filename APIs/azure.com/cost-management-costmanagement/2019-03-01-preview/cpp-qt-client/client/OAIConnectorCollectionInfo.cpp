/**
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectorCollectionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectorCollectionInfo::OAIConnectorCollectionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectorCollectionInfo::OAIConnectorCollectionInfo() {
    this->initializeModel();
}

OAIConnectorCollectionInfo::~OAIConnectorCollectionInfo() {}

void OAIConnectorCollectionInfo::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_last_checked_isSet = false;
    m_last_checked_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_source_last_updated_isSet = false;
    m_source_last_updated_isValid = false;
}

void OAIConnectorCollectionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectorCollectionInfo::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_last_checked_isValid = ::OpenAPI::fromJsonValue(m_last_checked, json[QString("lastChecked")]);
    m_last_checked_isSet = !json[QString("lastChecked")].isNull() && m_last_checked_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_source_last_updated_isValid = ::OpenAPI::fromJsonValue(m_source_last_updated, json[QString("sourceLastUpdated")]);
    m_source_last_updated_isSet = !json[QString("sourceLastUpdated")].isNull() && m_source_last_updated_isValid;
}

QString OAIConnectorCollectionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectorCollectionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_last_checked_isSet) {
        obj.insert(QString("lastChecked"), ::OpenAPI::toJsonValue(m_last_checked));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_source_last_updated_isSet) {
        obj.insert(QString("sourceLastUpdated"), ::OpenAPI::toJsonValue(m_source_last_updated));
    }
    return obj;
}

OAIConnectorCollectionErrorInfo OAIConnectorCollectionInfo::getError() const {
    return m_error;
}
void OAIConnectorCollectionInfo::setError(const OAIConnectorCollectionErrorInfo &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIConnectorCollectionInfo::is_error_Set() const{
    return m_error_isSet;
}

bool OAIConnectorCollectionInfo::is_error_Valid() const{
    return m_error_isValid;
}

QDateTime OAIConnectorCollectionInfo::getLastChecked() const {
    return m_last_checked;
}
void OAIConnectorCollectionInfo::setLastChecked(const QDateTime &last_checked) {
    m_last_checked = last_checked;
    m_last_checked_isSet = true;
}

bool OAIConnectorCollectionInfo::is_last_checked_Set() const{
    return m_last_checked_isSet;
}

bool OAIConnectorCollectionInfo::is_last_checked_Valid() const{
    return m_last_checked_isValid;
}

QDateTime OAIConnectorCollectionInfo::getLastUpdated() const {
    return m_last_updated;
}
void OAIConnectorCollectionInfo::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIConnectorCollectionInfo::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIConnectorCollectionInfo::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QDateTime OAIConnectorCollectionInfo::getSourceLastUpdated() const {
    return m_source_last_updated;
}
void OAIConnectorCollectionInfo::setSourceLastUpdated(const QDateTime &source_last_updated) {
    m_source_last_updated = source_last_updated;
    m_source_last_updated_isSet = true;
}

bool OAIConnectorCollectionInfo::is_source_last_updated_Set() const{
    return m_source_last_updated_isSet;
}

bool OAIConnectorCollectionInfo::is_source_last_updated_Valid() const{
    return m_source_last_updated_isValid;
}

bool OAIConnectorCollectionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_checked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectorCollectionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
