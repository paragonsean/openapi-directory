/**
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIExternalSubscriptionsApi_H
#define OAI_OAIExternalSubscriptionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIExternalSubscriptionDefinition.h"
#include "OAIExternalSubscriptionDefinitionListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIExternalSubscriptionsApi : public QObject {
    Q_OBJECT

public:
    OAIExternalSubscriptionsApi(const int timeOut = 0);
    ~OAIExternalSubscriptionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  external_subscription_name QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void externalSubscriptionGet(const QString &api_version, const QString &external_subscription_name, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    */
    virtual void externalSubscriptionList(const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  external_billing_account_name QString [required]
    */
    virtual void externalSubscriptionListByExternalBillingAccount(const QString &api_version, const QString &external_billing_account_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  management_group_id QString [required]
    * @param[in]  recurse bool [optional]
    */
    virtual void externalSubscriptionListByManagementGroup(const QString &api_version, const QString &management_group_id, const ::OpenAPI::OptionalParam<bool> &recurse = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  management_group_id QString [required]
    * @param[in]  external_subscription_name QString [required]
    */
    virtual void externalSubscriptionUpdateManagementGroup(const QString &api_version, const QString &management_group_id, const QString &external_subscription_name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void externalSubscriptionGetCallback(OAIHttpRequestWorker *worker);
    void externalSubscriptionListCallback(OAIHttpRequestWorker *worker);
    void externalSubscriptionListByExternalBillingAccountCallback(OAIHttpRequestWorker *worker);
    void externalSubscriptionListByManagementGroupCallback(OAIHttpRequestWorker *worker);
    void externalSubscriptionUpdateManagementGroupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void externalSubscriptionGetSignal(OAIExternalSubscriptionDefinition summary);
    void externalSubscriptionListSignal(OAIExternalSubscriptionDefinitionListResult summary);
    void externalSubscriptionListByExternalBillingAccountSignal(OAIExternalSubscriptionDefinitionListResult summary);
    void externalSubscriptionListByManagementGroupSignal(OAIExternalSubscriptionDefinitionListResult summary);
    void externalSubscriptionUpdateManagementGroupSignal();


    void externalSubscriptionGetSignalFull(OAIHttpRequestWorker *worker, OAIExternalSubscriptionDefinition summary);
    void externalSubscriptionListSignalFull(OAIHttpRequestWorker *worker, OAIExternalSubscriptionDefinitionListResult summary);
    void externalSubscriptionListByExternalBillingAccountSignalFull(OAIHttpRequestWorker *worker, OAIExternalSubscriptionDefinitionListResult summary);
    void externalSubscriptionListByManagementGroupSignalFull(OAIHttpRequestWorker *worker, OAIExternalSubscriptionDefinitionListResult summary);
    void externalSubscriptionUpdateManagementGroupSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use externalSubscriptionGetSignalError() instead")
    void externalSubscriptionGetSignalE(OAIExternalSubscriptionDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void externalSubscriptionGetSignalError(OAIExternalSubscriptionDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use externalSubscriptionListSignalError() instead")
    void externalSubscriptionListSignalE(OAIExternalSubscriptionDefinitionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void externalSubscriptionListSignalError(OAIExternalSubscriptionDefinitionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use externalSubscriptionListByExternalBillingAccountSignalError() instead")
    void externalSubscriptionListByExternalBillingAccountSignalE(OAIExternalSubscriptionDefinitionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void externalSubscriptionListByExternalBillingAccountSignalError(OAIExternalSubscriptionDefinitionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use externalSubscriptionListByManagementGroupSignalError() instead")
    void externalSubscriptionListByManagementGroupSignalE(OAIExternalSubscriptionDefinitionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void externalSubscriptionListByManagementGroupSignalError(OAIExternalSubscriptionDefinitionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use externalSubscriptionUpdateManagementGroupSignalError() instead")
    void externalSubscriptionUpdateManagementGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void externalSubscriptionUpdateManagementGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use externalSubscriptionGetSignalErrorFull() instead")
    void externalSubscriptionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void externalSubscriptionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use externalSubscriptionListSignalErrorFull() instead")
    void externalSubscriptionListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void externalSubscriptionListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use externalSubscriptionListByExternalBillingAccountSignalErrorFull() instead")
    void externalSubscriptionListByExternalBillingAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void externalSubscriptionListByExternalBillingAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use externalSubscriptionListByManagementGroupSignalErrorFull() instead")
    void externalSubscriptionListByManagementGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void externalSubscriptionListByManagementGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use externalSubscriptionUpdateManagementGroupSignalErrorFull() instead")
    void externalSubscriptionUpdateManagementGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void externalSubscriptionUpdateManagementGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
