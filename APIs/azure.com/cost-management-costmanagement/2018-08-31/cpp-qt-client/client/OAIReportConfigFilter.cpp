/**
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-08-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportConfigFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportConfigFilter::OAIReportConfigFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportConfigFilter::OAIReportConfigFilter() {
    this->initializeModel();
}

OAIReportConfigFilter::~OAIReportConfigFilter() {}

void OAIReportConfigFilter::initializeModel() {

    m_r_and_isSet = false;
    m_r_and_isValid = false;

    m_dimension_isSet = false;
    m_dimension_isValid = false;

    m_r_not_isSet = false;
    m_r_not_isValid = false;

    m_r_or_isSet = false;
    m_r_or_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;
}

void OAIReportConfigFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportConfigFilter::fromJsonObject(QJsonObject json) {

    m_r_and_isValid = ::OpenAPI::fromJsonValue(m_r_and, json[QString("and")]);
    m_r_and_isSet = !json[QString("and")].isNull() && m_r_and_isValid;

    m_dimension_isValid = ::OpenAPI::fromJsonValue(m_dimension, json[QString("dimension")]);
    m_dimension_isSet = !json[QString("dimension")].isNull() && m_dimension_isValid;

    m_r_not_isValid = ::OpenAPI::fromJsonValue(m_r_not, json[QString("not")]);
    m_r_not_isSet = !json[QString("not")].isNull() && m_r_not_isValid;

    m_r_or_isValid = ::OpenAPI::fromJsonValue(m_r_or, json[QString("or")]);
    m_r_or_isSet = !json[QString("or")].isNull() && m_r_or_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;
}

QString OAIReportConfigFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportConfigFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_r_and.size() > 0) {
        obj.insert(QString("and"), ::OpenAPI::toJsonValue(m_r_and));
    }
    if (m_dimension.isSet()) {
        obj.insert(QString("dimension"), ::OpenAPI::toJsonValue(m_dimension));
    }
    if (m_r_not.isSet()) {
        obj.insert(QString("not"), ::OpenAPI::toJsonValue(m_r_not));
    }
    if (m_r_or.size() > 0) {
        obj.insert(QString("or"), ::OpenAPI::toJsonValue(m_r_or));
    }
    if (m_tag.isSet()) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    return obj;
}

QList<OAIReportConfigFilter> OAIReportConfigFilter::getRAnd() const {
    return m_r_and;
}
void OAIReportConfigFilter::setRAnd(const QList<OAIReportConfigFilter> &r_and) {
    m_r_and = r_and;
    m_r_and_isSet = true;
}

bool OAIReportConfigFilter::is_r_and_Set() const{
    return m_r_and_isSet;
}

bool OAIReportConfigFilter::is_r_and_Valid() const{
    return m_r_and_isValid;
}

OAIReportConfigComparisonExpression OAIReportConfigFilter::getDimension() const {
    return m_dimension;
}
void OAIReportConfigFilter::setDimension(const OAIReportConfigComparisonExpression &dimension) {
    m_dimension = dimension;
    m_dimension_isSet = true;
}

bool OAIReportConfigFilter::is_dimension_Set() const{
    return m_dimension_isSet;
}

bool OAIReportConfigFilter::is_dimension_Valid() const{
    return m_dimension_isValid;
}

OAIReportConfigFilter OAIReportConfigFilter::getRNot() const {
    return m_r_not;
}
void OAIReportConfigFilter::setRNot(const OAIReportConfigFilter &r_not) {
    m_r_not = r_not;
    m_r_not_isSet = true;
}

bool OAIReportConfigFilter::is_r_not_Set() const{
    return m_r_not_isSet;
}

bool OAIReportConfigFilter::is_r_not_Valid() const{
    return m_r_not_isValid;
}

QList<OAIReportConfigFilter> OAIReportConfigFilter::getROr() const {
    return m_r_or;
}
void OAIReportConfigFilter::setROr(const QList<OAIReportConfigFilter> &r_or) {
    m_r_or = r_or;
    m_r_or_isSet = true;
}

bool OAIReportConfigFilter::is_r_or_Set() const{
    return m_r_or_isSet;
}

bool OAIReportConfigFilter::is_r_or_Valid() const{
    return m_r_or_isValid;
}

OAIReportConfigComparisonExpression OAIReportConfigFilter::getTag() const {
    return m_tag;
}
void OAIReportConfigFilter::setTag(const OAIReportConfigComparisonExpression &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIReportConfigFilter::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIReportConfigFilter::is_tag_Valid() const{
    return m_tag_isValid;
}

bool OAIReportConfigFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_and.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_not.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_or.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportConfigFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
