/**
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-08-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIQueryApi_H
#define OAI_OAIQueryApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIQueryResult.h"
#include "OAIReportConfigDefinition.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIQueryApi : public QObject {
    Q_OBJECT

public:
    OAIQueryApi(const int timeOut = 0);
    ~OAIQueryApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  billing_account_id QString [required]
    * @param[in]  parameters OAIReportConfigDefinition [required]
    */
    virtual void queryUsageByBillingAccount(const QString &api_version, const QString &billing_account_id, const OAIReportConfigDefinition &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  billing_account_id QString [required]
    * @param[in]  department_id QString [required]
    * @param[in]  parameters OAIReportConfigDefinition [required]
    */
    virtual void queryUsageByDepartment(const QString &api_version, const QString &billing_account_id, const QString &department_id, const OAIReportConfigDefinition &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  billing_account_id QString [required]
    * @param[in]  enrollment_account_id QString [required]
    * @param[in]  parameters OAIReportConfigDefinition [required]
    */
    virtual void queryUsageByEnrollmentAccount(const QString &api_version, const QString &billing_account_id, const QString &enrollment_account_id, const OAIReportConfigDefinition &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  management_group_id QString [required]
    * @param[in]  parameters OAIReportConfigDefinition [required]
    */
    virtual void queryUsageByManagmentGroup(const QString &api_version, const QString &management_group_id, const OAIReportConfigDefinition &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  parameters OAIReportConfigDefinition [required]
    */
    virtual void queryUsageByResourceGroup(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const OAIReportConfigDefinition &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIReportConfigDefinition [required]
    */
    virtual void queryUsageBySubscription(const QString &api_version, const QString &subscription_id, const OAIReportConfigDefinition &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void queryUsageByBillingAccountCallback(OAIHttpRequestWorker *worker);
    void queryUsageByDepartmentCallback(OAIHttpRequestWorker *worker);
    void queryUsageByEnrollmentAccountCallback(OAIHttpRequestWorker *worker);
    void queryUsageByManagmentGroupCallback(OAIHttpRequestWorker *worker);
    void queryUsageByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void queryUsageBySubscriptionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void queryUsageByBillingAccountSignal(OAIQueryResult summary);
    void queryUsageByDepartmentSignal(OAIQueryResult summary);
    void queryUsageByEnrollmentAccountSignal(OAIQueryResult summary);
    void queryUsageByManagmentGroupSignal(OAIQueryResult summary);
    void queryUsageByResourceGroupSignal(OAIQueryResult summary);
    void queryUsageBySubscriptionSignal(OAIQueryResult summary);


    void queryUsageByBillingAccountSignalFull(OAIHttpRequestWorker *worker, OAIQueryResult summary);
    void queryUsageByDepartmentSignalFull(OAIHttpRequestWorker *worker, OAIQueryResult summary);
    void queryUsageByEnrollmentAccountSignalFull(OAIHttpRequestWorker *worker, OAIQueryResult summary);
    void queryUsageByManagmentGroupSignalFull(OAIHttpRequestWorker *worker, OAIQueryResult summary);
    void queryUsageByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIQueryResult summary);
    void queryUsageBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIQueryResult summary);

    Q_DECL_DEPRECATED_X("Use queryUsageByBillingAccountSignalError() instead")
    void queryUsageByBillingAccountSignalE(OAIQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryUsageByBillingAccountSignalError(OAIQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryUsageByDepartmentSignalError() instead")
    void queryUsageByDepartmentSignalE(OAIQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryUsageByDepartmentSignalError(OAIQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryUsageByEnrollmentAccountSignalError() instead")
    void queryUsageByEnrollmentAccountSignalE(OAIQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryUsageByEnrollmentAccountSignalError(OAIQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryUsageByManagmentGroupSignalError() instead")
    void queryUsageByManagmentGroupSignalE(OAIQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryUsageByManagmentGroupSignalError(OAIQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryUsageByResourceGroupSignalError() instead")
    void queryUsageByResourceGroupSignalE(OAIQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryUsageByResourceGroupSignalError(OAIQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryUsageBySubscriptionSignalError() instead")
    void queryUsageBySubscriptionSignalE(OAIQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryUsageBySubscriptionSignalError(OAIQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use queryUsageByBillingAccountSignalErrorFull() instead")
    void queryUsageByBillingAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryUsageByBillingAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryUsageByDepartmentSignalErrorFull() instead")
    void queryUsageByDepartmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryUsageByDepartmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryUsageByEnrollmentAccountSignalErrorFull() instead")
    void queryUsageByEnrollmentAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryUsageByEnrollmentAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryUsageByManagmentGroupSignalErrorFull() instead")
    void queryUsageByManagmentGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryUsageByManagmentGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryUsageByResourceGroupSignalErrorFull() instead")
    void queryUsageByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryUsageByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryUsageBySubscriptionSignalErrorFull() instead")
    void queryUsageBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryUsageBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
