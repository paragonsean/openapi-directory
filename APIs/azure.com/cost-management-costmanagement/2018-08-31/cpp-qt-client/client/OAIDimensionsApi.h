/**
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-08-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDimensionsApi_H
#define OAI_OAIDimensionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDimensionsListResult.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDimensionsApi : public QObject {
    Q_OBJECT

public:
    OAIDimensionsApi(const int timeOut = 0);
    ~OAIDimensionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  billing_account_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void dimensionsListByBillingAccount(const QString &api_version, const QString &billing_account_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  billing_account_id QString [required]
    * @param[in]  department_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void dimensionsListByDepartment(const QString &api_version, const QString &billing_account_id, const QString &department_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  billing_account_id QString [required]
    * @param[in]  enrollment_account_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void dimensionsListByEnrollmentAccount(const QString &api_version, const QString &billing_account_id, const QString &enrollment_account_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  management_group_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void dimensionsListByManagementGroup(const QString &api_version, const QString &management_group_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void dimensionsListByResourceGroup(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void dimensionsListBySubscription(const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dimensionsListByBillingAccountCallback(OAIHttpRequestWorker *worker);
    void dimensionsListByDepartmentCallback(OAIHttpRequestWorker *worker);
    void dimensionsListByEnrollmentAccountCallback(OAIHttpRequestWorker *worker);
    void dimensionsListByManagementGroupCallback(OAIHttpRequestWorker *worker);
    void dimensionsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void dimensionsListBySubscriptionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dimensionsListByBillingAccountSignal(OAIDimensionsListResult summary);
    void dimensionsListByDepartmentSignal(OAIDimensionsListResult summary);
    void dimensionsListByEnrollmentAccountSignal(OAIDimensionsListResult summary);
    void dimensionsListByManagementGroupSignal(OAIDimensionsListResult summary);
    void dimensionsListByResourceGroupSignal(OAIDimensionsListResult summary);
    void dimensionsListBySubscriptionSignal(OAIDimensionsListResult summary);


    void dimensionsListByBillingAccountSignalFull(OAIHttpRequestWorker *worker, OAIDimensionsListResult summary);
    void dimensionsListByDepartmentSignalFull(OAIHttpRequestWorker *worker, OAIDimensionsListResult summary);
    void dimensionsListByEnrollmentAccountSignalFull(OAIHttpRequestWorker *worker, OAIDimensionsListResult summary);
    void dimensionsListByManagementGroupSignalFull(OAIHttpRequestWorker *worker, OAIDimensionsListResult summary);
    void dimensionsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIDimensionsListResult summary);
    void dimensionsListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIDimensionsListResult summary);

    Q_DECL_DEPRECATED_X("Use dimensionsListByBillingAccountSignalError() instead")
    void dimensionsListByBillingAccountSignalE(OAIDimensionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dimensionsListByBillingAccountSignalError(OAIDimensionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dimensionsListByDepartmentSignalError() instead")
    void dimensionsListByDepartmentSignalE(OAIDimensionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dimensionsListByDepartmentSignalError(OAIDimensionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dimensionsListByEnrollmentAccountSignalError() instead")
    void dimensionsListByEnrollmentAccountSignalE(OAIDimensionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dimensionsListByEnrollmentAccountSignalError(OAIDimensionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dimensionsListByManagementGroupSignalError() instead")
    void dimensionsListByManagementGroupSignalE(OAIDimensionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dimensionsListByManagementGroupSignalError(OAIDimensionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dimensionsListByResourceGroupSignalError() instead")
    void dimensionsListByResourceGroupSignalE(OAIDimensionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dimensionsListByResourceGroupSignalError(OAIDimensionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dimensionsListBySubscriptionSignalError() instead")
    void dimensionsListBySubscriptionSignalE(OAIDimensionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dimensionsListBySubscriptionSignalError(OAIDimensionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dimensionsListByBillingAccountSignalErrorFull() instead")
    void dimensionsListByBillingAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dimensionsListByBillingAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dimensionsListByDepartmentSignalErrorFull() instead")
    void dimensionsListByDepartmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dimensionsListByDepartmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dimensionsListByEnrollmentAccountSignalErrorFull() instead")
    void dimensionsListByEnrollmentAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dimensionsListByEnrollmentAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dimensionsListByManagementGroupSignalErrorFull() instead")
    void dimensionsListByManagementGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dimensionsListByManagementGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dimensionsListByResourceGroupSignalErrorFull() instead")
    void dimensionsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dimensionsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dimensionsListBySubscriptionSignalErrorFull() instead")
    void dimensionsListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dimensionsListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
