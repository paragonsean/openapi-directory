# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_config_aggregation import ReportConfigAggregation
from openapi_server.models.report_config_dataset_configuration import ReportConfigDatasetConfiguration
from openapi_server.models.report_config_filter import ReportConfigFilter
from openapi_server.models.report_config_grouping import ReportConfigGrouping
from openapi_server.models.report_config_sorting import ReportConfigSorting
from openapi_server import util


class ReportConfigDataset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation: Dict[str, ReportConfigAggregation]=None, configuration: ReportConfigDatasetConfiguration=None, filter: ReportConfigFilter=None, granularity: str=None, grouping: List[ReportConfigGrouping]=None, sorting: List[ReportConfigSorting]=None):
        """ReportConfigDataset - a model defined in OpenAPI

        :param aggregation: The aggregation of this ReportConfigDataset.
        :param configuration: The configuration of this ReportConfigDataset.
        :param filter: The filter of this ReportConfigDataset.
        :param granularity: The granularity of this ReportConfigDataset.
        :param grouping: The grouping of this ReportConfigDataset.
        :param sorting: The sorting of this ReportConfigDataset.
        """
        self.openapi_types = {
            'aggregation': Dict[str, ReportConfigAggregation],
            'configuration': ReportConfigDatasetConfiguration,
            'filter': ReportConfigFilter,
            'granularity': str,
            'grouping': List[ReportConfigGrouping],
            'sorting': List[ReportConfigSorting]
        }

        self.attribute_map = {
            'aggregation': 'aggregation',
            'configuration': 'configuration',
            'filter': 'filter',
            'granularity': 'granularity',
            'grouping': 'grouping',
            'sorting': 'sorting'
        }

        self._aggregation = aggregation
        self._configuration = configuration
        self._filter = filter
        self._granularity = granularity
        self._grouping = grouping
        self._sorting = sorting

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportConfigDataset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportConfigDataset of this ReportConfigDataset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation(self):
        """Gets the aggregation of this ReportConfigDataset.

        Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.

        :return: The aggregation of this ReportConfigDataset.
        :rtype: Dict[str, ReportConfigAggregation]
        """
        return self._aggregation

    @aggregation.setter
    def aggregation(self, aggregation):
        """Sets the aggregation of this ReportConfigDataset.

        Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.

        :param aggregation: The aggregation of this ReportConfigDataset.
        :type aggregation: Dict[str, ReportConfigAggregation]
        """

        self._aggregation = aggregation

    @property
    def configuration(self):
        """Gets the configuration of this ReportConfigDataset.


        :return: The configuration of this ReportConfigDataset.
        :rtype: ReportConfigDatasetConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this ReportConfigDataset.


        :param configuration: The configuration of this ReportConfigDataset.
        :type configuration: ReportConfigDatasetConfiguration
        """

        self._configuration = configuration

    @property
    def filter(self):
        """Gets the filter of this ReportConfigDataset.


        :return: The filter of this ReportConfigDataset.
        :rtype: ReportConfigFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ReportConfigDataset.


        :param filter: The filter of this ReportConfigDataset.
        :type filter: ReportConfigFilter
        """

        self._filter = filter

    @property
    def granularity(self):
        """Gets the granularity of this ReportConfigDataset.

        The granularity of rows in the report.

        :return: The granularity of this ReportConfigDataset.
        :rtype: str
        """
        return self._granularity

    @granularity.setter
    def granularity(self, granularity):
        """Sets the granularity of this ReportConfigDataset.

        The granularity of rows in the report.

        :param granularity: The granularity of this ReportConfigDataset.
        :type granularity: str
        """
        allowed_values = ["Daily"]  # noqa: E501
        if granularity not in allowed_values:
            raise ValueError(
                "Invalid value for `granularity` ({0}), must be one of {1}"
                .format(granularity, allowed_values)
            )

        self._granularity = granularity

    @property
    def grouping(self):
        """Gets the grouping of this ReportConfigDataset.

        Array of group by expression to use in the report. Report can have up to 2 group by clauses.

        :return: The grouping of this ReportConfigDataset.
        :rtype: List[ReportConfigGrouping]
        """
        return self._grouping

    @grouping.setter
    def grouping(self, grouping):
        """Sets the grouping of this ReportConfigDataset.

        Array of group by expression to use in the report. Report can have up to 2 group by clauses.

        :param grouping: The grouping of this ReportConfigDataset.
        :type grouping: List[ReportConfigGrouping]
        """
        if grouping is not None and len(grouping) > 2:
            raise ValueError("Invalid value for `grouping`, number of items must be less than or equal to `2`")

        self._grouping = grouping

    @property
    def sorting(self):
        """Gets the sorting of this ReportConfigDataset.

        Array of order by expression to use in the report.

        :return: The sorting of this ReportConfigDataset.
        :rtype: List[ReportConfigSorting]
        """
        return self._sorting

    @sorting.setter
    def sorting(self, sorting):
        """Sets the sorting of this ReportConfigDataset.

        Array of order by expression to use in the report.

        :param sorting: The sorting of this ReportConfigDataset.
        :type sorting: List[ReportConfigSorting]
        """

        self._sorting = sorting
