/*
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DimensionProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:40:02.651292-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DimensionProperties {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private List<String> data = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FILTER_ENABLED = "filterEnabled";
  @SerializedName(SERIALIZED_NAME_FILTER_ENABLED)
  private Boolean filterEnabled;

  public static final String SERIALIZED_NAME_GROUPING_ENABLED = "groupingEnabled";
  @SerializedName(SERIALIZED_NAME_GROUPING_ENABLED)
  private Boolean groupingEnabled;

  public static final String SERIALIZED_NAME_NEXT_LINK = "nextLink";
  @SerializedName(SERIALIZED_NAME_NEXT_LINK)
  private String nextLink;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public static final String SERIALIZED_NAME_USAGE_END = "usageEnd";
  @SerializedName(SERIALIZED_NAME_USAGE_END)
  private OffsetDateTime usageEnd;

  public static final String SERIALIZED_NAME_USAGE_START = "usageStart";
  @SerializedName(SERIALIZED_NAME_USAGE_START)
  private OffsetDateTime usageStart;

  public DimensionProperties() {
  }

  public DimensionProperties(
     String category, 
     String description, 
     Boolean filterEnabled, 
     Boolean groupingEnabled, 
     String nextLink, 
     Integer total, 
     OffsetDateTime usageEnd, 
     OffsetDateTime usageStart
  ) {
    this();
    this.category = category;
    this.description = description;
    this.filterEnabled = filterEnabled;
    this.groupingEnabled = groupingEnabled;
    this.nextLink = nextLink;
    this.total = total;
    this.usageEnd = usageEnd;
    this.usageStart = usageStart;
  }

  /**
   * Dimension category.
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }



  public DimensionProperties data(List<String> data) {
    this.data = data;
    return this;
  }

  public DimensionProperties addDataItem(String dataItem) {
    if (this.data == null) {
      this.data = new ArrayList<>();
    }
    this.data.add(dataItem);
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nullable
  public List<String> getData() {
    return data;
  }

  public void setData(List<String> data) {
    this.data = data;
  }


  /**
   * Dimension description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * Filter enabled.
   * @return filterEnabled
   */
  @javax.annotation.Nullable
  public Boolean getFilterEnabled() {
    return filterEnabled;
  }



  /**
   * Grouping enabled.
   * @return groupingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getGroupingEnabled() {
    return groupingEnabled;
  }



  /**
   * The link (url) to the next page of results.
   * @return nextLink
   */
  @javax.annotation.Nullable
  public String getNextLink() {
    return nextLink;
  }



  /**
   * Total number of data for the dimension.
   * @return total
   */
  @javax.annotation.Nullable
  public Integer getTotal() {
    return total;
  }



  /**
   * Usage end.
   * @return usageEnd
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUsageEnd() {
    return usageEnd;
  }



  /**
   * Usage start.
   * @return usageStart
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUsageStart() {
    return usageStart;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DimensionProperties dimensionProperties = (DimensionProperties) o;
    return Objects.equals(this.category, dimensionProperties.category) &&
        Objects.equals(this.data, dimensionProperties.data) &&
        Objects.equals(this.description, dimensionProperties.description) &&
        Objects.equals(this.filterEnabled, dimensionProperties.filterEnabled) &&
        Objects.equals(this.groupingEnabled, dimensionProperties.groupingEnabled) &&
        Objects.equals(this.nextLink, dimensionProperties.nextLink) &&
        Objects.equals(this.total, dimensionProperties.total) &&
        Objects.equals(this.usageEnd, dimensionProperties.usageEnd) &&
        Objects.equals(this.usageStart, dimensionProperties.usageStart);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, data, description, filterEnabled, groupingEnabled, nextLink, total, usageEnd, usageStart);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DimensionProperties {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    filterEnabled: ").append(toIndentedString(filterEnabled)).append("\n");
    sb.append("    groupingEnabled: ").append(toIndentedString(groupingEnabled)).append("\n");
    sb.append("    nextLink: ").append(toIndentedString(nextLink)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    usageEnd: ").append(toIndentedString(usageEnd)).append("\n");
    sb.append("    usageStart: ").append(toIndentedString(usageStart)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("data");
    openapiFields.add("description");
    openapiFields.add("filterEnabled");
    openapiFields.add("groupingEnabled");
    openapiFields.add("nextLink");
    openapiFields.add("total");
    openapiFields.add("usageEnd");
    openapiFields.add("usageStart");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DimensionProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DimensionProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DimensionProperties is not found in the empty JSON string", DimensionProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DimensionProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DimensionProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull() && !jsonObj.get("data").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be an array in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("nextLink") != null && !jsonObj.get("nextLink").isJsonNull()) && !jsonObj.get("nextLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextLink").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DimensionProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DimensionProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DimensionProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DimensionProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DimensionProperties>() {
           @Override
           public void write(JsonWriter out, DimensionProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DimensionProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DimensionProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DimensionProperties
   * @throws IOException if the JSON string is invalid with respect to DimensionProperties
   */
  public static DimensionProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DimensionProperties.class);
  }

  /**
   * Convert an instance of DimensionProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

