/**
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIExportsApi_H
#define OAI_OAIExportsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIExport.h"
#include "OAIExportExecutionListResult.h"
#include "OAIExportListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIExportsApi : public QObject {
    Q_OBJECT

public:
    OAIExportsApi(const int timeOut = 0);
    ~OAIExportsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  export_name QString [required]
    * @param[in]  parameters OAIExport [required]
    */
    virtual void exportsCreateOrUpdate(const QString &scope, const QString &api_version, const QString &export_name, const OAIExport &parameters);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  export_name QString [required]
    */
    virtual void exportsDelete(const QString &scope, const QString &api_version, const QString &export_name);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  export_name QString [required]
    */
    virtual void exportsExecute(const QString &scope, const QString &api_version, const QString &export_name);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  export_name QString [required]
    */
    virtual void exportsGet(const QString &scope, const QString &api_version, const QString &export_name);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  export_name QString [required]
    */
    virtual void exportsGetExecutionHistory(const QString &scope, const QString &api_version, const QString &export_name);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void exportsList(const QString &scope, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void exportsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void exportsDeleteCallback(OAIHttpRequestWorker *worker);
    void exportsExecuteCallback(OAIHttpRequestWorker *worker);
    void exportsGetCallback(OAIHttpRequestWorker *worker);
    void exportsGetExecutionHistoryCallback(OAIHttpRequestWorker *worker);
    void exportsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void exportsCreateOrUpdateSignal(OAIExport summary);
    void exportsDeleteSignal();
    void exportsExecuteSignal();
    void exportsGetSignal(OAIExport summary);
    void exportsGetExecutionHistorySignal(OAIExportExecutionListResult summary);
    void exportsListSignal(OAIExportListResult summary);


    void exportsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIExport summary);
    void exportsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void exportsExecuteSignalFull(OAIHttpRequestWorker *worker);
    void exportsGetSignalFull(OAIHttpRequestWorker *worker, OAIExport summary);
    void exportsGetExecutionHistorySignalFull(OAIHttpRequestWorker *worker, OAIExportExecutionListResult summary);
    void exportsListSignalFull(OAIHttpRequestWorker *worker, OAIExportListResult summary);

    Q_DECL_DEPRECATED_X("Use exportsCreateOrUpdateSignalError() instead")
    void exportsCreateOrUpdateSignalE(OAIExport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportsCreateOrUpdateSignalError(OAIExport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportsDeleteSignalError() instead")
    void exportsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void exportsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportsExecuteSignalError() instead")
    void exportsExecuteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void exportsExecuteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportsGetSignalError() instead")
    void exportsGetSignalE(OAIExport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportsGetSignalError(OAIExport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportsGetExecutionHistorySignalError() instead")
    void exportsGetExecutionHistorySignalE(OAIExportExecutionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportsGetExecutionHistorySignalError(OAIExportExecutionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportsListSignalError() instead")
    void exportsListSignalE(OAIExportListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportsListSignalError(OAIExportListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use exportsCreateOrUpdateSignalErrorFull() instead")
    void exportsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportsDeleteSignalErrorFull() instead")
    void exportsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportsExecuteSignalErrorFull() instead")
    void exportsExecuteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportsExecuteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportsGetSignalErrorFull() instead")
    void exportsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportsGetExecutionHistorySignalErrorFull() instead")
    void exportsGetExecutionHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportsGetExecutionHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportsListSignalErrorFull() instead")
    void exportsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
