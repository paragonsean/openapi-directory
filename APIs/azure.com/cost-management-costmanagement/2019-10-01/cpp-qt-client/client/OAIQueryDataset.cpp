/**
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryDataset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryDataset::OAIQueryDataset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryDataset::OAIQueryDataset() {
    this->initializeModel();
}

OAIQueryDataset::~OAIQueryDataset() {}

void OAIQueryDataset::initializeModel() {

    m_aggregation_isSet = false;
    m_aggregation_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_granularity_isSet = false;
    m_granularity_isValid = false;

    m_grouping_isSet = false;
    m_grouping_isValid = false;

    m_sorting_isSet = false;
    m_sorting_isValid = false;
}

void OAIQueryDataset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryDataset::fromJsonObject(QJsonObject json) {

    m_aggregation_isValid = ::OpenAPI::fromJsonValue(m_aggregation, json[QString("aggregation")]);
    m_aggregation_isSet = !json[QString("aggregation")].isNull() && m_aggregation_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_granularity_isValid = ::OpenAPI::fromJsonValue(m_granularity, json[QString("granularity")]);
    m_granularity_isSet = !json[QString("granularity")].isNull() && m_granularity_isValid;

    m_grouping_isValid = ::OpenAPI::fromJsonValue(m_grouping, json[QString("grouping")]);
    m_grouping_isSet = !json[QString("grouping")].isNull() && m_grouping_isValid;

    m_sorting_isValid = ::OpenAPI::fromJsonValue(m_sorting, json[QString("sorting")]);
    m_sorting_isSet = !json[QString("sorting")].isNull() && m_sorting_isValid;
}

QString OAIQueryDataset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryDataset::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregation.size() > 0) {
        obj.insert(QString("aggregation"), ::OpenAPI::toJsonValue(m_aggregation));
    }
    if (m_configuration.isSet()) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_granularity_isSet) {
        obj.insert(QString("granularity"), ::OpenAPI::toJsonValue(m_granularity));
    }
    if (m_grouping.size() > 0) {
        obj.insert(QString("grouping"), ::OpenAPI::toJsonValue(m_grouping));
    }
    if (m_sorting.size() > 0) {
        obj.insert(QString("sorting"), ::OpenAPI::toJsonValue(m_sorting));
    }
    return obj;
}

QMap<QString, OAIQueryAggregation> OAIQueryDataset::getAggregation() const {
    return m_aggregation;
}
void OAIQueryDataset::setAggregation(const QMap<QString, OAIQueryAggregation> &aggregation) {
    m_aggregation = aggregation;
    m_aggregation_isSet = true;
}

bool OAIQueryDataset::is_aggregation_Set() const{
    return m_aggregation_isSet;
}

bool OAIQueryDataset::is_aggregation_Valid() const{
    return m_aggregation_isValid;
}

OAIQueryDatasetConfiguration OAIQueryDataset::getConfiguration() const {
    return m_configuration;
}
void OAIQueryDataset::setConfiguration(const OAIQueryDatasetConfiguration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIQueryDataset::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIQueryDataset::is_configuration_Valid() const{
    return m_configuration_isValid;
}

OAIQueryFilter OAIQueryDataset::getFilter() const {
    return m_filter;
}
void OAIQueryDataset::setFilter(const OAIQueryFilter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIQueryDataset::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIQueryDataset::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAIQueryDataset::getGranularity() const {
    return m_granularity;
}
void OAIQueryDataset::setGranularity(const QString &granularity) {
    m_granularity = granularity;
    m_granularity_isSet = true;
}

bool OAIQueryDataset::is_granularity_Set() const{
    return m_granularity_isSet;
}

bool OAIQueryDataset::is_granularity_Valid() const{
    return m_granularity_isValid;
}

QList<OAIQueryGrouping> OAIQueryDataset::getGrouping() const {
    return m_grouping;
}
void OAIQueryDataset::setGrouping(const QList<OAIQueryGrouping> &grouping) {
    m_grouping = grouping;
    m_grouping_isSet = true;
}

bool OAIQueryDataset::is_grouping_Set() const{
    return m_grouping_isSet;
}

bool OAIQueryDataset::is_grouping_Valid() const{
    return m_grouping_isValid;
}

QList<OAIQuerySortingConfiguration> OAIQueryDataset::getSorting() const {
    return m_sorting;
}
void OAIQueryDataset::setSorting(const QList<OAIQuerySortingConfiguration> &sorting) {
    m_sorting = sorting;
    m_sorting_isSet = true;
}

bool OAIQueryDataset::is_sorting_Set() const{
    return m_sorting_isSet;
}

bool OAIQueryDataset::is_sorting_Valid() const{
    return m_sorting_isValid;
}

bool OAIQueryDataset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregation.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_granularity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grouping.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sorting.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryDataset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
