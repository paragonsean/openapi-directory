/*
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CommonExportProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the export execution.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:39:54.668496-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExportExecutionProperties {
  /**
   * The type of the export execution.
   */
  @JsonAdapter(ExecutionTypeEnum.Adapter.class)
  public enum ExecutionTypeEnum {
    ON_DEMAND("OnDemand"),
    
    SCHEDULED("Scheduled");

    private String value;

    ExecutionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExecutionTypeEnum fromValue(String value) {
      for (ExecutionTypeEnum b : ExecutionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExecutionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExecutionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExecutionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExecutionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExecutionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXECUTION_TYPE = "executionType";
  @SerializedName(SERIALIZED_NAME_EXECUTION_TYPE)
  private ExecutionTypeEnum executionType;

  public static final String SERIALIZED_NAME_FILE_NAME = "fileName";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_PROCESSING_END_TIME = "processingEndTime";
  @SerializedName(SERIALIZED_NAME_PROCESSING_END_TIME)
  private OffsetDateTime processingEndTime;

  public static final String SERIALIZED_NAME_PROCESSING_START_TIME = "processingStartTime";
  @SerializedName(SERIALIZED_NAME_PROCESSING_START_TIME)
  private OffsetDateTime processingStartTime;

  public static final String SERIALIZED_NAME_RUN_SETTINGS = "runSettings";
  @SerializedName(SERIALIZED_NAME_RUN_SETTINGS)
  private CommonExportProperties runSettings;

  /**
   * The status of the export execution.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    QUEUED("Queued"),
    
    IN_PROGRESS("InProgress"),
    
    COMPLETED("Completed"),
    
    FAILED("Failed"),
    
    TIMEOUT("Timeout"),
    
    NEW_DATA_NOT_AVAILABLE("NewDataNotAvailable"),
    
    DATA_NOT_AVAILABLE("DataNotAvailable");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUBMITTED_BY = "submittedBy";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_BY)
  private String submittedBy;

  public static final String SERIALIZED_NAME_SUBMITTED_TIME = "submittedTime";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_TIME)
  private OffsetDateTime submittedTime;

  public ExportExecutionProperties() {
  }

  public ExportExecutionProperties executionType(ExecutionTypeEnum executionType) {
    this.executionType = executionType;
    return this;
  }

  /**
   * The type of the export execution.
   * @return executionType
   */
  @javax.annotation.Nullable
  public ExecutionTypeEnum getExecutionType() {
    return executionType;
  }

  public void setExecutionType(ExecutionTypeEnum executionType) {
    this.executionType = executionType;
  }


  public ExportExecutionProperties fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * The name of the file export got written to.
   * @return fileName
   */
  @javax.annotation.Nullable
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public ExportExecutionProperties processingEndTime(OffsetDateTime processingEndTime) {
    this.processingEndTime = processingEndTime;
    return this;
  }

  /**
   * The time when export execution finished.
   * @return processingEndTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getProcessingEndTime() {
    return processingEndTime;
  }

  public void setProcessingEndTime(OffsetDateTime processingEndTime) {
    this.processingEndTime = processingEndTime;
  }


  public ExportExecutionProperties processingStartTime(OffsetDateTime processingStartTime) {
    this.processingStartTime = processingStartTime;
    return this;
  }

  /**
   * The time when export was picked up to be executed.
   * @return processingStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getProcessingStartTime() {
    return processingStartTime;
  }

  public void setProcessingStartTime(OffsetDateTime processingStartTime) {
    this.processingStartTime = processingStartTime;
  }


  public ExportExecutionProperties runSettings(CommonExportProperties runSettings) {
    this.runSettings = runSettings;
    return this;
  }

  /**
   * Get runSettings
   * @return runSettings
   */
  @javax.annotation.Nullable
  public CommonExportProperties getRunSettings() {
    return runSettings;
  }

  public void setRunSettings(CommonExportProperties runSettings) {
    this.runSettings = runSettings;
  }


  public ExportExecutionProperties status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the export execution.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public ExportExecutionProperties submittedBy(String submittedBy) {
    this.submittedBy = submittedBy;
    return this;
  }

  /**
   * The identifier for the entity that executed the export. For OnDemand executions, it is the email id. For Scheduled executions, it is the constant value - System.
   * @return submittedBy
   */
  @javax.annotation.Nullable
  public String getSubmittedBy() {
    return submittedBy;
  }

  public void setSubmittedBy(String submittedBy) {
    this.submittedBy = submittedBy;
  }


  public ExportExecutionProperties submittedTime(OffsetDateTime submittedTime) {
    this.submittedTime = submittedTime;
    return this;
  }

  /**
   * The time when export was queued to be executed.
   * @return submittedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSubmittedTime() {
    return submittedTime;
  }

  public void setSubmittedTime(OffsetDateTime submittedTime) {
    this.submittedTime = submittedTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportExecutionProperties exportExecutionProperties = (ExportExecutionProperties) o;
    return Objects.equals(this.executionType, exportExecutionProperties.executionType) &&
        Objects.equals(this.fileName, exportExecutionProperties.fileName) &&
        Objects.equals(this.processingEndTime, exportExecutionProperties.processingEndTime) &&
        Objects.equals(this.processingStartTime, exportExecutionProperties.processingStartTime) &&
        Objects.equals(this.runSettings, exportExecutionProperties.runSettings) &&
        Objects.equals(this.status, exportExecutionProperties.status) &&
        Objects.equals(this.submittedBy, exportExecutionProperties.submittedBy) &&
        Objects.equals(this.submittedTime, exportExecutionProperties.submittedTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(executionType, fileName, processingEndTime, processingStartTime, runSettings, status, submittedBy, submittedTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportExecutionProperties {\n");
    sb.append("    executionType: ").append(toIndentedString(executionType)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    processingEndTime: ").append(toIndentedString(processingEndTime)).append("\n");
    sb.append("    processingStartTime: ").append(toIndentedString(processingStartTime)).append("\n");
    sb.append("    runSettings: ").append(toIndentedString(runSettings)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    submittedBy: ").append(toIndentedString(submittedBy)).append("\n");
    sb.append("    submittedTime: ").append(toIndentedString(submittedTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("executionType");
    openapiFields.add("fileName");
    openapiFields.add("processingEndTime");
    openapiFields.add("processingStartTime");
    openapiFields.add("runSettings");
    openapiFields.add("status");
    openapiFields.add("submittedBy");
    openapiFields.add("submittedTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportExecutionProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportExecutionProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportExecutionProperties is not found in the empty JSON string", ExportExecutionProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportExecutionProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportExecutionProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("executionType") != null && !jsonObj.get("executionType").isJsonNull()) && !jsonObj.get("executionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executionType").toString()));
      }
      // validate the optional field `executionType`
      if (jsonObj.get("executionType") != null && !jsonObj.get("executionType").isJsonNull()) {
        ExecutionTypeEnum.validateJsonElement(jsonObj.get("executionType"));
      }
      if ((jsonObj.get("fileName") != null && !jsonObj.get("fileName").isJsonNull()) && !jsonObj.get("fileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileName").toString()));
      }
      // validate the optional field `runSettings`
      if (jsonObj.get("runSettings") != null && !jsonObj.get("runSettings").isJsonNull()) {
        CommonExportProperties.validateJsonElement(jsonObj.get("runSettings"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("submittedBy") != null && !jsonObj.get("submittedBy").isJsonNull()) && !jsonObj.get("submittedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `submittedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("submittedBy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportExecutionProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportExecutionProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportExecutionProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportExecutionProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportExecutionProperties>() {
           @Override
           public void write(JsonWriter out, ExportExecutionProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportExecutionProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportExecutionProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportExecutionProperties
   * @throws IOException if the JSON string is invalid with respect to ExportExecutionProperties
   */
  public static ExportExecutionProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportExecutionProperties.class);
  }

  /**
   * Convert an instance of ExportExecutionProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

