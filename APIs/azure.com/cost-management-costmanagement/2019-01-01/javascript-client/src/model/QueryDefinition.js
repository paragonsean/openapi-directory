/**
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QueryDataset from './QueryDataset';
import QueryTimePeriod from './QueryTimePeriod';

/**
 * The QueryDefinition model module.
 * @module model/QueryDefinition
 * @version 2019-01-01
 */
class QueryDefinition {
    /**
     * Constructs a new <code>QueryDefinition</code>.
     * The definition of a query.
     * @alias module:model/QueryDefinition
     * @param timeframe {module:model/QueryDefinition.TimeframeEnum} The time frame for pulling data for the query. If custom, then a specific time period must be provided.
     * @param type {module:model/QueryDefinition.TypeEnum} The type of the query.
     */
    constructor(timeframe, type) { 
        
        QueryDefinition.initialize(this, timeframe, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, timeframe, type) { 
        obj['timeframe'] = timeframe;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>QueryDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueryDefinition} obj Optional instance to populate.
     * @return {module:model/QueryDefinition} The populated <code>QueryDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueryDefinition();

            if (data.hasOwnProperty('dataset')) {
                obj['dataset'] = QueryDataset.constructFromObject(data['dataset']);
            }
            if (data.hasOwnProperty('timePeriod')) {
                obj['timePeriod'] = QueryTimePeriod.constructFromObject(data['timePeriod']);
            }
            if (data.hasOwnProperty('timeframe')) {
                obj['timeframe'] = ApiClient.convertToType(data['timeframe'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueryDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueryDefinition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of QueryDefinition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `dataset`
        if (data['dataset']) { // data not null
          QueryDataset.validateJSON(data['dataset']);
        }
        // validate the optional field `timePeriod`
        if (data['timePeriod']) { // data not null
          QueryTimePeriod.validateJSON(data['timePeriod']);
        }
        // ensure the json data is a string
        if (data['timeframe'] && !(typeof data['timeframe'] === 'string' || data['timeframe'] instanceof String)) {
            throw new Error("Expected the field `timeframe` to be a primitive type in the JSON string but got " + data['timeframe']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

QueryDefinition.RequiredProperties = ["timeframe", "type"];

/**
 * @member {module:model/QueryDataset} dataset
 */
QueryDefinition.prototype['dataset'] = undefined;

/**
 * @member {module:model/QueryTimePeriod} timePeriod
 */
QueryDefinition.prototype['timePeriod'] = undefined;

/**
 * The time frame for pulling data for the query. If custom, then a specific time period must be provided.
 * @member {module:model/QueryDefinition.TimeframeEnum} timeframe
 */
QueryDefinition.prototype['timeframe'] = undefined;

/**
 * The type of the query.
 * @member {module:model/QueryDefinition.TypeEnum} type
 */
QueryDefinition.prototype['type'] = undefined;





/**
 * Allowed values for the <code>timeframe</code> property.
 * @enum {String}
 * @readonly
 */
QueryDefinition['TimeframeEnum'] = {

    /**
     * value: "WeekToDate"
     * @const
     */
    "WeekToDate": "WeekToDate",

    /**
     * value: "MonthToDate"
     * @const
     */
    "MonthToDate": "MonthToDate",

    /**
     * value: "YearToDate"
     * @const
     */
    "YearToDate": "YearToDate",

    /**
     * value: "TheLastWeek"
     * @const
     */
    "TheLastWeek": "TheLastWeek",

    /**
     * value: "TheLastMonth"
     * @const
     */
    "TheLastMonth": "TheLastMonth",

    /**
     * value: "TheLastYear"
     * @const
     */
    "TheLastYear": "TheLastYear",

    /**
     * value: "Custom"
     * @const
     */
    "Custom": "Custom",

    /**
     * value: "BillingMonthToDate"
     * @const
     */
    "BillingMonthToDate": "BillingMonthToDate",

    /**
     * value: "TheLastBillingMonth"
     * @const
     */
    "TheLastBillingMonth": "TheLastBillingMonth"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
QueryDefinition['TypeEnum'] = {

    /**
     * value: "Usage"
     * @const
     */
    "Usage": "Usage"
};



export default QueryDefinition;

