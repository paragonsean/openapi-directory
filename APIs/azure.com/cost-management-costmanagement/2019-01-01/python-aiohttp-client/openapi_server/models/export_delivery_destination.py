# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExportDeliveryDestination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container: str=None, resource_id: str=None, root_folder_path: str=None):
        """ExportDeliveryDestination - a model defined in OpenAPI

        :param container: The container of this ExportDeliveryDestination.
        :param resource_id: The resource_id of this ExportDeliveryDestination.
        :param root_folder_path: The root_folder_path of this ExportDeliveryDestination.
        """
        self.openapi_types = {
            'container': str,
            'resource_id': str,
            'root_folder_path': str
        }

        self.attribute_map = {
            'container': 'container',
            'resource_id': 'resourceId',
            'root_folder_path': 'rootFolderPath'
        }

        self._container = container
        self._resource_id = resource_id
        self._root_folder_path = root_folder_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExportDeliveryDestination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExportDeliveryDestination of this ExportDeliveryDestination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container(self):
        """Gets the container of this ExportDeliveryDestination.

        The name of the container where exports will be uploaded.

        :return: The container of this ExportDeliveryDestination.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this ExportDeliveryDestination.

        The name of the container where exports will be uploaded.

        :param container: The container of this ExportDeliveryDestination.
        :type container: str
        """
        if container is None:
            raise ValueError("Invalid value for `container`, must not be `None`")

        self._container = container

    @property
    def resource_id(self):
        """Gets the resource_id of this ExportDeliveryDestination.

        The resource id of the storage account where exports will be delivered.

        :return: The resource_id of this ExportDeliveryDestination.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this ExportDeliveryDestination.

        The resource id of the storage account where exports will be delivered.

        :param resource_id: The resource_id of this ExportDeliveryDestination.
        :type resource_id: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")

        self._resource_id = resource_id

    @property
    def root_folder_path(self):
        """Gets the root_folder_path of this ExportDeliveryDestination.

        The name of the directory where exports will be uploaded.

        :return: The root_folder_path of this ExportDeliveryDestination.
        :rtype: str
        """
        return self._root_folder_path

    @root_folder_path.setter
    def root_folder_path(self, root_folder_path):
        """Sets the root_folder_path of this ExportDeliveryDestination.

        The name of the directory where exports will be uploaded.

        :param root_folder_path: The root_folder_path of this ExportDeliveryDestination.
        :type root_folder_path: str
        """

        self._root_folder_path = root_folder_path
