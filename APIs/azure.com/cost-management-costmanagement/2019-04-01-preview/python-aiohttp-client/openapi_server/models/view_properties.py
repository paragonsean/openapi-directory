# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.kpi_properties import KpiProperties
from openapi_server.models.pivot_properties import PivotProperties
from openapi_server.models.report_config_definition import ReportConfigDefinition
from openapi_server import util


class ViewProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accumulated: str=None, chart: str=None, created_on: datetime=None, display_name: str=None, kpis: List[KpiProperties]=None, metric: str=None, modified_on: datetime=None, pivots: List[PivotProperties]=None, query: ReportConfigDefinition=None, scope: str=None):
        """ViewProperties - a model defined in OpenAPI

        :param accumulated: The accumulated of this ViewProperties.
        :param chart: The chart of this ViewProperties.
        :param created_on: The created_on of this ViewProperties.
        :param display_name: The display_name of this ViewProperties.
        :param kpis: The kpis of this ViewProperties.
        :param metric: The metric of this ViewProperties.
        :param modified_on: The modified_on of this ViewProperties.
        :param pivots: The pivots of this ViewProperties.
        :param query: The query of this ViewProperties.
        :param scope: The scope of this ViewProperties.
        """
        self.openapi_types = {
            'accumulated': str,
            'chart': str,
            'created_on': datetime,
            'display_name': str,
            'kpis': List[KpiProperties],
            'metric': str,
            'modified_on': datetime,
            'pivots': List[PivotProperties],
            'query': ReportConfigDefinition,
            'scope': str
        }

        self.attribute_map = {
            'accumulated': 'accumulated',
            'chart': 'chart',
            'created_on': 'createdOn',
            'display_name': 'displayName',
            'kpis': 'kpis',
            'metric': 'metric',
            'modified_on': 'modifiedOn',
            'pivots': 'pivots',
            'query': 'query',
            'scope': 'scope'
        }

        self._accumulated = accumulated
        self._chart = chart
        self._created_on = created_on
        self._display_name = display_name
        self._kpis = kpis
        self._metric = metric
        self._modified_on = modified_on
        self._pivots = pivots
        self._query = query
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ViewProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ViewProperties of this ViewProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accumulated(self):
        """Gets the accumulated of this ViewProperties.

        Show costs accumulated over time.

        :return: The accumulated of this ViewProperties.
        :rtype: str
        """
        return self._accumulated

    @accumulated.setter
    def accumulated(self, accumulated):
        """Sets the accumulated of this ViewProperties.

        Show costs accumulated over time.

        :param accumulated: The accumulated of this ViewProperties.
        :type accumulated: str
        """
        allowed_values = ["true", "false"]  # noqa: E501
        if accumulated not in allowed_values:
            raise ValueError(
                "Invalid value for `accumulated` ({0}), must be one of {1}"
                .format(accumulated, allowed_values)
            )

        self._accumulated = accumulated

    @property
    def chart(self):
        """Gets the chart of this ViewProperties.

        Chart type of the main view in Cost Analysis. Required.

        :return: The chart of this ViewProperties.
        :rtype: str
        """
        return self._chart

    @chart.setter
    def chart(self, chart):
        """Sets the chart of this ViewProperties.

        Chart type of the main view in Cost Analysis. Required.

        :param chart: The chart of this ViewProperties.
        :type chart: str
        """
        allowed_values = ["Area", "Line", "StackedColumn", "GroupedColumn", "Table"]  # noqa: E501
        if chart not in allowed_values:
            raise ValueError(
                "Invalid value for `chart` ({0}), must be one of {1}"
                .format(chart, allowed_values)
            )

        self._chart = chart

    @property
    def created_on(self):
        """Gets the created_on of this ViewProperties.

        Date the user created this view.

        :return: The created_on of this ViewProperties.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this ViewProperties.

        Date the user created this view.

        :param created_on: The created_on of this ViewProperties.
        :type created_on: datetime
        """

        self._created_on = created_on

    @property
    def display_name(self):
        """Gets the display_name of this ViewProperties.

        User input name of the view. Required.

        :return: The display_name of this ViewProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ViewProperties.

        User input name of the view. Required.

        :param display_name: The display_name of this ViewProperties.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def kpis(self):
        """Gets the kpis of this ViewProperties.

        List of KPIs to show in Cost Analysis UI.

        :return: The kpis of this ViewProperties.
        :rtype: List[KpiProperties]
        """
        return self._kpis

    @kpis.setter
    def kpis(self, kpis):
        """Sets the kpis of this ViewProperties.

        List of KPIs to show in Cost Analysis UI.

        :param kpis: The kpis of this ViewProperties.
        :type kpis: List[KpiProperties]
        """

        self._kpis = kpis

    @property
    def metric(self):
        """Gets the metric of this ViewProperties.

        Metric to use when displaying costs.

        :return: The metric of this ViewProperties.
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this ViewProperties.

        Metric to use when displaying costs.

        :param metric: The metric of this ViewProperties.
        :type metric: str
        """
        allowed_values = ["ActualCost", "AmortizedCost", "AHUB"]  # noqa: E501
        if metric not in allowed_values:
            raise ValueError(
                "Invalid value for `metric` ({0}), must be one of {1}"
                .format(metric, allowed_values)
            )

        self._metric = metric

    @property
    def modified_on(self):
        """Gets the modified_on of this ViewProperties.

        Date when the user last modified this view.

        :return: The modified_on of this ViewProperties.
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this ViewProperties.

        Date when the user last modified this view.

        :param modified_on: The modified_on of this ViewProperties.
        :type modified_on: datetime
        """

        self._modified_on = modified_on

    @property
    def pivots(self):
        """Gets the pivots of this ViewProperties.

        Configuration of 3 sub-views in the Cost Analysis UI.

        :return: The pivots of this ViewProperties.
        :rtype: List[PivotProperties]
        """
        return self._pivots

    @pivots.setter
    def pivots(self, pivots):
        """Sets the pivots of this ViewProperties.

        Configuration of 3 sub-views in the Cost Analysis UI.

        :param pivots: The pivots of this ViewProperties.
        :type pivots: List[PivotProperties]
        """

        self._pivots = pivots

    @property
    def query(self):
        """Gets the query of this ViewProperties.


        :return: The query of this ViewProperties.
        :rtype: ReportConfigDefinition
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this ViewProperties.


        :param query: The query of this ViewProperties.
        :type query: ReportConfigDefinition
        """

        self._query = query

    @property
    def scope(self):
        """Gets the scope of this ViewProperties.

        Cost Management scope to save the view on. This includes 'subscriptions/{subscriptionId}' for subscription scope, 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for BillingProfile scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}' for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group scope, '/providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for ExternalBillingAccount scope, and '/providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for ExternalSubscription scope.

        :return: The scope of this ViewProperties.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this ViewProperties.

        Cost Management scope to save the view on. This includes 'subscriptions/{subscriptionId}' for subscription scope, 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for BillingProfile scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}' for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group scope, '/providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for ExternalBillingAccount scope, and '/providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for ExternalSubscription scope.

        :param scope: The scope of this ViewProperties.
        :type scope: str
        """

        self._scope = scope
