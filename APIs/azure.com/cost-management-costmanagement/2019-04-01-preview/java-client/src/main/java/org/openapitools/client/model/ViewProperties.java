/*
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-04-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.KpiProperties;
import org.openapitools.client.model.PivotProperties;
import org.openapitools.client.model.ReportConfigDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the view.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:40:15.941185-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ViewProperties {
  /**
   * Show costs accumulated over time.
   */
  @JsonAdapter(AccumulatedEnum.Adapter.class)
  public enum AccumulatedEnum {
    TRUE("true"),
    
    FALSE("false");

    private String value;

    AccumulatedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccumulatedEnum fromValue(String value) {
      for (AccumulatedEnum b : AccumulatedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccumulatedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccumulatedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccumulatedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccumulatedEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccumulatedEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCUMULATED = "accumulated";
  @SerializedName(SERIALIZED_NAME_ACCUMULATED)
  private AccumulatedEnum accumulated;

  /**
   * Chart type of the main view in Cost Analysis. Required.
   */
  @JsonAdapter(ChartEnum.Adapter.class)
  public enum ChartEnum {
    AREA("Area"),
    
    LINE("Line"),
    
    STACKED_COLUMN("StackedColumn"),
    
    GROUPED_COLUMN("GroupedColumn"),
    
    TABLE("Table");

    private String value;

    ChartEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChartEnum fromValue(String value) {
      for (ChartEnum b : ChartEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChartEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChartEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChartEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChartEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChartEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHART = "chart";
  @SerializedName(SERIALIZED_NAME_CHART)
  private ChartEnum chart;

  public static final String SERIALIZED_NAME_CREATED_ON = "createdOn";
  @SerializedName(SERIALIZED_NAME_CREATED_ON)
  private OffsetDateTime createdOn;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_KPIS = "kpis";
  @SerializedName(SERIALIZED_NAME_KPIS)
  private List<KpiProperties> kpis = new ArrayList<>();

  /**
   * Metric to use when displaying costs.
   */
  @JsonAdapter(MetricEnum.Adapter.class)
  public enum MetricEnum {
    ACTUAL_COST("ActualCost"),
    
    AMORTIZED_COST("AmortizedCost"),
    
    AHUB("AHUB");

    private String value;

    MetricEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MetricEnum fromValue(String value) {
      for (MetricEnum b : MetricEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MetricEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MetricEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MetricEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MetricEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MetricEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_METRIC = "metric";
  @SerializedName(SERIALIZED_NAME_METRIC)
  private MetricEnum metric;

  public static final String SERIALIZED_NAME_MODIFIED_ON = "modifiedOn";
  @SerializedName(SERIALIZED_NAME_MODIFIED_ON)
  private OffsetDateTime modifiedOn;

  public static final String SERIALIZED_NAME_PIVOTS = "pivots";
  @SerializedName(SERIALIZED_NAME_PIVOTS)
  private List<PivotProperties> pivots = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private ReportConfigDefinition query;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public ViewProperties() {
  }

  public ViewProperties(
     OffsetDateTime createdOn, 
     OffsetDateTime modifiedOn
  ) {
    this();
    this.createdOn = createdOn;
    this.modifiedOn = modifiedOn;
  }

  public ViewProperties accumulated(AccumulatedEnum accumulated) {
    this.accumulated = accumulated;
    return this;
  }

  /**
   * Show costs accumulated over time.
   * @return accumulated
   */
  @javax.annotation.Nullable
  public AccumulatedEnum getAccumulated() {
    return accumulated;
  }

  public void setAccumulated(AccumulatedEnum accumulated) {
    this.accumulated = accumulated;
  }


  public ViewProperties chart(ChartEnum chart) {
    this.chart = chart;
    return this;
  }

  /**
   * Chart type of the main view in Cost Analysis. Required.
   * @return chart
   */
  @javax.annotation.Nullable
  public ChartEnum getChart() {
    return chart;
  }

  public void setChart(ChartEnum chart) {
    this.chart = chart;
  }


  /**
   * Date the user created this view.
   * @return createdOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }



  public ViewProperties displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * User input name of the view. Required.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ViewProperties kpis(List<KpiProperties> kpis) {
    this.kpis = kpis;
    return this;
  }

  public ViewProperties addKpisItem(KpiProperties kpisItem) {
    if (this.kpis == null) {
      this.kpis = new ArrayList<>();
    }
    this.kpis.add(kpisItem);
    return this;
  }

  /**
   * List of KPIs to show in Cost Analysis UI.
   * @return kpis
   */
  @javax.annotation.Nullable
  public List<KpiProperties> getKpis() {
    return kpis;
  }

  public void setKpis(List<KpiProperties> kpis) {
    this.kpis = kpis;
  }


  public ViewProperties metric(MetricEnum metric) {
    this.metric = metric;
    return this;
  }

  /**
   * Metric to use when displaying costs.
   * @return metric
   */
  @javax.annotation.Nullable
  public MetricEnum getMetric() {
    return metric;
  }

  public void setMetric(MetricEnum metric) {
    this.metric = metric;
  }


  /**
   * Date when the user last modified this view.
   * @return modifiedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedOn() {
    return modifiedOn;
  }



  public ViewProperties pivots(List<PivotProperties> pivots) {
    this.pivots = pivots;
    return this;
  }

  public ViewProperties addPivotsItem(PivotProperties pivotsItem) {
    if (this.pivots == null) {
      this.pivots = new ArrayList<>();
    }
    this.pivots.add(pivotsItem);
    return this;
  }

  /**
   * Configuration of 3 sub-views in the Cost Analysis UI.
   * @return pivots
   */
  @javax.annotation.Nullable
  public List<PivotProperties> getPivots() {
    return pivots;
  }

  public void setPivots(List<PivotProperties> pivots) {
    this.pivots = pivots;
  }


  public ViewProperties query(ReportConfigDefinition query) {
    this.query = query;
    return this;
  }

  /**
   * Get query
   * @return query
   */
  @javax.annotation.Nullable
  public ReportConfigDefinition getQuery() {
    return query;
  }

  public void setQuery(ReportConfigDefinition query) {
    this.query = query;
  }


  public ViewProperties scope(String scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Cost Management scope to save the view on. This includes &#39;subscriptions/{subscriptionId}&#39; for subscription scope, &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39; for resourceGroup scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}&#39; for Billing Account scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}&#39; for Department scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}&#39; for EnrollmentAccount scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}&#39; for BillingProfile scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}&#39; for InvoiceSection scope, &#39;providers/Microsoft.Management/managementGroups/{managementGroupId}&#39; for Management Group scope, &#39;/providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}&#39; for ExternalBillingAccount scope, and &#39;/providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}&#39; for ExternalSubscription scope.
   * @return scope
   */
  @javax.annotation.Nullable
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ViewProperties viewProperties = (ViewProperties) o;
    return Objects.equals(this.accumulated, viewProperties.accumulated) &&
        Objects.equals(this.chart, viewProperties.chart) &&
        Objects.equals(this.createdOn, viewProperties.createdOn) &&
        Objects.equals(this.displayName, viewProperties.displayName) &&
        Objects.equals(this.kpis, viewProperties.kpis) &&
        Objects.equals(this.metric, viewProperties.metric) &&
        Objects.equals(this.modifiedOn, viewProperties.modifiedOn) &&
        Objects.equals(this.pivots, viewProperties.pivots) &&
        Objects.equals(this.query, viewProperties.query) &&
        Objects.equals(this.scope, viewProperties.scope);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accumulated, chart, createdOn, displayName, kpis, metric, modifiedOn, pivots, query, scope);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ViewProperties {\n");
    sb.append("    accumulated: ").append(toIndentedString(accumulated)).append("\n");
    sb.append("    chart: ").append(toIndentedString(chart)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    kpis: ").append(toIndentedString(kpis)).append("\n");
    sb.append("    metric: ").append(toIndentedString(metric)).append("\n");
    sb.append("    modifiedOn: ").append(toIndentedString(modifiedOn)).append("\n");
    sb.append("    pivots: ").append(toIndentedString(pivots)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accumulated");
    openapiFields.add("chart");
    openapiFields.add("createdOn");
    openapiFields.add("displayName");
    openapiFields.add("kpis");
    openapiFields.add("metric");
    openapiFields.add("modifiedOn");
    openapiFields.add("pivots");
    openapiFields.add("query");
    openapiFields.add("scope");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ViewProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ViewProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ViewProperties is not found in the empty JSON string", ViewProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ViewProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ViewProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accumulated") != null && !jsonObj.get("accumulated").isJsonNull()) && !jsonObj.get("accumulated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accumulated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accumulated").toString()));
      }
      // validate the optional field `accumulated`
      if (jsonObj.get("accumulated") != null && !jsonObj.get("accumulated").isJsonNull()) {
        AccumulatedEnum.validateJsonElement(jsonObj.get("accumulated"));
      }
      if ((jsonObj.get("chart") != null && !jsonObj.get("chart").isJsonNull()) && !jsonObj.get("chart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chart").toString()));
      }
      // validate the optional field `chart`
      if (jsonObj.get("chart") != null && !jsonObj.get("chart").isJsonNull()) {
        ChartEnum.validateJsonElement(jsonObj.get("chart"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("kpis") != null && !jsonObj.get("kpis").isJsonNull()) {
        JsonArray jsonArraykpis = jsonObj.getAsJsonArray("kpis");
        if (jsonArraykpis != null) {
          // ensure the json data is an array
          if (!jsonObj.get("kpis").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `kpis` to be an array in the JSON string but got `%s`", jsonObj.get("kpis").toString()));
          }

          // validate the optional field `kpis` (array)
          for (int i = 0; i < jsonArraykpis.size(); i++) {
            KpiProperties.validateJsonElement(jsonArraykpis.get(i));
          };
        }
      }
      if ((jsonObj.get("metric") != null && !jsonObj.get("metric").isJsonNull()) && !jsonObj.get("metric").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metric` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metric").toString()));
      }
      // validate the optional field `metric`
      if (jsonObj.get("metric") != null && !jsonObj.get("metric").isJsonNull()) {
        MetricEnum.validateJsonElement(jsonObj.get("metric"));
      }
      if (jsonObj.get("pivots") != null && !jsonObj.get("pivots").isJsonNull()) {
        JsonArray jsonArraypivots = jsonObj.getAsJsonArray("pivots");
        if (jsonArraypivots != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pivots").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pivots` to be an array in the JSON string but got `%s`", jsonObj.get("pivots").toString()));
          }

          // validate the optional field `pivots` (array)
          for (int i = 0; i < jsonArraypivots.size(); i++) {
            PivotProperties.validateJsonElement(jsonArraypivots.get(i));
          };
        }
      }
      // validate the optional field `query`
      if (jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) {
        ReportConfigDefinition.validateJsonElement(jsonObj.get("query"));
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ViewProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ViewProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ViewProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ViewProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ViewProperties>() {
           @Override
           public void write(JsonWriter out, ViewProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ViewProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ViewProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ViewProperties
   * @throws IOException if the JSON string is invalid with respect to ViewProperties
   */
  public static ViewProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ViewProperties.class);
  }

  /**
   * Convert an instance of ViewProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

