/**
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-04-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIViewsApi_H
#define OAI_OAIViewsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIView.h"
#include "OAIViewListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIViewsApi : public QObject {
    Q_OBJECT

public:
    OAIViewsApi(const int timeOut = 0);
    ~OAIViewsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  view_name QString [required]
    * @param[in]  parameters OAIView [required]
    */
    virtual void viewsCreateOrUpdate(const QString &api_version, const QString &view_name, const OAIView &parameters);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  view_name QString [required]
    * @param[in]  parameters OAIView [required]
    */
    virtual void viewsCreateOrUpdateByScope(const QString &scope, const QString &api_version, const QString &view_name, const OAIView &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  view_name QString [required]
    */
    virtual void viewsDelete(const QString &api_version, const QString &view_name);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  view_name QString [required]
    */
    virtual void viewsDeleteByScope(const QString &scope, const QString &api_version, const QString &view_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  view_name QString [required]
    */
    virtual void viewsGet(const QString &api_version, const QString &view_name);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  view_name QString [required]
    */
    virtual void viewsGetByScope(const QString &scope, const QString &api_version, const QString &view_name);

    /**
    * @param[in]  api_version QString [required]
    */
    virtual void viewsList(const QString &api_version);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void viewsListByScope(const QString &scope, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void viewsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void viewsCreateOrUpdateByScopeCallback(OAIHttpRequestWorker *worker);
    void viewsDeleteCallback(OAIHttpRequestWorker *worker);
    void viewsDeleteByScopeCallback(OAIHttpRequestWorker *worker);
    void viewsGetCallback(OAIHttpRequestWorker *worker);
    void viewsGetByScopeCallback(OAIHttpRequestWorker *worker);
    void viewsListCallback(OAIHttpRequestWorker *worker);
    void viewsListByScopeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void viewsCreateOrUpdateSignal(OAIView summary);
    void viewsCreateOrUpdateByScopeSignal(OAIView summary);
    void viewsDeleteSignal();
    void viewsDeleteByScopeSignal();
    void viewsGetSignal(OAIView summary);
    void viewsGetByScopeSignal(OAIView summary);
    void viewsListSignal(OAIViewListResult summary);
    void viewsListByScopeSignal(OAIViewListResult summary);


    void viewsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIView summary);
    void viewsCreateOrUpdateByScopeSignalFull(OAIHttpRequestWorker *worker, OAIView summary);
    void viewsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void viewsDeleteByScopeSignalFull(OAIHttpRequestWorker *worker);
    void viewsGetSignalFull(OAIHttpRequestWorker *worker, OAIView summary);
    void viewsGetByScopeSignalFull(OAIHttpRequestWorker *worker, OAIView summary);
    void viewsListSignalFull(OAIHttpRequestWorker *worker, OAIViewListResult summary);
    void viewsListByScopeSignalFull(OAIHttpRequestWorker *worker, OAIViewListResult summary);

    Q_DECL_DEPRECATED_X("Use viewsCreateOrUpdateSignalError() instead")
    void viewsCreateOrUpdateSignalE(OAIView summary, QNetworkReply::NetworkError error_type, QString error_str);
    void viewsCreateOrUpdateSignalError(OAIView summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewsCreateOrUpdateByScopeSignalError() instead")
    void viewsCreateOrUpdateByScopeSignalE(OAIView summary, QNetworkReply::NetworkError error_type, QString error_str);
    void viewsCreateOrUpdateByScopeSignalError(OAIView summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewsDeleteSignalError() instead")
    void viewsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void viewsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewsDeleteByScopeSignalError() instead")
    void viewsDeleteByScopeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void viewsDeleteByScopeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewsGetSignalError() instead")
    void viewsGetSignalE(OAIView summary, QNetworkReply::NetworkError error_type, QString error_str);
    void viewsGetSignalError(OAIView summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewsGetByScopeSignalError() instead")
    void viewsGetByScopeSignalE(OAIView summary, QNetworkReply::NetworkError error_type, QString error_str);
    void viewsGetByScopeSignalError(OAIView summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewsListSignalError() instead")
    void viewsListSignalE(OAIViewListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void viewsListSignalError(OAIViewListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewsListByScopeSignalError() instead")
    void viewsListByScopeSignalE(OAIViewListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void viewsListByScopeSignalError(OAIViewListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use viewsCreateOrUpdateSignalErrorFull() instead")
    void viewsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void viewsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewsCreateOrUpdateByScopeSignalErrorFull() instead")
    void viewsCreateOrUpdateByScopeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void viewsCreateOrUpdateByScopeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewsDeleteSignalErrorFull() instead")
    void viewsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void viewsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewsDeleteByScopeSignalErrorFull() instead")
    void viewsDeleteByScopeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void viewsDeleteByScopeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewsGetSignalErrorFull() instead")
    void viewsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void viewsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewsGetByScopeSignalErrorFull() instead")
    void viewsGetByScopeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void viewsGetByScopeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewsListSignalErrorFull() instead")
    void viewsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void viewsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewsListByScopeSignalErrorFull() instead")
    void viewsListByScopeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void viewsListByScopeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
