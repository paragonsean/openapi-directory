/**
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-04-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIViewProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIViewProperties::OAIViewProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIViewProperties::OAIViewProperties() {
    this->initializeModel();
}

OAIViewProperties::~OAIViewProperties() {}

void OAIViewProperties::initializeModel() {

    m_accumulated_isSet = false;
    m_accumulated_isValid = false;

    m_chart_isSet = false;
    m_chart_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_kpis_isSet = false;
    m_kpis_isValid = false;

    m_metric_isSet = false;
    m_metric_isValid = false;

    m_modified_on_isSet = false;
    m_modified_on_isValid = false;

    m_pivots_isSet = false;
    m_pivots_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;
}

void OAIViewProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIViewProperties::fromJsonObject(QJsonObject json) {

    m_accumulated_isValid = ::OpenAPI::fromJsonValue(m_accumulated, json[QString("accumulated")]);
    m_accumulated_isSet = !json[QString("accumulated")].isNull() && m_accumulated_isValid;

    m_chart_isValid = ::OpenAPI::fromJsonValue(m_chart, json[QString("chart")]);
    m_chart_isSet = !json[QString("chart")].isNull() && m_chart_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("createdOn")]);
    m_created_on_isSet = !json[QString("createdOn")].isNull() && m_created_on_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_kpis_isValid = ::OpenAPI::fromJsonValue(m_kpis, json[QString("kpis")]);
    m_kpis_isSet = !json[QString("kpis")].isNull() && m_kpis_isValid;

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("metric")]);
    m_metric_isSet = !json[QString("metric")].isNull() && m_metric_isValid;

    m_modified_on_isValid = ::OpenAPI::fromJsonValue(m_modified_on, json[QString("modifiedOn")]);
    m_modified_on_isSet = !json[QString("modifiedOn")].isNull() && m_modified_on_isValid;

    m_pivots_isValid = ::OpenAPI::fromJsonValue(m_pivots, json[QString("pivots")]);
    m_pivots_isSet = !json[QString("pivots")].isNull() && m_pivots_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;
}

QString OAIViewProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIViewProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_accumulated_isSet) {
        obj.insert(QString("accumulated"), ::OpenAPI::toJsonValue(m_accumulated));
    }
    if (m_chart_isSet) {
        obj.insert(QString("chart"), ::OpenAPI::toJsonValue(m_chart));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("createdOn"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_kpis.size() > 0) {
        obj.insert(QString("kpis"), ::OpenAPI::toJsonValue(m_kpis));
    }
    if (m_metric_isSet) {
        obj.insert(QString("metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    if (m_modified_on_isSet) {
        obj.insert(QString("modifiedOn"), ::OpenAPI::toJsonValue(m_modified_on));
    }
    if (m_pivots.size() > 0) {
        obj.insert(QString("pivots"), ::OpenAPI::toJsonValue(m_pivots));
    }
    if (m_query.isSet()) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    return obj;
}

QString OAIViewProperties::getAccumulated() const {
    return m_accumulated;
}
void OAIViewProperties::setAccumulated(const QString &accumulated) {
    m_accumulated = accumulated;
    m_accumulated_isSet = true;
}

bool OAIViewProperties::is_accumulated_Set() const{
    return m_accumulated_isSet;
}

bool OAIViewProperties::is_accumulated_Valid() const{
    return m_accumulated_isValid;
}

QString OAIViewProperties::getChart() const {
    return m_chart;
}
void OAIViewProperties::setChart(const QString &chart) {
    m_chart = chart;
    m_chart_isSet = true;
}

bool OAIViewProperties::is_chart_Set() const{
    return m_chart_isSet;
}

bool OAIViewProperties::is_chart_Valid() const{
    return m_chart_isValid;
}

QDateTime OAIViewProperties::getCreatedOn() const {
    return m_created_on;
}
void OAIViewProperties::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAIViewProperties::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAIViewProperties::is_created_on_Valid() const{
    return m_created_on_isValid;
}

QString OAIViewProperties::getDisplayName() const {
    return m_display_name;
}
void OAIViewProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIViewProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIViewProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<OAIKpiProperties> OAIViewProperties::getKpis() const {
    return m_kpis;
}
void OAIViewProperties::setKpis(const QList<OAIKpiProperties> &kpis) {
    m_kpis = kpis;
    m_kpis_isSet = true;
}

bool OAIViewProperties::is_kpis_Set() const{
    return m_kpis_isSet;
}

bool OAIViewProperties::is_kpis_Valid() const{
    return m_kpis_isValid;
}

QString OAIViewProperties::getMetric() const {
    return m_metric;
}
void OAIViewProperties::setMetric(const QString &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAIViewProperties::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAIViewProperties::is_metric_Valid() const{
    return m_metric_isValid;
}

QDateTime OAIViewProperties::getModifiedOn() const {
    return m_modified_on;
}
void OAIViewProperties::setModifiedOn(const QDateTime &modified_on) {
    m_modified_on = modified_on;
    m_modified_on_isSet = true;
}

bool OAIViewProperties::is_modified_on_Set() const{
    return m_modified_on_isSet;
}

bool OAIViewProperties::is_modified_on_Valid() const{
    return m_modified_on_isValid;
}

QList<OAIPivotProperties> OAIViewProperties::getPivots() const {
    return m_pivots;
}
void OAIViewProperties::setPivots(const QList<OAIPivotProperties> &pivots) {
    m_pivots = pivots;
    m_pivots_isSet = true;
}

bool OAIViewProperties::is_pivots_Set() const{
    return m_pivots_isSet;
}

bool OAIViewProperties::is_pivots_Valid() const{
    return m_pivots_isValid;
}

OAIReportConfigDefinition OAIViewProperties::getQuery() const {
    return m_query;
}
void OAIViewProperties::setQuery(const OAIReportConfigDefinition &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIViewProperties::is_query_Set() const{
    return m_query_isSet;
}

bool OAIViewProperties::is_query_Valid() const{
    return m_query_isValid;
}

QString OAIViewProperties::getScope() const {
    return m_scope;
}
void OAIViewProperties::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIViewProperties::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIViewProperties::is_scope_Valid() const{
    return m_scope_isValid;
}

bool OAIViewProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accumulated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chart_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kpis.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pivots.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIViewProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
