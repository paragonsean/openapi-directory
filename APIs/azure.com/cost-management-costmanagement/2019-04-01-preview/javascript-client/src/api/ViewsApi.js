/**
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-04-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import View from '../model/View';
import ViewListResult from '../model/ViewListResult';

/**
* Views service.
* @module api/ViewsApi
* @version 2019-04-01-preview
*/
export default class ViewsApi {

    /**
    * Constructs a new ViewsApi. 
    * @alias module:api/ViewsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the viewsCreateOrUpdate operation.
     * @callback module:api/ViewsApi~viewsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/View} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The operation to create or update a view. Update operation requires latest eTag to be set in the request. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-04-01-preview
     * @param {String} viewName View name
     * @param {module:model/View} parameters Parameters supplied to the CreateOrUpdate View operation.
     * @param {module:api/ViewsApi~viewsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/View}
     */
    viewsCreateOrUpdate(apiVersion, viewName, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling viewsCreateOrUpdate");
      }
      // verify the required parameter 'viewName' is set
      if (viewName === undefined || viewName === null) {
        throw new Error("Missing the required parameter 'viewName' when calling viewsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling viewsCreateOrUpdate");
      }

      let pathParams = {
        'viewName': viewName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = View;
      return this.apiClient.callApi(
        '/providers/Microsoft.CostManagement/views/{viewName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the viewsCreateOrUpdateByScope operation.
     * @callback module:api/ViewsApi~viewsCreateOrUpdateByScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/View} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The operation to create or update a view. Update operation requires latest eTag to be set in the request. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     * @param {String} scope The scope associated with view operations. This includes 'subscriptions/{subscriptionId}' for subscription scope, 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for BillingProfile scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}' for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group scope, 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for External Billing Account scope and 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External Subscription scope.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-04-01-preview
     * @param {String} viewName View name
     * @param {module:model/View} parameters Parameters supplied to the CreateOrUpdate View operation.
     * @param {module:api/ViewsApi~viewsCreateOrUpdateByScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/View}
     */
    viewsCreateOrUpdateByScope(scope, apiVersion, viewName, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling viewsCreateOrUpdateByScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling viewsCreateOrUpdateByScope");
      }
      // verify the required parameter 'viewName' is set
      if (viewName === undefined || viewName === null) {
        throw new Error("Missing the required parameter 'viewName' when calling viewsCreateOrUpdateByScope");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling viewsCreateOrUpdateByScope");
      }

      let pathParams = {
        'scope': scope,
        'viewName': viewName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = View;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.CostManagement/views/{viewName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the viewsDelete operation.
     * @callback module:api/ViewsApi~viewsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The operation to delete a view.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-04-01-preview
     * @param {String} viewName View name
     * @param {module:api/ViewsApi~viewsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    viewsDelete(apiVersion, viewName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling viewsDelete");
      }
      // verify the required parameter 'viewName' is set
      if (viewName === undefined || viewName === null) {
        throw new Error("Missing the required parameter 'viewName' when calling viewsDelete");
      }

      let pathParams = {
        'viewName': viewName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.CostManagement/views/{viewName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the viewsDeleteByScope operation.
     * @callback module:api/ViewsApi~viewsDeleteByScopeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The operation to delete a view.
     * @param {String} scope The scope associated with view operations. This includes 'subscriptions/{subscriptionId}' for subscription scope, 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for BillingProfile scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}' for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group scope, 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for External Billing Account scope and 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External Subscription scope.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-04-01-preview
     * @param {String} viewName View name
     * @param {module:api/ViewsApi~viewsDeleteByScopeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    viewsDeleteByScope(scope, apiVersion, viewName, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling viewsDeleteByScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling viewsDeleteByScope");
      }
      // verify the required parameter 'viewName' is set
      if (viewName === undefined || viewName === null) {
        throw new Error("Missing the required parameter 'viewName' when calling viewsDeleteByScope");
      }

      let pathParams = {
        'scope': scope,
        'viewName': viewName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.CostManagement/views/{viewName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the viewsGet operation.
     * @callback module:api/ViewsApi~viewsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/View} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the view by view name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-04-01-preview
     * @param {String} viewName View name
     * @param {module:api/ViewsApi~viewsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/View}
     */
    viewsGet(apiVersion, viewName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling viewsGet");
      }
      // verify the required parameter 'viewName' is set
      if (viewName === undefined || viewName === null) {
        throw new Error("Missing the required parameter 'viewName' when calling viewsGet");
      }

      let pathParams = {
        'viewName': viewName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = View;
      return this.apiClient.callApi(
        '/providers/Microsoft.CostManagement/views/{viewName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the viewsGetByScope operation.
     * @callback module:api/ViewsApi~viewsGetByScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/View} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the view for the defined scope by view name.
     * @param {String} scope The scope associated with view operations. This includes 'subscriptions/{subscriptionId}' for subscription scope, 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for BillingProfile scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}' for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group scope, 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for External Billing Account scope and 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External Subscription scope.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-04-01-preview
     * @param {String} viewName View name
     * @param {module:api/ViewsApi~viewsGetByScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/View}
     */
    viewsGetByScope(scope, apiVersion, viewName, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling viewsGetByScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling viewsGetByScope");
      }
      // verify the required parameter 'viewName' is set
      if (viewName === undefined || viewName === null) {
        throw new Error("Missing the required parameter 'viewName' when calling viewsGetByScope");
      }

      let pathParams = {
        'scope': scope,
        'viewName': viewName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = View;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.CostManagement/views/{viewName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the viewsList operation.
     * @callback module:api/ViewsApi~viewsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ViewListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all views by tenant and object.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-04-01-preview
     * @param {module:api/ViewsApi~viewsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ViewListResult}
     */
    viewsList(apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling viewsList");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ViewListResult;
      return this.apiClient.callApi(
        '/providers/Microsoft.CostManagement/views', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the viewsListByScope operation.
     * @callback module:api/ViewsApi~viewsListByScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ViewListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all views at the given scope.
     * @param {String} scope The scope associated with view operations. This includes 'subscriptions/{subscriptionId}' for subscription scope, 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for BillingProfile scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}' for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group scope, 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for External Billing Account scope and 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External Subscription scope.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-04-01-preview
     * @param {module:api/ViewsApi~viewsListByScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ViewListResult}
     */
    viewsListByScope(scope, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling viewsListByScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling viewsListByScope");
      }

      let pathParams = {
        'scope': scope
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ViewListResult;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.CostManagement/views', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
