/**
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-04-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KpiProperties from './KpiProperties';
import PivotProperties from './PivotProperties';
import ReportConfigDefinition from './ReportConfigDefinition';

/**
 * The ViewProperties model module.
 * @module model/ViewProperties
 * @version 2019-04-01-preview
 */
class ViewProperties {
    /**
     * Constructs a new <code>ViewProperties</code>.
     * The properties of the view.
     * @alias module:model/ViewProperties
     */
    constructor() { 
        
        ViewProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ViewProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ViewProperties} obj Optional instance to populate.
     * @return {module:model/ViewProperties} The populated <code>ViewProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ViewProperties();

            if (data.hasOwnProperty('accumulated')) {
                obj['accumulated'] = ApiClient.convertToType(data['accumulated'], 'String');
            }
            if (data.hasOwnProperty('chart')) {
                obj['chart'] = ApiClient.convertToType(data['chart'], 'String');
            }
            if (data.hasOwnProperty('createdOn')) {
                obj['createdOn'] = ApiClient.convertToType(data['createdOn'], 'Date');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('kpis')) {
                obj['kpis'] = ApiClient.convertToType(data['kpis'], [KpiProperties]);
            }
            if (data.hasOwnProperty('metric')) {
                obj['metric'] = ApiClient.convertToType(data['metric'], 'String');
            }
            if (data.hasOwnProperty('modifiedOn')) {
                obj['modifiedOn'] = ApiClient.convertToType(data['modifiedOn'], 'Date');
            }
            if (data.hasOwnProperty('pivots')) {
                obj['pivots'] = ApiClient.convertToType(data['pivots'], [PivotProperties]);
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ReportConfigDefinition.constructFromObject(data['query']);
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ViewProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ViewProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accumulated'] && !(typeof data['accumulated'] === 'string' || data['accumulated'] instanceof String)) {
            throw new Error("Expected the field `accumulated` to be a primitive type in the JSON string but got " + data['accumulated']);
        }
        // ensure the json data is a string
        if (data['chart'] && !(typeof data['chart'] === 'string' || data['chart'] instanceof String)) {
            throw new Error("Expected the field `chart` to be a primitive type in the JSON string but got " + data['chart']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        if (data['kpis']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['kpis'])) {
                throw new Error("Expected the field `kpis` to be an array in the JSON data but got " + data['kpis']);
            }
            // validate the optional field `kpis` (array)
            for (const item of data['kpis']) {
                KpiProperties.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['metric'] && !(typeof data['metric'] === 'string' || data['metric'] instanceof String)) {
            throw new Error("Expected the field `metric` to be a primitive type in the JSON string but got " + data['metric']);
        }
        if (data['pivots']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pivots'])) {
                throw new Error("Expected the field `pivots` to be an array in the JSON data but got " + data['pivots']);
            }
            // validate the optional field `pivots` (array)
            for (const item of data['pivots']) {
                PivotProperties.validateJSON(item);
            };
        }
        // validate the optional field `query`
        if (data['query']) { // data not null
          ReportConfigDefinition.validateJSON(data['query']);
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }

        return true;
    }


}



/**
 * Show costs accumulated over time.
 * @member {module:model/ViewProperties.AccumulatedEnum} accumulated
 */
ViewProperties.prototype['accumulated'] = undefined;

/**
 * Chart type of the main view in Cost Analysis. Required.
 * @member {module:model/ViewProperties.ChartEnum} chart
 */
ViewProperties.prototype['chart'] = undefined;

/**
 * Date the user created this view.
 * @member {Date} createdOn
 */
ViewProperties.prototype['createdOn'] = undefined;

/**
 * User input name of the view. Required.
 * @member {String} displayName
 */
ViewProperties.prototype['displayName'] = undefined;

/**
 * List of KPIs to show in Cost Analysis UI.
 * @member {Array.<module:model/KpiProperties>} kpis
 */
ViewProperties.prototype['kpis'] = undefined;

/**
 * Metric to use when displaying costs.
 * @member {module:model/ViewProperties.MetricEnum} metric
 */
ViewProperties.prototype['metric'] = undefined;

/**
 * Date when the user last modified this view.
 * @member {Date} modifiedOn
 */
ViewProperties.prototype['modifiedOn'] = undefined;

/**
 * Configuration of 3 sub-views in the Cost Analysis UI.
 * @member {Array.<module:model/PivotProperties>} pivots
 */
ViewProperties.prototype['pivots'] = undefined;

/**
 * @member {module:model/ReportConfigDefinition} query
 */
ViewProperties.prototype['query'] = undefined;

/**
 * Cost Management scope to save the view on. This includes 'subscriptions/{subscriptionId}' for subscription scope, 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for BillingProfile scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}' for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group scope, '/providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for ExternalBillingAccount scope, and '/providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for ExternalSubscription scope.
 * @member {String} scope
 */
ViewProperties.prototype['scope'] = undefined;





/**
 * Allowed values for the <code>accumulated</code> property.
 * @enum {String}
 * @readonly
 */
ViewProperties['AccumulatedEnum'] = {

    /**
     * value: "true"
     * @const
     */
    "true": "true",

    /**
     * value: "false"
     * @const
     */
    "false": "false"
};


/**
 * Allowed values for the <code>chart</code> property.
 * @enum {String}
 * @readonly
 */
ViewProperties['ChartEnum'] = {

    /**
     * value: "Area"
     * @const
     */
    "Area": "Area",

    /**
     * value: "Line"
     * @const
     */
    "Line": "Line",

    /**
     * value: "StackedColumn"
     * @const
     */
    "StackedColumn": "StackedColumn",

    /**
     * value: "GroupedColumn"
     * @const
     */
    "GroupedColumn": "GroupedColumn",

    /**
     * value: "Table"
     * @const
     */
    "Table": "Table"
};


/**
 * Allowed values for the <code>metric</code> property.
 * @enum {String}
 * @readonly
 */
ViewProperties['MetricEnum'] = {

    /**
     * value: "ActualCost"
     * @const
     */
    "ActualCost": "ActualCost",

    /**
     * value: "AmortizedCost"
     * @const
     */
    "AmortizedCost": "AmortizedCost",

    /**
     * value: "AHUB"
     * @const
     */
    "AHUB": "AHUB"
};



export default ViewProperties;

