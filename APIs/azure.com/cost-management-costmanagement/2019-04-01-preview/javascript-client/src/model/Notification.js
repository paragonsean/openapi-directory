/**
 * CostManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-04-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Notification model module.
 * @module model/Notification
 * @version 2019-04-01-preview
 */
class Notification {
    /**
     * Constructs a new <code>Notification</code>.
     * The notification associated with a budget.
     * @alias module:model/Notification
     * @param contactEmails {Array.<String>} Email addresses to send the budget notification to when the threshold is exceeded.
     * @param enabled {Boolean} The notification is enabled or not.
     * @param operator {module:model/Notification.OperatorEnum} The comparison operator.
     * @param threshold {Number} Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.
     */
    constructor(contactEmails, enabled, operator, threshold) { 
        
        Notification.initialize(this, contactEmails, enabled, operator, threshold);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contactEmails, enabled, operator, threshold) { 
        obj['contactEmails'] = contactEmails;
        obj['enabled'] = enabled;
        obj['operator'] = operator;
        obj['threshold'] = threshold;
    }

    /**
     * Constructs a <code>Notification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Notification} obj Optional instance to populate.
     * @return {module:model/Notification} The populated <code>Notification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Notification();

            if (data.hasOwnProperty('contactEmails')) {
                obj['contactEmails'] = ApiClient.convertToType(data['contactEmails'], ['String']);
            }
            if (data.hasOwnProperty('contactGroups')) {
                obj['contactGroups'] = ApiClient.convertToType(data['contactGroups'], ['String']);
            }
            if (data.hasOwnProperty('contactRoles')) {
                obj['contactRoles'] = ApiClient.convertToType(data['contactRoles'], ['String']);
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
            if (data.hasOwnProperty('threshold')) {
                obj['threshold'] = ApiClient.convertToType(data['threshold'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Notification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Notification</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Notification.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['contactEmails'])) {
            throw new Error("Expected the field `contactEmails` to be an array in the JSON data but got " + data['contactEmails']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['contactGroups'])) {
            throw new Error("Expected the field `contactGroups` to be an array in the JSON data but got " + data['contactGroups']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['contactRoles'])) {
            throw new Error("Expected the field `contactRoles` to be an array in the JSON data but got " + data['contactRoles']);
        }
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }

        return true;
    }


}

Notification.RequiredProperties = ["contactEmails", "enabled", "operator", "threshold"];

/**
 * Email addresses to send the budget notification to when the threshold is exceeded.
 * @member {Array.<String>} contactEmails
 */
Notification.prototype['contactEmails'] = undefined;

/**
 * Action groups to send the budget notification to when the threshold is exceeded.
 * @member {Array.<String>} contactGroups
 */
Notification.prototype['contactGroups'] = undefined;

/**
 * Contact roles to send the budget notification to when the threshold is exceeded.
 * @member {Array.<String>} contactRoles
 */
Notification.prototype['contactRoles'] = undefined;

/**
 * The notification is enabled or not.
 * @member {Boolean} enabled
 */
Notification.prototype['enabled'] = undefined;

/**
 * The comparison operator.
 * @member {module:model/Notification.OperatorEnum} operator
 */
Notification.prototype['operator'] = undefined;

/**
 * Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.
 * @member {Number} threshold
 */
Notification.prototype['threshold'] = undefined;





/**
 * Allowed values for the <code>operator</code> property.
 * @enum {String}
 * @readonly
 */
Notification['OperatorEnum'] = {

    /**
     * value: "EqualTo"
     * @const
     */
    "EqualTo": "EqualTo",

    /**
     * value: "GreaterThan"
     * @const
     */
    "GreaterThan": "GreaterThan",

    /**
     * value: "GreaterThanOrEqualTo"
     * @const
     */
    "GreaterThanOrEqualTo": "GreaterThanOrEqualTo"
};



export default Notification;

