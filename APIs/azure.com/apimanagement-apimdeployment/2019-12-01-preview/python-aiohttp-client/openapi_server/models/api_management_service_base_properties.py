# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.additional_location import AdditionalLocation
from openapi_server.models.api_version_constraint import ApiVersionConstraint
from openapi_server.models.certificate_configuration import CertificateConfiguration
from openapi_server.models.hostname_configuration import HostnameConfiguration
from openapi_server.models.virtual_network_configuration import VirtualNetworkConfiguration
from openapi_server import util


class ApiManagementServiceBaseProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_locations: List[AdditionalLocation]=None, api_version_constraint: ApiVersionConstraint=None, certificates: List[CertificateConfiguration]=None, created_at_utc: datetime=None, custom_properties: Dict[str, str]=None, developer_portal_url: str=None, disable_gateway: bool=False, enable_client_certificate: bool=False, gateway_regional_url: str=None, gateway_url: str=None, hostname_configurations: List[HostnameConfiguration]=None, management_api_url: str=None, notification_sender_email: str=None, portal_url: str=None, private_ip_addresses: List[str]=None, provisioning_state: str=None, public_ip_addresses: List[str]=None, scm_url: str=None, target_provisioning_state: str=None, virtual_network_configuration: VirtualNetworkConfiguration=None, virtual_network_type: str='None'):
        """ApiManagementServiceBaseProperties - a model defined in OpenAPI

        :param additional_locations: The additional_locations of this ApiManagementServiceBaseProperties.
        :param api_version_constraint: The api_version_constraint of this ApiManagementServiceBaseProperties.
        :param certificates: The certificates of this ApiManagementServiceBaseProperties.
        :param created_at_utc: The created_at_utc of this ApiManagementServiceBaseProperties.
        :param custom_properties: The custom_properties of this ApiManagementServiceBaseProperties.
        :param developer_portal_url: The developer_portal_url of this ApiManagementServiceBaseProperties.
        :param disable_gateway: The disable_gateway of this ApiManagementServiceBaseProperties.
        :param enable_client_certificate: The enable_client_certificate of this ApiManagementServiceBaseProperties.
        :param gateway_regional_url: The gateway_regional_url of this ApiManagementServiceBaseProperties.
        :param gateway_url: The gateway_url of this ApiManagementServiceBaseProperties.
        :param hostname_configurations: The hostname_configurations of this ApiManagementServiceBaseProperties.
        :param management_api_url: The management_api_url of this ApiManagementServiceBaseProperties.
        :param notification_sender_email: The notification_sender_email of this ApiManagementServiceBaseProperties.
        :param portal_url: The portal_url of this ApiManagementServiceBaseProperties.
        :param private_ip_addresses: The private_ip_addresses of this ApiManagementServiceBaseProperties.
        :param provisioning_state: The provisioning_state of this ApiManagementServiceBaseProperties.
        :param public_ip_addresses: The public_ip_addresses of this ApiManagementServiceBaseProperties.
        :param scm_url: The scm_url of this ApiManagementServiceBaseProperties.
        :param target_provisioning_state: The target_provisioning_state of this ApiManagementServiceBaseProperties.
        :param virtual_network_configuration: The virtual_network_configuration of this ApiManagementServiceBaseProperties.
        :param virtual_network_type: The virtual_network_type of this ApiManagementServiceBaseProperties.
        """
        self.openapi_types = {
            'additional_locations': List[AdditionalLocation],
            'api_version_constraint': ApiVersionConstraint,
            'certificates': List[CertificateConfiguration],
            'created_at_utc': datetime,
            'custom_properties': Dict[str, str],
            'developer_portal_url': str,
            'disable_gateway': bool,
            'enable_client_certificate': bool,
            'gateway_regional_url': str,
            'gateway_url': str,
            'hostname_configurations': List[HostnameConfiguration],
            'management_api_url': str,
            'notification_sender_email': str,
            'portal_url': str,
            'private_ip_addresses': List[str],
            'provisioning_state': str,
            'public_ip_addresses': List[str],
            'scm_url': str,
            'target_provisioning_state': str,
            'virtual_network_configuration': VirtualNetworkConfiguration,
            'virtual_network_type': str
        }

        self.attribute_map = {
            'additional_locations': 'additionalLocations',
            'api_version_constraint': 'apiVersionConstraint',
            'certificates': 'certificates',
            'created_at_utc': 'createdAtUtc',
            'custom_properties': 'customProperties',
            'developer_portal_url': 'developerPortalUrl',
            'disable_gateway': 'disableGateway',
            'enable_client_certificate': 'enableClientCertificate',
            'gateway_regional_url': 'gatewayRegionalUrl',
            'gateway_url': 'gatewayUrl',
            'hostname_configurations': 'hostnameConfigurations',
            'management_api_url': 'managementApiUrl',
            'notification_sender_email': 'notificationSenderEmail',
            'portal_url': 'portalUrl',
            'private_ip_addresses': 'privateIPAddresses',
            'provisioning_state': 'provisioningState',
            'public_ip_addresses': 'publicIPAddresses',
            'scm_url': 'scmUrl',
            'target_provisioning_state': 'targetProvisioningState',
            'virtual_network_configuration': 'virtualNetworkConfiguration',
            'virtual_network_type': 'virtualNetworkType'
        }

        self._additional_locations = additional_locations
        self._api_version_constraint = api_version_constraint
        self._certificates = certificates
        self._created_at_utc = created_at_utc
        self._custom_properties = custom_properties
        self._developer_portal_url = developer_portal_url
        self._disable_gateway = disable_gateway
        self._enable_client_certificate = enable_client_certificate
        self._gateway_regional_url = gateway_regional_url
        self._gateway_url = gateway_url
        self._hostname_configurations = hostname_configurations
        self._management_api_url = management_api_url
        self._notification_sender_email = notification_sender_email
        self._portal_url = portal_url
        self._private_ip_addresses = private_ip_addresses
        self._provisioning_state = provisioning_state
        self._public_ip_addresses = public_ip_addresses
        self._scm_url = scm_url
        self._target_provisioning_state = target_provisioning_state
        self._virtual_network_configuration = virtual_network_configuration
        self._virtual_network_type = virtual_network_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiManagementServiceBaseProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiManagementServiceBaseProperties of this ApiManagementServiceBaseProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_locations(self):
        """Gets the additional_locations of this ApiManagementServiceBaseProperties.

        Additional datacenter locations of the API Management service.

        :return: The additional_locations of this ApiManagementServiceBaseProperties.
        :rtype: List[AdditionalLocation]
        """
        return self._additional_locations

    @additional_locations.setter
    def additional_locations(self, additional_locations):
        """Sets the additional_locations of this ApiManagementServiceBaseProperties.

        Additional datacenter locations of the API Management service.

        :param additional_locations: The additional_locations of this ApiManagementServiceBaseProperties.
        :type additional_locations: List[AdditionalLocation]
        """

        self._additional_locations = additional_locations

    @property
    def api_version_constraint(self):
        """Gets the api_version_constraint of this ApiManagementServiceBaseProperties.


        :return: The api_version_constraint of this ApiManagementServiceBaseProperties.
        :rtype: ApiVersionConstraint
        """
        return self._api_version_constraint

    @api_version_constraint.setter
    def api_version_constraint(self, api_version_constraint):
        """Sets the api_version_constraint of this ApiManagementServiceBaseProperties.


        :param api_version_constraint: The api_version_constraint of this ApiManagementServiceBaseProperties.
        :type api_version_constraint: ApiVersionConstraint
        """

        self._api_version_constraint = api_version_constraint

    @property
    def certificates(self):
        """Gets the certificates of this ApiManagementServiceBaseProperties.

        List of Certificates that need to be installed in the API Management service. Max supported certificates that can be installed is 10.

        :return: The certificates of this ApiManagementServiceBaseProperties.
        :rtype: List[CertificateConfiguration]
        """
        return self._certificates

    @certificates.setter
    def certificates(self, certificates):
        """Sets the certificates of this ApiManagementServiceBaseProperties.

        List of Certificates that need to be installed in the API Management service. Max supported certificates that can be installed is 10.

        :param certificates: The certificates of this ApiManagementServiceBaseProperties.
        :type certificates: List[CertificateConfiguration]
        """

        self._certificates = certificates

    @property
    def created_at_utc(self):
        """Gets the created_at_utc of this ApiManagementServiceBaseProperties.

        Creation UTC date of the API Management service.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.

        :return: The created_at_utc of this ApiManagementServiceBaseProperties.
        :rtype: datetime
        """
        return self._created_at_utc

    @created_at_utc.setter
    def created_at_utc(self, created_at_utc):
        """Sets the created_at_utc of this ApiManagementServiceBaseProperties.

        Creation UTC date of the API Management service.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.

        :param created_at_utc: The created_at_utc of this ApiManagementServiceBaseProperties.
        :type created_at_utc: datetime
        """

        self._created_at_utc = created_at_utc

    @property
    def custom_properties(self):
        """Gets the custom_properties of this ApiManagementServiceBaseProperties.

        Custom properties of the API Management service.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168` will disable the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2).</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can be used to disable just TLS 1.1.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can be used to disable TLS 1.0 on an API Management service.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11` can be used to disable just TLS 1.1 for communications with backends.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10` can be used to disable TLS 1.0 for communications with backends.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2` can be used to enable HTTP2 protocol on an API Management service.</br>Not specifying any of these properties on PATCH operation will reset omitted properties' values to their defaults. For all the settings except Http2 the default value is `True` if the service was created on or before April 1st 2018 and `False` otherwise. Http2 setting's default value is `False`.</br></br>You can disable any of next ciphers by using settings `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.[cipher_name]`: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA. For example, `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_128_CBC_SHA256`:`false`. The default value is `true` for them.  Note: next ciphers can't be disabled since they are required by Azure CloudService internal components: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384

        :return: The custom_properties of this ApiManagementServiceBaseProperties.
        :rtype: Dict[str, str]
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """Sets the custom_properties of this ApiManagementServiceBaseProperties.

        Custom properties of the API Management service.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168` will disable the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2).</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can be used to disable just TLS 1.1.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can be used to disable TLS 1.0 on an API Management service.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11` can be used to disable just TLS 1.1 for communications with backends.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10` can be used to disable TLS 1.0 for communications with backends.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2` can be used to enable HTTP2 protocol on an API Management service.</br>Not specifying any of these properties on PATCH operation will reset omitted properties' values to their defaults. For all the settings except Http2 the default value is `True` if the service was created on or before April 1st 2018 and `False` otherwise. Http2 setting's default value is `False`.</br></br>You can disable any of next ciphers by using settings `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.[cipher_name]`: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA. For example, `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_128_CBC_SHA256`:`false`. The default value is `true` for them.  Note: next ciphers can't be disabled since they are required by Azure CloudService internal components: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384

        :param custom_properties: The custom_properties of this ApiManagementServiceBaseProperties.
        :type custom_properties: Dict[str, str]
        """

        self._custom_properties = custom_properties

    @property
    def developer_portal_url(self):
        """Gets the developer_portal_url of this ApiManagementServiceBaseProperties.

        DEveloper Portal endpoint URL of the API Management service.

        :return: The developer_portal_url of this ApiManagementServiceBaseProperties.
        :rtype: str
        """
        return self._developer_portal_url

    @developer_portal_url.setter
    def developer_portal_url(self, developer_portal_url):
        """Sets the developer_portal_url of this ApiManagementServiceBaseProperties.

        DEveloper Portal endpoint URL of the API Management service.

        :param developer_portal_url: The developer_portal_url of this ApiManagementServiceBaseProperties.
        :type developer_portal_url: str
        """

        self._developer_portal_url = developer_portal_url

    @property
    def disable_gateway(self):
        """Gets the disable_gateway of this ApiManagementServiceBaseProperties.

        Property only valid for an Api Management service deployed in multiple locations. This can be used to disable the gateway in master region.

        :return: The disable_gateway of this ApiManagementServiceBaseProperties.
        :rtype: bool
        """
        return self._disable_gateway

    @disable_gateway.setter
    def disable_gateway(self, disable_gateway):
        """Sets the disable_gateway of this ApiManagementServiceBaseProperties.

        Property only valid for an Api Management service deployed in multiple locations. This can be used to disable the gateway in master region.

        :param disable_gateway: The disable_gateway of this ApiManagementServiceBaseProperties.
        :type disable_gateway: bool
        """

        self._disable_gateway = disable_gateway

    @property
    def enable_client_certificate(self):
        """Gets the enable_client_certificate of this ApiManagementServiceBaseProperties.

        Property only meant to be used for Consumption SKU Service. This enforces a client certificate to be presented on each request to the gateway. This also enables the ability to authenticate the certificate in the policy on the gateway.

        :return: The enable_client_certificate of this ApiManagementServiceBaseProperties.
        :rtype: bool
        """
        return self._enable_client_certificate

    @enable_client_certificate.setter
    def enable_client_certificate(self, enable_client_certificate):
        """Sets the enable_client_certificate of this ApiManagementServiceBaseProperties.

        Property only meant to be used for Consumption SKU Service. This enforces a client certificate to be presented on each request to the gateway. This also enables the ability to authenticate the certificate in the policy on the gateway.

        :param enable_client_certificate: The enable_client_certificate of this ApiManagementServiceBaseProperties.
        :type enable_client_certificate: bool
        """

        self._enable_client_certificate = enable_client_certificate

    @property
    def gateway_regional_url(self):
        """Gets the gateway_regional_url of this ApiManagementServiceBaseProperties.

        Gateway URL of the API Management service in the Default Region.

        :return: The gateway_regional_url of this ApiManagementServiceBaseProperties.
        :rtype: str
        """
        return self._gateway_regional_url

    @gateway_regional_url.setter
    def gateway_regional_url(self, gateway_regional_url):
        """Sets the gateway_regional_url of this ApiManagementServiceBaseProperties.

        Gateway URL of the API Management service in the Default Region.

        :param gateway_regional_url: The gateway_regional_url of this ApiManagementServiceBaseProperties.
        :type gateway_regional_url: str
        """

        self._gateway_regional_url = gateway_regional_url

    @property
    def gateway_url(self):
        """Gets the gateway_url of this ApiManagementServiceBaseProperties.

        Gateway URL of the API Management service.

        :return: The gateway_url of this ApiManagementServiceBaseProperties.
        :rtype: str
        """
        return self._gateway_url

    @gateway_url.setter
    def gateway_url(self, gateway_url):
        """Sets the gateway_url of this ApiManagementServiceBaseProperties.

        Gateway URL of the API Management service.

        :param gateway_url: The gateway_url of this ApiManagementServiceBaseProperties.
        :type gateway_url: str
        """

        self._gateway_url = gateway_url

    @property
    def hostname_configurations(self):
        """Gets the hostname_configurations of this ApiManagementServiceBaseProperties.

        Custom hostname configuration of the API Management service.

        :return: The hostname_configurations of this ApiManagementServiceBaseProperties.
        :rtype: List[HostnameConfiguration]
        """
        return self._hostname_configurations

    @hostname_configurations.setter
    def hostname_configurations(self, hostname_configurations):
        """Sets the hostname_configurations of this ApiManagementServiceBaseProperties.

        Custom hostname configuration of the API Management service.

        :param hostname_configurations: The hostname_configurations of this ApiManagementServiceBaseProperties.
        :type hostname_configurations: List[HostnameConfiguration]
        """

        self._hostname_configurations = hostname_configurations

    @property
    def management_api_url(self):
        """Gets the management_api_url of this ApiManagementServiceBaseProperties.

        Management API endpoint URL of the API Management service.

        :return: The management_api_url of this ApiManagementServiceBaseProperties.
        :rtype: str
        """
        return self._management_api_url

    @management_api_url.setter
    def management_api_url(self, management_api_url):
        """Sets the management_api_url of this ApiManagementServiceBaseProperties.

        Management API endpoint URL of the API Management service.

        :param management_api_url: The management_api_url of this ApiManagementServiceBaseProperties.
        :type management_api_url: str
        """

        self._management_api_url = management_api_url

    @property
    def notification_sender_email(self):
        """Gets the notification_sender_email of this ApiManagementServiceBaseProperties.

        Email address from which the notification will be sent.

        :return: The notification_sender_email of this ApiManagementServiceBaseProperties.
        :rtype: str
        """
        return self._notification_sender_email

    @notification_sender_email.setter
    def notification_sender_email(self, notification_sender_email):
        """Sets the notification_sender_email of this ApiManagementServiceBaseProperties.

        Email address from which the notification will be sent.

        :param notification_sender_email: The notification_sender_email of this ApiManagementServiceBaseProperties.
        :type notification_sender_email: str
        """
        if notification_sender_email is not None and len(notification_sender_email) > 100:
            raise ValueError("Invalid value for `notification_sender_email`, length must be less than or equal to `100`")

        self._notification_sender_email = notification_sender_email

    @property
    def portal_url(self):
        """Gets the portal_url of this ApiManagementServiceBaseProperties.

        Publisher portal endpoint Url of the API Management service.

        :return: The portal_url of this ApiManagementServiceBaseProperties.
        :rtype: str
        """
        return self._portal_url

    @portal_url.setter
    def portal_url(self, portal_url):
        """Sets the portal_url of this ApiManagementServiceBaseProperties.

        Publisher portal endpoint Url of the API Management service.

        :param portal_url: The portal_url of this ApiManagementServiceBaseProperties.
        :type portal_url: str
        """

        self._portal_url = portal_url

    @property
    def private_ip_addresses(self):
        """Gets the private_ip_addresses of this ApiManagementServiceBaseProperties.

        Private Static Load Balanced IP addresses of the API Management service in Primary region which is deployed in an Internal Virtual Network. Available only for Basic, Standard and Premium SKU.

        :return: The private_ip_addresses of this ApiManagementServiceBaseProperties.
        :rtype: List[str]
        """
        return self._private_ip_addresses

    @private_ip_addresses.setter
    def private_ip_addresses(self, private_ip_addresses):
        """Sets the private_ip_addresses of this ApiManagementServiceBaseProperties.

        Private Static Load Balanced IP addresses of the API Management service in Primary region which is deployed in an Internal Virtual Network. Available only for Basic, Standard and Premium SKU.

        :param private_ip_addresses: The private_ip_addresses of this ApiManagementServiceBaseProperties.
        :type private_ip_addresses: List[str]
        """

        self._private_ip_addresses = private_ip_addresses

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ApiManagementServiceBaseProperties.

        The current provisioning state of the API Management service which can be one of the following: Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.

        :return: The provisioning_state of this ApiManagementServiceBaseProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ApiManagementServiceBaseProperties.

        The current provisioning state of the API Management service which can be one of the following: Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.

        :param provisioning_state: The provisioning_state of this ApiManagementServiceBaseProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def public_ip_addresses(self):
        """Gets the public_ip_addresses of this ApiManagementServiceBaseProperties.

        Public Static Load Balanced IP addresses of the API Management service in Primary region. Available only for Basic, Standard and Premium SKU.

        :return: The public_ip_addresses of this ApiManagementServiceBaseProperties.
        :rtype: List[str]
        """
        return self._public_ip_addresses

    @public_ip_addresses.setter
    def public_ip_addresses(self, public_ip_addresses):
        """Sets the public_ip_addresses of this ApiManagementServiceBaseProperties.

        Public Static Load Balanced IP addresses of the API Management service in Primary region. Available only for Basic, Standard and Premium SKU.

        :param public_ip_addresses: The public_ip_addresses of this ApiManagementServiceBaseProperties.
        :type public_ip_addresses: List[str]
        """

        self._public_ip_addresses = public_ip_addresses

    @property
    def scm_url(self):
        """Gets the scm_url of this ApiManagementServiceBaseProperties.

        SCM endpoint URL of the API Management service.

        :return: The scm_url of this ApiManagementServiceBaseProperties.
        :rtype: str
        """
        return self._scm_url

    @scm_url.setter
    def scm_url(self, scm_url):
        """Sets the scm_url of this ApiManagementServiceBaseProperties.

        SCM endpoint URL of the API Management service.

        :param scm_url: The scm_url of this ApiManagementServiceBaseProperties.
        :type scm_url: str
        """

        self._scm_url = scm_url

    @property
    def target_provisioning_state(self):
        """Gets the target_provisioning_state of this ApiManagementServiceBaseProperties.

        The provisioning state of the API Management service, which is targeted by the long running operation started on the service.

        :return: The target_provisioning_state of this ApiManagementServiceBaseProperties.
        :rtype: str
        """
        return self._target_provisioning_state

    @target_provisioning_state.setter
    def target_provisioning_state(self, target_provisioning_state):
        """Sets the target_provisioning_state of this ApiManagementServiceBaseProperties.

        The provisioning state of the API Management service, which is targeted by the long running operation started on the service.

        :param target_provisioning_state: The target_provisioning_state of this ApiManagementServiceBaseProperties.
        :type target_provisioning_state: str
        """

        self._target_provisioning_state = target_provisioning_state

    @property
    def virtual_network_configuration(self):
        """Gets the virtual_network_configuration of this ApiManagementServiceBaseProperties.


        :return: The virtual_network_configuration of this ApiManagementServiceBaseProperties.
        :rtype: VirtualNetworkConfiguration
        """
        return self._virtual_network_configuration

    @virtual_network_configuration.setter
    def virtual_network_configuration(self, virtual_network_configuration):
        """Sets the virtual_network_configuration of this ApiManagementServiceBaseProperties.


        :param virtual_network_configuration: The virtual_network_configuration of this ApiManagementServiceBaseProperties.
        :type virtual_network_configuration: VirtualNetworkConfiguration
        """

        self._virtual_network_configuration = virtual_network_configuration

    @property
    def virtual_network_type(self):
        """Gets the virtual_network_type of this ApiManagementServiceBaseProperties.

        The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only.

        :return: The virtual_network_type of this ApiManagementServiceBaseProperties.
        :rtype: str
        """
        return self._virtual_network_type

    @virtual_network_type.setter
    def virtual_network_type(self, virtual_network_type):
        """Sets the virtual_network_type of this ApiManagementServiceBaseProperties.

        The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only.

        :param virtual_network_type: The virtual_network_type of this ApiManagementServiceBaseProperties.
        :type virtual_network_type: str
        """
        allowed_values = ["None", "External", "Internal"]  # noqa: E501
        if virtual_network_type not in allowed_values:
            raise ValueError(
                "Invalid value for `virtual_network_type` ({0}), must be one of {1}"
                .format(virtual_network_type, allowed_values)
            )

        self._virtual_network_type = virtual_network_type
