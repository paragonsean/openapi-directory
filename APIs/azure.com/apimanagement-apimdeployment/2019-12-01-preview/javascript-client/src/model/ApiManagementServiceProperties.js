/**
 * ApiManagementClient
 * Use these REST APIs to manage Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdditionalLocation from './AdditionalLocation';
import ApiManagementServiceBaseProperties from './ApiManagementServiceBaseProperties';
import ApiVersionConstraint from './ApiVersionConstraint';
import CertificateConfiguration from './CertificateConfiguration';
import HostnameConfiguration from './HostnameConfiguration';
import VirtualNetworkConfiguration from './VirtualNetworkConfiguration';

/**
 * The ApiManagementServiceProperties model module.
 * @module model/ApiManagementServiceProperties
 * @version 2019-12-01-preview
 */
class ApiManagementServiceProperties {
    /**
     * Constructs a new <code>ApiManagementServiceProperties</code>.
     * Properties of an API Management service resource description.
     * @alias module:model/ApiManagementServiceProperties
     * @implements module:model/ApiManagementServiceBaseProperties
     */
    constructor() { 
        ApiManagementServiceBaseProperties.initialize(this);
        ApiManagementServiceProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['publisherEmail'] = publisherEmail;
        obj['publisherName'] = publisherName;
        obj['disableGateway'] = false;
        obj['enableClientCertificate'] = false;
        obj['virtualNetworkType'] = 'None';
    }

    /**
     * Constructs a <code>ApiManagementServiceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiManagementServiceProperties} obj Optional instance to populate.
     * @return {module:model/ApiManagementServiceProperties} The populated <code>ApiManagementServiceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiManagementServiceProperties();
            ApiManagementServiceBaseProperties.constructFromObject(data, obj);

            if (data.hasOwnProperty('publisherEmail')) {
                obj['publisherEmail'] = ApiClient.convertToType(data['publisherEmail'], 'String');
            }
            if (data.hasOwnProperty('publisherName')) {
                obj['publisherName'] = ApiClient.convertToType(data['publisherName'], 'String');
            }
            if (data.hasOwnProperty('additionalLocations')) {
                obj['additionalLocations'] = ApiClient.convertToType(data['additionalLocations'], [AdditionalLocation]);
            }
            if (data.hasOwnProperty('apiVersionConstraint')) {
                obj['apiVersionConstraint'] = ApiVersionConstraint.constructFromObject(data['apiVersionConstraint']);
            }
            if (data.hasOwnProperty('certificates')) {
                obj['certificates'] = ApiClient.convertToType(data['certificates'], [CertificateConfiguration]);
            }
            if (data.hasOwnProperty('createdAtUtc')) {
                obj['createdAtUtc'] = ApiClient.convertToType(data['createdAtUtc'], 'Date');
            }
            if (data.hasOwnProperty('customProperties')) {
                obj['customProperties'] = ApiClient.convertToType(data['customProperties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('developerPortalUrl')) {
                obj['developerPortalUrl'] = ApiClient.convertToType(data['developerPortalUrl'], 'String');
            }
            if (data.hasOwnProperty('disableGateway')) {
                obj['disableGateway'] = ApiClient.convertToType(data['disableGateway'], 'Boolean');
            }
            if (data.hasOwnProperty('enableClientCertificate')) {
                obj['enableClientCertificate'] = ApiClient.convertToType(data['enableClientCertificate'], 'Boolean');
            }
            if (data.hasOwnProperty('gatewayRegionalUrl')) {
                obj['gatewayRegionalUrl'] = ApiClient.convertToType(data['gatewayRegionalUrl'], 'String');
            }
            if (data.hasOwnProperty('gatewayUrl')) {
                obj['gatewayUrl'] = ApiClient.convertToType(data['gatewayUrl'], 'String');
            }
            if (data.hasOwnProperty('hostnameConfigurations')) {
                obj['hostnameConfigurations'] = ApiClient.convertToType(data['hostnameConfigurations'], [HostnameConfiguration]);
            }
            if (data.hasOwnProperty('managementApiUrl')) {
                obj['managementApiUrl'] = ApiClient.convertToType(data['managementApiUrl'], 'String');
            }
            if (data.hasOwnProperty('notificationSenderEmail')) {
                obj['notificationSenderEmail'] = ApiClient.convertToType(data['notificationSenderEmail'], 'String');
            }
            if (data.hasOwnProperty('portalUrl')) {
                obj['portalUrl'] = ApiClient.convertToType(data['portalUrl'], 'String');
            }
            if (data.hasOwnProperty('privateIPAddresses')) {
                obj['privateIPAddresses'] = ApiClient.convertToType(data['privateIPAddresses'], ['String']);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('publicIPAddresses')) {
                obj['publicIPAddresses'] = ApiClient.convertToType(data['publicIPAddresses'], ['String']);
            }
            if (data.hasOwnProperty('scmUrl')) {
                obj['scmUrl'] = ApiClient.convertToType(data['scmUrl'], 'String');
            }
            if (data.hasOwnProperty('targetProvisioningState')) {
                obj['targetProvisioningState'] = ApiClient.convertToType(data['targetProvisioningState'], 'String');
            }
            if (data.hasOwnProperty('virtualNetworkConfiguration')) {
                obj['virtualNetworkConfiguration'] = VirtualNetworkConfiguration.constructFromObject(data['virtualNetworkConfiguration']);
            }
            if (data.hasOwnProperty('virtualNetworkType')) {
                obj['virtualNetworkType'] = ApiClient.convertToType(data['virtualNetworkType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiManagementServiceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiManagementServiceProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ApiManagementServiceProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['publisherEmail'] && !(typeof data['publisherEmail'] === 'string' || data['publisherEmail'] instanceof String)) {
            throw new Error("Expected the field `publisherEmail` to be a primitive type in the JSON string but got " + data['publisherEmail']);
        }
        // ensure the json data is a string
        if (data['publisherName'] && !(typeof data['publisherName'] === 'string' || data['publisherName'] instanceof String)) {
            throw new Error("Expected the field `publisherName` to be a primitive type in the JSON string but got " + data['publisherName']);
        }
        if (data['additionalLocations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalLocations'])) {
                throw new Error("Expected the field `additionalLocations` to be an array in the JSON data but got " + data['additionalLocations']);
            }
            // validate the optional field `additionalLocations` (array)
            for (const item of data['additionalLocations']) {
                AdditionalLocation.validateJSON(item);
            };
        }
        // validate the optional field `apiVersionConstraint`
        if (data['apiVersionConstraint']) { // data not null
          ApiVersionConstraint.validateJSON(data['apiVersionConstraint']);
        }
        if (data['certificates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['certificates'])) {
                throw new Error("Expected the field `certificates` to be an array in the JSON data but got " + data['certificates']);
            }
            // validate the optional field `certificates` (array)
            for (const item of data['certificates']) {
                CertificateConfiguration.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['developerPortalUrl'] && !(typeof data['developerPortalUrl'] === 'string' || data['developerPortalUrl'] instanceof String)) {
            throw new Error("Expected the field `developerPortalUrl` to be a primitive type in the JSON string but got " + data['developerPortalUrl']);
        }
        // ensure the json data is a string
        if (data['gatewayRegionalUrl'] && !(typeof data['gatewayRegionalUrl'] === 'string' || data['gatewayRegionalUrl'] instanceof String)) {
            throw new Error("Expected the field `gatewayRegionalUrl` to be a primitive type in the JSON string but got " + data['gatewayRegionalUrl']);
        }
        // ensure the json data is a string
        if (data['gatewayUrl'] && !(typeof data['gatewayUrl'] === 'string' || data['gatewayUrl'] instanceof String)) {
            throw new Error("Expected the field `gatewayUrl` to be a primitive type in the JSON string but got " + data['gatewayUrl']);
        }
        if (data['hostnameConfigurations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['hostnameConfigurations'])) {
                throw new Error("Expected the field `hostnameConfigurations` to be an array in the JSON data but got " + data['hostnameConfigurations']);
            }
            // validate the optional field `hostnameConfigurations` (array)
            for (const item of data['hostnameConfigurations']) {
                HostnameConfiguration.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['managementApiUrl'] && !(typeof data['managementApiUrl'] === 'string' || data['managementApiUrl'] instanceof String)) {
            throw new Error("Expected the field `managementApiUrl` to be a primitive type in the JSON string but got " + data['managementApiUrl']);
        }
        // ensure the json data is a string
        if (data['notificationSenderEmail'] && !(typeof data['notificationSenderEmail'] === 'string' || data['notificationSenderEmail'] instanceof String)) {
            throw new Error("Expected the field `notificationSenderEmail` to be a primitive type in the JSON string but got " + data['notificationSenderEmail']);
        }
        // ensure the json data is a string
        if (data['portalUrl'] && !(typeof data['portalUrl'] === 'string' || data['portalUrl'] instanceof String)) {
            throw new Error("Expected the field `portalUrl` to be a primitive type in the JSON string but got " + data['portalUrl']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['privateIPAddresses'])) {
            throw new Error("Expected the field `privateIPAddresses` to be an array in the JSON data but got " + data['privateIPAddresses']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['publicIPAddresses'])) {
            throw new Error("Expected the field `publicIPAddresses` to be an array in the JSON data but got " + data['publicIPAddresses']);
        }
        // ensure the json data is a string
        if (data['scmUrl'] && !(typeof data['scmUrl'] === 'string' || data['scmUrl'] instanceof String)) {
            throw new Error("Expected the field `scmUrl` to be a primitive type in the JSON string but got " + data['scmUrl']);
        }
        // ensure the json data is a string
        if (data['targetProvisioningState'] && !(typeof data['targetProvisioningState'] === 'string' || data['targetProvisioningState'] instanceof String)) {
            throw new Error("Expected the field `targetProvisioningState` to be a primitive type in the JSON string but got " + data['targetProvisioningState']);
        }
        // validate the optional field `virtualNetworkConfiguration`
        if (data['virtualNetworkConfiguration']) { // data not null
          VirtualNetworkConfiguration.validateJSON(data['virtualNetworkConfiguration']);
        }
        // ensure the json data is a string
        if (data['virtualNetworkType'] && !(typeof data['virtualNetworkType'] === 'string' || data['virtualNetworkType'] instanceof String)) {
            throw new Error("Expected the field `virtualNetworkType` to be a primitive type in the JSON string but got " + data['virtualNetworkType']);
        }

        return true;
    }


}

ApiManagementServiceProperties.RequiredProperties = ["publisherEmail", "publisherName"];

/**
 * Publisher email.
 * @member {String} publisherEmail
 */
ApiManagementServiceProperties.prototype['publisherEmail'] = undefined;

/**
 * Publisher name.
 * @member {String} publisherName
 */
ApiManagementServiceProperties.prototype['publisherName'] = undefined;

/**
 * Additional datacenter locations of the API Management service.
 * @member {Array.<module:model/AdditionalLocation>} additionalLocations
 */
ApiManagementServiceProperties.prototype['additionalLocations'] = undefined;

/**
 * @member {module:model/ApiVersionConstraint} apiVersionConstraint
 */
ApiManagementServiceProperties.prototype['apiVersionConstraint'] = undefined;

/**
 * List of Certificates that need to be installed in the API Management service. Max supported certificates that can be installed is 10.
 * @member {Array.<module:model/CertificateConfiguration>} certificates
 */
ApiManagementServiceProperties.prototype['certificates'] = undefined;

/**
 * Creation UTC date of the API Management service.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
 * @member {Date} createdAtUtc
 */
ApiManagementServiceProperties.prototype['createdAtUtc'] = undefined;

/**
 * Custom properties of the API Management service.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168` will disable the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2).</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can be used to disable just TLS 1.1.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can be used to disable TLS 1.0 on an API Management service.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11` can be used to disable just TLS 1.1 for communications with backends.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10` can be used to disable TLS 1.0 for communications with backends.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2` can be used to enable HTTP2 protocol on an API Management service.</br>Not specifying any of these properties on PATCH operation will reset omitted properties' values to their defaults. For all the settings except Http2 the default value is `True` if the service was created on or before April 1st 2018 and `False` otherwise. Http2 setting's default value is `False`.</br></br>You can disable any of next ciphers by using settings `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.[cipher_name]`: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA. For example, `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_128_CBC_SHA256`:`false`. The default value is `true` for them.  Note: next ciphers can't be disabled since they are required by Azure CloudService internal components: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384
 * @member {Object.<String, String>} customProperties
 */
ApiManagementServiceProperties.prototype['customProperties'] = undefined;

/**
 * DEveloper Portal endpoint URL of the API Management service.
 * @member {String} developerPortalUrl
 */
ApiManagementServiceProperties.prototype['developerPortalUrl'] = undefined;

/**
 * Property only valid for an Api Management service deployed in multiple locations. This can be used to disable the gateway in master region.
 * @member {Boolean} disableGateway
 * @default false
 */
ApiManagementServiceProperties.prototype['disableGateway'] = false;

/**
 * Property only meant to be used for Consumption SKU Service. This enforces a client certificate to be presented on each request to the gateway. This also enables the ability to authenticate the certificate in the policy on the gateway.
 * @member {Boolean} enableClientCertificate
 * @default false
 */
ApiManagementServiceProperties.prototype['enableClientCertificate'] = false;

/**
 * Gateway URL of the API Management service in the Default Region.
 * @member {String} gatewayRegionalUrl
 */
ApiManagementServiceProperties.prototype['gatewayRegionalUrl'] = undefined;

/**
 * Gateway URL of the API Management service.
 * @member {String} gatewayUrl
 */
ApiManagementServiceProperties.prototype['gatewayUrl'] = undefined;

/**
 * Custom hostname configuration of the API Management service.
 * @member {Array.<module:model/HostnameConfiguration>} hostnameConfigurations
 */
ApiManagementServiceProperties.prototype['hostnameConfigurations'] = undefined;

/**
 * Management API endpoint URL of the API Management service.
 * @member {String} managementApiUrl
 */
ApiManagementServiceProperties.prototype['managementApiUrl'] = undefined;

/**
 * Email address from which the notification will be sent.
 * @member {String} notificationSenderEmail
 */
ApiManagementServiceProperties.prototype['notificationSenderEmail'] = undefined;

/**
 * Publisher portal endpoint Url of the API Management service.
 * @member {String} portalUrl
 */
ApiManagementServiceProperties.prototype['portalUrl'] = undefined;

/**
 * Private Static Load Balanced IP addresses of the API Management service in Primary region which is deployed in an Internal Virtual Network. Available only for Basic, Standard and Premium SKU.
 * @member {Array.<String>} privateIPAddresses
 */
ApiManagementServiceProperties.prototype['privateIPAddresses'] = undefined;

/**
 * The current provisioning state of the API Management service which can be one of the following: Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
 * @member {String} provisioningState
 */
ApiManagementServiceProperties.prototype['provisioningState'] = undefined;

/**
 * Public Static Load Balanced IP addresses of the API Management service in Primary region. Available only for Basic, Standard and Premium SKU.
 * @member {Array.<String>} publicIPAddresses
 */
ApiManagementServiceProperties.prototype['publicIPAddresses'] = undefined;

/**
 * SCM endpoint URL of the API Management service.
 * @member {String} scmUrl
 */
ApiManagementServiceProperties.prototype['scmUrl'] = undefined;

/**
 * The provisioning state of the API Management service, which is targeted by the long running operation started on the service.
 * @member {String} targetProvisioningState
 */
ApiManagementServiceProperties.prototype['targetProvisioningState'] = undefined;

/**
 * @member {module:model/VirtualNetworkConfiguration} virtualNetworkConfiguration
 */
ApiManagementServiceProperties.prototype['virtualNetworkConfiguration'] = undefined;

/**
 * The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only.
 * @member {module:model/ApiManagementServiceProperties.VirtualNetworkTypeEnum} virtualNetworkType
 * @default 'None'
 */
ApiManagementServiceProperties.prototype['virtualNetworkType'] = 'None';


// Implement ApiManagementServiceBaseProperties interface:
/**
 * Additional datacenter locations of the API Management service.
 * @member {Array.<module:model/AdditionalLocation>} additionalLocations
 */
ApiManagementServiceBaseProperties.prototype['additionalLocations'] = undefined;
/**
 * @member {module:model/ApiVersionConstraint} apiVersionConstraint
 */
ApiManagementServiceBaseProperties.prototype['apiVersionConstraint'] = undefined;
/**
 * List of Certificates that need to be installed in the API Management service. Max supported certificates that can be installed is 10.
 * @member {Array.<module:model/CertificateConfiguration>} certificates
 */
ApiManagementServiceBaseProperties.prototype['certificates'] = undefined;
/**
 * Creation UTC date of the API Management service.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
 * @member {Date} createdAtUtc
 */
ApiManagementServiceBaseProperties.prototype['createdAtUtc'] = undefined;
/**
 * Custom properties of the API Management service.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168` will disable the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2).</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can be used to disable just TLS 1.1.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can be used to disable TLS 1.0 on an API Management service.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11` can be used to disable just TLS 1.1 for communications with backends.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10` can be used to disable TLS 1.0 for communications with backends.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2` can be used to enable HTTP2 protocol on an API Management service.</br>Not specifying any of these properties on PATCH operation will reset omitted properties' values to their defaults. For all the settings except Http2 the default value is `True` if the service was created on or before April 1st 2018 and `False` otherwise. Http2 setting's default value is `False`.</br></br>You can disable any of next ciphers by using settings `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.[cipher_name]`: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA. For example, `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_128_CBC_SHA256`:`false`. The default value is `true` for them.  Note: next ciphers can't be disabled since they are required by Azure CloudService internal components: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384
 * @member {Object.<String, String>} customProperties
 */
ApiManagementServiceBaseProperties.prototype['customProperties'] = undefined;
/**
 * DEveloper Portal endpoint URL of the API Management service.
 * @member {String} developerPortalUrl
 */
ApiManagementServiceBaseProperties.prototype['developerPortalUrl'] = undefined;
/**
 * Property only valid for an Api Management service deployed in multiple locations. This can be used to disable the gateway in master region.
 * @member {Boolean} disableGateway
 * @default false
 */
ApiManagementServiceBaseProperties.prototype['disableGateway'] = false;
/**
 * Property only meant to be used for Consumption SKU Service. This enforces a client certificate to be presented on each request to the gateway. This also enables the ability to authenticate the certificate in the policy on the gateway.
 * @member {Boolean} enableClientCertificate
 * @default false
 */
ApiManagementServiceBaseProperties.prototype['enableClientCertificate'] = false;
/**
 * Gateway URL of the API Management service in the Default Region.
 * @member {String} gatewayRegionalUrl
 */
ApiManagementServiceBaseProperties.prototype['gatewayRegionalUrl'] = undefined;
/**
 * Gateway URL of the API Management service.
 * @member {String} gatewayUrl
 */
ApiManagementServiceBaseProperties.prototype['gatewayUrl'] = undefined;
/**
 * Custom hostname configuration of the API Management service.
 * @member {Array.<module:model/HostnameConfiguration>} hostnameConfigurations
 */
ApiManagementServiceBaseProperties.prototype['hostnameConfigurations'] = undefined;
/**
 * Management API endpoint URL of the API Management service.
 * @member {String} managementApiUrl
 */
ApiManagementServiceBaseProperties.prototype['managementApiUrl'] = undefined;
/**
 * Email address from which the notification will be sent.
 * @member {String} notificationSenderEmail
 */
ApiManagementServiceBaseProperties.prototype['notificationSenderEmail'] = undefined;
/**
 * Publisher portal endpoint Url of the API Management service.
 * @member {String} portalUrl
 */
ApiManagementServiceBaseProperties.prototype['portalUrl'] = undefined;
/**
 * Private Static Load Balanced IP addresses of the API Management service in Primary region which is deployed in an Internal Virtual Network. Available only for Basic, Standard and Premium SKU.
 * @member {Array.<String>} privateIPAddresses
 */
ApiManagementServiceBaseProperties.prototype['privateIPAddresses'] = undefined;
/**
 * The current provisioning state of the API Management service which can be one of the following: Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
 * @member {String} provisioningState
 */
ApiManagementServiceBaseProperties.prototype['provisioningState'] = undefined;
/**
 * Public Static Load Balanced IP addresses of the API Management service in Primary region. Available only for Basic, Standard and Premium SKU.
 * @member {Array.<String>} publicIPAddresses
 */
ApiManagementServiceBaseProperties.prototype['publicIPAddresses'] = undefined;
/**
 * SCM endpoint URL of the API Management service.
 * @member {String} scmUrl
 */
ApiManagementServiceBaseProperties.prototype['scmUrl'] = undefined;
/**
 * The provisioning state of the API Management service, which is targeted by the long running operation started on the service.
 * @member {String} targetProvisioningState
 */
ApiManagementServiceBaseProperties.prototype['targetProvisioningState'] = undefined;
/**
 * @member {module:model/VirtualNetworkConfiguration} virtualNetworkConfiguration
 */
ApiManagementServiceBaseProperties.prototype['virtualNetworkConfiguration'] = undefined;
/**
 * The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only.
 * @member {module:model/ApiManagementServiceBaseProperties.VirtualNetworkTypeEnum} virtualNetworkType
 * @default 'None'
 */
ApiManagementServiceBaseProperties.prototype['virtualNetworkType'] = 'None';



/**
 * Allowed values for the <code>virtualNetworkType</code> property.
 * @enum {String}
 * @readonly
 */
ApiManagementServiceProperties['VirtualNetworkTypeEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "External"
     * @const
     */
    "External": "External",

    /**
     * value: "Internal"
     * @const
     */
    "Internal": "Internal"
};



export default ApiManagementServiceProperties;

