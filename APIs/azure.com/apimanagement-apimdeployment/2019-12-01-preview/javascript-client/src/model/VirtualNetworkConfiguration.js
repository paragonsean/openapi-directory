/**
 * ApiManagementClient
 * Use these REST APIs to manage Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VirtualNetworkConfiguration model module.
 * @module model/VirtualNetworkConfiguration
 * @version 2019-12-01-preview
 */
class VirtualNetworkConfiguration {
    /**
     * Constructs a new <code>VirtualNetworkConfiguration</code>.
     * Configuration of a virtual network to which API Management service is deployed.
     * @alias module:model/VirtualNetworkConfiguration
     */
    constructor() { 
        
        VirtualNetworkConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VirtualNetworkConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualNetworkConfiguration} obj Optional instance to populate.
     * @return {module:model/VirtualNetworkConfiguration} The populated <code>VirtualNetworkConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualNetworkConfiguration();

            if (data.hasOwnProperty('subnetResourceId')) {
                obj['subnetResourceId'] = ApiClient.convertToType(data['subnetResourceId'], 'String');
            }
            if (data.hasOwnProperty('subnetname')) {
                obj['subnetname'] = ApiClient.convertToType(data['subnetname'], 'String');
            }
            if (data.hasOwnProperty('vnetid')) {
                obj['vnetid'] = ApiClient.convertToType(data['vnetid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualNetworkConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualNetworkConfiguration</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['subnetResourceId'] && !(typeof data['subnetResourceId'] === 'string' || data['subnetResourceId'] instanceof String)) {
            throw new Error("Expected the field `subnetResourceId` to be a primitive type in the JSON string but got " + data['subnetResourceId']);
        }
        // ensure the json data is a string
        if (data['subnetname'] && !(typeof data['subnetname'] === 'string' || data['subnetname'] instanceof String)) {
            throw new Error("Expected the field `subnetname` to be a primitive type in the JSON string but got " + data['subnetname']);
        }
        // ensure the json data is a string
        if (data['vnetid'] && !(typeof data['vnetid'] === 'string' || data['vnetid'] instanceof String)) {
            throw new Error("Expected the field `vnetid` to be a primitive type in the JSON string but got " + data['vnetid']);
        }

        return true;
    }


}



/**
 * The full resource ID of a subnet in a virtual network to deploy the API Management service in.
 * @member {String} subnetResourceId
 */
VirtualNetworkConfiguration.prototype['subnetResourceId'] = undefined;

/**
 * The name of the subnet.
 * @member {String} subnetname
 */
VirtualNetworkConfiguration.prototype['subnetname'] = undefined;

/**
 * The virtual network ID. This is typically a GUID. Expect a null GUID by default.
 * @member {String} vnetid
 */
VirtualNetworkConfiguration.prototype['vnetid'] = undefined;






export default VirtualNetworkConfiguration;

