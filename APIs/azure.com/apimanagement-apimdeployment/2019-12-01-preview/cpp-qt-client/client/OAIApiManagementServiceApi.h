/**
 * ApiManagementClient
 * Use these REST APIs to manage Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApiManagementServiceApi_H
#define OAI_OAIApiManagementServiceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiManagementServiceApplyNetworkConfigurationParameters.h"
#include "OAIApiManagementServiceBackupRestoreParameters.h"
#include "OAIApiManagementServiceCheckNameAvailabilityParameters.h"
#include "OAIApiManagementServiceGetSsoTokenResult.h"
#include "OAIApiManagementServiceListResult.h"
#include "OAIApiManagementServiceNameAvailabilityResult.h"
#include "OAIApiManagementServiceResource.h"
#include "OAIApiManagementServiceUpdateParameters.h"
#include "OAIApiManagementService_CheckNameAvailability_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApiManagementServiceApi : public QObject {
    Q_OBJECT

public:
    OAIApiManagementServiceApi(const int timeOut = 0);
    ~OAIApiManagementServiceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIApiManagementServiceApplyNetworkConfigurationParameters [optional]
    */
    virtual void apiManagementServiceApplyNetworkConfigurationUpdates(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<OAIApiManagementServiceApplyNetworkConfigurationParameters> &parameters = ::OpenAPI::OptionalParam<OAIApiManagementServiceApplyNetworkConfigurationParameters>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIApiManagementServiceBackupRestoreParameters [required]
    */
    virtual void apiManagementServiceBackup(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const OAIApiManagementServiceBackupRestoreParameters &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIApiManagementServiceCheckNameAvailabilityParameters [required]
    */
    virtual void apiManagementServiceCheckNameAvailability(const QString &api_version, const QString &subscription_id, const OAIApiManagementServiceCheckNameAvailabilityParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIApiManagementServiceResource [required]
    */
    virtual void apiManagementServiceCreateOrUpdate(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const OAIApiManagementServiceResource &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiManagementServiceDelete(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiManagementServiceGet(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiManagementServiceGetSsoToken(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiManagementServiceList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiManagementServiceListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIApiManagementServiceBackupRestoreParameters [required]
    */
    virtual void apiManagementServiceRestore(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const OAIApiManagementServiceBackupRestoreParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIApiManagementServiceUpdateParameters [required]
    */
    virtual void apiManagementServiceUpdate(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const OAIApiManagementServiceUpdateParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiManagementServiceApplyNetworkConfigurationUpdatesCallback(OAIHttpRequestWorker *worker);
    void apiManagementServiceBackupCallback(OAIHttpRequestWorker *worker);
    void apiManagementServiceCheckNameAvailabilityCallback(OAIHttpRequestWorker *worker);
    void apiManagementServiceCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void apiManagementServiceDeleteCallback(OAIHttpRequestWorker *worker);
    void apiManagementServiceGetCallback(OAIHttpRequestWorker *worker);
    void apiManagementServiceGetSsoTokenCallback(OAIHttpRequestWorker *worker);
    void apiManagementServiceListCallback(OAIHttpRequestWorker *worker);
    void apiManagementServiceListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void apiManagementServiceRestoreCallback(OAIHttpRequestWorker *worker);
    void apiManagementServiceUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiManagementServiceApplyNetworkConfigurationUpdatesSignal(OAIApiManagementServiceResource summary);
    void apiManagementServiceBackupSignal(OAIApiManagementServiceResource summary);
    void apiManagementServiceCheckNameAvailabilitySignal(OAIApiManagementServiceNameAvailabilityResult summary);
    void apiManagementServiceCreateOrUpdateSignal(OAIApiManagementServiceResource summary);
    void apiManagementServiceDeleteSignal();
    void apiManagementServiceGetSignal(OAIApiManagementServiceResource summary);
    void apiManagementServiceGetSsoTokenSignal(OAIApiManagementServiceGetSsoTokenResult summary);
    void apiManagementServiceListSignal(OAIApiManagementServiceListResult summary);
    void apiManagementServiceListByResourceGroupSignal(OAIApiManagementServiceListResult summary);
    void apiManagementServiceRestoreSignal(OAIApiManagementServiceResource summary);
    void apiManagementServiceUpdateSignal(OAIApiManagementServiceResource summary);


    void apiManagementServiceApplyNetworkConfigurationUpdatesSignalFull(OAIHttpRequestWorker *worker, OAIApiManagementServiceResource summary);
    void apiManagementServiceBackupSignalFull(OAIHttpRequestWorker *worker, OAIApiManagementServiceResource summary);
    void apiManagementServiceCheckNameAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAIApiManagementServiceNameAvailabilityResult summary);
    void apiManagementServiceCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIApiManagementServiceResource summary);
    void apiManagementServiceDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiManagementServiceGetSignalFull(OAIHttpRequestWorker *worker, OAIApiManagementServiceResource summary);
    void apiManagementServiceGetSsoTokenSignalFull(OAIHttpRequestWorker *worker, OAIApiManagementServiceGetSsoTokenResult summary);
    void apiManagementServiceListSignalFull(OAIHttpRequestWorker *worker, OAIApiManagementServiceListResult summary);
    void apiManagementServiceListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIApiManagementServiceListResult summary);
    void apiManagementServiceRestoreSignalFull(OAIHttpRequestWorker *worker, OAIApiManagementServiceResource summary);
    void apiManagementServiceUpdateSignalFull(OAIHttpRequestWorker *worker, OAIApiManagementServiceResource summary);

    Q_DECL_DEPRECATED_X("Use apiManagementServiceApplyNetworkConfigurationUpdatesSignalError() instead")
    void apiManagementServiceApplyNetworkConfigurationUpdatesSignalE(OAIApiManagementServiceResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServiceApplyNetworkConfigurationUpdatesSignalError(OAIApiManagementServiceResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServiceBackupSignalError() instead")
    void apiManagementServiceBackupSignalE(OAIApiManagementServiceResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServiceBackupSignalError(OAIApiManagementServiceResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServiceCheckNameAvailabilitySignalError() instead")
    void apiManagementServiceCheckNameAvailabilitySignalE(OAIApiManagementServiceNameAvailabilityResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServiceCheckNameAvailabilitySignalError(OAIApiManagementServiceNameAvailabilityResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServiceCreateOrUpdateSignalError() instead")
    void apiManagementServiceCreateOrUpdateSignalE(OAIApiManagementServiceResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServiceCreateOrUpdateSignalError(OAIApiManagementServiceResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServiceDeleteSignalError() instead")
    void apiManagementServiceDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServiceDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServiceGetSignalError() instead")
    void apiManagementServiceGetSignalE(OAIApiManagementServiceResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServiceGetSignalError(OAIApiManagementServiceResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServiceGetSsoTokenSignalError() instead")
    void apiManagementServiceGetSsoTokenSignalE(OAIApiManagementServiceGetSsoTokenResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServiceGetSsoTokenSignalError(OAIApiManagementServiceGetSsoTokenResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServiceListSignalError() instead")
    void apiManagementServiceListSignalE(OAIApiManagementServiceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServiceListSignalError(OAIApiManagementServiceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServiceListByResourceGroupSignalError() instead")
    void apiManagementServiceListByResourceGroupSignalE(OAIApiManagementServiceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServiceListByResourceGroupSignalError(OAIApiManagementServiceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServiceRestoreSignalError() instead")
    void apiManagementServiceRestoreSignalE(OAIApiManagementServiceResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServiceRestoreSignalError(OAIApiManagementServiceResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServiceUpdateSignalError() instead")
    void apiManagementServiceUpdateSignalE(OAIApiManagementServiceResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServiceUpdateSignalError(OAIApiManagementServiceResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiManagementServiceApplyNetworkConfigurationUpdatesSignalErrorFull() instead")
    void apiManagementServiceApplyNetworkConfigurationUpdatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServiceApplyNetworkConfigurationUpdatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServiceBackupSignalErrorFull() instead")
    void apiManagementServiceBackupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServiceBackupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServiceCheckNameAvailabilitySignalErrorFull() instead")
    void apiManagementServiceCheckNameAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServiceCheckNameAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServiceCreateOrUpdateSignalErrorFull() instead")
    void apiManagementServiceCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServiceCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServiceDeleteSignalErrorFull() instead")
    void apiManagementServiceDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServiceDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServiceGetSignalErrorFull() instead")
    void apiManagementServiceGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServiceGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServiceGetSsoTokenSignalErrorFull() instead")
    void apiManagementServiceGetSsoTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServiceGetSsoTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServiceListSignalErrorFull() instead")
    void apiManagementServiceListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServiceListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServiceListByResourceGroupSignalErrorFull() instead")
    void apiManagementServiceListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServiceListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServiceRestoreSignalErrorFull() instead")
    void apiManagementServiceRestoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServiceRestoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServiceUpdateSignalErrorFull() instead")
    void apiManagementServiceUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServiceUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
