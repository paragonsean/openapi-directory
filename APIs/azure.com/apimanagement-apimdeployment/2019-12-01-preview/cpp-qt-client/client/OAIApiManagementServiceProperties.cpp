/**
 * ApiManagementClient
 * Use these REST APIs to manage Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiManagementServiceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiManagementServiceProperties::OAIApiManagementServiceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiManagementServiceProperties::OAIApiManagementServiceProperties() {
    this->initializeModel();
}

OAIApiManagementServiceProperties::~OAIApiManagementServiceProperties() {}

void OAIApiManagementServiceProperties::initializeModel() {

    m_publisher_email_isSet = false;
    m_publisher_email_isValid = false;

    m_publisher_name_isSet = false;
    m_publisher_name_isValid = false;

    m_additional_locations_isSet = false;
    m_additional_locations_isValid = false;

    m_api_version_constraint_isSet = false;
    m_api_version_constraint_isValid = false;

    m_certificates_isSet = false;
    m_certificates_isValid = false;

    m_created_at_utc_isSet = false;
    m_created_at_utc_isValid = false;

    m_custom_properties_isSet = false;
    m_custom_properties_isValid = false;

    m_developer_portal_url_isSet = false;
    m_developer_portal_url_isValid = false;

    m_disable_gateway_isSet = false;
    m_disable_gateway_isValid = false;

    m_enable_client_certificate_isSet = false;
    m_enable_client_certificate_isValid = false;

    m_gateway_regional_url_isSet = false;
    m_gateway_regional_url_isValid = false;

    m_gateway_url_isSet = false;
    m_gateway_url_isValid = false;

    m_hostname_configurations_isSet = false;
    m_hostname_configurations_isValid = false;

    m_management_api_url_isSet = false;
    m_management_api_url_isValid = false;

    m_notification_sender_email_isSet = false;
    m_notification_sender_email_isValid = false;

    m_portal_url_isSet = false;
    m_portal_url_isValid = false;

    m_private_ip_addresses_isSet = false;
    m_private_ip_addresses_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_public_ip_addresses_isSet = false;
    m_public_ip_addresses_isValid = false;

    m_scm_url_isSet = false;
    m_scm_url_isValid = false;

    m_target_provisioning_state_isSet = false;
    m_target_provisioning_state_isValid = false;

    m_virtual_network_configuration_isSet = false;
    m_virtual_network_configuration_isValid = false;

    m_virtual_network_type_isSet = false;
    m_virtual_network_type_isValid = false;
}

void OAIApiManagementServiceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiManagementServiceProperties::fromJsonObject(QJsonObject json) {

    m_publisher_email_isValid = ::OpenAPI::fromJsonValue(m_publisher_email, json[QString("publisherEmail")]);
    m_publisher_email_isSet = !json[QString("publisherEmail")].isNull() && m_publisher_email_isValid;

    m_publisher_name_isValid = ::OpenAPI::fromJsonValue(m_publisher_name, json[QString("publisherName")]);
    m_publisher_name_isSet = !json[QString("publisherName")].isNull() && m_publisher_name_isValid;

    m_additional_locations_isValid = ::OpenAPI::fromJsonValue(m_additional_locations, json[QString("additionalLocations")]);
    m_additional_locations_isSet = !json[QString("additionalLocations")].isNull() && m_additional_locations_isValid;

    m_api_version_constraint_isValid = ::OpenAPI::fromJsonValue(m_api_version_constraint, json[QString("apiVersionConstraint")]);
    m_api_version_constraint_isSet = !json[QString("apiVersionConstraint")].isNull() && m_api_version_constraint_isValid;

    m_certificates_isValid = ::OpenAPI::fromJsonValue(m_certificates, json[QString("certificates")]);
    m_certificates_isSet = !json[QString("certificates")].isNull() && m_certificates_isValid;

    m_created_at_utc_isValid = ::OpenAPI::fromJsonValue(m_created_at_utc, json[QString("createdAtUtc")]);
    m_created_at_utc_isSet = !json[QString("createdAtUtc")].isNull() && m_created_at_utc_isValid;

    m_custom_properties_isValid = ::OpenAPI::fromJsonValue(m_custom_properties, json[QString("customProperties")]);
    m_custom_properties_isSet = !json[QString("customProperties")].isNull() && m_custom_properties_isValid;

    m_developer_portal_url_isValid = ::OpenAPI::fromJsonValue(m_developer_portal_url, json[QString("developerPortalUrl")]);
    m_developer_portal_url_isSet = !json[QString("developerPortalUrl")].isNull() && m_developer_portal_url_isValid;

    m_disable_gateway_isValid = ::OpenAPI::fromJsonValue(m_disable_gateway, json[QString("disableGateway")]);
    m_disable_gateway_isSet = !json[QString("disableGateway")].isNull() && m_disable_gateway_isValid;

    m_enable_client_certificate_isValid = ::OpenAPI::fromJsonValue(m_enable_client_certificate, json[QString("enableClientCertificate")]);
    m_enable_client_certificate_isSet = !json[QString("enableClientCertificate")].isNull() && m_enable_client_certificate_isValid;

    m_gateway_regional_url_isValid = ::OpenAPI::fromJsonValue(m_gateway_regional_url, json[QString("gatewayRegionalUrl")]);
    m_gateway_regional_url_isSet = !json[QString("gatewayRegionalUrl")].isNull() && m_gateway_regional_url_isValid;

    m_gateway_url_isValid = ::OpenAPI::fromJsonValue(m_gateway_url, json[QString("gatewayUrl")]);
    m_gateway_url_isSet = !json[QString("gatewayUrl")].isNull() && m_gateway_url_isValid;

    m_hostname_configurations_isValid = ::OpenAPI::fromJsonValue(m_hostname_configurations, json[QString("hostnameConfigurations")]);
    m_hostname_configurations_isSet = !json[QString("hostnameConfigurations")].isNull() && m_hostname_configurations_isValid;

    m_management_api_url_isValid = ::OpenAPI::fromJsonValue(m_management_api_url, json[QString("managementApiUrl")]);
    m_management_api_url_isSet = !json[QString("managementApiUrl")].isNull() && m_management_api_url_isValid;

    m_notification_sender_email_isValid = ::OpenAPI::fromJsonValue(m_notification_sender_email, json[QString("notificationSenderEmail")]);
    m_notification_sender_email_isSet = !json[QString("notificationSenderEmail")].isNull() && m_notification_sender_email_isValid;

    m_portal_url_isValid = ::OpenAPI::fromJsonValue(m_portal_url, json[QString("portalUrl")]);
    m_portal_url_isSet = !json[QString("portalUrl")].isNull() && m_portal_url_isValid;

    m_private_ip_addresses_isValid = ::OpenAPI::fromJsonValue(m_private_ip_addresses, json[QString("privateIPAddresses")]);
    m_private_ip_addresses_isSet = !json[QString("privateIPAddresses")].isNull() && m_private_ip_addresses_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_public_ip_addresses_isValid = ::OpenAPI::fromJsonValue(m_public_ip_addresses, json[QString("publicIPAddresses")]);
    m_public_ip_addresses_isSet = !json[QString("publicIPAddresses")].isNull() && m_public_ip_addresses_isValid;

    m_scm_url_isValid = ::OpenAPI::fromJsonValue(m_scm_url, json[QString("scmUrl")]);
    m_scm_url_isSet = !json[QString("scmUrl")].isNull() && m_scm_url_isValid;

    m_target_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_target_provisioning_state, json[QString("targetProvisioningState")]);
    m_target_provisioning_state_isSet = !json[QString("targetProvisioningState")].isNull() && m_target_provisioning_state_isValid;

    m_virtual_network_configuration_isValid = ::OpenAPI::fromJsonValue(m_virtual_network_configuration, json[QString("virtualNetworkConfiguration")]);
    m_virtual_network_configuration_isSet = !json[QString("virtualNetworkConfiguration")].isNull() && m_virtual_network_configuration_isValid;

    m_virtual_network_type_isValid = ::OpenAPI::fromJsonValue(m_virtual_network_type, json[QString("virtualNetworkType")]);
    m_virtual_network_type_isSet = !json[QString("virtualNetworkType")].isNull() && m_virtual_network_type_isValid;
}

QString OAIApiManagementServiceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiManagementServiceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_publisher_email_isSet) {
        obj.insert(QString("publisherEmail"), ::OpenAPI::toJsonValue(m_publisher_email));
    }
    if (m_publisher_name_isSet) {
        obj.insert(QString("publisherName"), ::OpenAPI::toJsonValue(m_publisher_name));
    }
    if (m_additional_locations.size() > 0) {
        obj.insert(QString("additionalLocations"), ::OpenAPI::toJsonValue(m_additional_locations));
    }
    if (m_api_version_constraint.isSet()) {
        obj.insert(QString("apiVersionConstraint"), ::OpenAPI::toJsonValue(m_api_version_constraint));
    }
    if (m_certificates.size() > 0) {
        obj.insert(QString("certificates"), ::OpenAPI::toJsonValue(m_certificates));
    }
    if (m_created_at_utc_isSet) {
        obj.insert(QString("createdAtUtc"), ::OpenAPI::toJsonValue(m_created_at_utc));
    }
    if (m_custom_properties.size() > 0) {
        obj.insert(QString("customProperties"), ::OpenAPI::toJsonValue(m_custom_properties));
    }
    if (m_developer_portal_url_isSet) {
        obj.insert(QString("developerPortalUrl"), ::OpenAPI::toJsonValue(m_developer_portal_url));
    }
    if (m_disable_gateway_isSet) {
        obj.insert(QString("disableGateway"), ::OpenAPI::toJsonValue(m_disable_gateway));
    }
    if (m_enable_client_certificate_isSet) {
        obj.insert(QString("enableClientCertificate"), ::OpenAPI::toJsonValue(m_enable_client_certificate));
    }
    if (m_gateway_regional_url_isSet) {
        obj.insert(QString("gatewayRegionalUrl"), ::OpenAPI::toJsonValue(m_gateway_regional_url));
    }
    if (m_gateway_url_isSet) {
        obj.insert(QString("gatewayUrl"), ::OpenAPI::toJsonValue(m_gateway_url));
    }
    if (m_hostname_configurations.size() > 0) {
        obj.insert(QString("hostnameConfigurations"), ::OpenAPI::toJsonValue(m_hostname_configurations));
    }
    if (m_management_api_url_isSet) {
        obj.insert(QString("managementApiUrl"), ::OpenAPI::toJsonValue(m_management_api_url));
    }
    if (m_notification_sender_email_isSet) {
        obj.insert(QString("notificationSenderEmail"), ::OpenAPI::toJsonValue(m_notification_sender_email));
    }
    if (m_portal_url_isSet) {
        obj.insert(QString("portalUrl"), ::OpenAPI::toJsonValue(m_portal_url));
    }
    if (m_private_ip_addresses.size() > 0) {
        obj.insert(QString("privateIPAddresses"), ::OpenAPI::toJsonValue(m_private_ip_addresses));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_public_ip_addresses.size() > 0) {
        obj.insert(QString("publicIPAddresses"), ::OpenAPI::toJsonValue(m_public_ip_addresses));
    }
    if (m_scm_url_isSet) {
        obj.insert(QString("scmUrl"), ::OpenAPI::toJsonValue(m_scm_url));
    }
    if (m_target_provisioning_state_isSet) {
        obj.insert(QString("targetProvisioningState"), ::OpenAPI::toJsonValue(m_target_provisioning_state));
    }
    if (m_virtual_network_configuration.isSet()) {
        obj.insert(QString("virtualNetworkConfiguration"), ::OpenAPI::toJsonValue(m_virtual_network_configuration));
    }
    if (m_virtual_network_type_isSet) {
        obj.insert(QString("virtualNetworkType"), ::OpenAPI::toJsonValue(m_virtual_network_type));
    }
    return obj;
}

QString OAIApiManagementServiceProperties::getPublisherEmail() const {
    return m_publisher_email;
}
void OAIApiManagementServiceProperties::setPublisherEmail(const QString &publisher_email) {
    m_publisher_email = publisher_email;
    m_publisher_email_isSet = true;
}

bool OAIApiManagementServiceProperties::is_publisher_email_Set() const{
    return m_publisher_email_isSet;
}

bool OAIApiManagementServiceProperties::is_publisher_email_Valid() const{
    return m_publisher_email_isValid;
}

QString OAIApiManagementServiceProperties::getPublisherName() const {
    return m_publisher_name;
}
void OAIApiManagementServiceProperties::setPublisherName(const QString &publisher_name) {
    m_publisher_name = publisher_name;
    m_publisher_name_isSet = true;
}

bool OAIApiManagementServiceProperties::is_publisher_name_Set() const{
    return m_publisher_name_isSet;
}

bool OAIApiManagementServiceProperties::is_publisher_name_Valid() const{
    return m_publisher_name_isValid;
}

QList<OAIAdditionalLocation> OAIApiManagementServiceProperties::getAdditionalLocations() const {
    return m_additional_locations;
}
void OAIApiManagementServiceProperties::setAdditionalLocations(const QList<OAIAdditionalLocation> &additional_locations) {
    m_additional_locations = additional_locations;
    m_additional_locations_isSet = true;
}

bool OAIApiManagementServiceProperties::is_additional_locations_Set() const{
    return m_additional_locations_isSet;
}

bool OAIApiManagementServiceProperties::is_additional_locations_Valid() const{
    return m_additional_locations_isValid;
}

OAIApiVersionConstraint OAIApiManagementServiceProperties::getApiVersionConstraint() const {
    return m_api_version_constraint;
}
void OAIApiManagementServiceProperties::setApiVersionConstraint(const OAIApiVersionConstraint &api_version_constraint) {
    m_api_version_constraint = api_version_constraint;
    m_api_version_constraint_isSet = true;
}

bool OAIApiManagementServiceProperties::is_api_version_constraint_Set() const{
    return m_api_version_constraint_isSet;
}

bool OAIApiManagementServiceProperties::is_api_version_constraint_Valid() const{
    return m_api_version_constraint_isValid;
}

QList<OAICertificateConfiguration> OAIApiManagementServiceProperties::getCertificates() const {
    return m_certificates;
}
void OAIApiManagementServiceProperties::setCertificates(const QList<OAICertificateConfiguration> &certificates) {
    m_certificates = certificates;
    m_certificates_isSet = true;
}

bool OAIApiManagementServiceProperties::is_certificates_Set() const{
    return m_certificates_isSet;
}

bool OAIApiManagementServiceProperties::is_certificates_Valid() const{
    return m_certificates_isValid;
}

QDateTime OAIApiManagementServiceProperties::getCreatedAtUtc() const {
    return m_created_at_utc;
}
void OAIApiManagementServiceProperties::setCreatedAtUtc(const QDateTime &created_at_utc) {
    m_created_at_utc = created_at_utc;
    m_created_at_utc_isSet = true;
}

bool OAIApiManagementServiceProperties::is_created_at_utc_Set() const{
    return m_created_at_utc_isSet;
}

bool OAIApiManagementServiceProperties::is_created_at_utc_Valid() const{
    return m_created_at_utc_isValid;
}

QMap<QString, QString> OAIApiManagementServiceProperties::getCustomProperties() const {
    return m_custom_properties;
}
void OAIApiManagementServiceProperties::setCustomProperties(const QMap<QString, QString> &custom_properties) {
    m_custom_properties = custom_properties;
    m_custom_properties_isSet = true;
}

bool OAIApiManagementServiceProperties::is_custom_properties_Set() const{
    return m_custom_properties_isSet;
}

bool OAIApiManagementServiceProperties::is_custom_properties_Valid() const{
    return m_custom_properties_isValid;
}

QString OAIApiManagementServiceProperties::getDeveloperPortalUrl() const {
    return m_developer_portal_url;
}
void OAIApiManagementServiceProperties::setDeveloperPortalUrl(const QString &developer_portal_url) {
    m_developer_portal_url = developer_portal_url;
    m_developer_portal_url_isSet = true;
}

bool OAIApiManagementServiceProperties::is_developer_portal_url_Set() const{
    return m_developer_portal_url_isSet;
}

bool OAIApiManagementServiceProperties::is_developer_portal_url_Valid() const{
    return m_developer_portal_url_isValid;
}

bool OAIApiManagementServiceProperties::isDisableGateway() const {
    return m_disable_gateway;
}
void OAIApiManagementServiceProperties::setDisableGateway(const bool &disable_gateway) {
    m_disable_gateway = disable_gateway;
    m_disable_gateway_isSet = true;
}

bool OAIApiManagementServiceProperties::is_disable_gateway_Set() const{
    return m_disable_gateway_isSet;
}

bool OAIApiManagementServiceProperties::is_disable_gateway_Valid() const{
    return m_disable_gateway_isValid;
}

bool OAIApiManagementServiceProperties::isEnableClientCertificate() const {
    return m_enable_client_certificate;
}
void OAIApiManagementServiceProperties::setEnableClientCertificate(const bool &enable_client_certificate) {
    m_enable_client_certificate = enable_client_certificate;
    m_enable_client_certificate_isSet = true;
}

bool OAIApiManagementServiceProperties::is_enable_client_certificate_Set() const{
    return m_enable_client_certificate_isSet;
}

bool OAIApiManagementServiceProperties::is_enable_client_certificate_Valid() const{
    return m_enable_client_certificate_isValid;
}

QString OAIApiManagementServiceProperties::getGatewayRegionalUrl() const {
    return m_gateway_regional_url;
}
void OAIApiManagementServiceProperties::setGatewayRegionalUrl(const QString &gateway_regional_url) {
    m_gateway_regional_url = gateway_regional_url;
    m_gateway_regional_url_isSet = true;
}

bool OAIApiManagementServiceProperties::is_gateway_regional_url_Set() const{
    return m_gateway_regional_url_isSet;
}

bool OAIApiManagementServiceProperties::is_gateway_regional_url_Valid() const{
    return m_gateway_regional_url_isValid;
}

QString OAIApiManagementServiceProperties::getGatewayUrl() const {
    return m_gateway_url;
}
void OAIApiManagementServiceProperties::setGatewayUrl(const QString &gateway_url) {
    m_gateway_url = gateway_url;
    m_gateway_url_isSet = true;
}

bool OAIApiManagementServiceProperties::is_gateway_url_Set() const{
    return m_gateway_url_isSet;
}

bool OAIApiManagementServiceProperties::is_gateway_url_Valid() const{
    return m_gateway_url_isValid;
}

QList<OAIHostnameConfiguration> OAIApiManagementServiceProperties::getHostnameConfigurations() const {
    return m_hostname_configurations;
}
void OAIApiManagementServiceProperties::setHostnameConfigurations(const QList<OAIHostnameConfiguration> &hostname_configurations) {
    m_hostname_configurations = hostname_configurations;
    m_hostname_configurations_isSet = true;
}

bool OAIApiManagementServiceProperties::is_hostname_configurations_Set() const{
    return m_hostname_configurations_isSet;
}

bool OAIApiManagementServiceProperties::is_hostname_configurations_Valid() const{
    return m_hostname_configurations_isValid;
}

QString OAIApiManagementServiceProperties::getManagementApiUrl() const {
    return m_management_api_url;
}
void OAIApiManagementServiceProperties::setManagementApiUrl(const QString &management_api_url) {
    m_management_api_url = management_api_url;
    m_management_api_url_isSet = true;
}

bool OAIApiManagementServiceProperties::is_management_api_url_Set() const{
    return m_management_api_url_isSet;
}

bool OAIApiManagementServiceProperties::is_management_api_url_Valid() const{
    return m_management_api_url_isValid;
}

QString OAIApiManagementServiceProperties::getNotificationSenderEmail() const {
    return m_notification_sender_email;
}
void OAIApiManagementServiceProperties::setNotificationSenderEmail(const QString &notification_sender_email) {
    m_notification_sender_email = notification_sender_email;
    m_notification_sender_email_isSet = true;
}

bool OAIApiManagementServiceProperties::is_notification_sender_email_Set() const{
    return m_notification_sender_email_isSet;
}

bool OAIApiManagementServiceProperties::is_notification_sender_email_Valid() const{
    return m_notification_sender_email_isValid;
}

QString OAIApiManagementServiceProperties::getPortalUrl() const {
    return m_portal_url;
}
void OAIApiManagementServiceProperties::setPortalUrl(const QString &portal_url) {
    m_portal_url = portal_url;
    m_portal_url_isSet = true;
}

bool OAIApiManagementServiceProperties::is_portal_url_Set() const{
    return m_portal_url_isSet;
}

bool OAIApiManagementServiceProperties::is_portal_url_Valid() const{
    return m_portal_url_isValid;
}

QList<QString> OAIApiManagementServiceProperties::getPrivateIpAddresses() const {
    return m_private_ip_addresses;
}
void OAIApiManagementServiceProperties::setPrivateIpAddresses(const QList<QString> &private_ip_addresses) {
    m_private_ip_addresses = private_ip_addresses;
    m_private_ip_addresses_isSet = true;
}

bool OAIApiManagementServiceProperties::is_private_ip_addresses_Set() const{
    return m_private_ip_addresses_isSet;
}

bool OAIApiManagementServiceProperties::is_private_ip_addresses_Valid() const{
    return m_private_ip_addresses_isValid;
}

QString OAIApiManagementServiceProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIApiManagementServiceProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIApiManagementServiceProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIApiManagementServiceProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QList<QString> OAIApiManagementServiceProperties::getPublicIpAddresses() const {
    return m_public_ip_addresses;
}
void OAIApiManagementServiceProperties::setPublicIpAddresses(const QList<QString> &public_ip_addresses) {
    m_public_ip_addresses = public_ip_addresses;
    m_public_ip_addresses_isSet = true;
}

bool OAIApiManagementServiceProperties::is_public_ip_addresses_Set() const{
    return m_public_ip_addresses_isSet;
}

bool OAIApiManagementServiceProperties::is_public_ip_addresses_Valid() const{
    return m_public_ip_addresses_isValid;
}

QString OAIApiManagementServiceProperties::getScmUrl() const {
    return m_scm_url;
}
void OAIApiManagementServiceProperties::setScmUrl(const QString &scm_url) {
    m_scm_url = scm_url;
    m_scm_url_isSet = true;
}

bool OAIApiManagementServiceProperties::is_scm_url_Set() const{
    return m_scm_url_isSet;
}

bool OAIApiManagementServiceProperties::is_scm_url_Valid() const{
    return m_scm_url_isValid;
}

QString OAIApiManagementServiceProperties::getTargetProvisioningState() const {
    return m_target_provisioning_state;
}
void OAIApiManagementServiceProperties::setTargetProvisioningState(const QString &target_provisioning_state) {
    m_target_provisioning_state = target_provisioning_state;
    m_target_provisioning_state_isSet = true;
}

bool OAIApiManagementServiceProperties::is_target_provisioning_state_Set() const{
    return m_target_provisioning_state_isSet;
}

bool OAIApiManagementServiceProperties::is_target_provisioning_state_Valid() const{
    return m_target_provisioning_state_isValid;
}

OAIVirtualNetworkConfiguration OAIApiManagementServiceProperties::getVirtualNetworkConfiguration() const {
    return m_virtual_network_configuration;
}
void OAIApiManagementServiceProperties::setVirtualNetworkConfiguration(const OAIVirtualNetworkConfiguration &virtual_network_configuration) {
    m_virtual_network_configuration = virtual_network_configuration;
    m_virtual_network_configuration_isSet = true;
}

bool OAIApiManagementServiceProperties::is_virtual_network_configuration_Set() const{
    return m_virtual_network_configuration_isSet;
}

bool OAIApiManagementServiceProperties::is_virtual_network_configuration_Valid() const{
    return m_virtual_network_configuration_isValid;
}

QString OAIApiManagementServiceProperties::getVirtualNetworkType() const {
    return m_virtual_network_type;
}
void OAIApiManagementServiceProperties::setVirtualNetworkType(const QString &virtual_network_type) {
    m_virtual_network_type = virtual_network_type;
    m_virtual_network_type_isSet = true;
}

bool OAIApiManagementServiceProperties::is_virtual_network_type_Set() const{
    return m_virtual_network_type_isSet;
}

bool OAIApiManagementServiceProperties::is_virtual_network_type_Valid() const{
    return m_virtual_network_type_isValid;
}

bool OAIApiManagementServiceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_publisher_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_version_constraint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_developer_portal_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_gateway_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_client_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_regional_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_management_api_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_sender_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portal_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_ip_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_ip_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scm_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_network_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_network_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiManagementServiceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_publisher_email_isValid && m_publisher_name_isValid && true;
}

} // namespace OpenAPI
