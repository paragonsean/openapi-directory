/**
 * ApiManagementClient
 * Use these REST APIs to manage Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiVersionConstraint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiVersionConstraint::OAIApiVersionConstraint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiVersionConstraint::OAIApiVersionConstraint() {
    this->initializeModel();
}

OAIApiVersionConstraint::~OAIApiVersionConstraint() {}

void OAIApiVersionConstraint::initializeModel() {

    m_min_api_version_isSet = false;
    m_min_api_version_isValid = false;
}

void OAIApiVersionConstraint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiVersionConstraint::fromJsonObject(QJsonObject json) {

    m_min_api_version_isValid = ::OpenAPI::fromJsonValue(m_min_api_version, json[QString("minApiVersion")]);
    m_min_api_version_isSet = !json[QString("minApiVersion")].isNull() && m_min_api_version_isValid;
}

QString OAIApiVersionConstraint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiVersionConstraint::asJsonObject() const {
    QJsonObject obj;
    if (m_min_api_version_isSet) {
        obj.insert(QString("minApiVersion"), ::OpenAPI::toJsonValue(m_min_api_version));
    }
    return obj;
}

QString OAIApiVersionConstraint::getMinApiVersion() const {
    return m_min_api_version;
}
void OAIApiVersionConstraint::setMinApiVersion(const QString &min_api_version) {
    m_min_api_version = min_api_version;
    m_min_api_version_isSet = true;
}

bool OAIApiVersionConstraint::is_min_api_version_Set() const{
    return m_min_api_version_isSet;
}

bool OAIApiVersionConstraint::is_min_api_version_Valid() const{
    return m_min_api_version_isValid;
}

bool OAIApiVersionConstraint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_min_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiVersionConstraint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
