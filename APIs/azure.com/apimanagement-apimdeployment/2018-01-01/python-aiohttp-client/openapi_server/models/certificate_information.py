# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CertificateInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiry: datetime=None, subject: str=None, thumbprint: str=None):
        """CertificateInformation - a model defined in OpenAPI

        :param expiry: The expiry of this CertificateInformation.
        :param subject: The subject of this CertificateInformation.
        :param thumbprint: The thumbprint of this CertificateInformation.
        """
        self.openapi_types = {
            'expiry': datetime,
            'subject': str,
            'thumbprint': str
        }

        self.attribute_map = {
            'expiry': 'expiry',
            'subject': 'subject',
            'thumbprint': 'thumbprint'
        }

        self._expiry = expiry
        self._subject = subject
        self._thumbprint = thumbprint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateInformation of this CertificateInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiry(self):
        """Gets the expiry of this CertificateInformation.

        Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.

        :return: The expiry of this CertificateInformation.
        :rtype: datetime
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this CertificateInformation.

        Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.

        :param expiry: The expiry of this CertificateInformation.
        :type expiry: datetime
        """
        if expiry is None:
            raise ValueError("Invalid value for `expiry`, must not be `None`")

        self._expiry = expiry

    @property
    def subject(self):
        """Gets the subject of this CertificateInformation.

        Subject of the certificate.

        :return: The subject of this CertificateInformation.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CertificateInformation.

        Subject of the certificate.

        :param subject: The subject of this CertificateInformation.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject

    @property
    def thumbprint(self):
        """Gets the thumbprint of this CertificateInformation.

        Thumbprint of the certificate.

        :return: The thumbprint of this CertificateInformation.
        :rtype: str
        """
        return self._thumbprint

    @thumbprint.setter
    def thumbprint(self, thumbprint):
        """Sets the thumbprint of this CertificateInformation.

        Thumbprint of the certificate.

        :param thumbprint: The thumbprint of this CertificateInformation.
        :type thumbprint: str
        """
        if thumbprint is None:
            raise ValueError("Invalid value for `thumbprint`, must not be `None`")

        self._thumbprint = thumbprint
