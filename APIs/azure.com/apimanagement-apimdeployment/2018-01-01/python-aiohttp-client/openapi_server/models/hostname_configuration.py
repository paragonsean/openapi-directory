# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.certificate_information import CertificateInformation
from openapi_server import util


class HostnameConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate: CertificateInformation=None, certificate_password: str=None, default_ssl_binding: bool=False, encoded_certificate: str=None, host_name: str=None, key_vault_id: str=None, negotiate_client_certificate: bool=False, type: str=None):
        """HostnameConfiguration - a model defined in OpenAPI

        :param certificate: The certificate of this HostnameConfiguration.
        :param certificate_password: The certificate_password of this HostnameConfiguration.
        :param default_ssl_binding: The default_ssl_binding of this HostnameConfiguration.
        :param encoded_certificate: The encoded_certificate of this HostnameConfiguration.
        :param host_name: The host_name of this HostnameConfiguration.
        :param key_vault_id: The key_vault_id of this HostnameConfiguration.
        :param negotiate_client_certificate: The negotiate_client_certificate of this HostnameConfiguration.
        :param type: The type of this HostnameConfiguration.
        """
        self.openapi_types = {
            'certificate': CertificateInformation,
            'certificate_password': str,
            'default_ssl_binding': bool,
            'encoded_certificate': str,
            'host_name': str,
            'key_vault_id': str,
            'negotiate_client_certificate': bool,
            'type': str
        }

        self.attribute_map = {
            'certificate': 'certificate',
            'certificate_password': 'certificatePassword',
            'default_ssl_binding': 'defaultSslBinding',
            'encoded_certificate': 'encodedCertificate',
            'host_name': 'hostName',
            'key_vault_id': 'keyVaultId',
            'negotiate_client_certificate': 'negotiateClientCertificate',
            'type': 'type'
        }

        self._certificate = certificate
        self._certificate_password = certificate_password
        self._default_ssl_binding = default_ssl_binding
        self._encoded_certificate = encoded_certificate
        self._host_name = host_name
        self._key_vault_id = key_vault_id
        self._negotiate_client_certificate = negotiate_client_certificate
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HostnameConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HostnameConfiguration of this HostnameConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate(self):
        """Gets the certificate of this HostnameConfiguration.


        :return: The certificate of this HostnameConfiguration.
        :rtype: CertificateInformation
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this HostnameConfiguration.


        :param certificate: The certificate of this HostnameConfiguration.
        :type certificate: CertificateInformation
        """

        self._certificate = certificate

    @property
    def certificate_password(self):
        """Gets the certificate_password of this HostnameConfiguration.

        Certificate Password.

        :return: The certificate_password of this HostnameConfiguration.
        :rtype: str
        """
        return self._certificate_password

    @certificate_password.setter
    def certificate_password(self, certificate_password):
        """Sets the certificate_password of this HostnameConfiguration.

        Certificate Password.

        :param certificate_password: The certificate_password of this HostnameConfiguration.
        :type certificate_password: str
        """

        self._certificate_password = certificate_password

    @property
    def default_ssl_binding(self):
        """Gets the default_ssl_binding of this HostnameConfiguration.

        Specify true to setup the certificate associated with this Hostname as the Default SSL Certificate. If a client does not send the SNI header, then this will be the certificate that will be challenged. The property is useful if a service has multiple custom hostname enabled and it needs to decide on the default ssl certificate. The setting only applied to Proxy Hostname Type.

        :return: The default_ssl_binding of this HostnameConfiguration.
        :rtype: bool
        """
        return self._default_ssl_binding

    @default_ssl_binding.setter
    def default_ssl_binding(self, default_ssl_binding):
        """Sets the default_ssl_binding of this HostnameConfiguration.

        Specify true to setup the certificate associated with this Hostname as the Default SSL Certificate. If a client does not send the SNI header, then this will be the certificate that will be challenged. The property is useful if a service has multiple custom hostname enabled and it needs to decide on the default ssl certificate. The setting only applied to Proxy Hostname Type.

        :param default_ssl_binding: The default_ssl_binding of this HostnameConfiguration.
        :type default_ssl_binding: bool
        """

        self._default_ssl_binding = default_ssl_binding

    @property
    def encoded_certificate(self):
        """Gets the encoded_certificate of this HostnameConfiguration.

        Base64 Encoded certificate.

        :return: The encoded_certificate of this HostnameConfiguration.
        :rtype: str
        """
        return self._encoded_certificate

    @encoded_certificate.setter
    def encoded_certificate(self, encoded_certificate):
        """Sets the encoded_certificate of this HostnameConfiguration.

        Base64 Encoded certificate.

        :param encoded_certificate: The encoded_certificate of this HostnameConfiguration.
        :type encoded_certificate: str
        """

        self._encoded_certificate = encoded_certificate

    @property
    def host_name(self):
        """Gets the host_name of this HostnameConfiguration.

        Hostname to configure on the Api Management service.

        :return: The host_name of this HostnameConfiguration.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this HostnameConfiguration.

        Hostname to configure on the Api Management service.

        :param host_name: The host_name of this HostnameConfiguration.
        :type host_name: str
        """
        if host_name is None:
            raise ValueError("Invalid value for `host_name`, must not be `None`")

        self._host_name = host_name

    @property
    def key_vault_id(self):
        """Gets the key_vault_id of this HostnameConfiguration.

        Url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version is provided, auto-update of ssl certificate will not work. This requires Api Management service to be configured with MSI. The secret should be of type *application/x-pkcs12*

        :return: The key_vault_id of this HostnameConfiguration.
        :rtype: str
        """
        return self._key_vault_id

    @key_vault_id.setter
    def key_vault_id(self, key_vault_id):
        """Sets the key_vault_id of this HostnameConfiguration.

        Url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version is provided, auto-update of ssl certificate will not work. This requires Api Management service to be configured with MSI. The secret should be of type *application/x-pkcs12*

        :param key_vault_id: The key_vault_id of this HostnameConfiguration.
        :type key_vault_id: str
        """

        self._key_vault_id = key_vault_id

    @property
    def negotiate_client_certificate(self):
        """Gets the negotiate_client_certificate of this HostnameConfiguration.

        Specify true to always negotiate client certificate on the hostname. Default Value is false.

        :return: The negotiate_client_certificate of this HostnameConfiguration.
        :rtype: bool
        """
        return self._negotiate_client_certificate

    @negotiate_client_certificate.setter
    def negotiate_client_certificate(self, negotiate_client_certificate):
        """Sets the negotiate_client_certificate of this HostnameConfiguration.

        Specify true to always negotiate client certificate on the hostname. Default Value is false.

        :param negotiate_client_certificate: The negotiate_client_certificate of this HostnameConfiguration.
        :type negotiate_client_certificate: bool
        """

        self._negotiate_client_certificate = negotiate_client_certificate

    @property
    def type(self):
        """Gets the type of this HostnameConfiguration.

        Hostname type.

        :return: The type of this HostnameConfiguration.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HostnameConfiguration.

        Hostname type.

        :param type: The type of this HostnameConfiguration.
        :type type: str
        """
        allowed_values = ["Proxy", "Portal", "Management", "Scm"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
