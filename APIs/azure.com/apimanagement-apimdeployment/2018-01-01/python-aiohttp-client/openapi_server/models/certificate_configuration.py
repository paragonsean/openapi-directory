# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.certificate_information import CertificateInformation
from openapi_server import util


class CertificateConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate: CertificateInformation=None, certificate_password: str=None, encoded_certificate: str=None, store_name: str=None):
        """CertificateConfiguration - a model defined in OpenAPI

        :param certificate: The certificate of this CertificateConfiguration.
        :param certificate_password: The certificate_password of this CertificateConfiguration.
        :param encoded_certificate: The encoded_certificate of this CertificateConfiguration.
        :param store_name: The store_name of this CertificateConfiguration.
        """
        self.openapi_types = {
            'certificate': CertificateInformation,
            'certificate_password': str,
            'encoded_certificate': str,
            'store_name': str
        }

        self.attribute_map = {
            'certificate': 'certificate',
            'certificate_password': 'certificatePassword',
            'encoded_certificate': 'encodedCertificate',
            'store_name': 'storeName'
        }

        self._certificate = certificate
        self._certificate_password = certificate_password
        self._encoded_certificate = encoded_certificate
        self._store_name = store_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateConfiguration of this CertificateConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate(self):
        """Gets the certificate of this CertificateConfiguration.


        :return: The certificate of this CertificateConfiguration.
        :rtype: CertificateInformation
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this CertificateConfiguration.


        :param certificate: The certificate of this CertificateConfiguration.
        :type certificate: CertificateInformation
        """

        self._certificate = certificate

    @property
    def certificate_password(self):
        """Gets the certificate_password of this CertificateConfiguration.

        Certificate Password.

        :return: The certificate_password of this CertificateConfiguration.
        :rtype: str
        """
        return self._certificate_password

    @certificate_password.setter
    def certificate_password(self, certificate_password):
        """Sets the certificate_password of this CertificateConfiguration.

        Certificate Password.

        :param certificate_password: The certificate_password of this CertificateConfiguration.
        :type certificate_password: str
        """

        self._certificate_password = certificate_password

    @property
    def encoded_certificate(self):
        """Gets the encoded_certificate of this CertificateConfiguration.

        Base64 Encoded certificate.

        :return: The encoded_certificate of this CertificateConfiguration.
        :rtype: str
        """
        return self._encoded_certificate

    @encoded_certificate.setter
    def encoded_certificate(self, encoded_certificate):
        """Sets the encoded_certificate of this CertificateConfiguration.

        Base64 Encoded certificate.

        :param encoded_certificate: The encoded_certificate of this CertificateConfiguration.
        :type encoded_certificate: str
        """

        self._encoded_certificate = encoded_certificate

    @property
    def store_name(self):
        """Gets the store_name of this CertificateConfiguration.

        The System.Security.Cryptography.x509certificates.StoreName certificate store location. Only Root and CertificateAuthority are valid locations.

        :return: The store_name of this CertificateConfiguration.
        :rtype: str
        """
        return self._store_name

    @store_name.setter
    def store_name(self, store_name):
        """Sets the store_name of this CertificateConfiguration.

        The System.Security.Cryptography.x509certificates.StoreName certificate store location. Only Root and CertificateAuthority are valid locations.

        :param store_name: The store_name of this CertificateConfiguration.
        :type store_name: str
        """
        allowed_values = ["CertificateAuthority", "Root"]  # noqa: E501
        if store_name not in allowed_values:
            raise ValueError(
                "Invalid value for `store_name` ({0}), must be one of {1}"
                .format(store_name, allowed_values)
            )

        self._store_name = store_name
