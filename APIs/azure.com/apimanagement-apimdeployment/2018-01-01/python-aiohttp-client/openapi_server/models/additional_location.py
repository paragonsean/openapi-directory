# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_management_service_sku_properties import ApiManagementServiceSkuProperties
from openapi_server.models.virtual_network_configuration import VirtualNetworkConfiguration
from openapi_server import util


class AdditionalLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gateway_regional_url: str=None, location: str=None, private_ip_addresses: List[str]=None, public_ip_addresses: List[str]=None, sku: ApiManagementServiceSkuProperties=None, virtual_network_configuration: VirtualNetworkConfiguration=None):
        """AdditionalLocation - a model defined in OpenAPI

        :param gateway_regional_url: The gateway_regional_url of this AdditionalLocation.
        :param location: The location of this AdditionalLocation.
        :param private_ip_addresses: The private_ip_addresses of this AdditionalLocation.
        :param public_ip_addresses: The public_ip_addresses of this AdditionalLocation.
        :param sku: The sku of this AdditionalLocation.
        :param virtual_network_configuration: The virtual_network_configuration of this AdditionalLocation.
        """
        self.openapi_types = {
            'gateway_regional_url': str,
            'location': str,
            'private_ip_addresses': List[str],
            'public_ip_addresses': List[str],
            'sku': ApiManagementServiceSkuProperties,
            'virtual_network_configuration': VirtualNetworkConfiguration
        }

        self.attribute_map = {
            'gateway_regional_url': 'gatewayRegionalUrl',
            'location': 'location',
            'private_ip_addresses': 'privateIPAddresses',
            'public_ip_addresses': 'publicIPAddresses',
            'sku': 'sku',
            'virtual_network_configuration': 'virtualNetworkConfiguration'
        }

        self._gateway_regional_url = gateway_regional_url
        self._location = location
        self._private_ip_addresses = private_ip_addresses
        self._public_ip_addresses = public_ip_addresses
        self._sku = sku
        self._virtual_network_configuration = virtual_network_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdditionalLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdditionalLocation of this AdditionalLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gateway_regional_url(self):
        """Gets the gateway_regional_url of this AdditionalLocation.

        Gateway URL of the API Management service in the Region.

        :return: The gateway_regional_url of this AdditionalLocation.
        :rtype: str
        """
        return self._gateway_regional_url

    @gateway_regional_url.setter
    def gateway_regional_url(self, gateway_regional_url):
        """Sets the gateway_regional_url of this AdditionalLocation.

        Gateway URL of the API Management service in the Region.

        :param gateway_regional_url: The gateway_regional_url of this AdditionalLocation.
        :type gateway_regional_url: str
        """

        self._gateway_regional_url = gateway_regional_url

    @property
    def location(self):
        """Gets the location of this AdditionalLocation.

        The location name of the additional region among Azure Data center regions.

        :return: The location of this AdditionalLocation.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this AdditionalLocation.

        The location name of the additional region among Azure Data center regions.

        :param location: The location of this AdditionalLocation.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def private_ip_addresses(self):
        """Gets the private_ip_addresses of this AdditionalLocation.

        Private Static Load Balanced IP addresses of the API Management service which is deployed in an Internal Virtual Network in a particular additional location. Available only for Basic, Standard and Premium SKU.

        :return: The private_ip_addresses of this AdditionalLocation.
        :rtype: List[str]
        """
        return self._private_ip_addresses

    @private_ip_addresses.setter
    def private_ip_addresses(self, private_ip_addresses):
        """Sets the private_ip_addresses of this AdditionalLocation.

        Private Static Load Balanced IP addresses of the API Management service which is deployed in an Internal Virtual Network in a particular additional location. Available only for Basic, Standard and Premium SKU.

        :param private_ip_addresses: The private_ip_addresses of this AdditionalLocation.
        :type private_ip_addresses: List[str]
        """

        self._private_ip_addresses = private_ip_addresses

    @property
    def public_ip_addresses(self):
        """Gets the public_ip_addresses of this AdditionalLocation.

        Public Static Load Balanced IP addresses of the API Management service in the additional location. Available only for Basic, Standard and Premium SKU.

        :return: The public_ip_addresses of this AdditionalLocation.
        :rtype: List[str]
        """
        return self._public_ip_addresses

    @public_ip_addresses.setter
    def public_ip_addresses(self, public_ip_addresses):
        """Sets the public_ip_addresses of this AdditionalLocation.

        Public Static Load Balanced IP addresses of the API Management service in the additional location. Available only for Basic, Standard and Premium SKU.

        :param public_ip_addresses: The public_ip_addresses of this AdditionalLocation.
        :type public_ip_addresses: List[str]
        """

        self._public_ip_addresses = public_ip_addresses

    @property
    def sku(self):
        """Gets the sku of this AdditionalLocation.


        :return: The sku of this AdditionalLocation.
        :rtype: ApiManagementServiceSkuProperties
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this AdditionalLocation.


        :param sku: The sku of this AdditionalLocation.
        :type sku: ApiManagementServiceSkuProperties
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")

        self._sku = sku

    @property
    def virtual_network_configuration(self):
        """Gets the virtual_network_configuration of this AdditionalLocation.


        :return: The virtual_network_configuration of this AdditionalLocation.
        :rtype: VirtualNetworkConfiguration
        """
        return self._virtual_network_configuration

    @virtual_network_configuration.setter
    def virtual_network_configuration(self, virtual_network_configuration):
        """Sets the virtual_network_configuration of this AdditionalLocation.


        :param virtual_network_configuration: The virtual_network_configuration of this AdditionalLocation.
        :type virtual_network_configuration: VirtualNetworkConfiguration
        """

        self._virtual_network_configuration = virtual_network_configuration
