/**
 * ApiManagementClient
 * Use these REST APIs to manage Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateInformation::OAICertificateInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateInformation::OAICertificateInformation() {
    this->initializeModel();
}

OAICertificateInformation::~OAICertificateInformation() {}

void OAICertificateInformation::initializeModel() {

    m_expiry_isSet = false;
    m_expiry_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_thumbprint_isSet = false;
    m_thumbprint_isValid = false;
}

void OAICertificateInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateInformation::fromJsonObject(QJsonObject json) {

    m_expiry_isValid = ::OpenAPI::fromJsonValue(m_expiry, json[QString("expiry")]);
    m_expiry_isSet = !json[QString("expiry")].isNull() && m_expiry_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_thumbprint_isValid = ::OpenAPI::fromJsonValue(m_thumbprint, json[QString("thumbprint")]);
    m_thumbprint_isSet = !json[QString("thumbprint")].isNull() && m_thumbprint_isValid;
}

QString OAICertificateInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_expiry_isSet) {
        obj.insert(QString("expiry"), ::OpenAPI::toJsonValue(m_expiry));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_thumbprint_isSet) {
        obj.insert(QString("thumbprint"), ::OpenAPI::toJsonValue(m_thumbprint));
    }
    return obj;
}

QDateTime OAICertificateInformation::getExpiry() const {
    return m_expiry;
}
void OAICertificateInformation::setExpiry(const QDateTime &expiry) {
    m_expiry = expiry;
    m_expiry_isSet = true;
}

bool OAICertificateInformation::is_expiry_Set() const{
    return m_expiry_isSet;
}

bool OAICertificateInformation::is_expiry_Valid() const{
    return m_expiry_isValid;
}

QString OAICertificateInformation::getSubject() const {
    return m_subject;
}
void OAICertificateInformation::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAICertificateInformation::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAICertificateInformation::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAICertificateInformation::getThumbprint() const {
    return m_thumbprint;
}
void OAICertificateInformation::setThumbprint(const QString &thumbprint) {
    m_thumbprint = thumbprint;
    m_thumbprint_isSet = true;
}

bool OAICertificateInformation::is_thumbprint_Set() const{
    return m_thumbprint_isSet;
}

bool OAICertificateInformation::is_thumbprint_Valid() const{
    return m_thumbprint_isValid;
}

bool OAICertificateInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbprint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expiry_isValid && m_subject_isValid && m_thumbprint_isValid && true;
}

} // namespace OpenAPI
