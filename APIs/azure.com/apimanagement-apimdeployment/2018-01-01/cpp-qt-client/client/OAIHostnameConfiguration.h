/**
 * ApiManagementClient
 * Use these REST APIs to manage Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHostnameConfiguration.h
 *
 * Custom hostname configuration.
 */

#ifndef OAIHostnameConfiguration_H
#define OAIHostnameConfiguration_H

#include <QJsonObject>

#include "OAICertificateInformation.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICertificateInformation;

class OAIHostnameConfiguration : public OAIObject {
public:
    OAIHostnameConfiguration();
    OAIHostnameConfiguration(QString json);
    ~OAIHostnameConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICertificateInformation getCertificate() const;
    void setCertificate(const OAICertificateInformation &certificate);
    bool is_certificate_Set() const;
    bool is_certificate_Valid() const;

    QString getCertificatePassword() const;
    void setCertificatePassword(const QString &certificate_password);
    bool is_certificate_password_Set() const;
    bool is_certificate_password_Valid() const;

    bool isDefaultSslBinding() const;
    void setDefaultSslBinding(const bool &default_ssl_binding);
    bool is_default_ssl_binding_Set() const;
    bool is_default_ssl_binding_Valid() const;

    QString getEncodedCertificate() const;
    void setEncodedCertificate(const QString &encoded_certificate);
    bool is_encoded_certificate_Set() const;
    bool is_encoded_certificate_Valid() const;

    QString getHostName() const;
    void setHostName(const QString &host_name);
    bool is_host_name_Set() const;
    bool is_host_name_Valid() const;

    QString getKeyVaultId() const;
    void setKeyVaultId(const QString &key_vault_id);
    bool is_key_vault_id_Set() const;
    bool is_key_vault_id_Valid() const;

    bool isNegotiateClientCertificate() const;
    void setNegotiateClientCertificate(const bool &negotiate_client_certificate);
    bool is_negotiate_client_certificate_Set() const;
    bool is_negotiate_client_certificate_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICertificateInformation m_certificate;
    bool m_certificate_isSet;
    bool m_certificate_isValid;

    QString m_certificate_password;
    bool m_certificate_password_isSet;
    bool m_certificate_password_isValid;

    bool m_default_ssl_binding;
    bool m_default_ssl_binding_isSet;
    bool m_default_ssl_binding_isValid;

    QString m_encoded_certificate;
    bool m_encoded_certificate_isSet;
    bool m_encoded_certificate_isValid;

    QString m_host_name;
    bool m_host_name_isSet;
    bool m_host_name_isValid;

    QString m_key_vault_id;
    bool m_key_vault_id_isSet;
    bool m_key_vault_id_isValid;

    bool m_negotiate_client_certificate;
    bool m_negotiate_client_certificate_isSet;
    bool m_negotiate_client_certificate_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHostnameConfiguration)

#endif // OAIHostnameConfiguration_H
