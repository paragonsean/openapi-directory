/*
 * ApiManagementClient
 * Use these REST APIs to manage Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CertificateInformation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Custom hostname configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:45:37.452190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HostnameConfiguration {
  public static final String SERIALIZED_NAME_CERTIFICATE = "certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  private CertificateInformation certificate;

  public static final String SERIALIZED_NAME_CERTIFICATE_PASSWORD = "certificatePassword";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_PASSWORD)
  private String certificatePassword;

  public static final String SERIALIZED_NAME_DEFAULT_SSL_BINDING = "defaultSslBinding";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SSL_BINDING)
  private Boolean defaultSslBinding = false;

  public static final String SERIALIZED_NAME_ENCODED_CERTIFICATE = "encodedCertificate";
  @SerializedName(SERIALIZED_NAME_ENCODED_CERTIFICATE)
  private String encodedCertificate;

  public static final String SERIALIZED_NAME_HOST_NAME = "hostName";
  @SerializedName(SERIALIZED_NAME_HOST_NAME)
  private String hostName;

  public static final String SERIALIZED_NAME_KEY_VAULT_ID = "keyVaultId";
  @SerializedName(SERIALIZED_NAME_KEY_VAULT_ID)
  private String keyVaultId;

  public static final String SERIALIZED_NAME_NEGOTIATE_CLIENT_CERTIFICATE = "negotiateClientCertificate";
  @SerializedName(SERIALIZED_NAME_NEGOTIATE_CLIENT_CERTIFICATE)
  private Boolean negotiateClientCertificate = false;

  /**
   * Hostname type.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PROXY("Proxy"),
    
    PORTAL("Portal"),
    
    MANAGEMENT("Management"),
    
    SCM("Scm");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public HostnameConfiguration() {
  }

  public HostnameConfiguration certificate(CertificateInformation certificate) {
    this.certificate = certificate;
    return this;
  }

  /**
   * Get certificate
   * @return certificate
   */
  @javax.annotation.Nullable
  public CertificateInformation getCertificate() {
    return certificate;
  }

  public void setCertificate(CertificateInformation certificate) {
    this.certificate = certificate;
  }


  public HostnameConfiguration certificatePassword(String certificatePassword) {
    this.certificatePassword = certificatePassword;
    return this;
  }

  /**
   * Certificate Password.
   * @return certificatePassword
   */
  @javax.annotation.Nullable
  public String getCertificatePassword() {
    return certificatePassword;
  }

  public void setCertificatePassword(String certificatePassword) {
    this.certificatePassword = certificatePassword;
  }


  public HostnameConfiguration defaultSslBinding(Boolean defaultSslBinding) {
    this.defaultSslBinding = defaultSslBinding;
    return this;
  }

  /**
   * Specify true to setup the certificate associated with this Hostname as the Default SSL Certificate. If a client does not send the SNI header, then this will be the certificate that will be challenged. The property is useful if a service has multiple custom hostname enabled and it needs to decide on the default ssl certificate. The setting only applied to Proxy Hostname Type.
   * @return defaultSslBinding
   */
  @javax.annotation.Nullable
  public Boolean getDefaultSslBinding() {
    return defaultSslBinding;
  }

  public void setDefaultSslBinding(Boolean defaultSslBinding) {
    this.defaultSslBinding = defaultSslBinding;
  }


  public HostnameConfiguration encodedCertificate(String encodedCertificate) {
    this.encodedCertificate = encodedCertificate;
    return this;
  }

  /**
   * Base64 Encoded certificate.
   * @return encodedCertificate
   */
  @javax.annotation.Nullable
  public String getEncodedCertificate() {
    return encodedCertificate;
  }

  public void setEncodedCertificate(String encodedCertificate) {
    this.encodedCertificate = encodedCertificate;
  }


  public HostnameConfiguration hostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

  /**
   * Hostname to configure on the Api Management service.
   * @return hostName
   */
  @javax.annotation.Nonnull
  public String getHostName() {
    return hostName;
  }

  public void setHostName(String hostName) {
    this.hostName = hostName;
  }


  public HostnameConfiguration keyVaultId(String keyVaultId) {
    this.keyVaultId = keyVaultId;
    return this;
  }

  /**
   * Url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version is provided, auto-update of ssl certificate will not work. This requires Api Management service to be configured with MSI. The secret should be of type *application/x-pkcs12*
   * @return keyVaultId
   */
  @javax.annotation.Nullable
  public String getKeyVaultId() {
    return keyVaultId;
  }

  public void setKeyVaultId(String keyVaultId) {
    this.keyVaultId = keyVaultId;
  }


  public HostnameConfiguration negotiateClientCertificate(Boolean negotiateClientCertificate) {
    this.negotiateClientCertificate = negotiateClientCertificate;
    return this;
  }

  /**
   * Specify true to always negotiate client certificate on the hostname. Default Value is false.
   * @return negotiateClientCertificate
   */
  @javax.annotation.Nullable
  public Boolean getNegotiateClientCertificate() {
    return negotiateClientCertificate;
  }

  public void setNegotiateClientCertificate(Boolean negotiateClientCertificate) {
    this.negotiateClientCertificate = negotiateClientCertificate;
  }


  public HostnameConfiguration type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Hostname type.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HostnameConfiguration hostnameConfiguration = (HostnameConfiguration) o;
    return Objects.equals(this.certificate, hostnameConfiguration.certificate) &&
        Objects.equals(this.certificatePassword, hostnameConfiguration.certificatePassword) &&
        Objects.equals(this.defaultSslBinding, hostnameConfiguration.defaultSslBinding) &&
        Objects.equals(this.encodedCertificate, hostnameConfiguration.encodedCertificate) &&
        Objects.equals(this.hostName, hostnameConfiguration.hostName) &&
        Objects.equals(this.keyVaultId, hostnameConfiguration.keyVaultId) &&
        Objects.equals(this.negotiateClientCertificate, hostnameConfiguration.negotiateClientCertificate) &&
        Objects.equals(this.type, hostnameConfiguration.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificate, certificatePassword, defaultSslBinding, encodedCertificate, hostName, keyVaultId, negotiateClientCertificate, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HostnameConfiguration {\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    certificatePassword: ").append(toIndentedString(certificatePassword)).append("\n");
    sb.append("    defaultSslBinding: ").append(toIndentedString(defaultSslBinding)).append("\n");
    sb.append("    encodedCertificate: ").append(toIndentedString(encodedCertificate)).append("\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    keyVaultId: ").append(toIndentedString(keyVaultId)).append("\n");
    sb.append("    negotiateClientCertificate: ").append(toIndentedString(negotiateClientCertificate)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("certificate");
    openapiFields.add("certificatePassword");
    openapiFields.add("defaultSslBinding");
    openapiFields.add("encodedCertificate");
    openapiFields.add("hostName");
    openapiFields.add("keyVaultId");
    openapiFields.add("negotiateClientCertificate");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("hostName");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HostnameConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HostnameConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HostnameConfiguration is not found in the empty JSON string", HostnameConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HostnameConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HostnameConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HostnameConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `certificate`
      if (jsonObj.get("certificate") != null && !jsonObj.get("certificate").isJsonNull()) {
        CertificateInformation.validateJsonElement(jsonObj.get("certificate"));
      }
      if ((jsonObj.get("certificatePassword") != null && !jsonObj.get("certificatePassword").isJsonNull()) && !jsonObj.get("certificatePassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificatePassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificatePassword").toString()));
      }
      if ((jsonObj.get("encodedCertificate") != null && !jsonObj.get("encodedCertificate").isJsonNull()) && !jsonObj.get("encodedCertificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encodedCertificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encodedCertificate").toString()));
      }
      if (!jsonObj.get("hostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostName").toString()));
      }
      if ((jsonObj.get("keyVaultId") != null && !jsonObj.get("keyVaultId").isJsonNull()) && !jsonObj.get("keyVaultId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyVaultId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyVaultId").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HostnameConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HostnameConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HostnameConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HostnameConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<HostnameConfiguration>() {
           @Override
           public void write(JsonWriter out, HostnameConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HostnameConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HostnameConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HostnameConfiguration
   * @throws IOException if the JSON string is invalid with respect to HostnameConfiguration
   */
  public static HostnameConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HostnameConfiguration.class);
  }

  /**
   * Convert an instance of HostnameConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

