/*
 * ApiManagementClient
 * Use these REST APIs to manage Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApiManagementServiceSkuProperties;
import org.openapitools.client.model.VirtualNetworkConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Description of an additional API Management resource location.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:45:37.452190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdditionalLocation {
  public static final String SERIALIZED_NAME_GATEWAY_REGIONAL_URL = "gatewayRegionalUrl";
  @SerializedName(SERIALIZED_NAME_GATEWAY_REGIONAL_URL)
  private String gatewayRegionalUrl;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_PRIVATE_I_P_ADDRESSES = "privateIPAddresses";
  @SerializedName(SERIALIZED_NAME_PRIVATE_I_P_ADDRESSES)
  private List<String> privateIPAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUBLIC_I_P_ADDRESSES = "publicIPAddresses";
  @SerializedName(SERIALIZED_NAME_PUBLIC_I_P_ADDRESSES)
  private List<String> publicIPAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private ApiManagementServiceSkuProperties sku;

  public static final String SERIALIZED_NAME_VIRTUAL_NETWORK_CONFIGURATION = "virtualNetworkConfiguration";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NETWORK_CONFIGURATION)
  private VirtualNetworkConfiguration virtualNetworkConfiguration;

  public AdditionalLocation() {
  }

  public AdditionalLocation(
     String gatewayRegionalUrl, 
     List<String> privateIPAddresses, 
     List<String> publicIPAddresses
  ) {
    this();
    this.gatewayRegionalUrl = gatewayRegionalUrl;
    this.privateIPAddresses = privateIPAddresses;
    this.publicIPAddresses = publicIPAddresses;
  }

  /**
   * Gateway URL of the API Management service in the Region.
   * @return gatewayRegionalUrl
   */
  @javax.annotation.Nullable
  public String getGatewayRegionalUrl() {
    return gatewayRegionalUrl;
  }



  public AdditionalLocation location(String location) {
    this.location = location;
    return this;
  }

  /**
   * The location name of the additional region among Azure Data center regions.
   * @return location
   */
  @javax.annotation.Nonnull
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  /**
   * Private Static Load Balanced IP addresses of the API Management service which is deployed in an Internal Virtual Network in a particular additional location. Available only for Basic, Standard and Premium SKU.
   * @return privateIPAddresses
   */
  @javax.annotation.Nullable
  public List<String> getPrivateIPAddresses() {
    return privateIPAddresses;
  }



  /**
   * Public Static Load Balanced IP addresses of the API Management service in the additional location. Available only for Basic, Standard and Premium SKU.
   * @return publicIPAddresses
   */
  @javax.annotation.Nullable
  public List<String> getPublicIPAddresses() {
    return publicIPAddresses;
  }



  public AdditionalLocation sku(ApiManagementServiceSkuProperties sku) {
    this.sku = sku;
    return this;
  }

  /**
   * Get sku
   * @return sku
   */
  @javax.annotation.Nonnull
  public ApiManagementServiceSkuProperties getSku() {
    return sku;
  }

  public void setSku(ApiManagementServiceSkuProperties sku) {
    this.sku = sku;
  }


  public AdditionalLocation virtualNetworkConfiguration(VirtualNetworkConfiguration virtualNetworkConfiguration) {
    this.virtualNetworkConfiguration = virtualNetworkConfiguration;
    return this;
  }

  /**
   * Get virtualNetworkConfiguration
   * @return virtualNetworkConfiguration
   */
  @javax.annotation.Nullable
  public VirtualNetworkConfiguration getVirtualNetworkConfiguration() {
    return virtualNetworkConfiguration;
  }

  public void setVirtualNetworkConfiguration(VirtualNetworkConfiguration virtualNetworkConfiguration) {
    this.virtualNetworkConfiguration = virtualNetworkConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdditionalLocation additionalLocation = (AdditionalLocation) o;
    return Objects.equals(this.gatewayRegionalUrl, additionalLocation.gatewayRegionalUrl) &&
        Objects.equals(this.location, additionalLocation.location) &&
        Objects.equals(this.privateIPAddresses, additionalLocation.privateIPAddresses) &&
        Objects.equals(this.publicIPAddresses, additionalLocation.publicIPAddresses) &&
        Objects.equals(this.sku, additionalLocation.sku) &&
        Objects.equals(this.virtualNetworkConfiguration, additionalLocation.virtualNetworkConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gatewayRegionalUrl, location, privateIPAddresses, publicIPAddresses, sku, virtualNetworkConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdditionalLocation {\n");
    sb.append("    gatewayRegionalUrl: ").append(toIndentedString(gatewayRegionalUrl)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    privateIPAddresses: ").append(toIndentedString(privateIPAddresses)).append("\n");
    sb.append("    publicIPAddresses: ").append(toIndentedString(publicIPAddresses)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    virtualNetworkConfiguration: ").append(toIndentedString(virtualNetworkConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gatewayRegionalUrl");
    openapiFields.add("location");
    openapiFields.add("privateIPAddresses");
    openapiFields.add("publicIPAddresses");
    openapiFields.add("sku");
    openapiFields.add("virtualNetworkConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("location");
    openapiRequiredFields.add("sku");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdditionalLocation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdditionalLocation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdditionalLocation is not found in the empty JSON string", AdditionalLocation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdditionalLocation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdditionalLocation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AdditionalLocation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("gatewayRegionalUrl") != null && !jsonObj.get("gatewayRegionalUrl").isJsonNull()) && !jsonObj.get("gatewayRegionalUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gatewayRegionalUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gatewayRegionalUrl").toString()));
      }
      if (!jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("privateIPAddresses") != null && !jsonObj.get("privateIPAddresses").isJsonNull() && !jsonObj.get("privateIPAddresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateIPAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("privateIPAddresses").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("publicIPAddresses") != null && !jsonObj.get("publicIPAddresses").isJsonNull() && !jsonObj.get("publicIPAddresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicIPAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("publicIPAddresses").toString()));
      }
      // validate the required field `sku`
      ApiManagementServiceSkuProperties.validateJsonElement(jsonObj.get("sku"));
      // validate the optional field `virtualNetworkConfiguration`
      if (jsonObj.get("virtualNetworkConfiguration") != null && !jsonObj.get("virtualNetworkConfiguration").isJsonNull()) {
        VirtualNetworkConfiguration.validateJsonElement(jsonObj.get("virtualNetworkConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdditionalLocation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdditionalLocation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdditionalLocation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdditionalLocation.class));

       return (TypeAdapter<T>) new TypeAdapter<AdditionalLocation>() {
           @Override
           public void write(JsonWriter out, AdditionalLocation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdditionalLocation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdditionalLocation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdditionalLocation
   * @throws IOException if the JSON string is invalid with respect to AdditionalLocation
   */
  public static AdditionalLocation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdditionalLocation.class);
  }

  /**
   * Convert an instance of AdditionalLocation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

