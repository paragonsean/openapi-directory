# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.virtual_network_configuration import VirtualNetworkConfiguration
from openapi_server import util


class AdditionalRegion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location: str=None, sku_type: str=None, sku_unit_count: int=1, static_ips: List[str]=None, vpnconfiguration: VirtualNetworkConfiguration=None):
        """AdditionalRegion - a model defined in OpenAPI

        :param location: The location of this AdditionalRegion.
        :param sku_type: The sku_type of this AdditionalRegion.
        :param sku_unit_count: The sku_unit_count of this AdditionalRegion.
        :param static_ips: The static_ips of this AdditionalRegion.
        :param vpnconfiguration: The vpnconfiguration of this AdditionalRegion.
        """
        self.openapi_types = {
            'location': str,
            'sku_type': str,
            'sku_unit_count': int,
            'static_ips': List[str],
            'vpnconfiguration': VirtualNetworkConfiguration
        }

        self.attribute_map = {
            'location': 'location',
            'sku_type': 'skuType',
            'sku_unit_count': 'skuUnitCount',
            'static_ips': 'staticIPs',
            'vpnconfiguration': 'vpnconfiguration'
        }

        self._location = location
        self._sku_type = sku_type
        self._sku_unit_count = sku_unit_count
        self._static_ips = static_ips
        self._vpnconfiguration = vpnconfiguration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdditionalRegion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdditionalRegion of this AdditionalRegion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location(self):
        """Gets the location of this AdditionalRegion.

        The location name of the additional region among Azure Data center regions.

        :return: The location of this AdditionalRegion.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this AdditionalRegion.

        The location name of the additional region among Azure Data center regions.

        :param location: The location of this AdditionalRegion.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def sku_type(self):
        """Gets the sku_type of this AdditionalRegion.

        The SKU type in the location.

        :return: The sku_type of this AdditionalRegion.
        :rtype: str
        """
        return self._sku_type

    @sku_type.setter
    def sku_type(self, sku_type):
        """Sets the sku_type of this AdditionalRegion.

        The SKU type in the location.

        :param sku_type: The sku_type of this AdditionalRegion.
        :type sku_type: str
        """
        allowed_values = ["Developer", "Standard", "Premium"]  # noqa: E501
        if sku_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sku_type` ({0}), must be one of {1}"
                .format(sku_type, allowed_values)
            )

        self._sku_type = sku_type

    @property
    def sku_unit_count(self):
        """Gets the sku_unit_count of this AdditionalRegion.

        The SKU Unit count at the location. The maximum SKU Unit count depends on the SkuType. Maximum allowed for Developer SKU is 1, for Standard SKU is 4, and for Premium SKU is 10, at a location.

        :return: The sku_unit_count of this AdditionalRegion.
        :rtype: int
        """
        return self._sku_unit_count

    @sku_unit_count.setter
    def sku_unit_count(self, sku_unit_count):
        """Sets the sku_unit_count of this AdditionalRegion.

        The SKU Unit count at the location. The maximum SKU Unit count depends on the SkuType. Maximum allowed for Developer SKU is 1, for Standard SKU is 4, and for Premium SKU is 10, at a location.

        :param sku_unit_count: The sku_unit_count of this AdditionalRegion.
        :type sku_unit_count: int
        """
        if sku_unit_count is not None and sku_unit_count > 10:
            raise ValueError("Invalid value for `sku_unit_count`, must be a value less than or equal to `10`")

        self._sku_unit_count = sku_unit_count

    @property
    def static_ips(self):
        """Gets the static_ips of this AdditionalRegion.

        Static IP addresses of the location's virtual machines.

        :return: The static_ips of this AdditionalRegion.
        :rtype: List[str]
        """
        return self._static_ips

    @static_ips.setter
    def static_ips(self, static_ips):
        """Sets the static_ips of this AdditionalRegion.

        Static IP addresses of the location's virtual machines.

        :param static_ips: The static_ips of this AdditionalRegion.
        :type static_ips: List[str]
        """

        self._static_ips = static_ips

    @property
    def vpnconfiguration(self):
        """Gets the vpnconfiguration of this AdditionalRegion.


        :return: The vpnconfiguration of this AdditionalRegion.
        :rtype: VirtualNetworkConfiguration
        """
        return self._vpnconfiguration

    @vpnconfiguration.setter
    def vpnconfiguration(self, vpnconfiguration):
        """Sets the vpnconfiguration of this AdditionalRegion.


        :param vpnconfiguration: The vpnconfiguration of this AdditionalRegion.
        :type vpnconfiguration: VirtualNetworkConfiguration
        """

        self._vpnconfiguration = vpnconfiguration
