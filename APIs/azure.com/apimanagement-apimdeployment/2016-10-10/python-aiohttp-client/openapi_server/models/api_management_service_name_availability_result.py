# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiManagementServiceNameAvailabilityResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, name_available: bool=None, reason: str=None):
        """ApiManagementServiceNameAvailabilityResult - a model defined in OpenAPI

        :param message: The message of this ApiManagementServiceNameAvailabilityResult.
        :param name_available: The name_available of this ApiManagementServiceNameAvailabilityResult.
        :param reason: The reason of this ApiManagementServiceNameAvailabilityResult.
        """
        self.openapi_types = {
            'message': str,
            'name_available': bool,
            'reason': str
        }

        self.attribute_map = {
            'message': 'message',
            'name_available': 'nameAvailable',
            'reason': 'reason'
        }

        self._message = message
        self._name_available = name_available
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiManagementServiceNameAvailabilityResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiManagementServiceNameAvailabilityResult of this ApiManagementServiceNameAvailabilityResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this ApiManagementServiceNameAvailabilityResult.

        If reason == invalid, provide the user with the reason why the given name is invalid, and provide the resource naming requirements so that the user can select a valid name. If reason == AlreadyExists, explain that <resourceName> is already in use, and direct them to select a different name.

        :return: The message of this ApiManagementServiceNameAvailabilityResult.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ApiManagementServiceNameAvailabilityResult.

        If reason == invalid, provide the user with the reason why the given name is invalid, and provide the resource naming requirements so that the user can select a valid name. If reason == AlreadyExists, explain that <resourceName> is already in use, and direct them to select a different name.

        :param message: The message of this ApiManagementServiceNameAvailabilityResult.
        :type message: str
        """

        self._message = message

    @property
    def name_available(self):
        """Gets the name_available of this ApiManagementServiceNameAvailabilityResult.

        True if the name is available and can be used to create a new API Management service; otherwise false.

        :return: The name_available of this ApiManagementServiceNameAvailabilityResult.
        :rtype: bool
        """
        return self._name_available

    @name_available.setter
    def name_available(self, name_available):
        """Sets the name_available of this ApiManagementServiceNameAvailabilityResult.

        True if the name is available and can be used to create a new API Management service; otherwise false.

        :param name_available: The name_available of this ApiManagementServiceNameAvailabilityResult.
        :type name_available: bool
        """
        if name_available is None:
            raise ValueError("Invalid value for `name_available`, must not be `None`")

        self._name_available = name_available

    @property
    def reason(self):
        """Gets the reason of this ApiManagementServiceNameAvailabilityResult.

        Invalid indicates the name provided does not match the resource provider’s naming requirements (incorrect length, unsupported characters, etc.)  AlreadyExists indicates that the name is already in use and is therefore unavailable.

        :return: The reason of this ApiManagementServiceNameAvailabilityResult.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ApiManagementServiceNameAvailabilityResult.

        Invalid indicates the name provided does not match the resource provider’s naming requirements (incorrect length, unsupported characters, etc.)  AlreadyExists indicates that the name is already in use and is therefore unavailable.

        :param reason: The reason of this ApiManagementServiceNameAvailabilityResult.
        :type reason: str
        """
        allowed_values = ["Valid", "Invalid", "AlreadyExists"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason
