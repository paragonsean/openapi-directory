# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class VirtualNetworkConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location: str=None, subnet_resource_id: str=None, subnetname: str=None, vnetid: str=None):
        """VirtualNetworkConfiguration - a model defined in OpenAPI

        :param location: The location of this VirtualNetworkConfiguration.
        :param subnet_resource_id: The subnet_resource_id of this VirtualNetworkConfiguration.
        :param subnetname: The subnetname of this VirtualNetworkConfiguration.
        :param vnetid: The vnetid of this VirtualNetworkConfiguration.
        """
        self.openapi_types = {
            'location': str,
            'subnet_resource_id': str,
            'subnetname': str,
            'vnetid': str
        }

        self.attribute_map = {
            'location': 'location',
            'subnet_resource_id': 'subnetResourceId',
            'subnetname': 'subnetname',
            'vnetid': 'vnetid'
        }

        self._location = location
        self._subnet_resource_id = subnet_resource_id
        self._subnetname = subnetname
        self._vnetid = vnetid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualNetworkConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualNetworkConfiguration of this VirtualNetworkConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location(self):
        """Gets the location of this VirtualNetworkConfiguration.

        The location of the virtual network.

        :return: The location of this VirtualNetworkConfiguration.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this VirtualNetworkConfiguration.

        The location of the virtual network.

        :param location: The location of this VirtualNetworkConfiguration.
        :type location: str
        """

        self._location = location

    @property
    def subnet_resource_id(self):
        """Gets the subnet_resource_id of this VirtualNetworkConfiguration.

        The full resource ID of a subnet in a virtual network to deploy the API Management service in.

        :return: The subnet_resource_id of this VirtualNetworkConfiguration.
        :rtype: str
        """
        return self._subnet_resource_id

    @subnet_resource_id.setter
    def subnet_resource_id(self, subnet_resource_id):
        """Sets the subnet_resource_id of this VirtualNetworkConfiguration.

        The full resource ID of a subnet in a virtual network to deploy the API Management service in.

        :param subnet_resource_id: The subnet_resource_id of this VirtualNetworkConfiguration.
        :type subnet_resource_id: str
        """
        if subnet_resource_id is not None and not re.search(r'^\/subscriptions\/[^\/]*\/resourceGroups\/[^\/]*\/providers\/Microsoft.(ClassicNetwork|Network)\/virtualNetworks\/[^\/]*\/subnets\/[^\/]*$', subnet_resource_id):
            raise ValueError("Invalid value for `subnet_resource_id`, must be a follow pattern or equal to `/^\/subscriptions\/[^\/]*\/resourceGroups\/[^\/]*\/providers\/Microsoft.(ClassicNetwork|Network)\/virtualNetworks\/[^\/]*\/subnets\/[^\/]*$/`")

        self._subnet_resource_id = subnet_resource_id

    @property
    def subnetname(self):
        """Gets the subnetname of this VirtualNetworkConfiguration.

        The name of the subnet.

        :return: The subnetname of this VirtualNetworkConfiguration.
        :rtype: str
        """
        return self._subnetname

    @subnetname.setter
    def subnetname(self, subnetname):
        """Sets the subnetname of this VirtualNetworkConfiguration.

        The name of the subnet.

        :param subnetname: The subnetname of this VirtualNetworkConfiguration.
        :type subnetname: str
        """

        self._subnetname = subnetname

    @property
    def vnetid(self):
        """Gets the vnetid of this VirtualNetworkConfiguration.

        The virtual network ID. This is typically a GUID. Expect a null GUID by default.

        :return: The vnetid of this VirtualNetworkConfiguration.
        :rtype: str
        """
        return self._vnetid

    @vnetid.setter
    def vnetid(self, vnetid):
        """Sets the vnetid of this VirtualNetworkConfiguration.

        The virtual network ID. This is typically a GUID. Expect a null GUID by default.

        :param vnetid: The vnetid of this VirtualNetworkConfiguration.
        :type vnetid: str
        """

        self._vnetid = vnetid
