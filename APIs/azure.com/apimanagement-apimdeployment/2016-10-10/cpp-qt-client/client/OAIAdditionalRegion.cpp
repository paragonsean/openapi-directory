/**
 * ApiManagementClient
 * Use these REST APIs to manage Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2016-10-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdditionalRegion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdditionalRegion::OAIAdditionalRegion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdditionalRegion::OAIAdditionalRegion() {
    this->initializeModel();
}

OAIAdditionalRegion::~OAIAdditionalRegion() {}

void OAIAdditionalRegion::initializeModel() {

    m_location_isSet = false;
    m_location_isValid = false;

    m_sku_type_isSet = false;
    m_sku_type_isValid = false;

    m_sku_unit_count_isSet = false;
    m_sku_unit_count_isValid = false;

    m_static_ips_isSet = false;
    m_static_ips_isValid = false;

    m_vpnconfiguration_isSet = false;
    m_vpnconfiguration_isValid = false;
}

void OAIAdditionalRegion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdditionalRegion::fromJsonObject(QJsonObject json) {

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_sku_type_isValid = ::OpenAPI::fromJsonValue(m_sku_type, json[QString("skuType")]);
    m_sku_type_isSet = !json[QString("skuType")].isNull() && m_sku_type_isValid;

    m_sku_unit_count_isValid = ::OpenAPI::fromJsonValue(m_sku_unit_count, json[QString("skuUnitCount")]);
    m_sku_unit_count_isSet = !json[QString("skuUnitCount")].isNull() && m_sku_unit_count_isValid;

    m_static_ips_isValid = ::OpenAPI::fromJsonValue(m_static_ips, json[QString("staticIPs")]);
    m_static_ips_isSet = !json[QString("staticIPs")].isNull() && m_static_ips_isValid;

    m_vpnconfiguration_isValid = ::OpenAPI::fromJsonValue(m_vpnconfiguration, json[QString("vpnconfiguration")]);
    m_vpnconfiguration_isSet = !json[QString("vpnconfiguration")].isNull() && m_vpnconfiguration_isValid;
}

QString OAIAdditionalRegion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdditionalRegion::asJsonObject() const {
    QJsonObject obj;
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_sku_type_isSet) {
        obj.insert(QString("skuType"), ::OpenAPI::toJsonValue(m_sku_type));
    }
    if (m_sku_unit_count_isSet) {
        obj.insert(QString("skuUnitCount"), ::OpenAPI::toJsonValue(m_sku_unit_count));
    }
    if (m_static_ips.size() > 0) {
        obj.insert(QString("staticIPs"), ::OpenAPI::toJsonValue(m_static_ips));
    }
    if (m_vpnconfiguration.isSet()) {
        obj.insert(QString("vpnconfiguration"), ::OpenAPI::toJsonValue(m_vpnconfiguration));
    }
    return obj;
}

QString OAIAdditionalRegion::getLocation() const {
    return m_location;
}
void OAIAdditionalRegion::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIAdditionalRegion::is_location_Set() const{
    return m_location_isSet;
}

bool OAIAdditionalRegion::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIAdditionalRegion::getSkuType() const {
    return m_sku_type;
}
void OAIAdditionalRegion::setSkuType(const QString &sku_type) {
    m_sku_type = sku_type;
    m_sku_type_isSet = true;
}

bool OAIAdditionalRegion::is_sku_type_Set() const{
    return m_sku_type_isSet;
}

bool OAIAdditionalRegion::is_sku_type_Valid() const{
    return m_sku_type_isValid;
}

qint32 OAIAdditionalRegion::getSkuUnitCount() const {
    return m_sku_unit_count;
}
void OAIAdditionalRegion::setSkuUnitCount(const qint32 &sku_unit_count) {
    m_sku_unit_count = sku_unit_count;
    m_sku_unit_count_isSet = true;
}

bool OAIAdditionalRegion::is_sku_unit_count_Set() const{
    return m_sku_unit_count_isSet;
}

bool OAIAdditionalRegion::is_sku_unit_count_Valid() const{
    return m_sku_unit_count_isValid;
}

QList<QString> OAIAdditionalRegion::getStaticIps() const {
    return m_static_ips;
}
void OAIAdditionalRegion::setStaticIps(const QList<QString> &static_ips) {
    m_static_ips = static_ips;
    m_static_ips_isSet = true;
}

bool OAIAdditionalRegion::is_static_ips_Set() const{
    return m_static_ips_isSet;
}

bool OAIAdditionalRegion::is_static_ips_Valid() const{
    return m_static_ips_isValid;
}

OAIVirtualNetworkConfiguration OAIAdditionalRegion::getVpnconfiguration() const {
    return m_vpnconfiguration;
}
void OAIAdditionalRegion::setVpnconfiguration(const OAIVirtualNetworkConfiguration &vpnconfiguration) {
    m_vpnconfiguration = vpnconfiguration;
    m_vpnconfiguration_isSet = true;
}

bool OAIAdditionalRegion::is_vpnconfiguration_Set() const{
    return m_vpnconfiguration_isSet;
}

bool OAIAdditionalRegion::is_vpnconfiguration_Valid() const{
    return m_vpnconfiguration_isValid;
}

bool OAIAdditionalRegion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_unit_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_ips.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpnconfiguration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdditionalRegion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_location_isValid && m_sku_type_isValid && true;
}

} // namespace OpenAPI
