/*
 * ApiManagementClient
 * Use these REST APIs to manage Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2016-10-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HostnameConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters supplied to the UpdateHostname operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:45:33.231576-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiManagementServiceUpdateHostnameParameters {
  /**
   * Gets or Sets delete
   */
  @JsonAdapter(DeleteEnum.Adapter.class)
  public enum DeleteEnum {
    PROXY("Proxy"),
    
    PORTAL("Portal"),
    
    MANAGEMENT("Management"),
    
    SCM("Scm");

    private String value;

    DeleteEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeleteEnum fromValue(String value) {
      for (DeleteEnum b : DeleteEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeleteEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeleteEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeleteEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeleteEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeleteEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DELETE = "delete";
  @SerializedName(SERIALIZED_NAME_DELETE)
  private List<DeleteEnum> delete = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATE = "update";
  @SerializedName(SERIALIZED_NAME_UPDATE)
  private List<HostnameConfiguration> update = new ArrayList<>();

  public ApiManagementServiceUpdateHostnameParameters() {
  }

  public ApiManagementServiceUpdateHostnameParameters delete(List<DeleteEnum> delete) {
    this.delete = delete;
    return this;
  }

  public ApiManagementServiceUpdateHostnameParameters addDeleteItem(DeleteEnum deleteItem) {
    if (this.delete == null) {
      this.delete = new ArrayList<>();
    }
    this.delete.add(deleteItem);
    return this;
  }

  /**
   * Hostnames types to delete.
   * @return delete
   */
  @javax.annotation.Nullable
  public List<DeleteEnum> getDelete() {
    return delete;
  }

  public void setDelete(List<DeleteEnum> delete) {
    this.delete = delete;
  }


  public ApiManagementServiceUpdateHostnameParameters update(List<HostnameConfiguration> update) {
    this.update = update;
    return this;
  }

  public ApiManagementServiceUpdateHostnameParameters addUpdateItem(HostnameConfiguration updateItem) {
    if (this.update == null) {
      this.update = new ArrayList<>();
    }
    this.update.add(updateItem);
    return this;
  }

  /**
   * Hostnames to create or update.
   * @return update
   */
  @javax.annotation.Nullable
  public List<HostnameConfiguration> getUpdate() {
    return update;
  }

  public void setUpdate(List<HostnameConfiguration> update) {
    this.update = update;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiManagementServiceUpdateHostnameParameters apiManagementServiceUpdateHostnameParameters = (ApiManagementServiceUpdateHostnameParameters) o;
    return Objects.equals(this.delete, apiManagementServiceUpdateHostnameParameters.delete) &&
        Objects.equals(this.update, apiManagementServiceUpdateHostnameParameters.update);
  }

  @Override
  public int hashCode() {
    return Objects.hash(delete, update);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiManagementServiceUpdateHostnameParameters {\n");
    sb.append("    delete: ").append(toIndentedString(delete)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("delete");
    openapiFields.add("update");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiManagementServiceUpdateHostnameParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiManagementServiceUpdateHostnameParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiManagementServiceUpdateHostnameParameters is not found in the empty JSON string", ApiManagementServiceUpdateHostnameParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiManagementServiceUpdateHostnameParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiManagementServiceUpdateHostnameParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("delete") != null && !jsonObj.get("delete").isJsonNull() && !jsonObj.get("delete").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `delete` to be an array in the JSON string but got `%s`", jsonObj.get("delete").toString()));
      }
      if (jsonObj.get("update") != null && !jsonObj.get("update").isJsonNull()) {
        JsonArray jsonArrayupdate = jsonObj.getAsJsonArray("update");
        if (jsonArrayupdate != null) {
          // ensure the json data is an array
          if (!jsonObj.get("update").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `update` to be an array in the JSON string but got `%s`", jsonObj.get("update").toString()));
          }

          // validate the optional field `update` (array)
          for (int i = 0; i < jsonArrayupdate.size(); i++) {
            HostnameConfiguration.validateJsonElement(jsonArrayupdate.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiManagementServiceUpdateHostnameParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiManagementServiceUpdateHostnameParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiManagementServiceUpdateHostnameParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiManagementServiceUpdateHostnameParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiManagementServiceUpdateHostnameParameters>() {
           @Override
           public void write(JsonWriter out, ApiManagementServiceUpdateHostnameParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiManagementServiceUpdateHostnameParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiManagementServiceUpdateHostnameParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiManagementServiceUpdateHostnameParameters
   * @throws IOException if the JSON string is invalid with respect to ApiManagementServiceUpdateHostnameParameters
   */
  public static ApiManagementServiceUpdateHostnameParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiManagementServiceUpdateHostnameParameters.class);
  }

  /**
   * Convert an instance of ApiManagementServiceUpdateHostnameParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

