/*
 * ApiManagementClient
 * Use these REST APIs to manage Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2016-10-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdditionalRegion;
import org.openapitools.client.model.VirtualNetworkConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters supplied to the ManageDeployments operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:45:33.231576-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiManagementServiceManageDeploymentsParameters {
  public static final String SERIALIZED_NAME_ADDITIONAL_LOCATIONS = "additionalLocations";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_LOCATIONS)
  private List<AdditionalRegion> additionalLocations = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  /**
   * SKU type of the API Management service.
   */
  @JsonAdapter(SkuTypeEnum.Adapter.class)
  public enum SkuTypeEnum {
    DEVELOPER("Developer"),
    
    STANDARD("Standard"),
    
    PREMIUM("Premium");

    private String value;

    SkuTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SkuTypeEnum fromValue(String value) {
      for (SkuTypeEnum b : SkuTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SkuTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SkuTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SkuTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SkuTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SkuTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SKU_TYPE = "skuType";
  @SerializedName(SERIALIZED_NAME_SKU_TYPE)
  private SkuTypeEnum skuType;

  public static final String SERIALIZED_NAME_SKU_UNIT_COUNT = "skuUnitCount";
  @SerializedName(SERIALIZED_NAME_SKU_UNIT_COUNT)
  private Integer skuUnitCount = 1;

  public static final String SERIALIZED_NAME_VPN_CONFIGURATION = "vpnConfiguration";
  @SerializedName(SERIALIZED_NAME_VPN_CONFIGURATION)
  private VirtualNetworkConfiguration vpnConfiguration;

  /**
   * The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that the API Management service deployment is set up inside a Virtual Network having an Intranet Facing Endpoint only. When vpnConfiguration is specified, vpnType must be specified.
   */
  @JsonAdapter(VpnTypeEnum.Adapter.class)
  public enum VpnTypeEnum {
    NONE("None"),
    
    EXTERNAL("External"),
    
    INTERNAL("Internal");

    private String value;

    VpnTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VpnTypeEnum fromValue(String value) {
      for (VpnTypeEnum b : VpnTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VpnTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VpnTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VpnTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VpnTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VpnTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VPN_TYPE = "vpnType";
  @SerializedName(SERIALIZED_NAME_VPN_TYPE)
  private VpnTypeEnum vpnType = VpnTypeEnum.NONE;

  public ApiManagementServiceManageDeploymentsParameters() {
  }

  public ApiManagementServiceManageDeploymentsParameters additionalLocations(List<AdditionalRegion> additionalLocations) {
    this.additionalLocations = additionalLocations;
    return this;
  }

  public ApiManagementServiceManageDeploymentsParameters addAdditionalLocationsItem(AdditionalRegion additionalLocationsItem) {
    if (this.additionalLocations == null) {
      this.additionalLocations = new ArrayList<>();
    }
    this.additionalLocations.add(additionalLocationsItem);
    return this;
  }

  /**
   * Additional data center locations for the API Management service.
   * @return additionalLocations
   */
  @javax.annotation.Nullable
  public List<AdditionalRegion> getAdditionalLocations() {
    return additionalLocations;
  }

  public void setAdditionalLocations(List<AdditionalRegion> additionalLocations) {
    this.additionalLocations = additionalLocations;
  }


  public ApiManagementServiceManageDeploymentsParameters location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Location of the API Management service Azure data center.
   * @return location
   */
  @javax.annotation.Nonnull
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public ApiManagementServiceManageDeploymentsParameters skuType(SkuTypeEnum skuType) {
    this.skuType = skuType;
    return this;
  }

  /**
   * SKU type of the API Management service.
   * @return skuType
   */
  @javax.annotation.Nonnull
  public SkuTypeEnum getSkuType() {
    return skuType;
  }

  public void setSkuType(SkuTypeEnum skuType) {
    this.skuType = skuType;
  }


  public ApiManagementServiceManageDeploymentsParameters skuUnitCount(Integer skuUnitCount) {
    this.skuUnitCount = skuUnitCount;
    return this;
  }

  /**
   * SKU Unit count of the API Management service. Default value is 1.
   * @return skuUnitCount
   */
  @javax.annotation.Nullable
  public Integer getSkuUnitCount() {
    return skuUnitCount;
  }

  public void setSkuUnitCount(Integer skuUnitCount) {
    this.skuUnitCount = skuUnitCount;
  }


  public ApiManagementServiceManageDeploymentsParameters vpnConfiguration(VirtualNetworkConfiguration vpnConfiguration) {
    this.vpnConfiguration = vpnConfiguration;
    return this;
  }

  /**
   * Get vpnConfiguration
   * @return vpnConfiguration
   */
  @javax.annotation.Nullable
  public VirtualNetworkConfiguration getVpnConfiguration() {
    return vpnConfiguration;
  }

  public void setVpnConfiguration(VirtualNetworkConfiguration vpnConfiguration) {
    this.vpnConfiguration = vpnConfiguration;
  }


  public ApiManagementServiceManageDeploymentsParameters vpnType(VpnTypeEnum vpnType) {
    this.vpnType = vpnType;
    return this;
  }

  /**
   * The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that the API Management service deployment is set up inside a Virtual Network having an Intranet Facing Endpoint only. When vpnConfiguration is specified, vpnType must be specified.
   * @return vpnType
   */
  @javax.annotation.Nullable
  public VpnTypeEnum getVpnType() {
    return vpnType;
  }

  public void setVpnType(VpnTypeEnum vpnType) {
    this.vpnType = vpnType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiManagementServiceManageDeploymentsParameters apiManagementServiceManageDeploymentsParameters = (ApiManagementServiceManageDeploymentsParameters) o;
    return Objects.equals(this.additionalLocations, apiManagementServiceManageDeploymentsParameters.additionalLocations) &&
        Objects.equals(this.location, apiManagementServiceManageDeploymentsParameters.location) &&
        Objects.equals(this.skuType, apiManagementServiceManageDeploymentsParameters.skuType) &&
        Objects.equals(this.skuUnitCount, apiManagementServiceManageDeploymentsParameters.skuUnitCount) &&
        Objects.equals(this.vpnConfiguration, apiManagementServiceManageDeploymentsParameters.vpnConfiguration) &&
        Objects.equals(this.vpnType, apiManagementServiceManageDeploymentsParameters.vpnType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalLocations, location, skuType, skuUnitCount, vpnConfiguration, vpnType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiManagementServiceManageDeploymentsParameters {\n");
    sb.append("    additionalLocations: ").append(toIndentedString(additionalLocations)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    skuType: ").append(toIndentedString(skuType)).append("\n");
    sb.append("    skuUnitCount: ").append(toIndentedString(skuUnitCount)).append("\n");
    sb.append("    vpnConfiguration: ").append(toIndentedString(vpnConfiguration)).append("\n");
    sb.append("    vpnType: ").append(toIndentedString(vpnType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalLocations");
    openapiFields.add("location");
    openapiFields.add("skuType");
    openapiFields.add("skuUnitCount");
    openapiFields.add("vpnConfiguration");
    openapiFields.add("vpnType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("location");
    openapiRequiredFields.add("skuType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiManagementServiceManageDeploymentsParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiManagementServiceManageDeploymentsParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiManagementServiceManageDeploymentsParameters is not found in the empty JSON string", ApiManagementServiceManageDeploymentsParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiManagementServiceManageDeploymentsParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiManagementServiceManageDeploymentsParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApiManagementServiceManageDeploymentsParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additionalLocations") != null && !jsonObj.get("additionalLocations").isJsonNull()) {
        JsonArray jsonArrayadditionalLocations = jsonObj.getAsJsonArray("additionalLocations");
        if (jsonArrayadditionalLocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalLocations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalLocations` to be an array in the JSON string but got `%s`", jsonObj.get("additionalLocations").toString()));
          }

          // validate the optional field `additionalLocations` (array)
          for (int i = 0; i < jsonArrayadditionalLocations.size(); i++) {
            AdditionalRegion.validateJsonElement(jsonArrayadditionalLocations.get(i));
          };
        }
      }
      if (!jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if (!jsonObj.get("skuType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skuType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skuType").toString()));
      }
      // validate the required field `skuType`
      SkuTypeEnum.validateJsonElement(jsonObj.get("skuType"));
      // validate the optional field `vpnConfiguration`
      if (jsonObj.get("vpnConfiguration") != null && !jsonObj.get("vpnConfiguration").isJsonNull()) {
        VirtualNetworkConfiguration.validateJsonElement(jsonObj.get("vpnConfiguration"));
      }
      if ((jsonObj.get("vpnType") != null && !jsonObj.get("vpnType").isJsonNull()) && !jsonObj.get("vpnType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vpnType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vpnType").toString()));
      }
      // validate the optional field `vpnType`
      if (jsonObj.get("vpnType") != null && !jsonObj.get("vpnType").isJsonNull()) {
        VpnTypeEnum.validateJsonElement(jsonObj.get("vpnType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiManagementServiceManageDeploymentsParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiManagementServiceManageDeploymentsParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiManagementServiceManageDeploymentsParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiManagementServiceManageDeploymentsParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiManagementServiceManageDeploymentsParameters>() {
           @Override
           public void write(JsonWriter out, ApiManagementServiceManageDeploymentsParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiManagementServiceManageDeploymentsParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiManagementServiceManageDeploymentsParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiManagementServiceManageDeploymentsParameters
   * @throws IOException if the JSON string is invalid with respect to ApiManagementServiceManageDeploymentsParameters
   */
  public static ApiManagementServiceManageDeploymentsParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiManagementServiceManageDeploymentsParameters.class);
  }

  /**
   * Convert an instance of ApiManagementServiceManageDeploymentsParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

