/**
 * ApiManagementClient
 * Use these REST APIs to manage Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2016-10-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ApiManagementServiceUploadCertificateParameters model module.
 * @module model/ApiManagementServiceUploadCertificateParameters
 * @version 2016-10-10
 */
class ApiManagementServiceUploadCertificateParameters {
    /**
     * Constructs a new <code>ApiManagementServiceUploadCertificateParameters</code>.
     * Parameters supplied to the Upload SSL certificate for an API Management service operation.
     * @alias module:model/ApiManagementServiceUploadCertificateParameters
     * @param certificate {String} Base64 Encoded certificate.
     * @param certificatePassword {String} Certificate password.
     * @param type {module:model/ApiManagementServiceUploadCertificateParameters.TypeEnum} Hostname type.
     */
    constructor(certificate, certificatePassword, type) { 
        
        ApiManagementServiceUploadCertificateParameters.initialize(this, certificate, certificatePassword, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, certificate, certificatePassword, type) { 
        obj['certificate'] = certificate;
        obj['certificate_password'] = certificatePassword;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ApiManagementServiceUploadCertificateParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiManagementServiceUploadCertificateParameters} obj Optional instance to populate.
     * @return {module:model/ApiManagementServiceUploadCertificateParameters} The populated <code>ApiManagementServiceUploadCertificateParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiManagementServiceUploadCertificateParameters();

            if (data.hasOwnProperty('certificate')) {
                obj['certificate'] = ApiClient.convertToType(data['certificate'], 'String');
            }
            if (data.hasOwnProperty('certificate_password')) {
                obj['certificate_password'] = ApiClient.convertToType(data['certificate_password'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiManagementServiceUploadCertificateParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiManagementServiceUploadCertificateParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ApiManagementServiceUploadCertificateParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['certificate'] && !(typeof data['certificate'] === 'string' || data['certificate'] instanceof String)) {
            throw new Error("Expected the field `certificate` to be a primitive type in the JSON string but got " + data['certificate']);
        }
        // ensure the json data is a string
        if (data['certificate_password'] && !(typeof data['certificate_password'] === 'string' || data['certificate_password'] instanceof String)) {
            throw new Error("Expected the field `certificate_password` to be a primitive type in the JSON string but got " + data['certificate_password']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

ApiManagementServiceUploadCertificateParameters.RequiredProperties = ["certificate", "certificate_password", "type"];

/**
 * Base64 Encoded certificate.
 * @member {String} certificate
 */
ApiManagementServiceUploadCertificateParameters.prototype['certificate'] = undefined;

/**
 * Certificate password.
 * @member {String} certificate_password
 */
ApiManagementServiceUploadCertificateParameters.prototype['certificate_password'] = undefined;

/**
 * Hostname type.
 * @member {module:model/ApiManagementServiceUploadCertificateParameters.TypeEnum} type
 */
ApiManagementServiceUploadCertificateParameters.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ApiManagementServiceUploadCertificateParameters['TypeEnum'] = {

    /**
     * value: "Proxy"
     * @const
     */
    "Proxy": "Proxy",

    /**
     * value: "Portal"
     * @const
     */
    "Portal": "Portal",

    /**
     * value: "Management"
     * @const
     */
    "Management": "Management",

    /**
     * value: "Scm"
     * @const
     */
    "Scm": "Scm"
};



export default ApiManagementServiceUploadCertificateParameters;

