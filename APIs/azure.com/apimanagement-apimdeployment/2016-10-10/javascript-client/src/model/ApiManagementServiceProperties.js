/**
 * ApiManagementClient
 * Use these REST APIs to manage Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2016-10-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdditionalRegion from './AdditionalRegion';
import HostnameConfiguration from './HostnameConfiguration';
import VirtualNetworkConfiguration from './VirtualNetworkConfiguration';

/**
 * The ApiManagementServiceProperties model module.
 * @module model/ApiManagementServiceProperties
 * @version 2016-10-10
 */
class ApiManagementServiceProperties {
    /**
     * Constructs a new <code>ApiManagementServiceProperties</code>.
     * Properties of an API Management service resource description.
     * @alias module:model/ApiManagementServiceProperties
     * @param publisherEmail {String} Publisher email.
     * @param publisherName {String} Publisher name.
     */
    constructor(publisherEmail, publisherName) { 
        
        ApiManagementServiceProperties.initialize(this, publisherEmail, publisherName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, publisherEmail, publisherName) { 
        obj['publisherEmail'] = publisherEmail;
        obj['publisherName'] = publisherName;
        obj['vpnType'] = 'None';
    }

    /**
     * Constructs a <code>ApiManagementServiceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiManagementServiceProperties} obj Optional instance to populate.
     * @return {module:model/ApiManagementServiceProperties} The populated <code>ApiManagementServiceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiManagementServiceProperties();

            if (data.hasOwnProperty('additionalLocations')) {
                obj['additionalLocations'] = ApiClient.convertToType(data['additionalLocations'], [AdditionalRegion]);
            }
            if (data.hasOwnProperty('addresserEmail')) {
                obj['addresserEmail'] = ApiClient.convertToType(data['addresserEmail'], 'String');
            }
            if (data.hasOwnProperty('createdAtUtc')) {
                obj['createdAtUtc'] = ApiClient.convertToType(data['createdAtUtc'], 'Date');
            }
            if (data.hasOwnProperty('customProperties')) {
                obj['customProperties'] = ApiClient.convertToType(data['customProperties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('hostnameConfigurations')) {
                obj['hostnameConfigurations'] = ApiClient.convertToType(data['hostnameConfigurations'], [HostnameConfiguration]);
            }
            if (data.hasOwnProperty('managementApiUrl')) {
                obj['managementApiUrl'] = ApiClient.convertToType(data['managementApiUrl'], 'String');
            }
            if (data.hasOwnProperty('portalUrl')) {
                obj['portalUrl'] = ApiClient.convertToType(data['portalUrl'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('publisherEmail')) {
                obj['publisherEmail'] = ApiClient.convertToType(data['publisherEmail'], 'String');
            }
            if (data.hasOwnProperty('publisherName')) {
                obj['publisherName'] = ApiClient.convertToType(data['publisherName'], 'String');
            }
            if (data.hasOwnProperty('runtimeUrl')) {
                obj['runtimeUrl'] = ApiClient.convertToType(data['runtimeUrl'], 'String');
            }
            if (data.hasOwnProperty('scmUrl')) {
                obj['scmUrl'] = ApiClient.convertToType(data['scmUrl'], 'String');
            }
            if (data.hasOwnProperty('staticIPs')) {
                obj['staticIPs'] = ApiClient.convertToType(data['staticIPs'], ['String']);
            }
            if (data.hasOwnProperty('targetProvisioningState')) {
                obj['targetProvisioningState'] = ApiClient.convertToType(data['targetProvisioningState'], 'String');
            }
            if (data.hasOwnProperty('vpnType')) {
                obj['vpnType'] = ApiClient.convertToType(data['vpnType'], 'String');
            }
            if (data.hasOwnProperty('vpnconfiguration')) {
                obj['vpnconfiguration'] = VirtualNetworkConfiguration.constructFromObject(data['vpnconfiguration']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiManagementServiceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiManagementServiceProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ApiManagementServiceProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['additionalLocations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalLocations'])) {
                throw new Error("Expected the field `additionalLocations` to be an array in the JSON data but got " + data['additionalLocations']);
            }
            // validate the optional field `additionalLocations` (array)
            for (const item of data['additionalLocations']) {
                AdditionalRegion.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['addresserEmail'] && !(typeof data['addresserEmail'] === 'string' || data['addresserEmail'] instanceof String)) {
            throw new Error("Expected the field `addresserEmail` to be a primitive type in the JSON string but got " + data['addresserEmail']);
        }
        if (data['hostnameConfigurations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['hostnameConfigurations'])) {
                throw new Error("Expected the field `hostnameConfigurations` to be an array in the JSON data but got " + data['hostnameConfigurations']);
            }
            // validate the optional field `hostnameConfigurations` (array)
            for (const item of data['hostnameConfigurations']) {
                HostnameConfiguration.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['managementApiUrl'] && !(typeof data['managementApiUrl'] === 'string' || data['managementApiUrl'] instanceof String)) {
            throw new Error("Expected the field `managementApiUrl` to be a primitive type in the JSON string but got " + data['managementApiUrl']);
        }
        // ensure the json data is a string
        if (data['portalUrl'] && !(typeof data['portalUrl'] === 'string' || data['portalUrl'] instanceof String)) {
            throw new Error("Expected the field `portalUrl` to be a primitive type in the JSON string but got " + data['portalUrl']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['publisherEmail'] && !(typeof data['publisherEmail'] === 'string' || data['publisherEmail'] instanceof String)) {
            throw new Error("Expected the field `publisherEmail` to be a primitive type in the JSON string but got " + data['publisherEmail']);
        }
        // ensure the json data is a string
        if (data['publisherName'] && !(typeof data['publisherName'] === 'string' || data['publisherName'] instanceof String)) {
            throw new Error("Expected the field `publisherName` to be a primitive type in the JSON string but got " + data['publisherName']);
        }
        // ensure the json data is a string
        if (data['runtimeUrl'] && !(typeof data['runtimeUrl'] === 'string' || data['runtimeUrl'] instanceof String)) {
            throw new Error("Expected the field `runtimeUrl` to be a primitive type in the JSON string but got " + data['runtimeUrl']);
        }
        // ensure the json data is a string
        if (data['scmUrl'] && !(typeof data['scmUrl'] === 'string' || data['scmUrl'] instanceof String)) {
            throw new Error("Expected the field `scmUrl` to be a primitive type in the JSON string but got " + data['scmUrl']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['staticIPs'])) {
            throw new Error("Expected the field `staticIPs` to be an array in the JSON data but got " + data['staticIPs']);
        }
        // ensure the json data is a string
        if (data['targetProvisioningState'] && !(typeof data['targetProvisioningState'] === 'string' || data['targetProvisioningState'] instanceof String)) {
            throw new Error("Expected the field `targetProvisioningState` to be a primitive type in the JSON string but got " + data['targetProvisioningState']);
        }
        // ensure the json data is a string
        if (data['vpnType'] && !(typeof data['vpnType'] === 'string' || data['vpnType'] instanceof String)) {
            throw new Error("Expected the field `vpnType` to be a primitive type in the JSON string but got " + data['vpnType']);
        }
        // validate the optional field `vpnconfiguration`
        if (data['vpnconfiguration']) { // data not null
          VirtualNetworkConfiguration.validateJSON(data['vpnconfiguration']);
        }

        return true;
    }


}

ApiManagementServiceProperties.RequiredProperties = ["publisherEmail", "publisherName"];

/**
 * Additional datacenter locations of the API Management service.
 * @member {Array.<module:model/AdditionalRegion>} additionalLocations
 */
ApiManagementServiceProperties.prototype['additionalLocations'] = undefined;

/**
 * Addresser email.
 * @member {String} addresserEmail
 */
ApiManagementServiceProperties.prototype['addresserEmail'] = undefined;

/**
 * Creation UTC date of the API Management service.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
 * @member {Date} createdAtUtc
 */
ApiManagementServiceProperties.prototype['createdAtUtc'] = undefined;

/**
 * Custom properties of the API Management service, like disabling TLS 1.0.
 * @member {Object.<String, String>} customProperties
 */
ApiManagementServiceProperties.prototype['customProperties'] = undefined;

/**
 * Custom hostname configuration of the API Management service.
 * @member {Array.<module:model/HostnameConfiguration>} hostnameConfigurations
 */
ApiManagementServiceProperties.prototype['hostnameConfigurations'] = undefined;

/**
 * Management API endpoint URL of the API Management service.
 * @member {String} managementApiUrl
 */
ApiManagementServiceProperties.prototype['managementApiUrl'] = undefined;

/**
 * Publisher portal endpoint Url of the API Management service.
 * @member {String} portalUrl
 */
ApiManagementServiceProperties.prototype['portalUrl'] = undefined;

/**
 * The current provisioning state of the API Management service which can be one of the following: Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
 * @member {String} provisioningState
 */
ApiManagementServiceProperties.prototype['provisioningState'] = undefined;

/**
 * Publisher email.
 * @member {String} publisherEmail
 */
ApiManagementServiceProperties.prototype['publisherEmail'] = undefined;

/**
 * Publisher name.
 * @member {String} publisherName
 */
ApiManagementServiceProperties.prototype['publisherName'] = undefined;

/**
 * Proxy endpoint URL of the API Management service.
 * @member {String} runtimeUrl
 */
ApiManagementServiceProperties.prototype['runtimeUrl'] = undefined;

/**
 * SCM endpoint URL of the API Management service.
 * @member {String} scmUrl
 */
ApiManagementServiceProperties.prototype['scmUrl'] = undefined;

/**
 * Static IP addresses of the API Management service virtual machines. Available only for Standard and Premium SKU.
 * @member {Array.<String>} staticIPs
 */
ApiManagementServiceProperties.prototype['staticIPs'] = undefined;

/**
 * The provisioning state of the API Management service, which is targeted by the long running operation started on the service.
 * @member {String} targetProvisioningState
 */
ApiManagementServiceProperties.prototype['targetProvisioningState'] = undefined;

/**
 * The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only.
 * @member {module:model/ApiManagementServiceProperties.VpnTypeEnum} vpnType
 * @default 'None'
 */
ApiManagementServiceProperties.prototype['vpnType'] = 'None';

/**
 * @member {module:model/VirtualNetworkConfiguration} vpnconfiguration
 */
ApiManagementServiceProperties.prototype['vpnconfiguration'] = undefined;





/**
 * Allowed values for the <code>vpnType</code> property.
 * @enum {String}
 * @readonly
 */
ApiManagementServiceProperties['VpnTypeEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "External"
     * @const
     */
    "External": "External",

    /**
     * value: "Internal"
     * @const
     */
    "Internal": "Internal"
};



export default ApiManagementServiceProperties;

