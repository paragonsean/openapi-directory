/**
 * ApiManagementClient
 * Use these REST APIs to manage Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2016-10-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VirtualNetworkConfiguration from './VirtualNetworkConfiguration';

/**
 * The AdditionalRegion model module.
 * @module model/AdditionalRegion
 * @version 2016-10-10
 */
class AdditionalRegion {
    /**
     * Constructs a new <code>AdditionalRegion</code>.
     * Description of an additional API Management resource location.
     * @alias module:model/AdditionalRegion
     * @param location {String} The location name of the additional region among Azure Data center regions.
     * @param skuType {module:model/AdditionalRegion.SkuTypeEnum} The SKU type in the location.
     */
    constructor(location, skuType) { 
        
        AdditionalRegion.initialize(this, location, skuType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, location, skuType) { 
        obj['location'] = location;
        obj['skuType'] = skuType;
        obj['skuUnitCount'] = 1;
    }

    /**
     * Constructs a <code>AdditionalRegion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdditionalRegion} obj Optional instance to populate.
     * @return {module:model/AdditionalRegion} The populated <code>AdditionalRegion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdditionalRegion();

            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('skuType')) {
                obj['skuType'] = ApiClient.convertToType(data['skuType'], 'String');
            }
            if (data.hasOwnProperty('skuUnitCount')) {
                obj['skuUnitCount'] = ApiClient.convertToType(data['skuUnitCount'], 'Number');
            }
            if (data.hasOwnProperty('staticIPs')) {
                obj['staticIPs'] = ApiClient.convertToType(data['staticIPs'], ['String']);
            }
            if (data.hasOwnProperty('vpnconfiguration')) {
                obj['vpnconfiguration'] = VirtualNetworkConfiguration.constructFromObject(data['vpnconfiguration']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdditionalRegion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdditionalRegion</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AdditionalRegion.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['skuType'] && !(typeof data['skuType'] === 'string' || data['skuType'] instanceof String)) {
            throw new Error("Expected the field `skuType` to be a primitive type in the JSON string but got " + data['skuType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['staticIPs'])) {
            throw new Error("Expected the field `staticIPs` to be an array in the JSON data but got " + data['staticIPs']);
        }
        // validate the optional field `vpnconfiguration`
        if (data['vpnconfiguration']) { // data not null
          VirtualNetworkConfiguration.validateJSON(data['vpnconfiguration']);
        }

        return true;
    }


}

AdditionalRegion.RequiredProperties = ["location", "skuType"];

/**
 * The location name of the additional region among Azure Data center regions.
 * @member {String} location
 */
AdditionalRegion.prototype['location'] = undefined;

/**
 * The SKU type in the location.
 * @member {module:model/AdditionalRegion.SkuTypeEnum} skuType
 */
AdditionalRegion.prototype['skuType'] = undefined;

/**
 * The SKU Unit count at the location. The maximum SKU Unit count depends on the SkuType. Maximum allowed for Developer SKU is 1, for Standard SKU is 4, and for Premium SKU is 10, at a location.
 * @member {Number} skuUnitCount
 * @default 1
 */
AdditionalRegion.prototype['skuUnitCount'] = 1;

/**
 * Static IP addresses of the location's virtual machines.
 * @member {Array.<String>} staticIPs
 */
AdditionalRegion.prototype['staticIPs'] = undefined;

/**
 * @member {module:model/VirtualNetworkConfiguration} vpnconfiguration
 */
AdditionalRegion.prototype['vpnconfiguration'] = undefined;





/**
 * Allowed values for the <code>skuType</code> property.
 * @enum {String}
 * @readonly
 */
AdditionalRegion['SkuTypeEnum'] = {

    /**
     * value: "Developer"
     * @const
     */
    "Developer": "Developer",

    /**
     * value: "Standard"
     * @const
     */
    "Standard": "Standard",

    /**
     * value: "Premium"
     * @const
     */
    "Premium": "Premium"
};



export default AdditionalRegion;

