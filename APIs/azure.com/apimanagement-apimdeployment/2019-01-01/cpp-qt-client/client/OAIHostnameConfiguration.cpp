/**
 * ApiManagementClient
 * Use these REST APIs to manage Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHostnameConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHostnameConfiguration::OAIHostnameConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHostnameConfiguration::OAIHostnameConfiguration() {
    this->initializeModel();
}

OAIHostnameConfiguration::~OAIHostnameConfiguration() {}

void OAIHostnameConfiguration::initializeModel() {

    m_certificate_isSet = false;
    m_certificate_isValid = false;

    m_certificate_password_isSet = false;
    m_certificate_password_isValid = false;

    m_default_ssl_binding_isSet = false;
    m_default_ssl_binding_isValid = false;

    m_encoded_certificate_isSet = false;
    m_encoded_certificate_isValid = false;

    m_host_name_isSet = false;
    m_host_name_isValid = false;

    m_key_vault_id_isSet = false;
    m_key_vault_id_isValid = false;

    m_negotiate_client_certificate_isSet = false;
    m_negotiate_client_certificate_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIHostnameConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHostnameConfiguration::fromJsonObject(QJsonObject json) {

    m_certificate_isValid = ::OpenAPI::fromJsonValue(m_certificate, json[QString("certificate")]);
    m_certificate_isSet = !json[QString("certificate")].isNull() && m_certificate_isValid;

    m_certificate_password_isValid = ::OpenAPI::fromJsonValue(m_certificate_password, json[QString("certificatePassword")]);
    m_certificate_password_isSet = !json[QString("certificatePassword")].isNull() && m_certificate_password_isValid;

    m_default_ssl_binding_isValid = ::OpenAPI::fromJsonValue(m_default_ssl_binding, json[QString("defaultSslBinding")]);
    m_default_ssl_binding_isSet = !json[QString("defaultSslBinding")].isNull() && m_default_ssl_binding_isValid;

    m_encoded_certificate_isValid = ::OpenAPI::fromJsonValue(m_encoded_certificate, json[QString("encodedCertificate")]);
    m_encoded_certificate_isSet = !json[QString("encodedCertificate")].isNull() && m_encoded_certificate_isValid;

    m_host_name_isValid = ::OpenAPI::fromJsonValue(m_host_name, json[QString("hostName")]);
    m_host_name_isSet = !json[QString("hostName")].isNull() && m_host_name_isValid;

    m_key_vault_id_isValid = ::OpenAPI::fromJsonValue(m_key_vault_id, json[QString("keyVaultId")]);
    m_key_vault_id_isSet = !json[QString("keyVaultId")].isNull() && m_key_vault_id_isValid;

    m_negotiate_client_certificate_isValid = ::OpenAPI::fromJsonValue(m_negotiate_client_certificate, json[QString("negotiateClientCertificate")]);
    m_negotiate_client_certificate_isSet = !json[QString("negotiateClientCertificate")].isNull() && m_negotiate_client_certificate_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIHostnameConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHostnameConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate.isSet()) {
        obj.insert(QString("certificate"), ::OpenAPI::toJsonValue(m_certificate));
    }
    if (m_certificate_password_isSet) {
        obj.insert(QString("certificatePassword"), ::OpenAPI::toJsonValue(m_certificate_password));
    }
    if (m_default_ssl_binding_isSet) {
        obj.insert(QString("defaultSslBinding"), ::OpenAPI::toJsonValue(m_default_ssl_binding));
    }
    if (m_encoded_certificate_isSet) {
        obj.insert(QString("encodedCertificate"), ::OpenAPI::toJsonValue(m_encoded_certificate));
    }
    if (m_host_name_isSet) {
        obj.insert(QString("hostName"), ::OpenAPI::toJsonValue(m_host_name));
    }
    if (m_key_vault_id_isSet) {
        obj.insert(QString("keyVaultId"), ::OpenAPI::toJsonValue(m_key_vault_id));
    }
    if (m_negotiate_client_certificate_isSet) {
        obj.insert(QString("negotiateClientCertificate"), ::OpenAPI::toJsonValue(m_negotiate_client_certificate));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAICertificateInformation OAIHostnameConfiguration::getCertificate() const {
    return m_certificate;
}
void OAIHostnameConfiguration::setCertificate(const OAICertificateInformation &certificate) {
    m_certificate = certificate;
    m_certificate_isSet = true;
}

bool OAIHostnameConfiguration::is_certificate_Set() const{
    return m_certificate_isSet;
}

bool OAIHostnameConfiguration::is_certificate_Valid() const{
    return m_certificate_isValid;
}

QString OAIHostnameConfiguration::getCertificatePassword() const {
    return m_certificate_password;
}
void OAIHostnameConfiguration::setCertificatePassword(const QString &certificate_password) {
    m_certificate_password = certificate_password;
    m_certificate_password_isSet = true;
}

bool OAIHostnameConfiguration::is_certificate_password_Set() const{
    return m_certificate_password_isSet;
}

bool OAIHostnameConfiguration::is_certificate_password_Valid() const{
    return m_certificate_password_isValid;
}

bool OAIHostnameConfiguration::isDefaultSslBinding() const {
    return m_default_ssl_binding;
}
void OAIHostnameConfiguration::setDefaultSslBinding(const bool &default_ssl_binding) {
    m_default_ssl_binding = default_ssl_binding;
    m_default_ssl_binding_isSet = true;
}

bool OAIHostnameConfiguration::is_default_ssl_binding_Set() const{
    return m_default_ssl_binding_isSet;
}

bool OAIHostnameConfiguration::is_default_ssl_binding_Valid() const{
    return m_default_ssl_binding_isValid;
}

QString OAIHostnameConfiguration::getEncodedCertificate() const {
    return m_encoded_certificate;
}
void OAIHostnameConfiguration::setEncodedCertificate(const QString &encoded_certificate) {
    m_encoded_certificate = encoded_certificate;
    m_encoded_certificate_isSet = true;
}

bool OAIHostnameConfiguration::is_encoded_certificate_Set() const{
    return m_encoded_certificate_isSet;
}

bool OAIHostnameConfiguration::is_encoded_certificate_Valid() const{
    return m_encoded_certificate_isValid;
}

QString OAIHostnameConfiguration::getHostName() const {
    return m_host_name;
}
void OAIHostnameConfiguration::setHostName(const QString &host_name) {
    m_host_name = host_name;
    m_host_name_isSet = true;
}

bool OAIHostnameConfiguration::is_host_name_Set() const{
    return m_host_name_isSet;
}

bool OAIHostnameConfiguration::is_host_name_Valid() const{
    return m_host_name_isValid;
}

QString OAIHostnameConfiguration::getKeyVaultId() const {
    return m_key_vault_id;
}
void OAIHostnameConfiguration::setKeyVaultId(const QString &key_vault_id) {
    m_key_vault_id = key_vault_id;
    m_key_vault_id_isSet = true;
}

bool OAIHostnameConfiguration::is_key_vault_id_Set() const{
    return m_key_vault_id_isSet;
}

bool OAIHostnameConfiguration::is_key_vault_id_Valid() const{
    return m_key_vault_id_isValid;
}

bool OAIHostnameConfiguration::isNegotiateClientCertificate() const {
    return m_negotiate_client_certificate;
}
void OAIHostnameConfiguration::setNegotiateClientCertificate(const bool &negotiate_client_certificate) {
    m_negotiate_client_certificate = negotiate_client_certificate;
    m_negotiate_client_certificate_isSet = true;
}

bool OAIHostnameConfiguration::is_negotiate_client_certificate_Set() const{
    return m_negotiate_client_certificate_isSet;
}

bool OAIHostnameConfiguration::is_negotiate_client_certificate_Valid() const{
    return m_negotiate_client_certificate_isValid;
}

QString OAIHostnameConfiguration::getType() const {
    return m_type;
}
void OAIHostnameConfiguration::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIHostnameConfiguration::is_type_Set() const{
    return m_type_isSet;
}

bool OAIHostnameConfiguration::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIHostnameConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_ssl_binding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoded_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_vault_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_negotiate_client_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHostnameConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_host_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
