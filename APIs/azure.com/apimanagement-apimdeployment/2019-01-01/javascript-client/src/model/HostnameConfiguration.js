/**
 * ApiManagementClient
 * Use these REST APIs to manage Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertificateInformation from './CertificateInformation';

/**
 * The HostnameConfiguration model module.
 * @module model/HostnameConfiguration
 * @version 2019-01-01
 */
class HostnameConfiguration {
    /**
     * Constructs a new <code>HostnameConfiguration</code>.
     * Custom hostname configuration.
     * @alias module:model/HostnameConfiguration
     * @param hostName {String} Hostname to configure on the Api Management service.
     * @param type {module:model/HostnameConfiguration.TypeEnum} Hostname type.
     */
    constructor(hostName, type) { 
        
        HostnameConfiguration.initialize(this, hostName, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, hostName, type) { 
        obj['defaultSslBinding'] = false;
        obj['hostName'] = hostName;
        obj['negotiateClientCertificate'] = false;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>HostnameConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HostnameConfiguration} obj Optional instance to populate.
     * @return {module:model/HostnameConfiguration} The populated <code>HostnameConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HostnameConfiguration();

            if (data.hasOwnProperty('certificate')) {
                obj['certificate'] = CertificateInformation.constructFromObject(data['certificate']);
            }
            if (data.hasOwnProperty('certificatePassword')) {
                obj['certificatePassword'] = ApiClient.convertToType(data['certificatePassword'], 'String');
            }
            if (data.hasOwnProperty('defaultSslBinding')) {
                obj['defaultSslBinding'] = ApiClient.convertToType(data['defaultSslBinding'], 'Boolean');
            }
            if (data.hasOwnProperty('encodedCertificate')) {
                obj['encodedCertificate'] = ApiClient.convertToType(data['encodedCertificate'], 'String');
            }
            if (data.hasOwnProperty('hostName')) {
                obj['hostName'] = ApiClient.convertToType(data['hostName'], 'String');
            }
            if (data.hasOwnProperty('keyVaultId')) {
                obj['keyVaultId'] = ApiClient.convertToType(data['keyVaultId'], 'String');
            }
            if (data.hasOwnProperty('negotiateClientCertificate')) {
                obj['negotiateClientCertificate'] = ApiClient.convertToType(data['negotiateClientCertificate'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HostnameConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HostnameConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HostnameConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `certificate`
        if (data['certificate']) { // data not null
          CertificateInformation.validateJSON(data['certificate']);
        }
        // ensure the json data is a string
        if (data['certificatePassword'] && !(typeof data['certificatePassword'] === 'string' || data['certificatePassword'] instanceof String)) {
            throw new Error("Expected the field `certificatePassword` to be a primitive type in the JSON string but got " + data['certificatePassword']);
        }
        // ensure the json data is a string
        if (data['encodedCertificate'] && !(typeof data['encodedCertificate'] === 'string' || data['encodedCertificate'] instanceof String)) {
            throw new Error("Expected the field `encodedCertificate` to be a primitive type in the JSON string but got " + data['encodedCertificate']);
        }
        // ensure the json data is a string
        if (data['hostName'] && !(typeof data['hostName'] === 'string' || data['hostName'] instanceof String)) {
            throw new Error("Expected the field `hostName` to be a primitive type in the JSON string but got " + data['hostName']);
        }
        // ensure the json data is a string
        if (data['keyVaultId'] && !(typeof data['keyVaultId'] === 'string' || data['keyVaultId'] instanceof String)) {
            throw new Error("Expected the field `keyVaultId` to be a primitive type in the JSON string but got " + data['keyVaultId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

HostnameConfiguration.RequiredProperties = ["hostName", "type"];

/**
 * @member {module:model/CertificateInformation} certificate
 */
HostnameConfiguration.prototype['certificate'] = undefined;

/**
 * Certificate Password.
 * @member {String} certificatePassword
 */
HostnameConfiguration.prototype['certificatePassword'] = undefined;

/**
 * Specify true to setup the certificate associated with this Hostname as the Default SSL Certificate. If a client does not send the SNI header, then this will be the certificate that will be challenged. The property is useful if a service has multiple custom hostname enabled and it needs to decide on the default ssl certificate. The setting only applied to Proxy Hostname Type.
 * @member {Boolean} defaultSslBinding
 * @default false
 */
HostnameConfiguration.prototype['defaultSslBinding'] = false;

/**
 * Base64 Encoded certificate.
 * @member {String} encodedCertificate
 */
HostnameConfiguration.prototype['encodedCertificate'] = undefined;

/**
 * Hostname to configure on the Api Management service.
 * @member {String} hostName
 */
HostnameConfiguration.prototype['hostName'] = undefined;

/**
 * Url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version is provided, auto-update of ssl certificate will not work. This requires Api Management service to be configured with MSI. The secret should be of type *application/x-pkcs12*
 * @member {String} keyVaultId
 */
HostnameConfiguration.prototype['keyVaultId'] = undefined;

/**
 * Specify true to always negotiate client certificate on the hostname. Default Value is false.
 * @member {Boolean} negotiateClientCertificate
 * @default false
 */
HostnameConfiguration.prototype['negotiateClientCertificate'] = false;

/**
 * Hostname type.
 * @member {module:model/HostnameConfiguration.TypeEnum} type
 */
HostnameConfiguration.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
HostnameConfiguration['TypeEnum'] = {

    /**
     * value: "Proxy"
     * @const
     */
    "Proxy": "Proxy",

    /**
     * value: "Portal"
     * @const
     */
    "Portal": "Portal",

    /**
     * value: "Management"
     * @const
     */
    "Management": "Management",

    /**
     * value: "Scm"
     * @const
     */
    "Scm": "Scm",

    /**
     * value: "DeveloperPortal"
     * @const
     */
    "DeveloperPortal": "DeveloperPortal"
};



export default HostnameConfiguration;

