/*
 * ApiManagementClient
 * Use these REST APIs to manage Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2017-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AdditionalLocation;
import org.openapitools.client.model.CertificateConfiguration;
import org.openapitools.client.model.HostnameConfiguration;
import org.openapitools.client.model.VirtualNetworkConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Base Properties of an API Management service resource description.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:45:44.807254-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiManagementServiceBaseProperties {
  public static final String SERIALIZED_NAME_ADDITIONAL_LOCATIONS = "additionalLocations";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_LOCATIONS)
  private List<AdditionalLocation> additionalLocations = new ArrayList<>();

  public static final String SERIALIZED_NAME_CERTIFICATES = "certificates";
  @SerializedName(SERIALIZED_NAME_CERTIFICATES)
  private List<CertificateConfiguration> certificates = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_AT_UTC = "createdAtUtc";
  @SerializedName(SERIALIZED_NAME_CREATED_AT_UTC)
  private OffsetDateTime createdAtUtc;

  public static final String SERIALIZED_NAME_CUSTOM_PROPERTIES = "customProperties";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PROPERTIES)
  private Map<String, String> customProperties = new HashMap<>();

  public static final String SERIALIZED_NAME_GATEWAY_REGIONAL_URL = "gatewayRegionalUrl";
  @SerializedName(SERIALIZED_NAME_GATEWAY_REGIONAL_URL)
  private String gatewayRegionalUrl;

  public static final String SERIALIZED_NAME_GATEWAY_URL = "gatewayUrl";
  @SerializedName(SERIALIZED_NAME_GATEWAY_URL)
  private String gatewayUrl;

  public static final String SERIALIZED_NAME_HOSTNAME_CONFIGURATIONS = "hostnameConfigurations";
  @SerializedName(SERIALIZED_NAME_HOSTNAME_CONFIGURATIONS)
  private List<HostnameConfiguration> hostnameConfigurations = new ArrayList<>();

  public static final String SERIALIZED_NAME_MANAGEMENT_API_URL = "managementApiUrl";
  @SerializedName(SERIALIZED_NAME_MANAGEMENT_API_URL)
  private String managementApiUrl;

  public static final String SERIALIZED_NAME_NOTIFICATION_SENDER_EMAIL = "notificationSenderEmail";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_SENDER_EMAIL)
  private String notificationSenderEmail;

  public static final String SERIALIZED_NAME_PORTAL_URL = "portalUrl";
  @SerializedName(SERIALIZED_NAME_PORTAL_URL)
  private String portalUrl;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_SCM_URL = "scmUrl";
  @SerializedName(SERIALIZED_NAME_SCM_URL)
  private String scmUrl;

  public static final String SERIALIZED_NAME_STATIC_IPS = "staticIps";
  @SerializedName(SERIALIZED_NAME_STATIC_IPS)
  private List<String> staticIps = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_PROVISIONING_STATE = "targetProvisioningState";
  @SerializedName(SERIALIZED_NAME_TARGET_PROVISIONING_STATE)
  private String targetProvisioningState;

  public static final String SERIALIZED_NAME_VIRTUAL_NETWORK_CONFIGURATION = "virtualNetworkConfiguration";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NETWORK_CONFIGURATION)
  private VirtualNetworkConfiguration virtualNetworkConfiguration;

  /**
   * The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only.
   */
  @JsonAdapter(VirtualNetworkTypeEnum.Adapter.class)
  public enum VirtualNetworkTypeEnum {
    NONE("None"),
    
    EXTERNAL("External"),
    
    INTERNAL("Internal");

    private String value;

    VirtualNetworkTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VirtualNetworkTypeEnum fromValue(String value) {
      for (VirtualNetworkTypeEnum b : VirtualNetworkTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VirtualNetworkTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VirtualNetworkTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VirtualNetworkTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VirtualNetworkTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VirtualNetworkTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIRTUAL_NETWORK_TYPE = "virtualNetworkType";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NETWORK_TYPE)
  private VirtualNetworkTypeEnum virtualNetworkType = VirtualNetworkTypeEnum.NONE;

  public ApiManagementServiceBaseProperties() {
  }

  public ApiManagementServiceBaseProperties(
     OffsetDateTime createdAtUtc, 
     String gatewayRegionalUrl, 
     String gatewayUrl, 
     String managementApiUrl, 
     String portalUrl, 
     String provisioningState, 
     String scmUrl, 
     List<String> staticIps, 
     String targetProvisioningState
  ) {
    this();
    this.createdAtUtc = createdAtUtc;
    this.gatewayRegionalUrl = gatewayRegionalUrl;
    this.gatewayUrl = gatewayUrl;
    this.managementApiUrl = managementApiUrl;
    this.portalUrl = portalUrl;
    this.provisioningState = provisioningState;
    this.scmUrl = scmUrl;
    this.staticIps = staticIps;
    this.targetProvisioningState = targetProvisioningState;
  }

  public ApiManagementServiceBaseProperties additionalLocations(List<AdditionalLocation> additionalLocations) {
    this.additionalLocations = additionalLocations;
    return this;
  }

  public ApiManagementServiceBaseProperties addAdditionalLocationsItem(AdditionalLocation additionalLocationsItem) {
    if (this.additionalLocations == null) {
      this.additionalLocations = new ArrayList<>();
    }
    this.additionalLocations.add(additionalLocationsItem);
    return this;
  }

  /**
   * Additional datacenter locations of the API Management service.
   * @return additionalLocations
   */
  @javax.annotation.Nullable
  public List<AdditionalLocation> getAdditionalLocations() {
    return additionalLocations;
  }

  public void setAdditionalLocations(List<AdditionalLocation> additionalLocations) {
    this.additionalLocations = additionalLocations;
  }


  public ApiManagementServiceBaseProperties certificates(List<CertificateConfiguration> certificates) {
    this.certificates = certificates;
    return this;
  }

  public ApiManagementServiceBaseProperties addCertificatesItem(CertificateConfiguration certificatesItem) {
    if (this.certificates == null) {
      this.certificates = new ArrayList<>();
    }
    this.certificates.add(certificatesItem);
    return this;
  }

  /**
   * List of Certificates that need to be installed in the API Management service. Max supported certificates that can be installed is 10.
   * @return certificates
   */
  @javax.annotation.Nullable
  public List<CertificateConfiguration> getCertificates() {
    return certificates;
  }

  public void setCertificates(List<CertificateConfiguration> certificates) {
    this.certificates = certificates;
  }


  /**
   * Creation UTC date of the API Management service.The date conforms to the following format: &#x60;yyyy-MM-ddTHH:mm:ssZ&#x60; as specified by the ISO 8601 standard.
   * @return createdAtUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAtUtc() {
    return createdAtUtc;
  }



  public ApiManagementServiceBaseProperties customProperties(Map<String, String> customProperties) {
    this.customProperties = customProperties;
    return this;
  }

  public ApiManagementServiceBaseProperties putCustomPropertiesItem(String key, String customPropertiesItem) {
    if (this.customProperties == null) {
      this.customProperties = new HashMap<>();
    }
    this.customProperties.put(key, customPropertiesItem);
    return this;
  }

  /**
   * Custom properties of the API Management service. Setting &#x60;Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168&#x60; will disable the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2). Setting &#x60;Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11&#x60; can be used to disable just TLS 1.1 and setting &#x60;Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10&#x60; can be used to disable TLS 1.0 on an API Management service.
   * @return customProperties
   */
  @javax.annotation.Nullable
  public Map<String, String> getCustomProperties() {
    return customProperties;
  }

  public void setCustomProperties(Map<String, String> customProperties) {
    this.customProperties = customProperties;
  }


  /**
   * Gateway URL of the API Management service in the Default Region.
   * @return gatewayRegionalUrl
   */
  @javax.annotation.Nullable
  public String getGatewayRegionalUrl() {
    return gatewayRegionalUrl;
  }



  /**
   * Gateway URL of the API Management service.
   * @return gatewayUrl
   */
  @javax.annotation.Nullable
  public String getGatewayUrl() {
    return gatewayUrl;
  }



  public ApiManagementServiceBaseProperties hostnameConfigurations(List<HostnameConfiguration> hostnameConfigurations) {
    this.hostnameConfigurations = hostnameConfigurations;
    return this;
  }

  public ApiManagementServiceBaseProperties addHostnameConfigurationsItem(HostnameConfiguration hostnameConfigurationsItem) {
    if (this.hostnameConfigurations == null) {
      this.hostnameConfigurations = new ArrayList<>();
    }
    this.hostnameConfigurations.add(hostnameConfigurationsItem);
    return this;
  }

  /**
   * Custom hostname configuration of the API Management service.
   * @return hostnameConfigurations
   */
  @javax.annotation.Nullable
  public List<HostnameConfiguration> getHostnameConfigurations() {
    return hostnameConfigurations;
  }

  public void setHostnameConfigurations(List<HostnameConfiguration> hostnameConfigurations) {
    this.hostnameConfigurations = hostnameConfigurations;
  }


  /**
   * Management API endpoint URL of the API Management service.
   * @return managementApiUrl
   */
  @javax.annotation.Nullable
  public String getManagementApiUrl() {
    return managementApiUrl;
  }



  public ApiManagementServiceBaseProperties notificationSenderEmail(String notificationSenderEmail) {
    this.notificationSenderEmail = notificationSenderEmail;
    return this;
  }

  /**
   * Email address from which the notification will be sent.
   * @return notificationSenderEmail
   */
  @javax.annotation.Nullable
  public String getNotificationSenderEmail() {
    return notificationSenderEmail;
  }

  public void setNotificationSenderEmail(String notificationSenderEmail) {
    this.notificationSenderEmail = notificationSenderEmail;
  }


  /**
   * Publisher portal endpoint Url of the API Management service.
   * @return portalUrl
   */
  @javax.annotation.Nullable
  public String getPortalUrl() {
    return portalUrl;
  }



  /**
   * The current provisioning state of the API Management service which can be one of the following: Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  /**
   * SCM endpoint URL of the API Management service.
   * @return scmUrl
   */
  @javax.annotation.Nullable
  public String getScmUrl() {
    return scmUrl;
  }



  /**
   * Static IP addresses of the API Management service virtual machines. Available only for Standard and Premium SKU.
   * @return staticIps
   */
  @javax.annotation.Nullable
  public List<String> getStaticIps() {
    return staticIps;
  }



  /**
   * The provisioning state of the API Management service, which is targeted by the long running operation started on the service.
   * @return targetProvisioningState
   */
  @javax.annotation.Nullable
  public String getTargetProvisioningState() {
    return targetProvisioningState;
  }



  public ApiManagementServiceBaseProperties virtualNetworkConfiguration(VirtualNetworkConfiguration virtualNetworkConfiguration) {
    this.virtualNetworkConfiguration = virtualNetworkConfiguration;
    return this;
  }

  /**
   * Get virtualNetworkConfiguration
   * @return virtualNetworkConfiguration
   */
  @javax.annotation.Nullable
  public VirtualNetworkConfiguration getVirtualNetworkConfiguration() {
    return virtualNetworkConfiguration;
  }

  public void setVirtualNetworkConfiguration(VirtualNetworkConfiguration virtualNetworkConfiguration) {
    this.virtualNetworkConfiguration = virtualNetworkConfiguration;
  }


  public ApiManagementServiceBaseProperties virtualNetworkType(VirtualNetworkTypeEnum virtualNetworkType) {
    this.virtualNetworkType = virtualNetworkType;
    return this;
  }

  /**
   * The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only.
   * @return virtualNetworkType
   */
  @javax.annotation.Nullable
  public VirtualNetworkTypeEnum getVirtualNetworkType() {
    return virtualNetworkType;
  }

  public void setVirtualNetworkType(VirtualNetworkTypeEnum virtualNetworkType) {
    this.virtualNetworkType = virtualNetworkType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiManagementServiceBaseProperties apiManagementServiceBaseProperties = (ApiManagementServiceBaseProperties) o;
    return Objects.equals(this.additionalLocations, apiManagementServiceBaseProperties.additionalLocations) &&
        Objects.equals(this.certificates, apiManagementServiceBaseProperties.certificates) &&
        Objects.equals(this.createdAtUtc, apiManagementServiceBaseProperties.createdAtUtc) &&
        Objects.equals(this.customProperties, apiManagementServiceBaseProperties.customProperties) &&
        Objects.equals(this.gatewayRegionalUrl, apiManagementServiceBaseProperties.gatewayRegionalUrl) &&
        Objects.equals(this.gatewayUrl, apiManagementServiceBaseProperties.gatewayUrl) &&
        Objects.equals(this.hostnameConfigurations, apiManagementServiceBaseProperties.hostnameConfigurations) &&
        Objects.equals(this.managementApiUrl, apiManagementServiceBaseProperties.managementApiUrl) &&
        Objects.equals(this.notificationSenderEmail, apiManagementServiceBaseProperties.notificationSenderEmail) &&
        Objects.equals(this.portalUrl, apiManagementServiceBaseProperties.portalUrl) &&
        Objects.equals(this.provisioningState, apiManagementServiceBaseProperties.provisioningState) &&
        Objects.equals(this.scmUrl, apiManagementServiceBaseProperties.scmUrl) &&
        Objects.equals(this.staticIps, apiManagementServiceBaseProperties.staticIps) &&
        Objects.equals(this.targetProvisioningState, apiManagementServiceBaseProperties.targetProvisioningState) &&
        Objects.equals(this.virtualNetworkConfiguration, apiManagementServiceBaseProperties.virtualNetworkConfiguration) &&
        Objects.equals(this.virtualNetworkType, apiManagementServiceBaseProperties.virtualNetworkType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalLocations, certificates, createdAtUtc, customProperties, gatewayRegionalUrl, gatewayUrl, hostnameConfigurations, managementApiUrl, notificationSenderEmail, portalUrl, provisioningState, scmUrl, staticIps, targetProvisioningState, virtualNetworkConfiguration, virtualNetworkType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiManagementServiceBaseProperties {\n");
    sb.append("    additionalLocations: ").append(toIndentedString(additionalLocations)).append("\n");
    sb.append("    certificates: ").append(toIndentedString(certificates)).append("\n");
    sb.append("    createdAtUtc: ").append(toIndentedString(createdAtUtc)).append("\n");
    sb.append("    customProperties: ").append(toIndentedString(customProperties)).append("\n");
    sb.append("    gatewayRegionalUrl: ").append(toIndentedString(gatewayRegionalUrl)).append("\n");
    sb.append("    gatewayUrl: ").append(toIndentedString(gatewayUrl)).append("\n");
    sb.append("    hostnameConfigurations: ").append(toIndentedString(hostnameConfigurations)).append("\n");
    sb.append("    managementApiUrl: ").append(toIndentedString(managementApiUrl)).append("\n");
    sb.append("    notificationSenderEmail: ").append(toIndentedString(notificationSenderEmail)).append("\n");
    sb.append("    portalUrl: ").append(toIndentedString(portalUrl)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    scmUrl: ").append(toIndentedString(scmUrl)).append("\n");
    sb.append("    staticIps: ").append(toIndentedString(staticIps)).append("\n");
    sb.append("    targetProvisioningState: ").append(toIndentedString(targetProvisioningState)).append("\n");
    sb.append("    virtualNetworkConfiguration: ").append(toIndentedString(virtualNetworkConfiguration)).append("\n");
    sb.append("    virtualNetworkType: ").append(toIndentedString(virtualNetworkType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalLocations");
    openapiFields.add("certificates");
    openapiFields.add("createdAtUtc");
    openapiFields.add("customProperties");
    openapiFields.add("gatewayRegionalUrl");
    openapiFields.add("gatewayUrl");
    openapiFields.add("hostnameConfigurations");
    openapiFields.add("managementApiUrl");
    openapiFields.add("notificationSenderEmail");
    openapiFields.add("portalUrl");
    openapiFields.add("provisioningState");
    openapiFields.add("scmUrl");
    openapiFields.add("staticIps");
    openapiFields.add("targetProvisioningState");
    openapiFields.add("virtualNetworkConfiguration");
    openapiFields.add("virtualNetworkType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiManagementServiceBaseProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiManagementServiceBaseProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiManagementServiceBaseProperties is not found in the empty JSON string", ApiManagementServiceBaseProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiManagementServiceBaseProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiManagementServiceBaseProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additionalLocations") != null && !jsonObj.get("additionalLocations").isJsonNull()) {
        JsonArray jsonArrayadditionalLocations = jsonObj.getAsJsonArray("additionalLocations");
        if (jsonArrayadditionalLocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalLocations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalLocations` to be an array in the JSON string but got `%s`", jsonObj.get("additionalLocations").toString()));
          }

          // validate the optional field `additionalLocations` (array)
          for (int i = 0; i < jsonArrayadditionalLocations.size(); i++) {
            AdditionalLocation.validateJsonElement(jsonArrayadditionalLocations.get(i));
          };
        }
      }
      if (jsonObj.get("certificates") != null && !jsonObj.get("certificates").isJsonNull()) {
        JsonArray jsonArraycertificates = jsonObj.getAsJsonArray("certificates");
        if (jsonArraycertificates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("certificates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `certificates` to be an array in the JSON string but got `%s`", jsonObj.get("certificates").toString()));
          }

          // validate the optional field `certificates` (array)
          for (int i = 0; i < jsonArraycertificates.size(); i++) {
            CertificateConfiguration.validateJsonElement(jsonArraycertificates.get(i));
          };
        }
      }
      if ((jsonObj.get("gatewayRegionalUrl") != null && !jsonObj.get("gatewayRegionalUrl").isJsonNull()) && !jsonObj.get("gatewayRegionalUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gatewayRegionalUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gatewayRegionalUrl").toString()));
      }
      if ((jsonObj.get("gatewayUrl") != null && !jsonObj.get("gatewayUrl").isJsonNull()) && !jsonObj.get("gatewayUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gatewayUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gatewayUrl").toString()));
      }
      if (jsonObj.get("hostnameConfigurations") != null && !jsonObj.get("hostnameConfigurations").isJsonNull()) {
        JsonArray jsonArrayhostnameConfigurations = jsonObj.getAsJsonArray("hostnameConfigurations");
        if (jsonArrayhostnameConfigurations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hostnameConfigurations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hostnameConfigurations` to be an array in the JSON string but got `%s`", jsonObj.get("hostnameConfigurations").toString()));
          }

          // validate the optional field `hostnameConfigurations` (array)
          for (int i = 0; i < jsonArrayhostnameConfigurations.size(); i++) {
            HostnameConfiguration.validateJsonElement(jsonArrayhostnameConfigurations.get(i));
          };
        }
      }
      if ((jsonObj.get("managementApiUrl") != null && !jsonObj.get("managementApiUrl").isJsonNull()) && !jsonObj.get("managementApiUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managementApiUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managementApiUrl").toString()));
      }
      if ((jsonObj.get("notificationSenderEmail") != null && !jsonObj.get("notificationSenderEmail").isJsonNull()) && !jsonObj.get("notificationSenderEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationSenderEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationSenderEmail").toString()));
      }
      if ((jsonObj.get("portalUrl") != null && !jsonObj.get("portalUrl").isJsonNull()) && !jsonObj.get("portalUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `portalUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("portalUrl").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("scmUrl") != null && !jsonObj.get("scmUrl").isJsonNull()) && !jsonObj.get("scmUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scmUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scmUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("staticIps") != null && !jsonObj.get("staticIps").isJsonNull() && !jsonObj.get("staticIps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `staticIps` to be an array in the JSON string but got `%s`", jsonObj.get("staticIps").toString()));
      }
      if ((jsonObj.get("targetProvisioningState") != null && !jsonObj.get("targetProvisioningState").isJsonNull()) && !jsonObj.get("targetProvisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetProvisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetProvisioningState").toString()));
      }
      // validate the optional field `virtualNetworkConfiguration`
      if (jsonObj.get("virtualNetworkConfiguration") != null && !jsonObj.get("virtualNetworkConfiguration").isJsonNull()) {
        VirtualNetworkConfiguration.validateJsonElement(jsonObj.get("virtualNetworkConfiguration"));
      }
      if ((jsonObj.get("virtualNetworkType") != null && !jsonObj.get("virtualNetworkType").isJsonNull()) && !jsonObj.get("virtualNetworkType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtualNetworkType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("virtualNetworkType").toString()));
      }
      // validate the optional field `virtualNetworkType`
      if (jsonObj.get("virtualNetworkType") != null && !jsonObj.get("virtualNetworkType").isJsonNull()) {
        VirtualNetworkTypeEnum.validateJsonElement(jsonObj.get("virtualNetworkType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiManagementServiceBaseProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiManagementServiceBaseProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiManagementServiceBaseProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiManagementServiceBaseProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiManagementServiceBaseProperties>() {
           @Override
           public void write(JsonWriter out, ApiManagementServiceBaseProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiManagementServiceBaseProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiManagementServiceBaseProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiManagementServiceBaseProperties
   * @throws IOException if the JSON string is invalid with respect to ApiManagementServiceBaseProperties
   */
  public static ApiManagementServiceBaseProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiManagementServiceBaseProperties.class);
  }

  /**
   * Convert an instance of ApiManagementServiceBaseProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

