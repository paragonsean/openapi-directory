/**
 * ApiManagementClient
 * Use these REST APIs to manage Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2017-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertificateInformation from './CertificateInformation';

/**
 * The CertificateConfiguration model module.
 * @module model/CertificateConfiguration
 * @version 2017-03-01
 */
class CertificateConfiguration {
    /**
     * Constructs a new <code>CertificateConfiguration</code>.
     * Certificate configuration which consist of non-trusted intermediates and root certificates.
     * @alias module:model/CertificateConfiguration
     * @param storeName {module:model/CertificateConfiguration.StoreNameEnum} The local certificate store location. Only Root and CertificateAuthority are valid locations.
     */
    constructor(storeName) { 
        
        CertificateConfiguration.initialize(this, storeName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, storeName) { 
        obj['storeName'] = storeName;
    }

    /**
     * Constructs a <code>CertificateConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateConfiguration} obj Optional instance to populate.
     * @return {module:model/CertificateConfiguration} The populated <code>CertificateConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateConfiguration();

            if (data.hasOwnProperty('certificate')) {
                obj['certificate'] = CertificateInformation.constructFromObject(data['certificate']);
            }
            if (data.hasOwnProperty('certificatePassword')) {
                obj['certificatePassword'] = ApiClient.convertToType(data['certificatePassword'], 'String');
            }
            if (data.hasOwnProperty('encodedCertificate')) {
                obj['encodedCertificate'] = ApiClient.convertToType(data['encodedCertificate'], 'String');
            }
            if (data.hasOwnProperty('storeName')) {
                obj['storeName'] = ApiClient.convertToType(data['storeName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CertificateConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `certificate`
        if (data['certificate']) { // data not null
          CertificateInformation.validateJSON(data['certificate']);
        }
        // ensure the json data is a string
        if (data['certificatePassword'] && !(typeof data['certificatePassword'] === 'string' || data['certificatePassword'] instanceof String)) {
            throw new Error("Expected the field `certificatePassword` to be a primitive type in the JSON string but got " + data['certificatePassword']);
        }
        // ensure the json data is a string
        if (data['encodedCertificate'] && !(typeof data['encodedCertificate'] === 'string' || data['encodedCertificate'] instanceof String)) {
            throw new Error("Expected the field `encodedCertificate` to be a primitive type in the JSON string but got " + data['encodedCertificate']);
        }
        // ensure the json data is a string
        if (data['storeName'] && !(typeof data['storeName'] === 'string' || data['storeName'] instanceof String)) {
            throw new Error("Expected the field `storeName` to be a primitive type in the JSON string but got " + data['storeName']);
        }

        return true;
    }


}

CertificateConfiguration.RequiredProperties = ["storeName"];

/**
 * @member {module:model/CertificateInformation} certificate
 */
CertificateConfiguration.prototype['certificate'] = undefined;

/**
 * Certificate Password.
 * @member {String} certificatePassword
 */
CertificateConfiguration.prototype['certificatePassword'] = undefined;

/**
 * Base64 Encoded certificate.
 * @member {String} encodedCertificate
 */
CertificateConfiguration.prototype['encodedCertificate'] = undefined;

/**
 * The local certificate store location. Only Root and CertificateAuthority are valid locations.
 * @member {module:model/CertificateConfiguration.StoreNameEnum} storeName
 */
CertificateConfiguration.prototype['storeName'] = undefined;





/**
 * Allowed values for the <code>storeName</code> property.
 * @enum {String}
 * @readonly
 */
CertificateConfiguration['StoreNameEnum'] = {

    /**
     * value: "CertificateAuthority"
     * @const
     */
    "CertificateAuthority": "CertificateAuthority",

    /**
     * value: "Root"
     * @const
     */
    "Root": "Root"
};



export default CertificateConfiguration;

