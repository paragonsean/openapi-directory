# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_management_service_sku_properties import ApiManagementServiceSkuProperties
from openapi_server.models.virtual_network_configuration import VirtualNetworkConfiguration
from openapi_server import util


class AdditionalLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gateway_regional_url: str=None, location: str=None, sku: ApiManagementServiceSkuProperties=None, static_ips: List[str]=None, virtual_network_configuration: VirtualNetworkConfiguration=None):
        """AdditionalLocation - a model defined in OpenAPI

        :param gateway_regional_url: The gateway_regional_url of this AdditionalLocation.
        :param location: The location of this AdditionalLocation.
        :param sku: The sku of this AdditionalLocation.
        :param static_ips: The static_ips of this AdditionalLocation.
        :param virtual_network_configuration: The virtual_network_configuration of this AdditionalLocation.
        """
        self.openapi_types = {
            'gateway_regional_url': str,
            'location': str,
            'sku': ApiManagementServiceSkuProperties,
            'static_ips': List[str],
            'virtual_network_configuration': VirtualNetworkConfiguration
        }

        self.attribute_map = {
            'gateway_regional_url': 'gatewayRegionalUrl',
            'location': 'location',
            'sku': 'sku',
            'static_ips': 'staticIps',
            'virtual_network_configuration': 'virtualNetworkConfiguration'
        }

        self._gateway_regional_url = gateway_regional_url
        self._location = location
        self._sku = sku
        self._static_ips = static_ips
        self._virtual_network_configuration = virtual_network_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdditionalLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdditionalLocation of this AdditionalLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gateway_regional_url(self):
        """Gets the gateway_regional_url of this AdditionalLocation.

        Gateway URL of the API Management service in the Region.

        :return: The gateway_regional_url of this AdditionalLocation.
        :rtype: str
        """
        return self._gateway_regional_url

    @gateway_regional_url.setter
    def gateway_regional_url(self, gateway_regional_url):
        """Sets the gateway_regional_url of this AdditionalLocation.

        Gateway URL of the API Management service in the Region.

        :param gateway_regional_url: The gateway_regional_url of this AdditionalLocation.
        :type gateway_regional_url: str
        """

        self._gateway_regional_url = gateway_regional_url

    @property
    def location(self):
        """Gets the location of this AdditionalLocation.

        The location name of the additional region among Azure Data center regions.

        :return: The location of this AdditionalLocation.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this AdditionalLocation.

        The location name of the additional region among Azure Data center regions.

        :param location: The location of this AdditionalLocation.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def sku(self):
        """Gets the sku of this AdditionalLocation.


        :return: The sku of this AdditionalLocation.
        :rtype: ApiManagementServiceSkuProperties
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this AdditionalLocation.


        :param sku: The sku of this AdditionalLocation.
        :type sku: ApiManagementServiceSkuProperties
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")

        self._sku = sku

    @property
    def static_ips(self):
        """Gets the static_ips of this AdditionalLocation.

        Static IP addresses of the location's virtual machines.

        :return: The static_ips of this AdditionalLocation.
        :rtype: List[str]
        """
        return self._static_ips

    @static_ips.setter
    def static_ips(self, static_ips):
        """Sets the static_ips of this AdditionalLocation.

        Static IP addresses of the location's virtual machines.

        :param static_ips: The static_ips of this AdditionalLocation.
        :type static_ips: List[str]
        """

        self._static_ips = static_ips

    @property
    def virtual_network_configuration(self):
        """Gets the virtual_network_configuration of this AdditionalLocation.


        :return: The virtual_network_configuration of this AdditionalLocation.
        :rtype: VirtualNetworkConfiguration
        """
        return self._virtual_network_configuration

    @virtual_network_configuration.setter
    def virtual_network_configuration(self, virtual_network_configuration):
        """Sets the virtual_network_configuration of this AdditionalLocation.


        :param virtual_network_configuration: The virtual_network_configuration of this AdditionalLocation.
        :type virtual_network_configuration: VirtualNetworkConfiguration
        """

        self._virtual_network_configuration = virtual_network_configuration
