# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiManagementServiceUploadCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate: str=None, certificate_password: str=None, type: str=None):
        """ApiManagementServiceUploadCertificateParameters - a model defined in OpenAPI

        :param certificate: The certificate of this ApiManagementServiceUploadCertificateParameters.
        :param certificate_password: The certificate_password of this ApiManagementServiceUploadCertificateParameters.
        :param type: The type of this ApiManagementServiceUploadCertificateParameters.
        """
        self.openapi_types = {
            'certificate': str,
            'certificate_password': str,
            'type': str
        }

        self.attribute_map = {
            'certificate': 'certificate',
            'certificate_password': 'certificate_password',
            'type': 'type'
        }

        self._certificate = certificate
        self._certificate_password = certificate_password
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiManagementServiceUploadCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiManagementServiceUploadCertificateParameters of this ApiManagementServiceUploadCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate(self):
        """Gets the certificate of this ApiManagementServiceUploadCertificateParameters.

        Base64 Encoded certificate.

        :return: The certificate of this ApiManagementServiceUploadCertificateParameters.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this ApiManagementServiceUploadCertificateParameters.

        Base64 Encoded certificate.

        :param certificate: The certificate of this ApiManagementServiceUploadCertificateParameters.
        :type certificate: str
        """
        if certificate is None:
            raise ValueError("Invalid value for `certificate`, must not be `None`")

        self._certificate = certificate

    @property
    def certificate_password(self):
        """Gets the certificate_password of this ApiManagementServiceUploadCertificateParameters.

        Certificate password.

        :return: The certificate_password of this ApiManagementServiceUploadCertificateParameters.
        :rtype: str
        """
        return self._certificate_password

    @certificate_password.setter
    def certificate_password(self, certificate_password):
        """Sets the certificate_password of this ApiManagementServiceUploadCertificateParameters.

        Certificate password.

        :param certificate_password: The certificate_password of this ApiManagementServiceUploadCertificateParameters.
        :type certificate_password: str
        """
        if certificate_password is None:
            raise ValueError("Invalid value for `certificate_password`, must not be `None`")

        self._certificate_password = certificate_password

    @property
    def type(self):
        """Gets the type of this ApiManagementServiceUploadCertificateParameters.

        Hostname type.

        :return: The type of this ApiManagementServiceUploadCertificateParameters.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApiManagementServiceUploadCertificateParameters.

        Hostname type.

        :param type: The type of this ApiManagementServiceUploadCertificateParameters.
        :type type: str
        """
        allowed_values = ["Proxy", "Portal", "Management", "Scm"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
