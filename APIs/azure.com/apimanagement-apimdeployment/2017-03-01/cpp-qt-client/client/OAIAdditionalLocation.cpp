/**
 * ApiManagementClient
 * Use these REST APIs to manage Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdditionalLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdditionalLocation::OAIAdditionalLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdditionalLocation::OAIAdditionalLocation() {
    this->initializeModel();
}

OAIAdditionalLocation::~OAIAdditionalLocation() {}

void OAIAdditionalLocation::initializeModel() {

    m_gateway_regional_url_isSet = false;
    m_gateway_regional_url_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_static_ips_isSet = false;
    m_static_ips_isValid = false;

    m_virtual_network_configuration_isSet = false;
    m_virtual_network_configuration_isValid = false;
}

void OAIAdditionalLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdditionalLocation::fromJsonObject(QJsonObject json) {

    m_gateway_regional_url_isValid = ::OpenAPI::fromJsonValue(m_gateway_regional_url, json[QString("gatewayRegionalUrl")]);
    m_gateway_regional_url_isSet = !json[QString("gatewayRegionalUrl")].isNull() && m_gateway_regional_url_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_static_ips_isValid = ::OpenAPI::fromJsonValue(m_static_ips, json[QString("staticIps")]);
    m_static_ips_isSet = !json[QString("staticIps")].isNull() && m_static_ips_isValid;

    m_virtual_network_configuration_isValid = ::OpenAPI::fromJsonValue(m_virtual_network_configuration, json[QString("virtualNetworkConfiguration")]);
    m_virtual_network_configuration_isSet = !json[QString("virtualNetworkConfiguration")].isNull() && m_virtual_network_configuration_isValid;
}

QString OAIAdditionalLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdditionalLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_gateway_regional_url_isSet) {
        obj.insert(QString("gatewayRegionalUrl"), ::OpenAPI::toJsonValue(m_gateway_regional_url));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_sku.isSet()) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_static_ips.size() > 0) {
        obj.insert(QString("staticIps"), ::OpenAPI::toJsonValue(m_static_ips));
    }
    if (m_virtual_network_configuration.isSet()) {
        obj.insert(QString("virtualNetworkConfiguration"), ::OpenAPI::toJsonValue(m_virtual_network_configuration));
    }
    return obj;
}

QString OAIAdditionalLocation::getGatewayRegionalUrl() const {
    return m_gateway_regional_url;
}
void OAIAdditionalLocation::setGatewayRegionalUrl(const QString &gateway_regional_url) {
    m_gateway_regional_url = gateway_regional_url;
    m_gateway_regional_url_isSet = true;
}

bool OAIAdditionalLocation::is_gateway_regional_url_Set() const{
    return m_gateway_regional_url_isSet;
}

bool OAIAdditionalLocation::is_gateway_regional_url_Valid() const{
    return m_gateway_regional_url_isValid;
}

QString OAIAdditionalLocation::getLocation() const {
    return m_location;
}
void OAIAdditionalLocation::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIAdditionalLocation::is_location_Set() const{
    return m_location_isSet;
}

bool OAIAdditionalLocation::is_location_Valid() const{
    return m_location_isValid;
}

OAIApiManagementServiceSkuProperties OAIAdditionalLocation::getSku() const {
    return m_sku;
}
void OAIAdditionalLocation::setSku(const OAIApiManagementServiceSkuProperties &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIAdditionalLocation::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIAdditionalLocation::is_sku_Valid() const{
    return m_sku_isValid;
}

QList<QString> OAIAdditionalLocation::getStaticIps() const {
    return m_static_ips;
}
void OAIAdditionalLocation::setStaticIps(const QList<QString> &static_ips) {
    m_static_ips = static_ips;
    m_static_ips_isSet = true;
}

bool OAIAdditionalLocation::is_static_ips_Set() const{
    return m_static_ips_isSet;
}

bool OAIAdditionalLocation::is_static_ips_Valid() const{
    return m_static_ips_isValid;
}

OAIVirtualNetworkConfiguration OAIAdditionalLocation::getVirtualNetworkConfiguration() const {
    return m_virtual_network_configuration;
}
void OAIAdditionalLocation::setVirtualNetworkConfiguration(const OAIVirtualNetworkConfiguration &virtual_network_configuration) {
    m_virtual_network_configuration = virtual_network_configuration;
    m_virtual_network_configuration_isSet = true;
}

bool OAIAdditionalLocation::is_virtual_network_configuration_Set() const{
    return m_virtual_network_configuration_isSet;
}

bool OAIAdditionalLocation::is_virtual_network_configuration_Valid() const{
    return m_virtual_network_configuration_isValid;
}

bool OAIAdditionalLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gateway_regional_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_ips.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_network_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdditionalLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_location_isValid && m_sku_isValid && true;
}

} // namespace OpenAPI
