/**
 * ApiManagementClient
 * Use these REST APIs to manage Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateConfiguration::OAICertificateConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateConfiguration::OAICertificateConfiguration() {
    this->initializeModel();
}

OAICertificateConfiguration::~OAICertificateConfiguration() {}

void OAICertificateConfiguration::initializeModel() {

    m_certificate_isSet = false;
    m_certificate_isValid = false;

    m_certificate_password_isSet = false;
    m_certificate_password_isValid = false;

    m_encoded_certificate_isSet = false;
    m_encoded_certificate_isValid = false;

    m_store_name_isSet = false;
    m_store_name_isValid = false;
}

void OAICertificateConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateConfiguration::fromJsonObject(QJsonObject json) {

    m_certificate_isValid = ::OpenAPI::fromJsonValue(m_certificate, json[QString("certificate")]);
    m_certificate_isSet = !json[QString("certificate")].isNull() && m_certificate_isValid;

    m_certificate_password_isValid = ::OpenAPI::fromJsonValue(m_certificate_password, json[QString("certificatePassword")]);
    m_certificate_password_isSet = !json[QString("certificatePassword")].isNull() && m_certificate_password_isValid;

    m_encoded_certificate_isValid = ::OpenAPI::fromJsonValue(m_encoded_certificate, json[QString("encodedCertificate")]);
    m_encoded_certificate_isSet = !json[QString("encodedCertificate")].isNull() && m_encoded_certificate_isValid;

    m_store_name_isValid = ::OpenAPI::fromJsonValue(m_store_name, json[QString("storeName")]);
    m_store_name_isSet = !json[QString("storeName")].isNull() && m_store_name_isValid;
}

QString OAICertificateConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate.isSet()) {
        obj.insert(QString("certificate"), ::OpenAPI::toJsonValue(m_certificate));
    }
    if (m_certificate_password_isSet) {
        obj.insert(QString("certificatePassword"), ::OpenAPI::toJsonValue(m_certificate_password));
    }
    if (m_encoded_certificate_isSet) {
        obj.insert(QString("encodedCertificate"), ::OpenAPI::toJsonValue(m_encoded_certificate));
    }
    if (m_store_name_isSet) {
        obj.insert(QString("storeName"), ::OpenAPI::toJsonValue(m_store_name));
    }
    return obj;
}

OAICertificateInformation OAICertificateConfiguration::getCertificate() const {
    return m_certificate;
}
void OAICertificateConfiguration::setCertificate(const OAICertificateInformation &certificate) {
    m_certificate = certificate;
    m_certificate_isSet = true;
}

bool OAICertificateConfiguration::is_certificate_Set() const{
    return m_certificate_isSet;
}

bool OAICertificateConfiguration::is_certificate_Valid() const{
    return m_certificate_isValid;
}

QString OAICertificateConfiguration::getCertificatePassword() const {
    return m_certificate_password;
}
void OAICertificateConfiguration::setCertificatePassword(const QString &certificate_password) {
    m_certificate_password = certificate_password;
    m_certificate_password_isSet = true;
}

bool OAICertificateConfiguration::is_certificate_password_Set() const{
    return m_certificate_password_isSet;
}

bool OAICertificateConfiguration::is_certificate_password_Valid() const{
    return m_certificate_password_isValid;
}

QString OAICertificateConfiguration::getEncodedCertificate() const {
    return m_encoded_certificate;
}
void OAICertificateConfiguration::setEncodedCertificate(const QString &encoded_certificate) {
    m_encoded_certificate = encoded_certificate;
    m_encoded_certificate_isSet = true;
}

bool OAICertificateConfiguration::is_encoded_certificate_Set() const{
    return m_encoded_certificate_isSet;
}

bool OAICertificateConfiguration::is_encoded_certificate_Valid() const{
    return m_encoded_certificate_isValid;
}

QString OAICertificateConfiguration::getStoreName() const {
    return m_store_name;
}
void OAICertificateConfiguration::setStoreName(const QString &store_name) {
    m_store_name = store_name;
    m_store_name_isSet = true;
}

bool OAICertificateConfiguration::is_store_name_Set() const{
    return m_store_name_isSet;
}

bool OAICertificateConfiguration::is_store_name_Valid() const{
    return m_store_name_isValid;
}

bool OAICertificateConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoded_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_store_name_isValid && true;
}

} // namespace OpenAPI
