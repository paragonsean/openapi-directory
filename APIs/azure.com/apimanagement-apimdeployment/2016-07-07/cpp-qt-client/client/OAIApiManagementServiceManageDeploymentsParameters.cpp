/**
 * ApiManagementClient
 * Use these REST APIs to manage Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2016-07-07
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiManagementServiceManageDeploymentsParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiManagementServiceManageDeploymentsParameters::OAIApiManagementServiceManageDeploymentsParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiManagementServiceManageDeploymentsParameters::OAIApiManagementServiceManageDeploymentsParameters() {
    this->initializeModel();
}

OAIApiManagementServiceManageDeploymentsParameters::~OAIApiManagementServiceManageDeploymentsParameters() {}

void OAIApiManagementServiceManageDeploymentsParameters::initializeModel() {

    m_additional_locations_isSet = false;
    m_additional_locations_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_sku_type_isSet = false;
    m_sku_type_isValid = false;

    m_sku_unit_count_isSet = false;
    m_sku_unit_count_isValid = false;

    m_vpn_configuration_isSet = false;
    m_vpn_configuration_isValid = false;

    m_vpn_type_isSet = false;
    m_vpn_type_isValid = false;
}

void OAIApiManagementServiceManageDeploymentsParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiManagementServiceManageDeploymentsParameters::fromJsonObject(QJsonObject json) {

    m_additional_locations_isValid = ::OpenAPI::fromJsonValue(m_additional_locations, json[QString("additionalLocations")]);
    m_additional_locations_isSet = !json[QString("additionalLocations")].isNull() && m_additional_locations_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_sku_type_isValid = ::OpenAPI::fromJsonValue(m_sku_type, json[QString("skuType")]);
    m_sku_type_isSet = !json[QString("skuType")].isNull() && m_sku_type_isValid;

    m_sku_unit_count_isValid = ::OpenAPI::fromJsonValue(m_sku_unit_count, json[QString("skuUnitCount")]);
    m_sku_unit_count_isSet = !json[QString("skuUnitCount")].isNull() && m_sku_unit_count_isValid;

    m_vpn_configuration_isValid = ::OpenAPI::fromJsonValue(m_vpn_configuration, json[QString("vpnConfiguration")]);
    m_vpn_configuration_isSet = !json[QString("vpnConfiguration")].isNull() && m_vpn_configuration_isValid;

    m_vpn_type_isValid = ::OpenAPI::fromJsonValue(m_vpn_type, json[QString("vpnType")]);
    m_vpn_type_isSet = !json[QString("vpnType")].isNull() && m_vpn_type_isValid;
}

QString OAIApiManagementServiceManageDeploymentsParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiManagementServiceManageDeploymentsParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_locations.size() > 0) {
        obj.insert(QString("additionalLocations"), ::OpenAPI::toJsonValue(m_additional_locations));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_sku_type_isSet) {
        obj.insert(QString("skuType"), ::OpenAPI::toJsonValue(m_sku_type));
    }
    if (m_sku_unit_count_isSet) {
        obj.insert(QString("skuUnitCount"), ::OpenAPI::toJsonValue(m_sku_unit_count));
    }
    if (m_vpn_configuration.isSet()) {
        obj.insert(QString("vpnConfiguration"), ::OpenAPI::toJsonValue(m_vpn_configuration));
    }
    if (m_vpn_type_isSet) {
        obj.insert(QString("vpnType"), ::OpenAPI::toJsonValue(m_vpn_type));
    }
    return obj;
}

QList<OAIAdditionalRegion> OAIApiManagementServiceManageDeploymentsParameters::getAdditionalLocations() const {
    return m_additional_locations;
}
void OAIApiManagementServiceManageDeploymentsParameters::setAdditionalLocations(const QList<OAIAdditionalRegion> &additional_locations) {
    m_additional_locations = additional_locations;
    m_additional_locations_isSet = true;
}

bool OAIApiManagementServiceManageDeploymentsParameters::is_additional_locations_Set() const{
    return m_additional_locations_isSet;
}

bool OAIApiManagementServiceManageDeploymentsParameters::is_additional_locations_Valid() const{
    return m_additional_locations_isValid;
}

QString OAIApiManagementServiceManageDeploymentsParameters::getLocation() const {
    return m_location;
}
void OAIApiManagementServiceManageDeploymentsParameters::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIApiManagementServiceManageDeploymentsParameters::is_location_Set() const{
    return m_location_isSet;
}

bool OAIApiManagementServiceManageDeploymentsParameters::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIApiManagementServiceManageDeploymentsParameters::getSkuType() const {
    return m_sku_type;
}
void OAIApiManagementServiceManageDeploymentsParameters::setSkuType(const QString &sku_type) {
    m_sku_type = sku_type;
    m_sku_type_isSet = true;
}

bool OAIApiManagementServiceManageDeploymentsParameters::is_sku_type_Set() const{
    return m_sku_type_isSet;
}

bool OAIApiManagementServiceManageDeploymentsParameters::is_sku_type_Valid() const{
    return m_sku_type_isValid;
}

qint32 OAIApiManagementServiceManageDeploymentsParameters::getSkuUnitCount() const {
    return m_sku_unit_count;
}
void OAIApiManagementServiceManageDeploymentsParameters::setSkuUnitCount(const qint32 &sku_unit_count) {
    m_sku_unit_count = sku_unit_count;
    m_sku_unit_count_isSet = true;
}

bool OAIApiManagementServiceManageDeploymentsParameters::is_sku_unit_count_Set() const{
    return m_sku_unit_count_isSet;
}

bool OAIApiManagementServiceManageDeploymentsParameters::is_sku_unit_count_Valid() const{
    return m_sku_unit_count_isValid;
}

OAIVirtualNetworkConfiguration OAIApiManagementServiceManageDeploymentsParameters::getVpnConfiguration() const {
    return m_vpn_configuration;
}
void OAIApiManagementServiceManageDeploymentsParameters::setVpnConfiguration(const OAIVirtualNetworkConfiguration &vpn_configuration) {
    m_vpn_configuration = vpn_configuration;
    m_vpn_configuration_isSet = true;
}

bool OAIApiManagementServiceManageDeploymentsParameters::is_vpn_configuration_Set() const{
    return m_vpn_configuration_isSet;
}

bool OAIApiManagementServiceManageDeploymentsParameters::is_vpn_configuration_Valid() const{
    return m_vpn_configuration_isValid;
}

QString OAIApiManagementServiceManageDeploymentsParameters::getVpnType() const {
    return m_vpn_type;
}
void OAIApiManagementServiceManageDeploymentsParameters::setVpnType(const QString &vpn_type) {
    m_vpn_type = vpn_type;
    m_vpn_type_isSet = true;
}

bool OAIApiManagementServiceManageDeploymentsParameters::is_vpn_type_Set() const{
    return m_vpn_type_isSet;
}

bool OAIApiManagementServiceManageDeploymentsParameters::is_vpn_type_Valid() const{
    return m_vpn_type_isValid;
}

bool OAIApiManagementServiceManageDeploymentsParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_unit_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiManagementServiceManageDeploymentsParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_location_isValid && m_sku_type_isValid && true;
}

} // namespace OpenAPI
