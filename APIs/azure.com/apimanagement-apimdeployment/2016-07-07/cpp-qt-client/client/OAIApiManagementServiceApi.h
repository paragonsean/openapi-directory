/**
 * ApiManagementClient
 * Use these REST APIs to manage Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2016-07-07
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApiManagementServiceApi_H
#define OAI_OAIApiManagementServiceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiManagementServiceBackupRestoreParameters.h"
#include "OAIApiManagementServiceBaseParameters.h"
#include "OAIApiManagementServiceCheckNameAvailabilityParameters.h"
#include "OAIApiManagementServiceGetSsoTokenResult.h"
#include "OAIApiManagementServiceListResult.h"
#include "OAIApiManagementServiceManageDeploymentsParameters.h"
#include "OAIApiManagementServiceNameAvailabilityResult.h"
#include "OAIApiManagementServiceResource.h"
#include "OAIApiManagementServiceUpdateHostnameParameters.h"
#include "OAIApiManagementServiceUploadCertificateParameters.h"
#include "OAICertificateInformation.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApiManagementServiceApi : public QObject {
    Q_OBJECT

public:
    OAIApiManagementServiceApi(const int timeOut = 0);
    ~OAIApiManagementServiceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIApiManagementServiceBackupRestoreParameters [required]
    */
    virtual void apiManagementServicesBackup(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const OAIApiManagementServiceBackupRestoreParameters &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIApiManagementServiceCheckNameAvailabilityParameters [required]
    */
    virtual void apiManagementServicesCheckNameAvailability(const QString &api_version, const QString &subscription_id, const OAIApiManagementServiceCheckNameAvailabilityParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIApiManagementServiceResource [required]
    */
    virtual void apiManagementServicesCreateOrUpdate(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const OAIApiManagementServiceResource &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiManagementServicesDelete(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiManagementServicesGet(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiManagementServicesGetSsoToken(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiManagementServicesList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiManagementServicesListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIApiManagementServiceManageDeploymentsParameters [required]
    */
    virtual void apiManagementServicesManageDeployments(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const OAIApiManagementServiceManageDeploymentsParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIApiManagementServiceBackupRestoreParameters [required]
    */
    virtual void apiManagementServicesRestore(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const OAIApiManagementServiceBackupRestoreParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIApiManagementServiceBaseParameters [required]
    */
    virtual void apiManagementServicesUpdate(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const OAIApiManagementServiceBaseParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIApiManagementServiceUpdateHostnameParameters [required]
    */
    virtual void apiManagementServicesUpdateHostname(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const OAIApiManagementServiceUpdateHostnameParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIApiManagementServiceUploadCertificateParameters [required]
    */
    virtual void apiManagementServicesUploadCertificate(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const OAIApiManagementServiceUploadCertificateParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiManagementServicesBackupCallback(OAIHttpRequestWorker *worker);
    void apiManagementServicesCheckNameAvailabilityCallback(OAIHttpRequestWorker *worker);
    void apiManagementServicesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void apiManagementServicesDeleteCallback(OAIHttpRequestWorker *worker);
    void apiManagementServicesGetCallback(OAIHttpRequestWorker *worker);
    void apiManagementServicesGetSsoTokenCallback(OAIHttpRequestWorker *worker);
    void apiManagementServicesListCallback(OAIHttpRequestWorker *worker);
    void apiManagementServicesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void apiManagementServicesManageDeploymentsCallback(OAIHttpRequestWorker *worker);
    void apiManagementServicesRestoreCallback(OAIHttpRequestWorker *worker);
    void apiManagementServicesUpdateCallback(OAIHttpRequestWorker *worker);
    void apiManagementServicesUpdateHostnameCallback(OAIHttpRequestWorker *worker);
    void apiManagementServicesUploadCertificateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiManagementServicesBackupSignal(OAIApiManagementServiceResource summary);
    void apiManagementServicesCheckNameAvailabilitySignal(OAIApiManagementServiceNameAvailabilityResult summary);
    void apiManagementServicesCreateOrUpdateSignal(OAIApiManagementServiceResource summary);
    void apiManagementServicesDeleteSignal();
    void apiManagementServicesGetSignal(OAIApiManagementServiceResource summary);
    void apiManagementServicesGetSsoTokenSignal(OAIApiManagementServiceGetSsoTokenResult summary);
    void apiManagementServicesListSignal(OAIApiManagementServiceListResult summary);
    void apiManagementServicesListByResourceGroupSignal(OAIApiManagementServiceListResult summary);
    void apiManagementServicesManageDeploymentsSignal(OAIApiManagementServiceResource summary);
    void apiManagementServicesRestoreSignal(OAIApiManagementServiceResource summary);
    void apiManagementServicesUpdateSignal(OAIApiManagementServiceResource summary);
    void apiManagementServicesUpdateHostnameSignal(OAIApiManagementServiceResource summary);
    void apiManagementServicesUploadCertificateSignal(OAICertificateInformation summary);


    void apiManagementServicesBackupSignalFull(OAIHttpRequestWorker *worker, OAIApiManagementServiceResource summary);
    void apiManagementServicesCheckNameAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAIApiManagementServiceNameAvailabilityResult summary);
    void apiManagementServicesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIApiManagementServiceResource summary);
    void apiManagementServicesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiManagementServicesGetSignalFull(OAIHttpRequestWorker *worker, OAIApiManagementServiceResource summary);
    void apiManagementServicesGetSsoTokenSignalFull(OAIHttpRequestWorker *worker, OAIApiManagementServiceGetSsoTokenResult summary);
    void apiManagementServicesListSignalFull(OAIHttpRequestWorker *worker, OAIApiManagementServiceListResult summary);
    void apiManagementServicesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIApiManagementServiceListResult summary);
    void apiManagementServicesManageDeploymentsSignalFull(OAIHttpRequestWorker *worker, OAIApiManagementServiceResource summary);
    void apiManagementServicesRestoreSignalFull(OAIHttpRequestWorker *worker, OAIApiManagementServiceResource summary);
    void apiManagementServicesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIApiManagementServiceResource summary);
    void apiManagementServicesUpdateHostnameSignalFull(OAIHttpRequestWorker *worker, OAIApiManagementServiceResource summary);
    void apiManagementServicesUploadCertificateSignalFull(OAIHttpRequestWorker *worker, OAICertificateInformation summary);

    Q_DECL_DEPRECATED_X("Use apiManagementServicesBackupSignalError() instead")
    void apiManagementServicesBackupSignalE(OAIApiManagementServiceResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServicesBackupSignalError(OAIApiManagementServiceResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServicesCheckNameAvailabilitySignalError() instead")
    void apiManagementServicesCheckNameAvailabilitySignalE(OAIApiManagementServiceNameAvailabilityResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServicesCheckNameAvailabilitySignalError(OAIApiManagementServiceNameAvailabilityResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServicesCreateOrUpdateSignalError() instead")
    void apiManagementServicesCreateOrUpdateSignalE(OAIApiManagementServiceResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServicesCreateOrUpdateSignalError(OAIApiManagementServiceResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServicesDeleteSignalError() instead")
    void apiManagementServicesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServicesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServicesGetSignalError() instead")
    void apiManagementServicesGetSignalE(OAIApiManagementServiceResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServicesGetSignalError(OAIApiManagementServiceResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServicesGetSsoTokenSignalError() instead")
    void apiManagementServicesGetSsoTokenSignalE(OAIApiManagementServiceGetSsoTokenResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServicesGetSsoTokenSignalError(OAIApiManagementServiceGetSsoTokenResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServicesListSignalError() instead")
    void apiManagementServicesListSignalE(OAIApiManagementServiceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServicesListSignalError(OAIApiManagementServiceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServicesListByResourceGroupSignalError() instead")
    void apiManagementServicesListByResourceGroupSignalE(OAIApiManagementServiceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServicesListByResourceGroupSignalError(OAIApiManagementServiceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServicesManageDeploymentsSignalError() instead")
    void apiManagementServicesManageDeploymentsSignalE(OAIApiManagementServiceResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServicesManageDeploymentsSignalError(OAIApiManagementServiceResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServicesRestoreSignalError() instead")
    void apiManagementServicesRestoreSignalE(OAIApiManagementServiceResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServicesRestoreSignalError(OAIApiManagementServiceResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServicesUpdateSignalError() instead")
    void apiManagementServicesUpdateSignalE(OAIApiManagementServiceResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServicesUpdateSignalError(OAIApiManagementServiceResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServicesUpdateHostnameSignalError() instead")
    void apiManagementServicesUpdateHostnameSignalE(OAIApiManagementServiceResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServicesUpdateHostnameSignalError(OAIApiManagementServiceResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServicesUploadCertificateSignalError() instead")
    void apiManagementServicesUploadCertificateSignalE(OAICertificateInformation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServicesUploadCertificateSignalError(OAICertificateInformation summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiManagementServicesBackupSignalErrorFull() instead")
    void apiManagementServicesBackupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServicesBackupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServicesCheckNameAvailabilitySignalErrorFull() instead")
    void apiManagementServicesCheckNameAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServicesCheckNameAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServicesCreateOrUpdateSignalErrorFull() instead")
    void apiManagementServicesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServicesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServicesDeleteSignalErrorFull() instead")
    void apiManagementServicesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServicesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServicesGetSignalErrorFull() instead")
    void apiManagementServicesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServicesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServicesGetSsoTokenSignalErrorFull() instead")
    void apiManagementServicesGetSsoTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServicesGetSsoTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServicesListSignalErrorFull() instead")
    void apiManagementServicesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServicesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServicesListByResourceGroupSignalErrorFull() instead")
    void apiManagementServicesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServicesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServicesManageDeploymentsSignalErrorFull() instead")
    void apiManagementServicesManageDeploymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServicesManageDeploymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServicesRestoreSignalErrorFull() instead")
    void apiManagementServicesRestoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServicesRestoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServicesUpdateSignalErrorFull() instead")
    void apiManagementServicesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServicesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServicesUpdateHostnameSignalErrorFull() instead")
    void apiManagementServicesUpdateHostnameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServicesUpdateHostnameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiManagementServicesUploadCertificateSignalErrorFull() instead")
    void apiManagementServicesUploadCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiManagementServicesUploadCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
