/**
 * ApiManagementClient
 * Use these REST APIs to manage Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2016-07-07
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualNetworkConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualNetworkConfiguration::OAIVirtualNetworkConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualNetworkConfiguration::OAIVirtualNetworkConfiguration() {
    this->initializeModel();
}

OAIVirtualNetworkConfiguration::~OAIVirtualNetworkConfiguration() {}

void OAIVirtualNetworkConfiguration::initializeModel() {

    m_location_isSet = false;
    m_location_isValid = false;

    m_subnet_resource_id_isSet = false;
    m_subnet_resource_id_isValid = false;

    m_subnetname_isSet = false;
    m_subnetname_isValid = false;

    m_vnetid_isSet = false;
    m_vnetid_isValid = false;
}

void OAIVirtualNetworkConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualNetworkConfiguration::fromJsonObject(QJsonObject json) {

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_subnet_resource_id_isValid = ::OpenAPI::fromJsonValue(m_subnet_resource_id, json[QString("subnetResourceId")]);
    m_subnet_resource_id_isSet = !json[QString("subnetResourceId")].isNull() && m_subnet_resource_id_isValid;

    m_subnetname_isValid = ::OpenAPI::fromJsonValue(m_subnetname, json[QString("subnetname")]);
    m_subnetname_isSet = !json[QString("subnetname")].isNull() && m_subnetname_isValid;

    m_vnetid_isValid = ::OpenAPI::fromJsonValue(m_vnetid, json[QString("vnetid")]);
    m_vnetid_isSet = !json[QString("vnetid")].isNull() && m_vnetid_isValid;
}

QString OAIVirtualNetworkConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualNetworkConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_subnet_resource_id_isSet) {
        obj.insert(QString("subnetResourceId"), ::OpenAPI::toJsonValue(m_subnet_resource_id));
    }
    if (m_subnetname_isSet) {
        obj.insert(QString("subnetname"), ::OpenAPI::toJsonValue(m_subnetname));
    }
    if (m_vnetid_isSet) {
        obj.insert(QString("vnetid"), ::OpenAPI::toJsonValue(m_vnetid));
    }
    return obj;
}

QString OAIVirtualNetworkConfiguration::getLocation() const {
    return m_location;
}
void OAIVirtualNetworkConfiguration::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIVirtualNetworkConfiguration::is_location_Set() const{
    return m_location_isSet;
}

bool OAIVirtualNetworkConfiguration::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIVirtualNetworkConfiguration::getSubnetResourceId() const {
    return m_subnet_resource_id;
}
void OAIVirtualNetworkConfiguration::setSubnetResourceId(const QString &subnet_resource_id) {
    m_subnet_resource_id = subnet_resource_id;
    m_subnet_resource_id_isSet = true;
}

bool OAIVirtualNetworkConfiguration::is_subnet_resource_id_Set() const{
    return m_subnet_resource_id_isSet;
}

bool OAIVirtualNetworkConfiguration::is_subnet_resource_id_Valid() const{
    return m_subnet_resource_id_isValid;
}

QString OAIVirtualNetworkConfiguration::getSubnetname() const {
    return m_subnetname;
}
void OAIVirtualNetworkConfiguration::setSubnetname(const QString &subnetname) {
    m_subnetname = subnetname;
    m_subnetname_isSet = true;
}

bool OAIVirtualNetworkConfiguration::is_subnetname_Set() const{
    return m_subnetname_isSet;
}

bool OAIVirtualNetworkConfiguration::is_subnetname_Valid() const{
    return m_subnetname_isValid;
}

QString OAIVirtualNetworkConfiguration::getVnetid() const {
    return m_vnetid;
}
void OAIVirtualNetworkConfiguration::setVnetid(const QString &vnetid) {
    m_vnetid = vnetid;
    m_vnetid_isSet = true;
}

bool OAIVirtualNetworkConfiguration::is_vnetid_Set() const{
    return m_vnetid_isSet;
}

bool OAIVirtualNetworkConfiguration::is_vnetid_Valid() const{
    return m_vnetid_isValid;
}

bool OAIVirtualNetworkConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnetname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vnetid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualNetworkConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
