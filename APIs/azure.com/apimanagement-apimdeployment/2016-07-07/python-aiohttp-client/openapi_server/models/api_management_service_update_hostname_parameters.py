# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hostname_configuration import HostnameConfiguration
from openapi_server import util


class ApiManagementServiceUpdateHostnameParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delete: List[str]=None, update: List[HostnameConfiguration]=None):
        """ApiManagementServiceUpdateHostnameParameters - a model defined in OpenAPI

        :param delete: The delete of this ApiManagementServiceUpdateHostnameParameters.
        :param update: The update of this ApiManagementServiceUpdateHostnameParameters.
        """
        self.openapi_types = {
            'delete': List[str],
            'update': List[HostnameConfiguration]
        }

        self.attribute_map = {
            'delete': 'delete',
            'update': 'update'
        }

        self._delete = delete
        self._update = update

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiManagementServiceUpdateHostnameParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiManagementServiceUpdateHostnameParameters of this ApiManagementServiceUpdateHostnameParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delete(self):
        """Gets the delete of this ApiManagementServiceUpdateHostnameParameters.

        Hostnames types to delete.

        :return: The delete of this ApiManagementServiceUpdateHostnameParameters.
        :rtype: List[str]
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this ApiManagementServiceUpdateHostnameParameters.

        Hostnames types to delete.

        :param delete: The delete of this ApiManagementServiceUpdateHostnameParameters.
        :type delete: List[str]
        """
        allowed_values = ["Proxy", "Portal", "Management", "Scm"]  # noqa: E501
        if not set(delete).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `delete` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(delete) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._delete = delete

    @property
    def update(self):
        """Gets the update of this ApiManagementServiceUpdateHostnameParameters.

        Hostnames to create or update.

        :return: The update of this ApiManagementServiceUpdateHostnameParameters.
        :rtype: List[HostnameConfiguration]
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this ApiManagementServiceUpdateHostnameParameters.

        Hostnames to create or update.

        :param update: The update of this ApiManagementServiceUpdateHostnameParameters.
        :type update: List[HostnameConfiguration]
        """

        self._update = update
