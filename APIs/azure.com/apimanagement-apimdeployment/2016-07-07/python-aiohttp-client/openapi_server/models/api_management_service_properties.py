# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.additional_region import AdditionalRegion
from openapi_server.models.hostname_configuration import HostnameConfiguration
from openapi_server.models.virtual_network_configuration import VirtualNetworkConfiguration
from openapi_server import util


class ApiManagementServiceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_locations: List[AdditionalRegion]=None, addresser_email: str=None, created_at_utc: datetime=None, custom_properties: Dict[str, str]=None, hostname_configurations: List[HostnameConfiguration]=None, management_api_url: str=None, portal_url: str=None, provisioning_state: str=None, publisher_email: str=None, publisher_name: str=None, runtime_url: str=None, scm_url: str=None, static_ips: List[str]=None, target_provisioning_state: str=None, vpn_type: str='None', vpnconfiguration: VirtualNetworkConfiguration=None):
        """ApiManagementServiceProperties - a model defined in OpenAPI

        :param additional_locations: The additional_locations of this ApiManagementServiceProperties.
        :param addresser_email: The addresser_email of this ApiManagementServiceProperties.
        :param created_at_utc: The created_at_utc of this ApiManagementServiceProperties.
        :param custom_properties: The custom_properties of this ApiManagementServiceProperties.
        :param hostname_configurations: The hostname_configurations of this ApiManagementServiceProperties.
        :param management_api_url: The management_api_url of this ApiManagementServiceProperties.
        :param portal_url: The portal_url of this ApiManagementServiceProperties.
        :param provisioning_state: The provisioning_state of this ApiManagementServiceProperties.
        :param publisher_email: The publisher_email of this ApiManagementServiceProperties.
        :param publisher_name: The publisher_name of this ApiManagementServiceProperties.
        :param runtime_url: The runtime_url of this ApiManagementServiceProperties.
        :param scm_url: The scm_url of this ApiManagementServiceProperties.
        :param static_ips: The static_ips of this ApiManagementServiceProperties.
        :param target_provisioning_state: The target_provisioning_state of this ApiManagementServiceProperties.
        :param vpn_type: The vpn_type of this ApiManagementServiceProperties.
        :param vpnconfiguration: The vpnconfiguration of this ApiManagementServiceProperties.
        """
        self.openapi_types = {
            'additional_locations': List[AdditionalRegion],
            'addresser_email': str,
            'created_at_utc': datetime,
            'custom_properties': Dict[str, str],
            'hostname_configurations': List[HostnameConfiguration],
            'management_api_url': str,
            'portal_url': str,
            'provisioning_state': str,
            'publisher_email': str,
            'publisher_name': str,
            'runtime_url': str,
            'scm_url': str,
            'static_ips': List[str],
            'target_provisioning_state': str,
            'vpn_type': str,
            'vpnconfiguration': VirtualNetworkConfiguration
        }

        self.attribute_map = {
            'additional_locations': 'additionalLocations',
            'addresser_email': 'addresserEmail',
            'created_at_utc': 'createdAtUtc',
            'custom_properties': 'customProperties',
            'hostname_configurations': 'hostnameConfigurations',
            'management_api_url': 'managementApiUrl',
            'portal_url': 'portalUrl',
            'provisioning_state': 'provisioningState',
            'publisher_email': 'publisherEmail',
            'publisher_name': 'publisherName',
            'runtime_url': 'runtimeUrl',
            'scm_url': 'scmUrl',
            'static_ips': 'staticIPs',
            'target_provisioning_state': 'targetProvisioningState',
            'vpn_type': 'vpnType',
            'vpnconfiguration': 'vpnconfiguration'
        }

        self._additional_locations = additional_locations
        self._addresser_email = addresser_email
        self._created_at_utc = created_at_utc
        self._custom_properties = custom_properties
        self._hostname_configurations = hostname_configurations
        self._management_api_url = management_api_url
        self._portal_url = portal_url
        self._provisioning_state = provisioning_state
        self._publisher_email = publisher_email
        self._publisher_name = publisher_name
        self._runtime_url = runtime_url
        self._scm_url = scm_url
        self._static_ips = static_ips
        self._target_provisioning_state = target_provisioning_state
        self._vpn_type = vpn_type
        self._vpnconfiguration = vpnconfiguration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiManagementServiceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiManagementServiceProperties of this ApiManagementServiceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_locations(self):
        """Gets the additional_locations of this ApiManagementServiceProperties.

        Additional datacenter locations of the API Management service.

        :return: The additional_locations of this ApiManagementServiceProperties.
        :rtype: List[AdditionalRegion]
        """
        return self._additional_locations

    @additional_locations.setter
    def additional_locations(self, additional_locations):
        """Sets the additional_locations of this ApiManagementServiceProperties.

        Additional datacenter locations of the API Management service.

        :param additional_locations: The additional_locations of this ApiManagementServiceProperties.
        :type additional_locations: List[AdditionalRegion]
        """

        self._additional_locations = additional_locations

    @property
    def addresser_email(self):
        """Gets the addresser_email of this ApiManagementServiceProperties.

        Addresser email.

        :return: The addresser_email of this ApiManagementServiceProperties.
        :rtype: str
        """
        return self._addresser_email

    @addresser_email.setter
    def addresser_email(self, addresser_email):
        """Sets the addresser_email of this ApiManagementServiceProperties.

        Addresser email.

        :param addresser_email: The addresser_email of this ApiManagementServiceProperties.
        :type addresser_email: str
        """

        self._addresser_email = addresser_email

    @property
    def created_at_utc(self):
        """Gets the created_at_utc of this ApiManagementServiceProperties.

        Creation UTC date of the API Management service.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.

        :return: The created_at_utc of this ApiManagementServiceProperties.
        :rtype: datetime
        """
        return self._created_at_utc

    @created_at_utc.setter
    def created_at_utc(self, created_at_utc):
        """Sets the created_at_utc of this ApiManagementServiceProperties.

        Creation UTC date of the API Management service.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.

        :param created_at_utc: The created_at_utc of this ApiManagementServiceProperties.
        :type created_at_utc: datetime
        """

        self._created_at_utc = created_at_utc

    @property
    def custom_properties(self):
        """Gets the custom_properties of this ApiManagementServiceProperties.

        Custom properties of the API Management service, like disabling TLS 1.0.

        :return: The custom_properties of this ApiManagementServiceProperties.
        :rtype: Dict[str, str]
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """Sets the custom_properties of this ApiManagementServiceProperties.

        Custom properties of the API Management service, like disabling TLS 1.0.

        :param custom_properties: The custom_properties of this ApiManagementServiceProperties.
        :type custom_properties: Dict[str, str]
        """

        self._custom_properties = custom_properties

    @property
    def hostname_configurations(self):
        """Gets the hostname_configurations of this ApiManagementServiceProperties.

        Custom hostname configuration of the API Management service.

        :return: The hostname_configurations of this ApiManagementServiceProperties.
        :rtype: List[HostnameConfiguration]
        """
        return self._hostname_configurations

    @hostname_configurations.setter
    def hostname_configurations(self, hostname_configurations):
        """Sets the hostname_configurations of this ApiManagementServiceProperties.

        Custom hostname configuration of the API Management service.

        :param hostname_configurations: The hostname_configurations of this ApiManagementServiceProperties.
        :type hostname_configurations: List[HostnameConfiguration]
        """

        self._hostname_configurations = hostname_configurations

    @property
    def management_api_url(self):
        """Gets the management_api_url of this ApiManagementServiceProperties.

        Management API endpoint URL of the API Management service.

        :return: The management_api_url of this ApiManagementServiceProperties.
        :rtype: str
        """
        return self._management_api_url

    @management_api_url.setter
    def management_api_url(self, management_api_url):
        """Sets the management_api_url of this ApiManagementServiceProperties.

        Management API endpoint URL of the API Management service.

        :param management_api_url: The management_api_url of this ApiManagementServiceProperties.
        :type management_api_url: str
        """

        self._management_api_url = management_api_url

    @property
    def portal_url(self):
        """Gets the portal_url of this ApiManagementServiceProperties.

        Publisher portal endpoint Url of the API Management service.

        :return: The portal_url of this ApiManagementServiceProperties.
        :rtype: str
        """
        return self._portal_url

    @portal_url.setter
    def portal_url(self, portal_url):
        """Sets the portal_url of this ApiManagementServiceProperties.

        Publisher portal endpoint Url of the API Management service.

        :param portal_url: The portal_url of this ApiManagementServiceProperties.
        :type portal_url: str
        """

        self._portal_url = portal_url

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ApiManagementServiceProperties.

        The current provisioning state of the API Management service which can be one of the following: Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.

        :return: The provisioning_state of this ApiManagementServiceProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ApiManagementServiceProperties.

        The current provisioning state of the API Management service which can be one of the following: Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.

        :param provisioning_state: The provisioning_state of this ApiManagementServiceProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def publisher_email(self):
        """Gets the publisher_email of this ApiManagementServiceProperties.

        Publisher email.

        :return: The publisher_email of this ApiManagementServiceProperties.
        :rtype: str
        """
        return self._publisher_email

    @publisher_email.setter
    def publisher_email(self, publisher_email):
        """Sets the publisher_email of this ApiManagementServiceProperties.

        Publisher email.

        :param publisher_email: The publisher_email of this ApiManagementServiceProperties.
        :type publisher_email: str
        """
        if publisher_email is None:
            raise ValueError("Invalid value for `publisher_email`, must not be `None`")
        if publisher_email is not None and len(publisher_email) > 100:
            raise ValueError("Invalid value for `publisher_email`, length must be less than or equal to `100`")

        self._publisher_email = publisher_email

    @property
    def publisher_name(self):
        """Gets the publisher_name of this ApiManagementServiceProperties.

        Publisher name.

        :return: The publisher_name of this ApiManagementServiceProperties.
        :rtype: str
        """
        return self._publisher_name

    @publisher_name.setter
    def publisher_name(self, publisher_name):
        """Sets the publisher_name of this ApiManagementServiceProperties.

        Publisher name.

        :param publisher_name: The publisher_name of this ApiManagementServiceProperties.
        :type publisher_name: str
        """
        if publisher_name is None:
            raise ValueError("Invalid value for `publisher_name`, must not be `None`")

        self._publisher_name = publisher_name

    @property
    def runtime_url(self):
        """Gets the runtime_url of this ApiManagementServiceProperties.

        Proxy endpoint URL of the API Management service.

        :return: The runtime_url of this ApiManagementServiceProperties.
        :rtype: str
        """
        return self._runtime_url

    @runtime_url.setter
    def runtime_url(self, runtime_url):
        """Sets the runtime_url of this ApiManagementServiceProperties.

        Proxy endpoint URL of the API Management service.

        :param runtime_url: The runtime_url of this ApiManagementServiceProperties.
        :type runtime_url: str
        """

        self._runtime_url = runtime_url

    @property
    def scm_url(self):
        """Gets the scm_url of this ApiManagementServiceProperties.

        SCM endpoint URL of the API Management service.

        :return: The scm_url of this ApiManagementServiceProperties.
        :rtype: str
        """
        return self._scm_url

    @scm_url.setter
    def scm_url(self, scm_url):
        """Sets the scm_url of this ApiManagementServiceProperties.

        SCM endpoint URL of the API Management service.

        :param scm_url: The scm_url of this ApiManagementServiceProperties.
        :type scm_url: str
        """

        self._scm_url = scm_url

    @property
    def static_ips(self):
        """Gets the static_ips of this ApiManagementServiceProperties.

        Static IP addresses of the API Management service virtual machines. Available only for Standard and Premium SKU.

        :return: The static_ips of this ApiManagementServiceProperties.
        :rtype: List[str]
        """
        return self._static_ips

    @static_ips.setter
    def static_ips(self, static_ips):
        """Sets the static_ips of this ApiManagementServiceProperties.

        Static IP addresses of the API Management service virtual machines. Available only for Standard and Premium SKU.

        :param static_ips: The static_ips of this ApiManagementServiceProperties.
        :type static_ips: List[str]
        """

        self._static_ips = static_ips

    @property
    def target_provisioning_state(self):
        """Gets the target_provisioning_state of this ApiManagementServiceProperties.

        The provisioning state of the API Management service, which is targeted by the long running operation started on the service.

        :return: The target_provisioning_state of this ApiManagementServiceProperties.
        :rtype: str
        """
        return self._target_provisioning_state

    @target_provisioning_state.setter
    def target_provisioning_state(self, target_provisioning_state):
        """Sets the target_provisioning_state of this ApiManagementServiceProperties.

        The provisioning state of the API Management service, which is targeted by the long running operation started on the service.

        :param target_provisioning_state: The target_provisioning_state of this ApiManagementServiceProperties.
        :type target_provisioning_state: str
        """

        self._target_provisioning_state = target_provisioning_state

    @property
    def vpn_type(self):
        """Gets the vpn_type of this ApiManagementServiceProperties.

        The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only.

        :return: The vpn_type of this ApiManagementServiceProperties.
        :rtype: str
        """
        return self._vpn_type

    @vpn_type.setter
    def vpn_type(self, vpn_type):
        """Sets the vpn_type of this ApiManagementServiceProperties.

        The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only.

        :param vpn_type: The vpn_type of this ApiManagementServiceProperties.
        :type vpn_type: str
        """
        allowed_values = ["None", "External", "Internal"]  # noqa: E501
        if vpn_type not in allowed_values:
            raise ValueError(
                "Invalid value for `vpn_type` ({0}), must be one of {1}"
                .format(vpn_type, allowed_values)
            )

        self._vpn_type = vpn_type

    @property
    def vpnconfiguration(self):
        """Gets the vpnconfiguration of this ApiManagementServiceProperties.


        :return: The vpnconfiguration of this ApiManagementServiceProperties.
        :rtype: VirtualNetworkConfiguration
        """
        return self._vpnconfiguration

    @vpnconfiguration.setter
    def vpnconfiguration(self, vpnconfiguration):
        """Sets the vpnconfiguration of this ApiManagementServiceProperties.


        :param vpnconfiguration: The vpnconfiguration of this ApiManagementServiceProperties.
        :type vpnconfiguration: VirtualNetworkConfiguration
        """

        self._vpnconfiguration = vpnconfiguration
