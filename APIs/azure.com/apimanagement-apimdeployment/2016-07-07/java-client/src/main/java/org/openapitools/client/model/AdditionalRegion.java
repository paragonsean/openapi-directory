/*
 * ApiManagementClient
 * Use these REST APIs to manage Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2016-07-07
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VirtualNetworkConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Description of an additional API Management resource location.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:45:31.522347-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdditionalRegion {
  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  /**
   * The SKU type in the location.
   */
  @JsonAdapter(SkuTypeEnum.Adapter.class)
  public enum SkuTypeEnum {
    DEVELOPER("Developer"),
    
    STANDARD("Standard"),
    
    PREMIUM("Premium");

    private String value;

    SkuTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SkuTypeEnum fromValue(String value) {
      for (SkuTypeEnum b : SkuTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SkuTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SkuTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SkuTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SkuTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SkuTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SKU_TYPE = "skuType";
  @SerializedName(SERIALIZED_NAME_SKU_TYPE)
  private SkuTypeEnum skuType;

  public static final String SERIALIZED_NAME_SKU_UNIT_COUNT = "skuUnitCount";
  @SerializedName(SERIALIZED_NAME_SKU_UNIT_COUNT)
  private Integer skuUnitCount = 1;

  public static final String SERIALIZED_NAME_STATIC_I_PS = "staticIPs";
  @SerializedName(SERIALIZED_NAME_STATIC_I_PS)
  private List<String> staticIPs = new ArrayList<>();

  public static final String SERIALIZED_NAME_VPNCONFIGURATION = "vpnconfiguration";
  @SerializedName(SERIALIZED_NAME_VPNCONFIGURATION)
  private VirtualNetworkConfiguration vpnconfiguration;

  public AdditionalRegion() {
  }

  public AdditionalRegion(
     List<String> staticIPs
  ) {
    this();
    this.staticIPs = staticIPs;
  }

  public AdditionalRegion location(String location) {
    this.location = location;
    return this;
  }

  /**
   * The location name of the additional region among Azure Data center regions.
   * @return location
   */
  @javax.annotation.Nonnull
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public AdditionalRegion skuType(SkuTypeEnum skuType) {
    this.skuType = skuType;
    return this;
  }

  /**
   * The SKU type in the location.
   * @return skuType
   */
  @javax.annotation.Nonnull
  public SkuTypeEnum getSkuType() {
    return skuType;
  }

  public void setSkuType(SkuTypeEnum skuType) {
    this.skuType = skuType;
  }


  public AdditionalRegion skuUnitCount(Integer skuUnitCount) {
    this.skuUnitCount = skuUnitCount;
    return this;
  }

  /**
   * The SKU Unit count at the location. The maximum SKU Unit count depends on the SkuType. Maximum allowed for Developer SKU is 1, for Standard SKU is 4, and for Premium SKU is 10, at a location.
   * maximum: 10
   * @return skuUnitCount
   */
  @javax.annotation.Nullable
  public Integer getSkuUnitCount() {
    return skuUnitCount;
  }

  public void setSkuUnitCount(Integer skuUnitCount) {
    this.skuUnitCount = skuUnitCount;
  }


  /**
   * Static IP addresses of the location&#39;s virtual machines.
   * @return staticIPs
   */
  @javax.annotation.Nullable
  public List<String> getStaticIPs() {
    return staticIPs;
  }



  public AdditionalRegion vpnconfiguration(VirtualNetworkConfiguration vpnconfiguration) {
    this.vpnconfiguration = vpnconfiguration;
    return this;
  }

  /**
   * Get vpnconfiguration
   * @return vpnconfiguration
   */
  @javax.annotation.Nullable
  public VirtualNetworkConfiguration getVpnconfiguration() {
    return vpnconfiguration;
  }

  public void setVpnconfiguration(VirtualNetworkConfiguration vpnconfiguration) {
    this.vpnconfiguration = vpnconfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdditionalRegion additionalRegion = (AdditionalRegion) o;
    return Objects.equals(this.location, additionalRegion.location) &&
        Objects.equals(this.skuType, additionalRegion.skuType) &&
        Objects.equals(this.skuUnitCount, additionalRegion.skuUnitCount) &&
        Objects.equals(this.staticIPs, additionalRegion.staticIPs) &&
        Objects.equals(this.vpnconfiguration, additionalRegion.vpnconfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(location, skuType, skuUnitCount, staticIPs, vpnconfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdditionalRegion {\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    skuType: ").append(toIndentedString(skuType)).append("\n");
    sb.append("    skuUnitCount: ").append(toIndentedString(skuUnitCount)).append("\n");
    sb.append("    staticIPs: ").append(toIndentedString(staticIPs)).append("\n");
    sb.append("    vpnconfiguration: ").append(toIndentedString(vpnconfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("location");
    openapiFields.add("skuType");
    openapiFields.add("skuUnitCount");
    openapiFields.add("staticIPs");
    openapiFields.add("vpnconfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("location");
    openapiRequiredFields.add("skuType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdditionalRegion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdditionalRegion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdditionalRegion is not found in the empty JSON string", AdditionalRegion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdditionalRegion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdditionalRegion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AdditionalRegion.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if (!jsonObj.get("skuType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skuType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skuType").toString()));
      }
      // validate the required field `skuType`
      SkuTypeEnum.validateJsonElement(jsonObj.get("skuType"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("staticIPs") != null && !jsonObj.get("staticIPs").isJsonNull() && !jsonObj.get("staticIPs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `staticIPs` to be an array in the JSON string but got `%s`", jsonObj.get("staticIPs").toString()));
      }
      // validate the optional field `vpnconfiguration`
      if (jsonObj.get("vpnconfiguration") != null && !jsonObj.get("vpnconfiguration").isJsonNull()) {
        VirtualNetworkConfiguration.validateJsonElement(jsonObj.get("vpnconfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdditionalRegion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdditionalRegion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdditionalRegion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdditionalRegion.class));

       return (TypeAdapter<T>) new TypeAdapter<AdditionalRegion>() {
           @Override
           public void write(JsonWriter out, AdditionalRegion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdditionalRegion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdditionalRegion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdditionalRegion
   * @throws IOException if the JSON string is invalid with respect to AdditionalRegion
   */
  public static AdditionalRegion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdditionalRegion.class);
  }

  /**
   * Convert an instance of AdditionalRegion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

