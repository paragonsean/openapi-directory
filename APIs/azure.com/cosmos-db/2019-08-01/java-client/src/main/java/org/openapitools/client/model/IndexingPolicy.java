/*
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CompositePath;
import org.openapitools.client.model.ExcludedPath;
import org.openapitools.client.model.IncludedPath;
import org.openapitools.client.model.SpatialSpec;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Cosmos DB indexing policy
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:36:00.823447-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IndexingPolicy {
  public static final String SERIALIZED_NAME_AUTOMATIC = "automatic";
  @SerializedName(SERIALIZED_NAME_AUTOMATIC)
  private Boolean automatic;

  public static final String SERIALIZED_NAME_COMPOSITE_INDEXES = "compositeIndexes";
  @SerializedName(SERIALIZED_NAME_COMPOSITE_INDEXES)
  private List<List<CompositePath>> compositeIndexes = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCLUDED_PATHS = "excludedPaths";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_PATHS)
  private List<ExcludedPath> excludedPaths = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUDED_PATHS = "includedPaths";
  @SerializedName(SERIALIZED_NAME_INCLUDED_PATHS)
  private List<IncludedPath> includedPaths = new ArrayList<>();

  /**
   * Indicates the indexing mode.
   */
  @JsonAdapter(IndexingModeEnum.Adapter.class)
  public enum IndexingModeEnum {
    CONSISTENT("Consistent"),
    
    LAZY("Lazy"),
    
    NONE("None");

    private String value;

    IndexingModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IndexingModeEnum fromValue(String value) {
      for (IndexingModeEnum b : IndexingModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IndexingModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IndexingModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IndexingModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IndexingModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IndexingModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INDEXING_MODE = "indexingMode";
  @SerializedName(SERIALIZED_NAME_INDEXING_MODE)
  private IndexingModeEnum indexingMode = IndexingModeEnum.CONSISTENT;

  public static final String SERIALIZED_NAME_SPATIAL_INDEXES = "spatialIndexes";
  @SerializedName(SERIALIZED_NAME_SPATIAL_INDEXES)
  private List<SpatialSpec> spatialIndexes = new ArrayList<>();

  public IndexingPolicy() {
  }

  public IndexingPolicy automatic(Boolean automatic) {
    this.automatic = automatic;
    return this;
  }

  /**
   * Indicates if the indexing policy is automatic
   * @return automatic
   */
  @javax.annotation.Nullable
  public Boolean getAutomatic() {
    return automatic;
  }

  public void setAutomatic(Boolean automatic) {
    this.automatic = automatic;
  }


  public IndexingPolicy compositeIndexes(List<List<CompositePath>> compositeIndexes) {
    this.compositeIndexes = compositeIndexes;
    return this;
  }

  public IndexingPolicy addCompositeIndexesItem(List<CompositePath> compositeIndexesItem) {
    if (this.compositeIndexes == null) {
      this.compositeIndexes = new ArrayList<>();
    }
    this.compositeIndexes.add(compositeIndexesItem);
    return this;
  }

  /**
   * List of composite path list
   * @return compositeIndexes
   */
  @javax.annotation.Nullable
  public List<List<CompositePath>> getCompositeIndexes() {
    return compositeIndexes;
  }

  public void setCompositeIndexes(List<List<CompositePath>> compositeIndexes) {
    this.compositeIndexes = compositeIndexes;
  }


  public IndexingPolicy excludedPaths(List<ExcludedPath> excludedPaths) {
    this.excludedPaths = excludedPaths;
    return this;
  }

  public IndexingPolicy addExcludedPathsItem(ExcludedPath excludedPathsItem) {
    if (this.excludedPaths == null) {
      this.excludedPaths = new ArrayList<>();
    }
    this.excludedPaths.add(excludedPathsItem);
    return this;
  }

  /**
   * List of paths to exclude from indexing
   * @return excludedPaths
   */
  @javax.annotation.Nullable
  public List<ExcludedPath> getExcludedPaths() {
    return excludedPaths;
  }

  public void setExcludedPaths(List<ExcludedPath> excludedPaths) {
    this.excludedPaths = excludedPaths;
  }


  public IndexingPolicy includedPaths(List<IncludedPath> includedPaths) {
    this.includedPaths = includedPaths;
    return this;
  }

  public IndexingPolicy addIncludedPathsItem(IncludedPath includedPathsItem) {
    if (this.includedPaths == null) {
      this.includedPaths = new ArrayList<>();
    }
    this.includedPaths.add(includedPathsItem);
    return this;
  }

  /**
   * List of paths to include in the indexing
   * @return includedPaths
   */
  @javax.annotation.Nullable
  public List<IncludedPath> getIncludedPaths() {
    return includedPaths;
  }

  public void setIncludedPaths(List<IncludedPath> includedPaths) {
    this.includedPaths = includedPaths;
  }


  public IndexingPolicy indexingMode(IndexingModeEnum indexingMode) {
    this.indexingMode = indexingMode;
    return this;
  }

  /**
   * Indicates the indexing mode.
   * @return indexingMode
   */
  @javax.annotation.Nullable
  public IndexingModeEnum getIndexingMode() {
    return indexingMode;
  }

  public void setIndexingMode(IndexingModeEnum indexingMode) {
    this.indexingMode = indexingMode;
  }


  public IndexingPolicy spatialIndexes(List<SpatialSpec> spatialIndexes) {
    this.spatialIndexes = spatialIndexes;
    return this;
  }

  public IndexingPolicy addSpatialIndexesItem(SpatialSpec spatialIndexesItem) {
    if (this.spatialIndexes == null) {
      this.spatialIndexes = new ArrayList<>();
    }
    this.spatialIndexes.add(spatialIndexesItem);
    return this;
  }

  /**
   * List of spatial specifics
   * @return spatialIndexes
   */
  @javax.annotation.Nullable
  public List<SpatialSpec> getSpatialIndexes() {
    return spatialIndexes;
  }

  public void setSpatialIndexes(List<SpatialSpec> spatialIndexes) {
    this.spatialIndexes = spatialIndexes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IndexingPolicy indexingPolicy = (IndexingPolicy) o;
    return Objects.equals(this.automatic, indexingPolicy.automatic) &&
        Objects.equals(this.compositeIndexes, indexingPolicy.compositeIndexes) &&
        Objects.equals(this.excludedPaths, indexingPolicy.excludedPaths) &&
        Objects.equals(this.includedPaths, indexingPolicy.includedPaths) &&
        Objects.equals(this.indexingMode, indexingPolicy.indexingMode) &&
        Objects.equals(this.spatialIndexes, indexingPolicy.spatialIndexes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(automatic, compositeIndexes, excludedPaths, includedPaths, indexingMode, spatialIndexes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IndexingPolicy {\n");
    sb.append("    automatic: ").append(toIndentedString(automatic)).append("\n");
    sb.append("    compositeIndexes: ").append(toIndentedString(compositeIndexes)).append("\n");
    sb.append("    excludedPaths: ").append(toIndentedString(excludedPaths)).append("\n");
    sb.append("    includedPaths: ").append(toIndentedString(includedPaths)).append("\n");
    sb.append("    indexingMode: ").append(toIndentedString(indexingMode)).append("\n");
    sb.append("    spatialIndexes: ").append(toIndentedString(spatialIndexes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("automatic");
    openapiFields.add("compositeIndexes");
    openapiFields.add("excludedPaths");
    openapiFields.add("includedPaths");
    openapiFields.add("indexingMode");
    openapiFields.add("spatialIndexes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IndexingPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IndexingPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IndexingPolicy is not found in the empty JSON string", IndexingPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IndexingPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IndexingPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("compositeIndexes") != null && !jsonObj.get("compositeIndexes").isJsonNull() && !jsonObj.get("compositeIndexes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `compositeIndexes` to be an array in the JSON string but got `%s`", jsonObj.get("compositeIndexes").toString()));
      }
      if (jsonObj.get("excludedPaths") != null && !jsonObj.get("excludedPaths").isJsonNull()) {
        JsonArray jsonArrayexcludedPaths = jsonObj.getAsJsonArray("excludedPaths");
        if (jsonArrayexcludedPaths != null) {
          // ensure the json data is an array
          if (!jsonObj.get("excludedPaths").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `excludedPaths` to be an array in the JSON string but got `%s`", jsonObj.get("excludedPaths").toString()));
          }

          // validate the optional field `excludedPaths` (array)
          for (int i = 0; i < jsonArrayexcludedPaths.size(); i++) {
            ExcludedPath.validateJsonElement(jsonArrayexcludedPaths.get(i));
          };
        }
      }
      if (jsonObj.get("includedPaths") != null && !jsonObj.get("includedPaths").isJsonNull()) {
        JsonArray jsonArrayincludedPaths = jsonObj.getAsJsonArray("includedPaths");
        if (jsonArrayincludedPaths != null) {
          // ensure the json data is an array
          if (!jsonObj.get("includedPaths").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `includedPaths` to be an array in the JSON string but got `%s`", jsonObj.get("includedPaths").toString()));
          }

          // validate the optional field `includedPaths` (array)
          for (int i = 0; i < jsonArrayincludedPaths.size(); i++) {
            IncludedPath.validateJsonElement(jsonArrayincludedPaths.get(i));
          };
        }
      }
      if ((jsonObj.get("indexingMode") != null && !jsonObj.get("indexingMode").isJsonNull()) && !jsonObj.get("indexingMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `indexingMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("indexingMode").toString()));
      }
      // validate the optional field `indexingMode`
      if (jsonObj.get("indexingMode") != null && !jsonObj.get("indexingMode").isJsonNull()) {
        IndexingModeEnum.validateJsonElement(jsonObj.get("indexingMode"));
      }
      if (jsonObj.get("spatialIndexes") != null && !jsonObj.get("spatialIndexes").isJsonNull()) {
        JsonArray jsonArrayspatialIndexes = jsonObj.getAsJsonArray("spatialIndexes");
        if (jsonArrayspatialIndexes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("spatialIndexes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `spatialIndexes` to be an array in the JSON string but got `%s`", jsonObj.get("spatialIndexes").toString()));
          }

          // validate the optional field `spatialIndexes` (array)
          for (int i = 0; i < jsonArrayspatialIndexes.size(); i++) {
            SpatialSpec.validateJsonElement(jsonArrayspatialIndexes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IndexingPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IndexingPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IndexingPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IndexingPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<IndexingPolicy>() {
           @Override
           public void write(JsonWriter out, IndexingPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IndexingPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IndexingPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IndexingPolicy
   * @throws IOException if the JSON string is invalid with respect to IndexingPolicy
   */
  public static IndexingPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IndexingPolicy.class);
  }

  /**
   * Convert an instance of IndexingPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

