/*
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The consistency policy for the Cosmos DB database account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:36:00.823447-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConsistencyPolicy {
  /**
   * The default consistency level and configuration settings of the Cosmos DB account.
   */
  @JsonAdapter(DefaultConsistencyLevelEnum.Adapter.class)
  public enum DefaultConsistencyLevelEnum {
    EVENTUAL("Eventual"),
    
    SESSION("Session"),
    
    BOUNDED_STALENESS("BoundedStaleness"),
    
    STRONG("Strong"),
    
    CONSISTENT_PREFIX("ConsistentPrefix");

    private String value;

    DefaultConsistencyLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefaultConsistencyLevelEnum fromValue(String value) {
      for (DefaultConsistencyLevelEnum b : DefaultConsistencyLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DefaultConsistencyLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultConsistencyLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultConsistencyLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DefaultConsistencyLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DefaultConsistencyLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEFAULT_CONSISTENCY_LEVEL = "defaultConsistencyLevel";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CONSISTENCY_LEVEL)
  private DefaultConsistencyLevelEnum defaultConsistencyLevel;

  public static final String SERIALIZED_NAME_MAX_INTERVAL_IN_SECONDS = "maxIntervalInSeconds";
  @SerializedName(SERIALIZED_NAME_MAX_INTERVAL_IN_SECONDS)
  private Integer maxIntervalInSeconds;

  public static final String SERIALIZED_NAME_MAX_STALENESS_PREFIX = "maxStalenessPrefix";
  @SerializedName(SERIALIZED_NAME_MAX_STALENESS_PREFIX)
  private Long maxStalenessPrefix;

  public ConsistencyPolicy() {
  }

  public ConsistencyPolicy defaultConsistencyLevel(DefaultConsistencyLevelEnum defaultConsistencyLevel) {
    this.defaultConsistencyLevel = defaultConsistencyLevel;
    return this;
  }

  /**
   * The default consistency level and configuration settings of the Cosmos DB account.
   * @return defaultConsistencyLevel
   */
  @javax.annotation.Nonnull
  public DefaultConsistencyLevelEnum getDefaultConsistencyLevel() {
    return defaultConsistencyLevel;
  }

  public void setDefaultConsistencyLevel(DefaultConsistencyLevelEnum defaultConsistencyLevel) {
    this.defaultConsistencyLevel = defaultConsistencyLevel;
  }


  public ConsistencyPolicy maxIntervalInSeconds(Integer maxIntervalInSeconds) {
    this.maxIntervalInSeconds = maxIntervalInSeconds;
    return this;
  }

  /**
   * When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to &#39;BoundedStaleness&#39;.
   * minimum: 5
   * maximum: 86400
   * @return maxIntervalInSeconds
   */
  @javax.annotation.Nullable
  public Integer getMaxIntervalInSeconds() {
    return maxIntervalInSeconds;
  }

  public void setMaxIntervalInSeconds(Integer maxIntervalInSeconds) {
    this.maxIntervalInSeconds = maxIntervalInSeconds;
  }


  public ConsistencyPolicy maxStalenessPrefix(Long maxStalenessPrefix) {
    this.maxStalenessPrefix = maxStalenessPrefix;
    return this;
  }

  /**
   * When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 â€“ 2,147,483,647. Required when defaultConsistencyPolicy is set to &#39;BoundedStaleness&#39;.
   * minimum: 1
   * maximum: 2147483647
   * @return maxStalenessPrefix
   */
  @javax.annotation.Nullable
  public Long getMaxStalenessPrefix() {
    return maxStalenessPrefix;
  }

  public void setMaxStalenessPrefix(Long maxStalenessPrefix) {
    this.maxStalenessPrefix = maxStalenessPrefix;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsistencyPolicy consistencyPolicy = (ConsistencyPolicy) o;
    return Objects.equals(this.defaultConsistencyLevel, consistencyPolicy.defaultConsistencyLevel) &&
        Objects.equals(this.maxIntervalInSeconds, consistencyPolicy.maxIntervalInSeconds) &&
        Objects.equals(this.maxStalenessPrefix, consistencyPolicy.maxStalenessPrefix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultConsistencyLevel, maxIntervalInSeconds, maxStalenessPrefix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsistencyPolicy {\n");
    sb.append("    defaultConsistencyLevel: ").append(toIndentedString(defaultConsistencyLevel)).append("\n");
    sb.append("    maxIntervalInSeconds: ").append(toIndentedString(maxIntervalInSeconds)).append("\n");
    sb.append("    maxStalenessPrefix: ").append(toIndentedString(maxStalenessPrefix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defaultConsistencyLevel");
    openapiFields.add("maxIntervalInSeconds");
    openapiFields.add("maxStalenessPrefix");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("defaultConsistencyLevel");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConsistencyPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConsistencyPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConsistencyPolicy is not found in the empty JSON string", ConsistencyPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConsistencyPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConsistencyPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConsistencyPolicy.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("defaultConsistencyLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultConsistencyLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultConsistencyLevel").toString()));
      }
      // validate the required field `defaultConsistencyLevel`
      DefaultConsistencyLevelEnum.validateJsonElement(jsonObj.get("defaultConsistencyLevel"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConsistencyPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConsistencyPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConsistencyPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConsistencyPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<ConsistencyPolicy>() {
           @Override
           public void write(JsonWriter out, ConsistencyPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConsistencyPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConsistencyPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConsistencyPolicy
   * @throws IOException if the JSON string is invalid with respect to ConsistencyPolicy
   */
  public static ConsistencyPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConsistencyPolicy.class);
  }

  /**
   * Convert an instance of ConsistencyPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

