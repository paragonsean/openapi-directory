/*
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Capability;
import org.openapitools.client.model.ConnectorOffer;
import org.openapitools.client.model.ConsistencyPolicy;
import org.openapitools.client.model.DatabaseAccountOfferType;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.VirtualNetworkRule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties to create and update Azure Cosmos DB database accounts.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:36:00.823447-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatabaseAccountCreateUpdateProperties {
  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private List<Capability> capabilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONNECTOR_OFFER = "connectorOffer";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_OFFER)
  private ConnectorOffer connectorOffer;

  public static final String SERIALIZED_NAME_CONSISTENCY_POLICY = "consistencyPolicy";
  @SerializedName(SERIALIZED_NAME_CONSISTENCY_POLICY)
  private ConsistencyPolicy consistencyPolicy;

  public static final String SERIALIZED_NAME_DATABASE_ACCOUNT_OFFER_TYPE = "databaseAccountOfferType";
  @SerializedName(SERIALIZED_NAME_DATABASE_ACCOUNT_OFFER_TYPE)
  private DatabaseAccountOfferType databaseAccountOfferType;

  public static final String SERIALIZED_NAME_DISABLE_KEY_BASED_METADATA_WRITE_ACCESS = "disableKeyBasedMetadataWriteAccess";
  @SerializedName(SERIALIZED_NAME_DISABLE_KEY_BASED_METADATA_WRITE_ACCESS)
  private Boolean disableKeyBasedMetadataWriteAccess;

  public static final String SERIALIZED_NAME_ENABLE_AUTOMATIC_FAILOVER = "enableAutomaticFailover";
  @SerializedName(SERIALIZED_NAME_ENABLE_AUTOMATIC_FAILOVER)
  private Boolean enableAutomaticFailover;

  public static final String SERIALIZED_NAME_ENABLE_CASSANDRA_CONNECTOR = "enableCassandraConnector";
  @SerializedName(SERIALIZED_NAME_ENABLE_CASSANDRA_CONNECTOR)
  private Boolean enableCassandraConnector;

  public static final String SERIALIZED_NAME_ENABLE_MULTIPLE_WRITE_LOCATIONS = "enableMultipleWriteLocations";
  @SerializedName(SERIALIZED_NAME_ENABLE_MULTIPLE_WRITE_LOCATIONS)
  private Boolean enableMultipleWriteLocations;

  public static final String SERIALIZED_NAME_IP_RANGE_FILTER = "ipRangeFilter";
  @SerializedName(SERIALIZED_NAME_IP_RANGE_FILTER)
  private String ipRangeFilter;

  public static final String SERIALIZED_NAME_IS_VIRTUAL_NETWORK_FILTER_ENABLED = "isVirtualNetworkFilterEnabled";
  @SerializedName(SERIALIZED_NAME_IS_VIRTUAL_NETWORK_FILTER_ENABLED)
  private Boolean isVirtualNetworkFilterEnabled;

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<Location> locations = new ArrayList<>();

  public static final String SERIALIZED_NAME_VIRTUAL_NETWORK_RULES = "virtualNetworkRules";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NETWORK_RULES)
  private List<VirtualNetworkRule> virtualNetworkRules = new ArrayList<>();

  public DatabaseAccountCreateUpdateProperties() {
  }

  public DatabaseAccountCreateUpdateProperties capabilities(List<Capability> capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  public DatabaseAccountCreateUpdateProperties addCapabilitiesItem(Capability capabilitiesItem) {
    if (this.capabilities == null) {
      this.capabilities = new ArrayList<>();
    }
    this.capabilities.add(capabilitiesItem);
    return this;
  }

  /**
   * List of Cosmos DB capabilities for the account
   * @return capabilities
   */
  @javax.annotation.Nullable
  public List<Capability> getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(List<Capability> capabilities) {
    this.capabilities = capabilities;
  }


  public DatabaseAccountCreateUpdateProperties connectorOffer(ConnectorOffer connectorOffer) {
    this.connectorOffer = connectorOffer;
    return this;
  }

  /**
   * Get connectorOffer
   * @return connectorOffer
   */
  @javax.annotation.Nullable
  public ConnectorOffer getConnectorOffer() {
    return connectorOffer;
  }

  public void setConnectorOffer(ConnectorOffer connectorOffer) {
    this.connectorOffer = connectorOffer;
  }


  public DatabaseAccountCreateUpdateProperties consistencyPolicy(ConsistencyPolicy consistencyPolicy) {
    this.consistencyPolicy = consistencyPolicy;
    return this;
  }

  /**
   * Get consistencyPolicy
   * @return consistencyPolicy
   */
  @javax.annotation.Nullable
  public ConsistencyPolicy getConsistencyPolicy() {
    return consistencyPolicy;
  }

  public void setConsistencyPolicy(ConsistencyPolicy consistencyPolicy) {
    this.consistencyPolicy = consistencyPolicy;
  }


  public DatabaseAccountCreateUpdateProperties databaseAccountOfferType(DatabaseAccountOfferType databaseAccountOfferType) {
    this.databaseAccountOfferType = databaseAccountOfferType;
    return this;
  }

  /**
   * Get databaseAccountOfferType
   * @return databaseAccountOfferType
   */
  @javax.annotation.Nonnull
  public DatabaseAccountOfferType getDatabaseAccountOfferType() {
    return databaseAccountOfferType;
  }

  public void setDatabaseAccountOfferType(DatabaseAccountOfferType databaseAccountOfferType) {
    this.databaseAccountOfferType = databaseAccountOfferType;
  }


  public DatabaseAccountCreateUpdateProperties disableKeyBasedMetadataWriteAccess(Boolean disableKeyBasedMetadataWriteAccess) {
    this.disableKeyBasedMetadataWriteAccess = disableKeyBasedMetadataWriteAccess;
    return this;
  }

  /**
   * Disable write operations on metadata resources (databases, containers, throughput) via account keys
   * @return disableKeyBasedMetadataWriteAccess
   */
  @javax.annotation.Nullable
  public Boolean getDisableKeyBasedMetadataWriteAccess() {
    return disableKeyBasedMetadataWriteAccess;
  }

  public void setDisableKeyBasedMetadataWriteAccess(Boolean disableKeyBasedMetadataWriteAccess) {
    this.disableKeyBasedMetadataWriteAccess = disableKeyBasedMetadataWriteAccess;
  }


  public DatabaseAccountCreateUpdateProperties enableAutomaticFailover(Boolean enableAutomaticFailover) {
    this.enableAutomaticFailover = enableAutomaticFailover;
    return this;
  }

  /**
   * Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.
   * @return enableAutomaticFailover
   */
  @javax.annotation.Nullable
  public Boolean getEnableAutomaticFailover() {
    return enableAutomaticFailover;
  }

  public void setEnableAutomaticFailover(Boolean enableAutomaticFailover) {
    this.enableAutomaticFailover = enableAutomaticFailover;
  }


  public DatabaseAccountCreateUpdateProperties enableCassandraConnector(Boolean enableCassandraConnector) {
    this.enableCassandraConnector = enableCassandraConnector;
    return this;
  }

  /**
   * Enables the cassandra connector on the Cosmos DB C* account
   * @return enableCassandraConnector
   */
  @javax.annotation.Nullable
  public Boolean getEnableCassandraConnector() {
    return enableCassandraConnector;
  }

  public void setEnableCassandraConnector(Boolean enableCassandraConnector) {
    this.enableCassandraConnector = enableCassandraConnector;
  }


  public DatabaseAccountCreateUpdateProperties enableMultipleWriteLocations(Boolean enableMultipleWriteLocations) {
    this.enableMultipleWriteLocations = enableMultipleWriteLocations;
    return this;
  }

  /**
   * Enables the account to write in multiple locations
   * @return enableMultipleWriteLocations
   */
  @javax.annotation.Nullable
  public Boolean getEnableMultipleWriteLocations() {
    return enableMultipleWriteLocations;
  }

  public void setEnableMultipleWriteLocations(Boolean enableMultipleWriteLocations) {
    this.enableMultipleWriteLocations = enableMultipleWriteLocations;
  }


  public DatabaseAccountCreateUpdateProperties ipRangeFilter(String ipRangeFilter) {
    this.ipRangeFilter = ipRangeFilter;
    return this;
  }

  /**
   * Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.
   * @return ipRangeFilter
   */
  @javax.annotation.Nullable
  public String getIpRangeFilter() {
    return ipRangeFilter;
  }

  public void setIpRangeFilter(String ipRangeFilter) {
    this.ipRangeFilter = ipRangeFilter;
  }


  public DatabaseAccountCreateUpdateProperties isVirtualNetworkFilterEnabled(Boolean isVirtualNetworkFilterEnabled) {
    this.isVirtualNetworkFilterEnabled = isVirtualNetworkFilterEnabled;
    return this;
  }

  /**
   * Flag to indicate whether to enable/disable Virtual Network ACL rules.
   * @return isVirtualNetworkFilterEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsVirtualNetworkFilterEnabled() {
    return isVirtualNetworkFilterEnabled;
  }

  public void setIsVirtualNetworkFilterEnabled(Boolean isVirtualNetworkFilterEnabled) {
    this.isVirtualNetworkFilterEnabled = isVirtualNetworkFilterEnabled;
  }


  public DatabaseAccountCreateUpdateProperties locations(List<Location> locations) {
    this.locations = locations;
    return this;
  }

  public DatabaseAccountCreateUpdateProperties addLocationsItem(Location locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

  /**
   * An array that contains the georeplication locations enabled for the Cosmos DB account.
   * @return locations
   */
  @javax.annotation.Nonnull
  public List<Location> getLocations() {
    return locations;
  }

  public void setLocations(List<Location> locations) {
    this.locations = locations;
  }


  public DatabaseAccountCreateUpdateProperties virtualNetworkRules(List<VirtualNetworkRule> virtualNetworkRules) {
    this.virtualNetworkRules = virtualNetworkRules;
    return this;
  }

  public DatabaseAccountCreateUpdateProperties addVirtualNetworkRulesItem(VirtualNetworkRule virtualNetworkRulesItem) {
    if (this.virtualNetworkRules == null) {
      this.virtualNetworkRules = new ArrayList<>();
    }
    this.virtualNetworkRules.add(virtualNetworkRulesItem);
    return this;
  }

  /**
   * List of Virtual Network ACL rules configured for the Cosmos DB account.
   * @return virtualNetworkRules
   */
  @javax.annotation.Nullable
  public List<VirtualNetworkRule> getVirtualNetworkRules() {
    return virtualNetworkRules;
  }

  public void setVirtualNetworkRules(List<VirtualNetworkRule> virtualNetworkRules) {
    this.virtualNetworkRules = virtualNetworkRules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseAccountCreateUpdateProperties databaseAccountCreateUpdateProperties = (DatabaseAccountCreateUpdateProperties) o;
    return Objects.equals(this.capabilities, databaseAccountCreateUpdateProperties.capabilities) &&
        Objects.equals(this.connectorOffer, databaseAccountCreateUpdateProperties.connectorOffer) &&
        Objects.equals(this.consistencyPolicy, databaseAccountCreateUpdateProperties.consistencyPolicy) &&
        Objects.equals(this.databaseAccountOfferType, databaseAccountCreateUpdateProperties.databaseAccountOfferType) &&
        Objects.equals(this.disableKeyBasedMetadataWriteAccess, databaseAccountCreateUpdateProperties.disableKeyBasedMetadataWriteAccess) &&
        Objects.equals(this.enableAutomaticFailover, databaseAccountCreateUpdateProperties.enableAutomaticFailover) &&
        Objects.equals(this.enableCassandraConnector, databaseAccountCreateUpdateProperties.enableCassandraConnector) &&
        Objects.equals(this.enableMultipleWriteLocations, databaseAccountCreateUpdateProperties.enableMultipleWriteLocations) &&
        Objects.equals(this.ipRangeFilter, databaseAccountCreateUpdateProperties.ipRangeFilter) &&
        Objects.equals(this.isVirtualNetworkFilterEnabled, databaseAccountCreateUpdateProperties.isVirtualNetworkFilterEnabled) &&
        Objects.equals(this.locations, databaseAccountCreateUpdateProperties.locations) &&
        Objects.equals(this.virtualNetworkRules, databaseAccountCreateUpdateProperties.virtualNetworkRules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capabilities, connectorOffer, consistencyPolicy, databaseAccountOfferType, disableKeyBasedMetadataWriteAccess, enableAutomaticFailover, enableCassandraConnector, enableMultipleWriteLocations, ipRangeFilter, isVirtualNetworkFilterEnabled, locations, virtualNetworkRules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseAccountCreateUpdateProperties {\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    connectorOffer: ").append(toIndentedString(connectorOffer)).append("\n");
    sb.append("    consistencyPolicy: ").append(toIndentedString(consistencyPolicy)).append("\n");
    sb.append("    databaseAccountOfferType: ").append(toIndentedString(databaseAccountOfferType)).append("\n");
    sb.append("    disableKeyBasedMetadataWriteAccess: ").append(toIndentedString(disableKeyBasedMetadataWriteAccess)).append("\n");
    sb.append("    enableAutomaticFailover: ").append(toIndentedString(enableAutomaticFailover)).append("\n");
    sb.append("    enableCassandraConnector: ").append(toIndentedString(enableCassandraConnector)).append("\n");
    sb.append("    enableMultipleWriteLocations: ").append(toIndentedString(enableMultipleWriteLocations)).append("\n");
    sb.append("    ipRangeFilter: ").append(toIndentedString(ipRangeFilter)).append("\n");
    sb.append("    isVirtualNetworkFilterEnabled: ").append(toIndentedString(isVirtualNetworkFilterEnabled)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    virtualNetworkRules: ").append(toIndentedString(virtualNetworkRules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capabilities");
    openapiFields.add("connectorOffer");
    openapiFields.add("consistencyPolicy");
    openapiFields.add("databaseAccountOfferType");
    openapiFields.add("disableKeyBasedMetadataWriteAccess");
    openapiFields.add("enableAutomaticFailover");
    openapiFields.add("enableCassandraConnector");
    openapiFields.add("enableMultipleWriteLocations");
    openapiFields.add("ipRangeFilter");
    openapiFields.add("isVirtualNetworkFilterEnabled");
    openapiFields.add("locations");
    openapiFields.add("virtualNetworkRules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("databaseAccountOfferType");
    openapiRequiredFields.add("locations");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatabaseAccountCreateUpdateProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatabaseAccountCreateUpdateProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatabaseAccountCreateUpdateProperties is not found in the empty JSON string", DatabaseAccountCreateUpdateProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatabaseAccountCreateUpdateProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatabaseAccountCreateUpdateProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DatabaseAccountCreateUpdateProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("capabilities") != null && !jsonObj.get("capabilities").isJsonNull()) {
        JsonArray jsonArraycapabilities = jsonObj.getAsJsonArray("capabilities");
        if (jsonArraycapabilities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("capabilities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `capabilities` to be an array in the JSON string but got `%s`", jsonObj.get("capabilities").toString()));
          }

          // validate the optional field `capabilities` (array)
          for (int i = 0; i < jsonArraycapabilities.size(); i++) {
            Capability.validateJsonElement(jsonArraycapabilities.get(i));
          };
        }
      }
      // validate the optional field `connectorOffer`
      if (jsonObj.get("connectorOffer") != null && !jsonObj.get("connectorOffer").isJsonNull()) {
        ConnectorOffer.validateJsonElement(jsonObj.get("connectorOffer"));
      }
      // validate the optional field `consistencyPolicy`
      if (jsonObj.get("consistencyPolicy") != null && !jsonObj.get("consistencyPolicy").isJsonNull()) {
        ConsistencyPolicy.validateJsonElement(jsonObj.get("consistencyPolicy"));
      }
      // validate the required field `databaseAccountOfferType`
      DatabaseAccountOfferType.validateJsonElement(jsonObj.get("databaseAccountOfferType"));
      if ((jsonObj.get("ipRangeFilter") != null && !jsonObj.get("ipRangeFilter").isJsonNull()) && !jsonObj.get("ipRangeFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipRangeFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipRangeFilter").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("locations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
      }

      JsonArray jsonArraylocations = jsonObj.getAsJsonArray("locations");
      // validate the required field `locations` (array)
      for (int i = 0; i < jsonArraylocations.size(); i++) {
        Location.validateJsonElement(jsonArraylocations.get(i));
      };
      if (jsonObj.get("virtualNetworkRules") != null && !jsonObj.get("virtualNetworkRules").isJsonNull()) {
        JsonArray jsonArrayvirtualNetworkRules = jsonObj.getAsJsonArray("virtualNetworkRules");
        if (jsonArrayvirtualNetworkRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("virtualNetworkRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `virtualNetworkRules` to be an array in the JSON string but got `%s`", jsonObj.get("virtualNetworkRules").toString()));
          }

          // validate the optional field `virtualNetworkRules` (array)
          for (int i = 0; i < jsonArrayvirtualNetworkRules.size(); i++) {
            VirtualNetworkRule.validateJsonElement(jsonArrayvirtualNetworkRules.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatabaseAccountCreateUpdateProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatabaseAccountCreateUpdateProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatabaseAccountCreateUpdateProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatabaseAccountCreateUpdateProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DatabaseAccountCreateUpdateProperties>() {
           @Override
           public void write(JsonWriter out, DatabaseAccountCreateUpdateProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatabaseAccountCreateUpdateProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatabaseAccountCreateUpdateProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatabaseAccountCreateUpdateProperties
   * @throws IOException if the JSON string is invalid with respect to DatabaseAccountCreateUpdateProperties
   */
  public static DatabaseAccountCreateUpdateProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatabaseAccountCreateUpdateProperties.class);
  }

  /**
   * Convert an instance of DatabaseAccountCreateUpdateProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

