/*
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CassandraKeyspaceCreateUpdateParameters;
import org.openapitools.client.model.CassandraKeyspaceGetResults;
import org.openapitools.client.model.CassandraKeyspaceListResult;
import org.openapitools.client.model.CassandraTableCreateUpdateParameters;
import org.openapitools.client.model.CassandraTableGetResults;
import org.openapitools.client.model.CassandraTableListResult;
import org.openapitools.client.model.DatabaseAccountCreateUpdateParameters;
import org.openapitools.client.model.DatabaseAccountGetResults;
import org.openapitools.client.model.DatabaseAccountListConnectionStringsResult;
import org.openapitools.client.model.DatabaseAccountListKeysResult;
import org.openapitools.client.model.DatabaseAccountListReadOnlyKeysResult;
import org.openapitools.client.model.DatabaseAccountRegenerateKeyParameters;
import org.openapitools.client.model.DatabaseAccountUpdateParameters;
import org.openapitools.client.model.DatabaseAccountsListResult;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.FailoverPolicies;
import org.openapitools.client.model.GremlinDatabaseCreateUpdateParameters;
import org.openapitools.client.model.GremlinDatabaseGetResults;
import org.openapitools.client.model.GremlinDatabaseListResult;
import org.openapitools.client.model.GremlinGraphCreateUpdateParameters;
import org.openapitools.client.model.GremlinGraphGetResults;
import org.openapitools.client.model.GremlinGraphListResult;
import org.openapitools.client.model.MetricDefinitionsListResult;
import org.openapitools.client.model.MetricListResult;
import org.openapitools.client.model.MongoDBCollectionCreateUpdateParameters;
import org.openapitools.client.model.MongoDBCollectionGetResults;
import org.openapitools.client.model.MongoDBCollectionListResult;
import org.openapitools.client.model.MongoDBDatabaseCreateUpdateParameters;
import org.openapitools.client.model.MongoDBDatabaseGetResults;
import org.openapitools.client.model.MongoDBDatabaseListResult;
import org.openapitools.client.model.PartitionMetricListResult;
import org.openapitools.client.model.PartitionUsagesResult;
import org.openapitools.client.model.PercentileMetricListResult;
import org.openapitools.client.model.RegionForOnlineOffline;
import org.openapitools.client.model.SqlContainerCreateUpdateParameters;
import org.openapitools.client.model.SqlContainerGetResults;
import org.openapitools.client.model.SqlContainerListResult;
import org.openapitools.client.model.SqlDatabaseCreateUpdateParameters;
import org.openapitools.client.model.SqlDatabaseGetResults;
import org.openapitools.client.model.SqlDatabaseListResult;
import org.openapitools.client.model.SqlStoredProcedureCreateUpdateParameters;
import org.openapitools.client.model.SqlStoredProcedureGetResults;
import org.openapitools.client.model.SqlStoredProcedureListResult;
import org.openapitools.client.model.SqlTriggerCreateUpdateParameters;
import org.openapitools.client.model.SqlTriggerGetResults;
import org.openapitools.client.model.SqlTriggerListResult;
import org.openapitools.client.model.SqlUserDefinedFunctionCreateUpdateParameters;
import org.openapitools.client.model.SqlUserDefinedFunctionGetResults;
import org.openapitools.client.model.SqlUserDefinedFunctionListResult;
import org.openapitools.client.model.TableCreateUpdateParameters;
import org.openapitools.client.model.TableGetResults;
import org.openapitools.client.model.TableListResult;
import org.openapitools.client.model.ThroughputSettingsGetResults;
import org.openapitools.client.model.ThroughputSettingsUpdateParameters;
import org.openapitools.client.model.UsagesResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Create or update an Azure Cosmos DB Cassandra keyspace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cassandraResourcesCreateUpdateCassandraKeyspaceTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String keyspaceName = null;
        String apiVersion = null;
        CassandraKeyspaceCreateUpdateParameters createUpdateCassandraKeyspaceParameters = null;
        CassandraKeyspaceGetResults response = api.cassandraResourcesCreateUpdateCassandraKeyspace(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, createUpdateCassandraKeyspaceParameters);
        // TODO: test validations
    }

    /**
     * Create or update an Azure Cosmos DB Cassandra Table
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cassandraResourcesCreateUpdateCassandraTableTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String keyspaceName = null;
        String tableName = null;
        String apiVersion = null;
        CassandraTableCreateUpdateParameters createUpdateCassandraTableParameters = null;
        CassandraTableGetResults response = api.cassandraResourcesCreateUpdateCassandraTable(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, createUpdateCassandraTableParameters);
        // TODO: test validations
    }

    /**
     * Deletes an existing Azure Cosmos DB Cassandra keyspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cassandraResourcesDeleteCassandraKeyspaceTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String keyspaceName = null;
        String apiVersion = null;
        api.cassandraResourcesDeleteCassandraKeyspace(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes an existing Azure Cosmos DB Cassandra table.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cassandraResourcesDeleteCassandraTableTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String keyspaceName = null;
        String tableName = null;
        String apiVersion = null;
        api.cassandraResourcesDeleteCassandraTable(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the Cassandra keyspaces under an existing Azure Cosmos DB database account with the provided name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cassandraResourcesGetCassandraKeyspaceTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String keyspaceName = null;
        String apiVersion = null;
        CassandraKeyspaceGetResults response = api.cassandraResourcesGetCassandraKeyspace(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the RUs per second of the Cassandra Keyspace under an existing Azure Cosmos DB database account with the provided name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cassandraResourcesGetCassandraKeyspaceThroughputTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String keyspaceName = null;
        String apiVersion = null;
        ThroughputSettingsGetResults response = api.cassandraResourcesGetCassandraKeyspaceThroughput(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the Cassandra table under an existing Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cassandraResourcesGetCassandraTableTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String keyspaceName = null;
        String tableName = null;
        String apiVersion = null;
        CassandraTableGetResults response = api.cassandraResourcesGetCassandraTable(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the RUs per second of the Cassandra table under an existing Azure Cosmos DB database account with the provided name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cassandraResourcesGetCassandraTableThroughputTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String keyspaceName = null;
        String tableName = null;
        String apiVersion = null;
        ThroughputSettingsGetResults response = api.cassandraResourcesGetCassandraTableThroughput(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cassandraResourcesListCassandraKeyspacesTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        CassandraKeyspaceListResult response = api.cassandraResourcesListCassandraKeyspaces(subscriptionId, resourceGroupName, accountName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists the Cassandra table under an existing Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cassandraResourcesListCassandraTablesTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String keyspaceName = null;
        String apiVersion = null;
        CassandraTableListResult response = api.cassandraResourcesListCassandraTables(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion);
        // TODO: test validations
    }

    /**
     * Update RUs per second of an Azure Cosmos DB Cassandra Keyspace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cassandraResourcesUpdateCassandraKeyspaceThroughputTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String keyspaceName = null;
        String apiVersion = null;
        ThroughputSettingsUpdateParameters updateThroughputParameters = null;
        ThroughputSettingsGetResults response = api.cassandraResourcesUpdateCassandraKeyspaceThroughput(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, updateThroughputParameters);
        // TODO: test validations
    }

    /**
     * Update RUs per second of an Azure Cosmos DB Cassandra table
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cassandraResourcesUpdateCassandraTableThroughputTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String keyspaceName = null;
        String tableName = null;
        String apiVersion = null;
        ThroughputSettingsUpdateParameters updateThroughputParameters = null;
        ThroughputSettingsGetResults response = api.cassandraResourcesUpdateCassandraTableThroughput(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, updateThroughputParameters);
        // TODO: test validations
    }

    /**
     * Retrieves metric definitions for the given collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectionListMetricDefinitionsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseRid = null;
        String collectionRid = null;
        String apiVersion = null;
        MetricDefinitionsListResult response = api.collectionListMetricDefinitions(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the metrics determined by the given filter for the given database account and collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectionListMetricsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseRid = null;
        String collectionRid = null;
        String apiVersion = null;
        String $filter = null;
        MetricListResult response = api.collectionListMetrics(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Retrieves the usages (most recent storage data) for the given collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectionListUsagesTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseRid = null;
        String collectionRid = null;
        String apiVersion = null;
        String $filter = null;
        UsagesResult response = api.collectionListUsages(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Retrieves the metrics determined by the given filter for the given collection, split by partition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectionPartitionListMetricsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseRid = null;
        String collectionRid = null;
        String apiVersion = null;
        String $filter = null;
        PartitionMetricListResult response = api.collectionPartitionListMetrics(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Retrieves the usages (most recent storage data) for the given collection, split by partition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectionPartitionListUsagesTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseRid = null;
        String collectionRid = null;
        String apiVersion = null;
        String $filter = null;
        PartitionUsagesResult response = api.collectionPartitionListUsages(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Retrieves the metrics determined by the given filter for the given collection and region, split by partition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectionPartitionRegionListMetricsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String region = null;
        String databaseRid = null;
        String collectionRid = null;
        String apiVersion = null;
        String $filter = null;
        PartitionMetricListResult response = api.collectionPartitionRegionListMetrics(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Retrieves the metrics determined by the given filter for the given database account, collection and region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectionRegionListMetricsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String region = null;
        String databaseRid = null;
        String collectionRid = null;
        String apiVersion = null;
        String $filter = null;
        MetricListResult response = api.collectionRegionListMetrics(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Retrieves the metrics determined by the given filter for the given database account and region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseAccountRegionListMetricsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String region = null;
        String apiVersion = null;
        String $filter = null;
        MetricListResult response = api.databaseAccountRegionListMetrics(subscriptionId, resourceGroupName, accountName, region, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only lowercase letters, numbers, and the &#39;-&#39; character, and must be between 3 and 50 characters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseAccountsCheckNameExistsTest() throws ApiException {
        String accountName = null;
        String apiVersion = null;
        api.databaseAccountsCheckNameExists(accountName, apiVersion);
        // TODO: test validations
    }

    /**
     * Creates or updates an Azure Cosmos DB database account. The \&quot;Update\&quot; method is preferred when performing updates on an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseAccountsCreateOrUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        DatabaseAccountCreateUpdateParameters createUpdateParameters = null;
        DatabaseAccountGetResults response = api.databaseAccountsCreateOrUpdate(subscriptionId, resourceGroupName, accountName, apiVersion, createUpdateParameters);
        // TODO: test validations
    }

    /**
     * Deletes an existing Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseAccountsDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        api.databaseAccountsDelete(subscriptionId, resourceGroupName, accountName, apiVersion);
        // TODO: test validations
    }

    /**
     * Changes the failover priority for the Azure Cosmos DB database account. A failover priority of 0 indicates a write region. The maximum value for a failover priority &#x3D; (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseAccountsFailoverPriorityChangeTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        FailoverPolicies failoverParameters = null;
        api.databaseAccountsFailoverPriorityChange(subscriptionId, resourceGroupName, accountName, apiVersion, failoverParameters);
        // TODO: test validations
    }

    /**
     * Retrieves the properties of an existing Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseAccountsGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        DatabaseAccountGetResults response = api.databaseAccountsGet(subscriptionId, resourceGroupName, accountName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists the read-only access keys for the specified Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseAccountsGetReadOnlyKeysTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        DatabaseAccountListReadOnlyKeysResult response = api.databaseAccountsGetReadOnlyKeys(subscriptionId, resourceGroupName, accountName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists all the Azure Cosmos DB database accounts available under the subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseAccountsListTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        DatabaseAccountsListResult response = api.databaseAccountsList(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all the Azure Cosmos DB database accounts available under the given resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseAccountsListByResourceGroupTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        DatabaseAccountsListResult response = api.databaseAccountsListByResourceGroup(resourceGroupName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists the connection strings for the specified Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseAccountsListConnectionStringsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        DatabaseAccountListConnectionStringsResult response = api.databaseAccountsListConnectionStrings(subscriptionId, resourceGroupName, accountName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists the access keys for the specified Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseAccountsListKeysTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        DatabaseAccountListKeysResult response = api.databaseAccountsListKeys(subscriptionId, resourceGroupName, accountName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves metric definitions for the given database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseAccountsListMetricDefinitionsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        MetricDefinitionsListResult response = api.databaseAccountsListMetricDefinitions(subscriptionId, resourceGroupName, accountName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the metrics determined by the given filter for the given database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseAccountsListMetricsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        String $filter = null;
        MetricListResult response = api.databaseAccountsListMetrics(subscriptionId, resourceGroupName, accountName, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Lists the read-only access keys for the specified Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseAccountsListReadOnlyKeysTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        DatabaseAccountListReadOnlyKeysResult response = api.databaseAccountsListReadOnlyKeys(subscriptionId, resourceGroupName, accountName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the usages (most recent data) for the given database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseAccountsListUsagesTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        String $filter = null;
        UsagesResult response = api.databaseAccountsListUsages(subscriptionId, resourceGroupName, accountName, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Offline the specified region for the specified Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseAccountsOfflineRegionTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        RegionForOnlineOffline regionParameterForOffline = null;
        api.databaseAccountsOfflineRegion(subscriptionId, resourceGroupName, accountName, apiVersion, regionParameterForOffline);
        // TODO: test validations
    }

    /**
     * Online the specified region for the specified Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseAccountsOnlineRegionTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        RegionForOnlineOffline regionParameterForOnline = null;
        api.databaseAccountsOnlineRegion(subscriptionId, resourceGroupName, accountName, apiVersion, regionParameterForOnline);
        // TODO: test validations
    }

    /**
     * Regenerates an access key for the specified Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseAccountsRegenerateKeyTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        DatabaseAccountRegenerateKeyParameters keyToRegenerate = null;
        api.databaseAccountsRegenerateKey(subscriptionId, resourceGroupName, accountName, apiVersion, keyToRegenerate);
        // TODO: test validations
    }

    /**
     * Updates the properties of an existing Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseAccountsUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        DatabaseAccountUpdateParameters updateParameters = null;
        DatabaseAccountGetResults response = api.databaseAccountsUpdate(subscriptionId, resourceGroupName, accountName, apiVersion, updateParameters);
        // TODO: test validations
    }

    /**
     * Retrieves metric definitions for the given database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseListMetricDefinitionsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseRid = null;
        String apiVersion = null;
        MetricDefinitionsListResult response = api.databaseListMetricDefinitions(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the metrics determined by the given filter for the given database account and database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseListMetricsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseRid = null;
        String apiVersion = null;
        String $filter = null;
        MetricListResult response = api.databaseListMetrics(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Retrieves the usages (most recent data) for the given database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseListUsagesTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseRid = null;
        String apiVersion = null;
        String $filter = null;
        UsagesResult response = api.databaseListUsages(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Create or update an Azure Cosmos DB Gremlin database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gremlinResourcesCreateUpdateGremlinDatabaseTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String apiVersion = null;
        GremlinDatabaseCreateUpdateParameters createUpdateGremlinDatabaseParameters = null;
        GremlinDatabaseGetResults response = api.gremlinResourcesCreateUpdateGremlinDatabase(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateGremlinDatabaseParameters);
        // TODO: test validations
    }

    /**
     * Create or update an Azure Cosmos DB Gremlin graph
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gremlinResourcesCreateUpdateGremlinGraphTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String graphName = null;
        String apiVersion = null;
        GremlinGraphCreateUpdateParameters createUpdateGremlinGraphParameters = null;
        GremlinGraphGetResults response = api.gremlinResourcesCreateUpdateGremlinGraph(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, createUpdateGremlinGraphParameters);
        // TODO: test validations
    }

    /**
     * Deletes an existing Azure Cosmos DB Gremlin database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gremlinResourcesDeleteGremlinDatabaseTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String apiVersion = null;
        api.gremlinResourcesDeleteGremlinDatabase(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes an existing Azure Cosmos DB Gremlin graph.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gremlinResourcesDeleteGremlinGraphTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String graphName = null;
        String apiVersion = null;
        api.gremlinResourcesDeleteGremlinGraph(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the Gremlin databases under an existing Azure Cosmos DB database account with the provided name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gremlinResourcesGetGremlinDatabaseTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String apiVersion = null;
        GremlinDatabaseGetResults response = api.gremlinResourcesGetGremlinDatabase(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the RUs per second of the Gremlin database under an existing Azure Cosmos DB database account with the provided name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gremlinResourcesGetGremlinDatabaseThroughputTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String apiVersion = null;
        ThroughputSettingsGetResults response = api.gremlinResourcesGetGremlinDatabaseThroughput(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the Gremlin graph under an existing Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gremlinResourcesGetGremlinGraphTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String graphName = null;
        String apiVersion = null;
        GremlinGraphGetResults response = api.gremlinResourcesGetGremlinGraph(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the Gremlin graph throughput under an existing Azure Cosmos DB database account with the provided name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gremlinResourcesGetGremlinGraphThroughputTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String graphName = null;
        String apiVersion = null;
        ThroughputSettingsGetResults response = api.gremlinResourcesGetGremlinGraphThroughput(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists the Gremlin databases under an existing Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gremlinResourcesListGremlinDatabasesTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        GremlinDatabaseListResult response = api.gremlinResourcesListGremlinDatabases(subscriptionId, resourceGroupName, accountName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists the Gremlin graph under an existing Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gremlinResourcesListGremlinGraphsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String apiVersion = null;
        GremlinGraphListResult response = api.gremlinResourcesListGremlinGraphs(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        // TODO: test validations
    }

    /**
     * Update RUs per second of an Azure Cosmos DB Gremlin database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gremlinResourcesUpdateGremlinDatabaseThroughputTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String apiVersion = null;
        ThroughputSettingsUpdateParameters updateThroughputParameters = null;
        ThroughputSettingsGetResults response = api.gremlinResourcesUpdateGremlinDatabaseThroughput(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters);
        // TODO: test validations
    }

    /**
     * Update RUs per second of an Azure Cosmos DB Gremlin graph
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gremlinResourcesUpdateGremlinGraphThroughputTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String graphName = null;
        String apiVersion = null;
        ThroughputSettingsUpdateParameters updateThroughputParameters = null;
        ThroughputSettingsGetResults response = api.gremlinResourcesUpdateGremlinGraphThroughput(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, updateThroughputParameters);
        // TODO: test validations
    }

    /**
     * Create or update an Azure Cosmos DB MongoDB Collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mongoDBResourcesCreateUpdateMongoDBCollectionTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String collectionName = null;
        String apiVersion = null;
        MongoDBCollectionCreateUpdateParameters createUpdateMongoDBCollectionParameters = null;
        MongoDBCollectionGetResults response = api.mongoDBResourcesCreateUpdateMongoDBCollection(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, createUpdateMongoDBCollectionParameters);
        // TODO: test validations
    }

    /**
     * Create or updates Azure Cosmos DB MongoDB database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mongoDBResourcesCreateUpdateMongoDBDatabaseTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String apiVersion = null;
        MongoDBDatabaseCreateUpdateParameters createUpdateMongoDBDatabaseParameters = null;
        MongoDBDatabaseGetResults response = api.mongoDBResourcesCreateUpdateMongoDBDatabase(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateMongoDBDatabaseParameters);
        // TODO: test validations
    }

    /**
     * Deletes an existing Azure Cosmos DB MongoDB Collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mongoDBResourcesDeleteMongoDBCollectionTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String collectionName = null;
        String apiVersion = null;
        api.mongoDBResourcesDeleteMongoDBCollection(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes an existing Azure Cosmos DB MongoDB database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mongoDBResourcesDeleteMongoDBDatabaseTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String apiVersion = null;
        api.mongoDBResourcesDeleteMongoDBDatabase(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the MongoDB collection under an existing Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mongoDBResourcesGetMongoDBCollectionTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String collectionName = null;
        String apiVersion = null;
        MongoDBCollectionGetResults response = api.mongoDBResourcesGetMongoDBCollection(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the RUs per second of the MongoDB collection under an existing Azure Cosmos DB database account with the provided name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mongoDBResourcesGetMongoDBCollectionThroughputTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String collectionName = null;
        String apiVersion = null;
        ThroughputSettingsGetResults response = api.mongoDBResourcesGetMongoDBCollectionThroughput(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the MongoDB databases under an existing Azure Cosmos DB database account with the provided name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mongoDBResourcesGetMongoDBDatabaseTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String apiVersion = null;
        MongoDBDatabaseGetResults response = api.mongoDBResourcesGetMongoDBDatabase(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the RUs per second of the MongoDB database under an existing Azure Cosmos DB database account with the provided name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mongoDBResourcesGetMongoDBDatabaseThroughputTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String apiVersion = null;
        ThroughputSettingsGetResults response = api.mongoDBResourcesGetMongoDBDatabaseThroughput(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists the MongoDB collection under an existing Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mongoDBResourcesListMongoDBCollectionsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String apiVersion = null;
        MongoDBCollectionListResult response = api.mongoDBResourcesListMongoDBCollections(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists the MongoDB databases under an existing Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mongoDBResourcesListMongoDBDatabasesTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        MongoDBDatabaseListResult response = api.mongoDBResourcesListMongoDBDatabases(subscriptionId, resourceGroupName, accountName, apiVersion);
        // TODO: test validations
    }

    /**
     * Update the RUs per second of an Azure Cosmos DB MongoDB collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mongoDBResourcesUpdateMongoDBCollectionThroughputTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String collectionName = null;
        String apiVersion = null;
        ThroughputSettingsUpdateParameters updateThroughputParameters = null;
        ThroughputSettingsGetResults response = api.mongoDBResourcesUpdateMongoDBCollectionThroughput(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, updateThroughputParameters);
        // TODO: test validations
    }

    /**
     * Update RUs per second of the an Azure Cosmos DB MongoDB database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mongoDBResourcesUpdateMongoDBDatabaseThroughputTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String apiVersion = null;
        ThroughputSettingsUpdateParameters updateThroughputParameters = null;
        ThroughputSettingsGetResults response = api.mongoDBResourcesUpdateMongoDBDatabaseThroughput(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters);
        // TODO: test validations
    }

    /**
     * Retrieves the metrics determined by the given filter for the given partition key range id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void partitionKeyRangeIdListMetricsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseRid = null;
        String collectionRid = null;
        String partitionKeyRangeId = null;
        String apiVersion = null;
        String $filter = null;
        PartitionMetricListResult response = api.partitionKeyRangeIdListMetrics(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, partitionKeyRangeId, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Retrieves the metrics determined by the given filter for the given partition key range id and region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void partitionKeyRangeIdRegionListMetricsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String region = null;
        String databaseRid = null;
        String collectionRid = null;
        String partitionKeyRangeId = null;
        String apiVersion = null;
        String $filter = null;
        PartitionMetricListResult response = api.partitionKeyRangeIdRegionListMetrics(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, partitionKeyRangeId, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Retrieves the metrics determined by the given filter for the given database account. This url is only for PBS and Replication Latency data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void percentileListMetricsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        String $filter = null;
        PercentileMetricListResult response = api.percentileListMetrics(subscriptionId, resourceGroupName, accountName, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Retrieves the metrics determined by the given filter for the given account, source and target region. This url is only for PBS and Replication Latency data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void percentileSourceTargetListMetricsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String sourceRegion = null;
        String targetRegion = null;
        String apiVersion = null;
        String $filter = null;
        PercentileMetricListResult response = api.percentileSourceTargetListMetrics(subscriptionId, resourceGroupName, accountName, sourceRegion, targetRegion, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Retrieves the metrics determined by the given filter for the given account target region. This url is only for PBS and Replication Latency data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void percentileTargetListMetricsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String targetRegion = null;
        String apiVersion = null;
        String $filter = null;
        PercentileMetricListResult response = api.percentileTargetListMetrics(subscriptionId, resourceGroupName, accountName, targetRegion, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Create or update an Azure Cosmos DB SQL container
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlResourcesCreateUpdateSqlContainerTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String containerName = null;
        String apiVersion = null;
        SqlContainerCreateUpdateParameters createUpdateSqlContainerParameters = null;
        SqlContainerGetResults response = api.sqlResourcesCreateUpdateSqlContainer(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, createUpdateSqlContainerParameters);
        // TODO: test validations
    }

    /**
     * Create or update an Azure Cosmos DB SQL database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlResourcesCreateUpdateSqlDatabaseTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String apiVersion = null;
        SqlDatabaseCreateUpdateParameters createUpdateSqlDatabaseParameters = null;
        SqlDatabaseGetResults response = api.sqlResourcesCreateUpdateSqlDatabase(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateSqlDatabaseParameters);
        // TODO: test validations
    }

    /**
     * Create or update an Azure Cosmos DB SQL storedProcedure
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlResourcesCreateUpdateSqlStoredProcedureTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String containerName = null;
        String storedProcedureName = null;
        String apiVersion = null;
        SqlStoredProcedureCreateUpdateParameters createUpdateSqlStoredProcedureParameters = null;
        SqlStoredProcedureGetResults response = api.sqlResourcesCreateUpdateSqlStoredProcedure(subscriptionId, resourceGroupName, accountName, databaseName, containerName, storedProcedureName, apiVersion, createUpdateSqlStoredProcedureParameters);
        // TODO: test validations
    }

    /**
     * Create or update an Azure Cosmos DB SQL trigger
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlResourcesCreateUpdateSqlTriggerTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String containerName = null;
        String triggerName = null;
        String apiVersion = null;
        SqlTriggerCreateUpdateParameters createUpdateSqlTriggerParameters = null;
        SqlTriggerGetResults response = api.sqlResourcesCreateUpdateSqlTrigger(subscriptionId, resourceGroupName, accountName, databaseName, containerName, triggerName, apiVersion, createUpdateSqlTriggerParameters);
        // TODO: test validations
    }

    /**
     * Create or update an Azure Cosmos DB SQL userDefinedFunction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlResourcesCreateUpdateSqlUserDefinedFunctionTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String containerName = null;
        String userDefinedFunctionName = null;
        String apiVersion = null;
        SqlUserDefinedFunctionCreateUpdateParameters createUpdateSqlUserDefinedFunctionParameters = null;
        SqlUserDefinedFunctionGetResults response = api.sqlResourcesCreateUpdateSqlUserDefinedFunction(subscriptionId, resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, apiVersion, createUpdateSqlUserDefinedFunctionParameters);
        // TODO: test validations
    }

    /**
     * Deletes an existing Azure Cosmos DB SQL container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlResourcesDeleteSqlContainerTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String containerName = null;
        String apiVersion = null;
        api.sqlResourcesDeleteSqlContainer(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes an existing Azure Cosmos DB SQL database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlResourcesDeleteSqlDatabaseTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String apiVersion = null;
        api.sqlResourcesDeleteSqlDatabase(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes an existing Azure Cosmos DB SQL storedProcedure.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlResourcesDeleteSqlStoredProcedureTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String containerName = null;
        String storedProcedureName = null;
        String apiVersion = null;
        api.sqlResourcesDeleteSqlStoredProcedure(subscriptionId, resourceGroupName, accountName, databaseName, containerName, storedProcedureName, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes an existing Azure Cosmos DB SQL trigger.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlResourcesDeleteSqlTriggerTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String containerName = null;
        String triggerName = null;
        String apiVersion = null;
        api.sqlResourcesDeleteSqlTrigger(subscriptionId, resourceGroupName, accountName, databaseName, containerName, triggerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes an existing Azure Cosmos DB SQL userDefinedFunction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlResourcesDeleteSqlUserDefinedFunctionTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String containerName = null;
        String userDefinedFunctionName = null;
        String apiVersion = null;
        api.sqlResourcesDeleteSqlUserDefinedFunction(subscriptionId, resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the SQL container under an existing Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlResourcesGetSqlContainerTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String containerName = null;
        String apiVersion = null;
        SqlContainerGetResults response = api.sqlResourcesGetSqlContainer(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the RUs per second of the SQL container under an existing Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlResourcesGetSqlContainerThroughputTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String containerName = null;
        String apiVersion = null;
        ThroughputSettingsGetResults response = api.sqlResourcesGetSqlContainerThroughput(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the SQL database under an existing Azure Cosmos DB database account with the provided name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlResourcesGetSqlDatabaseTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String apiVersion = null;
        SqlDatabaseGetResults response = api.sqlResourcesGetSqlDatabase(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the RUs per second of the SQL database under an existing Azure Cosmos DB database account with the provided name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlResourcesGetSqlDatabaseThroughputTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String apiVersion = null;
        ThroughputSettingsGetResults response = api.sqlResourcesGetSqlDatabaseThroughput(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the SQL storedProcedure under an existing Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlResourcesGetSqlStoredProcedureTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String containerName = null;
        String storedProcedureName = null;
        String apiVersion = null;
        SqlStoredProcedureGetResults response = api.sqlResourcesGetSqlStoredProcedure(subscriptionId, resourceGroupName, accountName, databaseName, containerName, storedProcedureName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the SQL trigger under an existing Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlResourcesGetSqlTriggerTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String containerName = null;
        String triggerName = null;
        String apiVersion = null;
        SqlTriggerGetResults response = api.sqlResourcesGetSqlTrigger(subscriptionId, resourceGroupName, accountName, databaseName, containerName, triggerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the SQL userDefinedFunction under an existing Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlResourcesGetSqlUserDefinedFunctionTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String containerName = null;
        String userDefinedFunctionName = null;
        String apiVersion = null;
        SqlUserDefinedFunctionGetResults response = api.sqlResourcesGetSqlUserDefinedFunction(subscriptionId, resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists the SQL container under an existing Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlResourcesListSqlContainersTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String apiVersion = null;
        SqlContainerListResult response = api.sqlResourcesListSqlContainers(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists the SQL databases under an existing Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlResourcesListSqlDatabasesTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        SqlDatabaseListResult response = api.sqlResourcesListSqlDatabases(subscriptionId, resourceGroupName, accountName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists the SQL storedProcedure under an existing Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlResourcesListSqlStoredProceduresTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String containerName = null;
        String apiVersion = null;
        SqlStoredProcedureListResult response = api.sqlResourcesListSqlStoredProcedures(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists the SQL trigger under an existing Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlResourcesListSqlTriggersTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String containerName = null;
        String apiVersion = null;
        SqlTriggerListResult response = api.sqlResourcesListSqlTriggers(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists the SQL userDefinedFunction under an existing Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlResourcesListSqlUserDefinedFunctionsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String containerName = null;
        String apiVersion = null;
        SqlUserDefinedFunctionListResult response = api.sqlResourcesListSqlUserDefinedFunctions(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Update RUs per second of an Azure Cosmos DB SQL container
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlResourcesUpdateSqlContainerThroughputTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String containerName = null;
        String apiVersion = null;
        ThroughputSettingsUpdateParameters updateThroughputParameters = null;
        ThroughputSettingsGetResults response = api.sqlResourcesUpdateSqlContainerThroughput(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, updateThroughputParameters);
        // TODO: test validations
    }

    /**
     * Update RUs per second of an Azure Cosmos DB SQL database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlResourcesUpdateSqlDatabaseThroughputTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String databaseName = null;
        String apiVersion = null;
        ThroughputSettingsUpdateParameters updateThroughputParameters = null;
        ThroughputSettingsGetResults response = api.sqlResourcesUpdateSqlDatabaseThroughput(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters);
        // TODO: test validations
    }

    /**
     * Create or update an Azure Cosmos DB Table
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tableResourcesCreateUpdateTableTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String tableName = null;
        String apiVersion = null;
        TableCreateUpdateParameters createUpdateTableParameters = null;
        TableGetResults response = api.tableResourcesCreateUpdateTable(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, createUpdateTableParameters);
        // TODO: test validations
    }

    /**
     * Deletes an existing Azure Cosmos DB Table.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tableResourcesDeleteTableTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String tableName = null;
        String apiVersion = null;
        api.tableResourcesDeleteTable(subscriptionId, resourceGroupName, accountName, tableName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the Tables under an existing Azure Cosmos DB database account with the provided name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tableResourcesGetTableTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String tableName = null;
        String apiVersion = null;
        TableGetResults response = api.tableResourcesGetTable(subscriptionId, resourceGroupName, accountName, tableName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the RUs per second of the Table under an existing Azure Cosmos DB database account with the provided name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tableResourcesGetTableThroughputTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String tableName = null;
        String apiVersion = null;
        ThroughputSettingsGetResults response = api.tableResourcesGetTableThroughput(subscriptionId, resourceGroupName, accountName, tableName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists the Tables under an existing Azure Cosmos DB database account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tableResourcesListTablesTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        TableListResult response = api.tableResourcesListTables(subscriptionId, resourceGroupName, accountName, apiVersion);
        // TODO: test validations
    }

    /**
     * Update RUs per second of an Azure Cosmos DB Table
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tableResourcesUpdateTableThroughputTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String tableName = null;
        String apiVersion = null;
        ThroughputSettingsUpdateParameters updateThroughputParameters = null;
        ThroughputSettingsGetResults response = api.tableResourcesUpdateTableThroughput(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, updateThroughputParameters);
        // TODO: test validations
    }

}
