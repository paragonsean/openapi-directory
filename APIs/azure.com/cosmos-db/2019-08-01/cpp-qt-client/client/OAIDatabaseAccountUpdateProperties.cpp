/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseAccountUpdateProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseAccountUpdateProperties::OAIDatabaseAccountUpdateProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseAccountUpdateProperties::OAIDatabaseAccountUpdateProperties() {
    this->initializeModel();
}

OAIDatabaseAccountUpdateProperties::~OAIDatabaseAccountUpdateProperties() {}

void OAIDatabaseAccountUpdateProperties::initializeModel() {

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_connector_offer_isSet = false;
    m_connector_offer_isValid = false;

    m_consistency_policy_isSet = false;
    m_consistency_policy_isValid = false;

    m_disable_key_based_metadata_write_access_isSet = false;
    m_disable_key_based_metadata_write_access_isValid = false;

    m_enable_automatic_failover_isSet = false;
    m_enable_automatic_failover_isValid = false;

    m_enable_cassandra_connector_isSet = false;
    m_enable_cassandra_connector_isValid = false;

    m_enable_multiple_write_locations_isSet = false;
    m_enable_multiple_write_locations_isValid = false;

    m_ip_range_filter_isSet = false;
    m_ip_range_filter_isValid = false;

    m_is_virtual_network_filter_enabled_isSet = false;
    m_is_virtual_network_filter_enabled_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_virtual_network_rules_isSet = false;
    m_virtual_network_rules_isValid = false;
}

void OAIDatabaseAccountUpdateProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseAccountUpdateProperties::fromJsonObject(QJsonObject json) {

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_connector_offer_isValid = ::OpenAPI::fromJsonValue(m_connector_offer, json[QString("connectorOffer")]);
    m_connector_offer_isSet = !json[QString("connectorOffer")].isNull() && m_connector_offer_isValid;

    m_consistency_policy_isValid = ::OpenAPI::fromJsonValue(m_consistency_policy, json[QString("consistencyPolicy")]);
    m_consistency_policy_isSet = !json[QString("consistencyPolicy")].isNull() && m_consistency_policy_isValid;

    m_disable_key_based_metadata_write_access_isValid = ::OpenAPI::fromJsonValue(m_disable_key_based_metadata_write_access, json[QString("disableKeyBasedMetadataWriteAccess")]);
    m_disable_key_based_metadata_write_access_isSet = !json[QString("disableKeyBasedMetadataWriteAccess")].isNull() && m_disable_key_based_metadata_write_access_isValid;

    m_enable_automatic_failover_isValid = ::OpenAPI::fromJsonValue(m_enable_automatic_failover, json[QString("enableAutomaticFailover")]);
    m_enable_automatic_failover_isSet = !json[QString("enableAutomaticFailover")].isNull() && m_enable_automatic_failover_isValid;

    m_enable_cassandra_connector_isValid = ::OpenAPI::fromJsonValue(m_enable_cassandra_connector, json[QString("enableCassandraConnector")]);
    m_enable_cassandra_connector_isSet = !json[QString("enableCassandraConnector")].isNull() && m_enable_cassandra_connector_isValid;

    m_enable_multiple_write_locations_isValid = ::OpenAPI::fromJsonValue(m_enable_multiple_write_locations, json[QString("enableMultipleWriteLocations")]);
    m_enable_multiple_write_locations_isSet = !json[QString("enableMultipleWriteLocations")].isNull() && m_enable_multiple_write_locations_isValid;

    m_ip_range_filter_isValid = ::OpenAPI::fromJsonValue(m_ip_range_filter, json[QString("ipRangeFilter")]);
    m_ip_range_filter_isSet = !json[QString("ipRangeFilter")].isNull() && m_ip_range_filter_isValid;

    m_is_virtual_network_filter_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_virtual_network_filter_enabled, json[QString("isVirtualNetworkFilterEnabled")]);
    m_is_virtual_network_filter_enabled_isSet = !json[QString("isVirtualNetworkFilterEnabled")].isNull() && m_is_virtual_network_filter_enabled_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_virtual_network_rules_isValid = ::OpenAPI::fromJsonValue(m_virtual_network_rules, json[QString("virtualNetworkRules")]);
    m_virtual_network_rules_isSet = !json[QString("virtualNetworkRules")].isNull() && m_virtual_network_rules_isValid;
}

QString OAIDatabaseAccountUpdateProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseAccountUpdateProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_capabilities.size() > 0) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_connector_offer.isSet()) {
        obj.insert(QString("connectorOffer"), ::OpenAPI::toJsonValue(m_connector_offer));
    }
    if (m_consistency_policy.isSet()) {
        obj.insert(QString("consistencyPolicy"), ::OpenAPI::toJsonValue(m_consistency_policy));
    }
    if (m_disable_key_based_metadata_write_access_isSet) {
        obj.insert(QString("disableKeyBasedMetadataWriteAccess"), ::OpenAPI::toJsonValue(m_disable_key_based_metadata_write_access));
    }
    if (m_enable_automatic_failover_isSet) {
        obj.insert(QString("enableAutomaticFailover"), ::OpenAPI::toJsonValue(m_enable_automatic_failover));
    }
    if (m_enable_cassandra_connector_isSet) {
        obj.insert(QString("enableCassandraConnector"), ::OpenAPI::toJsonValue(m_enable_cassandra_connector));
    }
    if (m_enable_multiple_write_locations_isSet) {
        obj.insert(QString("enableMultipleWriteLocations"), ::OpenAPI::toJsonValue(m_enable_multiple_write_locations));
    }
    if (m_ip_range_filter_isSet) {
        obj.insert(QString("ipRangeFilter"), ::OpenAPI::toJsonValue(m_ip_range_filter));
    }
    if (m_is_virtual_network_filter_enabled_isSet) {
        obj.insert(QString("isVirtualNetworkFilterEnabled"), ::OpenAPI::toJsonValue(m_is_virtual_network_filter_enabled));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_virtual_network_rules.size() > 0) {
        obj.insert(QString("virtualNetworkRules"), ::OpenAPI::toJsonValue(m_virtual_network_rules));
    }
    return obj;
}

QList<OAICapability> OAIDatabaseAccountUpdateProperties::getCapabilities() const {
    return m_capabilities;
}
void OAIDatabaseAccountUpdateProperties::setCapabilities(const QList<OAICapability> &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIDatabaseAccountUpdateProperties::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIDatabaseAccountUpdateProperties::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

OAIConnectorOffer OAIDatabaseAccountUpdateProperties::getConnectorOffer() const {
    return m_connector_offer;
}
void OAIDatabaseAccountUpdateProperties::setConnectorOffer(const OAIConnectorOffer &connector_offer) {
    m_connector_offer = connector_offer;
    m_connector_offer_isSet = true;
}

bool OAIDatabaseAccountUpdateProperties::is_connector_offer_Set() const{
    return m_connector_offer_isSet;
}

bool OAIDatabaseAccountUpdateProperties::is_connector_offer_Valid() const{
    return m_connector_offer_isValid;
}

OAIConsistencyPolicy OAIDatabaseAccountUpdateProperties::getConsistencyPolicy() const {
    return m_consistency_policy;
}
void OAIDatabaseAccountUpdateProperties::setConsistencyPolicy(const OAIConsistencyPolicy &consistency_policy) {
    m_consistency_policy = consistency_policy;
    m_consistency_policy_isSet = true;
}

bool OAIDatabaseAccountUpdateProperties::is_consistency_policy_Set() const{
    return m_consistency_policy_isSet;
}

bool OAIDatabaseAccountUpdateProperties::is_consistency_policy_Valid() const{
    return m_consistency_policy_isValid;
}

bool OAIDatabaseAccountUpdateProperties::isDisableKeyBasedMetadataWriteAccess() const {
    return m_disable_key_based_metadata_write_access;
}
void OAIDatabaseAccountUpdateProperties::setDisableKeyBasedMetadataWriteAccess(const bool &disable_key_based_metadata_write_access) {
    m_disable_key_based_metadata_write_access = disable_key_based_metadata_write_access;
    m_disable_key_based_metadata_write_access_isSet = true;
}

bool OAIDatabaseAccountUpdateProperties::is_disable_key_based_metadata_write_access_Set() const{
    return m_disable_key_based_metadata_write_access_isSet;
}

bool OAIDatabaseAccountUpdateProperties::is_disable_key_based_metadata_write_access_Valid() const{
    return m_disable_key_based_metadata_write_access_isValid;
}

bool OAIDatabaseAccountUpdateProperties::isEnableAutomaticFailover() const {
    return m_enable_automatic_failover;
}
void OAIDatabaseAccountUpdateProperties::setEnableAutomaticFailover(const bool &enable_automatic_failover) {
    m_enable_automatic_failover = enable_automatic_failover;
    m_enable_automatic_failover_isSet = true;
}

bool OAIDatabaseAccountUpdateProperties::is_enable_automatic_failover_Set() const{
    return m_enable_automatic_failover_isSet;
}

bool OAIDatabaseAccountUpdateProperties::is_enable_automatic_failover_Valid() const{
    return m_enable_automatic_failover_isValid;
}

bool OAIDatabaseAccountUpdateProperties::isEnableCassandraConnector() const {
    return m_enable_cassandra_connector;
}
void OAIDatabaseAccountUpdateProperties::setEnableCassandraConnector(const bool &enable_cassandra_connector) {
    m_enable_cassandra_connector = enable_cassandra_connector;
    m_enable_cassandra_connector_isSet = true;
}

bool OAIDatabaseAccountUpdateProperties::is_enable_cassandra_connector_Set() const{
    return m_enable_cassandra_connector_isSet;
}

bool OAIDatabaseAccountUpdateProperties::is_enable_cassandra_connector_Valid() const{
    return m_enable_cassandra_connector_isValid;
}

bool OAIDatabaseAccountUpdateProperties::isEnableMultipleWriteLocations() const {
    return m_enable_multiple_write_locations;
}
void OAIDatabaseAccountUpdateProperties::setEnableMultipleWriteLocations(const bool &enable_multiple_write_locations) {
    m_enable_multiple_write_locations = enable_multiple_write_locations;
    m_enable_multiple_write_locations_isSet = true;
}

bool OAIDatabaseAccountUpdateProperties::is_enable_multiple_write_locations_Set() const{
    return m_enable_multiple_write_locations_isSet;
}

bool OAIDatabaseAccountUpdateProperties::is_enable_multiple_write_locations_Valid() const{
    return m_enable_multiple_write_locations_isValid;
}

QString OAIDatabaseAccountUpdateProperties::getIpRangeFilter() const {
    return m_ip_range_filter;
}
void OAIDatabaseAccountUpdateProperties::setIpRangeFilter(const QString &ip_range_filter) {
    m_ip_range_filter = ip_range_filter;
    m_ip_range_filter_isSet = true;
}

bool OAIDatabaseAccountUpdateProperties::is_ip_range_filter_Set() const{
    return m_ip_range_filter_isSet;
}

bool OAIDatabaseAccountUpdateProperties::is_ip_range_filter_Valid() const{
    return m_ip_range_filter_isValid;
}

bool OAIDatabaseAccountUpdateProperties::isIsVirtualNetworkFilterEnabled() const {
    return m_is_virtual_network_filter_enabled;
}
void OAIDatabaseAccountUpdateProperties::setIsVirtualNetworkFilterEnabled(const bool &is_virtual_network_filter_enabled) {
    m_is_virtual_network_filter_enabled = is_virtual_network_filter_enabled;
    m_is_virtual_network_filter_enabled_isSet = true;
}

bool OAIDatabaseAccountUpdateProperties::is_is_virtual_network_filter_enabled_Set() const{
    return m_is_virtual_network_filter_enabled_isSet;
}

bool OAIDatabaseAccountUpdateProperties::is_is_virtual_network_filter_enabled_Valid() const{
    return m_is_virtual_network_filter_enabled_isValid;
}

QList<OAILocation> OAIDatabaseAccountUpdateProperties::getLocations() const {
    return m_locations;
}
void OAIDatabaseAccountUpdateProperties::setLocations(const QList<OAILocation> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIDatabaseAccountUpdateProperties::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIDatabaseAccountUpdateProperties::is_locations_Valid() const{
    return m_locations_isValid;
}

QList<OAIVirtualNetworkRule> OAIDatabaseAccountUpdateProperties::getVirtualNetworkRules() const {
    return m_virtual_network_rules;
}
void OAIDatabaseAccountUpdateProperties::setVirtualNetworkRules(const QList<OAIVirtualNetworkRule> &virtual_network_rules) {
    m_virtual_network_rules = virtual_network_rules;
    m_virtual_network_rules_isSet = true;
}

bool OAIDatabaseAccountUpdateProperties::is_virtual_network_rules_Set() const{
    return m_virtual_network_rules_isSet;
}

bool OAIDatabaseAccountUpdateProperties::is_virtual_network_rules_Valid() const{
    return m_virtual_network_rules_isValid;
}

bool OAIDatabaseAccountUpdateProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_offer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_consistency_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_key_based_metadata_write_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_automatic_failover_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_cassandra_connector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_multiple_write_locations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_range_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_virtual_network_filter_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_network_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseAccountUpdateProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
