/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICassandraKeyspaceCreateUpdateParameters.h"
#include "OAICassandraKeyspaceGetResults.h"
#include "OAICassandraKeyspaceListResult.h"
#include "OAICassandraTableCreateUpdateParameters.h"
#include "OAICassandraTableGetResults.h"
#include "OAICassandraTableListResult.h"
#include "OAIDatabaseAccountCreateUpdateParameters.h"
#include "OAIDatabaseAccountGetResults.h"
#include "OAIDatabaseAccountListConnectionStringsResult.h"
#include "OAIDatabaseAccountListKeysResult.h"
#include "OAIDatabaseAccountListReadOnlyKeysResult.h"
#include "OAIDatabaseAccountRegenerateKeyParameters.h"
#include "OAIDatabaseAccountUpdateParameters.h"
#include "OAIDatabaseAccountsListResult.h"
#include "OAIErrorResponse.h"
#include "OAIFailoverPolicies.h"
#include "OAIGremlinDatabaseCreateUpdateParameters.h"
#include "OAIGremlinDatabaseGetResults.h"
#include "OAIGremlinDatabaseListResult.h"
#include "OAIGremlinGraphCreateUpdateParameters.h"
#include "OAIGremlinGraphGetResults.h"
#include "OAIGremlinGraphListResult.h"
#include "OAIMetricDefinitionsListResult.h"
#include "OAIMetricListResult.h"
#include "OAIMongoDBCollectionCreateUpdateParameters.h"
#include "OAIMongoDBCollectionGetResults.h"
#include "OAIMongoDBCollectionListResult.h"
#include "OAIMongoDBDatabaseCreateUpdateParameters.h"
#include "OAIMongoDBDatabaseGetResults.h"
#include "OAIMongoDBDatabaseListResult.h"
#include "OAIPartitionMetricListResult.h"
#include "OAIPartitionUsagesResult.h"
#include "OAIPercentileMetricListResult.h"
#include "OAIRegionForOnlineOffline.h"
#include "OAISqlContainerCreateUpdateParameters.h"
#include "OAISqlContainerGetResults.h"
#include "OAISqlContainerListResult.h"
#include "OAISqlDatabaseCreateUpdateParameters.h"
#include "OAISqlDatabaseGetResults.h"
#include "OAISqlDatabaseListResult.h"
#include "OAISqlStoredProcedureCreateUpdateParameters.h"
#include "OAISqlStoredProcedureGetResults.h"
#include "OAISqlStoredProcedureListResult.h"
#include "OAISqlTriggerCreateUpdateParameters.h"
#include "OAISqlTriggerGetResults.h"
#include "OAISqlTriggerListResult.h"
#include "OAISqlUserDefinedFunctionCreateUpdateParameters.h"
#include "OAISqlUserDefinedFunctionGetResults.h"
#include "OAISqlUserDefinedFunctionListResult.h"
#include "OAITableCreateUpdateParameters.h"
#include "OAITableGetResults.h"
#include "OAITableListResult.h"
#include "OAIThroughputSettingsGetResults.h"
#include "OAIThroughputSettingsUpdateParameters.h"
#include "OAIUsagesResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  keyspace_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_update_cassandra_keyspace_parameters OAICassandraKeyspaceCreateUpdateParameters [required]
    */
    virtual void cassandraResourcesCreateUpdateCassandraKeyspace(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &keyspace_name, const QString &api_version, const OAICassandraKeyspaceCreateUpdateParameters &create_update_cassandra_keyspace_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  keyspace_name QString [required]
    * @param[in]  table_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_update_cassandra_table_parameters OAICassandraTableCreateUpdateParameters [required]
    */
    virtual void cassandraResourcesCreateUpdateCassandraTable(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &keyspace_name, const QString &table_name, const QString &api_version, const OAICassandraTableCreateUpdateParameters &create_update_cassandra_table_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  keyspace_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void cassandraResourcesDeleteCassandraKeyspace(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &keyspace_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  keyspace_name QString [required]
    * @param[in]  table_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void cassandraResourcesDeleteCassandraTable(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &keyspace_name, const QString &table_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  keyspace_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void cassandraResourcesGetCassandraKeyspace(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &keyspace_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  keyspace_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void cassandraResourcesGetCassandraKeyspaceThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &keyspace_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  keyspace_name QString [required]
    * @param[in]  table_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void cassandraResourcesGetCassandraTable(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &keyspace_name, const QString &table_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  keyspace_name QString [required]
    * @param[in]  table_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void cassandraResourcesGetCassandraTableThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &keyspace_name, const QString &table_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void cassandraResourcesListCassandraKeyspaces(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  keyspace_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void cassandraResourcesListCassandraTables(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &keyspace_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  keyspace_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  update_throughput_parameters OAIThroughputSettingsUpdateParameters [required]
    */
    virtual void cassandraResourcesUpdateCassandraKeyspaceThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &keyspace_name, const QString &api_version, const OAIThroughputSettingsUpdateParameters &update_throughput_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  keyspace_name QString [required]
    * @param[in]  table_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  update_throughput_parameters OAIThroughputSettingsUpdateParameters [required]
    */
    virtual void cassandraResourcesUpdateCassandraTableThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &keyspace_name, const QString &table_name, const QString &api_version, const OAIThroughputSettingsUpdateParameters &update_throughput_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_rid QString [required]
    * @param[in]  collection_rid QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void collectionListMetricDefinitions(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_rid, const QString &collection_rid, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_rid QString [required]
    * @param[in]  collection_rid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [required]
    */
    virtual void collectionListMetrics(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_rid, const QString &collection_rid, const QString &api_version, const QString &filter);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_rid QString [required]
    * @param[in]  collection_rid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void collectionListUsages(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_rid, const QString &collection_rid, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_rid QString [required]
    * @param[in]  collection_rid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [required]
    */
    virtual void collectionPartitionListMetrics(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_rid, const QString &collection_rid, const QString &api_version, const QString &filter);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_rid QString [required]
    * @param[in]  collection_rid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void collectionPartitionListUsages(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_rid, const QString &collection_rid, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  region QString [required]
    * @param[in]  database_rid QString [required]
    * @param[in]  collection_rid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [required]
    */
    virtual void collectionPartitionRegionListMetrics(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &region, const QString &database_rid, const QString &collection_rid, const QString &api_version, const QString &filter);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  region QString [required]
    * @param[in]  database_rid QString [required]
    * @param[in]  collection_rid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [required]
    */
    virtual void collectionRegionListMetrics(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &region, const QString &database_rid, const QString &collection_rid, const QString &api_version, const QString &filter);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  region QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [required]
    */
    virtual void databaseAccountRegionListMetrics(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &region, const QString &api_version, const QString &filter);

    /**
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsCheckNameExists(const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_update_parameters OAIDatabaseAccountCreateUpdateParameters [required]
    */
    virtual void databaseAccountsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const OAIDatabaseAccountCreateUpdateParameters &create_update_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  failover_parameters OAIFailoverPolicies [required]
    */
    virtual void databaseAccountsFailoverPriorityChange(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const OAIFailoverPolicies &failover_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsGet(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsGetReadOnlyKeys(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void databaseAccountsList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void databaseAccountsListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsListConnectionStrings(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsListKeys(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsListMetricDefinitions(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [required]
    */
    virtual void databaseAccountsListMetrics(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const QString &filter);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsListReadOnlyKeys(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void databaseAccountsListUsages(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  region_parameter_for_offline OAIRegionForOnlineOffline [required]
    */
    virtual void databaseAccountsOfflineRegion(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const OAIRegionForOnlineOffline &region_parameter_for_offline);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  region_parameter_for_online OAIRegionForOnlineOffline [required]
    */
    virtual void databaseAccountsOnlineRegion(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const OAIRegionForOnlineOffline &region_parameter_for_online);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  key_to_regenerate OAIDatabaseAccountRegenerateKeyParameters [required]
    */
    virtual void databaseAccountsRegenerateKey(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const OAIDatabaseAccountRegenerateKeyParameters &key_to_regenerate);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  update_parameters OAIDatabaseAccountUpdateParameters [required]
    */
    virtual void databaseAccountsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const OAIDatabaseAccountUpdateParameters &update_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_rid QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseListMetricDefinitions(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_rid, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_rid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [required]
    */
    virtual void databaseListMetrics(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_rid, const QString &api_version, const QString &filter);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_rid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void databaseListUsages(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_rid, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_update_gremlin_database_parameters OAIGremlinDatabaseCreateUpdateParameters [required]
    */
    virtual void gremlinResourcesCreateUpdateGremlinDatabase(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version, const OAIGremlinDatabaseCreateUpdateParameters &create_update_gremlin_database_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  graph_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_update_gremlin_graph_parameters OAIGremlinGraphCreateUpdateParameters [required]
    */
    virtual void gremlinResourcesCreateUpdateGremlinGraph(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &graph_name, const QString &api_version, const OAIGremlinGraphCreateUpdateParameters &create_update_gremlin_graph_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void gremlinResourcesDeleteGremlinDatabase(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  graph_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void gremlinResourcesDeleteGremlinGraph(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &graph_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void gremlinResourcesGetGremlinDatabase(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void gremlinResourcesGetGremlinDatabaseThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  graph_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void gremlinResourcesGetGremlinGraph(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &graph_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  graph_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void gremlinResourcesGetGremlinGraphThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &graph_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void gremlinResourcesListGremlinDatabases(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void gremlinResourcesListGremlinGraphs(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  update_throughput_parameters OAIThroughputSettingsUpdateParameters [required]
    */
    virtual void gremlinResourcesUpdateGremlinDatabaseThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version, const OAIThroughputSettingsUpdateParameters &update_throughput_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  graph_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  update_throughput_parameters OAIThroughputSettingsUpdateParameters [required]
    */
    virtual void gremlinResourcesUpdateGremlinGraphThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &graph_name, const QString &api_version, const OAIThroughputSettingsUpdateParameters &update_throughput_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  collection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_update_mongo_db_collection_parameters OAIMongoDBCollectionCreateUpdateParameters [required]
    */
    virtual void mongoDBResourcesCreateUpdateMongoDBCollection(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &collection_name, const QString &api_version, const OAIMongoDBCollectionCreateUpdateParameters &create_update_mongo_db_collection_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_update_mongo_db_database_parameters OAIMongoDBDatabaseCreateUpdateParameters [required]
    */
    virtual void mongoDBResourcesCreateUpdateMongoDBDatabase(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version, const OAIMongoDBDatabaseCreateUpdateParameters &create_update_mongo_db_database_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  collection_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void mongoDBResourcesDeleteMongoDBCollection(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &collection_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void mongoDBResourcesDeleteMongoDBDatabase(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  collection_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void mongoDBResourcesGetMongoDBCollection(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &collection_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  collection_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void mongoDBResourcesGetMongoDBCollectionThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &collection_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void mongoDBResourcesGetMongoDBDatabase(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void mongoDBResourcesGetMongoDBDatabaseThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void mongoDBResourcesListMongoDBCollections(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void mongoDBResourcesListMongoDBDatabases(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  collection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  update_throughput_parameters OAIThroughputSettingsUpdateParameters [required]
    */
    virtual void mongoDBResourcesUpdateMongoDBCollectionThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &collection_name, const QString &api_version, const OAIThroughputSettingsUpdateParameters &update_throughput_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  update_throughput_parameters OAIThroughputSettingsUpdateParameters [required]
    */
    virtual void mongoDBResourcesUpdateMongoDBDatabaseThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version, const OAIThroughputSettingsUpdateParameters &update_throughput_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_rid QString [required]
    * @param[in]  collection_rid QString [required]
    * @param[in]  partition_key_range_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [required]
    */
    virtual void partitionKeyRangeIdListMetrics(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_rid, const QString &collection_rid, const QString &partition_key_range_id, const QString &api_version, const QString &filter);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  region QString [required]
    * @param[in]  database_rid QString [required]
    * @param[in]  collection_rid QString [required]
    * @param[in]  partition_key_range_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [required]
    */
    virtual void partitionKeyRangeIdRegionListMetrics(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &region, const QString &database_rid, const QString &collection_rid, const QString &partition_key_range_id, const QString &api_version, const QString &filter);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [required]
    */
    virtual void percentileListMetrics(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const QString &filter);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  source_region QString [required]
    * @param[in]  target_region QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [required]
    */
    virtual void percentileSourceTargetListMetrics(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &source_region, const QString &target_region, const QString &api_version, const QString &filter);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  target_region QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [required]
    */
    virtual void percentileTargetListMetrics(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &target_region, const QString &api_version, const QString &filter);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_update_sql_container_parameters OAISqlContainerCreateUpdateParameters [required]
    */
    virtual void sqlResourcesCreateUpdateSqlContainer(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &container_name, const QString &api_version, const OAISqlContainerCreateUpdateParameters &create_update_sql_container_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_update_sql_database_parameters OAISqlDatabaseCreateUpdateParameters [required]
    */
    virtual void sqlResourcesCreateUpdateSqlDatabase(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version, const OAISqlDatabaseCreateUpdateParameters &create_update_sql_database_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  stored_procedure_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_update_sql_stored_procedure_parameters OAISqlStoredProcedureCreateUpdateParameters [required]
    */
    virtual void sqlResourcesCreateUpdateSqlStoredProcedure(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &container_name, const QString &stored_procedure_name, const QString &api_version, const OAISqlStoredProcedureCreateUpdateParameters &create_update_sql_stored_procedure_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  trigger_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_update_sql_trigger_parameters OAISqlTriggerCreateUpdateParameters [required]
    */
    virtual void sqlResourcesCreateUpdateSqlTrigger(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &container_name, const QString &trigger_name, const QString &api_version, const OAISqlTriggerCreateUpdateParameters &create_update_sql_trigger_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  user_defined_function_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_update_sql_user_defined_function_parameters OAISqlUserDefinedFunctionCreateUpdateParameters [required]
    */
    virtual void sqlResourcesCreateUpdateSqlUserDefinedFunction(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &container_name, const QString &user_defined_function_name, const QString &api_version, const OAISqlUserDefinedFunctionCreateUpdateParameters &create_update_sql_user_defined_function_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sqlResourcesDeleteSqlContainer(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &container_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sqlResourcesDeleteSqlDatabase(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  stored_procedure_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sqlResourcesDeleteSqlStoredProcedure(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &container_name, const QString &stored_procedure_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  trigger_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sqlResourcesDeleteSqlTrigger(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &container_name, const QString &trigger_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  user_defined_function_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sqlResourcesDeleteSqlUserDefinedFunction(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &container_name, const QString &user_defined_function_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sqlResourcesGetSqlContainer(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &container_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sqlResourcesGetSqlContainerThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &container_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sqlResourcesGetSqlDatabase(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sqlResourcesGetSqlDatabaseThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  stored_procedure_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sqlResourcesGetSqlStoredProcedure(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &container_name, const QString &stored_procedure_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  trigger_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sqlResourcesGetSqlTrigger(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &container_name, const QString &trigger_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  user_defined_function_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sqlResourcesGetSqlUserDefinedFunction(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &container_name, const QString &user_defined_function_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sqlResourcesListSqlContainers(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sqlResourcesListSqlDatabases(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sqlResourcesListSqlStoredProcedures(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &container_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sqlResourcesListSqlTriggers(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &container_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sqlResourcesListSqlUserDefinedFunctions(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &container_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  update_throughput_parameters OAIThroughputSettingsUpdateParameters [required]
    */
    virtual void sqlResourcesUpdateSqlContainerThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &container_name, const QString &api_version, const OAIThroughputSettingsUpdateParameters &update_throughput_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  update_throughput_parameters OAIThroughputSettingsUpdateParameters [required]
    */
    virtual void sqlResourcesUpdateSqlDatabaseThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version, const OAIThroughputSettingsUpdateParameters &update_throughput_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  table_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_update_table_parameters OAITableCreateUpdateParameters [required]
    */
    virtual void tableResourcesCreateUpdateTable(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &table_name, const QString &api_version, const OAITableCreateUpdateParameters &create_update_table_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  table_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void tableResourcesDeleteTable(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &table_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  table_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void tableResourcesGetTable(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &table_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  table_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void tableResourcesGetTableThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &table_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void tableResourcesListTables(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  table_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  update_throughput_parameters OAIThroughputSettingsUpdateParameters [required]
    */
    virtual void tableResourcesUpdateTableThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &table_name, const QString &api_version, const OAIThroughputSettingsUpdateParameters &update_throughput_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cassandraResourcesCreateUpdateCassandraKeyspaceCallback(OAIHttpRequestWorker *worker);
    void cassandraResourcesCreateUpdateCassandraTableCallback(OAIHttpRequestWorker *worker);
    void cassandraResourcesDeleteCassandraKeyspaceCallback(OAIHttpRequestWorker *worker);
    void cassandraResourcesDeleteCassandraTableCallback(OAIHttpRequestWorker *worker);
    void cassandraResourcesGetCassandraKeyspaceCallback(OAIHttpRequestWorker *worker);
    void cassandraResourcesGetCassandraKeyspaceThroughputCallback(OAIHttpRequestWorker *worker);
    void cassandraResourcesGetCassandraTableCallback(OAIHttpRequestWorker *worker);
    void cassandraResourcesGetCassandraTableThroughputCallback(OAIHttpRequestWorker *worker);
    void cassandraResourcesListCassandraKeyspacesCallback(OAIHttpRequestWorker *worker);
    void cassandraResourcesListCassandraTablesCallback(OAIHttpRequestWorker *worker);
    void cassandraResourcesUpdateCassandraKeyspaceThroughputCallback(OAIHttpRequestWorker *worker);
    void cassandraResourcesUpdateCassandraTableThroughputCallback(OAIHttpRequestWorker *worker);
    void collectionListMetricDefinitionsCallback(OAIHttpRequestWorker *worker);
    void collectionListMetricsCallback(OAIHttpRequestWorker *worker);
    void collectionListUsagesCallback(OAIHttpRequestWorker *worker);
    void collectionPartitionListMetricsCallback(OAIHttpRequestWorker *worker);
    void collectionPartitionListUsagesCallback(OAIHttpRequestWorker *worker);
    void collectionPartitionRegionListMetricsCallback(OAIHttpRequestWorker *worker);
    void collectionRegionListMetricsCallback(OAIHttpRequestWorker *worker);
    void databaseAccountRegionListMetricsCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsCheckNameExistsCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsDeleteCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsFailoverPriorityChangeCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsGetCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsGetReadOnlyKeysCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsListCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsListConnectionStringsCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsListKeysCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsListMetricDefinitionsCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsListMetricsCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsListReadOnlyKeysCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsListUsagesCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsOfflineRegionCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsOnlineRegionCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsRegenerateKeyCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsUpdateCallback(OAIHttpRequestWorker *worker);
    void databaseListMetricDefinitionsCallback(OAIHttpRequestWorker *worker);
    void databaseListMetricsCallback(OAIHttpRequestWorker *worker);
    void databaseListUsagesCallback(OAIHttpRequestWorker *worker);
    void gremlinResourcesCreateUpdateGremlinDatabaseCallback(OAIHttpRequestWorker *worker);
    void gremlinResourcesCreateUpdateGremlinGraphCallback(OAIHttpRequestWorker *worker);
    void gremlinResourcesDeleteGremlinDatabaseCallback(OAIHttpRequestWorker *worker);
    void gremlinResourcesDeleteGremlinGraphCallback(OAIHttpRequestWorker *worker);
    void gremlinResourcesGetGremlinDatabaseCallback(OAIHttpRequestWorker *worker);
    void gremlinResourcesGetGremlinDatabaseThroughputCallback(OAIHttpRequestWorker *worker);
    void gremlinResourcesGetGremlinGraphCallback(OAIHttpRequestWorker *worker);
    void gremlinResourcesGetGremlinGraphThroughputCallback(OAIHttpRequestWorker *worker);
    void gremlinResourcesListGremlinDatabasesCallback(OAIHttpRequestWorker *worker);
    void gremlinResourcesListGremlinGraphsCallback(OAIHttpRequestWorker *worker);
    void gremlinResourcesUpdateGremlinDatabaseThroughputCallback(OAIHttpRequestWorker *worker);
    void gremlinResourcesUpdateGremlinGraphThroughputCallback(OAIHttpRequestWorker *worker);
    void mongoDBResourcesCreateUpdateMongoDBCollectionCallback(OAIHttpRequestWorker *worker);
    void mongoDBResourcesCreateUpdateMongoDBDatabaseCallback(OAIHttpRequestWorker *worker);
    void mongoDBResourcesDeleteMongoDBCollectionCallback(OAIHttpRequestWorker *worker);
    void mongoDBResourcesDeleteMongoDBDatabaseCallback(OAIHttpRequestWorker *worker);
    void mongoDBResourcesGetMongoDBCollectionCallback(OAIHttpRequestWorker *worker);
    void mongoDBResourcesGetMongoDBCollectionThroughputCallback(OAIHttpRequestWorker *worker);
    void mongoDBResourcesGetMongoDBDatabaseCallback(OAIHttpRequestWorker *worker);
    void mongoDBResourcesGetMongoDBDatabaseThroughputCallback(OAIHttpRequestWorker *worker);
    void mongoDBResourcesListMongoDBCollectionsCallback(OAIHttpRequestWorker *worker);
    void mongoDBResourcesListMongoDBDatabasesCallback(OAIHttpRequestWorker *worker);
    void mongoDBResourcesUpdateMongoDBCollectionThroughputCallback(OAIHttpRequestWorker *worker);
    void mongoDBResourcesUpdateMongoDBDatabaseThroughputCallback(OAIHttpRequestWorker *worker);
    void partitionKeyRangeIdListMetricsCallback(OAIHttpRequestWorker *worker);
    void partitionKeyRangeIdRegionListMetricsCallback(OAIHttpRequestWorker *worker);
    void percentileListMetricsCallback(OAIHttpRequestWorker *worker);
    void percentileSourceTargetListMetricsCallback(OAIHttpRequestWorker *worker);
    void percentileTargetListMetricsCallback(OAIHttpRequestWorker *worker);
    void sqlResourcesCreateUpdateSqlContainerCallback(OAIHttpRequestWorker *worker);
    void sqlResourcesCreateUpdateSqlDatabaseCallback(OAIHttpRequestWorker *worker);
    void sqlResourcesCreateUpdateSqlStoredProcedureCallback(OAIHttpRequestWorker *worker);
    void sqlResourcesCreateUpdateSqlTriggerCallback(OAIHttpRequestWorker *worker);
    void sqlResourcesCreateUpdateSqlUserDefinedFunctionCallback(OAIHttpRequestWorker *worker);
    void sqlResourcesDeleteSqlContainerCallback(OAIHttpRequestWorker *worker);
    void sqlResourcesDeleteSqlDatabaseCallback(OAIHttpRequestWorker *worker);
    void sqlResourcesDeleteSqlStoredProcedureCallback(OAIHttpRequestWorker *worker);
    void sqlResourcesDeleteSqlTriggerCallback(OAIHttpRequestWorker *worker);
    void sqlResourcesDeleteSqlUserDefinedFunctionCallback(OAIHttpRequestWorker *worker);
    void sqlResourcesGetSqlContainerCallback(OAIHttpRequestWorker *worker);
    void sqlResourcesGetSqlContainerThroughputCallback(OAIHttpRequestWorker *worker);
    void sqlResourcesGetSqlDatabaseCallback(OAIHttpRequestWorker *worker);
    void sqlResourcesGetSqlDatabaseThroughputCallback(OAIHttpRequestWorker *worker);
    void sqlResourcesGetSqlStoredProcedureCallback(OAIHttpRequestWorker *worker);
    void sqlResourcesGetSqlTriggerCallback(OAIHttpRequestWorker *worker);
    void sqlResourcesGetSqlUserDefinedFunctionCallback(OAIHttpRequestWorker *worker);
    void sqlResourcesListSqlContainersCallback(OAIHttpRequestWorker *worker);
    void sqlResourcesListSqlDatabasesCallback(OAIHttpRequestWorker *worker);
    void sqlResourcesListSqlStoredProceduresCallback(OAIHttpRequestWorker *worker);
    void sqlResourcesListSqlTriggersCallback(OAIHttpRequestWorker *worker);
    void sqlResourcesListSqlUserDefinedFunctionsCallback(OAIHttpRequestWorker *worker);
    void sqlResourcesUpdateSqlContainerThroughputCallback(OAIHttpRequestWorker *worker);
    void sqlResourcesUpdateSqlDatabaseThroughputCallback(OAIHttpRequestWorker *worker);
    void tableResourcesCreateUpdateTableCallback(OAIHttpRequestWorker *worker);
    void tableResourcesDeleteTableCallback(OAIHttpRequestWorker *worker);
    void tableResourcesGetTableCallback(OAIHttpRequestWorker *worker);
    void tableResourcesGetTableThroughputCallback(OAIHttpRequestWorker *worker);
    void tableResourcesListTablesCallback(OAIHttpRequestWorker *worker);
    void tableResourcesUpdateTableThroughputCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cassandraResourcesCreateUpdateCassandraKeyspaceSignal(OAICassandraKeyspaceGetResults summary);
    void cassandraResourcesCreateUpdateCassandraTableSignal(OAICassandraTableGetResults summary);
    void cassandraResourcesDeleteCassandraKeyspaceSignal();
    void cassandraResourcesDeleteCassandraTableSignal();
    void cassandraResourcesGetCassandraKeyspaceSignal(OAICassandraKeyspaceGetResults summary);
    void cassandraResourcesGetCassandraKeyspaceThroughputSignal(OAIThroughputSettingsGetResults summary);
    void cassandraResourcesGetCassandraTableSignal(OAICassandraTableGetResults summary);
    void cassandraResourcesGetCassandraTableThroughputSignal(OAIThroughputSettingsGetResults summary);
    void cassandraResourcesListCassandraKeyspacesSignal(OAICassandraKeyspaceListResult summary);
    void cassandraResourcesListCassandraTablesSignal(OAICassandraTableListResult summary);
    void cassandraResourcesUpdateCassandraKeyspaceThroughputSignal(OAIThroughputSettingsGetResults summary);
    void cassandraResourcesUpdateCassandraTableThroughputSignal(OAIThroughputSettingsGetResults summary);
    void collectionListMetricDefinitionsSignal(OAIMetricDefinitionsListResult summary);
    void collectionListMetricsSignal(OAIMetricListResult summary);
    void collectionListUsagesSignal(OAIUsagesResult summary);
    void collectionPartitionListMetricsSignal(OAIPartitionMetricListResult summary);
    void collectionPartitionListUsagesSignal(OAIPartitionUsagesResult summary);
    void collectionPartitionRegionListMetricsSignal(OAIPartitionMetricListResult summary);
    void collectionRegionListMetricsSignal(OAIMetricListResult summary);
    void databaseAccountRegionListMetricsSignal(OAIMetricListResult summary);
    void databaseAccountsCheckNameExistsSignal();
    void databaseAccountsCreateOrUpdateSignal(OAIDatabaseAccountGetResults summary);
    void databaseAccountsDeleteSignal();
    void databaseAccountsFailoverPriorityChangeSignal();
    void databaseAccountsGetSignal(OAIDatabaseAccountGetResults summary);
    void databaseAccountsGetReadOnlyKeysSignal(OAIDatabaseAccountListReadOnlyKeysResult summary);
    void databaseAccountsListSignal(OAIDatabaseAccountsListResult summary);
    void databaseAccountsListByResourceGroupSignal(OAIDatabaseAccountsListResult summary);
    void databaseAccountsListConnectionStringsSignal(OAIDatabaseAccountListConnectionStringsResult summary);
    void databaseAccountsListKeysSignal(OAIDatabaseAccountListKeysResult summary);
    void databaseAccountsListMetricDefinitionsSignal(OAIMetricDefinitionsListResult summary);
    void databaseAccountsListMetricsSignal(OAIMetricListResult summary);
    void databaseAccountsListReadOnlyKeysSignal(OAIDatabaseAccountListReadOnlyKeysResult summary);
    void databaseAccountsListUsagesSignal(OAIUsagesResult summary);
    void databaseAccountsOfflineRegionSignal();
    void databaseAccountsOnlineRegionSignal();
    void databaseAccountsRegenerateKeySignal();
    void databaseAccountsUpdateSignal(OAIDatabaseAccountGetResults summary);
    void databaseListMetricDefinitionsSignal(OAIMetricDefinitionsListResult summary);
    void databaseListMetricsSignal(OAIMetricListResult summary);
    void databaseListUsagesSignal(OAIUsagesResult summary);
    void gremlinResourcesCreateUpdateGremlinDatabaseSignal(OAIGremlinDatabaseGetResults summary);
    void gremlinResourcesCreateUpdateGremlinGraphSignal(OAIGremlinGraphGetResults summary);
    void gremlinResourcesDeleteGremlinDatabaseSignal();
    void gremlinResourcesDeleteGremlinGraphSignal();
    void gremlinResourcesGetGremlinDatabaseSignal(OAIGremlinDatabaseGetResults summary);
    void gremlinResourcesGetGremlinDatabaseThroughputSignal(OAIThroughputSettingsGetResults summary);
    void gremlinResourcesGetGremlinGraphSignal(OAIGremlinGraphGetResults summary);
    void gremlinResourcesGetGremlinGraphThroughputSignal(OAIThroughputSettingsGetResults summary);
    void gremlinResourcesListGremlinDatabasesSignal(OAIGremlinDatabaseListResult summary);
    void gremlinResourcesListGremlinGraphsSignal(OAIGremlinGraphListResult summary);
    void gremlinResourcesUpdateGremlinDatabaseThroughputSignal(OAIThroughputSettingsGetResults summary);
    void gremlinResourcesUpdateGremlinGraphThroughputSignal(OAIThroughputSettingsGetResults summary);
    void mongoDBResourcesCreateUpdateMongoDBCollectionSignal(OAIMongoDBCollectionGetResults summary);
    void mongoDBResourcesCreateUpdateMongoDBDatabaseSignal(OAIMongoDBDatabaseGetResults summary);
    void mongoDBResourcesDeleteMongoDBCollectionSignal();
    void mongoDBResourcesDeleteMongoDBDatabaseSignal();
    void mongoDBResourcesGetMongoDBCollectionSignal(OAIMongoDBCollectionGetResults summary);
    void mongoDBResourcesGetMongoDBCollectionThroughputSignal(OAIThroughputSettingsGetResults summary);
    void mongoDBResourcesGetMongoDBDatabaseSignal(OAIMongoDBDatabaseGetResults summary);
    void mongoDBResourcesGetMongoDBDatabaseThroughputSignal(OAIThroughputSettingsGetResults summary);
    void mongoDBResourcesListMongoDBCollectionsSignal(OAIMongoDBCollectionListResult summary);
    void mongoDBResourcesListMongoDBDatabasesSignal(OAIMongoDBDatabaseListResult summary);
    void mongoDBResourcesUpdateMongoDBCollectionThroughputSignal(OAIThroughputSettingsGetResults summary);
    void mongoDBResourcesUpdateMongoDBDatabaseThroughputSignal(OAIThroughputSettingsGetResults summary);
    void partitionKeyRangeIdListMetricsSignal(OAIPartitionMetricListResult summary);
    void partitionKeyRangeIdRegionListMetricsSignal(OAIPartitionMetricListResult summary);
    void percentileListMetricsSignal(OAIPercentileMetricListResult summary);
    void percentileSourceTargetListMetricsSignal(OAIPercentileMetricListResult summary);
    void percentileTargetListMetricsSignal(OAIPercentileMetricListResult summary);
    void sqlResourcesCreateUpdateSqlContainerSignal(OAISqlContainerGetResults summary);
    void sqlResourcesCreateUpdateSqlDatabaseSignal(OAISqlDatabaseGetResults summary);
    void sqlResourcesCreateUpdateSqlStoredProcedureSignal(OAISqlStoredProcedureGetResults summary);
    void sqlResourcesCreateUpdateSqlTriggerSignal(OAISqlTriggerGetResults summary);
    void sqlResourcesCreateUpdateSqlUserDefinedFunctionSignal(OAISqlUserDefinedFunctionGetResults summary);
    void sqlResourcesDeleteSqlContainerSignal();
    void sqlResourcesDeleteSqlDatabaseSignal();
    void sqlResourcesDeleteSqlStoredProcedureSignal();
    void sqlResourcesDeleteSqlTriggerSignal();
    void sqlResourcesDeleteSqlUserDefinedFunctionSignal();
    void sqlResourcesGetSqlContainerSignal(OAISqlContainerGetResults summary);
    void sqlResourcesGetSqlContainerThroughputSignal(OAIThroughputSettingsGetResults summary);
    void sqlResourcesGetSqlDatabaseSignal(OAISqlDatabaseGetResults summary);
    void sqlResourcesGetSqlDatabaseThroughputSignal(OAIThroughputSettingsGetResults summary);
    void sqlResourcesGetSqlStoredProcedureSignal(OAISqlStoredProcedureGetResults summary);
    void sqlResourcesGetSqlTriggerSignal(OAISqlTriggerGetResults summary);
    void sqlResourcesGetSqlUserDefinedFunctionSignal(OAISqlUserDefinedFunctionGetResults summary);
    void sqlResourcesListSqlContainersSignal(OAISqlContainerListResult summary);
    void sqlResourcesListSqlDatabasesSignal(OAISqlDatabaseListResult summary);
    void sqlResourcesListSqlStoredProceduresSignal(OAISqlStoredProcedureListResult summary);
    void sqlResourcesListSqlTriggersSignal(OAISqlTriggerListResult summary);
    void sqlResourcesListSqlUserDefinedFunctionsSignal(OAISqlUserDefinedFunctionListResult summary);
    void sqlResourcesUpdateSqlContainerThroughputSignal(OAIThroughputSettingsGetResults summary);
    void sqlResourcesUpdateSqlDatabaseThroughputSignal(OAIThroughputSettingsGetResults summary);
    void tableResourcesCreateUpdateTableSignal(OAITableGetResults summary);
    void tableResourcesDeleteTableSignal();
    void tableResourcesGetTableSignal(OAITableGetResults summary);
    void tableResourcesGetTableThroughputSignal(OAIThroughputSettingsGetResults summary);
    void tableResourcesListTablesSignal(OAITableListResult summary);
    void tableResourcesUpdateTableThroughputSignal(OAIThroughputSettingsGetResults summary);


    void cassandraResourcesCreateUpdateCassandraKeyspaceSignalFull(OAIHttpRequestWorker *worker, OAICassandraKeyspaceGetResults summary);
    void cassandraResourcesCreateUpdateCassandraTableSignalFull(OAIHttpRequestWorker *worker, OAICassandraTableGetResults summary);
    void cassandraResourcesDeleteCassandraKeyspaceSignalFull(OAIHttpRequestWorker *worker);
    void cassandraResourcesDeleteCassandraTableSignalFull(OAIHttpRequestWorker *worker);
    void cassandraResourcesGetCassandraKeyspaceSignalFull(OAIHttpRequestWorker *worker, OAICassandraKeyspaceGetResults summary);
    void cassandraResourcesGetCassandraKeyspaceThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughputSettingsGetResults summary);
    void cassandraResourcesGetCassandraTableSignalFull(OAIHttpRequestWorker *worker, OAICassandraTableGetResults summary);
    void cassandraResourcesGetCassandraTableThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughputSettingsGetResults summary);
    void cassandraResourcesListCassandraKeyspacesSignalFull(OAIHttpRequestWorker *worker, OAICassandraKeyspaceListResult summary);
    void cassandraResourcesListCassandraTablesSignalFull(OAIHttpRequestWorker *worker, OAICassandraTableListResult summary);
    void cassandraResourcesUpdateCassandraKeyspaceThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughputSettingsGetResults summary);
    void cassandraResourcesUpdateCassandraTableThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughputSettingsGetResults summary);
    void collectionListMetricDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAIMetricDefinitionsListResult summary);
    void collectionListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIMetricListResult summary);
    void collectionListUsagesSignalFull(OAIHttpRequestWorker *worker, OAIUsagesResult summary);
    void collectionPartitionListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIPartitionMetricListResult summary);
    void collectionPartitionListUsagesSignalFull(OAIHttpRequestWorker *worker, OAIPartitionUsagesResult summary);
    void collectionPartitionRegionListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIPartitionMetricListResult summary);
    void collectionRegionListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIMetricListResult summary);
    void databaseAccountRegionListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIMetricListResult summary);
    void databaseAccountsCheckNameExistsSignalFull(OAIHttpRequestWorker *worker);
    void databaseAccountsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseAccountGetResults summary);
    void databaseAccountsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void databaseAccountsFailoverPriorityChangeSignalFull(OAIHttpRequestWorker *worker);
    void databaseAccountsGetSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseAccountGetResults summary);
    void databaseAccountsGetReadOnlyKeysSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseAccountListReadOnlyKeysResult summary);
    void databaseAccountsListSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseAccountsListResult summary);
    void databaseAccountsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseAccountsListResult summary);
    void databaseAccountsListConnectionStringsSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseAccountListConnectionStringsResult summary);
    void databaseAccountsListKeysSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseAccountListKeysResult summary);
    void databaseAccountsListMetricDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAIMetricDefinitionsListResult summary);
    void databaseAccountsListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIMetricListResult summary);
    void databaseAccountsListReadOnlyKeysSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseAccountListReadOnlyKeysResult summary);
    void databaseAccountsListUsagesSignalFull(OAIHttpRequestWorker *worker, OAIUsagesResult summary);
    void databaseAccountsOfflineRegionSignalFull(OAIHttpRequestWorker *worker);
    void databaseAccountsOnlineRegionSignalFull(OAIHttpRequestWorker *worker);
    void databaseAccountsRegenerateKeySignalFull(OAIHttpRequestWorker *worker);
    void databaseAccountsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseAccountGetResults summary);
    void databaseListMetricDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAIMetricDefinitionsListResult summary);
    void databaseListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIMetricListResult summary);
    void databaseListUsagesSignalFull(OAIHttpRequestWorker *worker, OAIUsagesResult summary);
    void gremlinResourcesCreateUpdateGremlinDatabaseSignalFull(OAIHttpRequestWorker *worker, OAIGremlinDatabaseGetResults summary);
    void gremlinResourcesCreateUpdateGremlinGraphSignalFull(OAIHttpRequestWorker *worker, OAIGremlinGraphGetResults summary);
    void gremlinResourcesDeleteGremlinDatabaseSignalFull(OAIHttpRequestWorker *worker);
    void gremlinResourcesDeleteGremlinGraphSignalFull(OAIHttpRequestWorker *worker);
    void gremlinResourcesGetGremlinDatabaseSignalFull(OAIHttpRequestWorker *worker, OAIGremlinDatabaseGetResults summary);
    void gremlinResourcesGetGremlinDatabaseThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughputSettingsGetResults summary);
    void gremlinResourcesGetGremlinGraphSignalFull(OAIHttpRequestWorker *worker, OAIGremlinGraphGetResults summary);
    void gremlinResourcesGetGremlinGraphThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughputSettingsGetResults summary);
    void gremlinResourcesListGremlinDatabasesSignalFull(OAIHttpRequestWorker *worker, OAIGremlinDatabaseListResult summary);
    void gremlinResourcesListGremlinGraphsSignalFull(OAIHttpRequestWorker *worker, OAIGremlinGraphListResult summary);
    void gremlinResourcesUpdateGremlinDatabaseThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughputSettingsGetResults summary);
    void gremlinResourcesUpdateGremlinGraphThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughputSettingsGetResults summary);
    void mongoDBResourcesCreateUpdateMongoDBCollectionSignalFull(OAIHttpRequestWorker *worker, OAIMongoDBCollectionGetResults summary);
    void mongoDBResourcesCreateUpdateMongoDBDatabaseSignalFull(OAIHttpRequestWorker *worker, OAIMongoDBDatabaseGetResults summary);
    void mongoDBResourcesDeleteMongoDBCollectionSignalFull(OAIHttpRequestWorker *worker);
    void mongoDBResourcesDeleteMongoDBDatabaseSignalFull(OAIHttpRequestWorker *worker);
    void mongoDBResourcesGetMongoDBCollectionSignalFull(OAIHttpRequestWorker *worker, OAIMongoDBCollectionGetResults summary);
    void mongoDBResourcesGetMongoDBCollectionThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughputSettingsGetResults summary);
    void mongoDBResourcesGetMongoDBDatabaseSignalFull(OAIHttpRequestWorker *worker, OAIMongoDBDatabaseGetResults summary);
    void mongoDBResourcesGetMongoDBDatabaseThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughputSettingsGetResults summary);
    void mongoDBResourcesListMongoDBCollectionsSignalFull(OAIHttpRequestWorker *worker, OAIMongoDBCollectionListResult summary);
    void mongoDBResourcesListMongoDBDatabasesSignalFull(OAIHttpRequestWorker *worker, OAIMongoDBDatabaseListResult summary);
    void mongoDBResourcesUpdateMongoDBCollectionThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughputSettingsGetResults summary);
    void mongoDBResourcesUpdateMongoDBDatabaseThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughputSettingsGetResults summary);
    void partitionKeyRangeIdListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIPartitionMetricListResult summary);
    void partitionKeyRangeIdRegionListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIPartitionMetricListResult summary);
    void percentileListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIPercentileMetricListResult summary);
    void percentileSourceTargetListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIPercentileMetricListResult summary);
    void percentileTargetListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIPercentileMetricListResult summary);
    void sqlResourcesCreateUpdateSqlContainerSignalFull(OAIHttpRequestWorker *worker, OAISqlContainerGetResults summary);
    void sqlResourcesCreateUpdateSqlDatabaseSignalFull(OAIHttpRequestWorker *worker, OAISqlDatabaseGetResults summary);
    void sqlResourcesCreateUpdateSqlStoredProcedureSignalFull(OAIHttpRequestWorker *worker, OAISqlStoredProcedureGetResults summary);
    void sqlResourcesCreateUpdateSqlTriggerSignalFull(OAIHttpRequestWorker *worker, OAISqlTriggerGetResults summary);
    void sqlResourcesCreateUpdateSqlUserDefinedFunctionSignalFull(OAIHttpRequestWorker *worker, OAISqlUserDefinedFunctionGetResults summary);
    void sqlResourcesDeleteSqlContainerSignalFull(OAIHttpRequestWorker *worker);
    void sqlResourcesDeleteSqlDatabaseSignalFull(OAIHttpRequestWorker *worker);
    void sqlResourcesDeleteSqlStoredProcedureSignalFull(OAIHttpRequestWorker *worker);
    void sqlResourcesDeleteSqlTriggerSignalFull(OAIHttpRequestWorker *worker);
    void sqlResourcesDeleteSqlUserDefinedFunctionSignalFull(OAIHttpRequestWorker *worker);
    void sqlResourcesGetSqlContainerSignalFull(OAIHttpRequestWorker *worker, OAISqlContainerGetResults summary);
    void sqlResourcesGetSqlContainerThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughputSettingsGetResults summary);
    void sqlResourcesGetSqlDatabaseSignalFull(OAIHttpRequestWorker *worker, OAISqlDatabaseGetResults summary);
    void sqlResourcesGetSqlDatabaseThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughputSettingsGetResults summary);
    void sqlResourcesGetSqlStoredProcedureSignalFull(OAIHttpRequestWorker *worker, OAISqlStoredProcedureGetResults summary);
    void sqlResourcesGetSqlTriggerSignalFull(OAIHttpRequestWorker *worker, OAISqlTriggerGetResults summary);
    void sqlResourcesGetSqlUserDefinedFunctionSignalFull(OAIHttpRequestWorker *worker, OAISqlUserDefinedFunctionGetResults summary);
    void sqlResourcesListSqlContainersSignalFull(OAIHttpRequestWorker *worker, OAISqlContainerListResult summary);
    void sqlResourcesListSqlDatabasesSignalFull(OAIHttpRequestWorker *worker, OAISqlDatabaseListResult summary);
    void sqlResourcesListSqlStoredProceduresSignalFull(OAIHttpRequestWorker *worker, OAISqlStoredProcedureListResult summary);
    void sqlResourcesListSqlTriggersSignalFull(OAIHttpRequestWorker *worker, OAISqlTriggerListResult summary);
    void sqlResourcesListSqlUserDefinedFunctionsSignalFull(OAIHttpRequestWorker *worker, OAISqlUserDefinedFunctionListResult summary);
    void sqlResourcesUpdateSqlContainerThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughputSettingsGetResults summary);
    void sqlResourcesUpdateSqlDatabaseThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughputSettingsGetResults summary);
    void tableResourcesCreateUpdateTableSignalFull(OAIHttpRequestWorker *worker, OAITableGetResults summary);
    void tableResourcesDeleteTableSignalFull(OAIHttpRequestWorker *worker);
    void tableResourcesGetTableSignalFull(OAIHttpRequestWorker *worker, OAITableGetResults summary);
    void tableResourcesGetTableThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughputSettingsGetResults summary);
    void tableResourcesListTablesSignalFull(OAIHttpRequestWorker *worker, OAITableListResult summary);
    void tableResourcesUpdateTableThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughputSettingsGetResults summary);

    Q_DECL_DEPRECATED_X("Use cassandraResourcesCreateUpdateCassandraKeyspaceSignalError() instead")
    void cassandraResourcesCreateUpdateCassandraKeyspaceSignalE(OAICassandraKeyspaceGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cassandraResourcesCreateUpdateCassandraKeyspaceSignalError(OAICassandraKeyspaceGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cassandraResourcesCreateUpdateCassandraTableSignalError() instead")
    void cassandraResourcesCreateUpdateCassandraTableSignalE(OAICassandraTableGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cassandraResourcesCreateUpdateCassandraTableSignalError(OAICassandraTableGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cassandraResourcesDeleteCassandraKeyspaceSignalError() instead")
    void cassandraResourcesDeleteCassandraKeyspaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cassandraResourcesDeleteCassandraKeyspaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cassandraResourcesDeleteCassandraTableSignalError() instead")
    void cassandraResourcesDeleteCassandraTableSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cassandraResourcesDeleteCassandraTableSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cassandraResourcesGetCassandraKeyspaceSignalError() instead")
    void cassandraResourcesGetCassandraKeyspaceSignalE(OAICassandraKeyspaceGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cassandraResourcesGetCassandraKeyspaceSignalError(OAICassandraKeyspaceGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cassandraResourcesGetCassandraKeyspaceThroughputSignalError() instead")
    void cassandraResourcesGetCassandraKeyspaceThroughputSignalE(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cassandraResourcesGetCassandraKeyspaceThroughputSignalError(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cassandraResourcesGetCassandraTableSignalError() instead")
    void cassandraResourcesGetCassandraTableSignalE(OAICassandraTableGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cassandraResourcesGetCassandraTableSignalError(OAICassandraTableGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cassandraResourcesGetCassandraTableThroughputSignalError() instead")
    void cassandraResourcesGetCassandraTableThroughputSignalE(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cassandraResourcesGetCassandraTableThroughputSignalError(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cassandraResourcesListCassandraKeyspacesSignalError() instead")
    void cassandraResourcesListCassandraKeyspacesSignalE(OAICassandraKeyspaceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cassandraResourcesListCassandraKeyspacesSignalError(OAICassandraKeyspaceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cassandraResourcesListCassandraTablesSignalError() instead")
    void cassandraResourcesListCassandraTablesSignalE(OAICassandraTableListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cassandraResourcesListCassandraTablesSignalError(OAICassandraTableListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cassandraResourcesUpdateCassandraKeyspaceThroughputSignalError() instead")
    void cassandraResourcesUpdateCassandraKeyspaceThroughputSignalE(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cassandraResourcesUpdateCassandraKeyspaceThroughputSignalError(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cassandraResourcesUpdateCassandraTableThroughputSignalError() instead")
    void cassandraResourcesUpdateCassandraTableThroughputSignalE(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cassandraResourcesUpdateCassandraTableThroughputSignalError(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionListMetricDefinitionsSignalError() instead")
    void collectionListMetricDefinitionsSignalE(OAIMetricDefinitionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionListMetricDefinitionsSignalError(OAIMetricDefinitionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionListMetricsSignalError() instead")
    void collectionListMetricsSignalE(OAIMetricListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionListMetricsSignalError(OAIMetricListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionListUsagesSignalError() instead")
    void collectionListUsagesSignalE(OAIUsagesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionListUsagesSignalError(OAIUsagesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionPartitionListMetricsSignalError() instead")
    void collectionPartitionListMetricsSignalE(OAIPartitionMetricListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionPartitionListMetricsSignalError(OAIPartitionMetricListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionPartitionListUsagesSignalError() instead")
    void collectionPartitionListUsagesSignalE(OAIPartitionUsagesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionPartitionListUsagesSignalError(OAIPartitionUsagesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionPartitionRegionListMetricsSignalError() instead")
    void collectionPartitionRegionListMetricsSignalE(OAIPartitionMetricListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionPartitionRegionListMetricsSignalError(OAIPartitionMetricListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionRegionListMetricsSignalError() instead")
    void collectionRegionListMetricsSignalE(OAIMetricListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionRegionListMetricsSignalError(OAIMetricListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountRegionListMetricsSignalError() instead")
    void databaseAccountRegionListMetricsSignalE(OAIMetricListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountRegionListMetricsSignalError(OAIMetricListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsCheckNameExistsSignalError() instead")
    void databaseAccountsCheckNameExistsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsCheckNameExistsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsCreateOrUpdateSignalError() instead")
    void databaseAccountsCreateOrUpdateSignalE(OAIDatabaseAccountGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsCreateOrUpdateSignalError(OAIDatabaseAccountGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsDeleteSignalError() instead")
    void databaseAccountsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsFailoverPriorityChangeSignalError() instead")
    void databaseAccountsFailoverPriorityChangeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsFailoverPriorityChangeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetSignalError() instead")
    void databaseAccountsGetSignalE(OAIDatabaseAccountGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetSignalError(OAIDatabaseAccountGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetReadOnlyKeysSignalError() instead")
    void databaseAccountsGetReadOnlyKeysSignalE(OAIDatabaseAccountListReadOnlyKeysResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetReadOnlyKeysSignalError(OAIDatabaseAccountListReadOnlyKeysResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListSignalError() instead")
    void databaseAccountsListSignalE(OAIDatabaseAccountsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListSignalError(OAIDatabaseAccountsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListByResourceGroupSignalError() instead")
    void databaseAccountsListByResourceGroupSignalE(OAIDatabaseAccountsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListByResourceGroupSignalError(OAIDatabaseAccountsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListConnectionStringsSignalError() instead")
    void databaseAccountsListConnectionStringsSignalE(OAIDatabaseAccountListConnectionStringsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListConnectionStringsSignalError(OAIDatabaseAccountListConnectionStringsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListKeysSignalError() instead")
    void databaseAccountsListKeysSignalE(OAIDatabaseAccountListKeysResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListKeysSignalError(OAIDatabaseAccountListKeysResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListMetricDefinitionsSignalError() instead")
    void databaseAccountsListMetricDefinitionsSignalE(OAIMetricDefinitionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListMetricDefinitionsSignalError(OAIMetricDefinitionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListMetricsSignalError() instead")
    void databaseAccountsListMetricsSignalE(OAIMetricListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListMetricsSignalError(OAIMetricListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListReadOnlyKeysSignalError() instead")
    void databaseAccountsListReadOnlyKeysSignalE(OAIDatabaseAccountListReadOnlyKeysResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListReadOnlyKeysSignalError(OAIDatabaseAccountListReadOnlyKeysResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListUsagesSignalError() instead")
    void databaseAccountsListUsagesSignalE(OAIUsagesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListUsagesSignalError(OAIUsagesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsOfflineRegionSignalError() instead")
    void databaseAccountsOfflineRegionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsOfflineRegionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsOnlineRegionSignalError() instead")
    void databaseAccountsOnlineRegionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsOnlineRegionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsRegenerateKeySignalError() instead")
    void databaseAccountsRegenerateKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsRegenerateKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsUpdateSignalError() instead")
    void databaseAccountsUpdateSignalE(OAIDatabaseAccountGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsUpdateSignalError(OAIDatabaseAccountGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseListMetricDefinitionsSignalError() instead")
    void databaseListMetricDefinitionsSignalE(OAIMetricDefinitionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseListMetricDefinitionsSignalError(OAIMetricDefinitionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseListMetricsSignalError() instead")
    void databaseListMetricsSignalE(OAIMetricListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseListMetricsSignalError(OAIMetricListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseListUsagesSignalError() instead")
    void databaseListUsagesSignalE(OAIUsagesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseListUsagesSignalError(OAIUsagesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gremlinResourcesCreateUpdateGremlinDatabaseSignalError() instead")
    void gremlinResourcesCreateUpdateGremlinDatabaseSignalE(OAIGremlinDatabaseGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gremlinResourcesCreateUpdateGremlinDatabaseSignalError(OAIGremlinDatabaseGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gremlinResourcesCreateUpdateGremlinGraphSignalError() instead")
    void gremlinResourcesCreateUpdateGremlinGraphSignalE(OAIGremlinGraphGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gremlinResourcesCreateUpdateGremlinGraphSignalError(OAIGremlinGraphGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gremlinResourcesDeleteGremlinDatabaseSignalError() instead")
    void gremlinResourcesDeleteGremlinDatabaseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gremlinResourcesDeleteGremlinDatabaseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gremlinResourcesDeleteGremlinGraphSignalError() instead")
    void gremlinResourcesDeleteGremlinGraphSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gremlinResourcesDeleteGremlinGraphSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gremlinResourcesGetGremlinDatabaseSignalError() instead")
    void gremlinResourcesGetGremlinDatabaseSignalE(OAIGremlinDatabaseGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gremlinResourcesGetGremlinDatabaseSignalError(OAIGremlinDatabaseGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gremlinResourcesGetGremlinDatabaseThroughputSignalError() instead")
    void gremlinResourcesGetGremlinDatabaseThroughputSignalE(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gremlinResourcesGetGremlinDatabaseThroughputSignalError(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gremlinResourcesGetGremlinGraphSignalError() instead")
    void gremlinResourcesGetGremlinGraphSignalE(OAIGremlinGraphGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gremlinResourcesGetGremlinGraphSignalError(OAIGremlinGraphGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gremlinResourcesGetGremlinGraphThroughputSignalError() instead")
    void gremlinResourcesGetGremlinGraphThroughputSignalE(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gremlinResourcesGetGremlinGraphThroughputSignalError(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gremlinResourcesListGremlinDatabasesSignalError() instead")
    void gremlinResourcesListGremlinDatabasesSignalE(OAIGremlinDatabaseListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gremlinResourcesListGremlinDatabasesSignalError(OAIGremlinDatabaseListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gremlinResourcesListGremlinGraphsSignalError() instead")
    void gremlinResourcesListGremlinGraphsSignalE(OAIGremlinGraphListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gremlinResourcesListGremlinGraphsSignalError(OAIGremlinGraphListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gremlinResourcesUpdateGremlinDatabaseThroughputSignalError() instead")
    void gremlinResourcesUpdateGremlinDatabaseThroughputSignalE(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gremlinResourcesUpdateGremlinDatabaseThroughputSignalError(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gremlinResourcesUpdateGremlinGraphThroughputSignalError() instead")
    void gremlinResourcesUpdateGremlinGraphThroughputSignalE(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gremlinResourcesUpdateGremlinGraphThroughputSignalError(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mongoDBResourcesCreateUpdateMongoDBCollectionSignalError() instead")
    void mongoDBResourcesCreateUpdateMongoDBCollectionSignalE(OAIMongoDBCollectionGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mongoDBResourcesCreateUpdateMongoDBCollectionSignalError(OAIMongoDBCollectionGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mongoDBResourcesCreateUpdateMongoDBDatabaseSignalError() instead")
    void mongoDBResourcesCreateUpdateMongoDBDatabaseSignalE(OAIMongoDBDatabaseGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mongoDBResourcesCreateUpdateMongoDBDatabaseSignalError(OAIMongoDBDatabaseGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mongoDBResourcesDeleteMongoDBCollectionSignalError() instead")
    void mongoDBResourcesDeleteMongoDBCollectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void mongoDBResourcesDeleteMongoDBCollectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mongoDBResourcesDeleteMongoDBDatabaseSignalError() instead")
    void mongoDBResourcesDeleteMongoDBDatabaseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void mongoDBResourcesDeleteMongoDBDatabaseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mongoDBResourcesGetMongoDBCollectionSignalError() instead")
    void mongoDBResourcesGetMongoDBCollectionSignalE(OAIMongoDBCollectionGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mongoDBResourcesGetMongoDBCollectionSignalError(OAIMongoDBCollectionGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mongoDBResourcesGetMongoDBCollectionThroughputSignalError() instead")
    void mongoDBResourcesGetMongoDBCollectionThroughputSignalE(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mongoDBResourcesGetMongoDBCollectionThroughputSignalError(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mongoDBResourcesGetMongoDBDatabaseSignalError() instead")
    void mongoDBResourcesGetMongoDBDatabaseSignalE(OAIMongoDBDatabaseGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mongoDBResourcesGetMongoDBDatabaseSignalError(OAIMongoDBDatabaseGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mongoDBResourcesGetMongoDBDatabaseThroughputSignalError() instead")
    void mongoDBResourcesGetMongoDBDatabaseThroughputSignalE(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mongoDBResourcesGetMongoDBDatabaseThroughputSignalError(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mongoDBResourcesListMongoDBCollectionsSignalError() instead")
    void mongoDBResourcesListMongoDBCollectionsSignalE(OAIMongoDBCollectionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mongoDBResourcesListMongoDBCollectionsSignalError(OAIMongoDBCollectionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mongoDBResourcesListMongoDBDatabasesSignalError() instead")
    void mongoDBResourcesListMongoDBDatabasesSignalE(OAIMongoDBDatabaseListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mongoDBResourcesListMongoDBDatabasesSignalError(OAIMongoDBDatabaseListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mongoDBResourcesUpdateMongoDBCollectionThroughputSignalError() instead")
    void mongoDBResourcesUpdateMongoDBCollectionThroughputSignalE(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mongoDBResourcesUpdateMongoDBCollectionThroughputSignalError(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mongoDBResourcesUpdateMongoDBDatabaseThroughputSignalError() instead")
    void mongoDBResourcesUpdateMongoDBDatabaseThroughputSignalE(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mongoDBResourcesUpdateMongoDBDatabaseThroughputSignalError(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partitionKeyRangeIdListMetricsSignalError() instead")
    void partitionKeyRangeIdListMetricsSignalE(OAIPartitionMetricListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void partitionKeyRangeIdListMetricsSignalError(OAIPartitionMetricListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partitionKeyRangeIdRegionListMetricsSignalError() instead")
    void partitionKeyRangeIdRegionListMetricsSignalE(OAIPartitionMetricListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void partitionKeyRangeIdRegionListMetricsSignalError(OAIPartitionMetricListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use percentileListMetricsSignalError() instead")
    void percentileListMetricsSignalE(OAIPercentileMetricListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void percentileListMetricsSignalError(OAIPercentileMetricListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use percentileSourceTargetListMetricsSignalError() instead")
    void percentileSourceTargetListMetricsSignalE(OAIPercentileMetricListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void percentileSourceTargetListMetricsSignalError(OAIPercentileMetricListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use percentileTargetListMetricsSignalError() instead")
    void percentileTargetListMetricsSignalE(OAIPercentileMetricListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void percentileTargetListMetricsSignalError(OAIPercentileMetricListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesCreateUpdateSqlContainerSignalError() instead")
    void sqlResourcesCreateUpdateSqlContainerSignalE(OAISqlContainerGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesCreateUpdateSqlContainerSignalError(OAISqlContainerGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesCreateUpdateSqlDatabaseSignalError() instead")
    void sqlResourcesCreateUpdateSqlDatabaseSignalE(OAISqlDatabaseGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesCreateUpdateSqlDatabaseSignalError(OAISqlDatabaseGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesCreateUpdateSqlStoredProcedureSignalError() instead")
    void sqlResourcesCreateUpdateSqlStoredProcedureSignalE(OAISqlStoredProcedureGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesCreateUpdateSqlStoredProcedureSignalError(OAISqlStoredProcedureGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesCreateUpdateSqlTriggerSignalError() instead")
    void sqlResourcesCreateUpdateSqlTriggerSignalE(OAISqlTriggerGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesCreateUpdateSqlTriggerSignalError(OAISqlTriggerGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesCreateUpdateSqlUserDefinedFunctionSignalError() instead")
    void sqlResourcesCreateUpdateSqlUserDefinedFunctionSignalE(OAISqlUserDefinedFunctionGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesCreateUpdateSqlUserDefinedFunctionSignalError(OAISqlUserDefinedFunctionGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesDeleteSqlContainerSignalError() instead")
    void sqlResourcesDeleteSqlContainerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesDeleteSqlContainerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesDeleteSqlDatabaseSignalError() instead")
    void sqlResourcesDeleteSqlDatabaseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesDeleteSqlDatabaseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesDeleteSqlStoredProcedureSignalError() instead")
    void sqlResourcesDeleteSqlStoredProcedureSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesDeleteSqlStoredProcedureSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesDeleteSqlTriggerSignalError() instead")
    void sqlResourcesDeleteSqlTriggerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesDeleteSqlTriggerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesDeleteSqlUserDefinedFunctionSignalError() instead")
    void sqlResourcesDeleteSqlUserDefinedFunctionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesDeleteSqlUserDefinedFunctionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesGetSqlContainerSignalError() instead")
    void sqlResourcesGetSqlContainerSignalE(OAISqlContainerGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesGetSqlContainerSignalError(OAISqlContainerGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesGetSqlContainerThroughputSignalError() instead")
    void sqlResourcesGetSqlContainerThroughputSignalE(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesGetSqlContainerThroughputSignalError(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesGetSqlDatabaseSignalError() instead")
    void sqlResourcesGetSqlDatabaseSignalE(OAISqlDatabaseGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesGetSqlDatabaseSignalError(OAISqlDatabaseGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesGetSqlDatabaseThroughputSignalError() instead")
    void sqlResourcesGetSqlDatabaseThroughputSignalE(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesGetSqlDatabaseThroughputSignalError(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesGetSqlStoredProcedureSignalError() instead")
    void sqlResourcesGetSqlStoredProcedureSignalE(OAISqlStoredProcedureGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesGetSqlStoredProcedureSignalError(OAISqlStoredProcedureGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesGetSqlTriggerSignalError() instead")
    void sqlResourcesGetSqlTriggerSignalE(OAISqlTriggerGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesGetSqlTriggerSignalError(OAISqlTriggerGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesGetSqlUserDefinedFunctionSignalError() instead")
    void sqlResourcesGetSqlUserDefinedFunctionSignalE(OAISqlUserDefinedFunctionGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesGetSqlUserDefinedFunctionSignalError(OAISqlUserDefinedFunctionGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesListSqlContainersSignalError() instead")
    void sqlResourcesListSqlContainersSignalE(OAISqlContainerListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesListSqlContainersSignalError(OAISqlContainerListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesListSqlDatabasesSignalError() instead")
    void sqlResourcesListSqlDatabasesSignalE(OAISqlDatabaseListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesListSqlDatabasesSignalError(OAISqlDatabaseListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesListSqlStoredProceduresSignalError() instead")
    void sqlResourcesListSqlStoredProceduresSignalE(OAISqlStoredProcedureListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesListSqlStoredProceduresSignalError(OAISqlStoredProcedureListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesListSqlTriggersSignalError() instead")
    void sqlResourcesListSqlTriggersSignalE(OAISqlTriggerListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesListSqlTriggersSignalError(OAISqlTriggerListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesListSqlUserDefinedFunctionsSignalError() instead")
    void sqlResourcesListSqlUserDefinedFunctionsSignalE(OAISqlUserDefinedFunctionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesListSqlUserDefinedFunctionsSignalError(OAISqlUserDefinedFunctionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesUpdateSqlContainerThroughputSignalError() instead")
    void sqlResourcesUpdateSqlContainerThroughputSignalE(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesUpdateSqlContainerThroughputSignalError(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesUpdateSqlDatabaseThroughputSignalError() instead")
    void sqlResourcesUpdateSqlDatabaseThroughputSignalE(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesUpdateSqlDatabaseThroughputSignalError(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tableResourcesCreateUpdateTableSignalError() instead")
    void tableResourcesCreateUpdateTableSignalE(OAITableGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tableResourcesCreateUpdateTableSignalError(OAITableGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tableResourcesDeleteTableSignalError() instead")
    void tableResourcesDeleteTableSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tableResourcesDeleteTableSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tableResourcesGetTableSignalError() instead")
    void tableResourcesGetTableSignalE(OAITableGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tableResourcesGetTableSignalError(OAITableGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tableResourcesGetTableThroughputSignalError() instead")
    void tableResourcesGetTableThroughputSignalE(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tableResourcesGetTableThroughputSignalError(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tableResourcesListTablesSignalError() instead")
    void tableResourcesListTablesSignalE(OAITableListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tableResourcesListTablesSignalError(OAITableListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tableResourcesUpdateTableThroughputSignalError() instead")
    void tableResourcesUpdateTableThroughputSignalE(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tableResourcesUpdateTableThroughputSignalError(OAIThroughputSettingsGetResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cassandraResourcesCreateUpdateCassandraKeyspaceSignalErrorFull() instead")
    void cassandraResourcesCreateUpdateCassandraKeyspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cassandraResourcesCreateUpdateCassandraKeyspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cassandraResourcesCreateUpdateCassandraTableSignalErrorFull() instead")
    void cassandraResourcesCreateUpdateCassandraTableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cassandraResourcesCreateUpdateCassandraTableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cassandraResourcesDeleteCassandraKeyspaceSignalErrorFull() instead")
    void cassandraResourcesDeleteCassandraKeyspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cassandraResourcesDeleteCassandraKeyspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cassandraResourcesDeleteCassandraTableSignalErrorFull() instead")
    void cassandraResourcesDeleteCassandraTableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cassandraResourcesDeleteCassandraTableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cassandraResourcesGetCassandraKeyspaceSignalErrorFull() instead")
    void cassandraResourcesGetCassandraKeyspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cassandraResourcesGetCassandraKeyspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cassandraResourcesGetCassandraKeyspaceThroughputSignalErrorFull() instead")
    void cassandraResourcesGetCassandraKeyspaceThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cassandraResourcesGetCassandraKeyspaceThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cassandraResourcesGetCassandraTableSignalErrorFull() instead")
    void cassandraResourcesGetCassandraTableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cassandraResourcesGetCassandraTableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cassandraResourcesGetCassandraTableThroughputSignalErrorFull() instead")
    void cassandraResourcesGetCassandraTableThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cassandraResourcesGetCassandraTableThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cassandraResourcesListCassandraKeyspacesSignalErrorFull() instead")
    void cassandraResourcesListCassandraKeyspacesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cassandraResourcesListCassandraKeyspacesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cassandraResourcesListCassandraTablesSignalErrorFull() instead")
    void cassandraResourcesListCassandraTablesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cassandraResourcesListCassandraTablesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cassandraResourcesUpdateCassandraKeyspaceThroughputSignalErrorFull() instead")
    void cassandraResourcesUpdateCassandraKeyspaceThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cassandraResourcesUpdateCassandraKeyspaceThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cassandraResourcesUpdateCassandraTableThroughputSignalErrorFull() instead")
    void cassandraResourcesUpdateCassandraTableThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cassandraResourcesUpdateCassandraTableThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionListMetricDefinitionsSignalErrorFull() instead")
    void collectionListMetricDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionListMetricDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionListMetricsSignalErrorFull() instead")
    void collectionListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionListUsagesSignalErrorFull() instead")
    void collectionListUsagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionListUsagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionPartitionListMetricsSignalErrorFull() instead")
    void collectionPartitionListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionPartitionListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionPartitionListUsagesSignalErrorFull() instead")
    void collectionPartitionListUsagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionPartitionListUsagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionPartitionRegionListMetricsSignalErrorFull() instead")
    void collectionPartitionRegionListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionPartitionRegionListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionRegionListMetricsSignalErrorFull() instead")
    void collectionRegionListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionRegionListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountRegionListMetricsSignalErrorFull() instead")
    void databaseAccountRegionListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountRegionListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsCheckNameExistsSignalErrorFull() instead")
    void databaseAccountsCheckNameExistsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsCheckNameExistsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsCreateOrUpdateSignalErrorFull() instead")
    void databaseAccountsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsDeleteSignalErrorFull() instead")
    void databaseAccountsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsFailoverPriorityChangeSignalErrorFull() instead")
    void databaseAccountsFailoverPriorityChangeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsFailoverPriorityChangeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetSignalErrorFull() instead")
    void databaseAccountsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetReadOnlyKeysSignalErrorFull() instead")
    void databaseAccountsGetReadOnlyKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetReadOnlyKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListSignalErrorFull() instead")
    void databaseAccountsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListByResourceGroupSignalErrorFull() instead")
    void databaseAccountsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListConnectionStringsSignalErrorFull() instead")
    void databaseAccountsListConnectionStringsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListConnectionStringsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListKeysSignalErrorFull() instead")
    void databaseAccountsListKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListMetricDefinitionsSignalErrorFull() instead")
    void databaseAccountsListMetricDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListMetricDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListMetricsSignalErrorFull() instead")
    void databaseAccountsListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListReadOnlyKeysSignalErrorFull() instead")
    void databaseAccountsListReadOnlyKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListReadOnlyKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListUsagesSignalErrorFull() instead")
    void databaseAccountsListUsagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListUsagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsOfflineRegionSignalErrorFull() instead")
    void databaseAccountsOfflineRegionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsOfflineRegionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsOnlineRegionSignalErrorFull() instead")
    void databaseAccountsOnlineRegionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsOnlineRegionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsRegenerateKeySignalErrorFull() instead")
    void databaseAccountsRegenerateKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsRegenerateKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsUpdateSignalErrorFull() instead")
    void databaseAccountsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseListMetricDefinitionsSignalErrorFull() instead")
    void databaseListMetricDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseListMetricDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseListMetricsSignalErrorFull() instead")
    void databaseListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseListUsagesSignalErrorFull() instead")
    void databaseListUsagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseListUsagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gremlinResourcesCreateUpdateGremlinDatabaseSignalErrorFull() instead")
    void gremlinResourcesCreateUpdateGremlinDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gremlinResourcesCreateUpdateGremlinDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gremlinResourcesCreateUpdateGremlinGraphSignalErrorFull() instead")
    void gremlinResourcesCreateUpdateGremlinGraphSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gremlinResourcesCreateUpdateGremlinGraphSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gremlinResourcesDeleteGremlinDatabaseSignalErrorFull() instead")
    void gremlinResourcesDeleteGremlinDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gremlinResourcesDeleteGremlinDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gremlinResourcesDeleteGremlinGraphSignalErrorFull() instead")
    void gremlinResourcesDeleteGremlinGraphSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gremlinResourcesDeleteGremlinGraphSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gremlinResourcesGetGremlinDatabaseSignalErrorFull() instead")
    void gremlinResourcesGetGremlinDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gremlinResourcesGetGremlinDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gremlinResourcesGetGremlinDatabaseThroughputSignalErrorFull() instead")
    void gremlinResourcesGetGremlinDatabaseThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gremlinResourcesGetGremlinDatabaseThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gremlinResourcesGetGremlinGraphSignalErrorFull() instead")
    void gremlinResourcesGetGremlinGraphSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gremlinResourcesGetGremlinGraphSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gremlinResourcesGetGremlinGraphThroughputSignalErrorFull() instead")
    void gremlinResourcesGetGremlinGraphThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gremlinResourcesGetGremlinGraphThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gremlinResourcesListGremlinDatabasesSignalErrorFull() instead")
    void gremlinResourcesListGremlinDatabasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gremlinResourcesListGremlinDatabasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gremlinResourcesListGremlinGraphsSignalErrorFull() instead")
    void gremlinResourcesListGremlinGraphsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gremlinResourcesListGremlinGraphsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gremlinResourcesUpdateGremlinDatabaseThroughputSignalErrorFull() instead")
    void gremlinResourcesUpdateGremlinDatabaseThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gremlinResourcesUpdateGremlinDatabaseThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gremlinResourcesUpdateGremlinGraphThroughputSignalErrorFull() instead")
    void gremlinResourcesUpdateGremlinGraphThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gremlinResourcesUpdateGremlinGraphThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mongoDBResourcesCreateUpdateMongoDBCollectionSignalErrorFull() instead")
    void mongoDBResourcesCreateUpdateMongoDBCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mongoDBResourcesCreateUpdateMongoDBCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mongoDBResourcesCreateUpdateMongoDBDatabaseSignalErrorFull() instead")
    void mongoDBResourcesCreateUpdateMongoDBDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mongoDBResourcesCreateUpdateMongoDBDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mongoDBResourcesDeleteMongoDBCollectionSignalErrorFull() instead")
    void mongoDBResourcesDeleteMongoDBCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mongoDBResourcesDeleteMongoDBCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mongoDBResourcesDeleteMongoDBDatabaseSignalErrorFull() instead")
    void mongoDBResourcesDeleteMongoDBDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mongoDBResourcesDeleteMongoDBDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mongoDBResourcesGetMongoDBCollectionSignalErrorFull() instead")
    void mongoDBResourcesGetMongoDBCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mongoDBResourcesGetMongoDBCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mongoDBResourcesGetMongoDBCollectionThroughputSignalErrorFull() instead")
    void mongoDBResourcesGetMongoDBCollectionThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mongoDBResourcesGetMongoDBCollectionThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mongoDBResourcesGetMongoDBDatabaseSignalErrorFull() instead")
    void mongoDBResourcesGetMongoDBDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mongoDBResourcesGetMongoDBDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mongoDBResourcesGetMongoDBDatabaseThroughputSignalErrorFull() instead")
    void mongoDBResourcesGetMongoDBDatabaseThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mongoDBResourcesGetMongoDBDatabaseThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mongoDBResourcesListMongoDBCollectionsSignalErrorFull() instead")
    void mongoDBResourcesListMongoDBCollectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mongoDBResourcesListMongoDBCollectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mongoDBResourcesListMongoDBDatabasesSignalErrorFull() instead")
    void mongoDBResourcesListMongoDBDatabasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mongoDBResourcesListMongoDBDatabasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mongoDBResourcesUpdateMongoDBCollectionThroughputSignalErrorFull() instead")
    void mongoDBResourcesUpdateMongoDBCollectionThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mongoDBResourcesUpdateMongoDBCollectionThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mongoDBResourcesUpdateMongoDBDatabaseThroughputSignalErrorFull() instead")
    void mongoDBResourcesUpdateMongoDBDatabaseThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mongoDBResourcesUpdateMongoDBDatabaseThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partitionKeyRangeIdListMetricsSignalErrorFull() instead")
    void partitionKeyRangeIdListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partitionKeyRangeIdListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partitionKeyRangeIdRegionListMetricsSignalErrorFull() instead")
    void partitionKeyRangeIdRegionListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partitionKeyRangeIdRegionListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use percentileListMetricsSignalErrorFull() instead")
    void percentileListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void percentileListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use percentileSourceTargetListMetricsSignalErrorFull() instead")
    void percentileSourceTargetListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void percentileSourceTargetListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use percentileTargetListMetricsSignalErrorFull() instead")
    void percentileTargetListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void percentileTargetListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesCreateUpdateSqlContainerSignalErrorFull() instead")
    void sqlResourcesCreateUpdateSqlContainerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesCreateUpdateSqlContainerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesCreateUpdateSqlDatabaseSignalErrorFull() instead")
    void sqlResourcesCreateUpdateSqlDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesCreateUpdateSqlDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesCreateUpdateSqlStoredProcedureSignalErrorFull() instead")
    void sqlResourcesCreateUpdateSqlStoredProcedureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesCreateUpdateSqlStoredProcedureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesCreateUpdateSqlTriggerSignalErrorFull() instead")
    void sqlResourcesCreateUpdateSqlTriggerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesCreateUpdateSqlTriggerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesCreateUpdateSqlUserDefinedFunctionSignalErrorFull() instead")
    void sqlResourcesCreateUpdateSqlUserDefinedFunctionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesCreateUpdateSqlUserDefinedFunctionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesDeleteSqlContainerSignalErrorFull() instead")
    void sqlResourcesDeleteSqlContainerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesDeleteSqlContainerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesDeleteSqlDatabaseSignalErrorFull() instead")
    void sqlResourcesDeleteSqlDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesDeleteSqlDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesDeleteSqlStoredProcedureSignalErrorFull() instead")
    void sqlResourcesDeleteSqlStoredProcedureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesDeleteSqlStoredProcedureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesDeleteSqlTriggerSignalErrorFull() instead")
    void sqlResourcesDeleteSqlTriggerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesDeleteSqlTriggerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesDeleteSqlUserDefinedFunctionSignalErrorFull() instead")
    void sqlResourcesDeleteSqlUserDefinedFunctionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesDeleteSqlUserDefinedFunctionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesGetSqlContainerSignalErrorFull() instead")
    void sqlResourcesGetSqlContainerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesGetSqlContainerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesGetSqlContainerThroughputSignalErrorFull() instead")
    void sqlResourcesGetSqlContainerThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesGetSqlContainerThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesGetSqlDatabaseSignalErrorFull() instead")
    void sqlResourcesGetSqlDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesGetSqlDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesGetSqlDatabaseThroughputSignalErrorFull() instead")
    void sqlResourcesGetSqlDatabaseThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesGetSqlDatabaseThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesGetSqlStoredProcedureSignalErrorFull() instead")
    void sqlResourcesGetSqlStoredProcedureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesGetSqlStoredProcedureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesGetSqlTriggerSignalErrorFull() instead")
    void sqlResourcesGetSqlTriggerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesGetSqlTriggerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesGetSqlUserDefinedFunctionSignalErrorFull() instead")
    void sqlResourcesGetSqlUserDefinedFunctionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesGetSqlUserDefinedFunctionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesListSqlContainersSignalErrorFull() instead")
    void sqlResourcesListSqlContainersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesListSqlContainersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesListSqlDatabasesSignalErrorFull() instead")
    void sqlResourcesListSqlDatabasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesListSqlDatabasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesListSqlStoredProceduresSignalErrorFull() instead")
    void sqlResourcesListSqlStoredProceduresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesListSqlStoredProceduresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesListSqlTriggersSignalErrorFull() instead")
    void sqlResourcesListSqlTriggersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesListSqlTriggersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesListSqlUserDefinedFunctionsSignalErrorFull() instead")
    void sqlResourcesListSqlUserDefinedFunctionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesListSqlUserDefinedFunctionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesUpdateSqlContainerThroughputSignalErrorFull() instead")
    void sqlResourcesUpdateSqlContainerThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesUpdateSqlContainerThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sqlResourcesUpdateSqlDatabaseThroughputSignalErrorFull() instead")
    void sqlResourcesUpdateSqlDatabaseThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sqlResourcesUpdateSqlDatabaseThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tableResourcesCreateUpdateTableSignalErrorFull() instead")
    void tableResourcesCreateUpdateTableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tableResourcesCreateUpdateTableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tableResourcesDeleteTableSignalErrorFull() instead")
    void tableResourcesDeleteTableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tableResourcesDeleteTableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tableResourcesGetTableSignalErrorFull() instead")
    void tableResourcesGetTableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tableResourcesGetTableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tableResourcesGetTableThroughputSignalErrorFull() instead")
    void tableResourcesGetTableThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tableResourcesGetTableThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tableResourcesListTablesSignalErrorFull() instead")
    void tableResourcesListTablesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tableResourcesListTablesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tableResourcesUpdateTableThroughputSignalErrorFull() instead")
    void tableResourcesUpdateTableThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tableResourcesUpdateTableThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
