/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocation::OAILocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocation::OAILocation() {
    this->initializeModel();
}

OAILocation::~OAILocation() {}

void OAILocation::initializeModel() {

    m_document_endpoint_isSet = false;
    m_document_endpoint_isValid = false;

    m_failover_priority_isSet = false;
    m_failover_priority_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_zone_redundant_isSet = false;
    m_is_zone_redundant_isValid = false;

    m_location_name_isSet = false;
    m_location_name_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAILocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocation::fromJsonObject(QJsonObject json) {

    m_document_endpoint_isValid = ::OpenAPI::fromJsonValue(m_document_endpoint, json[QString("documentEndpoint")]);
    m_document_endpoint_isSet = !json[QString("documentEndpoint")].isNull() && m_document_endpoint_isValid;

    m_failover_priority_isValid = ::OpenAPI::fromJsonValue(m_failover_priority, json[QString("failoverPriority")]);
    m_failover_priority_isSet = !json[QString("failoverPriority")].isNull() && m_failover_priority_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_zone_redundant_isValid = ::OpenAPI::fromJsonValue(m_is_zone_redundant, json[QString("isZoneRedundant")]);
    m_is_zone_redundant_isSet = !json[QString("isZoneRedundant")].isNull() && m_is_zone_redundant_isValid;

    m_location_name_isValid = ::OpenAPI::fromJsonValue(m_location_name, json[QString("locationName")]);
    m_location_name_isSet = !json[QString("locationName")].isNull() && m_location_name_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAILocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocation::asJsonObject() const {
    QJsonObject obj;
    if (m_document_endpoint_isSet) {
        obj.insert(QString("documentEndpoint"), ::OpenAPI::toJsonValue(m_document_endpoint));
    }
    if (m_failover_priority_isSet) {
        obj.insert(QString("failoverPriority"), ::OpenAPI::toJsonValue(m_failover_priority));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_zone_redundant_isSet) {
        obj.insert(QString("isZoneRedundant"), ::OpenAPI::toJsonValue(m_is_zone_redundant));
    }
    if (m_location_name_isSet) {
        obj.insert(QString("locationName"), ::OpenAPI::toJsonValue(m_location_name));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

QString OAILocation::getDocumentEndpoint() const {
    return m_document_endpoint;
}
void OAILocation::setDocumentEndpoint(const QString &document_endpoint) {
    m_document_endpoint = document_endpoint;
    m_document_endpoint_isSet = true;
}

bool OAILocation::is_document_endpoint_Set() const{
    return m_document_endpoint_isSet;
}

bool OAILocation::is_document_endpoint_Valid() const{
    return m_document_endpoint_isValid;
}

qint32 OAILocation::getFailoverPriority() const {
    return m_failover_priority;
}
void OAILocation::setFailoverPriority(const qint32 &failover_priority) {
    m_failover_priority = failover_priority;
    m_failover_priority_isSet = true;
}

bool OAILocation::is_failover_priority_Set() const{
    return m_failover_priority_isSet;
}

bool OAILocation::is_failover_priority_Valid() const{
    return m_failover_priority_isValid;
}

QString OAILocation::getId() const {
    return m_id;
}
void OAILocation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILocation::is_id_Set() const{
    return m_id_isSet;
}

bool OAILocation::is_id_Valid() const{
    return m_id_isValid;
}

bool OAILocation::isIsZoneRedundant() const {
    return m_is_zone_redundant;
}
void OAILocation::setIsZoneRedundant(const bool &is_zone_redundant) {
    m_is_zone_redundant = is_zone_redundant;
    m_is_zone_redundant_isSet = true;
}

bool OAILocation::is_is_zone_redundant_Set() const{
    return m_is_zone_redundant_isSet;
}

bool OAILocation::is_is_zone_redundant_Valid() const{
    return m_is_zone_redundant_isValid;
}

QString OAILocation::getLocationName() const {
    return m_location_name;
}
void OAILocation::setLocationName(const QString &location_name) {
    m_location_name = location_name;
    m_location_name_isSet = true;
}

bool OAILocation::is_location_name_Set() const{
    return m_location_name_isSet;
}

bool OAILocation::is_location_name_Valid() const{
    return m_location_name_isValid;
}

QString OAILocation::getProvisioningState() const {
    return m_provisioning_state;
}
void OAILocation::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAILocation::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAILocation::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAILocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failover_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_zone_redundant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
