/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMongoIndexOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMongoIndexOptions::OAIMongoIndexOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMongoIndexOptions::OAIMongoIndexOptions() {
    this->initializeModel();
}

OAIMongoIndexOptions::~OAIMongoIndexOptions() {}

void OAIMongoIndexOptions::initializeModel() {

    m_expire_after_seconds_isSet = false;
    m_expire_after_seconds_isValid = false;

    m_unique_isSet = false;
    m_unique_isValid = false;
}

void OAIMongoIndexOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMongoIndexOptions::fromJsonObject(QJsonObject json) {

    m_expire_after_seconds_isValid = ::OpenAPI::fromJsonValue(m_expire_after_seconds, json[QString("expireAfterSeconds")]);
    m_expire_after_seconds_isSet = !json[QString("expireAfterSeconds")].isNull() && m_expire_after_seconds_isValid;

    m_unique_isValid = ::OpenAPI::fromJsonValue(m_unique, json[QString("unique")]);
    m_unique_isSet = !json[QString("unique")].isNull() && m_unique_isValid;
}

QString OAIMongoIndexOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMongoIndexOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_expire_after_seconds_isSet) {
        obj.insert(QString("expireAfterSeconds"), ::OpenAPI::toJsonValue(m_expire_after_seconds));
    }
    if (m_unique_isSet) {
        obj.insert(QString("unique"), ::OpenAPI::toJsonValue(m_unique));
    }
    return obj;
}

qint32 OAIMongoIndexOptions::getExpireAfterSeconds() const {
    return m_expire_after_seconds;
}
void OAIMongoIndexOptions::setExpireAfterSeconds(const qint32 &expire_after_seconds) {
    m_expire_after_seconds = expire_after_seconds;
    m_expire_after_seconds_isSet = true;
}

bool OAIMongoIndexOptions::is_expire_after_seconds_Set() const{
    return m_expire_after_seconds_isSet;
}

bool OAIMongoIndexOptions::is_expire_after_seconds_Valid() const{
    return m_expire_after_seconds_isValid;
}

bool OAIMongoIndexOptions::isUnique() const {
    return m_unique;
}
void OAIMongoIndexOptions::setUnique(const bool &unique) {
    m_unique = unique;
    m_unique_isSet = true;
}

bool OAIMongoIndexOptions::is_unique_Set() const{
    return m_unique_isSet;
}

bool OAIMongoIndexOptions::is_unique_Valid() const{
    return m_unique_isValid;
}

bool OAIMongoIndexOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expire_after_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMongoIndexOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
