/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThroughputSettingsResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThroughputSettingsResource::OAIThroughputSettingsResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThroughputSettingsResource::OAIThroughputSettingsResource() {
    this->initializeModel();
}

OAIThroughputSettingsResource::~OAIThroughputSettingsResource() {}

void OAIThroughputSettingsResource::initializeModel() {

    m_minimum_throughput_isSet = false;
    m_minimum_throughput_isValid = false;

    m_offer_replace_pending_isSet = false;
    m_offer_replace_pending_isValid = false;

    m_throughput_isSet = false;
    m_throughput_isValid = false;
}

void OAIThroughputSettingsResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThroughputSettingsResource::fromJsonObject(QJsonObject json) {

    m_minimum_throughput_isValid = ::OpenAPI::fromJsonValue(m_minimum_throughput, json[QString("minimumThroughput")]);
    m_minimum_throughput_isSet = !json[QString("minimumThroughput")].isNull() && m_minimum_throughput_isValid;

    m_offer_replace_pending_isValid = ::OpenAPI::fromJsonValue(m_offer_replace_pending, json[QString("offerReplacePending")]);
    m_offer_replace_pending_isSet = !json[QString("offerReplacePending")].isNull() && m_offer_replace_pending_isValid;

    m_throughput_isValid = ::OpenAPI::fromJsonValue(m_throughput, json[QString("throughput")]);
    m_throughput_isSet = !json[QString("throughput")].isNull() && m_throughput_isValid;
}

QString OAIThroughputSettingsResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThroughputSettingsResource::asJsonObject() const {
    QJsonObject obj;
    if (m_minimum_throughput_isSet) {
        obj.insert(QString("minimumThroughput"), ::OpenAPI::toJsonValue(m_minimum_throughput));
    }
    if (m_offer_replace_pending_isSet) {
        obj.insert(QString("offerReplacePending"), ::OpenAPI::toJsonValue(m_offer_replace_pending));
    }
    if (m_throughput_isSet) {
        obj.insert(QString("throughput"), ::OpenAPI::toJsonValue(m_throughput));
    }
    return obj;
}

QString OAIThroughputSettingsResource::getMinimumThroughput() const {
    return m_minimum_throughput;
}
void OAIThroughputSettingsResource::setMinimumThroughput(const QString &minimum_throughput) {
    m_minimum_throughput = minimum_throughput;
    m_minimum_throughput_isSet = true;
}

bool OAIThroughputSettingsResource::is_minimum_throughput_Set() const{
    return m_minimum_throughput_isSet;
}

bool OAIThroughputSettingsResource::is_minimum_throughput_Valid() const{
    return m_minimum_throughput_isValid;
}

QString OAIThroughputSettingsResource::getOfferReplacePending() const {
    return m_offer_replace_pending;
}
void OAIThroughputSettingsResource::setOfferReplacePending(const QString &offer_replace_pending) {
    m_offer_replace_pending = offer_replace_pending;
    m_offer_replace_pending_isSet = true;
}

bool OAIThroughputSettingsResource::is_offer_replace_pending_Set() const{
    return m_offer_replace_pending_isSet;
}

bool OAIThroughputSettingsResource::is_offer_replace_pending_Valid() const{
    return m_offer_replace_pending_isValid;
}

qint32 OAIThroughputSettingsResource::getThroughput() const {
    return m_throughput;
}
void OAIThroughputSettingsResource::setThroughput(const qint32 &throughput) {
    m_throughput = throughput;
    m_throughput_isSet = true;
}

bool OAIThroughputSettingsResource::is_throughput_Set() const{
    return m_throughput_isSet;
}

bool OAIThroughputSettingsResource::is_throughput_Valid() const{
    return m_throughput_isValid;
}

bool OAIThroughputSettingsResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_minimum_throughput_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_replace_pending_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_throughput_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThroughputSettingsResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_throughput_isValid && true;
}

} // namespace OpenAPI
