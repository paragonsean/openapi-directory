/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetricValue from './MetricValue';

/**
 * The PercentileMetricValue model module.
 * @module model/PercentileMetricValue
 * @version 2019-08-01
 */
class PercentileMetricValue {
    /**
     * Constructs a new <code>PercentileMetricValue</code>.
     * Represents percentile metrics values.
     * @alias module:model/PercentileMetricValue
     * @implements module:model/MetricValue
     */
    constructor() { 
        MetricValue.initialize(this);
        PercentileMetricValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PercentileMetricValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PercentileMetricValue} obj Optional instance to populate.
     * @return {module:model/PercentileMetricValue} The populated <code>PercentileMetricValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PercentileMetricValue();
            MetricValue.constructFromObject(data, obj);

            if (data.hasOwnProperty('P10')) {
                obj['P10'] = ApiClient.convertToType(data['P10'], 'Number');
            }
            if (data.hasOwnProperty('P25')) {
                obj['P25'] = ApiClient.convertToType(data['P25'], 'Number');
            }
            if (data.hasOwnProperty('P50')) {
                obj['P50'] = ApiClient.convertToType(data['P50'], 'Number');
            }
            if (data.hasOwnProperty('P75')) {
                obj['P75'] = ApiClient.convertToType(data['P75'], 'Number');
            }
            if (data.hasOwnProperty('P90')) {
                obj['P90'] = ApiClient.convertToType(data['P90'], 'Number');
            }
            if (data.hasOwnProperty('P95')) {
                obj['P95'] = ApiClient.convertToType(data['P95'], 'Number');
            }
            if (data.hasOwnProperty('P99')) {
                obj['P99'] = ApiClient.convertToType(data['P99'], 'Number');
            }
            if (data.hasOwnProperty('_count')) {
                obj['_count'] = ApiClient.convertToType(data['_count'], 'Number');
            }
            if (data.hasOwnProperty('average')) {
                obj['average'] = ApiClient.convertToType(data['average'], 'Number');
            }
            if (data.hasOwnProperty('maximum')) {
                obj['maximum'] = ApiClient.convertToType(data['maximum'], 'Number');
            }
            if (data.hasOwnProperty('minimum')) {
                obj['minimum'] = ApiClient.convertToType(data['minimum'], 'Number');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PercentileMetricValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PercentileMetricValue</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * The 10th percentile value for the metric.
 * @member {Number} P10
 */
PercentileMetricValue.prototype['P10'] = undefined;

/**
 * The 25th percentile value for the metric.
 * @member {Number} P25
 */
PercentileMetricValue.prototype['P25'] = undefined;

/**
 * The 50th percentile value for the metric.
 * @member {Number} P50
 */
PercentileMetricValue.prototype['P50'] = undefined;

/**
 * The 75th percentile value for the metric.
 * @member {Number} P75
 */
PercentileMetricValue.prototype['P75'] = undefined;

/**
 * The 90th percentile value for the metric.
 * @member {Number} P90
 */
PercentileMetricValue.prototype['P90'] = undefined;

/**
 * The 95th percentile value for the metric.
 * @member {Number} P95
 */
PercentileMetricValue.prototype['P95'] = undefined;

/**
 * The 99th percentile value for the metric.
 * @member {Number} P99
 */
PercentileMetricValue.prototype['P99'] = undefined;

/**
 * The number of values for the metric.
 * @member {Number} _count
 */
PercentileMetricValue.prototype['_count'] = undefined;

/**
 * The average value of the metric.
 * @member {Number} average
 */
PercentileMetricValue.prototype['average'] = undefined;

/**
 * The max value of the metric.
 * @member {Number} maximum
 */
PercentileMetricValue.prototype['maximum'] = undefined;

/**
 * The min value of the metric.
 * @member {Number} minimum
 */
PercentileMetricValue.prototype['minimum'] = undefined;

/**
 * The metric timestamp (ISO-8601 format).
 * @member {Date} timestamp
 */
PercentileMetricValue.prototype['timestamp'] = undefined;

/**
 * The total value of the metric.
 * @member {Number} total
 */
PercentileMetricValue.prototype['total'] = undefined;


// Implement MetricValue interface:
/**
 * The number of values for the metric.
 * @member {Number} _count
 */
MetricValue.prototype['_count'] = undefined;
/**
 * The average value of the metric.
 * @member {Number} average
 */
MetricValue.prototype['average'] = undefined;
/**
 * The max value of the metric.
 * @member {Number} maximum
 */
MetricValue.prototype['maximum'] = undefined;
/**
 * The min value of the metric.
 * @member {Number} minimum
 */
MetricValue.prototype['minimum'] = undefined;
/**
 * The metric timestamp (ISO-8601 format).
 * @member {Date} timestamp
 */
MetricValue.prototype['timestamp'] = undefined;
/**
 * The total value of the metric.
 * @member {Number} total
 */
MetricValue.prototype['total'] = undefined;




export default PercentileMetricValue;

