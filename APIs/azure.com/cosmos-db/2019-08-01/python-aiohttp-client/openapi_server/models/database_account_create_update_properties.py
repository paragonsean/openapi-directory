# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.capability import Capability
from openapi_server.models.connector_offer import ConnectorOffer
from openapi_server.models.consistency_policy import ConsistencyPolicy
from openapi_server.models.database_account_offer_type import DatabaseAccountOfferType
from openapi_server.models.location import Location
from openapi_server.models.virtual_network_rule import VirtualNetworkRule
from openapi_server import util


class DatabaseAccountCreateUpdateProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capabilities: List[Capability]=None, connector_offer: ConnectorOffer=None, consistency_policy: ConsistencyPolicy=None, database_account_offer_type: DatabaseAccountOfferType=None, disable_key_based_metadata_write_access: bool=None, enable_automatic_failover: bool=None, enable_cassandra_connector: bool=None, enable_multiple_write_locations: bool=None, ip_range_filter: str=None, is_virtual_network_filter_enabled: bool=None, locations: List[Location]=None, virtual_network_rules: List[VirtualNetworkRule]=None):
        """DatabaseAccountCreateUpdateProperties - a model defined in OpenAPI

        :param capabilities: The capabilities of this DatabaseAccountCreateUpdateProperties.
        :param connector_offer: The connector_offer of this DatabaseAccountCreateUpdateProperties.
        :param consistency_policy: The consistency_policy of this DatabaseAccountCreateUpdateProperties.
        :param database_account_offer_type: The database_account_offer_type of this DatabaseAccountCreateUpdateProperties.
        :param disable_key_based_metadata_write_access: The disable_key_based_metadata_write_access of this DatabaseAccountCreateUpdateProperties.
        :param enable_automatic_failover: The enable_automatic_failover of this DatabaseAccountCreateUpdateProperties.
        :param enable_cassandra_connector: The enable_cassandra_connector of this DatabaseAccountCreateUpdateProperties.
        :param enable_multiple_write_locations: The enable_multiple_write_locations of this DatabaseAccountCreateUpdateProperties.
        :param ip_range_filter: The ip_range_filter of this DatabaseAccountCreateUpdateProperties.
        :param is_virtual_network_filter_enabled: The is_virtual_network_filter_enabled of this DatabaseAccountCreateUpdateProperties.
        :param locations: The locations of this DatabaseAccountCreateUpdateProperties.
        :param virtual_network_rules: The virtual_network_rules of this DatabaseAccountCreateUpdateProperties.
        """
        self.openapi_types = {
            'capabilities': List[Capability],
            'connector_offer': ConnectorOffer,
            'consistency_policy': ConsistencyPolicy,
            'database_account_offer_type': DatabaseAccountOfferType,
            'disable_key_based_metadata_write_access': bool,
            'enable_automatic_failover': bool,
            'enable_cassandra_connector': bool,
            'enable_multiple_write_locations': bool,
            'ip_range_filter': str,
            'is_virtual_network_filter_enabled': bool,
            'locations': List[Location],
            'virtual_network_rules': List[VirtualNetworkRule]
        }

        self.attribute_map = {
            'capabilities': 'capabilities',
            'connector_offer': 'connectorOffer',
            'consistency_policy': 'consistencyPolicy',
            'database_account_offer_type': 'databaseAccountOfferType',
            'disable_key_based_metadata_write_access': 'disableKeyBasedMetadataWriteAccess',
            'enable_automatic_failover': 'enableAutomaticFailover',
            'enable_cassandra_connector': 'enableCassandraConnector',
            'enable_multiple_write_locations': 'enableMultipleWriteLocations',
            'ip_range_filter': 'ipRangeFilter',
            'is_virtual_network_filter_enabled': 'isVirtualNetworkFilterEnabled',
            'locations': 'locations',
            'virtual_network_rules': 'virtualNetworkRules'
        }

        self._capabilities = capabilities
        self._connector_offer = connector_offer
        self._consistency_policy = consistency_policy
        self._database_account_offer_type = database_account_offer_type
        self._disable_key_based_metadata_write_access = disable_key_based_metadata_write_access
        self._enable_automatic_failover = enable_automatic_failover
        self._enable_cassandra_connector = enable_cassandra_connector
        self._enable_multiple_write_locations = enable_multiple_write_locations
        self._ip_range_filter = ip_range_filter
        self._is_virtual_network_filter_enabled = is_virtual_network_filter_enabled
        self._locations = locations
        self._virtual_network_rules = virtual_network_rules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseAccountCreateUpdateProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseAccountCreateUpdateProperties of this DatabaseAccountCreateUpdateProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capabilities(self):
        """Gets the capabilities of this DatabaseAccountCreateUpdateProperties.

        List of Cosmos DB capabilities for the account

        :return: The capabilities of this DatabaseAccountCreateUpdateProperties.
        :rtype: List[Capability]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this DatabaseAccountCreateUpdateProperties.

        List of Cosmos DB capabilities for the account

        :param capabilities: The capabilities of this DatabaseAccountCreateUpdateProperties.
        :type capabilities: List[Capability]
        """

        self._capabilities = capabilities

    @property
    def connector_offer(self):
        """Gets the connector_offer of this DatabaseAccountCreateUpdateProperties.


        :return: The connector_offer of this DatabaseAccountCreateUpdateProperties.
        :rtype: ConnectorOffer
        """
        return self._connector_offer

    @connector_offer.setter
    def connector_offer(self, connector_offer):
        """Sets the connector_offer of this DatabaseAccountCreateUpdateProperties.


        :param connector_offer: The connector_offer of this DatabaseAccountCreateUpdateProperties.
        :type connector_offer: ConnectorOffer
        """

        self._connector_offer = connector_offer

    @property
    def consistency_policy(self):
        """Gets the consistency_policy of this DatabaseAccountCreateUpdateProperties.


        :return: The consistency_policy of this DatabaseAccountCreateUpdateProperties.
        :rtype: ConsistencyPolicy
        """
        return self._consistency_policy

    @consistency_policy.setter
    def consistency_policy(self, consistency_policy):
        """Sets the consistency_policy of this DatabaseAccountCreateUpdateProperties.


        :param consistency_policy: The consistency_policy of this DatabaseAccountCreateUpdateProperties.
        :type consistency_policy: ConsistencyPolicy
        """

        self._consistency_policy = consistency_policy

    @property
    def database_account_offer_type(self):
        """Gets the database_account_offer_type of this DatabaseAccountCreateUpdateProperties.


        :return: The database_account_offer_type of this DatabaseAccountCreateUpdateProperties.
        :rtype: DatabaseAccountOfferType
        """
        return self._database_account_offer_type

    @database_account_offer_type.setter
    def database_account_offer_type(self, database_account_offer_type):
        """Sets the database_account_offer_type of this DatabaseAccountCreateUpdateProperties.


        :param database_account_offer_type: The database_account_offer_type of this DatabaseAccountCreateUpdateProperties.
        :type database_account_offer_type: DatabaseAccountOfferType
        """
        if database_account_offer_type is None:
            raise ValueError("Invalid value for `database_account_offer_type`, must not be `None`")

        self._database_account_offer_type = database_account_offer_type

    @property
    def disable_key_based_metadata_write_access(self):
        """Gets the disable_key_based_metadata_write_access of this DatabaseAccountCreateUpdateProperties.

        Disable write operations on metadata resources (databases, containers, throughput) via account keys

        :return: The disable_key_based_metadata_write_access of this DatabaseAccountCreateUpdateProperties.
        :rtype: bool
        """
        return self._disable_key_based_metadata_write_access

    @disable_key_based_metadata_write_access.setter
    def disable_key_based_metadata_write_access(self, disable_key_based_metadata_write_access):
        """Sets the disable_key_based_metadata_write_access of this DatabaseAccountCreateUpdateProperties.

        Disable write operations on metadata resources (databases, containers, throughput) via account keys

        :param disable_key_based_metadata_write_access: The disable_key_based_metadata_write_access of this DatabaseAccountCreateUpdateProperties.
        :type disable_key_based_metadata_write_access: bool
        """

        self._disable_key_based_metadata_write_access = disable_key_based_metadata_write_access

    @property
    def enable_automatic_failover(self):
        """Gets the enable_automatic_failover of this DatabaseAccountCreateUpdateProperties.

        Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.

        :return: The enable_automatic_failover of this DatabaseAccountCreateUpdateProperties.
        :rtype: bool
        """
        return self._enable_automatic_failover

    @enable_automatic_failover.setter
    def enable_automatic_failover(self, enable_automatic_failover):
        """Sets the enable_automatic_failover of this DatabaseAccountCreateUpdateProperties.

        Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.

        :param enable_automatic_failover: The enable_automatic_failover of this DatabaseAccountCreateUpdateProperties.
        :type enable_automatic_failover: bool
        """

        self._enable_automatic_failover = enable_automatic_failover

    @property
    def enable_cassandra_connector(self):
        """Gets the enable_cassandra_connector of this DatabaseAccountCreateUpdateProperties.

        Enables the cassandra connector on the Cosmos DB C* account

        :return: The enable_cassandra_connector of this DatabaseAccountCreateUpdateProperties.
        :rtype: bool
        """
        return self._enable_cassandra_connector

    @enable_cassandra_connector.setter
    def enable_cassandra_connector(self, enable_cassandra_connector):
        """Sets the enable_cassandra_connector of this DatabaseAccountCreateUpdateProperties.

        Enables the cassandra connector on the Cosmos DB C* account

        :param enable_cassandra_connector: The enable_cassandra_connector of this DatabaseAccountCreateUpdateProperties.
        :type enable_cassandra_connector: bool
        """

        self._enable_cassandra_connector = enable_cassandra_connector

    @property
    def enable_multiple_write_locations(self):
        """Gets the enable_multiple_write_locations of this DatabaseAccountCreateUpdateProperties.

        Enables the account to write in multiple locations

        :return: The enable_multiple_write_locations of this DatabaseAccountCreateUpdateProperties.
        :rtype: bool
        """
        return self._enable_multiple_write_locations

    @enable_multiple_write_locations.setter
    def enable_multiple_write_locations(self, enable_multiple_write_locations):
        """Sets the enable_multiple_write_locations of this DatabaseAccountCreateUpdateProperties.

        Enables the account to write in multiple locations

        :param enable_multiple_write_locations: The enable_multiple_write_locations of this DatabaseAccountCreateUpdateProperties.
        :type enable_multiple_write_locations: bool
        """

        self._enable_multiple_write_locations = enable_multiple_write_locations

    @property
    def ip_range_filter(self):
        """Gets the ip_range_filter of this DatabaseAccountCreateUpdateProperties.

        Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.

        :return: The ip_range_filter of this DatabaseAccountCreateUpdateProperties.
        :rtype: str
        """
        return self._ip_range_filter

    @ip_range_filter.setter
    def ip_range_filter(self, ip_range_filter):
        """Sets the ip_range_filter of this DatabaseAccountCreateUpdateProperties.

        Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.

        :param ip_range_filter: The ip_range_filter of this DatabaseAccountCreateUpdateProperties.
        :type ip_range_filter: str
        """

        self._ip_range_filter = ip_range_filter

    @property
    def is_virtual_network_filter_enabled(self):
        """Gets the is_virtual_network_filter_enabled of this DatabaseAccountCreateUpdateProperties.

        Flag to indicate whether to enable/disable Virtual Network ACL rules.

        :return: The is_virtual_network_filter_enabled of this DatabaseAccountCreateUpdateProperties.
        :rtype: bool
        """
        return self._is_virtual_network_filter_enabled

    @is_virtual_network_filter_enabled.setter
    def is_virtual_network_filter_enabled(self, is_virtual_network_filter_enabled):
        """Sets the is_virtual_network_filter_enabled of this DatabaseAccountCreateUpdateProperties.

        Flag to indicate whether to enable/disable Virtual Network ACL rules.

        :param is_virtual_network_filter_enabled: The is_virtual_network_filter_enabled of this DatabaseAccountCreateUpdateProperties.
        :type is_virtual_network_filter_enabled: bool
        """

        self._is_virtual_network_filter_enabled = is_virtual_network_filter_enabled

    @property
    def locations(self):
        """Gets the locations of this DatabaseAccountCreateUpdateProperties.

        An array that contains the georeplication locations enabled for the Cosmos DB account.

        :return: The locations of this DatabaseAccountCreateUpdateProperties.
        :rtype: List[Location]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this DatabaseAccountCreateUpdateProperties.

        An array that contains the georeplication locations enabled for the Cosmos DB account.

        :param locations: The locations of this DatabaseAccountCreateUpdateProperties.
        :type locations: List[Location]
        """
        if locations is None:
            raise ValueError("Invalid value for `locations`, must not be `None`")

        self._locations = locations

    @property
    def virtual_network_rules(self):
        """Gets the virtual_network_rules of this DatabaseAccountCreateUpdateProperties.

        List of Virtual Network ACL rules configured for the Cosmos DB account.

        :return: The virtual_network_rules of this DatabaseAccountCreateUpdateProperties.
        :rtype: List[VirtualNetworkRule]
        """
        return self._virtual_network_rules

    @virtual_network_rules.setter
    def virtual_network_rules(self, virtual_network_rules):
        """Sets the virtual_network_rules of this DatabaseAccountCreateUpdateProperties.

        List of Virtual Network ACL rules configured for the Cosmos DB account.

        :param virtual_network_rules: The virtual_network_rules of this DatabaseAccountCreateUpdateProperties.
        :type virtual_network_rules: List[VirtualNetworkRule]
        """

        self._virtual_network_rules = virtual_network_rules
