# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContainerPartitionKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind: str='Hash', paths: List[str]=None, version: int=None):
        """ContainerPartitionKey - a model defined in OpenAPI

        :param kind: The kind of this ContainerPartitionKey.
        :param paths: The paths of this ContainerPartitionKey.
        :param version: The version of this ContainerPartitionKey.
        """
        self.openapi_types = {
            'kind': str,
            'paths': List[str],
            'version': int
        }

        self.attribute_map = {
            'kind': 'kind',
            'paths': 'paths',
            'version': 'version'
        }

        self._kind = kind
        self._paths = paths
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerPartitionKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerPartitionKey of this ContainerPartitionKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this ContainerPartitionKey.

        Indicates the kind of algorithm used for partitioning

        :return: The kind of this ContainerPartitionKey.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ContainerPartitionKey.

        Indicates the kind of algorithm used for partitioning

        :param kind: The kind of this ContainerPartitionKey.
        :type kind: str
        """
        allowed_values = ["Hash", "Range"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def paths(self):
        """Gets the paths of this ContainerPartitionKey.

        List of paths using which data within the container can be partitioned

        :return: The paths of this ContainerPartitionKey.
        :rtype: List[str]
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """Sets the paths of this ContainerPartitionKey.

        List of paths using which data within the container can be partitioned

        :param paths: The paths of this ContainerPartitionKey.
        :type paths: List[str]
        """

        self._paths = paths

    @property
    def version(self):
        """Gets the version of this ContainerPartitionKey.

        Indicates the version of the partition key definition

        :return: The version of this ContainerPartitionKey.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ContainerPartitionKey.

        Indicates the version of the partition key definition

        :param version: The version of this ContainerPartitionKey.
        :type version: int
        """
        if version is not None and version > 2:
            raise ValueError("Invalid value for `version`, must be a value less than or equal to `2`")
        if version is not None and version < 1:
            raise ValueError("Invalid value for `version`, must be a value greater than or equal to `1`")

        self._version = version
