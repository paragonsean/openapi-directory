# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SqlTriggerGetPropertiesResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, id: str=None, trigger_operation: str=None, trigger_type: str=None, etag: str=None, rid: str=None, ts: object=None):
        """SqlTriggerGetPropertiesResource - a model defined in OpenAPI

        :param body: The body of this SqlTriggerGetPropertiesResource.
        :param id: The id of this SqlTriggerGetPropertiesResource.
        :param trigger_operation: The trigger_operation of this SqlTriggerGetPropertiesResource.
        :param trigger_type: The trigger_type of this SqlTriggerGetPropertiesResource.
        :param etag: The etag of this SqlTriggerGetPropertiesResource.
        :param rid: The rid of this SqlTriggerGetPropertiesResource.
        :param ts: The ts of this SqlTriggerGetPropertiesResource.
        """
        self.openapi_types = {
            'body': str,
            'id': str,
            'trigger_operation': str,
            'trigger_type': str,
            'etag': str,
            'rid': str,
            'ts': object
        }

        self.attribute_map = {
            'body': 'body',
            'id': 'id',
            'trigger_operation': 'triggerOperation',
            'trigger_type': 'triggerType',
            'etag': '_etag',
            'rid': '_rid',
            'ts': '_ts'
        }

        self._body = body
        self._id = id
        self._trigger_operation = trigger_operation
        self._trigger_type = trigger_type
        self._etag = etag
        self._rid = rid
        self._ts = ts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SqlTriggerGetPropertiesResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SqlTriggerGetProperties_resource of this SqlTriggerGetPropertiesResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this SqlTriggerGetPropertiesResource.

        Body of the Trigger

        :return: The body of this SqlTriggerGetPropertiesResource.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this SqlTriggerGetPropertiesResource.

        Body of the Trigger

        :param body: The body of this SqlTriggerGetPropertiesResource.
        :type body: str
        """

        self._body = body

    @property
    def id(self):
        """Gets the id of this SqlTriggerGetPropertiesResource.

        Name of the Cosmos DB SQL trigger

        :return: The id of this SqlTriggerGetPropertiesResource.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SqlTriggerGetPropertiesResource.

        Name of the Cosmos DB SQL trigger

        :param id: The id of this SqlTriggerGetPropertiesResource.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def trigger_operation(self):
        """Gets the trigger_operation of this SqlTriggerGetPropertiesResource.

        The operation the trigger is associated with

        :return: The trigger_operation of this SqlTriggerGetPropertiesResource.
        :rtype: str
        """
        return self._trigger_operation

    @trigger_operation.setter
    def trigger_operation(self, trigger_operation):
        """Sets the trigger_operation of this SqlTriggerGetPropertiesResource.

        The operation the trigger is associated with

        :param trigger_operation: The trigger_operation of this SqlTriggerGetPropertiesResource.
        :type trigger_operation: str
        """
        allowed_values = ["All", "Create", "Update", "Delete", "Replace"]  # noqa: E501
        if trigger_operation not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger_operation` ({0}), must be one of {1}"
                .format(trigger_operation, allowed_values)
            )

        self._trigger_operation = trigger_operation

    @property
    def trigger_type(self):
        """Gets the trigger_type of this SqlTriggerGetPropertiesResource.

        Type of the Trigger

        :return: The trigger_type of this SqlTriggerGetPropertiesResource.
        :rtype: str
        """
        return self._trigger_type

    @trigger_type.setter
    def trigger_type(self, trigger_type):
        """Sets the trigger_type of this SqlTriggerGetPropertiesResource.

        Type of the Trigger

        :param trigger_type: The trigger_type of this SqlTriggerGetPropertiesResource.
        :type trigger_type: str
        """
        allowed_values = ["Pre", "Post"]  # noqa: E501
        if trigger_type not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger_type` ({0}), must be one of {1}"
                .format(trigger_type, allowed_values)
            )

        self._trigger_type = trigger_type

    @property
    def etag(self):
        """Gets the etag of this SqlTriggerGetPropertiesResource.

        A system generated property representing the resource etag required for optimistic concurrency control.

        :return: The etag of this SqlTriggerGetPropertiesResource.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this SqlTriggerGetPropertiesResource.

        A system generated property representing the resource etag required for optimistic concurrency control.

        :param etag: The etag of this SqlTriggerGetPropertiesResource.
        :type etag: str
        """

        self._etag = etag

    @property
    def rid(self):
        """Gets the rid of this SqlTriggerGetPropertiesResource.

        A system generated property. A unique identifier.

        :return: The rid of this SqlTriggerGetPropertiesResource.
        :rtype: str
        """
        return self._rid

    @rid.setter
    def rid(self, rid):
        """Sets the rid of this SqlTriggerGetPropertiesResource.

        A system generated property. A unique identifier.

        :param rid: The rid of this SqlTriggerGetPropertiesResource.
        :type rid: str
        """

        self._rid = rid

    @property
    def ts(self):
        """Gets the ts of this SqlTriggerGetPropertiesResource.

        A system generated property that denotes the last updated timestamp of the resource.

        :return: The ts of this SqlTriggerGetPropertiesResource.
        :rtype: object
        """
        return self._ts

    @ts.setter
    def ts(self, ts):
        """Sets the ts of this SqlTriggerGetPropertiesResource.

        A system generated property that denotes the last updated timestamp of the resource.

        :param ts: The ts of this SqlTriggerGetPropertiesResource.
        :type ts: object
        """

        self._ts = ts
