# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ThroughputSettingsResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, minimum_throughput: str=None, offer_replace_pending: str=None, throughput: int=None):
        """ThroughputSettingsResource - a model defined in OpenAPI

        :param minimum_throughput: The minimum_throughput of this ThroughputSettingsResource.
        :param offer_replace_pending: The offer_replace_pending of this ThroughputSettingsResource.
        :param throughput: The throughput of this ThroughputSettingsResource.
        """
        self.openapi_types = {
            'minimum_throughput': str,
            'offer_replace_pending': str,
            'throughput': int
        }

        self.attribute_map = {
            'minimum_throughput': 'minimumThroughput',
            'offer_replace_pending': 'offerReplacePending',
            'throughput': 'throughput'
        }

        self._minimum_throughput = minimum_throughput
        self._offer_replace_pending = offer_replace_pending
        self._throughput = throughput

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThroughputSettingsResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThroughputSettingsResource of this ThroughputSettingsResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def minimum_throughput(self):
        """Gets the minimum_throughput of this ThroughputSettingsResource.

        The minimum throughput of the resource

        :return: The minimum_throughput of this ThroughputSettingsResource.
        :rtype: str
        """
        return self._minimum_throughput

    @minimum_throughput.setter
    def minimum_throughput(self, minimum_throughput):
        """Sets the minimum_throughput of this ThroughputSettingsResource.

        The minimum throughput of the resource

        :param minimum_throughput: The minimum_throughput of this ThroughputSettingsResource.
        :type minimum_throughput: str
        """

        self._minimum_throughput = minimum_throughput

    @property
    def offer_replace_pending(self):
        """Gets the offer_replace_pending of this ThroughputSettingsResource.

        The throughput replace is pending

        :return: The offer_replace_pending of this ThroughputSettingsResource.
        :rtype: str
        """
        return self._offer_replace_pending

    @offer_replace_pending.setter
    def offer_replace_pending(self, offer_replace_pending):
        """Sets the offer_replace_pending of this ThroughputSettingsResource.

        The throughput replace is pending

        :param offer_replace_pending: The offer_replace_pending of this ThroughputSettingsResource.
        :type offer_replace_pending: str
        """

        self._offer_replace_pending = offer_replace_pending

    @property
    def throughput(self):
        """Gets the throughput of this ThroughputSettingsResource.

        Value of the Cosmos DB resource throughput

        :return: The throughput of this ThroughputSettingsResource.
        :rtype: int
        """
        return self._throughput

    @throughput.setter
    def throughput(self, throughput):
        """Sets the throughput of this ThroughputSettingsResource.

        Value of the Cosmos DB resource throughput

        :param throughput: The throughput of this ThroughputSettingsResource.
        :type throughput: int
        """
        if throughput is None:
            raise ValueError("Invalid value for `throughput`, must not be `None`")

        self._throughput = throughput
