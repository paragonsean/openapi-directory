/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2019-12-12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMongoIndex.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMongoIndex::OAIMongoIndex(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMongoIndex::OAIMongoIndex() {
    this->initializeModel();
}

OAIMongoIndex::~OAIMongoIndex() {}

void OAIMongoIndex::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;
}

void OAIMongoIndex::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMongoIndex::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;
}

QString OAIMongoIndex::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMongoIndex::asJsonObject() const {
    QJsonObject obj;
    if (m_key.isSet()) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_options.isSet()) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    return obj;
}

OAIMongoIndexKeys OAIMongoIndex::getKey() const {
    return m_key;
}
void OAIMongoIndex::setKey(const OAIMongoIndexKeys &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIMongoIndex::is_key_Set() const{
    return m_key_isSet;
}

bool OAIMongoIndex::is_key_Valid() const{
    return m_key_isValid;
}

OAIMongoIndexOptions OAIMongoIndex::getOptions() const {
    return m_options;
}
void OAIMongoIndex::setOptions(const OAIMongoIndexOptions &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIMongoIndex::is_options_Set() const{
    return m_options_isSet;
}

bool OAIMongoIndex::is_options_Valid() const{
    return m_options_isValid;
}

bool OAIMongoIndex::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMongoIndex::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
