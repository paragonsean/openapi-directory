/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2019-12-12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPercentileMetricValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPercentileMetricValue::OAIPercentileMetricValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPercentileMetricValue::OAIPercentileMetricValue() {
    this->initializeModel();
}

OAIPercentileMetricValue::~OAIPercentileMetricValue() {}

void OAIPercentileMetricValue::initializeModel() {

    m_p10_isSet = false;
    m_p10_isValid = false;

    m_p25_isSet = false;
    m_p25_isValid = false;

    m_p50_isSet = false;
    m_p50_isValid = false;

    m_p75_isSet = false;
    m_p75_isValid = false;

    m_p90_isSet = false;
    m_p90_isValid = false;

    m_p95_isSet = false;
    m_p95_isValid = false;

    m_p99_isSet = false;
    m_p99_isValid = false;

    m__count_isSet = false;
    m__count_isValid = false;

    m_average_isSet = false;
    m_average_isValid = false;

    m_maximum_isSet = false;
    m_maximum_isValid = false;

    m_minimum_isSet = false;
    m_minimum_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIPercentileMetricValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPercentileMetricValue::fromJsonObject(QJsonObject json) {

    m_p10_isValid = ::OpenAPI::fromJsonValue(m_p10, json[QString("P10")]);
    m_p10_isSet = !json[QString("P10")].isNull() && m_p10_isValid;

    m_p25_isValid = ::OpenAPI::fromJsonValue(m_p25, json[QString("P25")]);
    m_p25_isSet = !json[QString("P25")].isNull() && m_p25_isValid;

    m_p50_isValid = ::OpenAPI::fromJsonValue(m_p50, json[QString("P50")]);
    m_p50_isSet = !json[QString("P50")].isNull() && m_p50_isValid;

    m_p75_isValid = ::OpenAPI::fromJsonValue(m_p75, json[QString("P75")]);
    m_p75_isSet = !json[QString("P75")].isNull() && m_p75_isValid;

    m_p90_isValid = ::OpenAPI::fromJsonValue(m_p90, json[QString("P90")]);
    m_p90_isSet = !json[QString("P90")].isNull() && m_p90_isValid;

    m_p95_isValid = ::OpenAPI::fromJsonValue(m_p95, json[QString("P95")]);
    m_p95_isSet = !json[QString("P95")].isNull() && m_p95_isValid;

    m_p99_isValid = ::OpenAPI::fromJsonValue(m_p99, json[QString("P99")]);
    m_p99_isSet = !json[QString("P99")].isNull() && m_p99_isValid;

    m__count_isValid = ::OpenAPI::fromJsonValue(m__count, json[QString("_count")]);
    m__count_isSet = !json[QString("_count")].isNull() && m__count_isValid;

    m_average_isValid = ::OpenAPI::fromJsonValue(m_average, json[QString("average")]);
    m_average_isSet = !json[QString("average")].isNull() && m_average_isValid;

    m_maximum_isValid = ::OpenAPI::fromJsonValue(m_maximum, json[QString("maximum")]);
    m_maximum_isSet = !json[QString("maximum")].isNull() && m_maximum_isValid;

    m_minimum_isValid = ::OpenAPI::fromJsonValue(m_minimum, json[QString("minimum")]);
    m_minimum_isSet = !json[QString("minimum")].isNull() && m_minimum_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIPercentileMetricValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPercentileMetricValue::asJsonObject() const {
    QJsonObject obj;
    if (m_p10_isSet) {
        obj.insert(QString("P10"), ::OpenAPI::toJsonValue(m_p10));
    }
    if (m_p25_isSet) {
        obj.insert(QString("P25"), ::OpenAPI::toJsonValue(m_p25));
    }
    if (m_p50_isSet) {
        obj.insert(QString("P50"), ::OpenAPI::toJsonValue(m_p50));
    }
    if (m_p75_isSet) {
        obj.insert(QString("P75"), ::OpenAPI::toJsonValue(m_p75));
    }
    if (m_p90_isSet) {
        obj.insert(QString("P90"), ::OpenAPI::toJsonValue(m_p90));
    }
    if (m_p95_isSet) {
        obj.insert(QString("P95"), ::OpenAPI::toJsonValue(m_p95));
    }
    if (m_p99_isSet) {
        obj.insert(QString("P99"), ::OpenAPI::toJsonValue(m_p99));
    }
    if (m__count_isSet) {
        obj.insert(QString("_count"), ::OpenAPI::toJsonValue(m__count));
    }
    if (m_average_isSet) {
        obj.insert(QString("average"), ::OpenAPI::toJsonValue(m_average));
    }
    if (m_maximum_isSet) {
        obj.insert(QString("maximum"), ::OpenAPI::toJsonValue(m_maximum));
    }
    if (m_minimum_isSet) {
        obj.insert(QString("minimum"), ::OpenAPI::toJsonValue(m_minimum));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

double OAIPercentileMetricValue::getP10() const {
    return m_p10;
}
void OAIPercentileMetricValue::setP10(const double &p10) {
    m_p10 = p10;
    m_p10_isSet = true;
}

bool OAIPercentileMetricValue::is_p10_Set() const{
    return m_p10_isSet;
}

bool OAIPercentileMetricValue::is_p10_Valid() const{
    return m_p10_isValid;
}

double OAIPercentileMetricValue::getP25() const {
    return m_p25;
}
void OAIPercentileMetricValue::setP25(const double &p25) {
    m_p25 = p25;
    m_p25_isSet = true;
}

bool OAIPercentileMetricValue::is_p25_Set() const{
    return m_p25_isSet;
}

bool OAIPercentileMetricValue::is_p25_Valid() const{
    return m_p25_isValid;
}

double OAIPercentileMetricValue::getP50() const {
    return m_p50;
}
void OAIPercentileMetricValue::setP50(const double &p50) {
    m_p50 = p50;
    m_p50_isSet = true;
}

bool OAIPercentileMetricValue::is_p50_Set() const{
    return m_p50_isSet;
}

bool OAIPercentileMetricValue::is_p50_Valid() const{
    return m_p50_isValid;
}

double OAIPercentileMetricValue::getP75() const {
    return m_p75;
}
void OAIPercentileMetricValue::setP75(const double &p75) {
    m_p75 = p75;
    m_p75_isSet = true;
}

bool OAIPercentileMetricValue::is_p75_Set() const{
    return m_p75_isSet;
}

bool OAIPercentileMetricValue::is_p75_Valid() const{
    return m_p75_isValid;
}

double OAIPercentileMetricValue::getP90() const {
    return m_p90;
}
void OAIPercentileMetricValue::setP90(const double &p90) {
    m_p90 = p90;
    m_p90_isSet = true;
}

bool OAIPercentileMetricValue::is_p90_Set() const{
    return m_p90_isSet;
}

bool OAIPercentileMetricValue::is_p90_Valid() const{
    return m_p90_isValid;
}

double OAIPercentileMetricValue::getP95() const {
    return m_p95;
}
void OAIPercentileMetricValue::setP95(const double &p95) {
    m_p95 = p95;
    m_p95_isSet = true;
}

bool OAIPercentileMetricValue::is_p95_Set() const{
    return m_p95_isSet;
}

bool OAIPercentileMetricValue::is_p95_Valid() const{
    return m_p95_isValid;
}

double OAIPercentileMetricValue::getP99() const {
    return m_p99;
}
void OAIPercentileMetricValue::setP99(const double &p99) {
    m_p99 = p99;
    m_p99_isSet = true;
}

bool OAIPercentileMetricValue::is_p99_Set() const{
    return m_p99_isSet;
}

bool OAIPercentileMetricValue::is_p99_Valid() const{
    return m_p99_isValid;
}

double OAIPercentileMetricValue::getCount() const {
    return m__count;
}
void OAIPercentileMetricValue::setCount(const double &_count) {
    m__count = _count;
    m__count_isSet = true;
}

bool OAIPercentileMetricValue::is__count_Set() const{
    return m__count_isSet;
}

bool OAIPercentileMetricValue::is__count_Valid() const{
    return m__count_isValid;
}

double OAIPercentileMetricValue::getAverage() const {
    return m_average;
}
void OAIPercentileMetricValue::setAverage(const double &average) {
    m_average = average;
    m_average_isSet = true;
}

bool OAIPercentileMetricValue::is_average_Set() const{
    return m_average_isSet;
}

bool OAIPercentileMetricValue::is_average_Valid() const{
    return m_average_isValid;
}

double OAIPercentileMetricValue::getMaximum() const {
    return m_maximum;
}
void OAIPercentileMetricValue::setMaximum(const double &maximum) {
    m_maximum = maximum;
    m_maximum_isSet = true;
}

bool OAIPercentileMetricValue::is_maximum_Set() const{
    return m_maximum_isSet;
}

bool OAIPercentileMetricValue::is_maximum_Valid() const{
    return m_maximum_isValid;
}

double OAIPercentileMetricValue::getMinimum() const {
    return m_minimum;
}
void OAIPercentileMetricValue::setMinimum(const double &minimum) {
    m_minimum = minimum;
    m_minimum_isSet = true;
}

bool OAIPercentileMetricValue::is_minimum_Set() const{
    return m_minimum_isSet;
}

bool OAIPercentileMetricValue::is_minimum_Valid() const{
    return m_minimum_isValid;
}

QDateTime OAIPercentileMetricValue::getTimestamp() const {
    return m_timestamp;
}
void OAIPercentileMetricValue::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIPercentileMetricValue::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIPercentileMetricValue::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

double OAIPercentileMetricValue::getTotal() const {
    return m_total;
}
void OAIPercentileMetricValue::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIPercentileMetricValue::is_total_Set() const{
    return m_total_isSet;
}

bool OAIPercentileMetricValue::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIPercentileMetricValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_p10_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p25_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p50_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p75_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p90_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p95_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p99_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPercentileMetricValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
