/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2019-12-12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISqlDatabaseGetProperties_resource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISqlDatabaseGetProperties_resource::OAISqlDatabaseGetProperties_resource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISqlDatabaseGetProperties_resource::OAISqlDatabaseGetProperties_resource() {
    this->initializeModel();
}

OAISqlDatabaseGetProperties_resource::~OAISqlDatabaseGetProperties_resource() {}

void OAISqlDatabaseGetProperties_resource::initializeModel() {

    m__colls_isSet = false;
    m__colls_isValid = false;

    m__users_isSet = false;
    m__users_isValid = false;
}

void OAISqlDatabaseGetProperties_resource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISqlDatabaseGetProperties_resource::fromJsonObject(QJsonObject json) {

    m__colls_isValid = ::OpenAPI::fromJsonValue(m__colls, json[QString("_colls")]);
    m__colls_isSet = !json[QString("_colls")].isNull() && m__colls_isValid;

    m__users_isValid = ::OpenAPI::fromJsonValue(m__users, json[QString("_users")]);
    m__users_isSet = !json[QString("_users")].isNull() && m__users_isValid;
}

QString OAISqlDatabaseGetProperties_resource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISqlDatabaseGetProperties_resource::asJsonObject() const {
    QJsonObject obj;
    if (m__colls_isSet) {
        obj.insert(QString("_colls"), ::OpenAPI::toJsonValue(m__colls));
    }
    if (m__users_isSet) {
        obj.insert(QString("_users"), ::OpenAPI::toJsonValue(m__users));
    }
    return obj;
}

QString OAISqlDatabaseGetProperties_resource::getColls() const {
    return m__colls;
}
void OAISqlDatabaseGetProperties_resource::setColls(const QString &_colls) {
    m__colls = _colls;
    m__colls_isSet = true;
}

bool OAISqlDatabaseGetProperties_resource::is__colls_Set() const{
    return m__colls_isSet;
}

bool OAISqlDatabaseGetProperties_resource::is__colls_Valid() const{
    return m__colls_isValid;
}

QString OAISqlDatabaseGetProperties_resource::getUsers() const {
    return m__users;
}
void OAISqlDatabaseGetProperties_resource::setUsers(const QString &_users) {
    m__users = _users;
    m__users_isSet = true;
}

bool OAISqlDatabaseGetProperties_resource::is__users_Set() const{
    return m__users_isSet;
}

bool OAISqlDatabaseGetProperties_resource::is__users_Valid() const{
    return m__users_isValid;
}

bool OAISqlDatabaseGetProperties_resource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__colls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__users_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISqlDatabaseGetProperties_resource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
