/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2019-12-12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpatialType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpatialType::OAISpatialType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpatialType::OAISpatialType() {
    this->initializeModel();
}

OAISpatialType::~OAISpatialType() {}

void OAISpatialType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISpatialType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISpatialType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Point", Qt::CaseInsensitive) == 0) {
        m_value = eOAISpatialType::POINT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LineString", Qt::CaseInsensitive) == 0) {
        m_value = eOAISpatialType::LINESTRING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Polygon", Qt::CaseInsensitive) == 0) {
        m_value = eOAISpatialType::POLYGON;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MultiPolygon", Qt::CaseInsensitive) == 0) {
        m_value = eOAISpatialType::MULTIPOLYGON;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISpatialType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISpatialType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISpatialType::POINT:
            val = "Point";
            break;
        case eOAISpatialType::LINESTRING:
            val = "LineString";
            break;
        case eOAISpatialType::POLYGON:
            val = "Polygon";
            break;
        case eOAISpatialType::MULTIPOLYGON:
            val = "MultiPolygon";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISpatialType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISpatialType::eOAISpatialType OAISpatialType::getValue() const {
    return m_value;
}

void OAISpatialType::setValue(const OAISpatialType::eOAISpatialType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISpatialType::isSet() const {
    
    return m_value_isSet;
}

bool OAISpatialType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
