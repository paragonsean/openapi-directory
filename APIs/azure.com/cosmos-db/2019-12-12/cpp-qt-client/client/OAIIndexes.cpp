/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2019-12-12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIndexes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIndexes::OAIIndexes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIndexes::OAIIndexes() {
    this->initializeModel();
}

OAIIndexes::~OAIIndexes() {}

void OAIIndexes::initializeModel() {

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_precision_isSet = false;
    m_precision_isValid = false;
}

void OAIIndexes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIndexes::fromJsonObject(QJsonObject json) {

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("dataType")]);
    m_data_type_isSet = !json[QString("dataType")].isNull() && m_data_type_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_precision_isValid = ::OpenAPI::fromJsonValue(m_precision, json[QString("precision")]);
    m_precision_isSet = !json[QString("precision")].isNull() && m_precision_isValid;
}

QString OAIIndexes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIndexes::asJsonObject() const {
    QJsonObject obj;
    if (m_data_type_isSet) {
        obj.insert(QString("dataType"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_precision_isSet) {
        obj.insert(QString("precision"), ::OpenAPI::toJsonValue(m_precision));
    }
    return obj;
}

QString OAIIndexes::getDataType() const {
    return m_data_type;
}
void OAIIndexes::setDataType(const QString &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAIIndexes::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAIIndexes::is_data_type_Valid() const{
    return m_data_type_isValid;
}

QString OAIIndexes::getKind() const {
    return m_kind;
}
void OAIIndexes::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIIndexes::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIIndexes::is_kind_Valid() const{
    return m_kind_isValid;
}

qint32 OAIIndexes::getPrecision() const {
    return m_precision;
}
void OAIIndexes::setPrecision(const qint32 &precision) {
    m_precision = precision;
    m_precision_isSet = true;
}

bool OAIIndexes::is_precision_Set() const{
    return m_precision_isSet;
}

bool OAIIndexes::is_precision_Valid() const{
    return m_precision_isValid;
}

bool OAIIndexes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_precision_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIndexes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
