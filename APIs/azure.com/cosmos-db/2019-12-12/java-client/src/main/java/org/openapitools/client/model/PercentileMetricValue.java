/*
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2019-12-12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents percentile metrics values.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:36:06.899034-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PercentileMetricValue {
  public static final String SERIALIZED_NAME_P10 = "P10";
  @SerializedName(SERIALIZED_NAME_P10)
  private Double P10;

  public static final String SERIALIZED_NAME_P25 = "P25";
  @SerializedName(SERIALIZED_NAME_P25)
  private Double P25;

  public static final String SERIALIZED_NAME_P50 = "P50";
  @SerializedName(SERIALIZED_NAME_P50)
  private Double P50;

  public static final String SERIALIZED_NAME_P75 = "P75";
  @SerializedName(SERIALIZED_NAME_P75)
  private Double P75;

  public static final String SERIALIZED_NAME_P90 = "P90";
  @SerializedName(SERIALIZED_NAME_P90)
  private Double P90;

  public static final String SERIALIZED_NAME_P95 = "P95";
  @SerializedName(SERIALIZED_NAME_P95)
  private Double P95;

  public static final String SERIALIZED_NAME_P99 = "P99";
  @SerializedName(SERIALIZED_NAME_P99)
  private Double P99;

  public static final String SERIALIZED_NAME_COUNT = "_count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private BigDecimal count;

  public static final String SERIALIZED_NAME_AVERAGE = "average";
  @SerializedName(SERIALIZED_NAME_AVERAGE)
  private Double average;

  public static final String SERIALIZED_NAME_MAXIMUM = "maximum";
  @SerializedName(SERIALIZED_NAME_MAXIMUM)
  private Double maximum;

  public static final String SERIALIZED_NAME_MINIMUM = "minimum";
  @SerializedName(SERIALIZED_NAME_MINIMUM)
  private Double minimum;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Double total;

  public PercentileMetricValue() {
  }

  public PercentileMetricValue(
     Double P10, 
     Double P25, 
     Double P50, 
     Double P75, 
     Double P90, 
     Double P95, 
     Double P99, 
     BigDecimal count, 
     Double average, 
     Double maximum, 
     Double minimum, 
     OffsetDateTime timestamp, 
     Double total
  ) {
    this();
    this.P10 = P10;
    this.P25 = P25;
    this.P50 = P50;
    this.P75 = P75;
    this.P90 = P90;
    this.P95 = P95;
    this.P99 = P99;
    this.count = count;
    this.average = average;
    this.maximum = maximum;
    this.minimum = minimum;
    this.timestamp = timestamp;
    this.total = total;
  }

  /**
   * The 10th percentile value for the metric.
   * @return P10
   */
  @javax.annotation.Nullable
  public Double getP10() {
    return P10;
  }



  /**
   * The 25th percentile value for the metric.
   * @return P25
   */
  @javax.annotation.Nullable
  public Double getP25() {
    return P25;
  }



  /**
   * The 50th percentile value for the metric.
   * @return P50
   */
  @javax.annotation.Nullable
  public Double getP50() {
    return P50;
  }



  /**
   * The 75th percentile value for the metric.
   * @return P75
   */
  @javax.annotation.Nullable
  public Double getP75() {
    return P75;
  }



  /**
   * The 90th percentile value for the metric.
   * @return P90
   */
  @javax.annotation.Nullable
  public Double getP90() {
    return P90;
  }



  /**
   * The 95th percentile value for the metric.
   * @return P95
   */
  @javax.annotation.Nullable
  public Double getP95() {
    return P95;
  }



  /**
   * The 99th percentile value for the metric.
   * @return P99
   */
  @javax.annotation.Nullable
  public Double getP99() {
    return P99;
  }



  /**
   * The number of values for the metric.
   * @return count
   */
  @javax.annotation.Nullable
  public BigDecimal getCount() {
    return count;
  }



  /**
   * The average value of the metric.
   * @return average
   */
  @javax.annotation.Nullable
  public Double getAverage() {
    return average;
  }



  /**
   * The max value of the metric.
   * @return maximum
   */
  @javax.annotation.Nullable
  public Double getMaximum() {
    return maximum;
  }



  /**
   * The min value of the metric.
   * @return minimum
   */
  @javax.annotation.Nullable
  public Double getMinimum() {
    return minimum;
  }



  /**
   * The metric timestamp (ISO-8601 format).
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }



  /**
   * The total value of the metric.
   * @return total
   */
  @javax.annotation.Nullable
  public Double getTotal() {
    return total;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PercentileMetricValue percentileMetricValue = (PercentileMetricValue) o;
    return Objects.equals(this.P10, percentileMetricValue.P10) &&
        Objects.equals(this.P25, percentileMetricValue.P25) &&
        Objects.equals(this.P50, percentileMetricValue.P50) &&
        Objects.equals(this.P75, percentileMetricValue.P75) &&
        Objects.equals(this.P90, percentileMetricValue.P90) &&
        Objects.equals(this.P95, percentileMetricValue.P95) &&
        Objects.equals(this.P99, percentileMetricValue.P99) &&
        Objects.equals(this.count, percentileMetricValue.count) &&
        Objects.equals(this.average, percentileMetricValue.average) &&
        Objects.equals(this.maximum, percentileMetricValue.maximum) &&
        Objects.equals(this.minimum, percentileMetricValue.minimum) &&
        Objects.equals(this.timestamp, percentileMetricValue.timestamp) &&
        Objects.equals(this.total, percentileMetricValue.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(P10, P25, P50, P75, P90, P95, P99, count, average, maximum, minimum, timestamp, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PercentileMetricValue {\n");
    sb.append("    P10: ").append(toIndentedString(P10)).append("\n");
    sb.append("    P25: ").append(toIndentedString(P25)).append("\n");
    sb.append("    P50: ").append(toIndentedString(P50)).append("\n");
    sb.append("    P75: ").append(toIndentedString(P75)).append("\n");
    sb.append("    P90: ").append(toIndentedString(P90)).append("\n");
    sb.append("    P95: ").append(toIndentedString(P95)).append("\n");
    sb.append("    P99: ").append(toIndentedString(P99)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    average: ").append(toIndentedString(average)).append("\n");
    sb.append("    maximum: ").append(toIndentedString(maximum)).append("\n");
    sb.append("    minimum: ").append(toIndentedString(minimum)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_count");
    openapiFields.add("average");
    openapiFields.add("maximum");
    openapiFields.add("minimum");
    openapiFields.add("timestamp");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PercentileMetricValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PercentileMetricValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PercentileMetricValue is not found in the empty JSON string", PercentileMetricValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PercentileMetricValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PercentileMetricValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PercentileMetricValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PercentileMetricValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PercentileMetricValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PercentileMetricValue.class));

       return (TypeAdapter<T>) new TypeAdapter<PercentileMetricValue>() {
           @Override
           public void write(JsonWriter out, PercentileMetricValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PercentileMetricValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PercentileMetricValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PercentileMetricValue
   * @throws IOException if the JSON string is invalid with respect to PercentileMetricValue
   */
  public static PercentileMetricValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PercentileMetricValue.class);
  }

  /**
   * Convert an instance of PercentileMetricValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

