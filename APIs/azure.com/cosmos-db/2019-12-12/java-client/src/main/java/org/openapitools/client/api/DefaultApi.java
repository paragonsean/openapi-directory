/*
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2019-12-12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CassandraKeyspaceCreateUpdateParameters;
import org.openapitools.client.model.CassandraKeyspaceGetResults;
import org.openapitools.client.model.CassandraKeyspaceListResult;
import org.openapitools.client.model.CassandraTableCreateUpdateParameters;
import org.openapitools.client.model.CassandraTableGetResults;
import org.openapitools.client.model.CassandraTableListResult;
import org.openapitools.client.model.DatabaseAccountCreateUpdateParameters;
import org.openapitools.client.model.DatabaseAccountGetResults;
import org.openapitools.client.model.DatabaseAccountListConnectionStringsResult;
import org.openapitools.client.model.DatabaseAccountListKeysResult;
import org.openapitools.client.model.DatabaseAccountListReadOnlyKeysResult;
import org.openapitools.client.model.DatabaseAccountRegenerateKeyParameters;
import org.openapitools.client.model.DatabaseAccountUpdateParameters;
import org.openapitools.client.model.DatabaseAccountsListResult;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.FailoverPolicies;
import org.openapitools.client.model.GremlinDatabaseCreateUpdateParameters;
import org.openapitools.client.model.GremlinDatabaseGetResults;
import org.openapitools.client.model.GremlinDatabaseListResult;
import org.openapitools.client.model.GremlinGraphCreateUpdateParameters;
import org.openapitools.client.model.GremlinGraphGetResults;
import org.openapitools.client.model.GremlinGraphListResult;
import org.openapitools.client.model.MetricDefinitionsListResult;
import org.openapitools.client.model.MetricListResult;
import org.openapitools.client.model.MongoDBCollectionCreateUpdateParameters;
import org.openapitools.client.model.MongoDBCollectionGetResults;
import org.openapitools.client.model.MongoDBCollectionListResult;
import org.openapitools.client.model.MongoDBDatabaseCreateUpdateParameters;
import org.openapitools.client.model.MongoDBDatabaseGetResults;
import org.openapitools.client.model.MongoDBDatabaseListResult;
import org.openapitools.client.model.PartitionMetricListResult;
import org.openapitools.client.model.PartitionUsagesResult;
import org.openapitools.client.model.PercentileMetricListResult;
import org.openapitools.client.model.RegionForOnlineOffline;
import org.openapitools.client.model.SqlContainerCreateUpdateParameters;
import org.openapitools.client.model.SqlContainerGetResults;
import org.openapitools.client.model.SqlContainerListResult;
import org.openapitools.client.model.SqlDatabaseCreateUpdateParameters;
import org.openapitools.client.model.SqlDatabaseGetResults;
import org.openapitools.client.model.SqlDatabaseListResult;
import org.openapitools.client.model.SqlStoredProcedureCreateUpdateParameters;
import org.openapitools.client.model.SqlStoredProcedureGetResults;
import org.openapitools.client.model.SqlStoredProcedureListResult;
import org.openapitools.client.model.SqlTriggerCreateUpdateParameters;
import org.openapitools.client.model.SqlTriggerGetResults;
import org.openapitools.client.model.SqlTriggerListResult;
import org.openapitools.client.model.SqlUserDefinedFunctionCreateUpdateParameters;
import org.openapitools.client.model.SqlUserDefinedFunctionGetResults;
import org.openapitools.client.model.SqlUserDefinedFunctionListResult;
import org.openapitools.client.model.TableCreateUpdateParameters;
import org.openapitools.client.model.TableGetResults;
import org.openapitools.client.model.TableListResult;
import org.openapitools.client.model.ThroughputSettingsGetResults;
import org.openapitools.client.model.ThroughputSettingsUpdateParameters;
import org.openapitools.client.model.UsagesResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cassandraResourcesCreateUpdateCassandraKeyspace
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateCassandraKeyspaceParameters The parameters to provide for the current Cassandra keyspace. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra keyspace create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Cassandra keyspace create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cassandraResourcesCreateUpdateCassandraKeyspaceCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, CassandraKeyspaceCreateUpdateParameters createUpdateCassandraKeyspaceParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdateCassandraKeyspaceParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "keyspaceName" + "}", localVarApiClient.escapeString(keyspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cassandraResourcesCreateUpdateCassandraKeyspaceValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, CassandraKeyspaceCreateUpdateParameters createUpdateCassandraKeyspaceParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling cassandraResourcesCreateUpdateCassandraKeyspace(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling cassandraResourcesCreateUpdateCassandraKeyspace(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling cassandraResourcesCreateUpdateCassandraKeyspace(Async)");
        }

        // verify the required parameter 'keyspaceName' is set
        if (keyspaceName == null) {
            throw new ApiException("Missing the required parameter 'keyspaceName' when calling cassandraResourcesCreateUpdateCassandraKeyspace(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling cassandraResourcesCreateUpdateCassandraKeyspace(Async)");
        }

        // verify the required parameter 'createUpdateCassandraKeyspaceParameters' is set
        if (createUpdateCassandraKeyspaceParameters == null) {
            throw new ApiException("Missing the required parameter 'createUpdateCassandraKeyspaceParameters' when calling cassandraResourcesCreateUpdateCassandraKeyspace(Async)");
        }

        return cassandraResourcesCreateUpdateCassandraKeyspaceCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, createUpdateCassandraKeyspaceParameters, _callback);

    }

    /**
     * 
     * Create or update an Azure Cosmos DB Cassandra keyspace
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateCassandraKeyspaceParameters The parameters to provide for the current Cassandra keyspace. (required)
     * @return CassandraKeyspaceGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra keyspace create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Cassandra keyspace create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public CassandraKeyspaceGetResults cassandraResourcesCreateUpdateCassandraKeyspace(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, CassandraKeyspaceCreateUpdateParameters createUpdateCassandraKeyspaceParameters) throws ApiException {
        ApiResponse<CassandraKeyspaceGetResults> localVarResp = cassandraResourcesCreateUpdateCassandraKeyspaceWithHttpInfo(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, createUpdateCassandraKeyspaceParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update an Azure Cosmos DB Cassandra keyspace
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateCassandraKeyspaceParameters The parameters to provide for the current Cassandra keyspace. (required)
     * @return ApiResponse&lt;CassandraKeyspaceGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra keyspace create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Cassandra keyspace create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CassandraKeyspaceGetResults> cassandraResourcesCreateUpdateCassandraKeyspaceWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, CassandraKeyspaceCreateUpdateParameters createUpdateCassandraKeyspaceParameters) throws ApiException {
        okhttp3.Call localVarCall = cassandraResourcesCreateUpdateCassandraKeyspaceValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, createUpdateCassandraKeyspaceParameters, null);
        Type localVarReturnType = new TypeToken<CassandraKeyspaceGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update an Azure Cosmos DB Cassandra keyspace
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateCassandraKeyspaceParameters The parameters to provide for the current Cassandra keyspace. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra keyspace create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Cassandra keyspace create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cassandraResourcesCreateUpdateCassandraKeyspaceAsync(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, CassandraKeyspaceCreateUpdateParameters createUpdateCassandraKeyspaceParameters, final ApiCallback<CassandraKeyspaceGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = cassandraResourcesCreateUpdateCassandraKeyspaceValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, createUpdateCassandraKeyspaceParameters, _callback);
        Type localVarReturnType = new TypeToken<CassandraKeyspaceGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cassandraResourcesCreateUpdateCassandraTable
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateCassandraTableParameters The parameters to provide for the current Cassandra Table. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra Table create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Cassandra Table create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cassandraResourcesCreateUpdateCassandraTableCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, CassandraTableCreateUpdateParameters createUpdateCassandraTableParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdateCassandraTableParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "keyspaceName" + "}", localVarApiClient.escapeString(keyspaceName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cassandraResourcesCreateUpdateCassandraTableValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, CassandraTableCreateUpdateParameters createUpdateCassandraTableParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling cassandraResourcesCreateUpdateCassandraTable(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling cassandraResourcesCreateUpdateCassandraTable(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling cassandraResourcesCreateUpdateCassandraTable(Async)");
        }

        // verify the required parameter 'keyspaceName' is set
        if (keyspaceName == null) {
            throw new ApiException("Missing the required parameter 'keyspaceName' when calling cassandraResourcesCreateUpdateCassandraTable(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling cassandraResourcesCreateUpdateCassandraTable(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling cassandraResourcesCreateUpdateCassandraTable(Async)");
        }

        // verify the required parameter 'createUpdateCassandraTableParameters' is set
        if (createUpdateCassandraTableParameters == null) {
            throw new ApiException("Missing the required parameter 'createUpdateCassandraTableParameters' when calling cassandraResourcesCreateUpdateCassandraTable(Async)");
        }

        return cassandraResourcesCreateUpdateCassandraTableCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, createUpdateCassandraTableParameters, _callback);

    }

    /**
     * 
     * Create or update an Azure Cosmos DB Cassandra Table
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateCassandraTableParameters The parameters to provide for the current Cassandra Table. (required)
     * @return CassandraTableGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra Table create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Cassandra Table create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public CassandraTableGetResults cassandraResourcesCreateUpdateCassandraTable(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, CassandraTableCreateUpdateParameters createUpdateCassandraTableParameters) throws ApiException {
        ApiResponse<CassandraTableGetResults> localVarResp = cassandraResourcesCreateUpdateCassandraTableWithHttpInfo(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, createUpdateCassandraTableParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update an Azure Cosmos DB Cassandra Table
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateCassandraTableParameters The parameters to provide for the current Cassandra Table. (required)
     * @return ApiResponse&lt;CassandraTableGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra Table create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Cassandra Table create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CassandraTableGetResults> cassandraResourcesCreateUpdateCassandraTableWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, CassandraTableCreateUpdateParameters createUpdateCassandraTableParameters) throws ApiException {
        okhttp3.Call localVarCall = cassandraResourcesCreateUpdateCassandraTableValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, createUpdateCassandraTableParameters, null);
        Type localVarReturnType = new TypeToken<CassandraTableGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update an Azure Cosmos DB Cassandra Table
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateCassandraTableParameters The parameters to provide for the current Cassandra Table. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra Table create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Cassandra Table create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cassandraResourcesCreateUpdateCassandraTableAsync(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, CassandraTableCreateUpdateParameters createUpdateCassandraTableParameters, final ApiCallback<CassandraTableGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = cassandraResourcesCreateUpdateCassandraTableValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, createUpdateCassandraTableParameters, _callback);
        Type localVarReturnType = new TypeToken<CassandraTableGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cassandraResourcesDeleteCassandraKeyspace
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Cassandra keyspace delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Cassandra keyspace delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cassandraResourcesDeleteCassandraKeyspaceCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "keyspaceName" + "}", localVarApiClient.escapeString(keyspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cassandraResourcesDeleteCassandraKeyspaceValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling cassandraResourcesDeleteCassandraKeyspace(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling cassandraResourcesDeleteCassandraKeyspace(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling cassandraResourcesDeleteCassandraKeyspace(Async)");
        }

        // verify the required parameter 'keyspaceName' is set
        if (keyspaceName == null) {
            throw new ApiException("Missing the required parameter 'keyspaceName' when calling cassandraResourcesDeleteCassandraKeyspace(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling cassandraResourcesDeleteCassandraKeyspace(Async)");
        }

        return cassandraResourcesDeleteCassandraKeyspaceCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB Cassandra keyspace.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Cassandra keyspace delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Cassandra keyspace delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void cassandraResourcesDeleteCassandraKeyspace(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion) throws ApiException {
        cassandraResourcesDeleteCassandraKeyspaceWithHttpInfo(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion);
    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB Cassandra keyspace.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Cassandra keyspace delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Cassandra keyspace delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cassandraResourcesDeleteCassandraKeyspaceWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = cassandraResourcesDeleteCassandraKeyspaceValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing Azure Cosmos DB Cassandra keyspace.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Cassandra keyspace delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Cassandra keyspace delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cassandraResourcesDeleteCassandraKeyspaceAsync(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cassandraResourcesDeleteCassandraKeyspaceValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for cassandraResourcesDeleteCassandraTable
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Cassandra table delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Cassandra table delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cassandraResourcesDeleteCassandraTableCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "keyspaceName" + "}", localVarApiClient.escapeString(keyspaceName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cassandraResourcesDeleteCassandraTableValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling cassandraResourcesDeleteCassandraTable(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling cassandraResourcesDeleteCassandraTable(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling cassandraResourcesDeleteCassandraTable(Async)");
        }

        // verify the required parameter 'keyspaceName' is set
        if (keyspaceName == null) {
            throw new ApiException("Missing the required parameter 'keyspaceName' when calling cassandraResourcesDeleteCassandraTable(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling cassandraResourcesDeleteCassandraTable(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling cassandraResourcesDeleteCassandraTable(Async)");
        }

        return cassandraResourcesDeleteCassandraTableCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB Cassandra table.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Cassandra table delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Cassandra table delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void cassandraResourcesDeleteCassandraTable(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion) throws ApiException {
        cassandraResourcesDeleteCassandraTableWithHttpInfo(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion);
    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB Cassandra table.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Cassandra table delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Cassandra table delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cassandraResourcesDeleteCassandraTableWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = cassandraResourcesDeleteCassandraTableValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing Azure Cosmos DB Cassandra table.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Cassandra table delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Cassandra table delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cassandraResourcesDeleteCassandraTableAsync(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cassandraResourcesDeleteCassandraTableValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for cassandraResourcesGetCassandraKeyspace
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra keyspace property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cassandraResourcesGetCassandraKeyspaceCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "keyspaceName" + "}", localVarApiClient.escapeString(keyspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cassandraResourcesGetCassandraKeyspaceValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling cassandraResourcesGetCassandraKeyspace(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling cassandraResourcesGetCassandraKeyspace(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling cassandraResourcesGetCassandraKeyspace(Async)");
        }

        // verify the required parameter 'keyspaceName' is set
        if (keyspaceName == null) {
            throw new ApiException("Missing the required parameter 'keyspaceName' when calling cassandraResourcesGetCassandraKeyspace(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling cassandraResourcesGetCassandraKeyspace(Async)");
        }

        return cassandraResourcesGetCassandraKeyspaceCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the Cassandra keyspaces under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return CassandraKeyspaceGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra keyspace property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public CassandraKeyspaceGetResults cassandraResourcesGetCassandraKeyspace(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion) throws ApiException {
        ApiResponse<CassandraKeyspaceGetResults> localVarResp = cassandraResourcesGetCassandraKeyspaceWithHttpInfo(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the Cassandra keyspaces under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;CassandraKeyspaceGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra keyspace property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CassandraKeyspaceGetResults> cassandraResourcesGetCassandraKeyspaceWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = cassandraResourcesGetCassandraKeyspaceValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, null);
        Type localVarReturnType = new TypeToken<CassandraKeyspaceGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the Cassandra keyspaces under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra keyspace property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cassandraResourcesGetCassandraKeyspaceAsync(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, final ApiCallback<CassandraKeyspaceGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = cassandraResourcesGetCassandraKeyspaceValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<CassandraKeyspaceGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cassandraResourcesGetCassandraKeyspaceThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra Keyspace was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cassandraResourcesGetCassandraKeyspaceThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/throughputSettings/default"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "keyspaceName" + "}", localVarApiClient.escapeString(keyspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cassandraResourcesGetCassandraKeyspaceThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling cassandraResourcesGetCassandraKeyspaceThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling cassandraResourcesGetCassandraKeyspaceThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling cassandraResourcesGetCassandraKeyspaceThroughput(Async)");
        }

        // verify the required parameter 'keyspaceName' is set
        if (keyspaceName == null) {
            throw new ApiException("Missing the required parameter 'keyspaceName' when calling cassandraResourcesGetCassandraKeyspaceThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling cassandraResourcesGetCassandraKeyspaceThroughput(Async)");
        }

        return cassandraResourcesGetCassandraKeyspaceThroughputCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the RUs per second of the Cassandra Keyspace under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ThroughputSettingsGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra Keyspace was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ThroughputSettingsGetResults cassandraResourcesGetCassandraKeyspaceThroughput(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion) throws ApiException {
        ApiResponse<ThroughputSettingsGetResults> localVarResp = cassandraResourcesGetCassandraKeyspaceThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the RUs per second of the Cassandra Keyspace under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;ThroughputSettingsGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra Keyspace was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ThroughputSettingsGetResults> cassandraResourcesGetCassandraKeyspaceThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = cassandraResourcesGetCassandraKeyspaceThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the RUs per second of the Cassandra Keyspace under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra Keyspace was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cassandraResourcesGetCassandraKeyspaceThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, final ApiCallback<ThroughputSettingsGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = cassandraResourcesGetCassandraKeyspaceThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cassandraResourcesGetCassandraTable
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra table property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cassandraResourcesGetCassandraTableCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "keyspaceName" + "}", localVarApiClient.escapeString(keyspaceName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cassandraResourcesGetCassandraTableValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling cassandraResourcesGetCassandraTable(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling cassandraResourcesGetCassandraTable(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling cassandraResourcesGetCassandraTable(Async)");
        }

        // verify the required parameter 'keyspaceName' is set
        if (keyspaceName == null) {
            throw new ApiException("Missing the required parameter 'keyspaceName' when calling cassandraResourcesGetCassandraTable(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling cassandraResourcesGetCassandraTable(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling cassandraResourcesGetCassandraTable(Async)");
        }

        return cassandraResourcesGetCassandraTableCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the Cassandra table under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return CassandraTableGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra table property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public CassandraTableGetResults cassandraResourcesGetCassandraTable(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion) throws ApiException {
        ApiResponse<CassandraTableGetResults> localVarResp = cassandraResourcesGetCassandraTableWithHttpInfo(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the Cassandra table under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;CassandraTableGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra table property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CassandraTableGetResults> cassandraResourcesGetCassandraTableWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = cassandraResourcesGetCassandraTableValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, null);
        Type localVarReturnType = new TypeToken<CassandraTableGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the Cassandra table under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra table property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cassandraResourcesGetCassandraTableAsync(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, final ApiCallback<CassandraTableGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = cassandraResourcesGetCassandraTableValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<CassandraTableGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cassandraResourcesGetCassandraTableThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra table was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cassandraResourcesGetCassandraTableThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}/throughputSettings/default"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "keyspaceName" + "}", localVarApiClient.escapeString(keyspaceName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cassandraResourcesGetCassandraTableThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling cassandraResourcesGetCassandraTableThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling cassandraResourcesGetCassandraTableThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling cassandraResourcesGetCassandraTableThroughput(Async)");
        }

        // verify the required parameter 'keyspaceName' is set
        if (keyspaceName == null) {
            throw new ApiException("Missing the required parameter 'keyspaceName' when calling cassandraResourcesGetCassandraTableThroughput(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling cassandraResourcesGetCassandraTableThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling cassandraResourcesGetCassandraTableThroughput(Async)");
        }

        return cassandraResourcesGetCassandraTableThroughputCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the RUs per second of the Cassandra table under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ThroughputSettingsGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra table was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ThroughputSettingsGetResults cassandraResourcesGetCassandraTableThroughput(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion) throws ApiException {
        ApiResponse<ThroughputSettingsGetResults> localVarResp = cassandraResourcesGetCassandraTableThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the RUs per second of the Cassandra table under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;ThroughputSettingsGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra table was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ThroughputSettingsGetResults> cassandraResourcesGetCassandraTableThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = cassandraResourcesGetCassandraTableThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the RUs per second of the Cassandra table under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra table was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cassandraResourcesGetCassandraTableThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, final ApiCallback<ThroughputSettingsGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = cassandraResourcesGetCassandraTableThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cassandraResourcesListCassandraKeyspaces
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra keyspace properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cassandraResourcesListCassandraKeyspacesCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cassandraResourcesListCassandraKeyspacesValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling cassandraResourcesListCassandraKeyspaces(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling cassandraResourcesListCassandraKeyspaces(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling cassandraResourcesListCassandraKeyspaces(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling cassandraResourcesListCassandraKeyspaces(Async)");
        }

        return cassandraResourcesListCassandraKeyspacesCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return CassandraKeyspaceListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra keyspace properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public CassandraKeyspaceListResult cassandraResourcesListCassandraKeyspaces(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        ApiResponse<CassandraKeyspaceListResult> localVarResp = cassandraResourcesListCassandraKeyspacesWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;CassandraKeyspaceListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra keyspace properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CassandraKeyspaceListResult> cassandraResourcesListCassandraKeyspacesWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = cassandraResourcesListCassandraKeyspacesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<CassandraKeyspaceListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra keyspace properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cassandraResourcesListCassandraKeyspacesAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<CassandraKeyspaceListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = cassandraResourcesListCassandraKeyspacesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<CassandraKeyspaceListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cassandraResourcesListCassandraTables
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra table properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cassandraResourcesListCassandraTablesCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "keyspaceName" + "}", localVarApiClient.escapeString(keyspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cassandraResourcesListCassandraTablesValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling cassandraResourcesListCassandraTables(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling cassandraResourcesListCassandraTables(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling cassandraResourcesListCassandraTables(Async)");
        }

        // verify the required parameter 'keyspaceName' is set
        if (keyspaceName == null) {
            throw new ApiException("Missing the required parameter 'keyspaceName' when calling cassandraResourcesListCassandraTables(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling cassandraResourcesListCassandraTables(Async)");
        }

        return cassandraResourcesListCassandraTablesCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the Cassandra table under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return CassandraTableListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra table properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public CassandraTableListResult cassandraResourcesListCassandraTables(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion) throws ApiException {
        ApiResponse<CassandraTableListResult> localVarResp = cassandraResourcesListCassandraTablesWithHttpInfo(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the Cassandra table under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;CassandraTableListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra table properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CassandraTableListResult> cassandraResourcesListCassandraTablesWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = cassandraResourcesListCassandraTablesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, null);
        Type localVarReturnType = new TypeToken<CassandraTableListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the Cassandra table under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra table properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cassandraResourcesListCassandraTablesAsync(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, final ApiCallback<CassandraTableListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = cassandraResourcesListCassandraTablesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<CassandraTableListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cassandraResourcesUpdateCassandraKeyspaceThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Cassandra Keyspace. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra Keyspace update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Cassandra Keyspace update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cassandraResourcesUpdateCassandraKeyspaceThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateThroughputParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/throughputSettings/default"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "keyspaceName" + "}", localVarApiClient.escapeString(keyspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cassandraResourcesUpdateCassandraKeyspaceThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling cassandraResourcesUpdateCassandraKeyspaceThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling cassandraResourcesUpdateCassandraKeyspaceThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling cassandraResourcesUpdateCassandraKeyspaceThroughput(Async)");
        }

        // verify the required parameter 'keyspaceName' is set
        if (keyspaceName == null) {
            throw new ApiException("Missing the required parameter 'keyspaceName' when calling cassandraResourcesUpdateCassandraKeyspaceThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling cassandraResourcesUpdateCassandraKeyspaceThroughput(Async)");
        }

        // verify the required parameter 'updateThroughputParameters' is set
        if (updateThroughputParameters == null) {
            throw new ApiException("Missing the required parameter 'updateThroughputParameters' when calling cassandraResourcesUpdateCassandraKeyspaceThroughput(Async)");
        }

        return cassandraResourcesUpdateCassandraKeyspaceThroughputCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, updateThroughputParameters, _callback);

    }

    /**
     * 
     * Update RUs per second of an Azure Cosmos DB Cassandra Keyspace
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Cassandra Keyspace. (required)
     * @return ThroughputSettingsGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra Keyspace update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Cassandra Keyspace update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ThroughputSettingsGetResults cassandraResourcesUpdateCassandraKeyspaceThroughput(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters) throws ApiException {
        ApiResponse<ThroughputSettingsGetResults> localVarResp = cassandraResourcesUpdateCassandraKeyspaceThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, updateThroughputParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update RUs per second of an Azure Cosmos DB Cassandra Keyspace
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Cassandra Keyspace. (required)
     * @return ApiResponse&lt;ThroughputSettingsGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra Keyspace update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Cassandra Keyspace update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ThroughputSettingsGetResults> cassandraResourcesUpdateCassandraKeyspaceThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters) throws ApiException {
        okhttp3.Call localVarCall = cassandraResourcesUpdateCassandraKeyspaceThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, updateThroughputParameters, null);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update RUs per second of an Azure Cosmos DB Cassandra Keyspace
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Cassandra Keyspace. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra Keyspace update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Cassandra Keyspace update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cassandraResourcesUpdateCassandraKeyspaceThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters, final ApiCallback<ThroughputSettingsGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = cassandraResourcesUpdateCassandraKeyspaceThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, updateThroughputParameters, _callback);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cassandraResourcesUpdateCassandraTableThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Cassandra table. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra table update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Cassandra table update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cassandraResourcesUpdateCassandraTableThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateThroughputParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}/throughputSettings/default"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "keyspaceName" + "}", localVarApiClient.escapeString(keyspaceName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cassandraResourcesUpdateCassandraTableThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling cassandraResourcesUpdateCassandraTableThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling cassandraResourcesUpdateCassandraTableThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling cassandraResourcesUpdateCassandraTableThroughput(Async)");
        }

        // verify the required parameter 'keyspaceName' is set
        if (keyspaceName == null) {
            throw new ApiException("Missing the required parameter 'keyspaceName' when calling cassandraResourcesUpdateCassandraTableThroughput(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling cassandraResourcesUpdateCassandraTableThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling cassandraResourcesUpdateCassandraTableThroughput(Async)");
        }

        // verify the required parameter 'updateThroughputParameters' is set
        if (updateThroughputParameters == null) {
            throw new ApiException("Missing the required parameter 'updateThroughputParameters' when calling cassandraResourcesUpdateCassandraTableThroughput(Async)");
        }

        return cassandraResourcesUpdateCassandraTableThroughputCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, updateThroughputParameters, _callback);

    }

    /**
     * 
     * Update RUs per second of an Azure Cosmos DB Cassandra table
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Cassandra table. (required)
     * @return ThroughputSettingsGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra table update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Cassandra table update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ThroughputSettingsGetResults cassandraResourcesUpdateCassandraTableThroughput(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters) throws ApiException {
        ApiResponse<ThroughputSettingsGetResults> localVarResp = cassandraResourcesUpdateCassandraTableThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, updateThroughputParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update RUs per second of an Azure Cosmos DB Cassandra table
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Cassandra table. (required)
     * @return ApiResponse&lt;ThroughputSettingsGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra table update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Cassandra table update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ThroughputSettingsGetResults> cassandraResourcesUpdateCassandraTableThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters) throws ApiException {
        okhttp3.Call localVarCall = cassandraResourcesUpdateCassandraTableThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, updateThroughputParameters, null);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update RUs per second of an Azure Cosmos DB Cassandra table
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Cassandra table. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra table update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Cassandra table update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cassandraResourcesUpdateCassandraTableThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters, final ApiCallback<ThroughputSettingsGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = cassandraResourcesUpdateCassandraTableThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, updateThroughputParameters, _callback);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for collectionListMetricDefinitions
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric definitions for the collection were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionListMetricDefinitionsCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/metricDefinitions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseRid" + "}", localVarApiClient.escapeString(databaseRid.toString()))
            .replace("{" + "collectionRid" + "}", localVarApiClient.escapeString(collectionRid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collectionListMetricDefinitionsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling collectionListMetricDefinitions(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling collectionListMetricDefinitions(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling collectionListMetricDefinitions(Async)");
        }

        // verify the required parameter 'databaseRid' is set
        if (databaseRid == null) {
            throw new ApiException("Missing the required parameter 'databaseRid' when calling collectionListMetricDefinitions(Async)");
        }

        // verify the required parameter 'collectionRid' is set
        if (collectionRid == null) {
            throw new ApiException("Missing the required parameter 'collectionRid' when calling collectionListMetricDefinitions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling collectionListMetricDefinitions(Async)");
        }

        return collectionListMetricDefinitionsCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves metric definitions for the given collection.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return MetricDefinitionsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric definitions for the collection were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public MetricDefinitionsListResult collectionListMetricDefinitions(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion) throws ApiException {
        ApiResponse<MetricDefinitionsListResult> localVarResp = collectionListMetricDefinitionsWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves metric definitions for the given collection.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;MetricDefinitionsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric definitions for the collection were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricDefinitionsListResult> collectionListMetricDefinitionsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = collectionListMetricDefinitionsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, null);
        Type localVarReturnType = new TypeToken<MetricDefinitionsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves metric definitions for the given collection.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric definitions for the collection were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionListMetricDefinitionsAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, final ApiCallback<MetricDefinitionsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = collectionListMetricDefinitionsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MetricDefinitionsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for collectionListMetrics
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionListMetricsCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/metrics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseRid" + "}", localVarApiClient.escapeString(databaseRid.toString()))
            .replace("{" + "collectionRid" + "}", localVarApiClient.escapeString(collectionRid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collectionListMetricsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling collectionListMetrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling collectionListMetrics(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling collectionListMetrics(Async)");
        }

        // verify the required parameter 'databaseRid' is set
        if (databaseRid == null) {
            throw new ApiException("Missing the required parameter 'databaseRid' when calling collectionListMetrics(Async)");
        }

        // verify the required parameter 'collectionRid' is set
        if (collectionRid == null) {
            throw new ApiException("Missing the required parameter 'collectionRid' when calling collectionListMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling collectionListMetrics(Async)");
        }

        // verify the required parameter '$filter' is set
        if ($filter == null) {
            throw new ApiException("Missing the required parameter '$filter' when calling collectionListMetrics(Async)");
        }

        return collectionListMetricsCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given database account and collection.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return MetricListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public MetricListResult collectionListMetrics(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter) throws ApiException {
        ApiResponse<MetricListResult> localVarResp = collectionListMetricsWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given database account and collection.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return ApiResponse&lt;MetricListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricListResult> collectionListMetricsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = collectionListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<MetricListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the metrics determined by the given filter for the given database account and collection.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionListMetricsAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback<MetricListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = collectionListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<MetricListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for collectionListUsages
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the collection were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionListUsagesCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/usages"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseRid" + "}", localVarApiClient.escapeString(databaseRid.toString()))
            .replace("{" + "collectionRid" + "}", localVarApiClient.escapeString(collectionRid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collectionListUsagesValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling collectionListUsages(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling collectionListUsages(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling collectionListUsages(Async)");
        }

        // verify the required parameter 'databaseRid' is set
        if (databaseRid == null) {
            throw new ApiException("Missing the required parameter 'databaseRid' when calling collectionListUsages(Async)");
        }

        // verify the required parameter 'collectionRid' is set
        if (collectionRid == null) {
            throw new ApiException("Missing the required parameter 'collectionRid' when calling collectionListUsages(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling collectionListUsages(Async)");
        }

        return collectionListUsagesCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the usages (most recent storage data) for the given collection.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @return UsagesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the collection were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public UsagesResult collectionListUsages(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter) throws ApiException {
        ApiResponse<UsagesResult> localVarResp = collectionListUsagesWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the usages (most recent storage data) for the given collection.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @return ApiResponse&lt;UsagesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the collection were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsagesResult> collectionListUsagesWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = collectionListUsagesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<UsagesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the usages (most recent storage data) for the given collection.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the collection were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionListUsagesAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback<UsagesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = collectionListUsagesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<UsagesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for collectionPartitionListMetrics
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the collection were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionPartitionListMetricsCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitions/metrics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseRid" + "}", localVarApiClient.escapeString(databaseRid.toString()))
            .replace("{" + "collectionRid" + "}", localVarApiClient.escapeString(collectionRid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collectionPartitionListMetricsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling collectionPartitionListMetrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling collectionPartitionListMetrics(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling collectionPartitionListMetrics(Async)");
        }

        // verify the required parameter 'databaseRid' is set
        if (databaseRid == null) {
            throw new ApiException("Missing the required parameter 'databaseRid' when calling collectionPartitionListMetrics(Async)");
        }

        // verify the required parameter 'collectionRid' is set
        if (collectionRid == null) {
            throw new ApiException("Missing the required parameter 'collectionRid' when calling collectionPartitionListMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling collectionPartitionListMetrics(Async)");
        }

        // verify the required parameter '$filter' is set
        if ($filter == null) {
            throw new ApiException("Missing the required parameter '$filter' when calling collectionPartitionListMetrics(Async)");
        }

        return collectionPartitionListMetricsCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given collection, split by partition.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return PartitionMetricListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the collection were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public PartitionMetricListResult collectionPartitionListMetrics(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter) throws ApiException {
        ApiResponse<PartitionMetricListResult> localVarResp = collectionPartitionListMetricsWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given collection, split by partition.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return ApiResponse&lt;PartitionMetricListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the collection were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PartitionMetricListResult> collectionPartitionListMetricsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = collectionPartitionListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<PartitionMetricListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the metrics determined by the given filter for the given collection, split by partition.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the collection were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionPartitionListMetricsAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback<PartitionMetricListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = collectionPartitionListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<PartitionMetricListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for collectionPartitionListUsages
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the collection, per partition were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionPartitionListUsagesCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitions/usages"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseRid" + "}", localVarApiClient.escapeString(databaseRid.toString()))
            .replace("{" + "collectionRid" + "}", localVarApiClient.escapeString(collectionRid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collectionPartitionListUsagesValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling collectionPartitionListUsages(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling collectionPartitionListUsages(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling collectionPartitionListUsages(Async)");
        }

        // verify the required parameter 'databaseRid' is set
        if (databaseRid == null) {
            throw new ApiException("Missing the required parameter 'databaseRid' when calling collectionPartitionListUsages(Async)");
        }

        // verify the required parameter 'collectionRid' is set
        if (collectionRid == null) {
            throw new ApiException("Missing the required parameter 'collectionRid' when calling collectionPartitionListUsages(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling collectionPartitionListUsages(Async)");
        }

        return collectionPartitionListUsagesCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the usages (most recent storage data) for the given collection, split by partition.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @return PartitionUsagesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the collection, per partition were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public PartitionUsagesResult collectionPartitionListUsages(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter) throws ApiException {
        ApiResponse<PartitionUsagesResult> localVarResp = collectionPartitionListUsagesWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the usages (most recent storage data) for the given collection, split by partition.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @return ApiResponse&lt;PartitionUsagesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the collection, per partition were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PartitionUsagesResult> collectionPartitionListUsagesWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = collectionPartitionListUsagesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<PartitionUsagesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the usages (most recent storage data) for the given collection, split by partition.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the collection, per partition were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionPartitionListUsagesAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback<PartitionUsagesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = collectionPartitionListUsagesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<PartitionUsagesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for collectionPartitionRegionListMetrics
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the collection and region were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionPartitionRegionListMetricsCall(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/partitions/metrics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "region" + "}", localVarApiClient.escapeString(region.toString()))
            .replace("{" + "databaseRid" + "}", localVarApiClient.escapeString(databaseRid.toString()))
            .replace("{" + "collectionRid" + "}", localVarApiClient.escapeString(collectionRid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collectionPartitionRegionListMetricsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling collectionPartitionRegionListMetrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling collectionPartitionRegionListMetrics(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling collectionPartitionRegionListMetrics(Async)");
        }

        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling collectionPartitionRegionListMetrics(Async)");
        }

        // verify the required parameter 'databaseRid' is set
        if (databaseRid == null) {
            throw new ApiException("Missing the required parameter 'databaseRid' when calling collectionPartitionRegionListMetrics(Async)");
        }

        // verify the required parameter 'collectionRid' is set
        if (collectionRid == null) {
            throw new ApiException("Missing the required parameter 'collectionRid' when calling collectionPartitionRegionListMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling collectionPartitionRegionListMetrics(Async)");
        }

        // verify the required parameter '$filter' is set
        if ($filter == null) {
            throw new ApiException("Missing the required parameter '$filter' when calling collectionPartitionRegionListMetrics(Async)");
        }

        return collectionPartitionRegionListMetricsCall(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given collection and region, split by partition.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return PartitionMetricListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the collection and region were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public PartitionMetricListResult collectionPartitionRegionListMetrics(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String apiVersion, String $filter) throws ApiException {
        ApiResponse<PartitionMetricListResult> localVarResp = collectionPartitionRegionListMetricsWithHttpInfo(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given collection and region, split by partition.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return ApiResponse&lt;PartitionMetricListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the collection and region were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PartitionMetricListResult> collectionPartitionRegionListMetricsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = collectionPartitionRegionListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<PartitionMetricListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the metrics determined by the given filter for the given collection and region, split by partition.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the collection and region were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionPartitionRegionListMetricsAsync(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback<PartitionMetricListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = collectionPartitionRegionListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<PartitionMetricListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for collectionRegionListMetrics
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionRegionListMetricsCall(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/metrics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "region" + "}", localVarApiClient.escapeString(region.toString()))
            .replace("{" + "databaseRid" + "}", localVarApiClient.escapeString(databaseRid.toString()))
            .replace("{" + "collectionRid" + "}", localVarApiClient.escapeString(collectionRid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collectionRegionListMetricsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling collectionRegionListMetrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling collectionRegionListMetrics(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling collectionRegionListMetrics(Async)");
        }

        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling collectionRegionListMetrics(Async)");
        }

        // verify the required parameter 'databaseRid' is set
        if (databaseRid == null) {
            throw new ApiException("Missing the required parameter 'databaseRid' when calling collectionRegionListMetrics(Async)");
        }

        // verify the required parameter 'collectionRid' is set
        if (collectionRid == null) {
            throw new ApiException("Missing the required parameter 'collectionRid' when calling collectionRegionListMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling collectionRegionListMetrics(Async)");
        }

        // verify the required parameter '$filter' is set
        if ($filter == null) {
            throw new ApiException("Missing the required parameter '$filter' when calling collectionRegionListMetrics(Async)");
        }

        return collectionRegionListMetricsCall(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given database account, collection and region.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return MetricListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public MetricListResult collectionRegionListMetrics(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String apiVersion, String $filter) throws ApiException {
        ApiResponse<MetricListResult> localVarResp = collectionRegionListMetricsWithHttpInfo(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given database account, collection and region.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return ApiResponse&lt;MetricListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricListResult> collectionRegionListMetricsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = collectionRegionListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<MetricListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the metrics determined by the given filter for the given database account, collection and region.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionRegionListMetricsAsync(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback<MetricListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = collectionRegionListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<MetricListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountRegionListMetrics
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountRegionListMetricsCall(String subscriptionId, String resourceGroupName, String accountName, String region, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/metrics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "region" + "}", localVarApiClient.escapeString(region.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountRegionListMetricsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String region, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountRegionListMetrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountRegionListMetrics(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountRegionListMetrics(Async)");
        }

        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling databaseAccountRegionListMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountRegionListMetrics(Async)");
        }

        // verify the required parameter '$filter' is set
        if ($filter == null) {
            throw new ApiException("Missing the required parameter '$filter' when calling databaseAccountRegionListMetrics(Async)");
        }

        return databaseAccountRegionListMetricsCall(subscriptionId, resourceGroupName, accountName, region, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given database account and region.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return MetricListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public MetricListResult databaseAccountRegionListMetrics(String subscriptionId, String resourceGroupName, String accountName, String region, String apiVersion, String $filter) throws ApiException {
        ApiResponse<MetricListResult> localVarResp = databaseAccountRegionListMetricsWithHttpInfo(subscriptionId, resourceGroupName, accountName, region, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given database account and region.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return ApiResponse&lt;MetricListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricListResult> databaseAccountRegionListMetricsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String region, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountRegionListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, region, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<MetricListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the metrics determined by the given filter for the given database account and region.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountRegionListMetricsAsync(String subscriptionId, String resourceGroupName, String accountName, String region, String apiVersion, String $filter, final ApiCallback<MetricListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountRegionListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, region, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<MetricListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsCheckNameExists
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The account name is valid but is already in use. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The account name is available and valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsCheckNameExistsCall(String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.DocumentDB/databaseAccountNames/{accountName}"
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsCheckNameExistsValidateBeforeCall(String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsCheckNameExists(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsCheckNameExists(Async)");
        }

        return databaseAccountsCheckNameExistsCall(accountName, apiVersion, _callback);

    }

    /**
     * 
     * Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only lowercase letters, numbers, and the &#39;-&#39; character, and must be between 3 and 50 characters.
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The account name is valid but is already in use. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The account name is available and valid. </td><td>  -  </td></tr>
     </table>
     */
    public void databaseAccountsCheckNameExists(String accountName, String apiVersion) throws ApiException {
        databaseAccountsCheckNameExistsWithHttpInfo(accountName, apiVersion);
    }

    /**
     * 
     * Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only lowercase letters, numbers, and the &#39;-&#39; character, and must be between 3 and 50 characters.
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The account name is valid but is already in use. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The account name is available and valid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> databaseAccountsCheckNameExistsWithHttpInfo(String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsCheckNameExistsValidateBeforeCall(accountName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only lowercase letters, numbers, and the &#39;-&#39; character, and must be between 3 and 50 characters.
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The account name is valid but is already in use. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The account name is available and valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsCheckNameExistsAsync(String accountName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsCheckNameExistsValidateBeforeCall(accountName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsCreateOrUpdate
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateParameters The parameters to provide for the current database account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The database account create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountCreateUpdateParameters createUpdateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdateParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountCreateUpdateParameters createUpdateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'createUpdateParameters' is set
        if (createUpdateParameters == null) {
            throw new ApiException("Missing the required parameter 'createUpdateParameters' when calling databaseAccountsCreateOrUpdate(Async)");
        }

        return databaseAccountsCreateOrUpdateCall(subscriptionId, resourceGroupName, accountName, apiVersion, createUpdateParameters, _callback);

    }

    /**
     * 
     * Creates or updates an Azure Cosmos DB database account. The \&quot;Update\&quot; method is preferred when performing updates on an account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateParameters The parameters to provide for the current database account. (required)
     * @return DatabaseAccountGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The database account create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseAccountGetResults databaseAccountsCreateOrUpdate(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountCreateUpdateParameters createUpdateParameters) throws ApiException {
        ApiResponse<DatabaseAccountGetResults> localVarResp = databaseAccountsCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion, createUpdateParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates an Azure Cosmos DB database account. The \&quot;Update\&quot; method is preferred when performing updates on an account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateParameters The parameters to provide for the current database account. (required)
     * @return ApiResponse&lt;DatabaseAccountGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The database account create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseAccountGetResults> databaseAccountsCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountCreateUpdateParameters createUpdateParameters) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, createUpdateParameters, null);
        Type localVarReturnType = new TypeToken<DatabaseAccountGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates an Azure Cosmos DB database account. The \&quot;Update\&quot; method is preferred when performing updates on an account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateParameters The parameters to provide for the current database account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The database account create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountCreateUpdateParameters createUpdateParameters, final ApiCallback<DatabaseAccountGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, createUpdateParameters, _callback);
        Type localVarReturnType = new TypeToken<DatabaseAccountGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsDelete
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The database account delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified account does not exist in the subscription. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsDeleteCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsDelete(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsDelete(Async)");
        }

        return databaseAccountsDeleteCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The database account delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified account does not exist in the subscription. </td><td>  -  </td></tr>
     </table>
     */
    public void databaseAccountsDelete(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        databaseAccountsDeleteWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The database account delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified account does not exist in the subscription. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> databaseAccountsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The database account delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified account does not exist in the subscription. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsDeleteAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsFailoverPriorityChange
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param failoverParameters The new failover policies for the database account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The failover policy change operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsFailoverPriorityChangeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, FailoverPolicies failoverParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = failoverParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/failoverPriorityChange"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsFailoverPriorityChangeValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, FailoverPolicies failoverParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsFailoverPriorityChange(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsFailoverPriorityChange(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsFailoverPriorityChange(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsFailoverPriorityChange(Async)");
        }

        // verify the required parameter 'failoverParameters' is set
        if (failoverParameters == null) {
            throw new ApiException("Missing the required parameter 'failoverParameters' when calling databaseAccountsFailoverPriorityChange(Async)");
        }

        return databaseAccountsFailoverPriorityChangeCall(subscriptionId, resourceGroupName, accountName, apiVersion, failoverParameters, _callback);

    }

    /**
     * 
     * Changes the failover priority for the Azure Cosmos DB database account. A failover priority of 0 indicates a write region. The maximum value for a failover priority &#x3D; (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param failoverParameters The new failover policies for the database account. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The failover policy change operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void databaseAccountsFailoverPriorityChange(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, FailoverPolicies failoverParameters) throws ApiException {
        databaseAccountsFailoverPriorityChangeWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion, failoverParameters);
    }

    /**
     * 
     * Changes the failover priority for the Azure Cosmos DB database account. A failover priority of 0 indicates a write region. The maximum value for a failover priority &#x3D; (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param failoverParameters The new failover policies for the database account. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The failover policy change operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> databaseAccountsFailoverPriorityChangeWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, FailoverPolicies failoverParameters) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsFailoverPriorityChangeValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, failoverParameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Changes the failover priority for the Azure Cosmos DB database account. A failover priority of 0 indicates a write region. The maximum value for a failover priority &#x3D; (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param failoverParameters The new failover policies for the database account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The failover policy change operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsFailoverPriorityChangeAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, FailoverPolicies failoverParameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsFailoverPriorityChangeValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, failoverParameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsGet
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The database account properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGet(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsGet(Async)");
        }

        return databaseAccountsGetCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves the properties of an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return DatabaseAccountGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The database account properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseAccountGetResults databaseAccountsGet(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        ApiResponse<DatabaseAccountGetResults> localVarResp = databaseAccountsGetWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the properties of an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;DatabaseAccountGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The database account properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseAccountGetResults> databaseAccountsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DatabaseAccountGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the properties of an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The database account properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<DatabaseAccountGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DatabaseAccountGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsGetReadOnlyKeys
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetReadOnlyKeysCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/readonlykeys"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsGetReadOnlyKeysValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetReadOnlyKeys(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetReadOnlyKeys(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsGetReadOnlyKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsGetReadOnlyKeys(Async)");
        }

        return databaseAccountsGetReadOnlyKeysCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the read-only access keys for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return DatabaseAccountListReadOnlyKeysResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseAccountListReadOnlyKeysResult databaseAccountsGetReadOnlyKeys(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        ApiResponse<DatabaseAccountListReadOnlyKeysResult> localVarResp = databaseAccountsGetReadOnlyKeysWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the read-only access keys for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;DatabaseAccountListReadOnlyKeysResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseAccountListReadOnlyKeysResult> databaseAccountsGetReadOnlyKeysWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsGetReadOnlyKeysValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DatabaseAccountListReadOnlyKeysResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the read-only access keys for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetReadOnlyKeysAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<DatabaseAccountListReadOnlyKeysResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsGetReadOnlyKeysValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DatabaseAccountListReadOnlyKeysResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsList
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/databaseAccounts"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsListValidateBeforeCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsList(Async)");
        }

        return databaseAccountsListCall(apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Lists all the Azure Cosmos DB database accounts available under the subscription.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @return DatabaseAccountsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseAccountsListResult databaseAccountsList(String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<DatabaseAccountsListResult> localVarResp = databaseAccountsListWithHttpInfo(apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the Azure Cosmos DB database accounts available under the subscription.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @return ApiResponse&lt;DatabaseAccountsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseAccountsListResult> databaseAccountsListWithHttpInfo(String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsListValidateBeforeCall(apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<DatabaseAccountsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the Azure Cosmos DB database accounts available under the subscription.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListAsync(String apiVersion, String subscriptionId, final ApiCallback<DatabaseAccountsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsListValidateBeforeCall(apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<DatabaseAccountsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsListByResourceGroup
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListByResourceGroupCall(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsListByResourceGroupValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsListByResourceGroup(Async)");
        }

        return databaseAccountsListByResourceGroupCall(resourceGroupName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Lists all the Azure Cosmos DB database accounts available under the given resource group.
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @return DatabaseAccountsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseAccountsListResult databaseAccountsListByResourceGroup(String resourceGroupName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<DatabaseAccountsListResult> localVarResp = databaseAccountsListByResourceGroupWithHttpInfo(resourceGroupName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the Azure Cosmos DB database accounts available under the given resource group.
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @return ApiResponse&lt;DatabaseAccountsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseAccountsListResult> databaseAccountsListByResourceGroupWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsListByResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<DatabaseAccountsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the Azure Cosmos DB database accounts available under the given resource group.
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListByResourceGroupAsync(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback<DatabaseAccountsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsListByResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<DatabaseAccountsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsListConnectionStrings
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListConnectionStringsCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/listConnectionStrings"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsListConnectionStringsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsListConnectionStrings(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListConnectionStrings(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsListConnectionStrings(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsListConnectionStrings(Async)");
        }

        return databaseAccountsListConnectionStringsCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the connection strings for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return DatabaseAccountListConnectionStringsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseAccountListConnectionStringsResult databaseAccountsListConnectionStrings(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        ApiResponse<DatabaseAccountListConnectionStringsResult> localVarResp = databaseAccountsListConnectionStringsWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the connection strings for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;DatabaseAccountListConnectionStringsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseAccountListConnectionStringsResult> databaseAccountsListConnectionStringsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsListConnectionStringsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DatabaseAccountListConnectionStringsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the connection strings for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListConnectionStringsAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<DatabaseAccountListConnectionStringsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsListConnectionStringsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DatabaseAccountListConnectionStringsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsListKeys
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListKeysCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/listKeys"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsListKeysValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsListKeys(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListKeys(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsListKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsListKeys(Async)");
        }

        return databaseAccountsListKeysCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the access keys for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return DatabaseAccountListKeysResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseAccountListKeysResult databaseAccountsListKeys(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        ApiResponse<DatabaseAccountListKeysResult> localVarResp = databaseAccountsListKeysWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the access keys for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;DatabaseAccountListKeysResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseAccountListKeysResult> databaseAccountsListKeysWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsListKeysValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DatabaseAccountListKeysResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the access keys for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListKeysAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<DatabaseAccountListKeysResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsListKeysValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DatabaseAccountListKeysResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsListMetricDefinitions
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric definitions for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListMetricDefinitionsCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/metricDefinitions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsListMetricDefinitionsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsListMetricDefinitions(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListMetricDefinitions(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsListMetricDefinitions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsListMetricDefinitions(Async)");
        }

        return databaseAccountsListMetricDefinitionsCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves metric definitions for the given database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return MetricDefinitionsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric definitions for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public MetricDefinitionsListResult databaseAccountsListMetricDefinitions(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        ApiResponse<MetricDefinitionsListResult> localVarResp = databaseAccountsListMetricDefinitionsWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves metric definitions for the given database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;MetricDefinitionsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric definitions for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricDefinitionsListResult> databaseAccountsListMetricDefinitionsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsListMetricDefinitionsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<MetricDefinitionsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves metric definitions for the given database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric definitions for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListMetricDefinitionsAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<MetricDefinitionsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsListMetricDefinitionsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MetricDefinitionsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsListMetrics
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListMetricsCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/metrics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsListMetricsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsListMetrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListMetrics(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsListMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsListMetrics(Async)");
        }

        // verify the required parameter '$filter' is set
        if ($filter == null) {
            throw new ApiException("Missing the required parameter '$filter' when calling databaseAccountsListMetrics(Async)");
        }

        return databaseAccountsListMetricsCall(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return MetricListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public MetricListResult databaseAccountsListMetrics(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter) throws ApiException {
        ApiResponse<MetricListResult> localVarResp = databaseAccountsListMetricsWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return ApiResponse&lt;MetricListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricListResult> databaseAccountsListMetricsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<MetricListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the metrics determined by the given filter for the given database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListMetricsAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter, final ApiCallback<MetricListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<MetricListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsListReadOnlyKeys
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListReadOnlyKeysCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/readonlykeys"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsListReadOnlyKeysValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsListReadOnlyKeys(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListReadOnlyKeys(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsListReadOnlyKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsListReadOnlyKeys(Async)");
        }

        return databaseAccountsListReadOnlyKeysCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the read-only access keys for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return DatabaseAccountListReadOnlyKeysResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseAccountListReadOnlyKeysResult databaseAccountsListReadOnlyKeys(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        ApiResponse<DatabaseAccountListReadOnlyKeysResult> localVarResp = databaseAccountsListReadOnlyKeysWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the read-only access keys for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;DatabaseAccountListReadOnlyKeysResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseAccountListReadOnlyKeysResult> databaseAccountsListReadOnlyKeysWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsListReadOnlyKeysValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DatabaseAccountListReadOnlyKeysResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the read-only access keys for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListReadOnlyKeysAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<DatabaseAccountListReadOnlyKeysResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsListReadOnlyKeysValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DatabaseAccountListReadOnlyKeysResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsListUsages
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListUsagesCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/usages"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsListUsagesValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsListUsages(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListUsages(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsListUsages(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsListUsages(Async)");
        }

        return databaseAccountsListUsagesCall(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the usages (most recent data) for the given database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @return UsagesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public UsagesResult databaseAccountsListUsages(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter) throws ApiException {
        ApiResponse<UsagesResult> localVarResp = databaseAccountsListUsagesWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the usages (most recent data) for the given database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @return ApiResponse&lt;UsagesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsagesResult> databaseAccountsListUsagesWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsListUsagesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<UsagesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the usages (most recent data) for the given database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListUsagesAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter, final ApiCallback<UsagesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsListUsagesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<UsagesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsOfflineRegion
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param regionParameterForOffline Cosmos DB region to offline for the database account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The offline region operation is completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The offline region operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsOfflineRegionCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RegionForOnlineOffline regionParameterForOffline, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = regionParameterForOffline;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/offlineRegion"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsOfflineRegionValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RegionForOnlineOffline regionParameterForOffline, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsOfflineRegion(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsOfflineRegion(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsOfflineRegion(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsOfflineRegion(Async)");
        }

        // verify the required parameter 'regionParameterForOffline' is set
        if (regionParameterForOffline == null) {
            throw new ApiException("Missing the required parameter 'regionParameterForOffline' when calling databaseAccountsOfflineRegion(Async)");
        }

        return databaseAccountsOfflineRegionCall(subscriptionId, resourceGroupName, accountName, apiVersion, regionParameterForOffline, _callback);

    }

    /**
     * 
     * Offline the specified region for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param regionParameterForOffline Cosmos DB region to offline for the database account. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The offline region operation is completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The offline region operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void databaseAccountsOfflineRegion(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RegionForOnlineOffline regionParameterForOffline) throws ApiException {
        databaseAccountsOfflineRegionWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion, regionParameterForOffline);
    }

    /**
     * 
     * Offline the specified region for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param regionParameterForOffline Cosmos DB region to offline for the database account. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The offline region operation is completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The offline region operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> databaseAccountsOfflineRegionWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RegionForOnlineOffline regionParameterForOffline) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsOfflineRegionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, regionParameterForOffline, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Offline the specified region for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param regionParameterForOffline Cosmos DB region to offline for the database account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The offline region operation is completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The offline region operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsOfflineRegionAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RegionForOnlineOffline regionParameterForOffline, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsOfflineRegionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, regionParameterForOffline, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsOnlineRegion
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param regionParameterForOnline Cosmos DB region to online for the database account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The online region operation is completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The online region operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsOnlineRegionCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RegionForOnlineOffline regionParameterForOnline, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = regionParameterForOnline;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/onlineRegion"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsOnlineRegionValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RegionForOnlineOffline regionParameterForOnline, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsOnlineRegion(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsOnlineRegion(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsOnlineRegion(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsOnlineRegion(Async)");
        }

        // verify the required parameter 'regionParameterForOnline' is set
        if (regionParameterForOnline == null) {
            throw new ApiException("Missing the required parameter 'regionParameterForOnline' when calling databaseAccountsOnlineRegion(Async)");
        }

        return databaseAccountsOnlineRegionCall(subscriptionId, resourceGroupName, accountName, apiVersion, regionParameterForOnline, _callback);

    }

    /**
     * 
     * Online the specified region for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param regionParameterForOnline Cosmos DB region to online for the database account. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The online region operation is completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The online region operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void databaseAccountsOnlineRegion(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RegionForOnlineOffline regionParameterForOnline) throws ApiException {
        databaseAccountsOnlineRegionWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion, regionParameterForOnline);
    }

    /**
     * 
     * Online the specified region for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param regionParameterForOnline Cosmos DB region to online for the database account. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The online region operation is completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The online region operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> databaseAccountsOnlineRegionWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RegionForOnlineOffline regionParameterForOnline) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsOnlineRegionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, regionParameterForOnline, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Online the specified region for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param regionParameterForOnline Cosmos DB region to online for the database account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The online region operation is completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The online region operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsOnlineRegionAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RegionForOnlineOffline regionParameterForOnline, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsOnlineRegionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, regionParameterForOnline, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsRegenerateKey
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param keyToRegenerate The name of the key to regenerate. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The regenerate key operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsRegenerateKeyCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountRegenerateKeyParameters keyToRegenerate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keyToRegenerate;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/regenerateKey"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsRegenerateKeyValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountRegenerateKeyParameters keyToRegenerate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsRegenerateKey(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsRegenerateKey(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsRegenerateKey(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsRegenerateKey(Async)");
        }

        // verify the required parameter 'keyToRegenerate' is set
        if (keyToRegenerate == null) {
            throw new ApiException("Missing the required parameter 'keyToRegenerate' when calling databaseAccountsRegenerateKey(Async)");
        }

        return databaseAccountsRegenerateKeyCall(subscriptionId, resourceGroupName, accountName, apiVersion, keyToRegenerate, _callback);

    }

    /**
     * 
     * Regenerates an access key for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param keyToRegenerate The name of the key to regenerate. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The regenerate key operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public void databaseAccountsRegenerateKey(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountRegenerateKeyParameters keyToRegenerate) throws ApiException {
        databaseAccountsRegenerateKeyWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion, keyToRegenerate);
    }

    /**
     * 
     * Regenerates an access key for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param keyToRegenerate The name of the key to regenerate. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The regenerate key operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> databaseAccountsRegenerateKeyWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountRegenerateKeyParameters keyToRegenerate) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsRegenerateKeyValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, keyToRegenerate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Regenerates an access key for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param keyToRegenerate The name of the key to regenerate. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The regenerate key operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsRegenerateKeyAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountRegenerateKeyParameters keyToRegenerate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsRegenerateKeyValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, keyToRegenerate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsUpdate
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateParameters The parameters to provide for the current database account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The database account update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsUpdateCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountUpdateParameters updateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountUpdateParameters updateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsUpdate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsUpdate(Async)");
        }

        // verify the required parameter 'updateParameters' is set
        if (updateParameters == null) {
            throw new ApiException("Missing the required parameter 'updateParameters' when calling databaseAccountsUpdate(Async)");
        }

        return databaseAccountsUpdateCall(subscriptionId, resourceGroupName, accountName, apiVersion, updateParameters, _callback);

    }

    /**
     * 
     * Updates the properties of an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateParameters The parameters to provide for the current database account. (required)
     * @return DatabaseAccountGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The database account update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseAccountGetResults databaseAccountsUpdate(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountUpdateParameters updateParameters) throws ApiException {
        ApiResponse<DatabaseAccountGetResults> localVarResp = databaseAccountsUpdateWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion, updateParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the properties of an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateParameters The parameters to provide for the current database account. (required)
     * @return ApiResponse&lt;DatabaseAccountGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The database account update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseAccountGetResults> databaseAccountsUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountUpdateParameters updateParameters) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, updateParameters, null);
        Type localVarReturnType = new TypeToken<DatabaseAccountGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the properties of an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateParameters The parameters to provide for the current database account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The database account update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsUpdateAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountUpdateParameters updateParameters, final ApiCallback<DatabaseAccountGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, updateParameters, _callback);
        Type localVarReturnType = new TypeToken<DatabaseAccountGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseListMetricDefinitions
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric definitions for the database were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseListMetricDefinitionsCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/metricDefinitions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseRid" + "}", localVarApiClient.escapeString(databaseRid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseListMetricDefinitionsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseListMetricDefinitions(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseListMetricDefinitions(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseListMetricDefinitions(Async)");
        }

        // verify the required parameter 'databaseRid' is set
        if (databaseRid == null) {
            throw new ApiException("Missing the required parameter 'databaseRid' when calling databaseListMetricDefinitions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseListMetricDefinitions(Async)");
        }

        return databaseListMetricDefinitionsCall(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves metric definitions for the given database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return MetricDefinitionsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric definitions for the database were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public MetricDefinitionsListResult databaseListMetricDefinitions(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion) throws ApiException {
        ApiResponse<MetricDefinitionsListResult> localVarResp = databaseListMetricDefinitionsWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves metric definitions for the given database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;MetricDefinitionsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric definitions for the database were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricDefinitionsListResult> databaseListMetricDefinitionsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseListMetricDefinitionsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, null);
        Type localVarReturnType = new TypeToken<MetricDefinitionsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves metric definitions for the given database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric definitions for the database were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseListMetricDefinitionsAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion, final ApiCallback<MetricDefinitionsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseListMetricDefinitionsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MetricDefinitionsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseListMetrics
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseListMetricsCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/metrics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseRid" + "}", localVarApiClient.escapeString(databaseRid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseListMetricsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseListMetrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseListMetrics(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseListMetrics(Async)");
        }

        // verify the required parameter 'databaseRid' is set
        if (databaseRid == null) {
            throw new ApiException("Missing the required parameter 'databaseRid' when calling databaseListMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseListMetrics(Async)");
        }

        // verify the required parameter '$filter' is set
        if ($filter == null) {
            throw new ApiException("Missing the required parameter '$filter' when calling databaseListMetrics(Async)");
        }

        return databaseListMetricsCall(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given database account and database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return MetricListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public MetricListResult databaseListMetrics(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion, String $filter) throws ApiException {
        ApiResponse<MetricListResult> localVarResp = databaseListMetricsWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given database account and database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return ApiResponse&lt;MetricListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricListResult> databaseListMetricsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = databaseListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<MetricListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the metrics determined by the given filter for the given database account and database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseListMetricsAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion, String $filter, final ApiCallback<MetricListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<MetricListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseListUsages
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the database were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseListUsagesCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/usages"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseRid" + "}", localVarApiClient.escapeString(databaseRid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseListUsagesValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseListUsages(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseListUsages(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseListUsages(Async)");
        }

        // verify the required parameter 'databaseRid' is set
        if (databaseRid == null) {
            throw new ApiException("Missing the required parameter 'databaseRid' when calling databaseListUsages(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseListUsages(Async)");
        }

        return databaseListUsagesCall(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the usages (most recent data) for the given database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @return UsagesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the database were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public UsagesResult databaseListUsages(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion, String $filter) throws ApiException {
        ApiResponse<UsagesResult> localVarResp = databaseListUsagesWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the usages (most recent data) for the given database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @return ApiResponse&lt;UsagesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the database were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsagesResult> databaseListUsagesWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = databaseListUsagesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<UsagesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the usages (most recent data) for the given database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the database were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseListUsagesAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion, String $filter, final ApiCallback<UsagesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseListUsagesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<UsagesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gremlinResourcesCreateUpdateGremlinDatabase
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateGremlinDatabaseParameters The parameters to provide for the current Gremlin database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin database create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Gremlin database create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gremlinResourcesCreateUpdateGremlinDatabaseCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, GremlinDatabaseCreateUpdateParameters createUpdateGremlinDatabaseParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdateGremlinDatabaseParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gremlinResourcesCreateUpdateGremlinDatabaseValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, GremlinDatabaseCreateUpdateParameters createUpdateGremlinDatabaseParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling gremlinResourcesCreateUpdateGremlinDatabase(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling gremlinResourcesCreateUpdateGremlinDatabase(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling gremlinResourcesCreateUpdateGremlinDatabase(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling gremlinResourcesCreateUpdateGremlinDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling gremlinResourcesCreateUpdateGremlinDatabase(Async)");
        }

        // verify the required parameter 'createUpdateGremlinDatabaseParameters' is set
        if (createUpdateGremlinDatabaseParameters == null) {
            throw new ApiException("Missing the required parameter 'createUpdateGremlinDatabaseParameters' when calling gremlinResourcesCreateUpdateGremlinDatabase(Async)");
        }

        return gremlinResourcesCreateUpdateGremlinDatabaseCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateGremlinDatabaseParameters, _callback);

    }

    /**
     * 
     * Create or update an Azure Cosmos DB Gremlin database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateGremlinDatabaseParameters The parameters to provide for the current Gremlin database. (required)
     * @return GremlinDatabaseGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin database create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Gremlin database create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public GremlinDatabaseGetResults gremlinResourcesCreateUpdateGremlinDatabase(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, GremlinDatabaseCreateUpdateParameters createUpdateGremlinDatabaseParameters) throws ApiException {
        ApiResponse<GremlinDatabaseGetResults> localVarResp = gremlinResourcesCreateUpdateGremlinDatabaseWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateGremlinDatabaseParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update an Azure Cosmos DB Gremlin database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateGremlinDatabaseParameters The parameters to provide for the current Gremlin database. (required)
     * @return ApiResponse&lt;GremlinDatabaseGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin database create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Gremlin database create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GremlinDatabaseGetResults> gremlinResourcesCreateUpdateGremlinDatabaseWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, GremlinDatabaseCreateUpdateParameters createUpdateGremlinDatabaseParameters) throws ApiException {
        okhttp3.Call localVarCall = gremlinResourcesCreateUpdateGremlinDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateGremlinDatabaseParameters, null);
        Type localVarReturnType = new TypeToken<GremlinDatabaseGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update an Azure Cosmos DB Gremlin database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateGremlinDatabaseParameters The parameters to provide for the current Gremlin database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin database create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Gremlin database create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gremlinResourcesCreateUpdateGremlinDatabaseAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, GremlinDatabaseCreateUpdateParameters createUpdateGremlinDatabaseParameters, final ApiCallback<GremlinDatabaseGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = gremlinResourcesCreateUpdateGremlinDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateGremlinDatabaseParameters, _callback);
        Type localVarReturnType = new TypeToken<GremlinDatabaseGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gremlinResourcesCreateUpdateGremlinGraph
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateGremlinGraphParameters The parameters to provide for the current Gremlin graph. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin graph create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Gremlin graph create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gremlinResourcesCreateUpdateGremlinGraphCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, GremlinGraphCreateUpdateParameters createUpdateGremlinGraphParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdateGremlinGraphParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "graphName" + "}", localVarApiClient.escapeString(graphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gremlinResourcesCreateUpdateGremlinGraphValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, GremlinGraphCreateUpdateParameters createUpdateGremlinGraphParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling gremlinResourcesCreateUpdateGremlinGraph(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling gremlinResourcesCreateUpdateGremlinGraph(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling gremlinResourcesCreateUpdateGremlinGraph(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling gremlinResourcesCreateUpdateGremlinGraph(Async)");
        }

        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling gremlinResourcesCreateUpdateGremlinGraph(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling gremlinResourcesCreateUpdateGremlinGraph(Async)");
        }

        // verify the required parameter 'createUpdateGremlinGraphParameters' is set
        if (createUpdateGremlinGraphParameters == null) {
            throw new ApiException("Missing the required parameter 'createUpdateGremlinGraphParameters' when calling gremlinResourcesCreateUpdateGremlinGraph(Async)");
        }

        return gremlinResourcesCreateUpdateGremlinGraphCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, createUpdateGremlinGraphParameters, _callback);

    }

    /**
     * 
     * Create or update an Azure Cosmos DB Gremlin graph
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateGremlinGraphParameters The parameters to provide for the current Gremlin graph. (required)
     * @return GremlinGraphGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin graph create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Gremlin graph create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public GremlinGraphGetResults gremlinResourcesCreateUpdateGremlinGraph(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, GremlinGraphCreateUpdateParameters createUpdateGremlinGraphParameters) throws ApiException {
        ApiResponse<GremlinGraphGetResults> localVarResp = gremlinResourcesCreateUpdateGremlinGraphWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, createUpdateGremlinGraphParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update an Azure Cosmos DB Gremlin graph
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateGremlinGraphParameters The parameters to provide for the current Gremlin graph. (required)
     * @return ApiResponse&lt;GremlinGraphGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin graph create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Gremlin graph create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GremlinGraphGetResults> gremlinResourcesCreateUpdateGremlinGraphWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, GremlinGraphCreateUpdateParameters createUpdateGremlinGraphParameters) throws ApiException {
        okhttp3.Call localVarCall = gremlinResourcesCreateUpdateGremlinGraphValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, createUpdateGremlinGraphParameters, null);
        Type localVarReturnType = new TypeToken<GremlinGraphGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update an Azure Cosmos DB Gremlin graph
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateGremlinGraphParameters The parameters to provide for the current Gremlin graph. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin graph create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Gremlin graph create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gremlinResourcesCreateUpdateGremlinGraphAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, GremlinGraphCreateUpdateParameters createUpdateGremlinGraphParameters, final ApiCallback<GremlinGraphGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = gremlinResourcesCreateUpdateGremlinGraphValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, createUpdateGremlinGraphParameters, _callback);
        Type localVarReturnType = new TypeToken<GremlinGraphGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gremlinResourcesDeleteGremlinDatabase
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Gremlin database delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Gremlin database delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gremlinResourcesDeleteGremlinDatabaseCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gremlinResourcesDeleteGremlinDatabaseValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling gremlinResourcesDeleteGremlinDatabase(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling gremlinResourcesDeleteGremlinDatabase(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling gremlinResourcesDeleteGremlinDatabase(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling gremlinResourcesDeleteGremlinDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling gremlinResourcesDeleteGremlinDatabase(Async)");
        }

        return gremlinResourcesDeleteGremlinDatabaseCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB Gremlin database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Gremlin database delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Gremlin database delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void gremlinResourcesDeleteGremlinDatabase(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        gremlinResourcesDeleteGremlinDatabaseWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB Gremlin database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Gremlin database delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Gremlin database delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gremlinResourcesDeleteGremlinDatabaseWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = gremlinResourcesDeleteGremlinDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing Azure Cosmos DB Gremlin database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Gremlin database delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Gremlin database delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gremlinResourcesDeleteGremlinDatabaseAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gremlinResourcesDeleteGremlinDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gremlinResourcesDeleteGremlinGraph
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Gremlin graph delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Gremlin graph delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gremlinResourcesDeleteGremlinGraphCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "graphName" + "}", localVarApiClient.escapeString(graphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gremlinResourcesDeleteGremlinGraphValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling gremlinResourcesDeleteGremlinGraph(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling gremlinResourcesDeleteGremlinGraph(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling gremlinResourcesDeleteGremlinGraph(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling gremlinResourcesDeleteGremlinGraph(Async)");
        }

        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling gremlinResourcesDeleteGremlinGraph(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling gremlinResourcesDeleteGremlinGraph(Async)");
        }

        return gremlinResourcesDeleteGremlinGraphCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB Gremlin graph.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Gremlin graph delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Gremlin graph delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void gremlinResourcesDeleteGremlinGraph(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion) throws ApiException {
        gremlinResourcesDeleteGremlinGraphWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion);
    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB Gremlin graph.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Gremlin graph delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Gremlin graph delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gremlinResourcesDeleteGremlinGraphWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = gremlinResourcesDeleteGremlinGraphValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing Azure Cosmos DB Gremlin graph.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Gremlin graph delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Gremlin graph delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gremlinResourcesDeleteGremlinGraphAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gremlinResourcesDeleteGremlinGraphValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gremlinResourcesGetGremlinDatabase
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin database property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gremlinResourcesGetGremlinDatabaseCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gremlinResourcesGetGremlinDatabaseValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling gremlinResourcesGetGremlinDatabase(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling gremlinResourcesGetGremlinDatabase(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling gremlinResourcesGetGremlinDatabase(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling gremlinResourcesGetGremlinDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling gremlinResourcesGetGremlinDatabase(Async)");
        }

        return gremlinResourcesGetGremlinDatabaseCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the Gremlin databases under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return GremlinDatabaseGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin database property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public GremlinDatabaseGetResults gremlinResourcesGetGremlinDatabase(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        ApiResponse<GremlinDatabaseGetResults> localVarResp = gremlinResourcesGetGremlinDatabaseWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the Gremlin databases under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;GremlinDatabaseGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin database property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GremlinDatabaseGetResults> gremlinResourcesGetGremlinDatabaseWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = gremlinResourcesGetGremlinDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, null);
        Type localVarReturnType = new TypeToken<GremlinDatabaseGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the Gremlin databases under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin database property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gremlinResourcesGetGremlinDatabaseAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback<GremlinDatabaseGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = gremlinResourcesGetGremlinDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<GremlinDatabaseGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gremlinResourcesGetGremlinDatabaseThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin database was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gremlinResourcesGetGremlinDatabaseThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/throughputSettings/default"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gremlinResourcesGetGremlinDatabaseThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling gremlinResourcesGetGremlinDatabaseThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling gremlinResourcesGetGremlinDatabaseThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling gremlinResourcesGetGremlinDatabaseThroughput(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling gremlinResourcesGetGremlinDatabaseThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling gremlinResourcesGetGremlinDatabaseThroughput(Async)");
        }

        return gremlinResourcesGetGremlinDatabaseThroughputCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the RUs per second of the Gremlin database under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ThroughputSettingsGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin database was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ThroughputSettingsGetResults gremlinResourcesGetGremlinDatabaseThroughput(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        ApiResponse<ThroughputSettingsGetResults> localVarResp = gremlinResourcesGetGremlinDatabaseThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the RUs per second of the Gremlin database under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;ThroughputSettingsGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin database was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ThroughputSettingsGetResults> gremlinResourcesGetGremlinDatabaseThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = gremlinResourcesGetGremlinDatabaseThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the RUs per second of the Gremlin database under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin database was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gremlinResourcesGetGremlinDatabaseThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback<ThroughputSettingsGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = gremlinResourcesGetGremlinDatabaseThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gremlinResourcesGetGremlinGraph
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin graph property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gremlinResourcesGetGremlinGraphCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "graphName" + "}", localVarApiClient.escapeString(graphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gremlinResourcesGetGremlinGraphValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling gremlinResourcesGetGremlinGraph(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling gremlinResourcesGetGremlinGraph(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling gremlinResourcesGetGremlinGraph(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling gremlinResourcesGetGremlinGraph(Async)");
        }

        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling gremlinResourcesGetGremlinGraph(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling gremlinResourcesGetGremlinGraph(Async)");
        }

        return gremlinResourcesGetGremlinGraphCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the Gremlin graph under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return GremlinGraphGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin graph property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public GremlinGraphGetResults gremlinResourcesGetGremlinGraph(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion) throws ApiException {
        ApiResponse<GremlinGraphGetResults> localVarResp = gremlinResourcesGetGremlinGraphWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the Gremlin graph under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;GremlinGraphGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin graph property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GremlinGraphGetResults> gremlinResourcesGetGremlinGraphWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = gremlinResourcesGetGremlinGraphValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, null);
        Type localVarReturnType = new TypeToken<GremlinGraphGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the Gremlin graph under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin graph property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gremlinResourcesGetGremlinGraphAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, final ApiCallback<GremlinGraphGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = gremlinResourcesGetGremlinGraphValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<GremlinGraphGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gremlinResourcesGetGremlinGraphThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin graph was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gremlinResourcesGetGremlinGraphThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}/throughputSettings/default"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "graphName" + "}", localVarApiClient.escapeString(graphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gremlinResourcesGetGremlinGraphThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling gremlinResourcesGetGremlinGraphThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling gremlinResourcesGetGremlinGraphThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling gremlinResourcesGetGremlinGraphThroughput(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling gremlinResourcesGetGremlinGraphThroughput(Async)");
        }

        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling gremlinResourcesGetGremlinGraphThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling gremlinResourcesGetGremlinGraphThroughput(Async)");
        }

        return gremlinResourcesGetGremlinGraphThroughputCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the Gremlin graph throughput under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ThroughputSettingsGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin graph was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ThroughputSettingsGetResults gremlinResourcesGetGremlinGraphThroughput(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion) throws ApiException {
        ApiResponse<ThroughputSettingsGetResults> localVarResp = gremlinResourcesGetGremlinGraphThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the Gremlin graph throughput under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;ThroughputSettingsGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin graph was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ThroughputSettingsGetResults> gremlinResourcesGetGremlinGraphThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = gremlinResourcesGetGremlinGraphThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the Gremlin graph throughput under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin graph was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gremlinResourcesGetGremlinGraphThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, final ApiCallback<ThroughputSettingsGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = gremlinResourcesGetGremlinGraphThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gremlinResourcesListGremlinDatabases
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin database properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gremlinResourcesListGremlinDatabasesCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gremlinResourcesListGremlinDatabasesValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling gremlinResourcesListGremlinDatabases(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling gremlinResourcesListGremlinDatabases(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling gremlinResourcesListGremlinDatabases(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling gremlinResourcesListGremlinDatabases(Async)");
        }

        return gremlinResourcesListGremlinDatabasesCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the Gremlin databases under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return GremlinDatabaseListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin database properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public GremlinDatabaseListResult gremlinResourcesListGremlinDatabases(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        ApiResponse<GremlinDatabaseListResult> localVarResp = gremlinResourcesListGremlinDatabasesWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the Gremlin databases under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;GremlinDatabaseListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin database properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GremlinDatabaseListResult> gremlinResourcesListGremlinDatabasesWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = gremlinResourcesListGremlinDatabasesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<GremlinDatabaseListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the Gremlin databases under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin database properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gremlinResourcesListGremlinDatabasesAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<GremlinDatabaseListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gremlinResourcesListGremlinDatabasesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<GremlinDatabaseListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gremlinResourcesListGremlinGraphs
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin graph properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gremlinResourcesListGremlinGraphsCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gremlinResourcesListGremlinGraphsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling gremlinResourcesListGremlinGraphs(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling gremlinResourcesListGremlinGraphs(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling gremlinResourcesListGremlinGraphs(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling gremlinResourcesListGremlinGraphs(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling gremlinResourcesListGremlinGraphs(Async)");
        }

        return gremlinResourcesListGremlinGraphsCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the Gremlin graph under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return GremlinGraphListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin graph properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public GremlinGraphListResult gremlinResourcesListGremlinGraphs(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        ApiResponse<GremlinGraphListResult> localVarResp = gremlinResourcesListGremlinGraphsWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the Gremlin graph under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;GremlinGraphListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin graph properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GremlinGraphListResult> gremlinResourcesListGremlinGraphsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = gremlinResourcesListGremlinGraphsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, null);
        Type localVarReturnType = new TypeToken<GremlinGraphListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the Gremlin graph under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin graph properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gremlinResourcesListGremlinGraphsAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback<GremlinGraphListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gremlinResourcesListGremlinGraphsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<GremlinGraphListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gremlinResourcesUpdateGremlinDatabaseThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Gremlin database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin database update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Gremlin database update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gremlinResourcesUpdateGremlinDatabaseThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateThroughputParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/throughputSettings/default"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gremlinResourcesUpdateGremlinDatabaseThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling gremlinResourcesUpdateGremlinDatabaseThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling gremlinResourcesUpdateGremlinDatabaseThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling gremlinResourcesUpdateGremlinDatabaseThroughput(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling gremlinResourcesUpdateGremlinDatabaseThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling gremlinResourcesUpdateGremlinDatabaseThroughput(Async)");
        }

        // verify the required parameter 'updateThroughputParameters' is set
        if (updateThroughputParameters == null) {
            throw new ApiException("Missing the required parameter 'updateThroughputParameters' when calling gremlinResourcesUpdateGremlinDatabaseThroughput(Async)");
        }

        return gremlinResourcesUpdateGremlinDatabaseThroughputCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters, _callback);

    }

    /**
     * 
     * Update RUs per second of an Azure Cosmos DB Gremlin database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Gremlin database. (required)
     * @return ThroughputSettingsGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin database update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Gremlin database update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ThroughputSettingsGetResults gremlinResourcesUpdateGremlinDatabaseThroughput(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters) throws ApiException {
        ApiResponse<ThroughputSettingsGetResults> localVarResp = gremlinResourcesUpdateGremlinDatabaseThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update RUs per second of an Azure Cosmos DB Gremlin database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Gremlin database. (required)
     * @return ApiResponse&lt;ThroughputSettingsGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin database update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Gremlin database update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ThroughputSettingsGetResults> gremlinResourcesUpdateGremlinDatabaseThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters) throws ApiException {
        okhttp3.Call localVarCall = gremlinResourcesUpdateGremlinDatabaseThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters, null);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update RUs per second of an Azure Cosmos DB Gremlin database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Gremlin database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin database update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Gremlin database update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gremlinResourcesUpdateGremlinDatabaseThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters, final ApiCallback<ThroughputSettingsGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = gremlinResourcesUpdateGremlinDatabaseThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters, _callback);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gremlinResourcesUpdateGremlinGraphThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Gremlin graph. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin graph update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Gremlin graph update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gremlinResourcesUpdateGremlinGraphThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateThroughputParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}/throughputSettings/default"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "graphName" + "}", localVarApiClient.escapeString(graphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gremlinResourcesUpdateGremlinGraphThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling gremlinResourcesUpdateGremlinGraphThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling gremlinResourcesUpdateGremlinGraphThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling gremlinResourcesUpdateGremlinGraphThroughput(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling gremlinResourcesUpdateGremlinGraphThroughput(Async)");
        }

        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling gremlinResourcesUpdateGremlinGraphThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling gremlinResourcesUpdateGremlinGraphThroughput(Async)");
        }

        // verify the required parameter 'updateThroughputParameters' is set
        if (updateThroughputParameters == null) {
            throw new ApiException("Missing the required parameter 'updateThroughputParameters' when calling gremlinResourcesUpdateGremlinGraphThroughput(Async)");
        }

        return gremlinResourcesUpdateGremlinGraphThroughputCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, updateThroughputParameters, _callback);

    }

    /**
     * 
     * Update RUs per second of an Azure Cosmos DB Gremlin graph
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Gremlin graph. (required)
     * @return ThroughputSettingsGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin graph update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Gremlin graph update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ThroughputSettingsGetResults gremlinResourcesUpdateGremlinGraphThroughput(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters) throws ApiException {
        ApiResponse<ThroughputSettingsGetResults> localVarResp = gremlinResourcesUpdateGremlinGraphThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, updateThroughputParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update RUs per second of an Azure Cosmos DB Gremlin graph
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Gremlin graph. (required)
     * @return ApiResponse&lt;ThroughputSettingsGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin graph update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Gremlin graph update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ThroughputSettingsGetResults> gremlinResourcesUpdateGremlinGraphThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters) throws ApiException {
        okhttp3.Call localVarCall = gremlinResourcesUpdateGremlinGraphThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, updateThroughputParameters, null);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update RUs per second of an Azure Cosmos DB Gremlin graph
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Gremlin graph. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin graph update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Gremlin graph update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gremlinResourcesUpdateGremlinGraphThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters, final ApiCallback<ThroughputSettingsGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = gremlinResourcesUpdateGremlinGraphThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, updateThroughputParameters, _callback);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mongoDBResourcesCreateUpdateMongoDBCollection
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateMongoDBCollectionParameters The parameters to provide for the current MongoDB Collection. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB Collection create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The MongoDB Collection create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mongoDBResourcesCreateUpdateMongoDBCollectionCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, MongoDBCollectionCreateUpdateParameters createUpdateMongoDBCollectionParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdateMongoDBCollectionParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "collectionName" + "}", localVarApiClient.escapeString(collectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mongoDBResourcesCreateUpdateMongoDBCollectionValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, MongoDBCollectionCreateUpdateParameters createUpdateMongoDBCollectionParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling mongoDBResourcesCreateUpdateMongoDBCollection(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling mongoDBResourcesCreateUpdateMongoDBCollection(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling mongoDBResourcesCreateUpdateMongoDBCollection(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling mongoDBResourcesCreateUpdateMongoDBCollection(Async)");
        }

        // verify the required parameter 'collectionName' is set
        if (collectionName == null) {
            throw new ApiException("Missing the required parameter 'collectionName' when calling mongoDBResourcesCreateUpdateMongoDBCollection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling mongoDBResourcesCreateUpdateMongoDBCollection(Async)");
        }

        // verify the required parameter 'createUpdateMongoDBCollectionParameters' is set
        if (createUpdateMongoDBCollectionParameters == null) {
            throw new ApiException("Missing the required parameter 'createUpdateMongoDBCollectionParameters' when calling mongoDBResourcesCreateUpdateMongoDBCollection(Async)");
        }

        return mongoDBResourcesCreateUpdateMongoDBCollectionCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, createUpdateMongoDBCollectionParameters, _callback);

    }

    /**
     * 
     * Create or update an Azure Cosmos DB MongoDB Collection
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateMongoDBCollectionParameters The parameters to provide for the current MongoDB Collection. (required)
     * @return MongoDBCollectionGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB Collection create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The MongoDB Collection create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public MongoDBCollectionGetResults mongoDBResourcesCreateUpdateMongoDBCollection(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, MongoDBCollectionCreateUpdateParameters createUpdateMongoDBCollectionParameters) throws ApiException {
        ApiResponse<MongoDBCollectionGetResults> localVarResp = mongoDBResourcesCreateUpdateMongoDBCollectionWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, createUpdateMongoDBCollectionParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update an Azure Cosmos DB MongoDB Collection
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateMongoDBCollectionParameters The parameters to provide for the current MongoDB Collection. (required)
     * @return ApiResponse&lt;MongoDBCollectionGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB Collection create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The MongoDB Collection create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MongoDBCollectionGetResults> mongoDBResourcesCreateUpdateMongoDBCollectionWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, MongoDBCollectionCreateUpdateParameters createUpdateMongoDBCollectionParameters) throws ApiException {
        okhttp3.Call localVarCall = mongoDBResourcesCreateUpdateMongoDBCollectionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, createUpdateMongoDBCollectionParameters, null);
        Type localVarReturnType = new TypeToken<MongoDBCollectionGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update an Azure Cosmos DB MongoDB Collection
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateMongoDBCollectionParameters The parameters to provide for the current MongoDB Collection. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB Collection create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The MongoDB Collection create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mongoDBResourcesCreateUpdateMongoDBCollectionAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, MongoDBCollectionCreateUpdateParameters createUpdateMongoDBCollectionParameters, final ApiCallback<MongoDBCollectionGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = mongoDBResourcesCreateUpdateMongoDBCollectionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, createUpdateMongoDBCollectionParameters, _callback);
        Type localVarReturnType = new TypeToken<MongoDBCollectionGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mongoDBResourcesCreateUpdateMongoDBDatabase
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateMongoDBDatabaseParameters The parameters to provide for the current MongoDB database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB database create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The MongoDB database create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mongoDBResourcesCreateUpdateMongoDBDatabaseCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, MongoDBDatabaseCreateUpdateParameters createUpdateMongoDBDatabaseParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdateMongoDBDatabaseParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mongoDBResourcesCreateUpdateMongoDBDatabaseValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, MongoDBDatabaseCreateUpdateParameters createUpdateMongoDBDatabaseParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling mongoDBResourcesCreateUpdateMongoDBDatabase(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling mongoDBResourcesCreateUpdateMongoDBDatabase(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling mongoDBResourcesCreateUpdateMongoDBDatabase(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling mongoDBResourcesCreateUpdateMongoDBDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling mongoDBResourcesCreateUpdateMongoDBDatabase(Async)");
        }

        // verify the required parameter 'createUpdateMongoDBDatabaseParameters' is set
        if (createUpdateMongoDBDatabaseParameters == null) {
            throw new ApiException("Missing the required parameter 'createUpdateMongoDBDatabaseParameters' when calling mongoDBResourcesCreateUpdateMongoDBDatabase(Async)");
        }

        return mongoDBResourcesCreateUpdateMongoDBDatabaseCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateMongoDBDatabaseParameters, _callback);

    }

    /**
     * 
     * Create or updates Azure Cosmos DB MongoDB database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateMongoDBDatabaseParameters The parameters to provide for the current MongoDB database. (required)
     * @return MongoDBDatabaseGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB database create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The MongoDB database create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public MongoDBDatabaseGetResults mongoDBResourcesCreateUpdateMongoDBDatabase(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, MongoDBDatabaseCreateUpdateParameters createUpdateMongoDBDatabaseParameters) throws ApiException {
        ApiResponse<MongoDBDatabaseGetResults> localVarResp = mongoDBResourcesCreateUpdateMongoDBDatabaseWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateMongoDBDatabaseParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or updates Azure Cosmos DB MongoDB database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateMongoDBDatabaseParameters The parameters to provide for the current MongoDB database. (required)
     * @return ApiResponse&lt;MongoDBDatabaseGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB database create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The MongoDB database create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MongoDBDatabaseGetResults> mongoDBResourcesCreateUpdateMongoDBDatabaseWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, MongoDBDatabaseCreateUpdateParameters createUpdateMongoDBDatabaseParameters) throws ApiException {
        okhttp3.Call localVarCall = mongoDBResourcesCreateUpdateMongoDBDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateMongoDBDatabaseParameters, null);
        Type localVarReturnType = new TypeToken<MongoDBDatabaseGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or updates Azure Cosmos DB MongoDB database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateMongoDBDatabaseParameters The parameters to provide for the current MongoDB database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB database create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The MongoDB database create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mongoDBResourcesCreateUpdateMongoDBDatabaseAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, MongoDBDatabaseCreateUpdateParameters createUpdateMongoDBDatabaseParameters, final ApiCallback<MongoDBDatabaseGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = mongoDBResourcesCreateUpdateMongoDBDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateMongoDBDatabaseParameters, _callback);
        Type localVarReturnType = new TypeToken<MongoDBDatabaseGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mongoDBResourcesDeleteMongoDBCollection
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The MongoDB collection delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The MongoDB collection delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mongoDBResourcesDeleteMongoDBCollectionCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "collectionName" + "}", localVarApiClient.escapeString(collectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mongoDBResourcesDeleteMongoDBCollectionValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling mongoDBResourcesDeleteMongoDBCollection(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling mongoDBResourcesDeleteMongoDBCollection(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling mongoDBResourcesDeleteMongoDBCollection(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling mongoDBResourcesDeleteMongoDBCollection(Async)");
        }

        // verify the required parameter 'collectionName' is set
        if (collectionName == null) {
            throw new ApiException("Missing the required parameter 'collectionName' when calling mongoDBResourcesDeleteMongoDBCollection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling mongoDBResourcesDeleteMongoDBCollection(Async)");
        }

        return mongoDBResourcesDeleteMongoDBCollectionCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB MongoDB Collection.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The MongoDB collection delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The MongoDB collection delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void mongoDBResourcesDeleteMongoDBCollection(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion) throws ApiException {
        mongoDBResourcesDeleteMongoDBCollectionWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion);
    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB MongoDB Collection.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The MongoDB collection delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The MongoDB collection delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mongoDBResourcesDeleteMongoDBCollectionWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = mongoDBResourcesDeleteMongoDBCollectionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing Azure Cosmos DB MongoDB Collection.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The MongoDB collection delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The MongoDB collection delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mongoDBResourcesDeleteMongoDBCollectionAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mongoDBResourcesDeleteMongoDBCollectionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mongoDBResourcesDeleteMongoDBDatabase
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The MongoDB database delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The MongoDB database delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mongoDBResourcesDeleteMongoDBDatabaseCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mongoDBResourcesDeleteMongoDBDatabaseValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling mongoDBResourcesDeleteMongoDBDatabase(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling mongoDBResourcesDeleteMongoDBDatabase(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling mongoDBResourcesDeleteMongoDBDatabase(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling mongoDBResourcesDeleteMongoDBDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling mongoDBResourcesDeleteMongoDBDatabase(Async)");
        }

        return mongoDBResourcesDeleteMongoDBDatabaseCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB MongoDB database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The MongoDB database delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The MongoDB database delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void mongoDBResourcesDeleteMongoDBDatabase(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        mongoDBResourcesDeleteMongoDBDatabaseWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB MongoDB database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The MongoDB database delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The MongoDB database delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mongoDBResourcesDeleteMongoDBDatabaseWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = mongoDBResourcesDeleteMongoDBDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing Azure Cosmos DB MongoDB database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The MongoDB database delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The MongoDB database delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mongoDBResourcesDeleteMongoDBDatabaseAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mongoDBResourcesDeleteMongoDBDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mongoDBResourcesGetMongoDBCollection
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB collection property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mongoDBResourcesGetMongoDBCollectionCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "collectionName" + "}", localVarApiClient.escapeString(collectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mongoDBResourcesGetMongoDBCollectionValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling mongoDBResourcesGetMongoDBCollection(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling mongoDBResourcesGetMongoDBCollection(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling mongoDBResourcesGetMongoDBCollection(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling mongoDBResourcesGetMongoDBCollection(Async)");
        }

        // verify the required parameter 'collectionName' is set
        if (collectionName == null) {
            throw new ApiException("Missing the required parameter 'collectionName' when calling mongoDBResourcesGetMongoDBCollection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling mongoDBResourcesGetMongoDBCollection(Async)");
        }

        return mongoDBResourcesGetMongoDBCollectionCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the MongoDB collection under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return MongoDBCollectionGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB collection property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public MongoDBCollectionGetResults mongoDBResourcesGetMongoDBCollection(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion) throws ApiException {
        ApiResponse<MongoDBCollectionGetResults> localVarResp = mongoDBResourcesGetMongoDBCollectionWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the MongoDB collection under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;MongoDBCollectionGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB collection property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MongoDBCollectionGetResults> mongoDBResourcesGetMongoDBCollectionWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = mongoDBResourcesGetMongoDBCollectionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<MongoDBCollectionGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the MongoDB collection under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB collection property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mongoDBResourcesGetMongoDBCollectionAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, final ApiCallback<MongoDBCollectionGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = mongoDBResourcesGetMongoDBCollectionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MongoDBCollectionGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mongoDBResourcesGetMongoDBCollectionThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB collection was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mongoDBResourcesGetMongoDBCollectionThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}/throughputSettings/default"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "collectionName" + "}", localVarApiClient.escapeString(collectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mongoDBResourcesGetMongoDBCollectionThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling mongoDBResourcesGetMongoDBCollectionThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling mongoDBResourcesGetMongoDBCollectionThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling mongoDBResourcesGetMongoDBCollectionThroughput(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling mongoDBResourcesGetMongoDBCollectionThroughput(Async)");
        }

        // verify the required parameter 'collectionName' is set
        if (collectionName == null) {
            throw new ApiException("Missing the required parameter 'collectionName' when calling mongoDBResourcesGetMongoDBCollectionThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling mongoDBResourcesGetMongoDBCollectionThroughput(Async)");
        }

        return mongoDBResourcesGetMongoDBCollectionThroughputCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the RUs per second of the MongoDB collection under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ThroughputSettingsGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB collection was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ThroughputSettingsGetResults mongoDBResourcesGetMongoDBCollectionThroughput(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion) throws ApiException {
        ApiResponse<ThroughputSettingsGetResults> localVarResp = mongoDBResourcesGetMongoDBCollectionThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the RUs per second of the MongoDB collection under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;ThroughputSettingsGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB collection was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ThroughputSettingsGetResults> mongoDBResourcesGetMongoDBCollectionThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = mongoDBResourcesGetMongoDBCollectionThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the RUs per second of the MongoDB collection under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB collection was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mongoDBResourcesGetMongoDBCollectionThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, final ApiCallback<ThroughputSettingsGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = mongoDBResourcesGetMongoDBCollectionThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mongoDBResourcesGetMongoDBDatabase
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB database property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mongoDBResourcesGetMongoDBDatabaseCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mongoDBResourcesGetMongoDBDatabaseValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling mongoDBResourcesGetMongoDBDatabase(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling mongoDBResourcesGetMongoDBDatabase(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling mongoDBResourcesGetMongoDBDatabase(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling mongoDBResourcesGetMongoDBDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling mongoDBResourcesGetMongoDBDatabase(Async)");
        }

        return mongoDBResourcesGetMongoDBDatabaseCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the MongoDB databases under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return MongoDBDatabaseGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB database property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public MongoDBDatabaseGetResults mongoDBResourcesGetMongoDBDatabase(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        ApiResponse<MongoDBDatabaseGetResults> localVarResp = mongoDBResourcesGetMongoDBDatabaseWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the MongoDB databases under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;MongoDBDatabaseGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB database property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MongoDBDatabaseGetResults> mongoDBResourcesGetMongoDBDatabaseWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = mongoDBResourcesGetMongoDBDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, null);
        Type localVarReturnType = new TypeToken<MongoDBDatabaseGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the MongoDB databases under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB database property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mongoDBResourcesGetMongoDBDatabaseAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback<MongoDBDatabaseGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = mongoDBResourcesGetMongoDBDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MongoDBDatabaseGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mongoDBResourcesGetMongoDBDatabaseThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB database was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mongoDBResourcesGetMongoDBDatabaseThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/throughputSettings/default"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mongoDBResourcesGetMongoDBDatabaseThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling mongoDBResourcesGetMongoDBDatabaseThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling mongoDBResourcesGetMongoDBDatabaseThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling mongoDBResourcesGetMongoDBDatabaseThroughput(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling mongoDBResourcesGetMongoDBDatabaseThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling mongoDBResourcesGetMongoDBDatabaseThroughput(Async)");
        }

        return mongoDBResourcesGetMongoDBDatabaseThroughputCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the RUs per second of the MongoDB database under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ThroughputSettingsGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB database was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ThroughputSettingsGetResults mongoDBResourcesGetMongoDBDatabaseThroughput(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        ApiResponse<ThroughputSettingsGetResults> localVarResp = mongoDBResourcesGetMongoDBDatabaseThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the RUs per second of the MongoDB database under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;ThroughputSettingsGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB database was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ThroughputSettingsGetResults> mongoDBResourcesGetMongoDBDatabaseThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = mongoDBResourcesGetMongoDBDatabaseThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the RUs per second of the MongoDB database under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB database was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mongoDBResourcesGetMongoDBDatabaseThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback<ThroughputSettingsGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = mongoDBResourcesGetMongoDBDatabaseThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mongoDBResourcesListMongoDBCollections
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB collection properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mongoDBResourcesListMongoDBCollectionsCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mongoDBResourcesListMongoDBCollectionsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling mongoDBResourcesListMongoDBCollections(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling mongoDBResourcesListMongoDBCollections(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling mongoDBResourcesListMongoDBCollections(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling mongoDBResourcesListMongoDBCollections(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling mongoDBResourcesListMongoDBCollections(Async)");
        }

        return mongoDBResourcesListMongoDBCollectionsCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the MongoDB collection under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return MongoDBCollectionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB collection properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public MongoDBCollectionListResult mongoDBResourcesListMongoDBCollections(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        ApiResponse<MongoDBCollectionListResult> localVarResp = mongoDBResourcesListMongoDBCollectionsWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the MongoDB collection under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;MongoDBCollectionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB collection properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MongoDBCollectionListResult> mongoDBResourcesListMongoDBCollectionsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = mongoDBResourcesListMongoDBCollectionsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, null);
        Type localVarReturnType = new TypeToken<MongoDBCollectionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the MongoDB collection under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB collection properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mongoDBResourcesListMongoDBCollectionsAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback<MongoDBCollectionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = mongoDBResourcesListMongoDBCollectionsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MongoDBCollectionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mongoDBResourcesListMongoDBDatabases
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB database properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mongoDBResourcesListMongoDBDatabasesCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mongoDBResourcesListMongoDBDatabasesValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling mongoDBResourcesListMongoDBDatabases(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling mongoDBResourcesListMongoDBDatabases(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling mongoDBResourcesListMongoDBDatabases(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling mongoDBResourcesListMongoDBDatabases(Async)");
        }

        return mongoDBResourcesListMongoDBDatabasesCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the MongoDB databases under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return MongoDBDatabaseListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB database properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public MongoDBDatabaseListResult mongoDBResourcesListMongoDBDatabases(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        ApiResponse<MongoDBDatabaseListResult> localVarResp = mongoDBResourcesListMongoDBDatabasesWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the MongoDB databases under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;MongoDBDatabaseListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB database properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MongoDBDatabaseListResult> mongoDBResourcesListMongoDBDatabasesWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = mongoDBResourcesListMongoDBDatabasesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<MongoDBDatabaseListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the MongoDB databases under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB database properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mongoDBResourcesListMongoDBDatabasesAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<MongoDBDatabaseListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = mongoDBResourcesListMongoDBDatabasesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MongoDBDatabaseListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mongoDBResourcesUpdateMongoDBCollectionThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current MongoDB collection. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB collection update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the MongoDB collection update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mongoDBResourcesUpdateMongoDBCollectionThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateThroughputParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}/throughputSettings/default"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "collectionName" + "}", localVarApiClient.escapeString(collectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mongoDBResourcesUpdateMongoDBCollectionThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling mongoDBResourcesUpdateMongoDBCollectionThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling mongoDBResourcesUpdateMongoDBCollectionThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling mongoDBResourcesUpdateMongoDBCollectionThroughput(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling mongoDBResourcesUpdateMongoDBCollectionThroughput(Async)");
        }

        // verify the required parameter 'collectionName' is set
        if (collectionName == null) {
            throw new ApiException("Missing the required parameter 'collectionName' when calling mongoDBResourcesUpdateMongoDBCollectionThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling mongoDBResourcesUpdateMongoDBCollectionThroughput(Async)");
        }

        // verify the required parameter 'updateThroughputParameters' is set
        if (updateThroughputParameters == null) {
            throw new ApiException("Missing the required parameter 'updateThroughputParameters' when calling mongoDBResourcesUpdateMongoDBCollectionThroughput(Async)");
        }

        return mongoDBResourcesUpdateMongoDBCollectionThroughputCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, updateThroughputParameters, _callback);

    }

    /**
     * 
     * Update the RUs per second of an Azure Cosmos DB MongoDB collection
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current MongoDB collection. (required)
     * @return ThroughputSettingsGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB collection update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the MongoDB collection update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ThroughputSettingsGetResults mongoDBResourcesUpdateMongoDBCollectionThroughput(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters) throws ApiException {
        ApiResponse<ThroughputSettingsGetResults> localVarResp = mongoDBResourcesUpdateMongoDBCollectionThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, updateThroughputParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update the RUs per second of an Azure Cosmos DB MongoDB collection
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current MongoDB collection. (required)
     * @return ApiResponse&lt;ThroughputSettingsGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB collection update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the MongoDB collection update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ThroughputSettingsGetResults> mongoDBResourcesUpdateMongoDBCollectionThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters) throws ApiException {
        okhttp3.Call localVarCall = mongoDBResourcesUpdateMongoDBCollectionThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, updateThroughputParameters, null);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update the RUs per second of an Azure Cosmos DB MongoDB collection
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current MongoDB collection. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB collection update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the MongoDB collection update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mongoDBResourcesUpdateMongoDBCollectionThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters, final ApiCallback<ThroughputSettingsGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = mongoDBResourcesUpdateMongoDBCollectionThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, updateThroughputParameters, _callback);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mongoDBResourcesUpdateMongoDBDatabaseThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current MongoDB database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB database update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the MongoDB database update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mongoDBResourcesUpdateMongoDBDatabaseThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateThroughputParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/throughputSettings/default"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mongoDBResourcesUpdateMongoDBDatabaseThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling mongoDBResourcesUpdateMongoDBDatabaseThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling mongoDBResourcesUpdateMongoDBDatabaseThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling mongoDBResourcesUpdateMongoDBDatabaseThroughput(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling mongoDBResourcesUpdateMongoDBDatabaseThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling mongoDBResourcesUpdateMongoDBDatabaseThroughput(Async)");
        }

        // verify the required parameter 'updateThroughputParameters' is set
        if (updateThroughputParameters == null) {
            throw new ApiException("Missing the required parameter 'updateThroughputParameters' when calling mongoDBResourcesUpdateMongoDBDatabaseThroughput(Async)");
        }

        return mongoDBResourcesUpdateMongoDBDatabaseThroughputCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters, _callback);

    }

    /**
     * 
     * Update RUs per second of the an Azure Cosmos DB MongoDB database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current MongoDB database. (required)
     * @return ThroughputSettingsGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB database update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the MongoDB database update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ThroughputSettingsGetResults mongoDBResourcesUpdateMongoDBDatabaseThroughput(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters) throws ApiException {
        ApiResponse<ThroughputSettingsGetResults> localVarResp = mongoDBResourcesUpdateMongoDBDatabaseThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update RUs per second of the an Azure Cosmos DB MongoDB database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current MongoDB database. (required)
     * @return ApiResponse&lt;ThroughputSettingsGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB database update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the MongoDB database update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ThroughputSettingsGetResults> mongoDBResourcesUpdateMongoDBDatabaseThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters) throws ApiException {
        okhttp3.Call localVarCall = mongoDBResourcesUpdateMongoDBDatabaseThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters, null);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update RUs per second of the an Azure Cosmos DB MongoDB database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current MongoDB database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB database update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the MongoDB database update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mongoDBResourcesUpdateMongoDBDatabaseThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters, final ApiCallback<ThroughputSettingsGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = mongoDBResourcesUpdateMongoDBDatabaseThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters, _callback);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for partitionKeyRangeIdListMetrics
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param partitionKeyRangeId Partition Key Range Id for which to get data. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the partition key range id were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partitionKeyRangeIdListMetricsCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String partitionKeyRangeId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitionKeyRangeId/{partitionKeyRangeId}/metrics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseRid" + "}", localVarApiClient.escapeString(databaseRid.toString()))
            .replace("{" + "collectionRid" + "}", localVarApiClient.escapeString(collectionRid.toString()))
            .replace("{" + "partitionKeyRangeId" + "}", localVarApiClient.escapeString(partitionKeyRangeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partitionKeyRangeIdListMetricsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String partitionKeyRangeId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling partitionKeyRangeIdListMetrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling partitionKeyRangeIdListMetrics(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling partitionKeyRangeIdListMetrics(Async)");
        }

        // verify the required parameter 'databaseRid' is set
        if (databaseRid == null) {
            throw new ApiException("Missing the required parameter 'databaseRid' when calling partitionKeyRangeIdListMetrics(Async)");
        }

        // verify the required parameter 'collectionRid' is set
        if (collectionRid == null) {
            throw new ApiException("Missing the required parameter 'collectionRid' when calling partitionKeyRangeIdListMetrics(Async)");
        }

        // verify the required parameter 'partitionKeyRangeId' is set
        if (partitionKeyRangeId == null) {
            throw new ApiException("Missing the required parameter 'partitionKeyRangeId' when calling partitionKeyRangeIdListMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling partitionKeyRangeIdListMetrics(Async)");
        }

        // verify the required parameter '$filter' is set
        if ($filter == null) {
            throw new ApiException("Missing the required parameter '$filter' when calling partitionKeyRangeIdListMetrics(Async)");
        }

        return partitionKeyRangeIdListMetricsCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, partitionKeyRangeId, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given partition key range id.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param partitionKeyRangeId Partition Key Range Id for which to get data. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return PartitionMetricListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the partition key range id were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public PartitionMetricListResult partitionKeyRangeIdListMetrics(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String partitionKeyRangeId, String apiVersion, String $filter) throws ApiException {
        ApiResponse<PartitionMetricListResult> localVarResp = partitionKeyRangeIdListMetricsWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, partitionKeyRangeId, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given partition key range id.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param partitionKeyRangeId Partition Key Range Id for which to get data. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return ApiResponse&lt;PartitionMetricListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the partition key range id were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PartitionMetricListResult> partitionKeyRangeIdListMetricsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String partitionKeyRangeId, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = partitionKeyRangeIdListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, partitionKeyRangeId, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<PartitionMetricListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the metrics determined by the given filter for the given partition key range id.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param partitionKeyRangeId Partition Key Range Id for which to get data. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the partition key range id were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partitionKeyRangeIdListMetricsAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String partitionKeyRangeId, String apiVersion, String $filter, final ApiCallback<PartitionMetricListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = partitionKeyRangeIdListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, partitionKeyRangeId, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<PartitionMetricListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for partitionKeyRangeIdRegionListMetrics
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param partitionKeyRangeId Partition Key Range Id for which to get data. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the partition key range id and region were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partitionKeyRangeIdRegionListMetricsCall(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String partitionKeyRangeId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/partitionKeyRangeId/{partitionKeyRangeId}/metrics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "region" + "}", localVarApiClient.escapeString(region.toString()))
            .replace("{" + "databaseRid" + "}", localVarApiClient.escapeString(databaseRid.toString()))
            .replace("{" + "collectionRid" + "}", localVarApiClient.escapeString(collectionRid.toString()))
            .replace("{" + "partitionKeyRangeId" + "}", localVarApiClient.escapeString(partitionKeyRangeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partitionKeyRangeIdRegionListMetricsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String partitionKeyRangeId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling partitionKeyRangeIdRegionListMetrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling partitionKeyRangeIdRegionListMetrics(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling partitionKeyRangeIdRegionListMetrics(Async)");
        }

        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling partitionKeyRangeIdRegionListMetrics(Async)");
        }

        // verify the required parameter 'databaseRid' is set
        if (databaseRid == null) {
            throw new ApiException("Missing the required parameter 'databaseRid' when calling partitionKeyRangeIdRegionListMetrics(Async)");
        }

        // verify the required parameter 'collectionRid' is set
        if (collectionRid == null) {
            throw new ApiException("Missing the required parameter 'collectionRid' when calling partitionKeyRangeIdRegionListMetrics(Async)");
        }

        // verify the required parameter 'partitionKeyRangeId' is set
        if (partitionKeyRangeId == null) {
            throw new ApiException("Missing the required parameter 'partitionKeyRangeId' when calling partitionKeyRangeIdRegionListMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling partitionKeyRangeIdRegionListMetrics(Async)");
        }

        // verify the required parameter '$filter' is set
        if ($filter == null) {
            throw new ApiException("Missing the required parameter '$filter' when calling partitionKeyRangeIdRegionListMetrics(Async)");
        }

        return partitionKeyRangeIdRegionListMetricsCall(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, partitionKeyRangeId, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given partition key range id and region.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param partitionKeyRangeId Partition Key Range Id for which to get data. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return PartitionMetricListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the partition key range id and region were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public PartitionMetricListResult partitionKeyRangeIdRegionListMetrics(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String partitionKeyRangeId, String apiVersion, String $filter) throws ApiException {
        ApiResponse<PartitionMetricListResult> localVarResp = partitionKeyRangeIdRegionListMetricsWithHttpInfo(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, partitionKeyRangeId, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given partition key range id and region.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param partitionKeyRangeId Partition Key Range Id for which to get data. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return ApiResponse&lt;PartitionMetricListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the partition key range id and region were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PartitionMetricListResult> partitionKeyRangeIdRegionListMetricsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String partitionKeyRangeId, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = partitionKeyRangeIdRegionListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, partitionKeyRangeId, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<PartitionMetricListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the metrics determined by the given filter for the given partition key range id and region.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param partitionKeyRangeId Partition Key Range Id for which to get data. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the partition key range id and region were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partitionKeyRangeIdRegionListMetricsAsync(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String partitionKeyRangeId, String apiVersion, String $filter, final ApiCallback<PartitionMetricListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = partitionKeyRangeIdRegionListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, partitionKeyRangeId, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<PartitionMetricListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for percentileListMetrics
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The percentile metrics for the account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call percentileListMetricsCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/percentile/metrics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call percentileListMetricsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling percentileListMetrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling percentileListMetrics(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling percentileListMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling percentileListMetrics(Async)");
        }

        // verify the required parameter '$filter' is set
        if ($filter == null) {
            throw new ApiException("Missing the required parameter '$filter' when calling percentileListMetrics(Async)");
        }

        return percentileListMetricsCall(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given database account. This url is only for PBS and Replication Latency data
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return PercentileMetricListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The percentile metrics for the account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public PercentileMetricListResult percentileListMetrics(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter) throws ApiException {
        ApiResponse<PercentileMetricListResult> localVarResp = percentileListMetricsWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given database account. This url is only for PBS and Replication Latency data
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return ApiResponse&lt;PercentileMetricListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The percentile metrics for the account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PercentileMetricListResult> percentileListMetricsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = percentileListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<PercentileMetricListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the metrics determined by the given filter for the given database account. This url is only for PBS and Replication Latency data
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The percentile metrics for the account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call percentileListMetricsAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter, final ApiCallback<PercentileMetricListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = percentileListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<PercentileMetricListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for percentileSourceTargetListMetrics
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param sourceRegion Source region from which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param targetRegion Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The percentile metrics for the account, source and target regions were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call percentileSourceTargetListMetricsCall(String subscriptionId, String resourceGroupName, String accountName, String sourceRegion, String targetRegion, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sourceRegion/{sourceRegion}/targetRegion/{targetRegion}/percentile/metrics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "sourceRegion" + "}", localVarApiClient.escapeString(sourceRegion.toString()))
            .replace("{" + "targetRegion" + "}", localVarApiClient.escapeString(targetRegion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call percentileSourceTargetListMetricsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String sourceRegion, String targetRegion, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling percentileSourceTargetListMetrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling percentileSourceTargetListMetrics(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling percentileSourceTargetListMetrics(Async)");
        }

        // verify the required parameter 'sourceRegion' is set
        if (sourceRegion == null) {
            throw new ApiException("Missing the required parameter 'sourceRegion' when calling percentileSourceTargetListMetrics(Async)");
        }

        // verify the required parameter 'targetRegion' is set
        if (targetRegion == null) {
            throw new ApiException("Missing the required parameter 'targetRegion' when calling percentileSourceTargetListMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling percentileSourceTargetListMetrics(Async)");
        }

        // verify the required parameter '$filter' is set
        if ($filter == null) {
            throw new ApiException("Missing the required parameter '$filter' when calling percentileSourceTargetListMetrics(Async)");
        }

        return percentileSourceTargetListMetricsCall(subscriptionId, resourceGroupName, accountName, sourceRegion, targetRegion, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given account, source and target region. This url is only for PBS and Replication Latency data
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param sourceRegion Source region from which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param targetRegion Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return PercentileMetricListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The percentile metrics for the account, source and target regions were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public PercentileMetricListResult percentileSourceTargetListMetrics(String subscriptionId, String resourceGroupName, String accountName, String sourceRegion, String targetRegion, String apiVersion, String $filter) throws ApiException {
        ApiResponse<PercentileMetricListResult> localVarResp = percentileSourceTargetListMetricsWithHttpInfo(subscriptionId, resourceGroupName, accountName, sourceRegion, targetRegion, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given account, source and target region. This url is only for PBS and Replication Latency data
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param sourceRegion Source region from which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param targetRegion Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return ApiResponse&lt;PercentileMetricListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The percentile metrics for the account, source and target regions were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PercentileMetricListResult> percentileSourceTargetListMetricsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String sourceRegion, String targetRegion, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = percentileSourceTargetListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, sourceRegion, targetRegion, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<PercentileMetricListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the metrics determined by the given filter for the given account, source and target region. This url is only for PBS and Replication Latency data
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param sourceRegion Source region from which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param targetRegion Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The percentile metrics for the account, source and target regions were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call percentileSourceTargetListMetricsAsync(String subscriptionId, String resourceGroupName, String accountName, String sourceRegion, String targetRegion, String apiVersion, String $filter, final ApiCallback<PercentileMetricListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = percentileSourceTargetListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, sourceRegion, targetRegion, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<PercentileMetricListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for percentileTargetListMetrics
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param targetRegion Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The percentile metrics for the account and target regions were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call percentileTargetListMetricsCall(String subscriptionId, String resourceGroupName, String accountName, String targetRegion, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/targetRegion/{targetRegion}/percentile/metrics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "targetRegion" + "}", localVarApiClient.escapeString(targetRegion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call percentileTargetListMetricsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String targetRegion, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling percentileTargetListMetrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling percentileTargetListMetrics(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling percentileTargetListMetrics(Async)");
        }

        // verify the required parameter 'targetRegion' is set
        if (targetRegion == null) {
            throw new ApiException("Missing the required parameter 'targetRegion' when calling percentileTargetListMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling percentileTargetListMetrics(Async)");
        }

        // verify the required parameter '$filter' is set
        if ($filter == null) {
            throw new ApiException("Missing the required parameter '$filter' when calling percentileTargetListMetrics(Async)");
        }

        return percentileTargetListMetricsCall(subscriptionId, resourceGroupName, accountName, targetRegion, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given account target region. This url is only for PBS and Replication Latency data
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param targetRegion Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return PercentileMetricListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The percentile metrics for the account and target regions were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public PercentileMetricListResult percentileTargetListMetrics(String subscriptionId, String resourceGroupName, String accountName, String targetRegion, String apiVersion, String $filter) throws ApiException {
        ApiResponse<PercentileMetricListResult> localVarResp = percentileTargetListMetricsWithHttpInfo(subscriptionId, resourceGroupName, accountName, targetRegion, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given account target region. This url is only for PBS and Replication Latency data
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param targetRegion Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return ApiResponse&lt;PercentileMetricListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The percentile metrics for the account and target regions were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PercentileMetricListResult> percentileTargetListMetricsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String targetRegion, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = percentileTargetListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, targetRegion, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<PercentileMetricListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the metrics determined by the given filter for the given account target region. This url is only for PBS and Replication Latency data
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param targetRegion Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The percentile metrics for the account and target regions were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call percentileTargetListMetricsAsync(String subscriptionId, String resourceGroupName, String accountName, String targetRegion, String apiVersion, String $filter, final ApiCallback<PercentileMetricListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = percentileTargetListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, targetRegion, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<PercentileMetricListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sqlResourcesCreateUpdateSqlContainer
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateSqlContainerParameters The parameters to provide for the current SQL container. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL container create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The SQL container create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesCreateUpdateSqlContainerCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, SqlContainerCreateUpdateParameters createUpdateSqlContainerParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdateSqlContainerParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sqlResourcesCreateUpdateSqlContainerValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, SqlContainerCreateUpdateParameters createUpdateSqlContainerParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sqlResourcesCreateUpdateSqlContainer(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sqlResourcesCreateUpdateSqlContainer(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sqlResourcesCreateUpdateSqlContainer(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling sqlResourcesCreateUpdateSqlContainer(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling sqlResourcesCreateUpdateSqlContainer(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sqlResourcesCreateUpdateSqlContainer(Async)");
        }

        // verify the required parameter 'createUpdateSqlContainerParameters' is set
        if (createUpdateSqlContainerParameters == null) {
            throw new ApiException("Missing the required parameter 'createUpdateSqlContainerParameters' when calling sqlResourcesCreateUpdateSqlContainer(Async)");
        }

        return sqlResourcesCreateUpdateSqlContainerCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, createUpdateSqlContainerParameters, _callback);

    }

    /**
     * 
     * Create or update an Azure Cosmos DB SQL container
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateSqlContainerParameters The parameters to provide for the current SQL container. (required)
     * @return SqlContainerGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL container create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The SQL container create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public SqlContainerGetResults sqlResourcesCreateUpdateSqlContainer(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, SqlContainerCreateUpdateParameters createUpdateSqlContainerParameters) throws ApiException {
        ApiResponse<SqlContainerGetResults> localVarResp = sqlResourcesCreateUpdateSqlContainerWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, createUpdateSqlContainerParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update an Azure Cosmos DB SQL container
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateSqlContainerParameters The parameters to provide for the current SQL container. (required)
     * @return ApiResponse&lt;SqlContainerGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL container create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The SQL container create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SqlContainerGetResults> sqlResourcesCreateUpdateSqlContainerWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, SqlContainerCreateUpdateParameters createUpdateSqlContainerParameters) throws ApiException {
        okhttp3.Call localVarCall = sqlResourcesCreateUpdateSqlContainerValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, createUpdateSqlContainerParameters, null);
        Type localVarReturnType = new TypeToken<SqlContainerGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update an Azure Cosmos DB SQL container
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateSqlContainerParameters The parameters to provide for the current SQL container. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL container create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The SQL container create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesCreateUpdateSqlContainerAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, SqlContainerCreateUpdateParameters createUpdateSqlContainerParameters, final ApiCallback<SqlContainerGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = sqlResourcesCreateUpdateSqlContainerValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, createUpdateSqlContainerParameters, _callback);
        Type localVarReturnType = new TypeToken<SqlContainerGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sqlResourcesCreateUpdateSqlDatabase
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateSqlDatabaseParameters The parameters to provide for the current SQL database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL database create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The SQL database create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesCreateUpdateSqlDatabaseCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, SqlDatabaseCreateUpdateParameters createUpdateSqlDatabaseParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdateSqlDatabaseParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sqlResourcesCreateUpdateSqlDatabaseValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, SqlDatabaseCreateUpdateParameters createUpdateSqlDatabaseParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sqlResourcesCreateUpdateSqlDatabase(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sqlResourcesCreateUpdateSqlDatabase(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sqlResourcesCreateUpdateSqlDatabase(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling sqlResourcesCreateUpdateSqlDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sqlResourcesCreateUpdateSqlDatabase(Async)");
        }

        // verify the required parameter 'createUpdateSqlDatabaseParameters' is set
        if (createUpdateSqlDatabaseParameters == null) {
            throw new ApiException("Missing the required parameter 'createUpdateSqlDatabaseParameters' when calling sqlResourcesCreateUpdateSqlDatabase(Async)");
        }

        return sqlResourcesCreateUpdateSqlDatabaseCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateSqlDatabaseParameters, _callback);

    }

    /**
     * 
     * Create or update an Azure Cosmos DB SQL database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateSqlDatabaseParameters The parameters to provide for the current SQL database. (required)
     * @return SqlDatabaseGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL database create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The SQL database create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public SqlDatabaseGetResults sqlResourcesCreateUpdateSqlDatabase(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, SqlDatabaseCreateUpdateParameters createUpdateSqlDatabaseParameters) throws ApiException {
        ApiResponse<SqlDatabaseGetResults> localVarResp = sqlResourcesCreateUpdateSqlDatabaseWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateSqlDatabaseParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update an Azure Cosmos DB SQL database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateSqlDatabaseParameters The parameters to provide for the current SQL database. (required)
     * @return ApiResponse&lt;SqlDatabaseGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL database create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The SQL database create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SqlDatabaseGetResults> sqlResourcesCreateUpdateSqlDatabaseWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, SqlDatabaseCreateUpdateParameters createUpdateSqlDatabaseParameters) throws ApiException {
        okhttp3.Call localVarCall = sqlResourcesCreateUpdateSqlDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateSqlDatabaseParameters, null);
        Type localVarReturnType = new TypeToken<SqlDatabaseGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update an Azure Cosmos DB SQL database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateSqlDatabaseParameters The parameters to provide for the current SQL database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL database create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The SQL database create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesCreateUpdateSqlDatabaseAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, SqlDatabaseCreateUpdateParameters createUpdateSqlDatabaseParameters, final ApiCallback<SqlDatabaseGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = sqlResourcesCreateUpdateSqlDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateSqlDatabaseParameters, _callback);
        Type localVarReturnType = new TypeToken<SqlDatabaseGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sqlResourcesCreateUpdateSqlStoredProcedure
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param storedProcedureName Cosmos DB storedProcedure name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateSqlStoredProcedureParameters The parameters to provide for the current SQL storedProcedure. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL storedProcedure create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The SQL storedProcedure create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesCreateUpdateSqlStoredProcedureCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String storedProcedureName, String apiVersion, SqlStoredProcedureCreateUpdateParameters createUpdateSqlStoredProcedureParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdateSqlStoredProcedureParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures/{storedProcedureName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "storedProcedureName" + "}", localVarApiClient.escapeString(storedProcedureName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sqlResourcesCreateUpdateSqlStoredProcedureValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String storedProcedureName, String apiVersion, SqlStoredProcedureCreateUpdateParameters createUpdateSqlStoredProcedureParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sqlResourcesCreateUpdateSqlStoredProcedure(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sqlResourcesCreateUpdateSqlStoredProcedure(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sqlResourcesCreateUpdateSqlStoredProcedure(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling sqlResourcesCreateUpdateSqlStoredProcedure(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling sqlResourcesCreateUpdateSqlStoredProcedure(Async)");
        }

        // verify the required parameter 'storedProcedureName' is set
        if (storedProcedureName == null) {
            throw new ApiException("Missing the required parameter 'storedProcedureName' when calling sqlResourcesCreateUpdateSqlStoredProcedure(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sqlResourcesCreateUpdateSqlStoredProcedure(Async)");
        }

        // verify the required parameter 'createUpdateSqlStoredProcedureParameters' is set
        if (createUpdateSqlStoredProcedureParameters == null) {
            throw new ApiException("Missing the required parameter 'createUpdateSqlStoredProcedureParameters' when calling sqlResourcesCreateUpdateSqlStoredProcedure(Async)");
        }

        return sqlResourcesCreateUpdateSqlStoredProcedureCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, storedProcedureName, apiVersion, createUpdateSqlStoredProcedureParameters, _callback);

    }

    /**
     * 
     * Create or update an Azure Cosmos DB SQL storedProcedure
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param storedProcedureName Cosmos DB storedProcedure name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateSqlStoredProcedureParameters The parameters to provide for the current SQL storedProcedure. (required)
     * @return SqlStoredProcedureGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL storedProcedure create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The SQL storedProcedure create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public SqlStoredProcedureGetResults sqlResourcesCreateUpdateSqlStoredProcedure(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String storedProcedureName, String apiVersion, SqlStoredProcedureCreateUpdateParameters createUpdateSqlStoredProcedureParameters) throws ApiException {
        ApiResponse<SqlStoredProcedureGetResults> localVarResp = sqlResourcesCreateUpdateSqlStoredProcedureWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, containerName, storedProcedureName, apiVersion, createUpdateSqlStoredProcedureParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update an Azure Cosmos DB SQL storedProcedure
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param storedProcedureName Cosmos DB storedProcedure name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateSqlStoredProcedureParameters The parameters to provide for the current SQL storedProcedure. (required)
     * @return ApiResponse&lt;SqlStoredProcedureGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL storedProcedure create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The SQL storedProcedure create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SqlStoredProcedureGetResults> sqlResourcesCreateUpdateSqlStoredProcedureWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String storedProcedureName, String apiVersion, SqlStoredProcedureCreateUpdateParameters createUpdateSqlStoredProcedureParameters) throws ApiException {
        okhttp3.Call localVarCall = sqlResourcesCreateUpdateSqlStoredProcedureValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, storedProcedureName, apiVersion, createUpdateSqlStoredProcedureParameters, null);
        Type localVarReturnType = new TypeToken<SqlStoredProcedureGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update an Azure Cosmos DB SQL storedProcedure
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param storedProcedureName Cosmos DB storedProcedure name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateSqlStoredProcedureParameters The parameters to provide for the current SQL storedProcedure. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL storedProcedure create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The SQL storedProcedure create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesCreateUpdateSqlStoredProcedureAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String storedProcedureName, String apiVersion, SqlStoredProcedureCreateUpdateParameters createUpdateSqlStoredProcedureParameters, final ApiCallback<SqlStoredProcedureGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = sqlResourcesCreateUpdateSqlStoredProcedureValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, storedProcedureName, apiVersion, createUpdateSqlStoredProcedureParameters, _callback);
        Type localVarReturnType = new TypeToken<SqlStoredProcedureGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sqlResourcesCreateUpdateSqlTrigger
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param triggerName Cosmos DB trigger name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateSqlTriggerParameters The parameters to provide for the current SQL trigger. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL trigger create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The SQL trigger create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesCreateUpdateSqlTriggerCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String triggerName, String apiVersion, SqlTriggerCreateUpdateParameters createUpdateSqlTriggerParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdateSqlTriggerParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers/{triggerName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "triggerName" + "}", localVarApiClient.escapeString(triggerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sqlResourcesCreateUpdateSqlTriggerValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String triggerName, String apiVersion, SqlTriggerCreateUpdateParameters createUpdateSqlTriggerParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sqlResourcesCreateUpdateSqlTrigger(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sqlResourcesCreateUpdateSqlTrigger(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sqlResourcesCreateUpdateSqlTrigger(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling sqlResourcesCreateUpdateSqlTrigger(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling sqlResourcesCreateUpdateSqlTrigger(Async)");
        }

        // verify the required parameter 'triggerName' is set
        if (triggerName == null) {
            throw new ApiException("Missing the required parameter 'triggerName' when calling sqlResourcesCreateUpdateSqlTrigger(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sqlResourcesCreateUpdateSqlTrigger(Async)");
        }

        // verify the required parameter 'createUpdateSqlTriggerParameters' is set
        if (createUpdateSqlTriggerParameters == null) {
            throw new ApiException("Missing the required parameter 'createUpdateSqlTriggerParameters' when calling sqlResourcesCreateUpdateSqlTrigger(Async)");
        }

        return sqlResourcesCreateUpdateSqlTriggerCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, triggerName, apiVersion, createUpdateSqlTriggerParameters, _callback);

    }

    /**
     * 
     * Create or update an Azure Cosmos DB SQL trigger
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param triggerName Cosmos DB trigger name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateSqlTriggerParameters The parameters to provide for the current SQL trigger. (required)
     * @return SqlTriggerGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL trigger create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The SQL trigger create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public SqlTriggerGetResults sqlResourcesCreateUpdateSqlTrigger(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String triggerName, String apiVersion, SqlTriggerCreateUpdateParameters createUpdateSqlTriggerParameters) throws ApiException {
        ApiResponse<SqlTriggerGetResults> localVarResp = sqlResourcesCreateUpdateSqlTriggerWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, containerName, triggerName, apiVersion, createUpdateSqlTriggerParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update an Azure Cosmos DB SQL trigger
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param triggerName Cosmos DB trigger name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateSqlTriggerParameters The parameters to provide for the current SQL trigger. (required)
     * @return ApiResponse&lt;SqlTriggerGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL trigger create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The SQL trigger create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SqlTriggerGetResults> sqlResourcesCreateUpdateSqlTriggerWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String triggerName, String apiVersion, SqlTriggerCreateUpdateParameters createUpdateSqlTriggerParameters) throws ApiException {
        okhttp3.Call localVarCall = sqlResourcesCreateUpdateSqlTriggerValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, triggerName, apiVersion, createUpdateSqlTriggerParameters, null);
        Type localVarReturnType = new TypeToken<SqlTriggerGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update an Azure Cosmos DB SQL trigger
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param triggerName Cosmos DB trigger name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateSqlTriggerParameters The parameters to provide for the current SQL trigger. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL trigger create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The SQL trigger create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesCreateUpdateSqlTriggerAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String triggerName, String apiVersion, SqlTriggerCreateUpdateParameters createUpdateSqlTriggerParameters, final ApiCallback<SqlTriggerGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = sqlResourcesCreateUpdateSqlTriggerValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, triggerName, apiVersion, createUpdateSqlTriggerParameters, _callback);
        Type localVarReturnType = new TypeToken<SqlTriggerGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sqlResourcesCreateUpdateSqlUserDefinedFunction
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param userDefinedFunctionName Cosmos DB userDefinedFunction name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateSqlUserDefinedFunctionParameters The parameters to provide for the current SQL userDefinedFunction. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL userDefinedFunction create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The SQL userDefinedFunction create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesCreateUpdateSqlUserDefinedFunctionCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String userDefinedFunctionName, String apiVersion, SqlUserDefinedFunctionCreateUpdateParameters createUpdateSqlUserDefinedFunctionParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdateSqlUserDefinedFunctionParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions/{userDefinedFunctionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "userDefinedFunctionName" + "}", localVarApiClient.escapeString(userDefinedFunctionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sqlResourcesCreateUpdateSqlUserDefinedFunctionValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String userDefinedFunctionName, String apiVersion, SqlUserDefinedFunctionCreateUpdateParameters createUpdateSqlUserDefinedFunctionParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sqlResourcesCreateUpdateSqlUserDefinedFunction(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sqlResourcesCreateUpdateSqlUserDefinedFunction(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sqlResourcesCreateUpdateSqlUserDefinedFunction(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling sqlResourcesCreateUpdateSqlUserDefinedFunction(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling sqlResourcesCreateUpdateSqlUserDefinedFunction(Async)");
        }

        // verify the required parameter 'userDefinedFunctionName' is set
        if (userDefinedFunctionName == null) {
            throw new ApiException("Missing the required parameter 'userDefinedFunctionName' when calling sqlResourcesCreateUpdateSqlUserDefinedFunction(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sqlResourcesCreateUpdateSqlUserDefinedFunction(Async)");
        }

        // verify the required parameter 'createUpdateSqlUserDefinedFunctionParameters' is set
        if (createUpdateSqlUserDefinedFunctionParameters == null) {
            throw new ApiException("Missing the required parameter 'createUpdateSqlUserDefinedFunctionParameters' when calling sqlResourcesCreateUpdateSqlUserDefinedFunction(Async)");
        }

        return sqlResourcesCreateUpdateSqlUserDefinedFunctionCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, apiVersion, createUpdateSqlUserDefinedFunctionParameters, _callback);

    }

    /**
     * 
     * Create or update an Azure Cosmos DB SQL userDefinedFunction
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param userDefinedFunctionName Cosmos DB userDefinedFunction name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateSqlUserDefinedFunctionParameters The parameters to provide for the current SQL userDefinedFunction. (required)
     * @return SqlUserDefinedFunctionGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL userDefinedFunction create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The SQL userDefinedFunction create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public SqlUserDefinedFunctionGetResults sqlResourcesCreateUpdateSqlUserDefinedFunction(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String userDefinedFunctionName, String apiVersion, SqlUserDefinedFunctionCreateUpdateParameters createUpdateSqlUserDefinedFunctionParameters) throws ApiException {
        ApiResponse<SqlUserDefinedFunctionGetResults> localVarResp = sqlResourcesCreateUpdateSqlUserDefinedFunctionWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, apiVersion, createUpdateSqlUserDefinedFunctionParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update an Azure Cosmos DB SQL userDefinedFunction
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param userDefinedFunctionName Cosmos DB userDefinedFunction name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateSqlUserDefinedFunctionParameters The parameters to provide for the current SQL userDefinedFunction. (required)
     * @return ApiResponse&lt;SqlUserDefinedFunctionGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL userDefinedFunction create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The SQL userDefinedFunction create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SqlUserDefinedFunctionGetResults> sqlResourcesCreateUpdateSqlUserDefinedFunctionWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String userDefinedFunctionName, String apiVersion, SqlUserDefinedFunctionCreateUpdateParameters createUpdateSqlUserDefinedFunctionParameters) throws ApiException {
        okhttp3.Call localVarCall = sqlResourcesCreateUpdateSqlUserDefinedFunctionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, apiVersion, createUpdateSqlUserDefinedFunctionParameters, null);
        Type localVarReturnType = new TypeToken<SqlUserDefinedFunctionGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update an Azure Cosmos DB SQL userDefinedFunction
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param userDefinedFunctionName Cosmos DB userDefinedFunction name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateSqlUserDefinedFunctionParameters The parameters to provide for the current SQL userDefinedFunction. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL userDefinedFunction create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The SQL userDefinedFunction create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesCreateUpdateSqlUserDefinedFunctionAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String userDefinedFunctionName, String apiVersion, SqlUserDefinedFunctionCreateUpdateParameters createUpdateSqlUserDefinedFunctionParameters, final ApiCallback<SqlUserDefinedFunctionGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = sqlResourcesCreateUpdateSqlUserDefinedFunctionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, apiVersion, createUpdateSqlUserDefinedFunctionParameters, _callback);
        Type localVarReturnType = new TypeToken<SqlUserDefinedFunctionGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sqlResourcesDeleteSqlContainer
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The SQL container delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The SQL container delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesDeleteSqlContainerCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sqlResourcesDeleteSqlContainerValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sqlResourcesDeleteSqlContainer(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sqlResourcesDeleteSqlContainer(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sqlResourcesDeleteSqlContainer(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling sqlResourcesDeleteSqlContainer(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling sqlResourcesDeleteSqlContainer(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sqlResourcesDeleteSqlContainer(Async)");
        }

        return sqlResourcesDeleteSqlContainerCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB SQL container.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The SQL container delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The SQL container delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void sqlResourcesDeleteSqlContainer(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion) throws ApiException {
        sqlResourcesDeleteSqlContainerWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion);
    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB SQL container.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The SQL container delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The SQL container delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sqlResourcesDeleteSqlContainerWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sqlResourcesDeleteSqlContainerValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing Azure Cosmos DB SQL container.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The SQL container delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The SQL container delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesDeleteSqlContainerAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sqlResourcesDeleteSqlContainerValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sqlResourcesDeleteSqlDatabase
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The SQL database delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The SQL database delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesDeleteSqlDatabaseCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sqlResourcesDeleteSqlDatabaseValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sqlResourcesDeleteSqlDatabase(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sqlResourcesDeleteSqlDatabase(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sqlResourcesDeleteSqlDatabase(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling sqlResourcesDeleteSqlDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sqlResourcesDeleteSqlDatabase(Async)");
        }

        return sqlResourcesDeleteSqlDatabaseCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB SQL database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The SQL database delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The SQL database delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void sqlResourcesDeleteSqlDatabase(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        sqlResourcesDeleteSqlDatabaseWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB SQL database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The SQL database delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The SQL database delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sqlResourcesDeleteSqlDatabaseWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sqlResourcesDeleteSqlDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing Azure Cosmos DB SQL database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The SQL database delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The SQL database delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesDeleteSqlDatabaseAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sqlResourcesDeleteSqlDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sqlResourcesDeleteSqlStoredProcedure
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param storedProcedureName Cosmos DB storedProcedure name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The SQL storedProcedure delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The SQL storedProcedure delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesDeleteSqlStoredProcedureCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String storedProcedureName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures/{storedProcedureName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "storedProcedureName" + "}", localVarApiClient.escapeString(storedProcedureName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sqlResourcesDeleteSqlStoredProcedureValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String storedProcedureName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sqlResourcesDeleteSqlStoredProcedure(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sqlResourcesDeleteSqlStoredProcedure(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sqlResourcesDeleteSqlStoredProcedure(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling sqlResourcesDeleteSqlStoredProcedure(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling sqlResourcesDeleteSqlStoredProcedure(Async)");
        }

        // verify the required parameter 'storedProcedureName' is set
        if (storedProcedureName == null) {
            throw new ApiException("Missing the required parameter 'storedProcedureName' when calling sqlResourcesDeleteSqlStoredProcedure(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sqlResourcesDeleteSqlStoredProcedure(Async)");
        }

        return sqlResourcesDeleteSqlStoredProcedureCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, storedProcedureName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB SQL storedProcedure.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param storedProcedureName Cosmos DB storedProcedure name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The SQL storedProcedure delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The SQL storedProcedure delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void sqlResourcesDeleteSqlStoredProcedure(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String storedProcedureName, String apiVersion) throws ApiException {
        sqlResourcesDeleteSqlStoredProcedureWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, containerName, storedProcedureName, apiVersion);
    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB SQL storedProcedure.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param storedProcedureName Cosmos DB storedProcedure name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The SQL storedProcedure delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The SQL storedProcedure delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sqlResourcesDeleteSqlStoredProcedureWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String storedProcedureName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sqlResourcesDeleteSqlStoredProcedureValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, storedProcedureName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing Azure Cosmos DB SQL storedProcedure.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param storedProcedureName Cosmos DB storedProcedure name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The SQL storedProcedure delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The SQL storedProcedure delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesDeleteSqlStoredProcedureAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String storedProcedureName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sqlResourcesDeleteSqlStoredProcedureValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, storedProcedureName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sqlResourcesDeleteSqlTrigger
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param triggerName Cosmos DB trigger name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The SQL trigger delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The SQL trigger delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesDeleteSqlTriggerCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String triggerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers/{triggerName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "triggerName" + "}", localVarApiClient.escapeString(triggerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sqlResourcesDeleteSqlTriggerValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String triggerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sqlResourcesDeleteSqlTrigger(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sqlResourcesDeleteSqlTrigger(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sqlResourcesDeleteSqlTrigger(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling sqlResourcesDeleteSqlTrigger(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling sqlResourcesDeleteSqlTrigger(Async)");
        }

        // verify the required parameter 'triggerName' is set
        if (triggerName == null) {
            throw new ApiException("Missing the required parameter 'triggerName' when calling sqlResourcesDeleteSqlTrigger(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sqlResourcesDeleteSqlTrigger(Async)");
        }

        return sqlResourcesDeleteSqlTriggerCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, triggerName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB SQL trigger.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param triggerName Cosmos DB trigger name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The SQL trigger delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The SQL trigger delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void sqlResourcesDeleteSqlTrigger(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String triggerName, String apiVersion) throws ApiException {
        sqlResourcesDeleteSqlTriggerWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, containerName, triggerName, apiVersion);
    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB SQL trigger.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param triggerName Cosmos DB trigger name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The SQL trigger delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The SQL trigger delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sqlResourcesDeleteSqlTriggerWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String triggerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sqlResourcesDeleteSqlTriggerValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, triggerName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing Azure Cosmos DB SQL trigger.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param triggerName Cosmos DB trigger name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The SQL trigger delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The SQL trigger delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesDeleteSqlTriggerAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String triggerName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sqlResourcesDeleteSqlTriggerValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, triggerName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sqlResourcesDeleteSqlUserDefinedFunction
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param userDefinedFunctionName Cosmos DB userDefinedFunction name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The SQL userDefinedFunction delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The SQL userDefinedFunction delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesDeleteSqlUserDefinedFunctionCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String userDefinedFunctionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions/{userDefinedFunctionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "userDefinedFunctionName" + "}", localVarApiClient.escapeString(userDefinedFunctionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sqlResourcesDeleteSqlUserDefinedFunctionValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String userDefinedFunctionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sqlResourcesDeleteSqlUserDefinedFunction(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sqlResourcesDeleteSqlUserDefinedFunction(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sqlResourcesDeleteSqlUserDefinedFunction(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling sqlResourcesDeleteSqlUserDefinedFunction(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling sqlResourcesDeleteSqlUserDefinedFunction(Async)");
        }

        // verify the required parameter 'userDefinedFunctionName' is set
        if (userDefinedFunctionName == null) {
            throw new ApiException("Missing the required parameter 'userDefinedFunctionName' when calling sqlResourcesDeleteSqlUserDefinedFunction(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sqlResourcesDeleteSqlUserDefinedFunction(Async)");
        }

        return sqlResourcesDeleteSqlUserDefinedFunctionCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB SQL userDefinedFunction.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param userDefinedFunctionName Cosmos DB userDefinedFunction name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The SQL userDefinedFunction delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The SQL userDefinedFunction delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void sqlResourcesDeleteSqlUserDefinedFunction(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String userDefinedFunctionName, String apiVersion) throws ApiException {
        sqlResourcesDeleteSqlUserDefinedFunctionWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, apiVersion);
    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB SQL userDefinedFunction.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param userDefinedFunctionName Cosmos DB userDefinedFunction name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The SQL userDefinedFunction delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The SQL userDefinedFunction delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sqlResourcesDeleteSqlUserDefinedFunctionWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String userDefinedFunctionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sqlResourcesDeleteSqlUserDefinedFunctionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing Azure Cosmos DB SQL userDefinedFunction.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param userDefinedFunctionName Cosmos DB userDefinedFunction name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The SQL userDefinedFunction delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The SQL userDefinedFunction delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesDeleteSqlUserDefinedFunctionAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String userDefinedFunctionName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sqlResourcesDeleteSqlUserDefinedFunctionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sqlResourcesGetSqlContainer
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL container property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesGetSqlContainerCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sqlResourcesGetSqlContainerValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sqlResourcesGetSqlContainer(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sqlResourcesGetSqlContainer(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sqlResourcesGetSqlContainer(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling sqlResourcesGetSqlContainer(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling sqlResourcesGetSqlContainer(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sqlResourcesGetSqlContainer(Async)");
        }

        return sqlResourcesGetSqlContainerCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the SQL container under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return SqlContainerGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL container property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public SqlContainerGetResults sqlResourcesGetSqlContainer(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion) throws ApiException {
        ApiResponse<SqlContainerGetResults> localVarResp = sqlResourcesGetSqlContainerWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the SQL container under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;SqlContainerGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL container property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SqlContainerGetResults> sqlResourcesGetSqlContainerWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sqlResourcesGetSqlContainerValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, null);
        Type localVarReturnType = new TypeToken<SqlContainerGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the SQL container under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL container property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesGetSqlContainerAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, final ApiCallback<SqlContainerGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = sqlResourcesGetSqlContainerValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SqlContainerGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sqlResourcesGetSqlContainerThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL container was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesGetSqlContainerThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/throughputSettings/default"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sqlResourcesGetSqlContainerThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sqlResourcesGetSqlContainerThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sqlResourcesGetSqlContainerThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sqlResourcesGetSqlContainerThroughput(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling sqlResourcesGetSqlContainerThroughput(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling sqlResourcesGetSqlContainerThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sqlResourcesGetSqlContainerThroughput(Async)");
        }

        return sqlResourcesGetSqlContainerThroughputCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the RUs per second of the SQL container under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ThroughputSettingsGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL container was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ThroughputSettingsGetResults sqlResourcesGetSqlContainerThroughput(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion) throws ApiException {
        ApiResponse<ThroughputSettingsGetResults> localVarResp = sqlResourcesGetSqlContainerThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the RUs per second of the SQL container under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;ThroughputSettingsGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL container was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ThroughputSettingsGetResults> sqlResourcesGetSqlContainerThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sqlResourcesGetSqlContainerThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the RUs per second of the SQL container under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL container was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesGetSqlContainerThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, final ApiCallback<ThroughputSettingsGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = sqlResourcesGetSqlContainerThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sqlResourcesGetSqlDatabase
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL database property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesGetSqlDatabaseCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sqlResourcesGetSqlDatabaseValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sqlResourcesGetSqlDatabase(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sqlResourcesGetSqlDatabase(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sqlResourcesGetSqlDatabase(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling sqlResourcesGetSqlDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sqlResourcesGetSqlDatabase(Async)");
        }

        return sqlResourcesGetSqlDatabaseCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the SQL database under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return SqlDatabaseGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL database property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public SqlDatabaseGetResults sqlResourcesGetSqlDatabase(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        ApiResponse<SqlDatabaseGetResults> localVarResp = sqlResourcesGetSqlDatabaseWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the SQL database under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;SqlDatabaseGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL database property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SqlDatabaseGetResults> sqlResourcesGetSqlDatabaseWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sqlResourcesGetSqlDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, null);
        Type localVarReturnType = new TypeToken<SqlDatabaseGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the SQL database under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL database property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesGetSqlDatabaseAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback<SqlDatabaseGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = sqlResourcesGetSqlDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SqlDatabaseGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sqlResourcesGetSqlDatabaseThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL database was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesGetSqlDatabaseThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/throughputSettings/default"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sqlResourcesGetSqlDatabaseThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sqlResourcesGetSqlDatabaseThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sqlResourcesGetSqlDatabaseThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sqlResourcesGetSqlDatabaseThroughput(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling sqlResourcesGetSqlDatabaseThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sqlResourcesGetSqlDatabaseThroughput(Async)");
        }

        return sqlResourcesGetSqlDatabaseThroughputCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the RUs per second of the SQL database under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ThroughputSettingsGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL database was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ThroughputSettingsGetResults sqlResourcesGetSqlDatabaseThroughput(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        ApiResponse<ThroughputSettingsGetResults> localVarResp = sqlResourcesGetSqlDatabaseThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the RUs per second of the SQL database under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;ThroughputSettingsGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL database was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ThroughputSettingsGetResults> sqlResourcesGetSqlDatabaseThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sqlResourcesGetSqlDatabaseThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the RUs per second of the SQL database under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL database was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesGetSqlDatabaseThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback<ThroughputSettingsGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = sqlResourcesGetSqlDatabaseThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sqlResourcesGetSqlStoredProcedure
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param storedProcedureName Cosmos DB storedProcedure name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL storedProcedure property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesGetSqlStoredProcedureCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String storedProcedureName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures/{storedProcedureName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "storedProcedureName" + "}", localVarApiClient.escapeString(storedProcedureName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sqlResourcesGetSqlStoredProcedureValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String storedProcedureName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sqlResourcesGetSqlStoredProcedure(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sqlResourcesGetSqlStoredProcedure(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sqlResourcesGetSqlStoredProcedure(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling sqlResourcesGetSqlStoredProcedure(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling sqlResourcesGetSqlStoredProcedure(Async)");
        }

        // verify the required parameter 'storedProcedureName' is set
        if (storedProcedureName == null) {
            throw new ApiException("Missing the required parameter 'storedProcedureName' when calling sqlResourcesGetSqlStoredProcedure(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sqlResourcesGetSqlStoredProcedure(Async)");
        }

        return sqlResourcesGetSqlStoredProcedureCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, storedProcedureName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the SQL storedProcedure under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param storedProcedureName Cosmos DB storedProcedure name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return SqlStoredProcedureGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL storedProcedure property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public SqlStoredProcedureGetResults sqlResourcesGetSqlStoredProcedure(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String storedProcedureName, String apiVersion) throws ApiException {
        ApiResponse<SqlStoredProcedureGetResults> localVarResp = sqlResourcesGetSqlStoredProcedureWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, containerName, storedProcedureName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the SQL storedProcedure under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param storedProcedureName Cosmos DB storedProcedure name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;SqlStoredProcedureGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL storedProcedure property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SqlStoredProcedureGetResults> sqlResourcesGetSqlStoredProcedureWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String storedProcedureName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sqlResourcesGetSqlStoredProcedureValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, storedProcedureName, apiVersion, null);
        Type localVarReturnType = new TypeToken<SqlStoredProcedureGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the SQL storedProcedure under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param storedProcedureName Cosmos DB storedProcedure name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL storedProcedure property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesGetSqlStoredProcedureAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String storedProcedureName, String apiVersion, final ApiCallback<SqlStoredProcedureGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = sqlResourcesGetSqlStoredProcedureValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, storedProcedureName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SqlStoredProcedureGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sqlResourcesGetSqlTrigger
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param triggerName Cosmos DB trigger name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL trigger property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesGetSqlTriggerCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String triggerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers/{triggerName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "triggerName" + "}", localVarApiClient.escapeString(triggerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sqlResourcesGetSqlTriggerValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String triggerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sqlResourcesGetSqlTrigger(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sqlResourcesGetSqlTrigger(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sqlResourcesGetSqlTrigger(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling sqlResourcesGetSqlTrigger(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling sqlResourcesGetSqlTrigger(Async)");
        }

        // verify the required parameter 'triggerName' is set
        if (triggerName == null) {
            throw new ApiException("Missing the required parameter 'triggerName' when calling sqlResourcesGetSqlTrigger(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sqlResourcesGetSqlTrigger(Async)");
        }

        return sqlResourcesGetSqlTriggerCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, triggerName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the SQL trigger under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param triggerName Cosmos DB trigger name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return SqlTriggerGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL trigger property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public SqlTriggerGetResults sqlResourcesGetSqlTrigger(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String triggerName, String apiVersion) throws ApiException {
        ApiResponse<SqlTriggerGetResults> localVarResp = sqlResourcesGetSqlTriggerWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, containerName, triggerName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the SQL trigger under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param triggerName Cosmos DB trigger name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;SqlTriggerGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL trigger property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SqlTriggerGetResults> sqlResourcesGetSqlTriggerWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String triggerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sqlResourcesGetSqlTriggerValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, triggerName, apiVersion, null);
        Type localVarReturnType = new TypeToken<SqlTriggerGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the SQL trigger under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param triggerName Cosmos DB trigger name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL trigger property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesGetSqlTriggerAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String triggerName, String apiVersion, final ApiCallback<SqlTriggerGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = sqlResourcesGetSqlTriggerValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, triggerName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SqlTriggerGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sqlResourcesGetSqlUserDefinedFunction
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param userDefinedFunctionName Cosmos DB userDefinedFunction name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL userDefinedFunction property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesGetSqlUserDefinedFunctionCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String userDefinedFunctionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions/{userDefinedFunctionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "userDefinedFunctionName" + "}", localVarApiClient.escapeString(userDefinedFunctionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sqlResourcesGetSqlUserDefinedFunctionValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String userDefinedFunctionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sqlResourcesGetSqlUserDefinedFunction(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sqlResourcesGetSqlUserDefinedFunction(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sqlResourcesGetSqlUserDefinedFunction(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling sqlResourcesGetSqlUserDefinedFunction(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling sqlResourcesGetSqlUserDefinedFunction(Async)");
        }

        // verify the required parameter 'userDefinedFunctionName' is set
        if (userDefinedFunctionName == null) {
            throw new ApiException("Missing the required parameter 'userDefinedFunctionName' when calling sqlResourcesGetSqlUserDefinedFunction(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sqlResourcesGetSqlUserDefinedFunction(Async)");
        }

        return sqlResourcesGetSqlUserDefinedFunctionCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the SQL userDefinedFunction under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param userDefinedFunctionName Cosmos DB userDefinedFunction name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return SqlUserDefinedFunctionGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL userDefinedFunction property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public SqlUserDefinedFunctionGetResults sqlResourcesGetSqlUserDefinedFunction(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String userDefinedFunctionName, String apiVersion) throws ApiException {
        ApiResponse<SqlUserDefinedFunctionGetResults> localVarResp = sqlResourcesGetSqlUserDefinedFunctionWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the SQL userDefinedFunction under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param userDefinedFunctionName Cosmos DB userDefinedFunction name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;SqlUserDefinedFunctionGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL userDefinedFunction property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SqlUserDefinedFunctionGetResults> sqlResourcesGetSqlUserDefinedFunctionWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String userDefinedFunctionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sqlResourcesGetSqlUserDefinedFunctionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<SqlUserDefinedFunctionGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the SQL userDefinedFunction under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param userDefinedFunctionName Cosmos DB userDefinedFunction name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL userDefinedFunction property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesGetSqlUserDefinedFunctionAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String userDefinedFunctionName, String apiVersion, final ApiCallback<SqlUserDefinedFunctionGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = sqlResourcesGetSqlUserDefinedFunctionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SqlUserDefinedFunctionGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sqlResourcesListSqlContainers
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL container properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesListSqlContainersCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sqlResourcesListSqlContainersValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sqlResourcesListSqlContainers(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sqlResourcesListSqlContainers(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sqlResourcesListSqlContainers(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling sqlResourcesListSqlContainers(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sqlResourcesListSqlContainers(Async)");
        }

        return sqlResourcesListSqlContainersCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the SQL container under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return SqlContainerListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL container properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public SqlContainerListResult sqlResourcesListSqlContainers(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        ApiResponse<SqlContainerListResult> localVarResp = sqlResourcesListSqlContainersWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the SQL container under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;SqlContainerListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL container properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SqlContainerListResult> sqlResourcesListSqlContainersWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sqlResourcesListSqlContainersValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, null);
        Type localVarReturnType = new TypeToken<SqlContainerListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the SQL container under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL container properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesListSqlContainersAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback<SqlContainerListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = sqlResourcesListSqlContainersValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SqlContainerListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sqlResourcesListSqlDatabases
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL database properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesListSqlDatabasesCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sqlResourcesListSqlDatabasesValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sqlResourcesListSqlDatabases(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sqlResourcesListSqlDatabases(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sqlResourcesListSqlDatabases(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sqlResourcesListSqlDatabases(Async)");
        }

        return sqlResourcesListSqlDatabasesCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the SQL databases under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return SqlDatabaseListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL database properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public SqlDatabaseListResult sqlResourcesListSqlDatabases(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        ApiResponse<SqlDatabaseListResult> localVarResp = sqlResourcesListSqlDatabasesWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the SQL databases under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;SqlDatabaseListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL database properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SqlDatabaseListResult> sqlResourcesListSqlDatabasesWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sqlResourcesListSqlDatabasesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<SqlDatabaseListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the SQL databases under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL database properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesListSqlDatabasesAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<SqlDatabaseListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = sqlResourcesListSqlDatabasesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SqlDatabaseListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sqlResourcesListSqlStoredProcedures
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL stored procedure properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesListSqlStoredProceduresCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sqlResourcesListSqlStoredProceduresValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sqlResourcesListSqlStoredProcedures(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sqlResourcesListSqlStoredProcedures(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sqlResourcesListSqlStoredProcedures(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling sqlResourcesListSqlStoredProcedures(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling sqlResourcesListSqlStoredProcedures(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sqlResourcesListSqlStoredProcedures(Async)");
        }

        return sqlResourcesListSqlStoredProceduresCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the SQL storedProcedure under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return SqlStoredProcedureListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL stored procedure properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public SqlStoredProcedureListResult sqlResourcesListSqlStoredProcedures(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion) throws ApiException {
        ApiResponse<SqlStoredProcedureListResult> localVarResp = sqlResourcesListSqlStoredProceduresWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the SQL storedProcedure under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;SqlStoredProcedureListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL stored procedure properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SqlStoredProcedureListResult> sqlResourcesListSqlStoredProceduresWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sqlResourcesListSqlStoredProceduresValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, null);
        Type localVarReturnType = new TypeToken<SqlStoredProcedureListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the SQL storedProcedure under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL stored procedure properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesListSqlStoredProceduresAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, final ApiCallback<SqlStoredProcedureListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = sqlResourcesListSqlStoredProceduresValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SqlStoredProcedureListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sqlResourcesListSqlTriggers
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL trigger properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesListSqlTriggersCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sqlResourcesListSqlTriggersValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sqlResourcesListSqlTriggers(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sqlResourcesListSqlTriggers(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sqlResourcesListSqlTriggers(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling sqlResourcesListSqlTriggers(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling sqlResourcesListSqlTriggers(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sqlResourcesListSqlTriggers(Async)");
        }

        return sqlResourcesListSqlTriggersCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the SQL trigger under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return SqlTriggerListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL trigger properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public SqlTriggerListResult sqlResourcesListSqlTriggers(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion) throws ApiException {
        ApiResponse<SqlTriggerListResult> localVarResp = sqlResourcesListSqlTriggersWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the SQL trigger under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;SqlTriggerListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL trigger properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SqlTriggerListResult> sqlResourcesListSqlTriggersWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sqlResourcesListSqlTriggersValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, null);
        Type localVarReturnType = new TypeToken<SqlTriggerListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the SQL trigger under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL trigger properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesListSqlTriggersAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, final ApiCallback<SqlTriggerListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = sqlResourcesListSqlTriggersValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SqlTriggerListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sqlResourcesListSqlUserDefinedFunctions
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL userDefinedFunction properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesListSqlUserDefinedFunctionsCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sqlResourcesListSqlUserDefinedFunctionsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sqlResourcesListSqlUserDefinedFunctions(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sqlResourcesListSqlUserDefinedFunctions(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sqlResourcesListSqlUserDefinedFunctions(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling sqlResourcesListSqlUserDefinedFunctions(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling sqlResourcesListSqlUserDefinedFunctions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sqlResourcesListSqlUserDefinedFunctions(Async)");
        }

        return sqlResourcesListSqlUserDefinedFunctionsCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the SQL userDefinedFunction under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return SqlUserDefinedFunctionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL userDefinedFunction properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public SqlUserDefinedFunctionListResult sqlResourcesListSqlUserDefinedFunctions(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion) throws ApiException {
        ApiResponse<SqlUserDefinedFunctionListResult> localVarResp = sqlResourcesListSqlUserDefinedFunctionsWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the SQL userDefinedFunction under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;SqlUserDefinedFunctionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL userDefinedFunction properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SqlUserDefinedFunctionListResult> sqlResourcesListSqlUserDefinedFunctionsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sqlResourcesListSqlUserDefinedFunctionsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, null);
        Type localVarReturnType = new TypeToken<SqlUserDefinedFunctionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the SQL userDefinedFunction under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL userDefinedFunction properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesListSqlUserDefinedFunctionsAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, final ApiCallback<SqlUserDefinedFunctionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = sqlResourcesListSqlUserDefinedFunctionsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SqlUserDefinedFunctionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sqlResourcesUpdateSqlContainerThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current SQL container. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL container update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the SQL container update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesUpdateSqlContainerThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateThroughputParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/throughputSettings/default"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sqlResourcesUpdateSqlContainerThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sqlResourcesUpdateSqlContainerThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sqlResourcesUpdateSqlContainerThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sqlResourcesUpdateSqlContainerThroughput(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling sqlResourcesUpdateSqlContainerThroughput(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling sqlResourcesUpdateSqlContainerThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sqlResourcesUpdateSqlContainerThroughput(Async)");
        }

        // verify the required parameter 'updateThroughputParameters' is set
        if (updateThroughputParameters == null) {
            throw new ApiException("Missing the required parameter 'updateThroughputParameters' when calling sqlResourcesUpdateSqlContainerThroughput(Async)");
        }

        return sqlResourcesUpdateSqlContainerThroughputCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, updateThroughputParameters, _callback);

    }

    /**
     * 
     * Update RUs per second of an Azure Cosmos DB SQL container
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current SQL container. (required)
     * @return ThroughputSettingsGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL container update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the SQL container update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ThroughputSettingsGetResults sqlResourcesUpdateSqlContainerThroughput(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters) throws ApiException {
        ApiResponse<ThroughputSettingsGetResults> localVarResp = sqlResourcesUpdateSqlContainerThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, updateThroughputParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update RUs per second of an Azure Cosmos DB SQL container
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current SQL container. (required)
     * @return ApiResponse&lt;ThroughputSettingsGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL container update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the SQL container update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ThroughputSettingsGetResults> sqlResourcesUpdateSqlContainerThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters) throws ApiException {
        okhttp3.Call localVarCall = sqlResourcesUpdateSqlContainerThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, updateThroughputParameters, null);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update RUs per second of an Azure Cosmos DB SQL container
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current SQL container. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL container update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the SQL container update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesUpdateSqlContainerThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters, final ApiCallback<ThroughputSettingsGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = sqlResourcesUpdateSqlContainerThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, updateThroughputParameters, _callback);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sqlResourcesUpdateSqlDatabaseThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current SQL database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL database update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the SQL database update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesUpdateSqlDatabaseThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateThroughputParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/throughputSettings/default"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sqlResourcesUpdateSqlDatabaseThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sqlResourcesUpdateSqlDatabaseThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sqlResourcesUpdateSqlDatabaseThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sqlResourcesUpdateSqlDatabaseThroughput(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling sqlResourcesUpdateSqlDatabaseThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sqlResourcesUpdateSqlDatabaseThroughput(Async)");
        }

        // verify the required parameter 'updateThroughputParameters' is set
        if (updateThroughputParameters == null) {
            throw new ApiException("Missing the required parameter 'updateThroughputParameters' when calling sqlResourcesUpdateSqlDatabaseThroughput(Async)");
        }

        return sqlResourcesUpdateSqlDatabaseThroughputCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters, _callback);

    }

    /**
     * 
     * Update RUs per second of an Azure Cosmos DB SQL database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current SQL database. (required)
     * @return ThroughputSettingsGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL database update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the SQL database update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ThroughputSettingsGetResults sqlResourcesUpdateSqlDatabaseThroughput(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters) throws ApiException {
        ApiResponse<ThroughputSettingsGetResults> localVarResp = sqlResourcesUpdateSqlDatabaseThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update RUs per second of an Azure Cosmos DB SQL database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current SQL database. (required)
     * @return ApiResponse&lt;ThroughputSettingsGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL database update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the SQL database update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ThroughputSettingsGetResults> sqlResourcesUpdateSqlDatabaseThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters) throws ApiException {
        okhttp3.Call localVarCall = sqlResourcesUpdateSqlDatabaseThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters, null);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update RUs per second of an Azure Cosmos DB SQL database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current SQL database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL database update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the SQL database update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sqlResourcesUpdateSqlDatabaseThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters, final ApiCallback<ThroughputSettingsGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = sqlResourcesUpdateSqlDatabaseThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters, _callback);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tableResourcesCreateUpdateTable
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateTableParameters The parameters to provide for the current Table. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Table create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Table create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tableResourcesCreateUpdateTableCall(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, TableCreateUpdateParameters createUpdateTableParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdateTableParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tableResourcesCreateUpdateTableValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, TableCreateUpdateParameters createUpdateTableParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tableResourcesCreateUpdateTable(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling tableResourcesCreateUpdateTable(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling tableResourcesCreateUpdateTable(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling tableResourcesCreateUpdateTable(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tableResourcesCreateUpdateTable(Async)");
        }

        // verify the required parameter 'createUpdateTableParameters' is set
        if (createUpdateTableParameters == null) {
            throw new ApiException("Missing the required parameter 'createUpdateTableParameters' when calling tableResourcesCreateUpdateTable(Async)");
        }

        return tableResourcesCreateUpdateTableCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, createUpdateTableParameters, _callback);

    }

    /**
     * 
     * Create or update an Azure Cosmos DB Table
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateTableParameters The parameters to provide for the current Table. (required)
     * @return TableGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Table create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Table create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public TableGetResults tableResourcesCreateUpdateTable(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, TableCreateUpdateParameters createUpdateTableParameters) throws ApiException {
        ApiResponse<TableGetResults> localVarResp = tableResourcesCreateUpdateTableWithHttpInfo(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, createUpdateTableParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update an Azure Cosmos DB Table
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateTableParameters The parameters to provide for the current Table. (required)
     * @return ApiResponse&lt;TableGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Table create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Table create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableGetResults> tableResourcesCreateUpdateTableWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, TableCreateUpdateParameters createUpdateTableParameters) throws ApiException {
        okhttp3.Call localVarCall = tableResourcesCreateUpdateTableValidateBeforeCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, createUpdateTableParameters, null);
        Type localVarReturnType = new TypeToken<TableGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update an Azure Cosmos DB Table
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param createUpdateTableParameters The parameters to provide for the current Table. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Table create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Table create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tableResourcesCreateUpdateTableAsync(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, TableCreateUpdateParameters createUpdateTableParameters, final ApiCallback<TableGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = tableResourcesCreateUpdateTableValidateBeforeCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, createUpdateTableParameters, _callback);
        Type localVarReturnType = new TypeToken<TableGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tableResourcesDeleteTable
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Table delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Table delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tableResourcesDeleteTableCall(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tableResourcesDeleteTableValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tableResourcesDeleteTable(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling tableResourcesDeleteTable(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling tableResourcesDeleteTable(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling tableResourcesDeleteTable(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tableResourcesDeleteTable(Async)");
        }

        return tableResourcesDeleteTableCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB Table.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Table delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Table delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void tableResourcesDeleteTable(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion) throws ApiException {
        tableResourcesDeleteTableWithHttpInfo(subscriptionId, resourceGroupName, accountName, tableName, apiVersion);
    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB Table.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Table delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Table delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tableResourcesDeleteTableWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = tableResourcesDeleteTableValidateBeforeCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing Azure Cosmos DB Table.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Table delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Table delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tableResourcesDeleteTableAsync(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tableResourcesDeleteTableValidateBeforeCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for tableResourcesGetTable
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Table property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tableResourcesGetTableCall(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tableResourcesGetTableValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tableResourcesGetTable(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling tableResourcesGetTable(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling tableResourcesGetTable(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling tableResourcesGetTable(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tableResourcesGetTable(Async)");
        }

        return tableResourcesGetTableCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the Tables under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return TableGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Table property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public TableGetResults tableResourcesGetTable(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion) throws ApiException {
        ApiResponse<TableGetResults> localVarResp = tableResourcesGetTableWithHttpInfo(subscriptionId, resourceGroupName, accountName, tableName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the Tables under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;TableGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Table property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableGetResults> tableResourcesGetTableWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = tableResourcesGetTableValidateBeforeCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, null);
        Type localVarReturnType = new TypeToken<TableGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the Tables under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Table property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tableResourcesGetTableAsync(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, final ApiCallback<TableGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = tableResourcesGetTableValidateBeforeCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<TableGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tableResourcesGetTableThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Table was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tableResourcesGetTableThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}/throughputSettings/default"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tableResourcesGetTableThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tableResourcesGetTableThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling tableResourcesGetTableThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling tableResourcesGetTableThroughput(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling tableResourcesGetTableThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tableResourcesGetTableThroughput(Async)");
        }

        return tableResourcesGetTableThroughputCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the RUs per second of the Table under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ThroughputSettingsGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Table was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ThroughputSettingsGetResults tableResourcesGetTableThroughput(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion) throws ApiException {
        ApiResponse<ThroughputSettingsGetResults> localVarResp = tableResourcesGetTableThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, tableName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the RUs per second of the Table under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;ThroughputSettingsGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Table was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ThroughputSettingsGetResults> tableResourcesGetTableThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = tableResourcesGetTableThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the RUs per second of the Table under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Table was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tableResourcesGetTableThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, final ApiCallback<ThroughputSettingsGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = tableResourcesGetTableThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tableResourcesListTables
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Table properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tableResourcesListTablesCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tableResourcesListTablesValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tableResourcesListTables(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling tableResourcesListTables(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling tableResourcesListTables(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tableResourcesListTables(Async)");
        }

        return tableResourcesListTablesCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the Tables under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return TableListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Table properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public TableListResult tableResourcesListTables(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        ApiResponse<TableListResult> localVarResp = tableResourcesListTablesWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the Tables under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @return ApiResponse&lt;TableListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Table properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableListResult> tableResourcesListTablesWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = tableResourcesListTablesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<TableListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the Tables under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Table properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tableResourcesListTablesAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<TableListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = tableResourcesListTablesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<TableListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tableResourcesUpdateTableThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current Table. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Table update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Table update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tableResourcesUpdateTableThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateThroughputParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}/throughputSettings/default"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tableResourcesUpdateTableThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tableResourcesUpdateTableThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling tableResourcesUpdateTableThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling tableResourcesUpdateTableThroughput(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling tableResourcesUpdateTableThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tableResourcesUpdateTableThroughput(Async)");
        }

        // verify the required parameter 'updateThroughputParameters' is set
        if (updateThroughputParameters == null) {
            throw new ApiException("Missing the required parameter 'updateThroughputParameters' when calling tableResourcesUpdateTableThroughput(Async)");
        }

        return tableResourcesUpdateTableThroughputCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, updateThroughputParameters, _callback);

    }

    /**
     * 
     * Update RUs per second of an Azure Cosmos DB Table
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current Table. (required)
     * @return ThroughputSettingsGetResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Table update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Table update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ThroughputSettingsGetResults tableResourcesUpdateTableThroughput(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters) throws ApiException {
        ApiResponse<ThroughputSettingsGetResults> localVarResp = tableResourcesUpdateTableThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, updateThroughputParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update RUs per second of an Azure Cosmos DB Table
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current Table. (required)
     * @return ApiResponse&lt;ThroughputSettingsGetResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Table update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Table update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ThroughputSettingsGetResults> tableResourcesUpdateTableThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters) throws ApiException {
        okhttp3.Call localVarCall = tableResourcesUpdateTableThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, updateThroughputParameters, null);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update RUs per second of an Azure Cosmos DB Table
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-08-01. (required)
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current Table. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Table update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Table update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tableResourcesUpdateTableThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, ThroughputSettingsUpdateParameters updateThroughputParameters, final ApiCallback<ThroughputSettingsGetResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = tableResourcesUpdateTableThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, updateThroughputParameters, _callback);
        Type localVarReturnType = new TypeToken<ThroughputSettingsGetResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
