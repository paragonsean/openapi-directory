# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CompositePath(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, order: str=None, path: str=None):
        """CompositePath - a model defined in OpenAPI

        :param order: The order of this CompositePath.
        :param path: The path of this CompositePath.
        """
        self.openapi_types = {
            'order': str,
            'path': str
        }

        self.attribute_map = {
            'order': 'order',
            'path': 'path'
        }

        self._order = order
        self._path = path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompositePath':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompositePath of this CompositePath.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def order(self):
        """Gets the order of this CompositePath.

        Sort order for composite paths.

        :return: The order of this CompositePath.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this CompositePath.

        Sort order for composite paths.

        :param order: The order of this CompositePath.
        :type order: str
        """
        allowed_values = ["Ascending", "Descending"]  # noqa: E501
        if order not in allowed_values:
            raise ValueError(
                "Invalid value for `order` ({0}), must be one of {1}"
                .format(order, allowed_values)
            )

        self._order = order

    @property
    def path(self):
        """Gets the path of this CompositePath.

        The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)

        :return: The path of this CompositePath.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this CompositePath.

        The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)

        :param path: The path of this CompositePath.
        :type path: str
        """

        self._path = path
