# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VirtualNetworkRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, ignore_missing_v_net_service_endpoint: bool=None):
        """VirtualNetworkRule - a model defined in OpenAPI

        :param id: The id of this VirtualNetworkRule.
        :param ignore_missing_v_net_service_endpoint: The ignore_missing_v_net_service_endpoint of this VirtualNetworkRule.
        """
        self.openapi_types = {
            'id': str,
            'ignore_missing_v_net_service_endpoint': bool
        }

        self.attribute_map = {
            'id': 'id',
            'ignore_missing_v_net_service_endpoint': 'ignoreMissingVNetServiceEndpoint'
        }

        self._id = id
        self._ignore_missing_v_net_service_endpoint = ignore_missing_v_net_service_endpoint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualNetworkRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualNetworkRule of this VirtualNetworkRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this VirtualNetworkRule.

        Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.

        :return: The id of this VirtualNetworkRule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VirtualNetworkRule.

        Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.

        :param id: The id of this VirtualNetworkRule.
        :type id: str
        """

        self._id = id

    @property
    def ignore_missing_v_net_service_endpoint(self):
        """Gets the ignore_missing_v_net_service_endpoint of this VirtualNetworkRule.

        Create firewall rule before the virtual network has vnet service endpoint enabled.

        :return: The ignore_missing_v_net_service_endpoint of this VirtualNetworkRule.
        :rtype: bool
        """
        return self._ignore_missing_v_net_service_endpoint

    @ignore_missing_v_net_service_endpoint.setter
    def ignore_missing_v_net_service_endpoint(self, ignore_missing_v_net_service_endpoint):
        """Sets the ignore_missing_v_net_service_endpoint of this VirtualNetworkRule.

        Create firewall rule before the virtual network has vnet service endpoint enabled.

        :param ignore_missing_v_net_service_endpoint: The ignore_missing_v_net_service_endpoint of this VirtualNetworkRule.
        :type ignore_missing_v_net_service_endpoint: bool
        """

        self._ignore_missing_v_net_service_endpoint = ignore_missing_v_net_service_endpoint
