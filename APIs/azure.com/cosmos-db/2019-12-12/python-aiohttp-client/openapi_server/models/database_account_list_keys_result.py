# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatabaseAccountListKeysResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, primary_master_key: str=None, secondary_master_key: str=None, primary_readonly_master_key: str=None, secondary_readonly_master_key: str=None):
        """DatabaseAccountListKeysResult - a model defined in OpenAPI

        :param primary_master_key: The primary_master_key of this DatabaseAccountListKeysResult.
        :param secondary_master_key: The secondary_master_key of this DatabaseAccountListKeysResult.
        :param primary_readonly_master_key: The primary_readonly_master_key of this DatabaseAccountListKeysResult.
        :param secondary_readonly_master_key: The secondary_readonly_master_key of this DatabaseAccountListKeysResult.
        """
        self.openapi_types = {
            'primary_master_key': str,
            'secondary_master_key': str,
            'primary_readonly_master_key': str,
            'secondary_readonly_master_key': str
        }

        self.attribute_map = {
            'primary_master_key': 'primaryMasterKey',
            'secondary_master_key': 'secondaryMasterKey',
            'primary_readonly_master_key': 'primaryReadonlyMasterKey',
            'secondary_readonly_master_key': 'secondaryReadonlyMasterKey'
        }

        self._primary_master_key = primary_master_key
        self._secondary_master_key = secondary_master_key
        self._primary_readonly_master_key = primary_readonly_master_key
        self._secondary_readonly_master_key = secondary_readonly_master_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseAccountListKeysResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseAccountListKeysResult of this DatabaseAccountListKeysResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def primary_master_key(self):
        """Gets the primary_master_key of this DatabaseAccountListKeysResult.

        Base 64 encoded value of the primary read-write key.

        :return: The primary_master_key of this DatabaseAccountListKeysResult.
        :rtype: str
        """
        return self._primary_master_key

    @primary_master_key.setter
    def primary_master_key(self, primary_master_key):
        """Sets the primary_master_key of this DatabaseAccountListKeysResult.

        Base 64 encoded value of the primary read-write key.

        :param primary_master_key: The primary_master_key of this DatabaseAccountListKeysResult.
        :type primary_master_key: str
        """

        self._primary_master_key = primary_master_key

    @property
    def secondary_master_key(self):
        """Gets the secondary_master_key of this DatabaseAccountListKeysResult.

        Base 64 encoded value of the secondary read-write key.

        :return: The secondary_master_key of this DatabaseAccountListKeysResult.
        :rtype: str
        """
        return self._secondary_master_key

    @secondary_master_key.setter
    def secondary_master_key(self, secondary_master_key):
        """Sets the secondary_master_key of this DatabaseAccountListKeysResult.

        Base 64 encoded value of the secondary read-write key.

        :param secondary_master_key: The secondary_master_key of this DatabaseAccountListKeysResult.
        :type secondary_master_key: str
        """

        self._secondary_master_key = secondary_master_key

    @property
    def primary_readonly_master_key(self):
        """Gets the primary_readonly_master_key of this DatabaseAccountListKeysResult.

        Base 64 encoded value of the primary read-only key.

        :return: The primary_readonly_master_key of this DatabaseAccountListKeysResult.
        :rtype: str
        """
        return self._primary_readonly_master_key

    @primary_readonly_master_key.setter
    def primary_readonly_master_key(self, primary_readonly_master_key):
        """Sets the primary_readonly_master_key of this DatabaseAccountListKeysResult.

        Base 64 encoded value of the primary read-only key.

        :param primary_readonly_master_key: The primary_readonly_master_key of this DatabaseAccountListKeysResult.
        :type primary_readonly_master_key: str
        """

        self._primary_readonly_master_key = primary_readonly_master_key

    @property
    def secondary_readonly_master_key(self):
        """Gets the secondary_readonly_master_key of this DatabaseAccountListKeysResult.

        Base 64 encoded value of the secondary read-only key.

        :return: The secondary_readonly_master_key of this DatabaseAccountListKeysResult.
        :rtype: str
        """
        return self._secondary_readonly_master_key

    @secondary_readonly_master_key.setter
    def secondary_readonly_master_key(self, secondary_readonly_master_key):
        """Sets the secondary_readonly_master_key of this DatabaseAccountListKeysResult.

        Base 64 encoded value of the secondary read-only key.

        :param secondary_readonly_master_key: The secondary_readonly_master_key of this DatabaseAccountListKeysResult.
        :type secondary_readonly_master_key: str
        """

        self._secondary_readonly_master_key = secondary_readonly_master_key
