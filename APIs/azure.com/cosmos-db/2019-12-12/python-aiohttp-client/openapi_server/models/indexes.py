# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Indexes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_type: str='String', kind: str='Hash', precision: int=None):
        """Indexes - a model defined in OpenAPI

        :param data_type: The data_type of this Indexes.
        :param kind: The kind of this Indexes.
        :param precision: The precision of this Indexes.
        """
        self.openapi_types = {
            'data_type': str,
            'kind': str,
            'precision': int
        }

        self.attribute_map = {
            'data_type': 'dataType',
            'kind': 'kind',
            'precision': 'precision'
        }

        self._data_type = data_type
        self._kind = kind
        self._precision = precision

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Indexes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Indexes of this Indexes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_type(self):
        """Gets the data_type of this Indexes.

        The datatype for which the indexing behavior is applied to.

        :return: The data_type of this Indexes.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this Indexes.

        The datatype for which the indexing behavior is applied to.

        :param data_type: The data_type of this Indexes.
        :type data_type: str
        """
        allowed_values = ["String", "Number", "Point", "Polygon", "LineString", "MultiPolygon"]  # noqa: E501
        if data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_type` ({0}), must be one of {1}"
                .format(data_type, allowed_values)
            )

        self._data_type = data_type

    @property
    def kind(self):
        """Gets the kind of this Indexes.

        Indicates the type of index.

        :return: The kind of this Indexes.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Indexes.

        Indicates the type of index.

        :param kind: The kind of this Indexes.
        :type kind: str
        """
        allowed_values = ["Hash", "Range", "Spatial"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def precision(self):
        """Gets the precision of this Indexes.

        The precision of the index. -1 is maximum precision.

        :return: The precision of this Indexes.
        :rtype: int
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this Indexes.

        The precision of the index. -1 is maximum precision.

        :param precision: The precision of this Indexes.
        :type precision: int
        """

        self._precision = precision
