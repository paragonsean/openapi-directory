/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2019-12-12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Capability from './Capability';
import ConnectorOffer from './ConnectorOffer';
import ConsistencyPolicy from './ConsistencyPolicy';
import DatabaseAccountOfferType from './DatabaseAccountOfferType';
import FailoverPolicy from './FailoverPolicy';
import Location from './Location';
import VirtualNetworkRule from './VirtualNetworkRule';

/**
 * The DatabaseAccountGetProperties model module.
 * @module model/DatabaseAccountGetProperties
 * @version 2019-12-12
 */
class DatabaseAccountGetProperties {
    /**
     * Constructs a new <code>DatabaseAccountGetProperties</code>.
     * Properties for the database account.
     * @alias module:model/DatabaseAccountGetProperties
     */
    constructor() { 
        
        DatabaseAccountGetProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DatabaseAccountGetProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatabaseAccountGetProperties} obj Optional instance to populate.
     * @return {module:model/DatabaseAccountGetProperties} The populated <code>DatabaseAccountGetProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatabaseAccountGetProperties();

            if (data.hasOwnProperty('capabilities')) {
                obj['capabilities'] = ApiClient.convertToType(data['capabilities'], [Capability]);
            }
            if (data.hasOwnProperty('connectorOffer')) {
                obj['connectorOffer'] = ConnectorOffer.constructFromObject(data['connectorOffer']);
            }
            if (data.hasOwnProperty('consistencyPolicy')) {
                obj['consistencyPolicy'] = ConsistencyPolicy.constructFromObject(data['consistencyPolicy']);
            }
            if (data.hasOwnProperty('databaseAccountOfferType')) {
                obj['databaseAccountOfferType'] = DatabaseAccountOfferType.constructFromObject(data['databaseAccountOfferType']);
            }
            if (data.hasOwnProperty('disableKeyBasedMetadataWriteAccess')) {
                obj['disableKeyBasedMetadataWriteAccess'] = ApiClient.convertToType(data['disableKeyBasedMetadataWriteAccess'], 'Boolean');
            }
            if (data.hasOwnProperty('documentEndpoint')) {
                obj['documentEndpoint'] = ApiClient.convertToType(data['documentEndpoint'], 'String');
            }
            if (data.hasOwnProperty('enableAutomaticFailover')) {
                obj['enableAutomaticFailover'] = ApiClient.convertToType(data['enableAutomaticFailover'], 'Boolean');
            }
            if (data.hasOwnProperty('enableCassandraConnector')) {
                obj['enableCassandraConnector'] = ApiClient.convertToType(data['enableCassandraConnector'], 'Boolean');
            }
            if (data.hasOwnProperty('enableMultipleWriteLocations')) {
                obj['enableMultipleWriteLocations'] = ApiClient.convertToType(data['enableMultipleWriteLocations'], 'Boolean');
            }
            if (data.hasOwnProperty('failoverPolicies')) {
                obj['failoverPolicies'] = ApiClient.convertToType(data['failoverPolicies'], [FailoverPolicy]);
            }
            if (data.hasOwnProperty('ipRangeFilter')) {
                obj['ipRangeFilter'] = ApiClient.convertToType(data['ipRangeFilter'], 'String');
            }
            if (data.hasOwnProperty('isVirtualNetworkFilterEnabled')) {
                obj['isVirtualNetworkFilterEnabled'] = ApiClient.convertToType(data['isVirtualNetworkFilterEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('keyVaultKeyUri')) {
                obj['keyVaultKeyUri'] = ApiClient.convertToType(data['keyVaultKeyUri'], 'String');
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], [Location]);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('readLocations')) {
                obj['readLocations'] = ApiClient.convertToType(data['readLocations'], [Location]);
            }
            if (data.hasOwnProperty('virtualNetworkRules')) {
                obj['virtualNetworkRules'] = ApiClient.convertToType(data['virtualNetworkRules'], [VirtualNetworkRule]);
            }
            if (data.hasOwnProperty('writeLocations')) {
                obj['writeLocations'] = ApiClient.convertToType(data['writeLocations'], [Location]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatabaseAccountGetProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatabaseAccountGetProperties</code>.
     */
    static validateJSON(data) {
        if (data['capabilities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['capabilities'])) {
                throw new Error("Expected the field `capabilities` to be an array in the JSON data but got " + data['capabilities']);
            }
            // validate the optional field `capabilities` (array)
            for (const item of data['capabilities']) {
                Capability.validateJSON(item);
            };
        }
        // validate the optional field `consistencyPolicy`
        if (data['consistencyPolicy']) { // data not null
          ConsistencyPolicy.validateJSON(data['consistencyPolicy']);
        }
        // ensure the json data is a string
        if (data['documentEndpoint'] && !(typeof data['documentEndpoint'] === 'string' || data['documentEndpoint'] instanceof String)) {
            throw new Error("Expected the field `documentEndpoint` to be a primitive type in the JSON string but got " + data['documentEndpoint']);
        }
        if (data['failoverPolicies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['failoverPolicies'])) {
                throw new Error("Expected the field `failoverPolicies` to be an array in the JSON data but got " + data['failoverPolicies']);
            }
            // validate the optional field `failoverPolicies` (array)
            for (const item of data['failoverPolicies']) {
                FailoverPolicy.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ipRangeFilter'] && !(typeof data['ipRangeFilter'] === 'string' || data['ipRangeFilter'] instanceof String)) {
            throw new Error("Expected the field `ipRangeFilter` to be a primitive type in the JSON string but got " + data['ipRangeFilter']);
        }
        // ensure the json data is a string
        if (data['keyVaultKeyUri'] && !(typeof data['keyVaultKeyUri'] === 'string' || data['keyVaultKeyUri'] instanceof String)) {
            throw new Error("Expected the field `keyVaultKeyUri` to be a primitive type in the JSON string but got " + data['keyVaultKeyUri']);
        }
        if (data['locations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['locations'])) {
                throw new Error("Expected the field `locations` to be an array in the JSON data but got " + data['locations']);
            }
            // validate the optional field `locations` (array)
            for (const item of data['locations']) {
                Location.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        if (data['readLocations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['readLocations'])) {
                throw new Error("Expected the field `readLocations` to be an array in the JSON data but got " + data['readLocations']);
            }
            // validate the optional field `readLocations` (array)
            for (const item of data['readLocations']) {
                Location.validateJSON(item);
            };
        }
        if (data['virtualNetworkRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['virtualNetworkRules'])) {
                throw new Error("Expected the field `virtualNetworkRules` to be an array in the JSON data but got " + data['virtualNetworkRules']);
            }
            // validate the optional field `virtualNetworkRules` (array)
            for (const item of data['virtualNetworkRules']) {
                VirtualNetworkRule.validateJSON(item);
            };
        }
        if (data['writeLocations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['writeLocations'])) {
                throw new Error("Expected the field `writeLocations` to be an array in the JSON data but got " + data['writeLocations']);
            }
            // validate the optional field `writeLocations` (array)
            for (const item of data['writeLocations']) {
                Location.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * List of Cosmos DB capabilities for the account
 * @member {Array.<module:model/Capability>} capabilities
 */
DatabaseAccountGetProperties.prototype['capabilities'] = undefined;

/**
 * @member {module:model/ConnectorOffer} connectorOffer
 */
DatabaseAccountGetProperties.prototype['connectorOffer'] = undefined;

/**
 * @member {module:model/ConsistencyPolicy} consistencyPolicy
 */
DatabaseAccountGetProperties.prototype['consistencyPolicy'] = undefined;

/**
 * @member {module:model/DatabaseAccountOfferType} databaseAccountOfferType
 */
DatabaseAccountGetProperties.prototype['databaseAccountOfferType'] = undefined;

/**
 * Disable write operations on metadata resources (databases, containers, throughput) via account keys
 * @member {Boolean} disableKeyBasedMetadataWriteAccess
 */
DatabaseAccountGetProperties.prototype['disableKeyBasedMetadataWriteAccess'] = undefined;

/**
 * The connection endpoint for the Cosmos DB database account.
 * @member {String} documentEndpoint
 */
DatabaseAccountGetProperties.prototype['documentEndpoint'] = undefined;

/**
 * Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.
 * @member {Boolean} enableAutomaticFailover
 */
DatabaseAccountGetProperties.prototype['enableAutomaticFailover'] = undefined;

/**
 * Enables the cassandra connector on the Cosmos DB C* account
 * @member {Boolean} enableCassandraConnector
 */
DatabaseAccountGetProperties.prototype['enableCassandraConnector'] = undefined;

/**
 * Enables the account to write in multiple locations
 * @member {Boolean} enableMultipleWriteLocations
 */
DatabaseAccountGetProperties.prototype['enableMultipleWriteLocations'] = undefined;

/**
 * An array that contains the regions ordered by their failover priorities.
 * @member {Array.<module:model/FailoverPolicy>} failoverPolicies
 */
DatabaseAccountGetProperties.prototype['failoverPolicies'] = undefined;

/**
 * Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.
 * @member {String} ipRangeFilter
 */
DatabaseAccountGetProperties.prototype['ipRangeFilter'] = undefined;

/**
 * Flag to indicate whether to enable/disable Virtual Network ACL rules.
 * @member {Boolean} isVirtualNetworkFilterEnabled
 */
DatabaseAccountGetProperties.prototype['isVirtualNetworkFilterEnabled'] = undefined;

/**
 * The URI of the key vault
 * @member {String} keyVaultKeyUri
 */
DatabaseAccountGetProperties.prototype['keyVaultKeyUri'] = undefined;

/**
 * An array that contains all of the locations enabled for the Cosmos DB account.
 * @member {Array.<module:model/Location>} locations
 */
DatabaseAccountGetProperties.prototype['locations'] = undefined;

/**
 * The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation.
 * @member {String} provisioningState
 */
DatabaseAccountGetProperties.prototype['provisioningState'] = undefined;

/**
 * An array that contains of the read locations enabled for the Cosmos DB account.
 * @member {Array.<module:model/Location>} readLocations
 */
DatabaseAccountGetProperties.prototype['readLocations'] = undefined;

/**
 * List of Virtual Network ACL rules configured for the Cosmos DB account.
 * @member {Array.<module:model/VirtualNetworkRule>} virtualNetworkRules
 */
DatabaseAccountGetProperties.prototype['virtualNetworkRules'] = undefined;

/**
 * An array that contains the write location for the Cosmos DB account.
 * @member {Array.<module:model/Location>} writeLocations
 */
DatabaseAccountGetProperties.prototype['writeLocations'] = undefined;






export default DatabaseAccountGetProperties;

