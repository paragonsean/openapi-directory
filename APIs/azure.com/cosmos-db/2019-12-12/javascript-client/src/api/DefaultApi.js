/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2019-12-12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CassandraKeyspaceCreateUpdateParameters from '../model/CassandraKeyspaceCreateUpdateParameters';
import CassandraKeyspaceGetResults from '../model/CassandraKeyspaceGetResults';
import CassandraKeyspaceListResult from '../model/CassandraKeyspaceListResult';
import CassandraTableCreateUpdateParameters from '../model/CassandraTableCreateUpdateParameters';
import CassandraTableGetResults from '../model/CassandraTableGetResults';
import CassandraTableListResult from '../model/CassandraTableListResult';
import DatabaseAccountCreateUpdateParameters from '../model/DatabaseAccountCreateUpdateParameters';
import DatabaseAccountGetResults from '../model/DatabaseAccountGetResults';
import DatabaseAccountListConnectionStringsResult from '../model/DatabaseAccountListConnectionStringsResult';
import DatabaseAccountListKeysResult from '../model/DatabaseAccountListKeysResult';
import DatabaseAccountListReadOnlyKeysResult from '../model/DatabaseAccountListReadOnlyKeysResult';
import DatabaseAccountRegenerateKeyParameters from '../model/DatabaseAccountRegenerateKeyParameters';
import DatabaseAccountUpdateParameters from '../model/DatabaseAccountUpdateParameters';
import DatabaseAccountsListResult from '../model/DatabaseAccountsListResult';
import ErrorResponse from '../model/ErrorResponse';
import FailoverPolicies from '../model/FailoverPolicies';
import GremlinDatabaseCreateUpdateParameters from '../model/GremlinDatabaseCreateUpdateParameters';
import GremlinDatabaseGetResults from '../model/GremlinDatabaseGetResults';
import GremlinDatabaseListResult from '../model/GremlinDatabaseListResult';
import GremlinGraphCreateUpdateParameters from '../model/GremlinGraphCreateUpdateParameters';
import GremlinGraphGetResults from '../model/GremlinGraphGetResults';
import GremlinGraphListResult from '../model/GremlinGraphListResult';
import MetricDefinitionsListResult from '../model/MetricDefinitionsListResult';
import MetricListResult from '../model/MetricListResult';
import MongoDBCollectionCreateUpdateParameters from '../model/MongoDBCollectionCreateUpdateParameters';
import MongoDBCollectionGetResults from '../model/MongoDBCollectionGetResults';
import MongoDBCollectionListResult from '../model/MongoDBCollectionListResult';
import MongoDBDatabaseCreateUpdateParameters from '../model/MongoDBDatabaseCreateUpdateParameters';
import MongoDBDatabaseGetResults from '../model/MongoDBDatabaseGetResults';
import MongoDBDatabaseListResult from '../model/MongoDBDatabaseListResult';
import PartitionMetricListResult from '../model/PartitionMetricListResult';
import PartitionUsagesResult from '../model/PartitionUsagesResult';
import PercentileMetricListResult from '../model/PercentileMetricListResult';
import RegionForOnlineOffline from '../model/RegionForOnlineOffline';
import SqlContainerCreateUpdateParameters from '../model/SqlContainerCreateUpdateParameters';
import SqlContainerGetResults from '../model/SqlContainerGetResults';
import SqlContainerListResult from '../model/SqlContainerListResult';
import SqlDatabaseCreateUpdateParameters from '../model/SqlDatabaseCreateUpdateParameters';
import SqlDatabaseGetResults from '../model/SqlDatabaseGetResults';
import SqlDatabaseListResult from '../model/SqlDatabaseListResult';
import SqlStoredProcedureCreateUpdateParameters from '../model/SqlStoredProcedureCreateUpdateParameters';
import SqlStoredProcedureGetResults from '../model/SqlStoredProcedureGetResults';
import SqlStoredProcedureListResult from '../model/SqlStoredProcedureListResult';
import SqlTriggerCreateUpdateParameters from '../model/SqlTriggerCreateUpdateParameters';
import SqlTriggerGetResults from '../model/SqlTriggerGetResults';
import SqlTriggerListResult from '../model/SqlTriggerListResult';
import SqlUserDefinedFunctionCreateUpdateParameters from '../model/SqlUserDefinedFunctionCreateUpdateParameters';
import SqlUserDefinedFunctionGetResults from '../model/SqlUserDefinedFunctionGetResults';
import SqlUserDefinedFunctionListResult from '../model/SqlUserDefinedFunctionListResult';
import TableCreateUpdateParameters from '../model/TableCreateUpdateParameters';
import TableGetResults from '../model/TableGetResults';
import TableListResult from '../model/TableListResult';
import ThroughputSettingsGetResults from '../model/ThroughputSettingsGetResults';
import ThroughputSettingsUpdateParameters from '../model/ThroughputSettingsUpdateParameters';
import UsagesResult from '../model/UsagesResult';

/**
* Default service.
* @module api/DefaultApi
* @version 2019-12-12
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cassandraResourcesCreateUpdateCassandraKeyspace operation.
     * @callback module:api/DefaultApi~cassandraResourcesCreateUpdateCassandraKeyspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CassandraKeyspaceGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an Azure Cosmos DB Cassandra keyspace
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} keyspaceName Cosmos DB keyspace name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:model/CassandraKeyspaceCreateUpdateParameters} createUpdateCassandraKeyspaceParameters The parameters to provide for the current Cassandra keyspace.
     * @param {module:api/DefaultApi~cassandraResourcesCreateUpdateCassandraKeyspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CassandraKeyspaceGetResults}
     */
    cassandraResourcesCreateUpdateCassandraKeyspace(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, createUpdateCassandraKeyspaceParameters, callback) {
      let postBody = createUpdateCassandraKeyspaceParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling cassandraResourcesCreateUpdateCassandraKeyspace");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling cassandraResourcesCreateUpdateCassandraKeyspace");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling cassandraResourcesCreateUpdateCassandraKeyspace");
      }
      // verify the required parameter 'keyspaceName' is set
      if (keyspaceName === undefined || keyspaceName === null) {
        throw new Error("Missing the required parameter 'keyspaceName' when calling cassandraResourcesCreateUpdateCassandraKeyspace");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling cassandraResourcesCreateUpdateCassandraKeyspace");
      }
      // verify the required parameter 'createUpdateCassandraKeyspaceParameters' is set
      if (createUpdateCassandraKeyspaceParameters === undefined || createUpdateCassandraKeyspaceParameters === null) {
        throw new Error("Missing the required parameter 'createUpdateCassandraKeyspaceParameters' when calling cassandraResourcesCreateUpdateCassandraKeyspace");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'keyspaceName': keyspaceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CassandraKeyspaceGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cassandraResourcesCreateUpdateCassandraTable operation.
     * @callback module:api/DefaultApi~cassandraResourcesCreateUpdateCassandraTableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CassandraTableGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an Azure Cosmos DB Cassandra Table
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} keyspaceName Cosmos DB keyspace name.
     * @param {String} tableName Cosmos DB table name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:model/CassandraTableCreateUpdateParameters} createUpdateCassandraTableParameters The parameters to provide for the current Cassandra Table.
     * @param {module:api/DefaultApi~cassandraResourcesCreateUpdateCassandraTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CassandraTableGetResults}
     */
    cassandraResourcesCreateUpdateCassandraTable(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, createUpdateCassandraTableParameters, callback) {
      let postBody = createUpdateCassandraTableParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling cassandraResourcesCreateUpdateCassandraTable");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling cassandraResourcesCreateUpdateCassandraTable");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling cassandraResourcesCreateUpdateCassandraTable");
      }
      // verify the required parameter 'keyspaceName' is set
      if (keyspaceName === undefined || keyspaceName === null) {
        throw new Error("Missing the required parameter 'keyspaceName' when calling cassandraResourcesCreateUpdateCassandraTable");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling cassandraResourcesCreateUpdateCassandraTable");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling cassandraResourcesCreateUpdateCassandraTable");
      }
      // verify the required parameter 'createUpdateCassandraTableParameters' is set
      if (createUpdateCassandraTableParameters === undefined || createUpdateCassandraTableParameters === null) {
        throw new Error("Missing the required parameter 'createUpdateCassandraTableParameters' when calling cassandraResourcesCreateUpdateCassandraTable");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'keyspaceName': keyspaceName,
        'tableName': tableName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CassandraTableGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cassandraResourcesDeleteCassandraKeyspace operation.
     * @callback module:api/DefaultApi~cassandraResourcesDeleteCassandraKeyspaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Azure Cosmos DB Cassandra keyspace.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} keyspaceName Cosmos DB keyspace name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~cassandraResourcesDeleteCassandraKeyspaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cassandraResourcesDeleteCassandraKeyspace(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling cassandraResourcesDeleteCassandraKeyspace");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling cassandraResourcesDeleteCassandraKeyspace");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling cassandraResourcesDeleteCassandraKeyspace");
      }
      // verify the required parameter 'keyspaceName' is set
      if (keyspaceName === undefined || keyspaceName === null) {
        throw new Error("Missing the required parameter 'keyspaceName' when calling cassandraResourcesDeleteCassandraKeyspace");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling cassandraResourcesDeleteCassandraKeyspace");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'keyspaceName': keyspaceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cassandraResourcesDeleteCassandraTable operation.
     * @callback module:api/DefaultApi~cassandraResourcesDeleteCassandraTableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Azure Cosmos DB Cassandra table.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} keyspaceName Cosmos DB keyspace name.
     * @param {String} tableName Cosmos DB table name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~cassandraResourcesDeleteCassandraTableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cassandraResourcesDeleteCassandraTable(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling cassandraResourcesDeleteCassandraTable");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling cassandraResourcesDeleteCassandraTable");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling cassandraResourcesDeleteCassandraTable");
      }
      // verify the required parameter 'keyspaceName' is set
      if (keyspaceName === undefined || keyspaceName === null) {
        throw new Error("Missing the required parameter 'keyspaceName' when calling cassandraResourcesDeleteCassandraTable");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling cassandraResourcesDeleteCassandraTable");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling cassandraResourcesDeleteCassandraTable");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'keyspaceName': keyspaceName,
        'tableName': tableName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cassandraResourcesGetCassandraKeyspace operation.
     * @callback module:api/DefaultApi~cassandraResourcesGetCassandraKeyspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CassandraKeyspaceGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Cassandra keyspaces under an existing Azure Cosmos DB database account with the provided name.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} keyspaceName Cosmos DB keyspace name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~cassandraResourcesGetCassandraKeyspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CassandraKeyspaceGetResults}
     */
    cassandraResourcesGetCassandraKeyspace(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling cassandraResourcesGetCassandraKeyspace");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling cassandraResourcesGetCassandraKeyspace");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling cassandraResourcesGetCassandraKeyspace");
      }
      // verify the required parameter 'keyspaceName' is set
      if (keyspaceName === undefined || keyspaceName === null) {
        throw new Error("Missing the required parameter 'keyspaceName' when calling cassandraResourcesGetCassandraKeyspace");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling cassandraResourcesGetCassandraKeyspace");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'keyspaceName': keyspaceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CassandraKeyspaceGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cassandraResourcesGetCassandraKeyspaceThroughput operation.
     * @callback module:api/DefaultApi~cassandraResourcesGetCassandraKeyspaceThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThroughputSettingsGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the RUs per second of the Cassandra Keyspace under an existing Azure Cosmos DB database account with the provided name.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} keyspaceName Cosmos DB keyspace name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~cassandraResourcesGetCassandraKeyspaceThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThroughputSettingsGetResults}
     */
    cassandraResourcesGetCassandraKeyspaceThroughput(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling cassandraResourcesGetCassandraKeyspaceThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling cassandraResourcesGetCassandraKeyspaceThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling cassandraResourcesGetCassandraKeyspaceThroughput");
      }
      // verify the required parameter 'keyspaceName' is set
      if (keyspaceName === undefined || keyspaceName === null) {
        throw new Error("Missing the required parameter 'keyspaceName' when calling cassandraResourcesGetCassandraKeyspaceThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling cassandraResourcesGetCassandraKeyspaceThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'keyspaceName': keyspaceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ThroughputSettingsGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/throughputSettings/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cassandraResourcesGetCassandraTable operation.
     * @callback module:api/DefaultApi~cassandraResourcesGetCassandraTableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CassandraTableGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Cassandra table under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} keyspaceName Cosmos DB keyspace name.
     * @param {String} tableName Cosmos DB table name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~cassandraResourcesGetCassandraTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CassandraTableGetResults}
     */
    cassandraResourcesGetCassandraTable(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling cassandraResourcesGetCassandraTable");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling cassandraResourcesGetCassandraTable");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling cassandraResourcesGetCassandraTable");
      }
      // verify the required parameter 'keyspaceName' is set
      if (keyspaceName === undefined || keyspaceName === null) {
        throw new Error("Missing the required parameter 'keyspaceName' when calling cassandraResourcesGetCassandraTable");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling cassandraResourcesGetCassandraTable");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling cassandraResourcesGetCassandraTable");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'keyspaceName': keyspaceName,
        'tableName': tableName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CassandraTableGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cassandraResourcesGetCassandraTableThroughput operation.
     * @callback module:api/DefaultApi~cassandraResourcesGetCassandraTableThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThroughputSettingsGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the RUs per second of the Cassandra table under an existing Azure Cosmos DB database account with the provided name.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} keyspaceName Cosmos DB keyspace name.
     * @param {String} tableName Cosmos DB table name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~cassandraResourcesGetCassandraTableThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThroughputSettingsGetResults}
     */
    cassandraResourcesGetCassandraTableThroughput(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling cassandraResourcesGetCassandraTableThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling cassandraResourcesGetCassandraTableThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling cassandraResourcesGetCassandraTableThroughput");
      }
      // verify the required parameter 'keyspaceName' is set
      if (keyspaceName === undefined || keyspaceName === null) {
        throw new Error("Missing the required parameter 'keyspaceName' when calling cassandraResourcesGetCassandraTableThroughput");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling cassandraResourcesGetCassandraTableThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling cassandraResourcesGetCassandraTableThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'keyspaceName': keyspaceName,
        'tableName': tableName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ThroughputSettingsGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}/throughputSettings/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cassandraResourcesListCassandraKeyspaces operation.
     * @callback module:api/DefaultApi~cassandraResourcesListCassandraKeyspacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CassandraKeyspaceListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~cassandraResourcesListCassandraKeyspacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CassandraKeyspaceListResult}
     */
    cassandraResourcesListCassandraKeyspaces(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling cassandraResourcesListCassandraKeyspaces");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling cassandraResourcesListCassandraKeyspaces");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling cassandraResourcesListCassandraKeyspaces");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling cassandraResourcesListCassandraKeyspaces");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CassandraKeyspaceListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cassandraResourcesListCassandraTables operation.
     * @callback module:api/DefaultApi~cassandraResourcesListCassandraTablesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CassandraTableListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the Cassandra table under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} keyspaceName Cosmos DB keyspace name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~cassandraResourcesListCassandraTablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CassandraTableListResult}
     */
    cassandraResourcesListCassandraTables(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling cassandraResourcesListCassandraTables");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling cassandraResourcesListCassandraTables");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling cassandraResourcesListCassandraTables");
      }
      // verify the required parameter 'keyspaceName' is set
      if (keyspaceName === undefined || keyspaceName === null) {
        throw new Error("Missing the required parameter 'keyspaceName' when calling cassandraResourcesListCassandraTables");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling cassandraResourcesListCassandraTables");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'keyspaceName': keyspaceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CassandraTableListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cassandraResourcesUpdateCassandraKeyspaceThroughput operation.
     * @callback module:api/DefaultApi~cassandraResourcesUpdateCassandraKeyspaceThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThroughputSettingsGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update RUs per second of an Azure Cosmos DB Cassandra Keyspace
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} keyspaceName Cosmos DB keyspace name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:model/ThroughputSettingsUpdateParameters} updateThroughputParameters The RUs per second of the parameters to provide for the current Cassandra Keyspace.
     * @param {module:api/DefaultApi~cassandraResourcesUpdateCassandraKeyspaceThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThroughputSettingsGetResults}
     */
    cassandraResourcesUpdateCassandraKeyspaceThroughput(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, updateThroughputParameters, callback) {
      let postBody = updateThroughputParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling cassandraResourcesUpdateCassandraKeyspaceThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling cassandraResourcesUpdateCassandraKeyspaceThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling cassandraResourcesUpdateCassandraKeyspaceThroughput");
      }
      // verify the required parameter 'keyspaceName' is set
      if (keyspaceName === undefined || keyspaceName === null) {
        throw new Error("Missing the required parameter 'keyspaceName' when calling cassandraResourcesUpdateCassandraKeyspaceThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling cassandraResourcesUpdateCassandraKeyspaceThroughput");
      }
      // verify the required parameter 'updateThroughputParameters' is set
      if (updateThroughputParameters === undefined || updateThroughputParameters === null) {
        throw new Error("Missing the required parameter 'updateThroughputParameters' when calling cassandraResourcesUpdateCassandraKeyspaceThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'keyspaceName': keyspaceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ThroughputSettingsGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/throughputSettings/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cassandraResourcesUpdateCassandraTableThroughput operation.
     * @callback module:api/DefaultApi~cassandraResourcesUpdateCassandraTableThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThroughputSettingsGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update RUs per second of an Azure Cosmos DB Cassandra table
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} keyspaceName Cosmos DB keyspace name.
     * @param {String} tableName Cosmos DB table name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:model/ThroughputSettingsUpdateParameters} updateThroughputParameters The RUs per second of the parameters to provide for the current Cassandra table.
     * @param {module:api/DefaultApi~cassandraResourcesUpdateCassandraTableThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThroughputSettingsGetResults}
     */
    cassandraResourcesUpdateCassandraTableThroughput(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, updateThroughputParameters, callback) {
      let postBody = updateThroughputParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling cassandraResourcesUpdateCassandraTableThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling cassandraResourcesUpdateCassandraTableThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling cassandraResourcesUpdateCassandraTableThroughput");
      }
      // verify the required parameter 'keyspaceName' is set
      if (keyspaceName === undefined || keyspaceName === null) {
        throw new Error("Missing the required parameter 'keyspaceName' when calling cassandraResourcesUpdateCassandraTableThroughput");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling cassandraResourcesUpdateCassandraTableThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling cassandraResourcesUpdateCassandraTableThroughput");
      }
      // verify the required parameter 'updateThroughputParameters' is set
      if (updateThroughputParameters === undefined || updateThroughputParameters === null) {
        throw new Error("Missing the required parameter 'updateThroughputParameters' when calling cassandraResourcesUpdateCassandraTableThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'keyspaceName': keyspaceName,
        'tableName': tableName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ThroughputSettingsGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}/throughputSettings/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionListMetricDefinitions operation.
     * @callback module:api/DefaultApi~collectionListMetricDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricDefinitionsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves metric definitions for the given collection.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseRid Cosmos DB database rid.
     * @param {String} collectionRid Cosmos DB collection rid.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~collectionListMetricDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricDefinitionsListResult}
     */
    collectionListMetricDefinitions(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling collectionListMetricDefinitions");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling collectionListMetricDefinitions");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling collectionListMetricDefinitions");
      }
      // verify the required parameter 'databaseRid' is set
      if (databaseRid === undefined || databaseRid === null) {
        throw new Error("Missing the required parameter 'databaseRid' when calling collectionListMetricDefinitions");
      }
      // verify the required parameter 'collectionRid' is set
      if (collectionRid === undefined || collectionRid === null) {
        throw new Error("Missing the required parameter 'collectionRid' when calling collectionListMetricDefinitions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling collectionListMetricDefinitions");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseRid': databaseRid,
        'collectionRid': collectionRid
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricDefinitionsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/metricDefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionListMetrics operation.
     * @callback module:api/DefaultApi~collectionListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metrics determined by the given filter for the given database account and collection.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseRid Cosmos DB database rid.
     * @param {String} collectionRid Cosmos DB collection rid.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {String} filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param {module:api/DefaultApi~collectionListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricListResult}
     */
    collectionListMetrics(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, filter, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling collectionListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling collectionListMetrics");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling collectionListMetrics");
      }
      // verify the required parameter 'databaseRid' is set
      if (databaseRid === undefined || databaseRid === null) {
        throw new Error("Missing the required parameter 'databaseRid' when calling collectionListMetrics");
      }
      // verify the required parameter 'collectionRid' is set
      if (collectionRid === undefined || collectionRid === null) {
        throw new Error("Missing the required parameter 'collectionRid' when calling collectionListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling collectionListMetrics");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling collectionListMetrics");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseRid': databaseRid,
        'collectionRid': collectionRid
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionListUsages operation.
     * @callback module:api/DefaultApi~collectionListUsagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsagesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the usages (most recent storage data) for the given collection.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseRid Cosmos DB database rid.
     * @param {String} collectionRid Cosmos DB collection rid.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).
     * @param {module:api/DefaultApi~collectionListUsagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsagesResult}
     */
    collectionListUsages(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling collectionListUsages");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling collectionListUsages");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling collectionListUsages");
      }
      // verify the required parameter 'databaseRid' is set
      if (databaseRid === undefined || databaseRid === null) {
        throw new Error("Missing the required parameter 'databaseRid' when calling collectionListUsages");
      }
      // verify the required parameter 'collectionRid' is set
      if (collectionRid === undefined || collectionRid === null) {
        throw new Error("Missing the required parameter 'collectionRid' when calling collectionListUsages");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling collectionListUsages");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseRid': databaseRid,
        'collectionRid': collectionRid
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsagesResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/usages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionPartitionListMetrics operation.
     * @callback module:api/DefaultApi~collectionPartitionListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartitionMetricListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metrics determined by the given filter for the given collection, split by partition.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseRid Cosmos DB database rid.
     * @param {String} collectionRid Cosmos DB collection rid.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {String} filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param {module:api/DefaultApi~collectionPartitionListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartitionMetricListResult}
     */
    collectionPartitionListMetrics(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, filter, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling collectionPartitionListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling collectionPartitionListMetrics");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling collectionPartitionListMetrics");
      }
      // verify the required parameter 'databaseRid' is set
      if (databaseRid === undefined || databaseRid === null) {
        throw new Error("Missing the required parameter 'databaseRid' when calling collectionPartitionListMetrics");
      }
      // verify the required parameter 'collectionRid' is set
      if (collectionRid === undefined || collectionRid === null) {
        throw new Error("Missing the required parameter 'collectionRid' when calling collectionPartitionListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling collectionPartitionListMetrics");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling collectionPartitionListMetrics");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseRid': databaseRid,
        'collectionRid': collectionRid
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PartitionMetricListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitions/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionPartitionListUsages operation.
     * @callback module:api/DefaultApi~collectionPartitionListUsagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartitionUsagesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the usages (most recent storage data) for the given collection, split by partition.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseRid Cosmos DB database rid.
     * @param {String} collectionRid Cosmos DB collection rid.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).
     * @param {module:api/DefaultApi~collectionPartitionListUsagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartitionUsagesResult}
     */
    collectionPartitionListUsages(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling collectionPartitionListUsages");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling collectionPartitionListUsages");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling collectionPartitionListUsages");
      }
      // verify the required parameter 'databaseRid' is set
      if (databaseRid === undefined || databaseRid === null) {
        throw new Error("Missing the required parameter 'databaseRid' when calling collectionPartitionListUsages");
      }
      // verify the required parameter 'collectionRid' is set
      if (collectionRid === undefined || collectionRid === null) {
        throw new Error("Missing the required parameter 'collectionRid' when calling collectionPartitionListUsages");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling collectionPartitionListUsages");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseRid': databaseRid,
        'collectionRid': collectionRid
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PartitionUsagesResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitions/usages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionPartitionRegionListMetrics operation.
     * @callback module:api/DefaultApi~collectionPartitionRegionListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartitionMetricListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metrics determined by the given filter for the given collection and region, split by partition.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} region Cosmos DB region, with spaces between words and each word capitalized.
     * @param {String} databaseRid Cosmos DB database rid.
     * @param {String} collectionRid Cosmos DB collection rid.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {String} filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param {module:api/DefaultApi~collectionPartitionRegionListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartitionMetricListResult}
     */
    collectionPartitionRegionListMetrics(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, apiVersion, filter, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling collectionPartitionRegionListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling collectionPartitionRegionListMetrics");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling collectionPartitionRegionListMetrics");
      }
      // verify the required parameter 'region' is set
      if (region === undefined || region === null) {
        throw new Error("Missing the required parameter 'region' when calling collectionPartitionRegionListMetrics");
      }
      // verify the required parameter 'databaseRid' is set
      if (databaseRid === undefined || databaseRid === null) {
        throw new Error("Missing the required parameter 'databaseRid' when calling collectionPartitionRegionListMetrics");
      }
      // verify the required parameter 'collectionRid' is set
      if (collectionRid === undefined || collectionRid === null) {
        throw new Error("Missing the required parameter 'collectionRid' when calling collectionPartitionRegionListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling collectionPartitionRegionListMetrics");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling collectionPartitionRegionListMetrics");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'region': region,
        'databaseRid': databaseRid,
        'collectionRid': collectionRid
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PartitionMetricListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/partitions/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionRegionListMetrics operation.
     * @callback module:api/DefaultApi~collectionRegionListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metrics determined by the given filter for the given database account, collection and region.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} region Cosmos DB region, with spaces between words and each word capitalized.
     * @param {String} databaseRid Cosmos DB database rid.
     * @param {String} collectionRid Cosmos DB collection rid.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {String} filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param {module:api/DefaultApi~collectionRegionListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricListResult}
     */
    collectionRegionListMetrics(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, apiVersion, filter, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling collectionRegionListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling collectionRegionListMetrics");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling collectionRegionListMetrics");
      }
      // verify the required parameter 'region' is set
      if (region === undefined || region === null) {
        throw new Error("Missing the required parameter 'region' when calling collectionRegionListMetrics");
      }
      // verify the required parameter 'databaseRid' is set
      if (databaseRid === undefined || databaseRid === null) {
        throw new Error("Missing the required parameter 'databaseRid' when calling collectionRegionListMetrics");
      }
      // verify the required parameter 'collectionRid' is set
      if (collectionRid === undefined || collectionRid === null) {
        throw new Error("Missing the required parameter 'collectionRid' when calling collectionRegionListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling collectionRegionListMetrics");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling collectionRegionListMetrics");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'region': region,
        'databaseRid': databaseRid,
        'collectionRid': collectionRid
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountRegionListMetrics operation.
     * @callback module:api/DefaultApi~databaseAccountRegionListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metrics determined by the given filter for the given database account and region.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} region Cosmos DB region, with spaces between words and each word capitalized.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {String} filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param {module:api/DefaultApi~databaseAccountRegionListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricListResult}
     */
    databaseAccountRegionListMetrics(subscriptionId, resourceGroupName, accountName, region, apiVersion, filter, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountRegionListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountRegionListMetrics");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountRegionListMetrics");
      }
      // verify the required parameter 'region' is set
      if (region === undefined || region === null) {
        throw new Error("Missing the required parameter 'region' when calling databaseAccountRegionListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountRegionListMetrics");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling databaseAccountRegionListMetrics");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'region': region
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsCheckNameExists operation.
     * @callback module:api/DefaultApi~databaseAccountsCheckNameExistsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only lowercase letters, numbers, and the '-' character, and must be between 3 and 50 characters.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~databaseAccountsCheckNameExistsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    databaseAccountsCheckNameExists(accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsCheckNameExists");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsCheckNameExists");
      }

      let pathParams = {
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.DocumentDB/databaseAccountNames/{accountName}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsCreateOrUpdate operation.
     * @callback module:api/DefaultApi~databaseAccountsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseAccountGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates an Azure Cosmos DB database account. The \"Update\" method is preferred when performing updates on an account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:model/DatabaseAccountCreateUpdateParameters} createUpdateParameters The parameters to provide for the current database account.
     * @param {module:api/DefaultApi~databaseAccountsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseAccountGetResults}
     */
    databaseAccountsCreateOrUpdate(subscriptionId, resourceGroupName, accountName, apiVersion, createUpdateParameters, callback) {
      let postBody = createUpdateParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsCreateOrUpdate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsCreateOrUpdate");
      }
      // verify the required parameter 'createUpdateParameters' is set
      if (createUpdateParameters === undefined || createUpdateParameters === null) {
        throw new Error("Missing the required parameter 'createUpdateParameters' when calling databaseAccountsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DatabaseAccountGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsDelete operation.
     * @callback module:api/DefaultApi~databaseAccountsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~databaseAccountsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    databaseAccountsDelete(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsDelete");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsFailoverPriorityChange operation.
     * @callback module:api/DefaultApi~databaseAccountsFailoverPriorityChangeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes the failover priority for the Azure Cosmos DB database account. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:model/FailoverPolicies} failoverParameters The new failover policies for the database account.
     * @param {module:api/DefaultApi~databaseAccountsFailoverPriorityChangeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    databaseAccountsFailoverPriorityChange(subscriptionId, resourceGroupName, accountName, apiVersion, failoverParameters, callback) {
      let postBody = failoverParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsFailoverPriorityChange");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsFailoverPriorityChange");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsFailoverPriorityChange");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsFailoverPriorityChange");
      }
      // verify the required parameter 'failoverParameters' is set
      if (failoverParameters === undefined || failoverParameters === null) {
        throw new Error("Missing the required parameter 'failoverParameters' when calling databaseAccountsFailoverPriorityChange");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/failoverPriorityChange', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsGet operation.
     * @callback module:api/DefaultApi~databaseAccountsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseAccountGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the properties of an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~databaseAccountsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseAccountGetResults}
     */
    databaseAccountsGet(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGet");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseAccountGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsGetReadOnlyKeys operation.
     * @callback module:api/DefaultApi~databaseAccountsGetReadOnlyKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseAccountListReadOnlyKeysResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the read-only access keys for the specified Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~databaseAccountsGetReadOnlyKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseAccountListReadOnlyKeysResult}
     */
    databaseAccountsGetReadOnlyKeys(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetReadOnlyKeys");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetReadOnlyKeys");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsGetReadOnlyKeys");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsGetReadOnlyKeys");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseAccountListReadOnlyKeysResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/readonlykeys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsList operation.
     * @callback module:api/DefaultApi~databaseAccountsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseAccountsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the Azure Cosmos DB database accounts available under the subscription.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {module:api/DefaultApi~databaseAccountsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseAccountsListResult}
     */
    databaseAccountsList(apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseAccountsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/databaseAccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsListByResourceGroup operation.
     * @callback module:api/DefaultApi~databaseAccountsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseAccountsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the Azure Cosmos DB database accounts available under the given resource group.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {module:api/DefaultApi~databaseAccountsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseAccountsListResult}
     */
    databaseAccountsListByResourceGroup(resourceGroupName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsListByResourceGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseAccountsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsListConnectionStrings operation.
     * @callback module:api/DefaultApi~databaseAccountsListConnectionStringsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseAccountListConnectionStringsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the connection strings for the specified Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~databaseAccountsListConnectionStringsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseAccountListConnectionStringsResult}
     */
    databaseAccountsListConnectionStrings(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsListConnectionStrings");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListConnectionStrings");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsListConnectionStrings");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsListConnectionStrings");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseAccountListConnectionStringsResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/listConnectionStrings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsListKeys operation.
     * @callback module:api/DefaultApi~databaseAccountsListKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseAccountListKeysResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the access keys for the specified Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~databaseAccountsListKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseAccountListKeysResult}
     */
    databaseAccountsListKeys(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsListKeys");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListKeys");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsListKeys");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsListKeys");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseAccountListKeysResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/listKeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsListMetricDefinitions operation.
     * @callback module:api/DefaultApi~databaseAccountsListMetricDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricDefinitionsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves metric definitions for the given database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~databaseAccountsListMetricDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricDefinitionsListResult}
     */
    databaseAccountsListMetricDefinitions(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsListMetricDefinitions");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListMetricDefinitions");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsListMetricDefinitions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsListMetricDefinitions");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricDefinitionsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/metricDefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsListMetrics operation.
     * @callback module:api/DefaultApi~databaseAccountsListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metrics determined by the given filter for the given database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {String} filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param {module:api/DefaultApi~databaseAccountsListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricListResult}
     */
    databaseAccountsListMetrics(subscriptionId, resourceGroupName, accountName, apiVersion, filter, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListMetrics");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsListMetrics");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling databaseAccountsListMetrics");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsListReadOnlyKeys operation.
     * @callback module:api/DefaultApi~databaseAccountsListReadOnlyKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseAccountListReadOnlyKeysResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the read-only access keys for the specified Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~databaseAccountsListReadOnlyKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseAccountListReadOnlyKeysResult}
     */
    databaseAccountsListReadOnlyKeys(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsListReadOnlyKeys");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListReadOnlyKeys");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsListReadOnlyKeys");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsListReadOnlyKeys");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseAccountListReadOnlyKeysResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/readonlykeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsListUsages operation.
     * @callback module:api/DefaultApi~databaseAccountsListUsagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsagesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the usages (most recent data) for the given database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).
     * @param {module:api/DefaultApi~databaseAccountsListUsagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsagesResult}
     */
    databaseAccountsListUsages(subscriptionId, resourceGroupName, accountName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsListUsages");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListUsages");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsListUsages");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsListUsages");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsagesResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/usages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsOfflineRegion operation.
     * @callback module:api/DefaultApi~databaseAccountsOfflineRegionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Offline the specified region for the specified Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:model/RegionForOnlineOffline} regionParameterForOffline Cosmos DB region to offline for the database account.
     * @param {module:api/DefaultApi~databaseAccountsOfflineRegionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    databaseAccountsOfflineRegion(subscriptionId, resourceGroupName, accountName, apiVersion, regionParameterForOffline, callback) {
      let postBody = regionParameterForOffline;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsOfflineRegion");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsOfflineRegion");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsOfflineRegion");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsOfflineRegion");
      }
      // verify the required parameter 'regionParameterForOffline' is set
      if (regionParameterForOffline === undefined || regionParameterForOffline === null) {
        throw new Error("Missing the required parameter 'regionParameterForOffline' when calling databaseAccountsOfflineRegion");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/offlineRegion', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsOnlineRegion operation.
     * @callback module:api/DefaultApi~databaseAccountsOnlineRegionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Online the specified region for the specified Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:model/RegionForOnlineOffline} regionParameterForOnline Cosmos DB region to online for the database account.
     * @param {module:api/DefaultApi~databaseAccountsOnlineRegionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    databaseAccountsOnlineRegion(subscriptionId, resourceGroupName, accountName, apiVersion, regionParameterForOnline, callback) {
      let postBody = regionParameterForOnline;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsOnlineRegion");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsOnlineRegion");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsOnlineRegion");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsOnlineRegion");
      }
      // verify the required parameter 'regionParameterForOnline' is set
      if (regionParameterForOnline === undefined || regionParameterForOnline === null) {
        throw new Error("Missing the required parameter 'regionParameterForOnline' when calling databaseAccountsOnlineRegion");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/onlineRegion', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsRegenerateKey operation.
     * @callback module:api/DefaultApi~databaseAccountsRegenerateKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Regenerates an access key for the specified Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:model/DatabaseAccountRegenerateKeyParameters} keyToRegenerate The name of the key to regenerate.
     * @param {module:api/DefaultApi~databaseAccountsRegenerateKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    databaseAccountsRegenerateKey(subscriptionId, resourceGroupName, accountName, apiVersion, keyToRegenerate, callback) {
      let postBody = keyToRegenerate;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsRegenerateKey");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsRegenerateKey");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsRegenerateKey");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsRegenerateKey");
      }
      // verify the required parameter 'keyToRegenerate' is set
      if (keyToRegenerate === undefined || keyToRegenerate === null) {
        throw new Error("Missing the required parameter 'keyToRegenerate' when calling databaseAccountsRegenerateKey");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/regenerateKey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsUpdate operation.
     * @callback module:api/DefaultApi~databaseAccountsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseAccountGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the properties of an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:model/DatabaseAccountUpdateParameters} updateParameters The parameters to provide for the current database account.
     * @param {module:api/DefaultApi~databaseAccountsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseAccountGetResults}
     */
    databaseAccountsUpdate(subscriptionId, resourceGroupName, accountName, apiVersion, updateParameters, callback) {
      let postBody = updateParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsUpdate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsUpdate");
      }
      // verify the required parameter 'updateParameters' is set
      if (updateParameters === undefined || updateParameters === null) {
        throw new Error("Missing the required parameter 'updateParameters' when calling databaseAccountsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DatabaseAccountGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseListMetricDefinitions operation.
     * @callback module:api/DefaultApi~databaseListMetricDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricDefinitionsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves metric definitions for the given database.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseRid Cosmos DB database rid.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~databaseListMetricDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricDefinitionsListResult}
     */
    databaseListMetricDefinitions(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseListMetricDefinitions");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseListMetricDefinitions");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseListMetricDefinitions");
      }
      // verify the required parameter 'databaseRid' is set
      if (databaseRid === undefined || databaseRid === null) {
        throw new Error("Missing the required parameter 'databaseRid' when calling databaseListMetricDefinitions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseListMetricDefinitions");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseRid': databaseRid
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricDefinitionsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/metricDefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseListMetrics operation.
     * @callback module:api/DefaultApi~databaseListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metrics determined by the given filter for the given database account and database.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseRid Cosmos DB database rid.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {String} filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param {module:api/DefaultApi~databaseListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricListResult}
     */
    databaseListMetrics(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, filter, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseListMetrics");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseListMetrics");
      }
      // verify the required parameter 'databaseRid' is set
      if (databaseRid === undefined || databaseRid === null) {
        throw new Error("Missing the required parameter 'databaseRid' when calling databaseListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseListMetrics");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling databaseListMetrics");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseRid': databaseRid
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseListUsages operation.
     * @callback module:api/DefaultApi~databaseListUsagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsagesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the usages (most recent data) for the given database.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseRid Cosmos DB database rid.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).
     * @param {module:api/DefaultApi~databaseListUsagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsagesResult}
     */
    databaseListUsages(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseListUsages");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseListUsages");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseListUsages");
      }
      // verify the required parameter 'databaseRid' is set
      if (databaseRid === undefined || databaseRid === null) {
        throw new Error("Missing the required parameter 'databaseRid' when calling databaseListUsages");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseListUsages");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseRid': databaseRid
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsagesResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/usages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gremlinResourcesCreateUpdateGremlinDatabase operation.
     * @callback module:api/DefaultApi~gremlinResourcesCreateUpdateGremlinDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GremlinDatabaseGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an Azure Cosmos DB Gremlin database
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:model/GremlinDatabaseCreateUpdateParameters} createUpdateGremlinDatabaseParameters The parameters to provide for the current Gremlin database.
     * @param {module:api/DefaultApi~gremlinResourcesCreateUpdateGremlinDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GremlinDatabaseGetResults}
     */
    gremlinResourcesCreateUpdateGremlinDatabase(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateGremlinDatabaseParameters, callback) {
      let postBody = createUpdateGremlinDatabaseParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling gremlinResourcesCreateUpdateGremlinDatabase");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling gremlinResourcesCreateUpdateGremlinDatabase");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling gremlinResourcesCreateUpdateGremlinDatabase");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling gremlinResourcesCreateUpdateGremlinDatabase");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling gremlinResourcesCreateUpdateGremlinDatabase");
      }
      // verify the required parameter 'createUpdateGremlinDatabaseParameters' is set
      if (createUpdateGremlinDatabaseParameters === undefined || createUpdateGremlinDatabaseParameters === null) {
        throw new Error("Missing the required parameter 'createUpdateGremlinDatabaseParameters' when calling gremlinResourcesCreateUpdateGremlinDatabase");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GremlinDatabaseGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gremlinResourcesCreateUpdateGremlinGraph operation.
     * @callback module:api/DefaultApi~gremlinResourcesCreateUpdateGremlinGraphCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GremlinGraphGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an Azure Cosmos DB Gremlin graph
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} graphName Cosmos DB graph name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:model/GremlinGraphCreateUpdateParameters} createUpdateGremlinGraphParameters The parameters to provide for the current Gremlin graph.
     * @param {module:api/DefaultApi~gremlinResourcesCreateUpdateGremlinGraphCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GremlinGraphGetResults}
     */
    gremlinResourcesCreateUpdateGremlinGraph(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, createUpdateGremlinGraphParameters, callback) {
      let postBody = createUpdateGremlinGraphParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling gremlinResourcesCreateUpdateGremlinGraph");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling gremlinResourcesCreateUpdateGremlinGraph");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling gremlinResourcesCreateUpdateGremlinGraph");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling gremlinResourcesCreateUpdateGremlinGraph");
      }
      // verify the required parameter 'graphName' is set
      if (graphName === undefined || graphName === null) {
        throw new Error("Missing the required parameter 'graphName' when calling gremlinResourcesCreateUpdateGremlinGraph");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling gremlinResourcesCreateUpdateGremlinGraph");
      }
      // verify the required parameter 'createUpdateGremlinGraphParameters' is set
      if (createUpdateGremlinGraphParameters === undefined || createUpdateGremlinGraphParameters === null) {
        throw new Error("Missing the required parameter 'createUpdateGremlinGraphParameters' when calling gremlinResourcesCreateUpdateGremlinGraph");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'graphName': graphName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GremlinGraphGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gremlinResourcesDeleteGremlinDatabase operation.
     * @callback module:api/DefaultApi~gremlinResourcesDeleteGremlinDatabaseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Azure Cosmos DB Gremlin database.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~gremlinResourcesDeleteGremlinDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gremlinResourcesDeleteGremlinDatabase(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling gremlinResourcesDeleteGremlinDatabase");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling gremlinResourcesDeleteGremlinDatabase");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling gremlinResourcesDeleteGremlinDatabase");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling gremlinResourcesDeleteGremlinDatabase");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling gremlinResourcesDeleteGremlinDatabase");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gremlinResourcesDeleteGremlinGraph operation.
     * @callback module:api/DefaultApi~gremlinResourcesDeleteGremlinGraphCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Azure Cosmos DB Gremlin graph.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} graphName Cosmos DB graph name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~gremlinResourcesDeleteGremlinGraphCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gremlinResourcesDeleteGremlinGraph(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling gremlinResourcesDeleteGremlinGraph");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling gremlinResourcesDeleteGremlinGraph");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling gremlinResourcesDeleteGremlinGraph");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling gremlinResourcesDeleteGremlinGraph");
      }
      // verify the required parameter 'graphName' is set
      if (graphName === undefined || graphName === null) {
        throw new Error("Missing the required parameter 'graphName' when calling gremlinResourcesDeleteGremlinGraph");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling gremlinResourcesDeleteGremlinGraph");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'graphName': graphName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gremlinResourcesGetGremlinDatabase operation.
     * @callback module:api/DefaultApi~gremlinResourcesGetGremlinDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GremlinDatabaseGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Gremlin databases under an existing Azure Cosmos DB database account with the provided name.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~gremlinResourcesGetGremlinDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GremlinDatabaseGetResults}
     */
    gremlinResourcesGetGremlinDatabase(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling gremlinResourcesGetGremlinDatabase");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling gremlinResourcesGetGremlinDatabase");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling gremlinResourcesGetGremlinDatabase");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling gremlinResourcesGetGremlinDatabase");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling gremlinResourcesGetGremlinDatabase");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GremlinDatabaseGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gremlinResourcesGetGremlinDatabaseThroughput operation.
     * @callback module:api/DefaultApi~gremlinResourcesGetGremlinDatabaseThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThroughputSettingsGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the RUs per second of the Gremlin database under an existing Azure Cosmos DB database account with the provided name.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~gremlinResourcesGetGremlinDatabaseThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThroughputSettingsGetResults}
     */
    gremlinResourcesGetGremlinDatabaseThroughput(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling gremlinResourcesGetGremlinDatabaseThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling gremlinResourcesGetGremlinDatabaseThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling gremlinResourcesGetGremlinDatabaseThroughput");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling gremlinResourcesGetGremlinDatabaseThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling gremlinResourcesGetGremlinDatabaseThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ThroughputSettingsGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/throughputSettings/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gremlinResourcesGetGremlinGraph operation.
     * @callback module:api/DefaultApi~gremlinResourcesGetGremlinGraphCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GremlinGraphGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Gremlin graph under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} graphName Cosmos DB graph name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~gremlinResourcesGetGremlinGraphCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GremlinGraphGetResults}
     */
    gremlinResourcesGetGremlinGraph(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling gremlinResourcesGetGremlinGraph");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling gremlinResourcesGetGremlinGraph");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling gremlinResourcesGetGremlinGraph");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling gremlinResourcesGetGremlinGraph");
      }
      // verify the required parameter 'graphName' is set
      if (graphName === undefined || graphName === null) {
        throw new Error("Missing the required parameter 'graphName' when calling gremlinResourcesGetGremlinGraph");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling gremlinResourcesGetGremlinGraph");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'graphName': graphName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GremlinGraphGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gremlinResourcesGetGremlinGraphThroughput operation.
     * @callback module:api/DefaultApi~gremlinResourcesGetGremlinGraphThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThroughputSettingsGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Gremlin graph throughput under an existing Azure Cosmos DB database account with the provided name.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} graphName Cosmos DB graph name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~gremlinResourcesGetGremlinGraphThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThroughputSettingsGetResults}
     */
    gremlinResourcesGetGremlinGraphThroughput(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling gremlinResourcesGetGremlinGraphThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling gremlinResourcesGetGremlinGraphThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling gremlinResourcesGetGremlinGraphThroughput");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling gremlinResourcesGetGremlinGraphThroughput");
      }
      // verify the required parameter 'graphName' is set
      if (graphName === undefined || graphName === null) {
        throw new Error("Missing the required parameter 'graphName' when calling gremlinResourcesGetGremlinGraphThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling gremlinResourcesGetGremlinGraphThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'graphName': graphName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ThroughputSettingsGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}/throughputSettings/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gremlinResourcesListGremlinDatabases operation.
     * @callback module:api/DefaultApi~gremlinResourcesListGremlinDatabasesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GremlinDatabaseListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the Gremlin databases under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~gremlinResourcesListGremlinDatabasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GremlinDatabaseListResult}
     */
    gremlinResourcesListGremlinDatabases(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling gremlinResourcesListGremlinDatabases");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling gremlinResourcesListGremlinDatabases");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling gremlinResourcesListGremlinDatabases");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling gremlinResourcesListGremlinDatabases");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GremlinDatabaseListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gremlinResourcesListGremlinGraphs operation.
     * @callback module:api/DefaultApi~gremlinResourcesListGremlinGraphsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GremlinGraphListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the Gremlin graph under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~gremlinResourcesListGremlinGraphsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GremlinGraphListResult}
     */
    gremlinResourcesListGremlinGraphs(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling gremlinResourcesListGremlinGraphs");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling gremlinResourcesListGremlinGraphs");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling gremlinResourcesListGremlinGraphs");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling gremlinResourcesListGremlinGraphs");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling gremlinResourcesListGremlinGraphs");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GremlinGraphListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gremlinResourcesUpdateGremlinDatabaseThroughput operation.
     * @callback module:api/DefaultApi~gremlinResourcesUpdateGremlinDatabaseThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThroughputSettingsGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update RUs per second of an Azure Cosmos DB Gremlin database
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:model/ThroughputSettingsUpdateParameters} updateThroughputParameters The RUs per second of the parameters to provide for the current Gremlin database.
     * @param {module:api/DefaultApi~gremlinResourcesUpdateGremlinDatabaseThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThroughputSettingsGetResults}
     */
    gremlinResourcesUpdateGremlinDatabaseThroughput(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters, callback) {
      let postBody = updateThroughputParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling gremlinResourcesUpdateGremlinDatabaseThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling gremlinResourcesUpdateGremlinDatabaseThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling gremlinResourcesUpdateGremlinDatabaseThroughput");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling gremlinResourcesUpdateGremlinDatabaseThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling gremlinResourcesUpdateGremlinDatabaseThroughput");
      }
      // verify the required parameter 'updateThroughputParameters' is set
      if (updateThroughputParameters === undefined || updateThroughputParameters === null) {
        throw new Error("Missing the required parameter 'updateThroughputParameters' when calling gremlinResourcesUpdateGremlinDatabaseThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ThroughputSettingsGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/throughputSettings/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gremlinResourcesUpdateGremlinGraphThroughput operation.
     * @callback module:api/DefaultApi~gremlinResourcesUpdateGremlinGraphThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThroughputSettingsGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update RUs per second of an Azure Cosmos DB Gremlin graph
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} graphName Cosmos DB graph name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:model/ThroughputSettingsUpdateParameters} updateThroughputParameters The RUs per second of the parameters to provide for the current Gremlin graph.
     * @param {module:api/DefaultApi~gremlinResourcesUpdateGremlinGraphThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThroughputSettingsGetResults}
     */
    gremlinResourcesUpdateGremlinGraphThroughput(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, updateThroughputParameters, callback) {
      let postBody = updateThroughputParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling gremlinResourcesUpdateGremlinGraphThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling gremlinResourcesUpdateGremlinGraphThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling gremlinResourcesUpdateGremlinGraphThroughput");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling gremlinResourcesUpdateGremlinGraphThroughput");
      }
      // verify the required parameter 'graphName' is set
      if (graphName === undefined || graphName === null) {
        throw new Error("Missing the required parameter 'graphName' when calling gremlinResourcesUpdateGremlinGraphThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling gremlinResourcesUpdateGremlinGraphThroughput");
      }
      // verify the required parameter 'updateThroughputParameters' is set
      if (updateThroughputParameters === undefined || updateThroughputParameters === null) {
        throw new Error("Missing the required parameter 'updateThroughputParameters' when calling gremlinResourcesUpdateGremlinGraphThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'graphName': graphName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ThroughputSettingsGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}/throughputSettings/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mongoDBResourcesCreateUpdateMongoDBCollection operation.
     * @callback module:api/DefaultApi~mongoDBResourcesCreateUpdateMongoDBCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MongoDBCollectionGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an Azure Cosmos DB MongoDB Collection
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} collectionName Cosmos DB collection name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:model/MongoDBCollectionCreateUpdateParameters} createUpdateMongoDBCollectionParameters The parameters to provide for the current MongoDB Collection.
     * @param {module:api/DefaultApi~mongoDBResourcesCreateUpdateMongoDBCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MongoDBCollectionGetResults}
     */
    mongoDBResourcesCreateUpdateMongoDBCollection(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, createUpdateMongoDBCollectionParameters, callback) {
      let postBody = createUpdateMongoDBCollectionParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mongoDBResourcesCreateUpdateMongoDBCollection");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling mongoDBResourcesCreateUpdateMongoDBCollection");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling mongoDBResourcesCreateUpdateMongoDBCollection");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling mongoDBResourcesCreateUpdateMongoDBCollection");
      }
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling mongoDBResourcesCreateUpdateMongoDBCollection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mongoDBResourcesCreateUpdateMongoDBCollection");
      }
      // verify the required parameter 'createUpdateMongoDBCollectionParameters' is set
      if (createUpdateMongoDBCollectionParameters === undefined || createUpdateMongoDBCollectionParameters === null) {
        throw new Error("Missing the required parameter 'createUpdateMongoDBCollectionParameters' when calling mongoDBResourcesCreateUpdateMongoDBCollection");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'collectionName': collectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MongoDBCollectionGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mongoDBResourcesCreateUpdateMongoDBDatabase operation.
     * @callback module:api/DefaultApi~mongoDBResourcesCreateUpdateMongoDBDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MongoDBDatabaseGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or updates Azure Cosmos DB MongoDB database
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:model/MongoDBDatabaseCreateUpdateParameters} createUpdateMongoDBDatabaseParameters The parameters to provide for the current MongoDB database.
     * @param {module:api/DefaultApi~mongoDBResourcesCreateUpdateMongoDBDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MongoDBDatabaseGetResults}
     */
    mongoDBResourcesCreateUpdateMongoDBDatabase(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateMongoDBDatabaseParameters, callback) {
      let postBody = createUpdateMongoDBDatabaseParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mongoDBResourcesCreateUpdateMongoDBDatabase");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling mongoDBResourcesCreateUpdateMongoDBDatabase");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling mongoDBResourcesCreateUpdateMongoDBDatabase");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling mongoDBResourcesCreateUpdateMongoDBDatabase");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mongoDBResourcesCreateUpdateMongoDBDatabase");
      }
      // verify the required parameter 'createUpdateMongoDBDatabaseParameters' is set
      if (createUpdateMongoDBDatabaseParameters === undefined || createUpdateMongoDBDatabaseParameters === null) {
        throw new Error("Missing the required parameter 'createUpdateMongoDBDatabaseParameters' when calling mongoDBResourcesCreateUpdateMongoDBDatabase");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MongoDBDatabaseGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mongoDBResourcesDeleteMongoDBCollection operation.
     * @callback module:api/DefaultApi~mongoDBResourcesDeleteMongoDBCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Azure Cosmos DB MongoDB Collection.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} collectionName Cosmos DB collection name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~mongoDBResourcesDeleteMongoDBCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mongoDBResourcesDeleteMongoDBCollection(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mongoDBResourcesDeleteMongoDBCollection");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling mongoDBResourcesDeleteMongoDBCollection");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling mongoDBResourcesDeleteMongoDBCollection");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling mongoDBResourcesDeleteMongoDBCollection");
      }
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling mongoDBResourcesDeleteMongoDBCollection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mongoDBResourcesDeleteMongoDBCollection");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'collectionName': collectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mongoDBResourcesDeleteMongoDBDatabase operation.
     * @callback module:api/DefaultApi~mongoDBResourcesDeleteMongoDBDatabaseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Azure Cosmos DB MongoDB database.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~mongoDBResourcesDeleteMongoDBDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mongoDBResourcesDeleteMongoDBDatabase(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mongoDBResourcesDeleteMongoDBDatabase");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling mongoDBResourcesDeleteMongoDBDatabase");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling mongoDBResourcesDeleteMongoDBDatabase");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling mongoDBResourcesDeleteMongoDBDatabase");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mongoDBResourcesDeleteMongoDBDatabase");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mongoDBResourcesGetMongoDBCollection operation.
     * @callback module:api/DefaultApi~mongoDBResourcesGetMongoDBCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MongoDBCollectionGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the MongoDB collection under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} collectionName Cosmos DB collection name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~mongoDBResourcesGetMongoDBCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MongoDBCollectionGetResults}
     */
    mongoDBResourcesGetMongoDBCollection(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mongoDBResourcesGetMongoDBCollection");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling mongoDBResourcesGetMongoDBCollection");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling mongoDBResourcesGetMongoDBCollection");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling mongoDBResourcesGetMongoDBCollection");
      }
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling mongoDBResourcesGetMongoDBCollection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mongoDBResourcesGetMongoDBCollection");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'collectionName': collectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MongoDBCollectionGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mongoDBResourcesGetMongoDBCollectionThroughput operation.
     * @callback module:api/DefaultApi~mongoDBResourcesGetMongoDBCollectionThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThroughputSettingsGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the RUs per second of the MongoDB collection under an existing Azure Cosmos DB database account with the provided name.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} collectionName Cosmos DB collection name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~mongoDBResourcesGetMongoDBCollectionThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThroughputSettingsGetResults}
     */
    mongoDBResourcesGetMongoDBCollectionThroughput(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mongoDBResourcesGetMongoDBCollectionThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling mongoDBResourcesGetMongoDBCollectionThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling mongoDBResourcesGetMongoDBCollectionThroughput");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling mongoDBResourcesGetMongoDBCollectionThroughput");
      }
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling mongoDBResourcesGetMongoDBCollectionThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mongoDBResourcesGetMongoDBCollectionThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'collectionName': collectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ThroughputSettingsGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}/throughputSettings/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mongoDBResourcesGetMongoDBDatabase operation.
     * @callback module:api/DefaultApi~mongoDBResourcesGetMongoDBDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MongoDBDatabaseGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the MongoDB databases under an existing Azure Cosmos DB database account with the provided name.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~mongoDBResourcesGetMongoDBDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MongoDBDatabaseGetResults}
     */
    mongoDBResourcesGetMongoDBDatabase(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mongoDBResourcesGetMongoDBDatabase");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling mongoDBResourcesGetMongoDBDatabase");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling mongoDBResourcesGetMongoDBDatabase");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling mongoDBResourcesGetMongoDBDatabase");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mongoDBResourcesGetMongoDBDatabase");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MongoDBDatabaseGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mongoDBResourcesGetMongoDBDatabaseThroughput operation.
     * @callback module:api/DefaultApi~mongoDBResourcesGetMongoDBDatabaseThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThroughputSettingsGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the RUs per second of the MongoDB database under an existing Azure Cosmos DB database account with the provided name.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~mongoDBResourcesGetMongoDBDatabaseThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThroughputSettingsGetResults}
     */
    mongoDBResourcesGetMongoDBDatabaseThroughput(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mongoDBResourcesGetMongoDBDatabaseThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling mongoDBResourcesGetMongoDBDatabaseThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling mongoDBResourcesGetMongoDBDatabaseThroughput");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling mongoDBResourcesGetMongoDBDatabaseThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mongoDBResourcesGetMongoDBDatabaseThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ThroughputSettingsGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/throughputSettings/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mongoDBResourcesListMongoDBCollections operation.
     * @callback module:api/DefaultApi~mongoDBResourcesListMongoDBCollectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MongoDBCollectionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the MongoDB collection under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~mongoDBResourcesListMongoDBCollectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MongoDBCollectionListResult}
     */
    mongoDBResourcesListMongoDBCollections(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mongoDBResourcesListMongoDBCollections");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling mongoDBResourcesListMongoDBCollections");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling mongoDBResourcesListMongoDBCollections");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling mongoDBResourcesListMongoDBCollections");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mongoDBResourcesListMongoDBCollections");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MongoDBCollectionListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mongoDBResourcesListMongoDBDatabases operation.
     * @callback module:api/DefaultApi~mongoDBResourcesListMongoDBDatabasesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MongoDBDatabaseListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the MongoDB databases under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~mongoDBResourcesListMongoDBDatabasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MongoDBDatabaseListResult}
     */
    mongoDBResourcesListMongoDBDatabases(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mongoDBResourcesListMongoDBDatabases");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling mongoDBResourcesListMongoDBDatabases");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling mongoDBResourcesListMongoDBDatabases");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mongoDBResourcesListMongoDBDatabases");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MongoDBDatabaseListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mongoDBResourcesUpdateMongoDBCollectionThroughput operation.
     * @callback module:api/DefaultApi~mongoDBResourcesUpdateMongoDBCollectionThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThroughputSettingsGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the RUs per second of an Azure Cosmos DB MongoDB collection
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} collectionName Cosmos DB collection name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:model/ThroughputSettingsUpdateParameters} updateThroughputParameters The RUs per second of the parameters to provide for the current MongoDB collection.
     * @param {module:api/DefaultApi~mongoDBResourcesUpdateMongoDBCollectionThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThroughputSettingsGetResults}
     */
    mongoDBResourcesUpdateMongoDBCollectionThroughput(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, updateThroughputParameters, callback) {
      let postBody = updateThroughputParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mongoDBResourcesUpdateMongoDBCollectionThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling mongoDBResourcesUpdateMongoDBCollectionThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling mongoDBResourcesUpdateMongoDBCollectionThroughput");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling mongoDBResourcesUpdateMongoDBCollectionThroughput");
      }
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling mongoDBResourcesUpdateMongoDBCollectionThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mongoDBResourcesUpdateMongoDBCollectionThroughput");
      }
      // verify the required parameter 'updateThroughputParameters' is set
      if (updateThroughputParameters === undefined || updateThroughputParameters === null) {
        throw new Error("Missing the required parameter 'updateThroughputParameters' when calling mongoDBResourcesUpdateMongoDBCollectionThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'collectionName': collectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ThroughputSettingsGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}/throughputSettings/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mongoDBResourcesUpdateMongoDBDatabaseThroughput operation.
     * @callback module:api/DefaultApi~mongoDBResourcesUpdateMongoDBDatabaseThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThroughputSettingsGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update RUs per second of the an Azure Cosmos DB MongoDB database
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:model/ThroughputSettingsUpdateParameters} updateThroughputParameters The RUs per second of the parameters to provide for the current MongoDB database.
     * @param {module:api/DefaultApi~mongoDBResourcesUpdateMongoDBDatabaseThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThroughputSettingsGetResults}
     */
    mongoDBResourcesUpdateMongoDBDatabaseThroughput(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters, callback) {
      let postBody = updateThroughputParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mongoDBResourcesUpdateMongoDBDatabaseThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling mongoDBResourcesUpdateMongoDBDatabaseThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling mongoDBResourcesUpdateMongoDBDatabaseThroughput");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling mongoDBResourcesUpdateMongoDBDatabaseThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mongoDBResourcesUpdateMongoDBDatabaseThroughput");
      }
      // verify the required parameter 'updateThroughputParameters' is set
      if (updateThroughputParameters === undefined || updateThroughputParameters === null) {
        throw new Error("Missing the required parameter 'updateThroughputParameters' when calling mongoDBResourcesUpdateMongoDBDatabaseThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ThroughputSettingsGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/throughputSettings/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the partitionKeyRangeIdListMetrics operation.
     * @callback module:api/DefaultApi~partitionKeyRangeIdListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartitionMetricListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metrics determined by the given filter for the given partition key range id.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseRid Cosmos DB database rid.
     * @param {String} collectionRid Cosmos DB collection rid.
     * @param {String} partitionKeyRangeId Partition Key Range Id for which to get data.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {String} filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param {module:api/DefaultApi~partitionKeyRangeIdListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartitionMetricListResult}
     */
    partitionKeyRangeIdListMetrics(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, partitionKeyRangeId, apiVersion, filter, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling partitionKeyRangeIdListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling partitionKeyRangeIdListMetrics");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling partitionKeyRangeIdListMetrics");
      }
      // verify the required parameter 'databaseRid' is set
      if (databaseRid === undefined || databaseRid === null) {
        throw new Error("Missing the required parameter 'databaseRid' when calling partitionKeyRangeIdListMetrics");
      }
      // verify the required parameter 'collectionRid' is set
      if (collectionRid === undefined || collectionRid === null) {
        throw new Error("Missing the required parameter 'collectionRid' when calling partitionKeyRangeIdListMetrics");
      }
      // verify the required parameter 'partitionKeyRangeId' is set
      if (partitionKeyRangeId === undefined || partitionKeyRangeId === null) {
        throw new Error("Missing the required parameter 'partitionKeyRangeId' when calling partitionKeyRangeIdListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling partitionKeyRangeIdListMetrics");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling partitionKeyRangeIdListMetrics");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseRid': databaseRid,
        'collectionRid': collectionRid,
        'partitionKeyRangeId': partitionKeyRangeId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PartitionMetricListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitionKeyRangeId/{partitionKeyRangeId}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the partitionKeyRangeIdRegionListMetrics operation.
     * @callback module:api/DefaultApi~partitionKeyRangeIdRegionListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartitionMetricListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metrics determined by the given filter for the given partition key range id and region.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} region Cosmos DB region, with spaces between words and each word capitalized.
     * @param {String} databaseRid Cosmos DB database rid.
     * @param {String} collectionRid Cosmos DB collection rid.
     * @param {String} partitionKeyRangeId Partition Key Range Id for which to get data.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {String} filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param {module:api/DefaultApi~partitionKeyRangeIdRegionListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartitionMetricListResult}
     */
    partitionKeyRangeIdRegionListMetrics(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, partitionKeyRangeId, apiVersion, filter, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling partitionKeyRangeIdRegionListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling partitionKeyRangeIdRegionListMetrics");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling partitionKeyRangeIdRegionListMetrics");
      }
      // verify the required parameter 'region' is set
      if (region === undefined || region === null) {
        throw new Error("Missing the required parameter 'region' when calling partitionKeyRangeIdRegionListMetrics");
      }
      // verify the required parameter 'databaseRid' is set
      if (databaseRid === undefined || databaseRid === null) {
        throw new Error("Missing the required parameter 'databaseRid' when calling partitionKeyRangeIdRegionListMetrics");
      }
      // verify the required parameter 'collectionRid' is set
      if (collectionRid === undefined || collectionRid === null) {
        throw new Error("Missing the required parameter 'collectionRid' when calling partitionKeyRangeIdRegionListMetrics");
      }
      // verify the required parameter 'partitionKeyRangeId' is set
      if (partitionKeyRangeId === undefined || partitionKeyRangeId === null) {
        throw new Error("Missing the required parameter 'partitionKeyRangeId' when calling partitionKeyRangeIdRegionListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling partitionKeyRangeIdRegionListMetrics");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling partitionKeyRangeIdRegionListMetrics");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'region': region,
        'databaseRid': databaseRid,
        'collectionRid': collectionRid,
        'partitionKeyRangeId': partitionKeyRangeId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PartitionMetricListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/partitionKeyRangeId/{partitionKeyRangeId}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the percentileListMetrics operation.
     * @callback module:api/DefaultApi~percentileListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PercentileMetricListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metrics determined by the given filter for the given database account. This url is only for PBS and Replication Latency data
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {String} filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param {module:api/DefaultApi~percentileListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PercentileMetricListResult}
     */
    percentileListMetrics(subscriptionId, resourceGroupName, accountName, apiVersion, filter, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling percentileListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling percentileListMetrics");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling percentileListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling percentileListMetrics");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling percentileListMetrics");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PercentileMetricListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/percentile/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the percentileSourceTargetListMetrics operation.
     * @callback module:api/DefaultApi~percentileSourceTargetListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PercentileMetricListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metrics determined by the given filter for the given account, source and target region. This url is only for PBS and Replication Latency data
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} sourceRegion Source region from which data is written. Cosmos DB region, with spaces between words and each word capitalized.
     * @param {String} targetRegion Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {String} filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param {module:api/DefaultApi~percentileSourceTargetListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PercentileMetricListResult}
     */
    percentileSourceTargetListMetrics(subscriptionId, resourceGroupName, accountName, sourceRegion, targetRegion, apiVersion, filter, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling percentileSourceTargetListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling percentileSourceTargetListMetrics");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling percentileSourceTargetListMetrics");
      }
      // verify the required parameter 'sourceRegion' is set
      if (sourceRegion === undefined || sourceRegion === null) {
        throw new Error("Missing the required parameter 'sourceRegion' when calling percentileSourceTargetListMetrics");
      }
      // verify the required parameter 'targetRegion' is set
      if (targetRegion === undefined || targetRegion === null) {
        throw new Error("Missing the required parameter 'targetRegion' when calling percentileSourceTargetListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling percentileSourceTargetListMetrics");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling percentileSourceTargetListMetrics");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'sourceRegion': sourceRegion,
        'targetRegion': targetRegion
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PercentileMetricListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sourceRegion/{sourceRegion}/targetRegion/{targetRegion}/percentile/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the percentileTargetListMetrics operation.
     * @callback module:api/DefaultApi~percentileTargetListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PercentileMetricListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metrics determined by the given filter for the given account target region. This url is only for PBS and Replication Latency data
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} targetRegion Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {String} filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param {module:api/DefaultApi~percentileTargetListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PercentileMetricListResult}
     */
    percentileTargetListMetrics(subscriptionId, resourceGroupName, accountName, targetRegion, apiVersion, filter, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling percentileTargetListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling percentileTargetListMetrics");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling percentileTargetListMetrics");
      }
      // verify the required parameter 'targetRegion' is set
      if (targetRegion === undefined || targetRegion === null) {
        throw new Error("Missing the required parameter 'targetRegion' when calling percentileTargetListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling percentileTargetListMetrics");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling percentileTargetListMetrics");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'targetRegion': targetRegion
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PercentileMetricListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/targetRegion/{targetRegion}/percentile/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlResourcesCreateUpdateSqlContainer operation.
     * @callback module:api/DefaultApi~sqlResourcesCreateUpdateSqlContainerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SqlContainerGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an Azure Cosmos DB SQL container
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} containerName Cosmos DB container name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:model/SqlContainerCreateUpdateParameters} createUpdateSqlContainerParameters The parameters to provide for the current SQL container.
     * @param {module:api/DefaultApi~sqlResourcesCreateUpdateSqlContainerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SqlContainerGetResults}
     */
    sqlResourcesCreateUpdateSqlContainer(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, createUpdateSqlContainerParameters, callback) {
      let postBody = createUpdateSqlContainerParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlResourcesCreateUpdateSqlContainer");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sqlResourcesCreateUpdateSqlContainer");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sqlResourcesCreateUpdateSqlContainer");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling sqlResourcesCreateUpdateSqlContainer");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling sqlResourcesCreateUpdateSqlContainer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlResourcesCreateUpdateSqlContainer");
      }
      // verify the required parameter 'createUpdateSqlContainerParameters' is set
      if (createUpdateSqlContainerParameters === undefined || createUpdateSqlContainerParameters === null) {
        throw new Error("Missing the required parameter 'createUpdateSqlContainerParameters' when calling sqlResourcesCreateUpdateSqlContainer");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'containerName': containerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SqlContainerGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlResourcesCreateUpdateSqlDatabase operation.
     * @callback module:api/DefaultApi~sqlResourcesCreateUpdateSqlDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SqlDatabaseGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an Azure Cosmos DB SQL database
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:model/SqlDatabaseCreateUpdateParameters} createUpdateSqlDatabaseParameters The parameters to provide for the current SQL database.
     * @param {module:api/DefaultApi~sqlResourcesCreateUpdateSqlDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SqlDatabaseGetResults}
     */
    sqlResourcesCreateUpdateSqlDatabase(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateSqlDatabaseParameters, callback) {
      let postBody = createUpdateSqlDatabaseParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlResourcesCreateUpdateSqlDatabase");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sqlResourcesCreateUpdateSqlDatabase");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sqlResourcesCreateUpdateSqlDatabase");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling sqlResourcesCreateUpdateSqlDatabase");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlResourcesCreateUpdateSqlDatabase");
      }
      // verify the required parameter 'createUpdateSqlDatabaseParameters' is set
      if (createUpdateSqlDatabaseParameters === undefined || createUpdateSqlDatabaseParameters === null) {
        throw new Error("Missing the required parameter 'createUpdateSqlDatabaseParameters' when calling sqlResourcesCreateUpdateSqlDatabase");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SqlDatabaseGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlResourcesCreateUpdateSqlStoredProcedure operation.
     * @callback module:api/DefaultApi~sqlResourcesCreateUpdateSqlStoredProcedureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SqlStoredProcedureGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an Azure Cosmos DB SQL storedProcedure
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} containerName Cosmos DB container name.
     * @param {String} storedProcedureName Cosmos DB storedProcedure name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:model/SqlStoredProcedureCreateUpdateParameters} createUpdateSqlStoredProcedureParameters The parameters to provide for the current SQL storedProcedure.
     * @param {module:api/DefaultApi~sqlResourcesCreateUpdateSqlStoredProcedureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SqlStoredProcedureGetResults}
     */
    sqlResourcesCreateUpdateSqlStoredProcedure(subscriptionId, resourceGroupName, accountName, databaseName, containerName, storedProcedureName, apiVersion, createUpdateSqlStoredProcedureParameters, callback) {
      let postBody = createUpdateSqlStoredProcedureParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlResourcesCreateUpdateSqlStoredProcedure");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sqlResourcesCreateUpdateSqlStoredProcedure");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sqlResourcesCreateUpdateSqlStoredProcedure");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling sqlResourcesCreateUpdateSqlStoredProcedure");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling sqlResourcesCreateUpdateSqlStoredProcedure");
      }
      // verify the required parameter 'storedProcedureName' is set
      if (storedProcedureName === undefined || storedProcedureName === null) {
        throw new Error("Missing the required parameter 'storedProcedureName' when calling sqlResourcesCreateUpdateSqlStoredProcedure");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlResourcesCreateUpdateSqlStoredProcedure");
      }
      // verify the required parameter 'createUpdateSqlStoredProcedureParameters' is set
      if (createUpdateSqlStoredProcedureParameters === undefined || createUpdateSqlStoredProcedureParameters === null) {
        throw new Error("Missing the required parameter 'createUpdateSqlStoredProcedureParameters' when calling sqlResourcesCreateUpdateSqlStoredProcedure");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'containerName': containerName,
        'storedProcedureName': storedProcedureName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SqlStoredProcedureGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures/{storedProcedureName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlResourcesCreateUpdateSqlTrigger operation.
     * @callback module:api/DefaultApi~sqlResourcesCreateUpdateSqlTriggerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SqlTriggerGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an Azure Cosmos DB SQL trigger
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} containerName Cosmos DB container name.
     * @param {String} triggerName Cosmos DB trigger name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:model/SqlTriggerCreateUpdateParameters} createUpdateSqlTriggerParameters The parameters to provide for the current SQL trigger.
     * @param {module:api/DefaultApi~sqlResourcesCreateUpdateSqlTriggerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SqlTriggerGetResults}
     */
    sqlResourcesCreateUpdateSqlTrigger(subscriptionId, resourceGroupName, accountName, databaseName, containerName, triggerName, apiVersion, createUpdateSqlTriggerParameters, callback) {
      let postBody = createUpdateSqlTriggerParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlResourcesCreateUpdateSqlTrigger");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sqlResourcesCreateUpdateSqlTrigger");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sqlResourcesCreateUpdateSqlTrigger");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling sqlResourcesCreateUpdateSqlTrigger");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling sqlResourcesCreateUpdateSqlTrigger");
      }
      // verify the required parameter 'triggerName' is set
      if (triggerName === undefined || triggerName === null) {
        throw new Error("Missing the required parameter 'triggerName' when calling sqlResourcesCreateUpdateSqlTrigger");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlResourcesCreateUpdateSqlTrigger");
      }
      // verify the required parameter 'createUpdateSqlTriggerParameters' is set
      if (createUpdateSqlTriggerParameters === undefined || createUpdateSqlTriggerParameters === null) {
        throw new Error("Missing the required parameter 'createUpdateSqlTriggerParameters' when calling sqlResourcesCreateUpdateSqlTrigger");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'containerName': containerName,
        'triggerName': triggerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SqlTriggerGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers/{triggerName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlResourcesCreateUpdateSqlUserDefinedFunction operation.
     * @callback module:api/DefaultApi~sqlResourcesCreateUpdateSqlUserDefinedFunctionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SqlUserDefinedFunctionGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an Azure Cosmos DB SQL userDefinedFunction
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} containerName Cosmos DB container name.
     * @param {String} userDefinedFunctionName Cosmos DB userDefinedFunction name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:model/SqlUserDefinedFunctionCreateUpdateParameters} createUpdateSqlUserDefinedFunctionParameters The parameters to provide for the current SQL userDefinedFunction.
     * @param {module:api/DefaultApi~sqlResourcesCreateUpdateSqlUserDefinedFunctionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SqlUserDefinedFunctionGetResults}
     */
    sqlResourcesCreateUpdateSqlUserDefinedFunction(subscriptionId, resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, apiVersion, createUpdateSqlUserDefinedFunctionParameters, callback) {
      let postBody = createUpdateSqlUserDefinedFunctionParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlResourcesCreateUpdateSqlUserDefinedFunction");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sqlResourcesCreateUpdateSqlUserDefinedFunction");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sqlResourcesCreateUpdateSqlUserDefinedFunction");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling sqlResourcesCreateUpdateSqlUserDefinedFunction");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling sqlResourcesCreateUpdateSqlUserDefinedFunction");
      }
      // verify the required parameter 'userDefinedFunctionName' is set
      if (userDefinedFunctionName === undefined || userDefinedFunctionName === null) {
        throw new Error("Missing the required parameter 'userDefinedFunctionName' when calling sqlResourcesCreateUpdateSqlUserDefinedFunction");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlResourcesCreateUpdateSqlUserDefinedFunction");
      }
      // verify the required parameter 'createUpdateSqlUserDefinedFunctionParameters' is set
      if (createUpdateSqlUserDefinedFunctionParameters === undefined || createUpdateSqlUserDefinedFunctionParameters === null) {
        throw new Error("Missing the required parameter 'createUpdateSqlUserDefinedFunctionParameters' when calling sqlResourcesCreateUpdateSqlUserDefinedFunction");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'containerName': containerName,
        'userDefinedFunctionName': userDefinedFunctionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SqlUserDefinedFunctionGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions/{userDefinedFunctionName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlResourcesDeleteSqlContainer operation.
     * @callback module:api/DefaultApi~sqlResourcesDeleteSqlContainerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Azure Cosmos DB SQL container.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} containerName Cosmos DB container name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~sqlResourcesDeleteSqlContainerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sqlResourcesDeleteSqlContainer(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlResourcesDeleteSqlContainer");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sqlResourcesDeleteSqlContainer");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sqlResourcesDeleteSqlContainer");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling sqlResourcesDeleteSqlContainer");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling sqlResourcesDeleteSqlContainer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlResourcesDeleteSqlContainer");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'containerName': containerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlResourcesDeleteSqlDatabase operation.
     * @callback module:api/DefaultApi~sqlResourcesDeleteSqlDatabaseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Azure Cosmos DB SQL database.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~sqlResourcesDeleteSqlDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sqlResourcesDeleteSqlDatabase(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlResourcesDeleteSqlDatabase");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sqlResourcesDeleteSqlDatabase");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sqlResourcesDeleteSqlDatabase");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling sqlResourcesDeleteSqlDatabase");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlResourcesDeleteSqlDatabase");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlResourcesDeleteSqlStoredProcedure operation.
     * @callback module:api/DefaultApi~sqlResourcesDeleteSqlStoredProcedureCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Azure Cosmos DB SQL storedProcedure.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} containerName Cosmos DB container name.
     * @param {String} storedProcedureName Cosmos DB storedProcedure name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~sqlResourcesDeleteSqlStoredProcedureCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sqlResourcesDeleteSqlStoredProcedure(subscriptionId, resourceGroupName, accountName, databaseName, containerName, storedProcedureName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlResourcesDeleteSqlStoredProcedure");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sqlResourcesDeleteSqlStoredProcedure");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sqlResourcesDeleteSqlStoredProcedure");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling sqlResourcesDeleteSqlStoredProcedure");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling sqlResourcesDeleteSqlStoredProcedure");
      }
      // verify the required parameter 'storedProcedureName' is set
      if (storedProcedureName === undefined || storedProcedureName === null) {
        throw new Error("Missing the required parameter 'storedProcedureName' when calling sqlResourcesDeleteSqlStoredProcedure");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlResourcesDeleteSqlStoredProcedure");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'containerName': containerName,
        'storedProcedureName': storedProcedureName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures/{storedProcedureName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlResourcesDeleteSqlTrigger operation.
     * @callback module:api/DefaultApi~sqlResourcesDeleteSqlTriggerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Azure Cosmos DB SQL trigger.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} containerName Cosmos DB container name.
     * @param {String} triggerName Cosmos DB trigger name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~sqlResourcesDeleteSqlTriggerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sqlResourcesDeleteSqlTrigger(subscriptionId, resourceGroupName, accountName, databaseName, containerName, triggerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlResourcesDeleteSqlTrigger");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sqlResourcesDeleteSqlTrigger");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sqlResourcesDeleteSqlTrigger");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling sqlResourcesDeleteSqlTrigger");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling sqlResourcesDeleteSqlTrigger");
      }
      // verify the required parameter 'triggerName' is set
      if (triggerName === undefined || triggerName === null) {
        throw new Error("Missing the required parameter 'triggerName' when calling sqlResourcesDeleteSqlTrigger");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlResourcesDeleteSqlTrigger");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'containerName': containerName,
        'triggerName': triggerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers/{triggerName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlResourcesDeleteSqlUserDefinedFunction operation.
     * @callback module:api/DefaultApi~sqlResourcesDeleteSqlUserDefinedFunctionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Azure Cosmos DB SQL userDefinedFunction.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} containerName Cosmos DB container name.
     * @param {String} userDefinedFunctionName Cosmos DB userDefinedFunction name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~sqlResourcesDeleteSqlUserDefinedFunctionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sqlResourcesDeleteSqlUserDefinedFunction(subscriptionId, resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlResourcesDeleteSqlUserDefinedFunction");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sqlResourcesDeleteSqlUserDefinedFunction");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sqlResourcesDeleteSqlUserDefinedFunction");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling sqlResourcesDeleteSqlUserDefinedFunction");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling sqlResourcesDeleteSqlUserDefinedFunction");
      }
      // verify the required parameter 'userDefinedFunctionName' is set
      if (userDefinedFunctionName === undefined || userDefinedFunctionName === null) {
        throw new Error("Missing the required parameter 'userDefinedFunctionName' when calling sqlResourcesDeleteSqlUserDefinedFunction");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlResourcesDeleteSqlUserDefinedFunction");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'containerName': containerName,
        'userDefinedFunctionName': userDefinedFunctionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions/{userDefinedFunctionName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlResourcesGetSqlContainer operation.
     * @callback module:api/DefaultApi~sqlResourcesGetSqlContainerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SqlContainerGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the SQL container under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} containerName Cosmos DB container name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~sqlResourcesGetSqlContainerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SqlContainerGetResults}
     */
    sqlResourcesGetSqlContainer(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlResourcesGetSqlContainer");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sqlResourcesGetSqlContainer");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sqlResourcesGetSqlContainer");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling sqlResourcesGetSqlContainer");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling sqlResourcesGetSqlContainer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlResourcesGetSqlContainer");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'containerName': containerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SqlContainerGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlResourcesGetSqlContainerThroughput operation.
     * @callback module:api/DefaultApi~sqlResourcesGetSqlContainerThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThroughputSettingsGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the RUs per second of the SQL container under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} containerName Cosmos DB container name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~sqlResourcesGetSqlContainerThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThroughputSettingsGetResults}
     */
    sqlResourcesGetSqlContainerThroughput(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlResourcesGetSqlContainerThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sqlResourcesGetSqlContainerThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sqlResourcesGetSqlContainerThroughput");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling sqlResourcesGetSqlContainerThroughput");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling sqlResourcesGetSqlContainerThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlResourcesGetSqlContainerThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'containerName': containerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ThroughputSettingsGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/throughputSettings/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlResourcesGetSqlDatabase operation.
     * @callback module:api/DefaultApi~sqlResourcesGetSqlDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SqlDatabaseGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the SQL database under an existing Azure Cosmos DB database account with the provided name.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~sqlResourcesGetSqlDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SqlDatabaseGetResults}
     */
    sqlResourcesGetSqlDatabase(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlResourcesGetSqlDatabase");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sqlResourcesGetSqlDatabase");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sqlResourcesGetSqlDatabase");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling sqlResourcesGetSqlDatabase");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlResourcesGetSqlDatabase");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SqlDatabaseGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlResourcesGetSqlDatabaseThroughput operation.
     * @callback module:api/DefaultApi~sqlResourcesGetSqlDatabaseThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThroughputSettingsGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the RUs per second of the SQL database under an existing Azure Cosmos DB database account with the provided name.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~sqlResourcesGetSqlDatabaseThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThroughputSettingsGetResults}
     */
    sqlResourcesGetSqlDatabaseThroughput(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlResourcesGetSqlDatabaseThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sqlResourcesGetSqlDatabaseThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sqlResourcesGetSqlDatabaseThroughput");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling sqlResourcesGetSqlDatabaseThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlResourcesGetSqlDatabaseThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ThroughputSettingsGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/throughputSettings/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlResourcesGetSqlStoredProcedure operation.
     * @callback module:api/DefaultApi~sqlResourcesGetSqlStoredProcedureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SqlStoredProcedureGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the SQL storedProcedure under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} containerName Cosmos DB container name.
     * @param {String} storedProcedureName Cosmos DB storedProcedure name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~sqlResourcesGetSqlStoredProcedureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SqlStoredProcedureGetResults}
     */
    sqlResourcesGetSqlStoredProcedure(subscriptionId, resourceGroupName, accountName, databaseName, containerName, storedProcedureName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlResourcesGetSqlStoredProcedure");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sqlResourcesGetSqlStoredProcedure");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sqlResourcesGetSqlStoredProcedure");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling sqlResourcesGetSqlStoredProcedure");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling sqlResourcesGetSqlStoredProcedure");
      }
      // verify the required parameter 'storedProcedureName' is set
      if (storedProcedureName === undefined || storedProcedureName === null) {
        throw new Error("Missing the required parameter 'storedProcedureName' when calling sqlResourcesGetSqlStoredProcedure");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlResourcesGetSqlStoredProcedure");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'containerName': containerName,
        'storedProcedureName': storedProcedureName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SqlStoredProcedureGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures/{storedProcedureName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlResourcesGetSqlTrigger operation.
     * @callback module:api/DefaultApi~sqlResourcesGetSqlTriggerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SqlTriggerGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the SQL trigger under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} containerName Cosmos DB container name.
     * @param {String} triggerName Cosmos DB trigger name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~sqlResourcesGetSqlTriggerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SqlTriggerGetResults}
     */
    sqlResourcesGetSqlTrigger(subscriptionId, resourceGroupName, accountName, databaseName, containerName, triggerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlResourcesGetSqlTrigger");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sqlResourcesGetSqlTrigger");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sqlResourcesGetSqlTrigger");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling sqlResourcesGetSqlTrigger");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling sqlResourcesGetSqlTrigger");
      }
      // verify the required parameter 'triggerName' is set
      if (triggerName === undefined || triggerName === null) {
        throw new Error("Missing the required parameter 'triggerName' when calling sqlResourcesGetSqlTrigger");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlResourcesGetSqlTrigger");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'containerName': containerName,
        'triggerName': triggerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SqlTriggerGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers/{triggerName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlResourcesGetSqlUserDefinedFunction operation.
     * @callback module:api/DefaultApi~sqlResourcesGetSqlUserDefinedFunctionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SqlUserDefinedFunctionGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the SQL userDefinedFunction under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} containerName Cosmos DB container name.
     * @param {String} userDefinedFunctionName Cosmos DB userDefinedFunction name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~sqlResourcesGetSqlUserDefinedFunctionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SqlUserDefinedFunctionGetResults}
     */
    sqlResourcesGetSqlUserDefinedFunction(subscriptionId, resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlResourcesGetSqlUserDefinedFunction");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sqlResourcesGetSqlUserDefinedFunction");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sqlResourcesGetSqlUserDefinedFunction");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling sqlResourcesGetSqlUserDefinedFunction");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling sqlResourcesGetSqlUserDefinedFunction");
      }
      // verify the required parameter 'userDefinedFunctionName' is set
      if (userDefinedFunctionName === undefined || userDefinedFunctionName === null) {
        throw new Error("Missing the required parameter 'userDefinedFunctionName' when calling sqlResourcesGetSqlUserDefinedFunction");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlResourcesGetSqlUserDefinedFunction");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'containerName': containerName,
        'userDefinedFunctionName': userDefinedFunctionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SqlUserDefinedFunctionGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions/{userDefinedFunctionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlResourcesListSqlContainers operation.
     * @callback module:api/DefaultApi~sqlResourcesListSqlContainersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SqlContainerListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the SQL container under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~sqlResourcesListSqlContainersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SqlContainerListResult}
     */
    sqlResourcesListSqlContainers(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlResourcesListSqlContainers");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sqlResourcesListSqlContainers");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sqlResourcesListSqlContainers");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling sqlResourcesListSqlContainers");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlResourcesListSqlContainers");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SqlContainerListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlResourcesListSqlDatabases operation.
     * @callback module:api/DefaultApi~sqlResourcesListSqlDatabasesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SqlDatabaseListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the SQL databases under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~sqlResourcesListSqlDatabasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SqlDatabaseListResult}
     */
    sqlResourcesListSqlDatabases(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlResourcesListSqlDatabases");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sqlResourcesListSqlDatabases");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sqlResourcesListSqlDatabases");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlResourcesListSqlDatabases");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SqlDatabaseListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlResourcesListSqlStoredProcedures operation.
     * @callback module:api/DefaultApi~sqlResourcesListSqlStoredProceduresCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SqlStoredProcedureListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the SQL storedProcedure under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} containerName Cosmos DB container name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~sqlResourcesListSqlStoredProceduresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SqlStoredProcedureListResult}
     */
    sqlResourcesListSqlStoredProcedures(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlResourcesListSqlStoredProcedures");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sqlResourcesListSqlStoredProcedures");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sqlResourcesListSqlStoredProcedures");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling sqlResourcesListSqlStoredProcedures");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling sqlResourcesListSqlStoredProcedures");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlResourcesListSqlStoredProcedures");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'containerName': containerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SqlStoredProcedureListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlResourcesListSqlTriggers operation.
     * @callback module:api/DefaultApi~sqlResourcesListSqlTriggersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SqlTriggerListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the SQL trigger under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} containerName Cosmos DB container name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~sqlResourcesListSqlTriggersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SqlTriggerListResult}
     */
    sqlResourcesListSqlTriggers(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlResourcesListSqlTriggers");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sqlResourcesListSqlTriggers");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sqlResourcesListSqlTriggers");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling sqlResourcesListSqlTriggers");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling sqlResourcesListSqlTriggers");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlResourcesListSqlTriggers");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'containerName': containerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SqlTriggerListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlResourcesListSqlUserDefinedFunctions operation.
     * @callback module:api/DefaultApi~sqlResourcesListSqlUserDefinedFunctionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SqlUserDefinedFunctionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the SQL userDefinedFunction under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} containerName Cosmos DB container name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~sqlResourcesListSqlUserDefinedFunctionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SqlUserDefinedFunctionListResult}
     */
    sqlResourcesListSqlUserDefinedFunctions(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlResourcesListSqlUserDefinedFunctions");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sqlResourcesListSqlUserDefinedFunctions");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sqlResourcesListSqlUserDefinedFunctions");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling sqlResourcesListSqlUserDefinedFunctions");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling sqlResourcesListSqlUserDefinedFunctions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlResourcesListSqlUserDefinedFunctions");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'containerName': containerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SqlUserDefinedFunctionListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlResourcesUpdateSqlContainerThroughput operation.
     * @callback module:api/DefaultApi~sqlResourcesUpdateSqlContainerThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThroughputSettingsGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update RUs per second of an Azure Cosmos DB SQL container
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} containerName Cosmos DB container name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:model/ThroughputSettingsUpdateParameters} updateThroughputParameters The parameters to provide for the RUs per second of the current SQL container.
     * @param {module:api/DefaultApi~sqlResourcesUpdateSqlContainerThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThroughputSettingsGetResults}
     */
    sqlResourcesUpdateSqlContainerThroughput(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, updateThroughputParameters, callback) {
      let postBody = updateThroughputParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlResourcesUpdateSqlContainerThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sqlResourcesUpdateSqlContainerThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sqlResourcesUpdateSqlContainerThroughput");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling sqlResourcesUpdateSqlContainerThroughput");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling sqlResourcesUpdateSqlContainerThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlResourcesUpdateSqlContainerThroughput");
      }
      // verify the required parameter 'updateThroughputParameters' is set
      if (updateThroughputParameters === undefined || updateThroughputParameters === null) {
        throw new Error("Missing the required parameter 'updateThroughputParameters' when calling sqlResourcesUpdateSqlContainerThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'containerName': containerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ThroughputSettingsGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/throughputSettings/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlResourcesUpdateSqlDatabaseThroughput operation.
     * @callback module:api/DefaultApi~sqlResourcesUpdateSqlDatabaseThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThroughputSettingsGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update RUs per second of an Azure Cosmos DB SQL database
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:model/ThroughputSettingsUpdateParameters} updateThroughputParameters The parameters to provide for the RUs per second of the current SQL database.
     * @param {module:api/DefaultApi~sqlResourcesUpdateSqlDatabaseThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThroughputSettingsGetResults}
     */
    sqlResourcesUpdateSqlDatabaseThroughput(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters, callback) {
      let postBody = updateThroughputParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlResourcesUpdateSqlDatabaseThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sqlResourcesUpdateSqlDatabaseThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sqlResourcesUpdateSqlDatabaseThroughput");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling sqlResourcesUpdateSqlDatabaseThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlResourcesUpdateSqlDatabaseThroughput");
      }
      // verify the required parameter 'updateThroughputParameters' is set
      if (updateThroughputParameters === undefined || updateThroughputParameters === null) {
        throw new Error("Missing the required parameter 'updateThroughputParameters' when calling sqlResourcesUpdateSqlDatabaseThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ThroughputSettingsGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/throughputSettings/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tableResourcesCreateUpdateTable operation.
     * @callback module:api/DefaultApi~tableResourcesCreateUpdateTableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TableGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an Azure Cosmos DB Table
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} tableName Cosmos DB table name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:model/TableCreateUpdateParameters} createUpdateTableParameters The parameters to provide for the current Table.
     * @param {module:api/DefaultApi~tableResourcesCreateUpdateTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TableGetResults}
     */
    tableResourcesCreateUpdateTable(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, createUpdateTableParameters, callback) {
      let postBody = createUpdateTableParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling tableResourcesCreateUpdateTable");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling tableResourcesCreateUpdateTable");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling tableResourcesCreateUpdateTable");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling tableResourcesCreateUpdateTable");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tableResourcesCreateUpdateTable");
      }
      // verify the required parameter 'createUpdateTableParameters' is set
      if (createUpdateTableParameters === undefined || createUpdateTableParameters === null) {
        throw new Error("Missing the required parameter 'createUpdateTableParameters' when calling tableResourcesCreateUpdateTable");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'tableName': tableName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TableGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tableResourcesDeleteTable operation.
     * @callback module:api/DefaultApi~tableResourcesDeleteTableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Azure Cosmos DB Table.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} tableName Cosmos DB table name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~tableResourcesDeleteTableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tableResourcesDeleteTable(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling tableResourcesDeleteTable");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling tableResourcesDeleteTable");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling tableResourcesDeleteTable");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling tableResourcesDeleteTable");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tableResourcesDeleteTable");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'tableName': tableName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tableResourcesGetTable operation.
     * @callback module:api/DefaultApi~tableResourcesGetTableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TableGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Tables under an existing Azure Cosmos DB database account with the provided name.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} tableName Cosmos DB table name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~tableResourcesGetTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TableGetResults}
     */
    tableResourcesGetTable(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling tableResourcesGetTable");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling tableResourcesGetTable");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling tableResourcesGetTable");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling tableResourcesGetTable");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tableResourcesGetTable");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'tableName': tableName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TableGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tableResourcesGetTableThroughput operation.
     * @callback module:api/DefaultApi~tableResourcesGetTableThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThroughputSettingsGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the RUs per second of the Table under an existing Azure Cosmos DB database account with the provided name.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} tableName Cosmos DB table name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~tableResourcesGetTableThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThroughputSettingsGetResults}
     */
    tableResourcesGetTableThroughput(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling tableResourcesGetTableThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling tableResourcesGetTableThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling tableResourcesGetTableThroughput");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling tableResourcesGetTableThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tableResourcesGetTableThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'tableName': tableName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ThroughputSettingsGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}/throughputSettings/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tableResourcesListTables operation.
     * @callback module:api/DefaultApi~tableResourcesListTablesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TableListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the Tables under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:api/DefaultApi~tableResourcesListTablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TableListResult}
     */
    tableResourcesListTables(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling tableResourcesListTables");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling tableResourcesListTables");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling tableResourcesListTables");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tableResourcesListTables");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TableListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tableResourcesUpdateTableThroughput operation.
     * @callback module:api/DefaultApi~tableResourcesUpdateTableThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThroughputSettingsGetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update RUs per second of an Azure Cosmos DB Table
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} tableName Cosmos DB table name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-08-01.
     * @param {module:model/ThroughputSettingsUpdateParameters} updateThroughputParameters The parameters to provide for the RUs per second of the current Table.
     * @param {module:api/DefaultApi~tableResourcesUpdateTableThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThroughputSettingsGetResults}
     */
    tableResourcesUpdateTableThroughput(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, updateThroughputParameters, callback) {
      let postBody = updateThroughputParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling tableResourcesUpdateTableThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling tableResourcesUpdateTableThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling tableResourcesUpdateTableThroughput");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling tableResourcesUpdateTableThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tableResourcesUpdateTableThroughput");
      }
      // verify the required parameter 'updateThroughputParameters' is set
      if (updateThroughputParameters === undefined || updateThroughputParameters === null) {
        throw new Error("Missing the required parameter 'updateThroughputParameters' when calling tableResourcesUpdateTableThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'tableName': tableName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ThroughputSettingsGetResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}/throughputSettings/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
