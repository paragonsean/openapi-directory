# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.capability import Capability
from openapi_server import util


class DatabaseAccountPatchProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capabilities: List[Capability]=None):
        """DatabaseAccountPatchProperties - a model defined in OpenAPI

        :param capabilities: The capabilities of this DatabaseAccountPatchProperties.
        """
        self.openapi_types = {
            'capabilities': List[Capability]
        }

        self.attribute_map = {
            'capabilities': 'capabilities'
        }

        self._capabilities = capabilities

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseAccountPatchProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseAccountPatchProperties of this DatabaseAccountPatchProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capabilities(self):
        """Gets the capabilities of this DatabaseAccountPatchProperties.

        List of Cosmos DB capabilities for the account

        :return: The capabilities of this DatabaseAccountPatchProperties.
        :rtype: List[Capability]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this DatabaseAccountPatchProperties.

        List of Cosmos DB capabilities for the account

        :param capabilities: The capabilities of this DatabaseAccountPatchProperties.
        :type capabilities: List[Capability]
        """

        self._capabilities = capabilities
