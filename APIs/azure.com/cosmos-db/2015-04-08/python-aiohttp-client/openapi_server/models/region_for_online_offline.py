# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegionForOnlineOffline(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, region: str=None):
        """RegionForOnlineOffline - a model defined in OpenAPI

        :param region: The region of this RegionForOnlineOffline.
        """
        self.openapi_types = {
            'region': str
        }

        self.attribute_map = {
            'region': 'region'
        }

        self._region = region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegionForOnlineOffline':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegionForOnlineOffline of this RegionForOnlineOffline.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def region(self):
        """Gets the region of this RegionForOnlineOffline.

        Cosmos DB region, with spaces between words and each word capitalized.

        :return: The region of this RegionForOnlineOffline.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this RegionForOnlineOffline.

        Cosmos DB region, with spaces between words and each word capitalized.

        :param region: The region of this RegionForOnlineOffline.
        :type region: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")

        self._region = region
