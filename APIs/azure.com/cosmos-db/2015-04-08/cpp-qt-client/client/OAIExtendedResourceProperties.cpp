/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2015-04-08
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtendedResourceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtendedResourceProperties::OAIExtendedResourceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtendedResourceProperties::OAIExtendedResourceProperties() {
    this->initializeModel();
}

OAIExtendedResourceProperties::~OAIExtendedResourceProperties() {}

void OAIExtendedResourceProperties::initializeModel() {

    m__etag_isSet = false;
    m__etag_isValid = false;

    m__rid_isSet = false;
    m__rid_isValid = false;

    m__ts_isSet = false;
    m__ts_isValid = false;
}

void OAIExtendedResourceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtendedResourceProperties::fromJsonObject(QJsonObject json) {

    m__etag_isValid = ::OpenAPI::fromJsonValue(m__etag, json[QString("_etag")]);
    m__etag_isSet = !json[QString("_etag")].isNull() && m__etag_isValid;

    m__rid_isValid = ::OpenAPI::fromJsonValue(m__rid, json[QString("_rid")]);
    m__rid_isSet = !json[QString("_rid")].isNull() && m__rid_isValid;

    m__ts_isValid = ::OpenAPI::fromJsonValue(m__ts, json[QString("_ts")]);
    m__ts_isSet = !json[QString("_ts")].isNull() && m__ts_isValid;
}

QString OAIExtendedResourceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtendedResourceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m__etag_isSet) {
        obj.insert(QString("_etag"), ::OpenAPI::toJsonValue(m__etag));
    }
    if (m__rid_isSet) {
        obj.insert(QString("_rid"), ::OpenAPI::toJsonValue(m__rid));
    }
    if (m__ts_isSet) {
        obj.insert(QString("_ts"), ::OpenAPI::toJsonValue(m__ts));
    }
    return obj;
}

QString OAIExtendedResourceProperties::getEtag() const {
    return m__etag;
}
void OAIExtendedResourceProperties::setEtag(const QString &_etag) {
    m__etag = _etag;
    m__etag_isSet = true;
}

bool OAIExtendedResourceProperties::is__etag_Set() const{
    return m__etag_isSet;
}

bool OAIExtendedResourceProperties::is__etag_Valid() const{
    return m__etag_isValid;
}

QString OAIExtendedResourceProperties::getRid() const {
    return m__rid;
}
void OAIExtendedResourceProperties::setRid(const QString &_rid) {
    m__rid = _rid;
    m__rid_isSet = true;
}

bool OAIExtendedResourceProperties::is__rid_Set() const{
    return m__rid_isSet;
}

bool OAIExtendedResourceProperties::is__rid_Valid() const{
    return m__rid_isValid;
}

OAIObject OAIExtendedResourceProperties::getTs() const {
    return m__ts;
}
void OAIExtendedResourceProperties::setTs(const OAIObject &_ts) {
    m__ts = _ts;
    m__ts_isSet = true;
}

bool OAIExtendedResourceProperties::is__ts_Set() const{
    return m__ts_isSet;
}

bool OAIExtendedResourceProperties::is__ts_Valid() const{
    return m__ts_isValid;
}

bool OAIExtendedResourceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__rid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__ts_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtendedResourceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
