/*
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2015-04-08
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Capability;
import org.openapitools.client.model.ConnectorOffer;
import org.openapitools.client.model.ConsistencyPolicy;
import org.openapitools.client.model.DatabaseAccountOfferType;
import org.openapitools.client.model.FailoverPolicy;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.VirtualNetworkRule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties for the database account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:36:04.338155-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatabaseAccountProperties {
  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private List<Capability> capabilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONNECTOR_OFFER = "connectorOffer";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_OFFER)
  private ConnectorOffer connectorOffer;

  public static final String SERIALIZED_NAME_CONSISTENCY_POLICY = "consistencyPolicy";
  @SerializedName(SERIALIZED_NAME_CONSISTENCY_POLICY)
  private ConsistencyPolicy consistencyPolicy;

  public static final String SERIALIZED_NAME_DATABASE_ACCOUNT_OFFER_TYPE = "databaseAccountOfferType";
  @SerializedName(SERIALIZED_NAME_DATABASE_ACCOUNT_OFFER_TYPE)
  private DatabaseAccountOfferType databaseAccountOfferType;

  public static final String SERIALIZED_NAME_DOCUMENT_ENDPOINT = "documentEndpoint";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ENDPOINT)
  private String documentEndpoint;

  public static final String SERIALIZED_NAME_ENABLE_AUTOMATIC_FAILOVER = "enableAutomaticFailover";
  @SerializedName(SERIALIZED_NAME_ENABLE_AUTOMATIC_FAILOVER)
  private Boolean enableAutomaticFailover;

  public static final String SERIALIZED_NAME_ENABLE_CASSANDRA_CONNECTOR = "enableCassandraConnector";
  @SerializedName(SERIALIZED_NAME_ENABLE_CASSANDRA_CONNECTOR)
  private Boolean enableCassandraConnector;

  public static final String SERIALIZED_NAME_ENABLE_MULTIPLE_WRITE_LOCATIONS = "enableMultipleWriteLocations";
  @SerializedName(SERIALIZED_NAME_ENABLE_MULTIPLE_WRITE_LOCATIONS)
  private Boolean enableMultipleWriteLocations;

  public static final String SERIALIZED_NAME_FAILOVER_POLICIES = "failoverPolicies";
  @SerializedName(SERIALIZED_NAME_FAILOVER_POLICIES)
  private List<FailoverPolicy> failoverPolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_IP_RANGE_FILTER = "ipRangeFilter";
  @SerializedName(SERIALIZED_NAME_IP_RANGE_FILTER)
  private String ipRangeFilter;

  public static final String SERIALIZED_NAME_IS_VIRTUAL_NETWORK_FILTER_ENABLED = "isVirtualNetworkFilterEnabled";
  @SerializedName(SERIALIZED_NAME_IS_VIRTUAL_NETWORK_FILTER_ENABLED)
  private Boolean isVirtualNetworkFilterEnabled;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_READ_LOCATIONS = "readLocations";
  @SerializedName(SERIALIZED_NAME_READ_LOCATIONS)
  private List<Location> readLocations = new ArrayList<>();

  public static final String SERIALIZED_NAME_VIRTUAL_NETWORK_RULES = "virtualNetworkRules";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NETWORK_RULES)
  private List<VirtualNetworkRule> virtualNetworkRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_WRITE_LOCATIONS = "writeLocations";
  @SerializedName(SERIALIZED_NAME_WRITE_LOCATIONS)
  private List<Location> writeLocations = new ArrayList<>();

  public DatabaseAccountProperties() {
  }

  public DatabaseAccountProperties(
     String documentEndpoint, 
     List<FailoverPolicy> failoverPolicies, 
     List<Location> readLocations, 
     List<Location> writeLocations
  ) {
    this();
    this.documentEndpoint = documentEndpoint;
    this.failoverPolicies = failoverPolicies;
    this.readLocations = readLocations;
    this.writeLocations = writeLocations;
  }

  public DatabaseAccountProperties capabilities(List<Capability> capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  public DatabaseAccountProperties addCapabilitiesItem(Capability capabilitiesItem) {
    if (this.capabilities == null) {
      this.capabilities = new ArrayList<>();
    }
    this.capabilities.add(capabilitiesItem);
    return this;
  }

  /**
   * List of Cosmos DB capabilities for the account
   * @return capabilities
   */
  @javax.annotation.Nullable
  public List<Capability> getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(List<Capability> capabilities) {
    this.capabilities = capabilities;
  }


  public DatabaseAccountProperties connectorOffer(ConnectorOffer connectorOffer) {
    this.connectorOffer = connectorOffer;
    return this;
  }

  /**
   * Get connectorOffer
   * @return connectorOffer
   */
  @javax.annotation.Nullable
  public ConnectorOffer getConnectorOffer() {
    return connectorOffer;
  }

  public void setConnectorOffer(ConnectorOffer connectorOffer) {
    this.connectorOffer = connectorOffer;
  }


  public DatabaseAccountProperties consistencyPolicy(ConsistencyPolicy consistencyPolicy) {
    this.consistencyPolicy = consistencyPolicy;
    return this;
  }

  /**
   * Get consistencyPolicy
   * @return consistencyPolicy
   */
  @javax.annotation.Nullable
  public ConsistencyPolicy getConsistencyPolicy() {
    return consistencyPolicy;
  }

  public void setConsistencyPolicy(ConsistencyPolicy consistencyPolicy) {
    this.consistencyPolicy = consistencyPolicy;
  }


  public DatabaseAccountProperties databaseAccountOfferType(DatabaseAccountOfferType databaseAccountOfferType) {
    this.databaseAccountOfferType = databaseAccountOfferType;
    return this;
  }

  /**
   * Get databaseAccountOfferType
   * @return databaseAccountOfferType
   */
  @javax.annotation.Nullable
  public DatabaseAccountOfferType getDatabaseAccountOfferType() {
    return databaseAccountOfferType;
  }

  public void setDatabaseAccountOfferType(DatabaseAccountOfferType databaseAccountOfferType) {
    this.databaseAccountOfferType = databaseAccountOfferType;
  }


  /**
   * The connection endpoint for the Cosmos DB database account.
   * @return documentEndpoint
   */
  @javax.annotation.Nullable
  public String getDocumentEndpoint() {
    return documentEndpoint;
  }



  public DatabaseAccountProperties enableAutomaticFailover(Boolean enableAutomaticFailover) {
    this.enableAutomaticFailover = enableAutomaticFailover;
    return this;
  }

  /**
   * Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.
   * @return enableAutomaticFailover
   */
  @javax.annotation.Nullable
  public Boolean getEnableAutomaticFailover() {
    return enableAutomaticFailover;
  }

  public void setEnableAutomaticFailover(Boolean enableAutomaticFailover) {
    this.enableAutomaticFailover = enableAutomaticFailover;
  }


  public DatabaseAccountProperties enableCassandraConnector(Boolean enableCassandraConnector) {
    this.enableCassandraConnector = enableCassandraConnector;
    return this;
  }

  /**
   * Enables the cassandra connector on the Cosmos DB C* account
   * @return enableCassandraConnector
   */
  @javax.annotation.Nullable
  public Boolean getEnableCassandraConnector() {
    return enableCassandraConnector;
  }

  public void setEnableCassandraConnector(Boolean enableCassandraConnector) {
    this.enableCassandraConnector = enableCassandraConnector;
  }


  public DatabaseAccountProperties enableMultipleWriteLocations(Boolean enableMultipleWriteLocations) {
    this.enableMultipleWriteLocations = enableMultipleWriteLocations;
    return this;
  }

  /**
   * Enables the account to write in multiple locations
   * @return enableMultipleWriteLocations
   */
  @javax.annotation.Nullable
  public Boolean getEnableMultipleWriteLocations() {
    return enableMultipleWriteLocations;
  }

  public void setEnableMultipleWriteLocations(Boolean enableMultipleWriteLocations) {
    this.enableMultipleWriteLocations = enableMultipleWriteLocations;
  }


  /**
   * An array that contains the regions ordered by their failover priorities.
   * @return failoverPolicies
   */
  @javax.annotation.Nullable
  public List<FailoverPolicy> getFailoverPolicies() {
    return failoverPolicies;
  }



  public DatabaseAccountProperties ipRangeFilter(String ipRangeFilter) {
    this.ipRangeFilter = ipRangeFilter;
    return this;
  }

  /**
   * Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.
   * @return ipRangeFilter
   */
  @javax.annotation.Nullable
  public String getIpRangeFilter() {
    return ipRangeFilter;
  }

  public void setIpRangeFilter(String ipRangeFilter) {
    this.ipRangeFilter = ipRangeFilter;
  }


  public DatabaseAccountProperties isVirtualNetworkFilterEnabled(Boolean isVirtualNetworkFilterEnabled) {
    this.isVirtualNetworkFilterEnabled = isVirtualNetworkFilterEnabled;
    return this;
  }

  /**
   * Flag to indicate whether to enable/disable Virtual Network ACL rules.
   * @return isVirtualNetworkFilterEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsVirtualNetworkFilterEnabled() {
    return isVirtualNetworkFilterEnabled;
  }

  public void setIsVirtualNetworkFilterEnabled(Boolean isVirtualNetworkFilterEnabled) {
    this.isVirtualNetworkFilterEnabled = isVirtualNetworkFilterEnabled;
  }


  public DatabaseAccountProperties provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * The status of the Cosmos DB account at the time the operation was called. The status can be one of following. &#39;Creating&#39; – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. &#39;Succeeded&#39; – the Cosmos DB account is active for use. &#39;Updating&#39; – the Cosmos DB account is being updated. &#39;Deleting&#39; – the Cosmos DB account is being deleted. &#39;Failed&#39; – the Cosmos DB account failed creation.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  /**
   * An array that contains of the read locations enabled for the Cosmos DB account.
   * @return readLocations
   */
  @javax.annotation.Nullable
  public List<Location> getReadLocations() {
    return readLocations;
  }



  public DatabaseAccountProperties virtualNetworkRules(List<VirtualNetworkRule> virtualNetworkRules) {
    this.virtualNetworkRules = virtualNetworkRules;
    return this;
  }

  public DatabaseAccountProperties addVirtualNetworkRulesItem(VirtualNetworkRule virtualNetworkRulesItem) {
    if (this.virtualNetworkRules == null) {
      this.virtualNetworkRules = new ArrayList<>();
    }
    this.virtualNetworkRules.add(virtualNetworkRulesItem);
    return this;
  }

  /**
   * List of Virtual Network ACL rules configured for the Cosmos DB account.
   * @return virtualNetworkRules
   */
  @javax.annotation.Nullable
  public List<VirtualNetworkRule> getVirtualNetworkRules() {
    return virtualNetworkRules;
  }

  public void setVirtualNetworkRules(List<VirtualNetworkRule> virtualNetworkRules) {
    this.virtualNetworkRules = virtualNetworkRules;
  }


  /**
   * An array that contains the write location for the Cosmos DB account.
   * @return writeLocations
   */
  @javax.annotation.Nullable
  public List<Location> getWriteLocations() {
    return writeLocations;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseAccountProperties databaseAccountProperties = (DatabaseAccountProperties) o;
    return Objects.equals(this.capabilities, databaseAccountProperties.capabilities) &&
        Objects.equals(this.connectorOffer, databaseAccountProperties.connectorOffer) &&
        Objects.equals(this.consistencyPolicy, databaseAccountProperties.consistencyPolicy) &&
        Objects.equals(this.databaseAccountOfferType, databaseAccountProperties.databaseAccountOfferType) &&
        Objects.equals(this.documentEndpoint, databaseAccountProperties.documentEndpoint) &&
        Objects.equals(this.enableAutomaticFailover, databaseAccountProperties.enableAutomaticFailover) &&
        Objects.equals(this.enableCassandraConnector, databaseAccountProperties.enableCassandraConnector) &&
        Objects.equals(this.enableMultipleWriteLocations, databaseAccountProperties.enableMultipleWriteLocations) &&
        Objects.equals(this.failoverPolicies, databaseAccountProperties.failoverPolicies) &&
        Objects.equals(this.ipRangeFilter, databaseAccountProperties.ipRangeFilter) &&
        Objects.equals(this.isVirtualNetworkFilterEnabled, databaseAccountProperties.isVirtualNetworkFilterEnabled) &&
        Objects.equals(this.provisioningState, databaseAccountProperties.provisioningState) &&
        Objects.equals(this.readLocations, databaseAccountProperties.readLocations) &&
        Objects.equals(this.virtualNetworkRules, databaseAccountProperties.virtualNetworkRules) &&
        Objects.equals(this.writeLocations, databaseAccountProperties.writeLocations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capabilities, connectorOffer, consistencyPolicy, databaseAccountOfferType, documentEndpoint, enableAutomaticFailover, enableCassandraConnector, enableMultipleWriteLocations, failoverPolicies, ipRangeFilter, isVirtualNetworkFilterEnabled, provisioningState, readLocations, virtualNetworkRules, writeLocations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseAccountProperties {\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    connectorOffer: ").append(toIndentedString(connectorOffer)).append("\n");
    sb.append("    consistencyPolicy: ").append(toIndentedString(consistencyPolicy)).append("\n");
    sb.append("    databaseAccountOfferType: ").append(toIndentedString(databaseAccountOfferType)).append("\n");
    sb.append("    documentEndpoint: ").append(toIndentedString(documentEndpoint)).append("\n");
    sb.append("    enableAutomaticFailover: ").append(toIndentedString(enableAutomaticFailover)).append("\n");
    sb.append("    enableCassandraConnector: ").append(toIndentedString(enableCassandraConnector)).append("\n");
    sb.append("    enableMultipleWriteLocations: ").append(toIndentedString(enableMultipleWriteLocations)).append("\n");
    sb.append("    failoverPolicies: ").append(toIndentedString(failoverPolicies)).append("\n");
    sb.append("    ipRangeFilter: ").append(toIndentedString(ipRangeFilter)).append("\n");
    sb.append("    isVirtualNetworkFilterEnabled: ").append(toIndentedString(isVirtualNetworkFilterEnabled)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    readLocations: ").append(toIndentedString(readLocations)).append("\n");
    sb.append("    virtualNetworkRules: ").append(toIndentedString(virtualNetworkRules)).append("\n");
    sb.append("    writeLocations: ").append(toIndentedString(writeLocations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capabilities");
    openapiFields.add("connectorOffer");
    openapiFields.add("consistencyPolicy");
    openapiFields.add("databaseAccountOfferType");
    openapiFields.add("documentEndpoint");
    openapiFields.add("enableAutomaticFailover");
    openapiFields.add("enableCassandraConnector");
    openapiFields.add("enableMultipleWriteLocations");
    openapiFields.add("failoverPolicies");
    openapiFields.add("ipRangeFilter");
    openapiFields.add("isVirtualNetworkFilterEnabled");
    openapiFields.add("provisioningState");
    openapiFields.add("readLocations");
    openapiFields.add("virtualNetworkRules");
    openapiFields.add("writeLocations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatabaseAccountProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatabaseAccountProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatabaseAccountProperties is not found in the empty JSON string", DatabaseAccountProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatabaseAccountProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatabaseAccountProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("capabilities") != null && !jsonObj.get("capabilities").isJsonNull()) {
        JsonArray jsonArraycapabilities = jsonObj.getAsJsonArray("capabilities");
        if (jsonArraycapabilities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("capabilities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `capabilities` to be an array in the JSON string but got `%s`", jsonObj.get("capabilities").toString()));
          }

          // validate the optional field `capabilities` (array)
          for (int i = 0; i < jsonArraycapabilities.size(); i++) {
            Capability.validateJsonElement(jsonArraycapabilities.get(i));
          };
        }
      }
      // validate the optional field `connectorOffer`
      if (jsonObj.get("connectorOffer") != null && !jsonObj.get("connectorOffer").isJsonNull()) {
        ConnectorOffer.validateJsonElement(jsonObj.get("connectorOffer"));
      }
      // validate the optional field `consistencyPolicy`
      if (jsonObj.get("consistencyPolicy") != null && !jsonObj.get("consistencyPolicy").isJsonNull()) {
        ConsistencyPolicy.validateJsonElement(jsonObj.get("consistencyPolicy"));
      }
      // validate the optional field `databaseAccountOfferType`
      if (jsonObj.get("databaseAccountOfferType") != null && !jsonObj.get("databaseAccountOfferType").isJsonNull()) {
        DatabaseAccountOfferType.validateJsonElement(jsonObj.get("databaseAccountOfferType"));
      }
      if ((jsonObj.get("documentEndpoint") != null && !jsonObj.get("documentEndpoint").isJsonNull()) && !jsonObj.get("documentEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentEndpoint").toString()));
      }
      if (jsonObj.get("failoverPolicies") != null && !jsonObj.get("failoverPolicies").isJsonNull()) {
        JsonArray jsonArrayfailoverPolicies = jsonObj.getAsJsonArray("failoverPolicies");
        if (jsonArrayfailoverPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("failoverPolicies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `failoverPolicies` to be an array in the JSON string but got `%s`", jsonObj.get("failoverPolicies").toString()));
          }

          // validate the optional field `failoverPolicies` (array)
          for (int i = 0; i < jsonArrayfailoverPolicies.size(); i++) {
            FailoverPolicy.validateJsonElement(jsonArrayfailoverPolicies.get(i));
          };
        }
      }
      if ((jsonObj.get("ipRangeFilter") != null && !jsonObj.get("ipRangeFilter").isJsonNull()) && !jsonObj.get("ipRangeFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipRangeFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipRangeFilter").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if (jsonObj.get("readLocations") != null && !jsonObj.get("readLocations").isJsonNull()) {
        JsonArray jsonArrayreadLocations = jsonObj.getAsJsonArray("readLocations");
        if (jsonArrayreadLocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("readLocations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `readLocations` to be an array in the JSON string but got `%s`", jsonObj.get("readLocations").toString()));
          }

          // validate the optional field `readLocations` (array)
          for (int i = 0; i < jsonArrayreadLocations.size(); i++) {
            Location.validateJsonElement(jsonArrayreadLocations.get(i));
          };
        }
      }
      if (jsonObj.get("virtualNetworkRules") != null && !jsonObj.get("virtualNetworkRules").isJsonNull()) {
        JsonArray jsonArrayvirtualNetworkRules = jsonObj.getAsJsonArray("virtualNetworkRules");
        if (jsonArrayvirtualNetworkRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("virtualNetworkRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `virtualNetworkRules` to be an array in the JSON string but got `%s`", jsonObj.get("virtualNetworkRules").toString()));
          }

          // validate the optional field `virtualNetworkRules` (array)
          for (int i = 0; i < jsonArrayvirtualNetworkRules.size(); i++) {
            VirtualNetworkRule.validateJsonElement(jsonArrayvirtualNetworkRules.get(i));
          };
        }
      }
      if (jsonObj.get("writeLocations") != null && !jsonObj.get("writeLocations").isJsonNull()) {
        JsonArray jsonArraywriteLocations = jsonObj.getAsJsonArray("writeLocations");
        if (jsonArraywriteLocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("writeLocations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `writeLocations` to be an array in the JSON string but got `%s`", jsonObj.get("writeLocations").toString()));
          }

          // validate the optional field `writeLocations` (array)
          for (int i = 0; i < jsonArraywriteLocations.size(); i++) {
            Location.validateJsonElement(jsonArraywriteLocations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatabaseAccountProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatabaseAccountProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatabaseAccountProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatabaseAccountProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DatabaseAccountProperties>() {
           @Override
           public void write(JsonWriter out, DatabaseAccountProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatabaseAccountProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatabaseAccountProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatabaseAccountProperties
   * @throws IOException if the JSON string is invalid with respect to DatabaseAccountProperties
   */
  public static DatabaseAccountProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatabaseAccountProperties.class);
  }

  /**
   * Convert an instance of DatabaseAccountProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

