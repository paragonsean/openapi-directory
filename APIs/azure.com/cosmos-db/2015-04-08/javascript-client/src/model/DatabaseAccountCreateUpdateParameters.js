/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2015-04-08
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DatabaseAccountCreateUpdateProperties from './DatabaseAccountCreateUpdateProperties';
import Resource from './Resource';

/**
 * The DatabaseAccountCreateUpdateParameters model module.
 * @module model/DatabaseAccountCreateUpdateParameters
 * @version 2015-04-08
 */
class DatabaseAccountCreateUpdateParameters {
    /**
     * Constructs a new <code>DatabaseAccountCreateUpdateParameters</code>.
     * Parameters to create and update Cosmos DB database accounts.
     * @alias module:model/DatabaseAccountCreateUpdateParameters
     * @implements module:model/Resource
     */
    constructor() { 
        Resource.initialize(this);
        DatabaseAccountCreateUpdateParameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'GlobalDocumentDB';
        obj['properties'] = properties;
    }

    /**
     * Constructs a <code>DatabaseAccountCreateUpdateParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatabaseAccountCreateUpdateParameters} obj Optional instance to populate.
     * @return {module:model/DatabaseAccountCreateUpdateParameters} The populated <code>DatabaseAccountCreateUpdateParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatabaseAccountCreateUpdateParameters();
            Resource.constructFromObject(data, obj);

            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = DatabaseAccountCreateUpdateProperties.constructFromObject(data['properties']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatabaseAccountCreateUpdateParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatabaseAccountCreateUpdateParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DatabaseAccountCreateUpdateParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `properties`
        if (data['properties']) { // data not null
          DatabaseAccountCreateUpdateProperties.validateJSON(data['properties']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

DatabaseAccountCreateUpdateParameters.RequiredProperties = ["properties"];

/**
 * Indicates the type of database account. This can only be set at database account creation.
 * @member {module:model/DatabaseAccountCreateUpdateParameters.KindEnum} kind
 * @default 'GlobalDocumentDB'
 */
DatabaseAccountCreateUpdateParameters.prototype['kind'] = 'GlobalDocumentDB';

/**
 * @member {module:model/DatabaseAccountCreateUpdateProperties} properties
 */
DatabaseAccountCreateUpdateParameters.prototype['properties'] = undefined;

/**
 * The unique resource identifier of the database account.
 * @member {String} id
 */
DatabaseAccountCreateUpdateParameters.prototype['id'] = undefined;

/**
 * The location of the resource group to which the resource belongs.
 * @member {String} location
 */
DatabaseAccountCreateUpdateParameters.prototype['location'] = undefined;

/**
 * The name of the database account.
 * @member {String} name
 */
DatabaseAccountCreateUpdateParameters.prototype['name'] = undefined;

/**
 * Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".
 * @member {Object.<String, String>} tags
 */
DatabaseAccountCreateUpdateParameters.prototype['tags'] = undefined;

/**
 * The type of Azure resource.
 * @member {String} type
 */
DatabaseAccountCreateUpdateParameters.prototype['type'] = undefined;


// Implement Resource interface:
/**
 * The unique resource identifier of the database account.
 * @member {String} id
 */
Resource.prototype['id'] = undefined;
/**
 * The location of the resource group to which the resource belongs.
 * @member {String} location
 */
Resource.prototype['location'] = undefined;
/**
 * The name of the database account.
 * @member {String} name
 */
Resource.prototype['name'] = undefined;
/**
 * Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".
 * @member {Object.<String, String>} tags
 */
Resource.prototype['tags'] = undefined;
/**
 * The type of Azure resource.
 * @member {String} type
 */
Resource.prototype['type'] = undefined;



/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
DatabaseAccountCreateUpdateParameters['KindEnum'] = {

    /**
     * value: "GlobalDocumentDB"
     * @const
     */
    "GlobalDocumentDB": "GlobalDocumentDB",

    /**
     * value: "MongoDB"
     * @const
     */
    "MongoDB": "MongoDB",

    /**
     * value: "Parse"
     * @const
     */
    "Parse": "Parse"
};



export default DatabaseAccountCreateUpdateParameters;

