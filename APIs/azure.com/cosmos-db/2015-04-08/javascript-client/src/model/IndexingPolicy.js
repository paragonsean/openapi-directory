/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2015-04-08
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExcludedPath from './ExcludedPath';
import IncludedPath from './IncludedPath';

/**
 * The IndexingPolicy model module.
 * @module model/IndexingPolicy
 * @version 2015-04-08
 */
class IndexingPolicy {
    /**
     * Constructs a new <code>IndexingPolicy</code>.
     * Cosmos DB indexing policy
     * @alias module:model/IndexingPolicy
     */
    constructor() { 
        
        IndexingPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['indexingMode'] = 'Consistent';
    }

    /**
     * Constructs a <code>IndexingPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IndexingPolicy} obj Optional instance to populate.
     * @return {module:model/IndexingPolicy} The populated <code>IndexingPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IndexingPolicy();

            if (data.hasOwnProperty('automatic')) {
                obj['automatic'] = ApiClient.convertToType(data['automatic'], 'Boolean');
            }
            if (data.hasOwnProperty('excludedPaths')) {
                obj['excludedPaths'] = ApiClient.convertToType(data['excludedPaths'], [ExcludedPath]);
            }
            if (data.hasOwnProperty('includedPaths')) {
                obj['includedPaths'] = ApiClient.convertToType(data['includedPaths'], [IncludedPath]);
            }
            if (data.hasOwnProperty('indexingMode')) {
                obj['indexingMode'] = ApiClient.convertToType(data['indexingMode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IndexingPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IndexingPolicy</code>.
     */
    static validateJSON(data) {
        if (data['excludedPaths']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['excludedPaths'])) {
                throw new Error("Expected the field `excludedPaths` to be an array in the JSON data but got " + data['excludedPaths']);
            }
            // validate the optional field `excludedPaths` (array)
            for (const item of data['excludedPaths']) {
                ExcludedPath.validateJSON(item);
            };
        }
        if (data['includedPaths']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['includedPaths'])) {
                throw new Error("Expected the field `includedPaths` to be an array in the JSON data but got " + data['includedPaths']);
            }
            // validate the optional field `includedPaths` (array)
            for (const item of data['includedPaths']) {
                IncludedPath.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['indexingMode'] && !(typeof data['indexingMode'] === 'string' || data['indexingMode'] instanceof String)) {
            throw new Error("Expected the field `indexingMode` to be a primitive type in the JSON string but got " + data['indexingMode']);
        }

        return true;
    }


}



/**
 * Indicates if the indexing policy is automatic
 * @member {Boolean} automatic
 */
IndexingPolicy.prototype['automatic'] = undefined;

/**
 * List of paths to exclude from indexing
 * @member {Array.<module:model/ExcludedPath>} excludedPaths
 */
IndexingPolicy.prototype['excludedPaths'] = undefined;

/**
 * List of paths to include in the indexing
 * @member {Array.<module:model/IncludedPath>} includedPaths
 */
IndexingPolicy.prototype['includedPaths'] = undefined;

/**
 * Indicates the indexing mode.
 * @member {module:model/IndexingPolicy.IndexingModeEnum} indexingMode
 * @default 'Consistent'
 */
IndexingPolicy.prototype['indexingMode'] = 'Consistent';





/**
 * Allowed values for the <code>indexingMode</code> property.
 * @enum {String}
 * @readonly
 */
IndexingPolicy['IndexingModeEnum'] = {

    /**
     * value: "Consistent"
     * @const
     */
    "Consistent": "Consistent",

    /**
     * value: "Lazy"
     * @const
     */
    "Lazy": "Lazy",

    /**
     * value: "None"
     * @const
     */
    "None": "None"
};



export default IndexingPolicy;

