/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2016-03-19
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConsistencyPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConsistencyPolicy::OAIConsistencyPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConsistencyPolicy::OAIConsistencyPolicy() {
    this->initializeModel();
}

OAIConsistencyPolicy::~OAIConsistencyPolicy() {}

void OAIConsistencyPolicy::initializeModel() {

    m_default_consistency_level_isSet = false;
    m_default_consistency_level_isValid = false;

    m_max_interval_in_seconds_isSet = false;
    m_max_interval_in_seconds_isValid = false;

    m_max_staleness_prefix_isSet = false;
    m_max_staleness_prefix_isValid = false;
}

void OAIConsistencyPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConsistencyPolicy::fromJsonObject(QJsonObject json) {

    m_default_consistency_level_isValid = ::OpenAPI::fromJsonValue(m_default_consistency_level, json[QString("defaultConsistencyLevel")]);
    m_default_consistency_level_isSet = !json[QString("defaultConsistencyLevel")].isNull() && m_default_consistency_level_isValid;

    m_max_interval_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_max_interval_in_seconds, json[QString("maxIntervalInSeconds")]);
    m_max_interval_in_seconds_isSet = !json[QString("maxIntervalInSeconds")].isNull() && m_max_interval_in_seconds_isValid;

    m_max_staleness_prefix_isValid = ::OpenAPI::fromJsonValue(m_max_staleness_prefix, json[QString("maxStalenessPrefix")]);
    m_max_staleness_prefix_isSet = !json[QString("maxStalenessPrefix")].isNull() && m_max_staleness_prefix_isValid;
}

QString OAIConsistencyPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConsistencyPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_default_consistency_level_isSet) {
        obj.insert(QString("defaultConsistencyLevel"), ::OpenAPI::toJsonValue(m_default_consistency_level));
    }
    if (m_max_interval_in_seconds_isSet) {
        obj.insert(QString("maxIntervalInSeconds"), ::OpenAPI::toJsonValue(m_max_interval_in_seconds));
    }
    if (m_max_staleness_prefix_isSet) {
        obj.insert(QString("maxStalenessPrefix"), ::OpenAPI::toJsonValue(m_max_staleness_prefix));
    }
    return obj;
}

QString OAIConsistencyPolicy::getDefaultConsistencyLevel() const {
    return m_default_consistency_level;
}
void OAIConsistencyPolicy::setDefaultConsistencyLevel(const QString &default_consistency_level) {
    m_default_consistency_level = default_consistency_level;
    m_default_consistency_level_isSet = true;
}

bool OAIConsistencyPolicy::is_default_consistency_level_Set() const{
    return m_default_consistency_level_isSet;
}

bool OAIConsistencyPolicy::is_default_consistency_level_Valid() const{
    return m_default_consistency_level_isValid;
}

qint32 OAIConsistencyPolicy::getMaxIntervalInSeconds() const {
    return m_max_interval_in_seconds;
}
void OAIConsistencyPolicy::setMaxIntervalInSeconds(const qint32 &max_interval_in_seconds) {
    m_max_interval_in_seconds = max_interval_in_seconds;
    m_max_interval_in_seconds_isSet = true;
}

bool OAIConsistencyPolicy::is_max_interval_in_seconds_Set() const{
    return m_max_interval_in_seconds_isSet;
}

bool OAIConsistencyPolicy::is_max_interval_in_seconds_Valid() const{
    return m_max_interval_in_seconds_isValid;
}

qint64 OAIConsistencyPolicy::getMaxStalenessPrefix() const {
    return m_max_staleness_prefix;
}
void OAIConsistencyPolicy::setMaxStalenessPrefix(const qint64 &max_staleness_prefix) {
    m_max_staleness_prefix = max_staleness_prefix;
    m_max_staleness_prefix_isSet = true;
}

bool OAIConsistencyPolicy::is_max_staleness_prefix_Set() const{
    return m_max_staleness_prefix_isSet;
}

bool OAIConsistencyPolicy::is_max_staleness_prefix_Valid() const{
    return m_max_staleness_prefix_isValid;
}

bool OAIConsistencyPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_consistency_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_interval_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_staleness_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConsistencyPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_default_consistency_level_isValid && true;
}

} // namespace OpenAPI
