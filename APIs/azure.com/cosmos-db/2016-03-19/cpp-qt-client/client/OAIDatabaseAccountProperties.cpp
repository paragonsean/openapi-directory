/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2016-03-19
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseAccountProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseAccountProperties::OAIDatabaseAccountProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseAccountProperties::OAIDatabaseAccountProperties() {
    this->initializeModel();
}

OAIDatabaseAccountProperties::~OAIDatabaseAccountProperties() {}

void OAIDatabaseAccountProperties::initializeModel() {

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_connector_offer_isSet = false;
    m_connector_offer_isValid = false;

    m_consistency_policy_isSet = false;
    m_consistency_policy_isValid = false;

    m_database_account_offer_type_isSet = false;
    m_database_account_offer_type_isValid = false;

    m_document_endpoint_isSet = false;
    m_document_endpoint_isValid = false;

    m_enable_automatic_failover_isSet = false;
    m_enable_automatic_failover_isValid = false;

    m_enable_cassandra_connector_isSet = false;
    m_enable_cassandra_connector_isValid = false;

    m_enable_multiple_write_locations_isSet = false;
    m_enable_multiple_write_locations_isValid = false;

    m_failover_policies_isSet = false;
    m_failover_policies_isValid = false;

    m_ip_range_filter_isSet = false;
    m_ip_range_filter_isValid = false;

    m_is_virtual_network_filter_enabled_isSet = false;
    m_is_virtual_network_filter_enabled_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_read_locations_isSet = false;
    m_read_locations_isValid = false;

    m_virtual_network_rules_isSet = false;
    m_virtual_network_rules_isValid = false;

    m_write_locations_isSet = false;
    m_write_locations_isValid = false;
}

void OAIDatabaseAccountProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseAccountProperties::fromJsonObject(QJsonObject json) {

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_connector_offer_isValid = ::OpenAPI::fromJsonValue(m_connector_offer, json[QString("connectorOffer")]);
    m_connector_offer_isSet = !json[QString("connectorOffer")].isNull() && m_connector_offer_isValid;

    m_consistency_policy_isValid = ::OpenAPI::fromJsonValue(m_consistency_policy, json[QString("consistencyPolicy")]);
    m_consistency_policy_isSet = !json[QString("consistencyPolicy")].isNull() && m_consistency_policy_isValid;

    m_database_account_offer_type_isValid = ::OpenAPI::fromJsonValue(m_database_account_offer_type, json[QString("databaseAccountOfferType")]);
    m_database_account_offer_type_isSet = !json[QString("databaseAccountOfferType")].isNull() && m_database_account_offer_type_isValid;

    m_document_endpoint_isValid = ::OpenAPI::fromJsonValue(m_document_endpoint, json[QString("documentEndpoint")]);
    m_document_endpoint_isSet = !json[QString("documentEndpoint")].isNull() && m_document_endpoint_isValid;

    m_enable_automatic_failover_isValid = ::OpenAPI::fromJsonValue(m_enable_automatic_failover, json[QString("enableAutomaticFailover")]);
    m_enable_automatic_failover_isSet = !json[QString("enableAutomaticFailover")].isNull() && m_enable_automatic_failover_isValid;

    m_enable_cassandra_connector_isValid = ::OpenAPI::fromJsonValue(m_enable_cassandra_connector, json[QString("enableCassandraConnector")]);
    m_enable_cassandra_connector_isSet = !json[QString("enableCassandraConnector")].isNull() && m_enable_cassandra_connector_isValid;

    m_enable_multiple_write_locations_isValid = ::OpenAPI::fromJsonValue(m_enable_multiple_write_locations, json[QString("enableMultipleWriteLocations")]);
    m_enable_multiple_write_locations_isSet = !json[QString("enableMultipleWriteLocations")].isNull() && m_enable_multiple_write_locations_isValid;

    m_failover_policies_isValid = ::OpenAPI::fromJsonValue(m_failover_policies, json[QString("failoverPolicies")]);
    m_failover_policies_isSet = !json[QString("failoverPolicies")].isNull() && m_failover_policies_isValid;

    m_ip_range_filter_isValid = ::OpenAPI::fromJsonValue(m_ip_range_filter, json[QString("ipRangeFilter")]);
    m_ip_range_filter_isSet = !json[QString("ipRangeFilter")].isNull() && m_ip_range_filter_isValid;

    m_is_virtual_network_filter_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_virtual_network_filter_enabled, json[QString("isVirtualNetworkFilterEnabled")]);
    m_is_virtual_network_filter_enabled_isSet = !json[QString("isVirtualNetworkFilterEnabled")].isNull() && m_is_virtual_network_filter_enabled_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_read_locations_isValid = ::OpenAPI::fromJsonValue(m_read_locations, json[QString("readLocations")]);
    m_read_locations_isSet = !json[QString("readLocations")].isNull() && m_read_locations_isValid;

    m_virtual_network_rules_isValid = ::OpenAPI::fromJsonValue(m_virtual_network_rules, json[QString("virtualNetworkRules")]);
    m_virtual_network_rules_isSet = !json[QString("virtualNetworkRules")].isNull() && m_virtual_network_rules_isValid;

    m_write_locations_isValid = ::OpenAPI::fromJsonValue(m_write_locations, json[QString("writeLocations")]);
    m_write_locations_isSet = !json[QString("writeLocations")].isNull() && m_write_locations_isValid;
}

QString OAIDatabaseAccountProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseAccountProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_capabilities.size() > 0) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_connector_offer.isSet()) {
        obj.insert(QString("connectorOffer"), ::OpenAPI::toJsonValue(m_connector_offer));
    }
    if (m_consistency_policy.isSet()) {
        obj.insert(QString("consistencyPolicy"), ::OpenAPI::toJsonValue(m_consistency_policy));
    }
    if (m_database_account_offer_type.isSet()) {
        obj.insert(QString("databaseAccountOfferType"), ::OpenAPI::toJsonValue(m_database_account_offer_type));
    }
    if (m_document_endpoint_isSet) {
        obj.insert(QString("documentEndpoint"), ::OpenAPI::toJsonValue(m_document_endpoint));
    }
    if (m_enable_automatic_failover_isSet) {
        obj.insert(QString("enableAutomaticFailover"), ::OpenAPI::toJsonValue(m_enable_automatic_failover));
    }
    if (m_enable_cassandra_connector_isSet) {
        obj.insert(QString("enableCassandraConnector"), ::OpenAPI::toJsonValue(m_enable_cassandra_connector));
    }
    if (m_enable_multiple_write_locations_isSet) {
        obj.insert(QString("enableMultipleWriteLocations"), ::OpenAPI::toJsonValue(m_enable_multiple_write_locations));
    }
    if (m_failover_policies.size() > 0) {
        obj.insert(QString("failoverPolicies"), ::OpenAPI::toJsonValue(m_failover_policies));
    }
    if (m_ip_range_filter_isSet) {
        obj.insert(QString("ipRangeFilter"), ::OpenAPI::toJsonValue(m_ip_range_filter));
    }
    if (m_is_virtual_network_filter_enabled_isSet) {
        obj.insert(QString("isVirtualNetworkFilterEnabled"), ::OpenAPI::toJsonValue(m_is_virtual_network_filter_enabled));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_read_locations.size() > 0) {
        obj.insert(QString("readLocations"), ::OpenAPI::toJsonValue(m_read_locations));
    }
    if (m_virtual_network_rules.size() > 0) {
        obj.insert(QString("virtualNetworkRules"), ::OpenAPI::toJsonValue(m_virtual_network_rules));
    }
    if (m_write_locations.size() > 0) {
        obj.insert(QString("writeLocations"), ::OpenAPI::toJsonValue(m_write_locations));
    }
    return obj;
}

QList<OAICapability> OAIDatabaseAccountProperties::getCapabilities() const {
    return m_capabilities;
}
void OAIDatabaseAccountProperties::setCapabilities(const QList<OAICapability> &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIDatabaseAccountProperties::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIDatabaseAccountProperties::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

OAIConnectorOffer OAIDatabaseAccountProperties::getConnectorOffer() const {
    return m_connector_offer;
}
void OAIDatabaseAccountProperties::setConnectorOffer(const OAIConnectorOffer &connector_offer) {
    m_connector_offer = connector_offer;
    m_connector_offer_isSet = true;
}

bool OAIDatabaseAccountProperties::is_connector_offer_Set() const{
    return m_connector_offer_isSet;
}

bool OAIDatabaseAccountProperties::is_connector_offer_Valid() const{
    return m_connector_offer_isValid;
}

OAIConsistencyPolicy OAIDatabaseAccountProperties::getConsistencyPolicy() const {
    return m_consistency_policy;
}
void OAIDatabaseAccountProperties::setConsistencyPolicy(const OAIConsistencyPolicy &consistency_policy) {
    m_consistency_policy = consistency_policy;
    m_consistency_policy_isSet = true;
}

bool OAIDatabaseAccountProperties::is_consistency_policy_Set() const{
    return m_consistency_policy_isSet;
}

bool OAIDatabaseAccountProperties::is_consistency_policy_Valid() const{
    return m_consistency_policy_isValid;
}

OAIDatabaseAccountOfferType OAIDatabaseAccountProperties::getDatabaseAccountOfferType() const {
    return m_database_account_offer_type;
}
void OAIDatabaseAccountProperties::setDatabaseAccountOfferType(const OAIDatabaseAccountOfferType &database_account_offer_type) {
    m_database_account_offer_type = database_account_offer_type;
    m_database_account_offer_type_isSet = true;
}

bool OAIDatabaseAccountProperties::is_database_account_offer_type_Set() const{
    return m_database_account_offer_type_isSet;
}

bool OAIDatabaseAccountProperties::is_database_account_offer_type_Valid() const{
    return m_database_account_offer_type_isValid;
}

QString OAIDatabaseAccountProperties::getDocumentEndpoint() const {
    return m_document_endpoint;
}
void OAIDatabaseAccountProperties::setDocumentEndpoint(const QString &document_endpoint) {
    m_document_endpoint = document_endpoint;
    m_document_endpoint_isSet = true;
}

bool OAIDatabaseAccountProperties::is_document_endpoint_Set() const{
    return m_document_endpoint_isSet;
}

bool OAIDatabaseAccountProperties::is_document_endpoint_Valid() const{
    return m_document_endpoint_isValid;
}

bool OAIDatabaseAccountProperties::isEnableAutomaticFailover() const {
    return m_enable_automatic_failover;
}
void OAIDatabaseAccountProperties::setEnableAutomaticFailover(const bool &enable_automatic_failover) {
    m_enable_automatic_failover = enable_automatic_failover;
    m_enable_automatic_failover_isSet = true;
}

bool OAIDatabaseAccountProperties::is_enable_automatic_failover_Set() const{
    return m_enable_automatic_failover_isSet;
}

bool OAIDatabaseAccountProperties::is_enable_automatic_failover_Valid() const{
    return m_enable_automatic_failover_isValid;
}

bool OAIDatabaseAccountProperties::isEnableCassandraConnector() const {
    return m_enable_cassandra_connector;
}
void OAIDatabaseAccountProperties::setEnableCassandraConnector(const bool &enable_cassandra_connector) {
    m_enable_cassandra_connector = enable_cassandra_connector;
    m_enable_cassandra_connector_isSet = true;
}

bool OAIDatabaseAccountProperties::is_enable_cassandra_connector_Set() const{
    return m_enable_cassandra_connector_isSet;
}

bool OAIDatabaseAccountProperties::is_enable_cassandra_connector_Valid() const{
    return m_enable_cassandra_connector_isValid;
}

bool OAIDatabaseAccountProperties::isEnableMultipleWriteLocations() const {
    return m_enable_multiple_write_locations;
}
void OAIDatabaseAccountProperties::setEnableMultipleWriteLocations(const bool &enable_multiple_write_locations) {
    m_enable_multiple_write_locations = enable_multiple_write_locations;
    m_enable_multiple_write_locations_isSet = true;
}

bool OAIDatabaseAccountProperties::is_enable_multiple_write_locations_Set() const{
    return m_enable_multiple_write_locations_isSet;
}

bool OAIDatabaseAccountProperties::is_enable_multiple_write_locations_Valid() const{
    return m_enable_multiple_write_locations_isValid;
}

QList<OAIFailoverPolicy> OAIDatabaseAccountProperties::getFailoverPolicies() const {
    return m_failover_policies;
}
void OAIDatabaseAccountProperties::setFailoverPolicies(const QList<OAIFailoverPolicy> &failover_policies) {
    m_failover_policies = failover_policies;
    m_failover_policies_isSet = true;
}

bool OAIDatabaseAccountProperties::is_failover_policies_Set() const{
    return m_failover_policies_isSet;
}

bool OAIDatabaseAccountProperties::is_failover_policies_Valid() const{
    return m_failover_policies_isValid;
}

QString OAIDatabaseAccountProperties::getIpRangeFilter() const {
    return m_ip_range_filter;
}
void OAIDatabaseAccountProperties::setIpRangeFilter(const QString &ip_range_filter) {
    m_ip_range_filter = ip_range_filter;
    m_ip_range_filter_isSet = true;
}

bool OAIDatabaseAccountProperties::is_ip_range_filter_Set() const{
    return m_ip_range_filter_isSet;
}

bool OAIDatabaseAccountProperties::is_ip_range_filter_Valid() const{
    return m_ip_range_filter_isValid;
}

bool OAIDatabaseAccountProperties::isIsVirtualNetworkFilterEnabled() const {
    return m_is_virtual_network_filter_enabled;
}
void OAIDatabaseAccountProperties::setIsVirtualNetworkFilterEnabled(const bool &is_virtual_network_filter_enabled) {
    m_is_virtual_network_filter_enabled = is_virtual_network_filter_enabled;
    m_is_virtual_network_filter_enabled_isSet = true;
}

bool OAIDatabaseAccountProperties::is_is_virtual_network_filter_enabled_Set() const{
    return m_is_virtual_network_filter_enabled_isSet;
}

bool OAIDatabaseAccountProperties::is_is_virtual_network_filter_enabled_Valid() const{
    return m_is_virtual_network_filter_enabled_isValid;
}

QString OAIDatabaseAccountProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIDatabaseAccountProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIDatabaseAccountProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIDatabaseAccountProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QList<OAILocation> OAIDatabaseAccountProperties::getReadLocations() const {
    return m_read_locations;
}
void OAIDatabaseAccountProperties::setReadLocations(const QList<OAILocation> &read_locations) {
    m_read_locations = read_locations;
    m_read_locations_isSet = true;
}

bool OAIDatabaseAccountProperties::is_read_locations_Set() const{
    return m_read_locations_isSet;
}

bool OAIDatabaseAccountProperties::is_read_locations_Valid() const{
    return m_read_locations_isValid;
}

QList<OAIVirtualNetworkRule> OAIDatabaseAccountProperties::getVirtualNetworkRules() const {
    return m_virtual_network_rules;
}
void OAIDatabaseAccountProperties::setVirtualNetworkRules(const QList<OAIVirtualNetworkRule> &virtual_network_rules) {
    m_virtual_network_rules = virtual_network_rules;
    m_virtual_network_rules_isSet = true;
}

bool OAIDatabaseAccountProperties::is_virtual_network_rules_Set() const{
    return m_virtual_network_rules_isSet;
}

bool OAIDatabaseAccountProperties::is_virtual_network_rules_Valid() const{
    return m_virtual_network_rules_isValid;
}

QList<OAILocation> OAIDatabaseAccountProperties::getWriteLocations() const {
    return m_write_locations;
}
void OAIDatabaseAccountProperties::setWriteLocations(const QList<OAILocation> &write_locations) {
    m_write_locations = write_locations;
    m_write_locations_isSet = true;
}

bool OAIDatabaseAccountProperties::is_write_locations_Set() const{
    return m_write_locations_isSet;
}

bool OAIDatabaseAccountProperties::is_write_locations_Valid() const{
    return m_write_locations_isValid;
}

bool OAIDatabaseAccountProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_offer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_consistency_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_account_offer_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_automatic_failover_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_cassandra_connector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_multiple_write_locations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failover_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_range_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_virtual_network_filter_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_network_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseAccountProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
