# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FailoverPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failover_priority: int=None, id: str=None, location_name: str=None):
        """FailoverPolicy - a model defined in OpenAPI

        :param failover_priority: The failover_priority of this FailoverPolicy.
        :param id: The id of this FailoverPolicy.
        :param location_name: The location_name of this FailoverPolicy.
        """
        self.openapi_types = {
            'failover_priority': int,
            'id': str,
            'location_name': str
        }

        self.attribute_map = {
            'failover_priority': 'failoverPriority',
            'id': 'id',
            'location_name': 'locationName'
        }

        self._failover_priority = failover_priority
        self._id = id
        self._location_name = location_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FailoverPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FailoverPolicy of this FailoverPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failover_priority(self):
        """Gets the failover_priority of this FailoverPolicy.

        The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.

        :return: The failover_priority of this FailoverPolicy.
        :rtype: int
        """
        return self._failover_priority

    @failover_priority.setter
    def failover_priority(self, failover_priority):
        """Sets the failover_priority of this FailoverPolicy.

        The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.

        :param failover_priority: The failover_priority of this FailoverPolicy.
        :type failover_priority: int
        """
        if failover_priority is not None and failover_priority < 0:
            raise ValueError("Invalid value for `failover_priority`, must be a value greater than or equal to `0`")

        self._failover_priority = failover_priority

    @property
    def id(self):
        """Gets the id of this FailoverPolicy.

        The unique identifier of the region in which the database account replicates to. Example: &lt;accountName&gt;-&lt;locationName&gt;.

        :return: The id of this FailoverPolicy.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FailoverPolicy.

        The unique identifier of the region in which the database account replicates to. Example: &lt;accountName&gt;-&lt;locationName&gt;.

        :param id: The id of this FailoverPolicy.
        :type id: str
        """

        self._id = id

    @property
    def location_name(self):
        """Gets the location_name of this FailoverPolicy.

        The name of the region in which the database account exists.

        :return: The location_name of this FailoverPolicy.
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """Sets the location_name of this FailoverPolicy.

        The name of the region in which the database account exists.

        :param location_name: The location_name of this FailoverPolicy.
        :type location_name: str
        """

        self._location_name = location_name
