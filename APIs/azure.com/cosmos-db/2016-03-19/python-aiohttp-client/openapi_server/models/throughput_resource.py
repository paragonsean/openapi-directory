# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ThroughputResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, throughput: int=None):
        """ThroughputResource - a model defined in OpenAPI

        :param throughput: The throughput of this ThroughputResource.
        """
        self.openapi_types = {
            'throughput': int
        }

        self.attribute_map = {
            'throughput': 'throughput'
        }

        self._throughput = throughput

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThroughputResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThroughputResource of this ThroughputResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def throughput(self):
        """Gets the throughput of this ThroughputResource.

        Value of the Cosmos DB resource throughput

        :return: The throughput of this ThroughputResource.
        :rtype: int
        """
        return self._throughput

    @throughput.setter
    def throughput(self, throughput):
        """Sets the throughput of this ThroughputResource.

        Value of the Cosmos DB resource throughput

        :param throughput: The throughput of this ThroughputResource.
        :type throughput: int
        """
        if throughput is None:
            raise ValueError("Invalid value for `throughput`, must not be `None`")

        self._throughput = throughput
