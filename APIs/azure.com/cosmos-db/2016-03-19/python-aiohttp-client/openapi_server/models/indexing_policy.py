# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.excluded_path import ExcludedPath
from openapi_server.models.included_path import IncludedPath
from openapi_server import util


class IndexingPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, automatic: bool=None, excluded_paths: List[ExcludedPath]=None, included_paths: List[IncludedPath]=None, indexing_mode: str='Consistent'):
        """IndexingPolicy - a model defined in OpenAPI

        :param automatic: The automatic of this IndexingPolicy.
        :param excluded_paths: The excluded_paths of this IndexingPolicy.
        :param included_paths: The included_paths of this IndexingPolicy.
        :param indexing_mode: The indexing_mode of this IndexingPolicy.
        """
        self.openapi_types = {
            'automatic': bool,
            'excluded_paths': List[ExcludedPath],
            'included_paths': List[IncludedPath],
            'indexing_mode': str
        }

        self.attribute_map = {
            'automatic': 'automatic',
            'excluded_paths': 'excludedPaths',
            'included_paths': 'includedPaths',
            'indexing_mode': 'indexingMode'
        }

        self._automatic = automatic
        self._excluded_paths = excluded_paths
        self._included_paths = included_paths
        self._indexing_mode = indexing_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IndexingPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IndexingPolicy of this IndexingPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def automatic(self):
        """Gets the automatic of this IndexingPolicy.

        Indicates if the indexing policy is automatic

        :return: The automatic of this IndexingPolicy.
        :rtype: bool
        """
        return self._automatic

    @automatic.setter
    def automatic(self, automatic):
        """Sets the automatic of this IndexingPolicy.

        Indicates if the indexing policy is automatic

        :param automatic: The automatic of this IndexingPolicy.
        :type automatic: bool
        """

        self._automatic = automatic

    @property
    def excluded_paths(self):
        """Gets the excluded_paths of this IndexingPolicy.

        List of paths to exclude from indexing

        :return: The excluded_paths of this IndexingPolicy.
        :rtype: List[ExcludedPath]
        """
        return self._excluded_paths

    @excluded_paths.setter
    def excluded_paths(self, excluded_paths):
        """Sets the excluded_paths of this IndexingPolicy.

        List of paths to exclude from indexing

        :param excluded_paths: The excluded_paths of this IndexingPolicy.
        :type excluded_paths: List[ExcludedPath]
        """

        self._excluded_paths = excluded_paths

    @property
    def included_paths(self):
        """Gets the included_paths of this IndexingPolicy.

        List of paths to include in the indexing

        :return: The included_paths of this IndexingPolicy.
        :rtype: List[IncludedPath]
        """
        return self._included_paths

    @included_paths.setter
    def included_paths(self, included_paths):
        """Sets the included_paths of this IndexingPolicy.

        List of paths to include in the indexing

        :param included_paths: The included_paths of this IndexingPolicy.
        :type included_paths: List[IncludedPath]
        """

        self._included_paths = included_paths

    @property
    def indexing_mode(self):
        """Gets the indexing_mode of this IndexingPolicy.

        Indicates the indexing mode.

        :return: The indexing_mode of this IndexingPolicy.
        :rtype: str
        """
        return self._indexing_mode

    @indexing_mode.setter
    def indexing_mode(self, indexing_mode):
        """Sets the indexing_mode of this IndexingPolicy.

        Indicates the indexing mode.

        :param indexing_mode: The indexing_mode of this IndexingPolicy.
        :type indexing_mode: str
        """
        allowed_values = ["Consistent", "Lazy", "None"]  # noqa: E501
        if indexing_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `indexing_mode` ({0}), must be one of {1}"
                .format(indexing_mode, allowed_values)
            )

        self._indexing_mode = indexing_mode
