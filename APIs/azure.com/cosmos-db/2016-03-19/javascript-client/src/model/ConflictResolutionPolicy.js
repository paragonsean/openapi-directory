/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2016-03-19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConflictResolutionPolicy model module.
 * @module model/ConflictResolutionPolicy
 * @version 2016-03-19
 */
class ConflictResolutionPolicy {
    /**
     * Constructs a new <code>ConflictResolutionPolicy</code>.
     * The conflict resolution policy for the container.
     * @alias module:model/ConflictResolutionPolicy
     */
    constructor() { 
        
        ConflictResolutionPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['mode'] = 'LastWriterWins';
    }

    /**
     * Constructs a <code>ConflictResolutionPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConflictResolutionPolicy} obj Optional instance to populate.
     * @return {module:model/ConflictResolutionPolicy} The populated <code>ConflictResolutionPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConflictResolutionPolicy();

            if (data.hasOwnProperty('conflictResolutionPath')) {
                obj['conflictResolutionPath'] = ApiClient.convertToType(data['conflictResolutionPath'], 'String');
            }
            if (data.hasOwnProperty('conflictResolutionProcedure')) {
                obj['conflictResolutionProcedure'] = ApiClient.convertToType(data['conflictResolutionProcedure'], 'String');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConflictResolutionPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConflictResolutionPolicy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['conflictResolutionPath'] && !(typeof data['conflictResolutionPath'] === 'string' || data['conflictResolutionPath'] instanceof String)) {
            throw new Error("Expected the field `conflictResolutionPath` to be a primitive type in the JSON string but got " + data['conflictResolutionPath']);
        }
        // ensure the json data is a string
        if (data['conflictResolutionProcedure'] && !(typeof data['conflictResolutionProcedure'] === 'string' || data['conflictResolutionProcedure'] instanceof String)) {
            throw new Error("Expected the field `conflictResolutionProcedure` to be a primitive type in the JSON string but got " + data['conflictResolutionProcedure']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }

        return true;
    }


}



/**
 * The conflict resolution path in the case of LastWriterWins mode.
 * @member {String} conflictResolutionPath
 */
ConflictResolutionPolicy.prototype['conflictResolutionPath'] = undefined;

/**
 * The procedure to resolve conflicts in the case of custom mode.
 * @member {String} conflictResolutionProcedure
 */
ConflictResolutionPolicy.prototype['conflictResolutionProcedure'] = undefined;

/**
 * Indicates the conflict resolution mode.
 * @member {module:model/ConflictResolutionPolicy.ModeEnum} mode
 * @default 'LastWriterWins'
 */
ConflictResolutionPolicy.prototype['mode'] = 'LastWriterWins';





/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
ConflictResolutionPolicy['ModeEnum'] = {

    /**
     * value: "LastWriterWins"
     * @const
     */
    "LastWriterWins": "LastWriterWins",

    /**
     * value: "Custom"
     * @const
     */
    "Custom": "Custom"
};



export default ConflictResolutionPolicy;

