/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2016-03-19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CassandraPartitionKey from './CassandraPartitionKey';
import ClusterKey from './ClusterKey';
import Column from './Column';

/**
 * The CassandraSchema model module.
 * @module model/CassandraSchema
 * @version 2016-03-19
 */
class CassandraSchema {
    /**
     * Constructs a new <code>CassandraSchema</code>.
     * Cosmos DB Cassandra table schema
     * @alias module:model/CassandraSchema
     */
    constructor() { 
        
        CassandraSchema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CassandraSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CassandraSchema} obj Optional instance to populate.
     * @return {module:model/CassandraSchema} The populated <code>CassandraSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CassandraSchema();

            if (data.hasOwnProperty('clusterKeys')) {
                obj['clusterKeys'] = ApiClient.convertToType(data['clusterKeys'], [ClusterKey]);
            }
            if (data.hasOwnProperty('columns')) {
                obj['columns'] = ApiClient.convertToType(data['columns'], [Column]);
            }
            if (data.hasOwnProperty('partitionKeys')) {
                obj['partitionKeys'] = ApiClient.convertToType(data['partitionKeys'], [CassandraPartitionKey]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CassandraSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CassandraSchema</code>.
     */
    static validateJSON(data) {
        if (data['clusterKeys']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['clusterKeys'])) {
                throw new Error("Expected the field `clusterKeys` to be an array in the JSON data but got " + data['clusterKeys']);
            }
            // validate the optional field `clusterKeys` (array)
            for (const item of data['clusterKeys']) {
                ClusterKey.validateJSON(item);
            };
        }
        if (data['columns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['columns'])) {
                throw new Error("Expected the field `columns` to be an array in the JSON data but got " + data['columns']);
            }
            // validate the optional field `columns` (array)
            for (const item of data['columns']) {
                Column.validateJSON(item);
            };
        }
        if (data['partitionKeys']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['partitionKeys'])) {
                throw new Error("Expected the field `partitionKeys` to be an array in the JSON data but got " + data['partitionKeys']);
            }
            // validate the optional field `partitionKeys` (array)
            for (const item of data['partitionKeys']) {
                CassandraPartitionKey.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * List of cluster key.
 * @member {Array.<module:model/ClusterKey>} clusterKeys
 */
CassandraSchema.prototype['clusterKeys'] = undefined;

/**
 * List of Cassandra table columns.
 * @member {Array.<module:model/Column>} columns
 */
CassandraSchema.prototype['columns'] = undefined;

/**
 * List of partition key.
 * @member {Array.<module:model/CassandraPartitionKey>} partitionKeys
 */
CassandraSchema.prototype['partitionKeys'] = undefined;






export default CassandraSchema;

