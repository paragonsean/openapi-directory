/*
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2016-03-19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConflictResolutionPolicy;
import org.openapitools.client.model.ContainerPartitionKey;
import org.openapitools.client.model.IndexingPolicy;
import org.openapitools.client.model.UniqueKeyPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of an Azure Cosmos DB container
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:53.319111-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SqlContainerProperties {
  public static final String SERIALIZED_NAME_CONFLICT_RESOLUTION_POLICY = "conflictResolutionPolicy";
  @SerializedName(SERIALIZED_NAME_CONFLICT_RESOLUTION_POLICY)
  private ConflictResolutionPolicy conflictResolutionPolicy;

  public static final String SERIALIZED_NAME_DEFAULT_TTL = "defaultTtl";
  @SerializedName(SERIALIZED_NAME_DEFAULT_TTL)
  private Integer defaultTtl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INDEXING_POLICY = "indexingPolicy";
  @SerializedName(SERIALIZED_NAME_INDEXING_POLICY)
  private IndexingPolicy indexingPolicy;

  public static final String SERIALIZED_NAME_PARTITION_KEY = "partitionKey";
  @SerializedName(SERIALIZED_NAME_PARTITION_KEY)
  private ContainerPartitionKey partitionKey;

  public static final String SERIALIZED_NAME_UNIQUE_KEY_POLICY = "uniqueKeyPolicy";
  @SerializedName(SERIALIZED_NAME_UNIQUE_KEY_POLICY)
  private UniqueKeyPolicy uniqueKeyPolicy;

  public static final String SERIALIZED_NAME_ETAG = "_etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_RID = "_rid";
  @SerializedName(SERIALIZED_NAME_RID)
  private String rid;

  public static final String SERIALIZED_NAME_TS = "_ts";
  @SerializedName(SERIALIZED_NAME_TS)
  private Object ts;

  public SqlContainerProperties() {
  }

  public SqlContainerProperties conflictResolutionPolicy(ConflictResolutionPolicy conflictResolutionPolicy) {
    this.conflictResolutionPolicy = conflictResolutionPolicy;
    return this;
  }

  /**
   * Get conflictResolutionPolicy
   * @return conflictResolutionPolicy
   */
  @javax.annotation.Nullable
  public ConflictResolutionPolicy getConflictResolutionPolicy() {
    return conflictResolutionPolicy;
  }

  public void setConflictResolutionPolicy(ConflictResolutionPolicy conflictResolutionPolicy) {
    this.conflictResolutionPolicy = conflictResolutionPolicy;
  }


  public SqlContainerProperties defaultTtl(Integer defaultTtl) {
    this.defaultTtl = defaultTtl;
    return this;
  }

  /**
   * Default time to live
   * @return defaultTtl
   */
  @javax.annotation.Nullable
  public Integer getDefaultTtl() {
    return defaultTtl;
  }

  public void setDefaultTtl(Integer defaultTtl) {
    this.defaultTtl = defaultTtl;
  }


  public SqlContainerProperties id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Name of the Cosmos DB SQL container
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public SqlContainerProperties indexingPolicy(IndexingPolicy indexingPolicy) {
    this.indexingPolicy = indexingPolicy;
    return this;
  }

  /**
   * Get indexingPolicy
   * @return indexingPolicy
   */
  @javax.annotation.Nullable
  public IndexingPolicy getIndexingPolicy() {
    return indexingPolicy;
  }

  public void setIndexingPolicy(IndexingPolicy indexingPolicy) {
    this.indexingPolicy = indexingPolicy;
  }


  public SqlContainerProperties partitionKey(ContainerPartitionKey partitionKey) {
    this.partitionKey = partitionKey;
    return this;
  }

  /**
   * Get partitionKey
   * @return partitionKey
   */
  @javax.annotation.Nullable
  public ContainerPartitionKey getPartitionKey() {
    return partitionKey;
  }

  public void setPartitionKey(ContainerPartitionKey partitionKey) {
    this.partitionKey = partitionKey;
  }


  public SqlContainerProperties uniqueKeyPolicy(UniqueKeyPolicy uniqueKeyPolicy) {
    this.uniqueKeyPolicy = uniqueKeyPolicy;
    return this;
  }

  /**
   * Get uniqueKeyPolicy
   * @return uniqueKeyPolicy
   */
  @javax.annotation.Nullable
  public UniqueKeyPolicy getUniqueKeyPolicy() {
    return uniqueKeyPolicy;
  }

  public void setUniqueKeyPolicy(UniqueKeyPolicy uniqueKeyPolicy) {
    this.uniqueKeyPolicy = uniqueKeyPolicy;
  }


  public SqlContainerProperties etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * A system generated property representing the resource etag required for optimistic concurrency control.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public SqlContainerProperties rid(String rid) {
    this.rid = rid;
    return this;
  }

  /**
   * A system generated property. A unique identifier.
   * @return rid
   */
  @javax.annotation.Nullable
  public String getRid() {
    return rid;
  }

  public void setRid(String rid) {
    this.rid = rid;
  }


  public SqlContainerProperties ts(Object ts) {
    this.ts = ts;
    return this;
  }

  /**
   * A system generated property that denotes the last updated timestamp of the resource.
   * @return ts
   */
  @javax.annotation.Nullable
  public Object getTs() {
    return ts;
  }

  public void setTs(Object ts) {
    this.ts = ts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SqlContainerProperties sqlContainerProperties = (SqlContainerProperties) o;
    return Objects.equals(this.conflictResolutionPolicy, sqlContainerProperties.conflictResolutionPolicy) &&
        Objects.equals(this.defaultTtl, sqlContainerProperties.defaultTtl) &&
        Objects.equals(this.id, sqlContainerProperties.id) &&
        Objects.equals(this.indexingPolicy, sqlContainerProperties.indexingPolicy) &&
        Objects.equals(this.partitionKey, sqlContainerProperties.partitionKey) &&
        Objects.equals(this.uniqueKeyPolicy, sqlContainerProperties.uniqueKeyPolicy) &&
        Objects.equals(this.etag, sqlContainerProperties.etag) &&
        Objects.equals(this.rid, sqlContainerProperties.rid) &&
        Objects.equals(this.ts, sqlContainerProperties.ts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conflictResolutionPolicy, defaultTtl, id, indexingPolicy, partitionKey, uniqueKeyPolicy, etag, rid, ts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SqlContainerProperties {\n");
    sb.append("    conflictResolutionPolicy: ").append(toIndentedString(conflictResolutionPolicy)).append("\n");
    sb.append("    defaultTtl: ").append(toIndentedString(defaultTtl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    indexingPolicy: ").append(toIndentedString(indexingPolicy)).append("\n");
    sb.append("    partitionKey: ").append(toIndentedString(partitionKey)).append("\n");
    sb.append("    uniqueKeyPolicy: ").append(toIndentedString(uniqueKeyPolicy)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    rid: ").append(toIndentedString(rid)).append("\n");
    sb.append("    ts: ").append(toIndentedString(ts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conflictResolutionPolicy");
    openapiFields.add("defaultTtl");
    openapiFields.add("id");
    openapiFields.add("indexingPolicy");
    openapiFields.add("partitionKey");
    openapiFields.add("uniqueKeyPolicy");
    openapiFields.add("_etag");
    openapiFields.add("_rid");
    openapiFields.add("_ts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SqlContainerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SqlContainerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SqlContainerProperties is not found in the empty JSON string", SqlContainerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SqlContainerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SqlContainerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SqlContainerProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `conflictResolutionPolicy`
      if (jsonObj.get("conflictResolutionPolicy") != null && !jsonObj.get("conflictResolutionPolicy").isJsonNull()) {
        ConflictResolutionPolicy.validateJsonElement(jsonObj.get("conflictResolutionPolicy"));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `indexingPolicy`
      if (jsonObj.get("indexingPolicy") != null && !jsonObj.get("indexingPolicy").isJsonNull()) {
        IndexingPolicy.validateJsonElement(jsonObj.get("indexingPolicy"));
      }
      // validate the optional field `partitionKey`
      if (jsonObj.get("partitionKey") != null && !jsonObj.get("partitionKey").isJsonNull()) {
        ContainerPartitionKey.validateJsonElement(jsonObj.get("partitionKey"));
      }
      // validate the optional field `uniqueKeyPolicy`
      if (jsonObj.get("uniqueKeyPolicy") != null && !jsonObj.get("uniqueKeyPolicy").isJsonNull()) {
        UniqueKeyPolicy.validateJsonElement(jsonObj.get("uniqueKeyPolicy"));
      }
      if ((jsonObj.get("_etag") != null && !jsonObj.get("_etag").isJsonNull()) && !jsonObj.get("_etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_etag").toString()));
      }
      if ((jsonObj.get("_rid") != null && !jsonObj.get("_rid").isJsonNull()) && !jsonObj.get("_rid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_rid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_rid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SqlContainerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SqlContainerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SqlContainerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SqlContainerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SqlContainerProperties>() {
           @Override
           public void write(JsonWriter out, SqlContainerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SqlContainerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SqlContainerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SqlContainerProperties
   * @throws IOException if the JSON string is invalid with respect to SqlContainerProperties
   */
  public static SqlContainerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SqlContainerProperties.class);
  }

  /**
   * Convert an instance of SqlContainerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

