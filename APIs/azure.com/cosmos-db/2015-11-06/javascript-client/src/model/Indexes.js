/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2015-11-06
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Indexes model module.
 * @module model/Indexes
 * @version 2015-11-06
 */
class Indexes {
    /**
     * Constructs a new <code>Indexes</code>.
     * The indexes for the path.
     * @alias module:model/Indexes
     */
    constructor() { 
        
        Indexes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['dataType'] = 'String';
        obj['kind'] = 'Hash';
    }

    /**
     * Constructs a <code>Indexes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Indexes} obj Optional instance to populate.
     * @return {module:model/Indexes} The populated <code>Indexes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Indexes();

            if (data.hasOwnProperty('dataType')) {
                obj['dataType'] = ApiClient.convertToType(data['dataType'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('precision')) {
                obj['precision'] = ApiClient.convertToType(data['precision'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Indexes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Indexes</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dataType'] && !(typeof data['dataType'] === 'string' || data['dataType'] instanceof String)) {
            throw new Error("Expected the field `dataType` to be a primitive type in the JSON string but got " + data['dataType']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }

        return true;
    }


}



/**
 * The datatype for which the indexing behavior is applied to.
 * @member {module:model/Indexes.DataTypeEnum} dataType
 * @default 'String'
 */
Indexes.prototype['dataType'] = 'String';

/**
 * Indicates the type of index.
 * @member {module:model/Indexes.KindEnum} kind
 * @default 'Hash'
 */
Indexes.prototype['kind'] = 'Hash';

/**
 * The precision of the index. -1 is maximum precision.
 * @member {Number} precision
 */
Indexes.prototype['precision'] = undefined;





/**
 * Allowed values for the <code>dataType</code> property.
 * @enum {String}
 * @readonly
 */
Indexes['DataTypeEnum'] = {

    /**
     * value: "String"
     * @const
     */
    "String": "String",

    /**
     * value: "Number"
     * @const
     */
    "Number": "Number",

    /**
     * value: "Point"
     * @const
     */
    "Point": "Point",

    /**
     * value: "Polygon"
     * @const
     */
    "Polygon": "Polygon",

    /**
     * value: "LineString"
     * @const
     */
    "LineString": "LineString",

    /**
     * value: "MultiPolygon"
     * @const
     */
    "MultiPolygon": "MultiPolygon"
};


/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
Indexes['KindEnum'] = {

    /**
     * value: "Hash"
     * @const
     */
    "Hash": "Hash",

    /**
     * value: "Range"
     * @const
     */
    "Range": "Range",

    /**
     * value: "Spatial"
     * @const
     */
    "Spatial": "Spatial"
};



export default Indexes;

