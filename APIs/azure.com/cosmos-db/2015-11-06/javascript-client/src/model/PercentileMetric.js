/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2015-11-06
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetricName from './MetricName';
import PercentileMetricValue from './PercentileMetricValue';
import UnitType from './UnitType';

/**
 * The PercentileMetric model module.
 * @module model/PercentileMetric
 * @version 2015-11-06
 */
class PercentileMetric {
    /**
     * Constructs a new <code>PercentileMetric</code>.
     * Percentile Metric data
     * @alias module:model/PercentileMetric
     */
    constructor() { 
        
        PercentileMetric.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PercentileMetric</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PercentileMetric} obj Optional instance to populate.
     * @return {module:model/PercentileMetric} The populated <code>PercentileMetric</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PercentileMetric();

            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('metricValues')) {
                obj['metricValues'] = ApiClient.convertToType(data['metricValues'], [PercentileMetricValue]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = MetricName.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('timeGrain')) {
                obj['timeGrain'] = ApiClient.convertToType(data['timeGrain'], 'String');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = UnitType.constructFromObject(data['unit']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PercentileMetric</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PercentileMetric</code>.
     */
    static validateJSON(data) {
        if (data['metricValues']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metricValues'])) {
                throw new Error("Expected the field `metricValues` to be an array in the JSON data but got " + data['metricValues']);
            }
            // validate the optional field `metricValues` (array)
            for (const item of data['metricValues']) {
                PercentileMetricValue.validateJSON(item);
            };
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          MetricName.validateJSON(data['name']);
        }
        // ensure the json data is a string
        if (data['timeGrain'] && !(typeof data['timeGrain'] === 'string' || data['timeGrain'] instanceof String)) {
            throw new Error("Expected the field `timeGrain` to be a primitive type in the JSON string but got " + data['timeGrain']);
        }

        return true;
    }


}



/**
 * The end time for the metric (ISO-8601 format).
 * @member {Date} endTime
 */
PercentileMetric.prototype['endTime'] = undefined;

/**
 * The percentile metric values for the specified time window and timestep.
 * @member {Array.<module:model/PercentileMetricValue>} metricValues
 */
PercentileMetric.prototype['metricValues'] = undefined;

/**
 * @member {module:model/MetricName} name
 */
PercentileMetric.prototype['name'] = undefined;

/**
 * The start time for the metric (ISO-8601 format).
 * @member {Date} startTime
 */
PercentileMetric.prototype['startTime'] = undefined;

/**
 * The time grain to be used to summarize the metric values.
 * @member {String} timeGrain
 */
PercentileMetric.prototype['timeGrain'] = undefined;

/**
 * @member {module:model/UnitType} unit
 */
PercentileMetric.prototype['unit'] = undefined;






export default PercentileMetric;

