/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2015-11-06
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFailoverPolicies.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFailoverPolicies::OAIFailoverPolicies(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFailoverPolicies::OAIFailoverPolicies() {
    this->initializeModel();
}

OAIFailoverPolicies::~OAIFailoverPolicies() {}

void OAIFailoverPolicies::initializeModel() {

    m_failover_policies_isSet = false;
    m_failover_policies_isValid = false;
}

void OAIFailoverPolicies::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFailoverPolicies::fromJsonObject(QJsonObject json) {

    m_failover_policies_isValid = ::OpenAPI::fromJsonValue(m_failover_policies, json[QString("failoverPolicies")]);
    m_failover_policies_isSet = !json[QString("failoverPolicies")].isNull() && m_failover_policies_isValid;
}

QString OAIFailoverPolicies::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFailoverPolicies::asJsonObject() const {
    QJsonObject obj;
    if (m_failover_policies.size() > 0) {
        obj.insert(QString("failoverPolicies"), ::OpenAPI::toJsonValue(m_failover_policies));
    }
    return obj;
}

QList<OAIFailoverPolicy> OAIFailoverPolicies::getFailoverPolicies() const {
    return m_failover_policies;
}
void OAIFailoverPolicies::setFailoverPolicies(const QList<OAIFailoverPolicy> &failover_policies) {
    m_failover_policies = failover_policies;
    m_failover_policies_isSet = true;
}

bool OAIFailoverPolicies::is_failover_policies_Set() const{
    return m_failover_policies_isSet;
}

bool OAIFailoverPolicies::is_failover_policies_Valid() const{
    return m_failover_policies_isValid;
}

bool OAIFailoverPolicies::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failover_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFailoverPolicies::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_failover_policies_isValid && true;
}

} // namespace OpenAPI
