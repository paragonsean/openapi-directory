/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2015-11-06
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISqlContainerResource.h
 *
 * Cosmos DB SQL container resource object
 */

#ifndef OAISqlContainerResource_H
#define OAISqlContainerResource_H

#include <QJsonObject>

#include "OAIConflictResolutionPolicy.h"
#include "OAIContainerPartitionKey.h"
#include "OAIIndexingPolicy.h"
#include "OAIUniqueKeyPolicy.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIConflictResolutionPolicy;
class OAIIndexingPolicy;
class OAIContainerPartitionKey;
class OAIUniqueKeyPolicy;

class OAISqlContainerResource : public OAIObject {
public:
    OAISqlContainerResource();
    OAISqlContainerResource(QString json);
    ~OAISqlContainerResource() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIConflictResolutionPolicy getConflictResolutionPolicy() const;
    void setConflictResolutionPolicy(const OAIConflictResolutionPolicy &conflict_resolution_policy);
    bool is_conflict_resolution_policy_Set() const;
    bool is_conflict_resolution_policy_Valid() const;

    qint32 getDefaultTtl() const;
    void setDefaultTtl(const qint32 &default_ttl);
    bool is_default_ttl_Set() const;
    bool is_default_ttl_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIIndexingPolicy getIndexingPolicy() const;
    void setIndexingPolicy(const OAIIndexingPolicy &indexing_policy);
    bool is_indexing_policy_Set() const;
    bool is_indexing_policy_Valid() const;

    OAIContainerPartitionKey getPartitionKey() const;
    void setPartitionKey(const OAIContainerPartitionKey &partition_key);
    bool is_partition_key_Set() const;
    bool is_partition_key_Valid() const;

    OAIUniqueKeyPolicy getUniqueKeyPolicy() const;
    void setUniqueKeyPolicy(const OAIUniqueKeyPolicy &unique_key_policy);
    bool is_unique_key_policy_Set() const;
    bool is_unique_key_policy_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIConflictResolutionPolicy m_conflict_resolution_policy;
    bool m_conflict_resolution_policy_isSet;
    bool m_conflict_resolution_policy_isValid;

    qint32 m_default_ttl;
    bool m_default_ttl_isSet;
    bool m_default_ttl_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIIndexingPolicy m_indexing_policy;
    bool m_indexing_policy_isSet;
    bool m_indexing_policy_isValid;

    OAIContainerPartitionKey m_partition_key;
    bool m_partition_key_isSet;
    bool m_partition_key_isValid;

    OAIUniqueKeyPolicy m_unique_key_policy;
    bool m_unique_key_policy_isSet;
    bool m_unique_key_policy_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISqlContainerResource)

#endif // OAISqlContainerResource_H
