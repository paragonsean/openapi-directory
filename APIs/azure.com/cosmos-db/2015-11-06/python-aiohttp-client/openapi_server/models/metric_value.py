# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MetricValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: float=None, average: float=None, maximum: float=None, minimum: float=None, timestamp: datetime=None, total: float=None):
        """MetricValue - a model defined in OpenAPI

        :param count: The count of this MetricValue.
        :param average: The average of this MetricValue.
        :param maximum: The maximum of this MetricValue.
        :param minimum: The minimum of this MetricValue.
        :param timestamp: The timestamp of this MetricValue.
        :param total: The total of this MetricValue.
        """
        self.openapi_types = {
            'count': float,
            'average': float,
            'maximum': float,
            'minimum': float,
            'timestamp': datetime,
            'total': float
        }

        self.attribute_map = {
            'count': '_count',
            'average': 'average',
            'maximum': 'maximum',
            'minimum': 'minimum',
            'timestamp': 'timestamp',
            'total': 'total'
        }

        self._count = count
        self._average = average
        self._maximum = maximum
        self._minimum = minimum
        self._timestamp = timestamp
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricValue of this MetricValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this MetricValue.

        The number of values for the metric.

        :return: The count of this MetricValue.
        :rtype: float
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this MetricValue.

        The number of values for the metric.

        :param count: The count of this MetricValue.
        :type count: float
        """

        self._count = count

    @property
    def average(self):
        """Gets the average of this MetricValue.

        The average value of the metric.

        :return: The average of this MetricValue.
        :rtype: float
        """
        return self._average

    @average.setter
    def average(self, average):
        """Sets the average of this MetricValue.

        The average value of the metric.

        :param average: The average of this MetricValue.
        :type average: float
        """

        self._average = average

    @property
    def maximum(self):
        """Gets the maximum of this MetricValue.

        The max value of the metric.

        :return: The maximum of this MetricValue.
        :rtype: float
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """Sets the maximum of this MetricValue.

        The max value of the metric.

        :param maximum: The maximum of this MetricValue.
        :type maximum: float
        """

        self._maximum = maximum

    @property
    def minimum(self):
        """Gets the minimum of this MetricValue.

        The min value of the metric.

        :return: The minimum of this MetricValue.
        :rtype: float
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this MetricValue.

        The min value of the metric.

        :param minimum: The minimum of this MetricValue.
        :type minimum: float
        """

        self._minimum = minimum

    @property
    def timestamp(self):
        """Gets the timestamp of this MetricValue.

        The metric timestamp (ISO-8601 format).

        :return: The timestamp of this MetricValue.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this MetricValue.

        The metric timestamp (ISO-8601 format).

        :param timestamp: The timestamp of this MetricValue.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def total(self):
        """Gets the total of this MetricValue.

        The total value of the metric.

        :return: The total of this MetricValue.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this MetricValue.

        The total value of the metric.

        :param total: The total of this MetricValue.
        :type total: float
        """

        self._total = total
