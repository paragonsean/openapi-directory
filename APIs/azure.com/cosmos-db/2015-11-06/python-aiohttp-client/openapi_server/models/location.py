# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Location(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_endpoint: str=None, failover_priority: int=None, id: str=None, is_zone_redundant: bool=None, location_name: str=None, provisioning_state: str=None):
        """Location - a model defined in OpenAPI

        :param document_endpoint: The document_endpoint of this Location.
        :param failover_priority: The failover_priority of this Location.
        :param id: The id of this Location.
        :param is_zone_redundant: The is_zone_redundant of this Location.
        :param location_name: The location_name of this Location.
        :param provisioning_state: The provisioning_state of this Location.
        """
        self.openapi_types = {
            'document_endpoint': str,
            'failover_priority': int,
            'id': str,
            'is_zone_redundant': bool,
            'location_name': str,
            'provisioning_state': str
        }

        self.attribute_map = {
            'document_endpoint': 'documentEndpoint',
            'failover_priority': 'failoverPriority',
            'id': 'id',
            'is_zone_redundant': 'isZoneRedundant',
            'location_name': 'locationName',
            'provisioning_state': 'provisioningState'
        }

        self._document_endpoint = document_endpoint
        self._failover_priority = failover_priority
        self._id = id
        self._is_zone_redundant = is_zone_redundant
        self._location_name = location_name
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Location':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Location of this Location.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_endpoint(self):
        """Gets the document_endpoint of this Location.

        The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/

        :return: The document_endpoint of this Location.
        :rtype: str
        """
        return self._document_endpoint

    @document_endpoint.setter
    def document_endpoint(self, document_endpoint):
        """Sets the document_endpoint of this Location.

        The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/

        :param document_endpoint: The document_endpoint of this Location.
        :type document_endpoint: str
        """

        self._document_endpoint = document_endpoint

    @property
    def failover_priority(self):
        """Gets the failover_priority of this Location.

        The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.

        :return: The failover_priority of this Location.
        :rtype: int
        """
        return self._failover_priority

    @failover_priority.setter
    def failover_priority(self, failover_priority):
        """Sets the failover_priority of this Location.

        The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.

        :param failover_priority: The failover_priority of this Location.
        :type failover_priority: int
        """
        if failover_priority is not None and failover_priority < 0:
            raise ValueError("Invalid value for `failover_priority`, must be a value greater than or equal to `0`")

        self._failover_priority = failover_priority

    @property
    def id(self):
        """Gets the id of this Location.

        The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.

        :return: The id of this Location.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Location.

        The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.

        :param id: The id of this Location.
        :type id: str
        """

        self._id = id

    @property
    def is_zone_redundant(self):
        """Gets the is_zone_redundant of this Location.

        Flag to indicate whether or not this region is an AvailabilityZone region

        :return: The is_zone_redundant of this Location.
        :rtype: bool
        """
        return self._is_zone_redundant

    @is_zone_redundant.setter
    def is_zone_redundant(self, is_zone_redundant):
        """Sets the is_zone_redundant of this Location.

        Flag to indicate whether or not this region is an AvailabilityZone region

        :param is_zone_redundant: The is_zone_redundant of this Location.
        :type is_zone_redundant: bool
        """

        self._is_zone_redundant = is_zone_redundant

    @property
    def location_name(self):
        """Gets the location_name of this Location.

        The name of the region.

        :return: The location_name of this Location.
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """Sets the location_name of this Location.

        The name of the region.

        :param location_name: The location_name of this Location.
        :type location_name: str
        """

        self._location_name = location_name

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this Location.

        The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation.

        :return: The provisioning_state of this Location.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this Location.

        The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation.

        :param provisioning_state: The provisioning_state of this Location.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state
