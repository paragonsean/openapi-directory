# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MongoIndexOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expire_after_seconds: int=None, unique: bool=None):
        """MongoIndexOptions - a model defined in OpenAPI

        :param expire_after_seconds: The expire_after_seconds of this MongoIndexOptions.
        :param unique: The unique of this MongoIndexOptions.
        """
        self.openapi_types = {
            'expire_after_seconds': int,
            'unique': bool
        }

        self.attribute_map = {
            'expire_after_seconds': 'expireAfterSeconds',
            'unique': 'unique'
        }

        self._expire_after_seconds = expire_after_seconds
        self._unique = unique

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MongoIndexOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MongoIndexOptions of this MongoIndexOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expire_after_seconds(self):
        """Gets the expire_after_seconds of this MongoIndexOptions.

        Expire after seconds

        :return: The expire_after_seconds of this MongoIndexOptions.
        :rtype: int
        """
        return self._expire_after_seconds

    @expire_after_seconds.setter
    def expire_after_seconds(self, expire_after_seconds):
        """Sets the expire_after_seconds of this MongoIndexOptions.

        Expire after seconds

        :param expire_after_seconds: The expire_after_seconds of this MongoIndexOptions.
        :type expire_after_seconds: int
        """

        self._expire_after_seconds = expire_after_seconds

    @property
    def unique(self):
        """Gets the unique of this MongoIndexOptions.

        Is unique or not

        :return: The unique of this MongoIndexOptions.
        :rtype: bool
        """
        return self._unique

    @unique.setter
    def unique(self, unique):
        """Sets the unique of this MongoIndexOptions.

        Is unique or not

        :param unique: The unique of this MongoIndexOptions.
        :type unique: bool
        """

        self._unique = unique
