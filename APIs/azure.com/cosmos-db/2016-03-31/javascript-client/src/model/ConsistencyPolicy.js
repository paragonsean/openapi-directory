/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2016-03-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConsistencyPolicy model module.
 * @module model/ConsistencyPolicy
 * @version 2016-03-31
 */
class ConsistencyPolicy {
    /**
     * Constructs a new <code>ConsistencyPolicy</code>.
     * The consistency policy for the Cosmos DB database account.
     * @alias module:model/ConsistencyPolicy
     * @param defaultConsistencyLevel {module:model/ConsistencyPolicy.DefaultConsistencyLevelEnum} The default consistency level and configuration settings of the Cosmos DB account.
     */
    constructor(defaultConsistencyLevel) { 
        
        ConsistencyPolicy.initialize(this, defaultConsistencyLevel);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, defaultConsistencyLevel) { 
        obj['defaultConsistencyLevel'] = defaultConsistencyLevel;
    }

    /**
     * Constructs a <code>ConsistencyPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConsistencyPolicy} obj Optional instance to populate.
     * @return {module:model/ConsistencyPolicy} The populated <code>ConsistencyPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConsistencyPolicy();

            if (data.hasOwnProperty('defaultConsistencyLevel')) {
                obj['defaultConsistencyLevel'] = ApiClient.convertToType(data['defaultConsistencyLevel'], 'String');
            }
            if (data.hasOwnProperty('maxIntervalInSeconds')) {
                obj['maxIntervalInSeconds'] = ApiClient.convertToType(data['maxIntervalInSeconds'], 'Number');
            }
            if (data.hasOwnProperty('maxStalenessPrefix')) {
                obj['maxStalenessPrefix'] = ApiClient.convertToType(data['maxStalenessPrefix'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConsistencyPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConsistencyPolicy</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConsistencyPolicy.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['defaultConsistencyLevel'] && !(typeof data['defaultConsistencyLevel'] === 'string' || data['defaultConsistencyLevel'] instanceof String)) {
            throw new Error("Expected the field `defaultConsistencyLevel` to be a primitive type in the JSON string but got " + data['defaultConsistencyLevel']);
        }

        return true;
    }


}

ConsistencyPolicy.RequiredProperties = ["defaultConsistencyLevel"];

/**
 * The default consistency level and configuration settings of the Cosmos DB account.
 * @member {module:model/ConsistencyPolicy.DefaultConsistencyLevelEnum} defaultConsistencyLevel
 */
ConsistencyPolicy.prototype['defaultConsistencyLevel'] = undefined;

/**
 * When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
 * @member {Number} maxIntervalInSeconds
 */
ConsistencyPolicy.prototype['maxIntervalInSeconds'] = undefined;

/**
 * When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 â€“ 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
 * @member {Number} maxStalenessPrefix
 */
ConsistencyPolicy.prototype['maxStalenessPrefix'] = undefined;





/**
 * Allowed values for the <code>defaultConsistencyLevel</code> property.
 * @enum {String}
 * @readonly
 */
ConsistencyPolicy['DefaultConsistencyLevelEnum'] = {

    /**
     * value: "Eventual"
     * @const
     */
    "Eventual": "Eventual",

    /**
     * value: "Session"
     * @const
     */
    "Session": "Session",

    /**
     * value: "BoundedStaleness"
     * @const
     */
    "BoundedStaleness": "BoundedStaleness",

    /**
     * value: "Strong"
     * @const
     */
    "Strong": "Strong",

    /**
     * value: "ConsistentPrefix"
     * @const
     */
    "ConsistentPrefix": "ConsistentPrefix"
};



export default ConsistencyPolicy;

