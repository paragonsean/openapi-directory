/*
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2016-03-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MetricName;
import org.openapitools.client.model.MetricValue;
import org.openapitools.client.model.UnitType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The metric values for a single partition.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:52.283764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PartitionMetric {
  public static final String SERIALIZED_NAME_PARTITION_ID = "partitionId";
  @SerializedName(SERIALIZED_NAME_PARTITION_ID)
  private String partitionId;

  public static final String SERIALIZED_NAME_PARTITION_KEY_RANGE_ID = "partitionKeyRangeId";
  @SerializedName(SERIALIZED_NAME_PARTITION_KEY_RANGE_ID)
  private String partitionKeyRangeId;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_METRIC_VALUES = "metricValues";
  @SerializedName(SERIALIZED_NAME_METRIC_VALUES)
  private List<MetricValue> metricValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private MetricName name;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_TIME_GRAIN = "timeGrain";
  @SerializedName(SERIALIZED_NAME_TIME_GRAIN)
  private String timeGrain;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private UnitType unit;

  public PartitionMetric() {
  }

  public PartitionMetric(
     String partitionId, 
     String partitionKeyRangeId, 
     OffsetDateTime endTime, 
     List<MetricValue> metricValues, 
     OffsetDateTime startTime, 
     String timeGrain
  ) {
    this();
    this.partitionId = partitionId;
    this.partitionKeyRangeId = partitionKeyRangeId;
    this.endTime = endTime;
    this.metricValues = metricValues;
    this.startTime = startTime;
    this.timeGrain = timeGrain;
  }

  /**
   * The partition id (GUID identifier) of the metric values.
   * @return partitionId
   */
  @javax.annotation.Nullable
  public String getPartitionId() {
    return partitionId;
  }



  /**
   * The partition key range id (integer identifier) of the metric values.
   * @return partitionKeyRangeId
   */
  @javax.annotation.Nullable
  public String getPartitionKeyRangeId() {
    return partitionKeyRangeId;
  }



  /**
   * The end time for the metric (ISO-8601 format).
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }



  /**
   * The metric values for the specified time window and timestep.
   * @return metricValues
   */
  @javax.annotation.Nullable
  public List<MetricValue> getMetricValues() {
    return metricValues;
  }



  public PartitionMetric name(MetricName name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public MetricName getName() {
    return name;
  }

  public void setName(MetricName name) {
    this.name = name;
  }


  /**
   * The start time for the metric (ISO-8601 format).
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }



  /**
   * The time grain to be used to summarize the metric values.
   * @return timeGrain
   */
  @javax.annotation.Nullable
  public String getTimeGrain() {
    return timeGrain;
  }



  public PartitionMetric unit(UnitType unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Get unit
   * @return unit
   */
  @javax.annotation.Nullable
  public UnitType getUnit() {
    return unit;
  }

  public void setUnit(UnitType unit) {
    this.unit = unit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartitionMetric partitionMetric = (PartitionMetric) o;
    return Objects.equals(this.partitionId, partitionMetric.partitionId) &&
        Objects.equals(this.partitionKeyRangeId, partitionMetric.partitionKeyRangeId) &&
        Objects.equals(this.endTime, partitionMetric.endTime) &&
        Objects.equals(this.metricValues, partitionMetric.metricValues) &&
        Objects.equals(this.name, partitionMetric.name) &&
        Objects.equals(this.startTime, partitionMetric.startTime) &&
        Objects.equals(this.timeGrain, partitionMetric.timeGrain) &&
        Objects.equals(this.unit, partitionMetric.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(partitionId, partitionKeyRangeId, endTime, metricValues, name, startTime, timeGrain, unit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartitionMetric {\n");
    sb.append("    partitionId: ").append(toIndentedString(partitionId)).append("\n");
    sb.append("    partitionKeyRangeId: ").append(toIndentedString(partitionKeyRangeId)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    metricValues: ").append(toIndentedString(metricValues)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    timeGrain: ").append(toIndentedString(timeGrain)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTime");
    openapiFields.add("metricValues");
    openapiFields.add("name");
    openapiFields.add("startTime");
    openapiFields.add("timeGrain");
    openapiFields.add("unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PartitionMetric
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PartitionMetric.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PartitionMetric is not found in the empty JSON string", PartitionMetric.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PartitionMetric.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PartitionMetric` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("partitionId") != null && !jsonObj.get("partitionId").isJsonNull()) && !jsonObj.get("partitionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partitionId").toString()));
      }
      if ((jsonObj.get("partitionKeyRangeId") != null && !jsonObj.get("partitionKeyRangeId").isJsonNull()) && !jsonObj.get("partitionKeyRangeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partitionKeyRangeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partitionKeyRangeId").toString()));
      }
      if (jsonObj.get("metricValues") != null && !jsonObj.get("metricValues").isJsonNull()) {
        JsonArray jsonArraymetricValues = jsonObj.getAsJsonArray("metricValues");
        if (jsonArraymetricValues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metricValues").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metricValues` to be an array in the JSON string but got `%s`", jsonObj.get("metricValues").toString()));
          }

          // validate the optional field `metricValues` (array)
          for (int i = 0; i < jsonArraymetricValues.size(); i++) {
            MetricValue.validateJsonElement(jsonArraymetricValues.get(i));
          };
        }
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        MetricName.validateJsonElement(jsonObj.get("name"));
      }
      if ((jsonObj.get("timeGrain") != null && !jsonObj.get("timeGrain").isJsonNull()) && !jsonObj.get("timeGrain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeGrain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeGrain").toString()));
      }
      // validate the optional field `unit`
      if (jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) {
        UnitType.validateJsonElement(jsonObj.get("unit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PartitionMetric.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PartitionMetric' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PartitionMetric> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PartitionMetric.class));

       return (TypeAdapter<T>) new TypeAdapter<PartitionMetric>() {
           @Override
           public void write(JsonWriter out, PartitionMetric value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PartitionMetric read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PartitionMetric given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PartitionMetric
   * @throws IOException if the JSON string is invalid with respect to PartitionMetric
   */
  public static PartitionMetric fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PartitionMetric.class);
  }

  /**
   * Convert an instance of PartitionMetric to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

