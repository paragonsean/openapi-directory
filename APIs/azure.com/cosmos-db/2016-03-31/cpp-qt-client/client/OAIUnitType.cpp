/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2016-03-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUnitType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUnitType::OAIUnitType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUnitType::OAIUnitType() {
    this->initializeModel();
}

OAIUnitType::~OAIUnitType() {}

void OAIUnitType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIUnitType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIUnitType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Count", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnitType::COUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Bytes", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnitType::BYTES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Seconds", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnitType::SECONDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Percent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnitType::PERCENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CountPerSecond", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnitType::COUNTPERSECOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BytesPerSecond", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnitType::BYTESPERSECOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Milliseconds", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnitType::MILLISECONDS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIUnitType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIUnitType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIUnitType::COUNT:
            val = "Count";
            break;
        case eOAIUnitType::BYTES:
            val = "Bytes";
            break;
        case eOAIUnitType::SECONDS:
            val = "Seconds";
            break;
        case eOAIUnitType::PERCENT:
            val = "Percent";
            break;
        case eOAIUnitType::COUNTPERSECOND:
            val = "CountPerSecond";
            break;
        case eOAIUnitType::BYTESPERSECOND:
            val = "BytesPerSecond";
            break;
        case eOAIUnitType::MILLISECONDS:
            val = "Milliseconds";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIUnitType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIUnitType::eOAIUnitType OAIUnitType::getValue() const {
    return m_value;
}

void OAIUnitType::setValue(const OAIUnitType::eOAIUnitType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIUnitType::isSet() const {
    
    return m_value_isSet;
}

bool OAIUnitType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
