/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2016-03-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICassandraKeyspace.h"
#include "OAICassandraKeyspaceCreateUpdateParameters.h"
#include "OAICassandraKeyspaceListResult.h"
#include "OAICassandraTable.h"
#include "OAICassandraTableCreateUpdateParameters.h"
#include "OAICassandraTableListResult.h"
#include "OAIDatabaseAccount.h"
#include "OAIDatabaseAccountCreateUpdateParameters.h"
#include "OAIDatabaseAccountListConnectionStringsResult.h"
#include "OAIDatabaseAccountListKeysResult.h"
#include "OAIDatabaseAccountListReadOnlyKeysResult.h"
#include "OAIDatabaseAccountPatchParameters.h"
#include "OAIDatabaseAccountRegenerateKeyParameters.h"
#include "OAIDatabaseAccountsListResult.h"
#include "OAIErrorResponse.h"
#include "OAIFailoverPolicies.h"
#include "OAIGremlinDatabase.h"
#include "OAIGremlinDatabaseCreateUpdateParameters.h"
#include "OAIGremlinDatabaseListResult.h"
#include "OAIGremlinGraph.h"
#include "OAIGremlinGraphCreateUpdateParameters.h"
#include "OAIGremlinGraphListResult.h"
#include "OAIMetricDefinitionsListResult.h"
#include "OAIMetricListResult.h"
#include "OAIMongoDBCollection.h"
#include "OAIMongoDBCollectionCreateUpdateParameters.h"
#include "OAIMongoDBCollectionListResult.h"
#include "OAIMongoDBDatabase.h"
#include "OAIMongoDBDatabaseCreateUpdateParameters.h"
#include "OAIMongoDBDatabaseListResult.h"
#include "OAIPartitionMetricListResult.h"
#include "OAIPartitionUsagesResult.h"
#include "OAIPercentileMetricListResult.h"
#include "OAIRegionForOnlineOffline.h"
#include "OAISqlContainer.h"
#include "OAISqlContainerCreateUpdateParameters.h"
#include "OAISqlContainerListResult.h"
#include "OAISqlDatabase.h"
#include "OAISqlDatabaseCreateUpdateParameters.h"
#include "OAISqlDatabaseListResult.h"
#include "OAITable.h"
#include "OAITableCreateUpdateParameters.h"
#include "OAITableListResult.h"
#include "OAIThroughput.h"
#include "OAIThroughputUpdateParameters.h"
#include "OAIUsagesResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_rid QString [required]
    * @param[in]  collection_rid QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void collectionListMetricDefinitions(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_rid, const QString &collection_rid, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_rid QString [required]
    * @param[in]  collection_rid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [required]
    */
    virtual void collectionListMetrics(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_rid, const QString &collection_rid, const QString &api_version, const QString &filter);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_rid QString [required]
    * @param[in]  collection_rid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void collectionListUsages(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_rid, const QString &collection_rid, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_rid QString [required]
    * @param[in]  collection_rid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [required]
    */
    virtual void collectionPartitionListMetrics(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_rid, const QString &collection_rid, const QString &api_version, const QString &filter);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_rid QString [required]
    * @param[in]  collection_rid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void collectionPartitionListUsages(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_rid, const QString &collection_rid, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  region QString [required]
    * @param[in]  database_rid QString [required]
    * @param[in]  collection_rid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [required]
    */
    virtual void collectionPartitionRegionListMetrics(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &region, const QString &database_rid, const QString &collection_rid, const QString &api_version, const QString &filter);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  region QString [required]
    * @param[in]  database_rid QString [required]
    * @param[in]  collection_rid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [required]
    */
    virtual void collectionRegionListMetrics(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &region, const QString &database_rid, const QString &collection_rid, const QString &api_version, const QString &filter);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  region QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [required]
    */
    virtual void databaseAccountRegionListMetrics(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &region, const QString &api_version, const QString &filter);

    /**
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsCheckNameExists(const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_update_parameters OAIDatabaseAccountCreateUpdateParameters [required]
    */
    virtual void databaseAccountsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const OAIDatabaseAccountCreateUpdateParameters &create_update_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  keyspace_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_update_cassandra_keyspace_parameters OAICassandraKeyspaceCreateUpdateParameters [required]
    */
    virtual void databaseAccountsCreateUpdateCassandraKeyspace(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &keyspace_name, const QString &api_version, const OAICassandraKeyspaceCreateUpdateParameters &create_update_cassandra_keyspace_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  keyspace_name QString [required]
    * @param[in]  table_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_update_cassandra_table_parameters OAICassandraTableCreateUpdateParameters [required]
    */
    virtual void databaseAccountsCreateUpdateCassandraTable(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &keyspace_name, const QString &table_name, const QString &api_version, const OAICassandraTableCreateUpdateParameters &create_update_cassandra_table_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_update_gremlin_database_parameters OAIGremlinDatabaseCreateUpdateParameters [required]
    */
    virtual void databaseAccountsCreateUpdateGremlinDatabase(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version, const OAIGremlinDatabaseCreateUpdateParameters &create_update_gremlin_database_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  graph_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_update_gremlin_graph_parameters OAIGremlinGraphCreateUpdateParameters [required]
    */
    virtual void databaseAccountsCreateUpdateGremlinGraph(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &graph_name, const QString &api_version, const OAIGremlinGraphCreateUpdateParameters &create_update_gremlin_graph_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  collection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_update_mongo_db_collection_parameters OAIMongoDBCollectionCreateUpdateParameters [required]
    */
    virtual void databaseAccountsCreateUpdateMongoDBCollection(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &collection_name, const QString &api_version, const OAIMongoDBCollectionCreateUpdateParameters &create_update_mongo_db_collection_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_update_mongo_db_database_parameters OAIMongoDBDatabaseCreateUpdateParameters [required]
    */
    virtual void databaseAccountsCreateUpdateMongoDBDatabase(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version, const OAIMongoDBDatabaseCreateUpdateParameters &create_update_mongo_db_database_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_update_sql_container_parameters OAISqlContainerCreateUpdateParameters [required]
    */
    virtual void databaseAccountsCreateUpdateSqlContainer(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &container_name, const QString &api_version, const OAISqlContainerCreateUpdateParameters &create_update_sql_container_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_update_sql_database_parameters OAISqlDatabaseCreateUpdateParameters [required]
    */
    virtual void databaseAccountsCreateUpdateSqlDatabase(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version, const OAISqlDatabaseCreateUpdateParameters &create_update_sql_database_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  table_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_update_table_parameters OAITableCreateUpdateParameters [required]
    */
    virtual void databaseAccountsCreateUpdateTable(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &table_name, const QString &api_version, const OAITableCreateUpdateParameters &create_update_table_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  keyspace_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsDeleteCassandraKeyspace(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &keyspace_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  keyspace_name QString [required]
    * @param[in]  table_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsDeleteCassandraTable(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &keyspace_name, const QString &table_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsDeleteGremlinDatabase(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  graph_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsDeleteGremlinGraph(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &graph_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  collection_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsDeleteMongoDBCollection(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &collection_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsDeleteMongoDBDatabase(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsDeleteSqlContainer(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &container_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsDeleteSqlDatabase(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  table_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsDeleteTable(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &table_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  failover_parameters OAIFailoverPolicies [required]
    */
    virtual void databaseAccountsFailoverPriorityChange(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const OAIFailoverPolicies &failover_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsGet(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  keyspace_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsGetCassandraKeyspace(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &keyspace_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  keyspace_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsGetCassandraKeyspaceThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &keyspace_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  keyspace_name QString [required]
    * @param[in]  table_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsGetCassandraTable(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &keyspace_name, const QString &table_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  keyspace_name QString [required]
    * @param[in]  table_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsGetCassandraTableThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &keyspace_name, const QString &table_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsGetGremlinDatabase(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsGetGremlinDatabaseThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  graph_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsGetGremlinGraph(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &graph_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  graph_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsGetGremlinGraphThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &graph_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  collection_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsGetMongoDBCollection(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &collection_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  collection_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsGetMongoDBCollectionThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &collection_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsGetMongoDBDatabase(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsGetMongoDBDatabaseThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsGetReadOnlyKeys(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsGetSqlContainer(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &container_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsGetSqlContainerThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &container_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsGetSqlDatabase(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsGetSqlDatabaseThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  table_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsGetTable(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &table_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  table_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsGetTableThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &table_name, const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void databaseAccountsList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void databaseAccountsListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsListCassandraKeyspaces(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  keyspace_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsListCassandraTables(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &keyspace_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsListConnectionStrings(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsListGremlinDatabases(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsListGremlinGraphs(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsListKeys(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsListMetricDefinitions(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [required]
    */
    virtual void databaseAccountsListMetrics(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const QString &filter);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsListMongoDBCollections(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsListMongoDBDatabases(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsListReadOnlyKeys(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsListSqlContainers(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsListSqlDatabases(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseAccountsListTables(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void databaseAccountsListUsages(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  region_parameter_for_offline OAIRegionForOnlineOffline [required]
    */
    virtual void databaseAccountsOfflineRegion(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const OAIRegionForOnlineOffline &region_parameter_for_offline);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  region_parameter_for_online OAIRegionForOnlineOffline [required]
    */
    virtual void databaseAccountsOnlineRegion(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const OAIRegionForOnlineOffline &region_parameter_for_online);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  update_parameters OAIDatabaseAccountPatchParameters [required]
    */
    virtual void databaseAccountsPatch(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const OAIDatabaseAccountPatchParameters &update_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  key_to_regenerate OAIDatabaseAccountRegenerateKeyParameters [required]
    */
    virtual void databaseAccountsRegenerateKey(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const OAIDatabaseAccountRegenerateKeyParameters &key_to_regenerate);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  keyspace_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  update_throughput_parameters OAIThroughputUpdateParameters [required]
    */
    virtual void databaseAccountsUpdateCassandraKeyspaceThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &keyspace_name, const QString &api_version, const OAIThroughputUpdateParameters &update_throughput_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  keyspace_name QString [required]
    * @param[in]  table_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  update_throughput_parameters OAIThroughputUpdateParameters [required]
    */
    virtual void databaseAccountsUpdateCassandraTableThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &keyspace_name, const QString &table_name, const QString &api_version, const OAIThroughputUpdateParameters &update_throughput_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  update_throughput_parameters OAIThroughputUpdateParameters [required]
    */
    virtual void databaseAccountsUpdateGremlinDatabaseThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version, const OAIThroughputUpdateParameters &update_throughput_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  graph_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  update_throughput_parameters OAIThroughputUpdateParameters [required]
    */
    virtual void databaseAccountsUpdateGremlinGraphThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &graph_name, const QString &api_version, const OAIThroughputUpdateParameters &update_throughput_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  collection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  update_throughput_parameters OAIThroughputUpdateParameters [required]
    */
    virtual void databaseAccountsUpdateMongoDBCollectionThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &collection_name, const QString &api_version, const OAIThroughputUpdateParameters &update_throughput_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  update_throughput_parameters OAIThroughputUpdateParameters [required]
    */
    virtual void databaseAccountsUpdateMongoDBDatabaseThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version, const OAIThroughputUpdateParameters &update_throughput_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  update_throughput_parameters OAIThroughputUpdateParameters [required]
    */
    virtual void databaseAccountsUpdateSqlContainerThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &container_name, const QString &api_version, const OAIThroughputUpdateParameters &update_throughput_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  update_throughput_parameters OAIThroughputUpdateParameters [required]
    */
    virtual void databaseAccountsUpdateSqlDatabaseThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_name, const QString &api_version, const OAIThroughputUpdateParameters &update_throughput_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  table_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  update_throughput_parameters OAIThroughputUpdateParameters [required]
    */
    virtual void databaseAccountsUpdateTableThroughput(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &table_name, const QString &api_version, const OAIThroughputUpdateParameters &update_throughput_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_rid QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseListMetricDefinitions(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_rid, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_rid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [required]
    */
    virtual void databaseListMetrics(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_rid, const QString &api_version, const QString &filter);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_rid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void databaseListUsages(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_rid, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  database_rid QString [required]
    * @param[in]  collection_rid QString [required]
    * @param[in]  partition_key_range_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [required]
    */
    virtual void partitionKeyRangeIdListMetrics(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &database_rid, const QString &collection_rid, const QString &partition_key_range_id, const QString &api_version, const QString &filter);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  region QString [required]
    * @param[in]  database_rid QString [required]
    * @param[in]  collection_rid QString [required]
    * @param[in]  partition_key_range_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [required]
    */
    virtual void partitionKeyRangeIdRegionListMetrics(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &region, const QString &database_rid, const QString &collection_rid, const QString &partition_key_range_id, const QString &api_version, const QString &filter);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [required]
    */
    virtual void percentileListMetrics(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const QString &filter);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  source_region QString [required]
    * @param[in]  target_region QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [required]
    */
    virtual void percentileSourceTargetListMetrics(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &source_region, const QString &target_region, const QString &api_version, const QString &filter);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  target_region QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [required]
    */
    virtual void percentileTargetListMetrics(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &target_region, const QString &api_version, const QString &filter);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void collectionListMetricDefinitionsCallback(OAIHttpRequestWorker *worker);
    void collectionListMetricsCallback(OAIHttpRequestWorker *worker);
    void collectionListUsagesCallback(OAIHttpRequestWorker *worker);
    void collectionPartitionListMetricsCallback(OAIHttpRequestWorker *worker);
    void collectionPartitionListUsagesCallback(OAIHttpRequestWorker *worker);
    void collectionPartitionRegionListMetricsCallback(OAIHttpRequestWorker *worker);
    void collectionRegionListMetricsCallback(OAIHttpRequestWorker *worker);
    void databaseAccountRegionListMetricsCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsCheckNameExistsCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsCreateUpdateCassandraKeyspaceCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsCreateUpdateCassandraTableCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsCreateUpdateGremlinDatabaseCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsCreateUpdateGremlinGraphCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsCreateUpdateMongoDBCollectionCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsCreateUpdateMongoDBDatabaseCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsCreateUpdateSqlContainerCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsCreateUpdateSqlDatabaseCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsCreateUpdateTableCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsDeleteCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsDeleteCassandraKeyspaceCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsDeleteCassandraTableCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsDeleteGremlinDatabaseCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsDeleteGremlinGraphCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsDeleteMongoDBCollectionCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsDeleteMongoDBDatabaseCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsDeleteSqlContainerCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsDeleteSqlDatabaseCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsDeleteTableCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsFailoverPriorityChangeCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsGetCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsGetCassandraKeyspaceCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsGetCassandraKeyspaceThroughputCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsGetCassandraTableCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsGetCassandraTableThroughputCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsGetGremlinDatabaseCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsGetGremlinDatabaseThroughputCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsGetGremlinGraphCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsGetGremlinGraphThroughputCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsGetMongoDBCollectionCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsGetMongoDBCollectionThroughputCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsGetMongoDBDatabaseCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsGetMongoDBDatabaseThroughputCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsGetReadOnlyKeysCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsGetSqlContainerCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsGetSqlContainerThroughputCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsGetSqlDatabaseCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsGetSqlDatabaseThroughputCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsGetTableCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsGetTableThroughputCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsListCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsListCassandraKeyspacesCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsListCassandraTablesCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsListConnectionStringsCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsListGremlinDatabasesCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsListGremlinGraphsCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsListKeysCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsListMetricDefinitionsCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsListMetricsCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsListMongoDBCollectionsCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsListMongoDBDatabasesCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsListReadOnlyKeysCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsListSqlContainersCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsListSqlDatabasesCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsListTablesCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsListUsagesCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsOfflineRegionCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsOnlineRegionCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsPatchCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsRegenerateKeyCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsUpdateCassandraKeyspaceThroughputCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsUpdateCassandraTableThroughputCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsUpdateGremlinDatabaseThroughputCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsUpdateGremlinGraphThroughputCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsUpdateMongoDBCollectionThroughputCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsUpdateMongoDBDatabaseThroughputCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsUpdateSqlContainerThroughputCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsUpdateSqlDatabaseThroughputCallback(OAIHttpRequestWorker *worker);
    void databaseAccountsUpdateTableThroughputCallback(OAIHttpRequestWorker *worker);
    void databaseListMetricDefinitionsCallback(OAIHttpRequestWorker *worker);
    void databaseListMetricsCallback(OAIHttpRequestWorker *worker);
    void databaseListUsagesCallback(OAIHttpRequestWorker *worker);
    void partitionKeyRangeIdListMetricsCallback(OAIHttpRequestWorker *worker);
    void partitionKeyRangeIdRegionListMetricsCallback(OAIHttpRequestWorker *worker);
    void percentileListMetricsCallback(OAIHttpRequestWorker *worker);
    void percentileSourceTargetListMetricsCallback(OAIHttpRequestWorker *worker);
    void percentileTargetListMetricsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void collectionListMetricDefinitionsSignal(OAIMetricDefinitionsListResult summary);
    void collectionListMetricsSignal(OAIMetricListResult summary);
    void collectionListUsagesSignal(OAIUsagesResult summary);
    void collectionPartitionListMetricsSignal(OAIPartitionMetricListResult summary);
    void collectionPartitionListUsagesSignal(OAIPartitionUsagesResult summary);
    void collectionPartitionRegionListMetricsSignal(OAIPartitionMetricListResult summary);
    void collectionRegionListMetricsSignal(OAIMetricListResult summary);
    void databaseAccountRegionListMetricsSignal(OAIMetricListResult summary);
    void databaseAccountsCheckNameExistsSignal();
    void databaseAccountsCreateOrUpdateSignal(OAIDatabaseAccount summary);
    void databaseAccountsCreateUpdateCassandraKeyspaceSignal(OAICassandraKeyspace summary);
    void databaseAccountsCreateUpdateCassandraTableSignal(OAICassandraTable summary);
    void databaseAccountsCreateUpdateGremlinDatabaseSignal(OAIGremlinDatabase summary);
    void databaseAccountsCreateUpdateGremlinGraphSignal(OAIGremlinGraph summary);
    void databaseAccountsCreateUpdateMongoDBCollectionSignal(OAIMongoDBCollection summary);
    void databaseAccountsCreateUpdateMongoDBDatabaseSignal(OAIMongoDBDatabase summary);
    void databaseAccountsCreateUpdateSqlContainerSignal(OAISqlContainer summary);
    void databaseAccountsCreateUpdateSqlDatabaseSignal(OAISqlDatabase summary);
    void databaseAccountsCreateUpdateTableSignal(OAITable summary);
    void databaseAccountsDeleteSignal();
    void databaseAccountsDeleteCassandraKeyspaceSignal();
    void databaseAccountsDeleteCassandraTableSignal();
    void databaseAccountsDeleteGremlinDatabaseSignal();
    void databaseAccountsDeleteGremlinGraphSignal();
    void databaseAccountsDeleteMongoDBCollectionSignal();
    void databaseAccountsDeleteMongoDBDatabaseSignal();
    void databaseAccountsDeleteSqlContainerSignal();
    void databaseAccountsDeleteSqlDatabaseSignal();
    void databaseAccountsDeleteTableSignal();
    void databaseAccountsFailoverPriorityChangeSignal();
    void databaseAccountsGetSignal(OAIDatabaseAccount summary);
    void databaseAccountsGetCassandraKeyspaceSignal(OAICassandraKeyspace summary);
    void databaseAccountsGetCassandraKeyspaceThroughputSignal(OAIThroughput summary);
    void databaseAccountsGetCassandraTableSignal(OAICassandraTable summary);
    void databaseAccountsGetCassandraTableThroughputSignal(OAIThroughput summary);
    void databaseAccountsGetGremlinDatabaseSignal(OAIGremlinDatabase summary);
    void databaseAccountsGetGremlinDatabaseThroughputSignal(OAIThroughput summary);
    void databaseAccountsGetGremlinGraphSignal(OAIGremlinGraph summary);
    void databaseAccountsGetGremlinGraphThroughputSignal(OAIThroughput summary);
    void databaseAccountsGetMongoDBCollectionSignal(OAIMongoDBCollection summary);
    void databaseAccountsGetMongoDBCollectionThroughputSignal(OAIThroughput summary);
    void databaseAccountsGetMongoDBDatabaseSignal(OAIMongoDBDatabase summary);
    void databaseAccountsGetMongoDBDatabaseThroughputSignal(OAIThroughput summary);
    void databaseAccountsGetReadOnlyKeysSignal(OAIDatabaseAccountListReadOnlyKeysResult summary);
    void databaseAccountsGetSqlContainerSignal(OAISqlContainer summary);
    void databaseAccountsGetSqlContainerThroughputSignal(OAIThroughput summary);
    void databaseAccountsGetSqlDatabaseSignal(OAISqlDatabase summary);
    void databaseAccountsGetSqlDatabaseThroughputSignal(OAIThroughput summary);
    void databaseAccountsGetTableSignal(OAITable summary);
    void databaseAccountsGetTableThroughputSignal(OAIThroughput summary);
    void databaseAccountsListSignal(OAIDatabaseAccountsListResult summary);
    void databaseAccountsListByResourceGroupSignal(OAIDatabaseAccountsListResult summary);
    void databaseAccountsListCassandraKeyspacesSignal(OAICassandraKeyspaceListResult summary);
    void databaseAccountsListCassandraTablesSignal(OAICassandraTableListResult summary);
    void databaseAccountsListConnectionStringsSignal(OAIDatabaseAccountListConnectionStringsResult summary);
    void databaseAccountsListGremlinDatabasesSignal(OAIGremlinDatabaseListResult summary);
    void databaseAccountsListGremlinGraphsSignal(OAIGremlinGraphListResult summary);
    void databaseAccountsListKeysSignal(OAIDatabaseAccountListKeysResult summary);
    void databaseAccountsListMetricDefinitionsSignal(OAIMetricDefinitionsListResult summary);
    void databaseAccountsListMetricsSignal(OAIMetricListResult summary);
    void databaseAccountsListMongoDBCollectionsSignal(OAIMongoDBCollectionListResult summary);
    void databaseAccountsListMongoDBDatabasesSignal(OAIMongoDBDatabaseListResult summary);
    void databaseAccountsListReadOnlyKeysSignal(OAIDatabaseAccountListReadOnlyKeysResult summary);
    void databaseAccountsListSqlContainersSignal(OAISqlContainerListResult summary);
    void databaseAccountsListSqlDatabasesSignal(OAISqlDatabaseListResult summary);
    void databaseAccountsListTablesSignal(OAITableListResult summary);
    void databaseAccountsListUsagesSignal(OAIUsagesResult summary);
    void databaseAccountsOfflineRegionSignal();
    void databaseAccountsOnlineRegionSignal();
    void databaseAccountsPatchSignal(OAIDatabaseAccount summary);
    void databaseAccountsRegenerateKeySignal();
    void databaseAccountsUpdateCassandraKeyspaceThroughputSignal(OAIThroughput summary);
    void databaseAccountsUpdateCassandraTableThroughputSignal(OAIThroughput summary);
    void databaseAccountsUpdateGremlinDatabaseThroughputSignal(OAIThroughput summary);
    void databaseAccountsUpdateGremlinGraphThroughputSignal(OAIThroughput summary);
    void databaseAccountsUpdateMongoDBCollectionThroughputSignal(OAIThroughput summary);
    void databaseAccountsUpdateMongoDBDatabaseThroughputSignal(OAIThroughput summary);
    void databaseAccountsUpdateSqlContainerThroughputSignal(OAIThroughput summary);
    void databaseAccountsUpdateSqlDatabaseThroughputSignal(OAIThroughput summary);
    void databaseAccountsUpdateTableThroughputSignal(OAIThroughput summary);
    void databaseListMetricDefinitionsSignal(OAIMetricDefinitionsListResult summary);
    void databaseListMetricsSignal(OAIMetricListResult summary);
    void databaseListUsagesSignal(OAIUsagesResult summary);
    void partitionKeyRangeIdListMetricsSignal(OAIPartitionMetricListResult summary);
    void partitionKeyRangeIdRegionListMetricsSignal(OAIPartitionMetricListResult summary);
    void percentileListMetricsSignal(OAIPercentileMetricListResult summary);
    void percentileSourceTargetListMetricsSignal(OAIPercentileMetricListResult summary);
    void percentileTargetListMetricsSignal(OAIPercentileMetricListResult summary);


    void collectionListMetricDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAIMetricDefinitionsListResult summary);
    void collectionListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIMetricListResult summary);
    void collectionListUsagesSignalFull(OAIHttpRequestWorker *worker, OAIUsagesResult summary);
    void collectionPartitionListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIPartitionMetricListResult summary);
    void collectionPartitionListUsagesSignalFull(OAIHttpRequestWorker *worker, OAIPartitionUsagesResult summary);
    void collectionPartitionRegionListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIPartitionMetricListResult summary);
    void collectionRegionListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIMetricListResult summary);
    void databaseAccountRegionListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIMetricListResult summary);
    void databaseAccountsCheckNameExistsSignalFull(OAIHttpRequestWorker *worker);
    void databaseAccountsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseAccount summary);
    void databaseAccountsCreateUpdateCassandraKeyspaceSignalFull(OAIHttpRequestWorker *worker, OAICassandraKeyspace summary);
    void databaseAccountsCreateUpdateCassandraTableSignalFull(OAIHttpRequestWorker *worker, OAICassandraTable summary);
    void databaseAccountsCreateUpdateGremlinDatabaseSignalFull(OAIHttpRequestWorker *worker, OAIGremlinDatabase summary);
    void databaseAccountsCreateUpdateGremlinGraphSignalFull(OAIHttpRequestWorker *worker, OAIGremlinGraph summary);
    void databaseAccountsCreateUpdateMongoDBCollectionSignalFull(OAIHttpRequestWorker *worker, OAIMongoDBCollection summary);
    void databaseAccountsCreateUpdateMongoDBDatabaseSignalFull(OAIHttpRequestWorker *worker, OAIMongoDBDatabase summary);
    void databaseAccountsCreateUpdateSqlContainerSignalFull(OAIHttpRequestWorker *worker, OAISqlContainer summary);
    void databaseAccountsCreateUpdateSqlDatabaseSignalFull(OAIHttpRequestWorker *worker, OAISqlDatabase summary);
    void databaseAccountsCreateUpdateTableSignalFull(OAIHttpRequestWorker *worker, OAITable summary);
    void databaseAccountsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void databaseAccountsDeleteCassandraKeyspaceSignalFull(OAIHttpRequestWorker *worker);
    void databaseAccountsDeleteCassandraTableSignalFull(OAIHttpRequestWorker *worker);
    void databaseAccountsDeleteGremlinDatabaseSignalFull(OAIHttpRequestWorker *worker);
    void databaseAccountsDeleteGremlinGraphSignalFull(OAIHttpRequestWorker *worker);
    void databaseAccountsDeleteMongoDBCollectionSignalFull(OAIHttpRequestWorker *worker);
    void databaseAccountsDeleteMongoDBDatabaseSignalFull(OAIHttpRequestWorker *worker);
    void databaseAccountsDeleteSqlContainerSignalFull(OAIHttpRequestWorker *worker);
    void databaseAccountsDeleteSqlDatabaseSignalFull(OAIHttpRequestWorker *worker);
    void databaseAccountsDeleteTableSignalFull(OAIHttpRequestWorker *worker);
    void databaseAccountsFailoverPriorityChangeSignalFull(OAIHttpRequestWorker *worker);
    void databaseAccountsGetSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseAccount summary);
    void databaseAccountsGetCassandraKeyspaceSignalFull(OAIHttpRequestWorker *worker, OAICassandraKeyspace summary);
    void databaseAccountsGetCassandraKeyspaceThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughput summary);
    void databaseAccountsGetCassandraTableSignalFull(OAIHttpRequestWorker *worker, OAICassandraTable summary);
    void databaseAccountsGetCassandraTableThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughput summary);
    void databaseAccountsGetGremlinDatabaseSignalFull(OAIHttpRequestWorker *worker, OAIGremlinDatabase summary);
    void databaseAccountsGetGremlinDatabaseThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughput summary);
    void databaseAccountsGetGremlinGraphSignalFull(OAIHttpRequestWorker *worker, OAIGremlinGraph summary);
    void databaseAccountsGetGremlinGraphThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughput summary);
    void databaseAccountsGetMongoDBCollectionSignalFull(OAIHttpRequestWorker *worker, OAIMongoDBCollection summary);
    void databaseAccountsGetMongoDBCollectionThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughput summary);
    void databaseAccountsGetMongoDBDatabaseSignalFull(OAIHttpRequestWorker *worker, OAIMongoDBDatabase summary);
    void databaseAccountsGetMongoDBDatabaseThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughput summary);
    void databaseAccountsGetReadOnlyKeysSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseAccountListReadOnlyKeysResult summary);
    void databaseAccountsGetSqlContainerSignalFull(OAIHttpRequestWorker *worker, OAISqlContainer summary);
    void databaseAccountsGetSqlContainerThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughput summary);
    void databaseAccountsGetSqlDatabaseSignalFull(OAIHttpRequestWorker *worker, OAISqlDatabase summary);
    void databaseAccountsGetSqlDatabaseThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughput summary);
    void databaseAccountsGetTableSignalFull(OAIHttpRequestWorker *worker, OAITable summary);
    void databaseAccountsGetTableThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughput summary);
    void databaseAccountsListSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseAccountsListResult summary);
    void databaseAccountsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseAccountsListResult summary);
    void databaseAccountsListCassandraKeyspacesSignalFull(OAIHttpRequestWorker *worker, OAICassandraKeyspaceListResult summary);
    void databaseAccountsListCassandraTablesSignalFull(OAIHttpRequestWorker *worker, OAICassandraTableListResult summary);
    void databaseAccountsListConnectionStringsSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseAccountListConnectionStringsResult summary);
    void databaseAccountsListGremlinDatabasesSignalFull(OAIHttpRequestWorker *worker, OAIGremlinDatabaseListResult summary);
    void databaseAccountsListGremlinGraphsSignalFull(OAIHttpRequestWorker *worker, OAIGremlinGraphListResult summary);
    void databaseAccountsListKeysSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseAccountListKeysResult summary);
    void databaseAccountsListMetricDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAIMetricDefinitionsListResult summary);
    void databaseAccountsListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIMetricListResult summary);
    void databaseAccountsListMongoDBCollectionsSignalFull(OAIHttpRequestWorker *worker, OAIMongoDBCollectionListResult summary);
    void databaseAccountsListMongoDBDatabasesSignalFull(OAIHttpRequestWorker *worker, OAIMongoDBDatabaseListResult summary);
    void databaseAccountsListReadOnlyKeysSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseAccountListReadOnlyKeysResult summary);
    void databaseAccountsListSqlContainersSignalFull(OAIHttpRequestWorker *worker, OAISqlContainerListResult summary);
    void databaseAccountsListSqlDatabasesSignalFull(OAIHttpRequestWorker *worker, OAISqlDatabaseListResult summary);
    void databaseAccountsListTablesSignalFull(OAIHttpRequestWorker *worker, OAITableListResult summary);
    void databaseAccountsListUsagesSignalFull(OAIHttpRequestWorker *worker, OAIUsagesResult summary);
    void databaseAccountsOfflineRegionSignalFull(OAIHttpRequestWorker *worker);
    void databaseAccountsOnlineRegionSignalFull(OAIHttpRequestWorker *worker);
    void databaseAccountsPatchSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseAccount summary);
    void databaseAccountsRegenerateKeySignalFull(OAIHttpRequestWorker *worker);
    void databaseAccountsUpdateCassandraKeyspaceThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughput summary);
    void databaseAccountsUpdateCassandraTableThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughput summary);
    void databaseAccountsUpdateGremlinDatabaseThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughput summary);
    void databaseAccountsUpdateGremlinGraphThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughput summary);
    void databaseAccountsUpdateMongoDBCollectionThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughput summary);
    void databaseAccountsUpdateMongoDBDatabaseThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughput summary);
    void databaseAccountsUpdateSqlContainerThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughput summary);
    void databaseAccountsUpdateSqlDatabaseThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughput summary);
    void databaseAccountsUpdateTableThroughputSignalFull(OAIHttpRequestWorker *worker, OAIThroughput summary);
    void databaseListMetricDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAIMetricDefinitionsListResult summary);
    void databaseListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIMetricListResult summary);
    void databaseListUsagesSignalFull(OAIHttpRequestWorker *worker, OAIUsagesResult summary);
    void partitionKeyRangeIdListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIPartitionMetricListResult summary);
    void partitionKeyRangeIdRegionListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIPartitionMetricListResult summary);
    void percentileListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIPercentileMetricListResult summary);
    void percentileSourceTargetListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIPercentileMetricListResult summary);
    void percentileTargetListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIPercentileMetricListResult summary);

    Q_DECL_DEPRECATED_X("Use collectionListMetricDefinitionsSignalError() instead")
    void collectionListMetricDefinitionsSignalE(OAIMetricDefinitionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionListMetricDefinitionsSignalError(OAIMetricDefinitionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionListMetricsSignalError() instead")
    void collectionListMetricsSignalE(OAIMetricListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionListMetricsSignalError(OAIMetricListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionListUsagesSignalError() instead")
    void collectionListUsagesSignalE(OAIUsagesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionListUsagesSignalError(OAIUsagesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionPartitionListMetricsSignalError() instead")
    void collectionPartitionListMetricsSignalE(OAIPartitionMetricListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionPartitionListMetricsSignalError(OAIPartitionMetricListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionPartitionListUsagesSignalError() instead")
    void collectionPartitionListUsagesSignalE(OAIPartitionUsagesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionPartitionListUsagesSignalError(OAIPartitionUsagesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionPartitionRegionListMetricsSignalError() instead")
    void collectionPartitionRegionListMetricsSignalE(OAIPartitionMetricListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionPartitionRegionListMetricsSignalError(OAIPartitionMetricListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionRegionListMetricsSignalError() instead")
    void collectionRegionListMetricsSignalE(OAIMetricListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionRegionListMetricsSignalError(OAIMetricListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountRegionListMetricsSignalError() instead")
    void databaseAccountRegionListMetricsSignalE(OAIMetricListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountRegionListMetricsSignalError(OAIMetricListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsCheckNameExistsSignalError() instead")
    void databaseAccountsCheckNameExistsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsCheckNameExistsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsCreateOrUpdateSignalError() instead")
    void databaseAccountsCreateOrUpdateSignalE(OAIDatabaseAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsCreateOrUpdateSignalError(OAIDatabaseAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsCreateUpdateCassandraKeyspaceSignalError() instead")
    void databaseAccountsCreateUpdateCassandraKeyspaceSignalE(OAICassandraKeyspace summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsCreateUpdateCassandraKeyspaceSignalError(OAICassandraKeyspace summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsCreateUpdateCassandraTableSignalError() instead")
    void databaseAccountsCreateUpdateCassandraTableSignalE(OAICassandraTable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsCreateUpdateCassandraTableSignalError(OAICassandraTable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsCreateUpdateGremlinDatabaseSignalError() instead")
    void databaseAccountsCreateUpdateGremlinDatabaseSignalE(OAIGremlinDatabase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsCreateUpdateGremlinDatabaseSignalError(OAIGremlinDatabase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsCreateUpdateGremlinGraphSignalError() instead")
    void databaseAccountsCreateUpdateGremlinGraphSignalE(OAIGremlinGraph summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsCreateUpdateGremlinGraphSignalError(OAIGremlinGraph summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsCreateUpdateMongoDBCollectionSignalError() instead")
    void databaseAccountsCreateUpdateMongoDBCollectionSignalE(OAIMongoDBCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsCreateUpdateMongoDBCollectionSignalError(OAIMongoDBCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsCreateUpdateMongoDBDatabaseSignalError() instead")
    void databaseAccountsCreateUpdateMongoDBDatabaseSignalE(OAIMongoDBDatabase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsCreateUpdateMongoDBDatabaseSignalError(OAIMongoDBDatabase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsCreateUpdateSqlContainerSignalError() instead")
    void databaseAccountsCreateUpdateSqlContainerSignalE(OAISqlContainer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsCreateUpdateSqlContainerSignalError(OAISqlContainer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsCreateUpdateSqlDatabaseSignalError() instead")
    void databaseAccountsCreateUpdateSqlDatabaseSignalE(OAISqlDatabase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsCreateUpdateSqlDatabaseSignalError(OAISqlDatabase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsCreateUpdateTableSignalError() instead")
    void databaseAccountsCreateUpdateTableSignalE(OAITable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsCreateUpdateTableSignalError(OAITable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsDeleteSignalError() instead")
    void databaseAccountsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsDeleteCassandraKeyspaceSignalError() instead")
    void databaseAccountsDeleteCassandraKeyspaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsDeleteCassandraKeyspaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsDeleteCassandraTableSignalError() instead")
    void databaseAccountsDeleteCassandraTableSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsDeleteCassandraTableSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsDeleteGremlinDatabaseSignalError() instead")
    void databaseAccountsDeleteGremlinDatabaseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsDeleteGremlinDatabaseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsDeleteGremlinGraphSignalError() instead")
    void databaseAccountsDeleteGremlinGraphSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsDeleteGremlinGraphSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsDeleteMongoDBCollectionSignalError() instead")
    void databaseAccountsDeleteMongoDBCollectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsDeleteMongoDBCollectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsDeleteMongoDBDatabaseSignalError() instead")
    void databaseAccountsDeleteMongoDBDatabaseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsDeleteMongoDBDatabaseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsDeleteSqlContainerSignalError() instead")
    void databaseAccountsDeleteSqlContainerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsDeleteSqlContainerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsDeleteSqlDatabaseSignalError() instead")
    void databaseAccountsDeleteSqlDatabaseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsDeleteSqlDatabaseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsDeleteTableSignalError() instead")
    void databaseAccountsDeleteTableSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsDeleteTableSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsFailoverPriorityChangeSignalError() instead")
    void databaseAccountsFailoverPriorityChangeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsFailoverPriorityChangeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetSignalError() instead")
    void databaseAccountsGetSignalE(OAIDatabaseAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetSignalError(OAIDatabaseAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetCassandraKeyspaceSignalError() instead")
    void databaseAccountsGetCassandraKeyspaceSignalE(OAICassandraKeyspace summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetCassandraKeyspaceSignalError(OAICassandraKeyspace summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetCassandraKeyspaceThroughputSignalError() instead")
    void databaseAccountsGetCassandraKeyspaceThroughputSignalE(OAIThroughput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetCassandraKeyspaceThroughputSignalError(OAIThroughput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetCassandraTableSignalError() instead")
    void databaseAccountsGetCassandraTableSignalE(OAICassandraTable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetCassandraTableSignalError(OAICassandraTable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetCassandraTableThroughputSignalError() instead")
    void databaseAccountsGetCassandraTableThroughputSignalE(OAIThroughput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetCassandraTableThroughputSignalError(OAIThroughput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetGremlinDatabaseSignalError() instead")
    void databaseAccountsGetGremlinDatabaseSignalE(OAIGremlinDatabase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetGremlinDatabaseSignalError(OAIGremlinDatabase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetGremlinDatabaseThroughputSignalError() instead")
    void databaseAccountsGetGremlinDatabaseThroughputSignalE(OAIThroughput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetGremlinDatabaseThroughputSignalError(OAIThroughput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetGremlinGraphSignalError() instead")
    void databaseAccountsGetGremlinGraphSignalE(OAIGremlinGraph summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetGremlinGraphSignalError(OAIGremlinGraph summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetGremlinGraphThroughputSignalError() instead")
    void databaseAccountsGetGremlinGraphThroughputSignalE(OAIThroughput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetGremlinGraphThroughputSignalError(OAIThroughput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetMongoDBCollectionSignalError() instead")
    void databaseAccountsGetMongoDBCollectionSignalE(OAIMongoDBCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetMongoDBCollectionSignalError(OAIMongoDBCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetMongoDBCollectionThroughputSignalError() instead")
    void databaseAccountsGetMongoDBCollectionThroughputSignalE(OAIThroughput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetMongoDBCollectionThroughputSignalError(OAIThroughput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetMongoDBDatabaseSignalError() instead")
    void databaseAccountsGetMongoDBDatabaseSignalE(OAIMongoDBDatabase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetMongoDBDatabaseSignalError(OAIMongoDBDatabase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetMongoDBDatabaseThroughputSignalError() instead")
    void databaseAccountsGetMongoDBDatabaseThroughputSignalE(OAIThroughput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetMongoDBDatabaseThroughputSignalError(OAIThroughput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetReadOnlyKeysSignalError() instead")
    void databaseAccountsGetReadOnlyKeysSignalE(OAIDatabaseAccountListReadOnlyKeysResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetReadOnlyKeysSignalError(OAIDatabaseAccountListReadOnlyKeysResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetSqlContainerSignalError() instead")
    void databaseAccountsGetSqlContainerSignalE(OAISqlContainer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetSqlContainerSignalError(OAISqlContainer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetSqlContainerThroughputSignalError() instead")
    void databaseAccountsGetSqlContainerThroughputSignalE(OAIThroughput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetSqlContainerThroughputSignalError(OAIThroughput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetSqlDatabaseSignalError() instead")
    void databaseAccountsGetSqlDatabaseSignalE(OAISqlDatabase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetSqlDatabaseSignalError(OAISqlDatabase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetSqlDatabaseThroughputSignalError() instead")
    void databaseAccountsGetSqlDatabaseThroughputSignalE(OAIThroughput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetSqlDatabaseThroughputSignalError(OAIThroughput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetTableSignalError() instead")
    void databaseAccountsGetTableSignalE(OAITable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetTableSignalError(OAITable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetTableThroughputSignalError() instead")
    void databaseAccountsGetTableThroughputSignalE(OAIThroughput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetTableThroughputSignalError(OAIThroughput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListSignalError() instead")
    void databaseAccountsListSignalE(OAIDatabaseAccountsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListSignalError(OAIDatabaseAccountsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListByResourceGroupSignalError() instead")
    void databaseAccountsListByResourceGroupSignalE(OAIDatabaseAccountsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListByResourceGroupSignalError(OAIDatabaseAccountsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListCassandraKeyspacesSignalError() instead")
    void databaseAccountsListCassandraKeyspacesSignalE(OAICassandraKeyspaceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListCassandraKeyspacesSignalError(OAICassandraKeyspaceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListCassandraTablesSignalError() instead")
    void databaseAccountsListCassandraTablesSignalE(OAICassandraTableListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListCassandraTablesSignalError(OAICassandraTableListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListConnectionStringsSignalError() instead")
    void databaseAccountsListConnectionStringsSignalE(OAIDatabaseAccountListConnectionStringsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListConnectionStringsSignalError(OAIDatabaseAccountListConnectionStringsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListGremlinDatabasesSignalError() instead")
    void databaseAccountsListGremlinDatabasesSignalE(OAIGremlinDatabaseListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListGremlinDatabasesSignalError(OAIGremlinDatabaseListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListGremlinGraphsSignalError() instead")
    void databaseAccountsListGremlinGraphsSignalE(OAIGremlinGraphListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListGremlinGraphsSignalError(OAIGremlinGraphListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListKeysSignalError() instead")
    void databaseAccountsListKeysSignalE(OAIDatabaseAccountListKeysResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListKeysSignalError(OAIDatabaseAccountListKeysResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListMetricDefinitionsSignalError() instead")
    void databaseAccountsListMetricDefinitionsSignalE(OAIMetricDefinitionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListMetricDefinitionsSignalError(OAIMetricDefinitionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListMetricsSignalError() instead")
    void databaseAccountsListMetricsSignalE(OAIMetricListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListMetricsSignalError(OAIMetricListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListMongoDBCollectionsSignalError() instead")
    void databaseAccountsListMongoDBCollectionsSignalE(OAIMongoDBCollectionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListMongoDBCollectionsSignalError(OAIMongoDBCollectionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListMongoDBDatabasesSignalError() instead")
    void databaseAccountsListMongoDBDatabasesSignalE(OAIMongoDBDatabaseListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListMongoDBDatabasesSignalError(OAIMongoDBDatabaseListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListReadOnlyKeysSignalError() instead")
    void databaseAccountsListReadOnlyKeysSignalE(OAIDatabaseAccountListReadOnlyKeysResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListReadOnlyKeysSignalError(OAIDatabaseAccountListReadOnlyKeysResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListSqlContainersSignalError() instead")
    void databaseAccountsListSqlContainersSignalE(OAISqlContainerListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListSqlContainersSignalError(OAISqlContainerListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListSqlDatabasesSignalError() instead")
    void databaseAccountsListSqlDatabasesSignalE(OAISqlDatabaseListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListSqlDatabasesSignalError(OAISqlDatabaseListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListTablesSignalError() instead")
    void databaseAccountsListTablesSignalE(OAITableListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListTablesSignalError(OAITableListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListUsagesSignalError() instead")
    void databaseAccountsListUsagesSignalE(OAIUsagesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListUsagesSignalError(OAIUsagesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsOfflineRegionSignalError() instead")
    void databaseAccountsOfflineRegionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsOfflineRegionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsOnlineRegionSignalError() instead")
    void databaseAccountsOnlineRegionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsOnlineRegionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsPatchSignalError() instead")
    void databaseAccountsPatchSignalE(OAIDatabaseAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsPatchSignalError(OAIDatabaseAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsRegenerateKeySignalError() instead")
    void databaseAccountsRegenerateKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsRegenerateKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsUpdateCassandraKeyspaceThroughputSignalError() instead")
    void databaseAccountsUpdateCassandraKeyspaceThroughputSignalE(OAIThroughput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsUpdateCassandraKeyspaceThroughputSignalError(OAIThroughput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsUpdateCassandraTableThroughputSignalError() instead")
    void databaseAccountsUpdateCassandraTableThroughputSignalE(OAIThroughput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsUpdateCassandraTableThroughputSignalError(OAIThroughput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsUpdateGremlinDatabaseThroughputSignalError() instead")
    void databaseAccountsUpdateGremlinDatabaseThroughputSignalE(OAIThroughput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsUpdateGremlinDatabaseThroughputSignalError(OAIThroughput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsUpdateGremlinGraphThroughputSignalError() instead")
    void databaseAccountsUpdateGremlinGraphThroughputSignalE(OAIThroughput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsUpdateGremlinGraphThroughputSignalError(OAIThroughput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsUpdateMongoDBCollectionThroughputSignalError() instead")
    void databaseAccountsUpdateMongoDBCollectionThroughputSignalE(OAIThroughput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsUpdateMongoDBCollectionThroughputSignalError(OAIThroughput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsUpdateMongoDBDatabaseThroughputSignalError() instead")
    void databaseAccountsUpdateMongoDBDatabaseThroughputSignalE(OAIThroughput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsUpdateMongoDBDatabaseThroughputSignalError(OAIThroughput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsUpdateSqlContainerThroughputSignalError() instead")
    void databaseAccountsUpdateSqlContainerThroughputSignalE(OAIThroughput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsUpdateSqlContainerThroughputSignalError(OAIThroughput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsUpdateSqlDatabaseThroughputSignalError() instead")
    void databaseAccountsUpdateSqlDatabaseThroughputSignalE(OAIThroughput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsUpdateSqlDatabaseThroughputSignalError(OAIThroughput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsUpdateTableThroughputSignalError() instead")
    void databaseAccountsUpdateTableThroughputSignalE(OAIThroughput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsUpdateTableThroughputSignalError(OAIThroughput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseListMetricDefinitionsSignalError() instead")
    void databaseListMetricDefinitionsSignalE(OAIMetricDefinitionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseListMetricDefinitionsSignalError(OAIMetricDefinitionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseListMetricsSignalError() instead")
    void databaseListMetricsSignalE(OAIMetricListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseListMetricsSignalError(OAIMetricListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseListUsagesSignalError() instead")
    void databaseListUsagesSignalE(OAIUsagesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseListUsagesSignalError(OAIUsagesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partitionKeyRangeIdListMetricsSignalError() instead")
    void partitionKeyRangeIdListMetricsSignalE(OAIPartitionMetricListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void partitionKeyRangeIdListMetricsSignalError(OAIPartitionMetricListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partitionKeyRangeIdRegionListMetricsSignalError() instead")
    void partitionKeyRangeIdRegionListMetricsSignalE(OAIPartitionMetricListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void partitionKeyRangeIdRegionListMetricsSignalError(OAIPartitionMetricListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use percentileListMetricsSignalError() instead")
    void percentileListMetricsSignalE(OAIPercentileMetricListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void percentileListMetricsSignalError(OAIPercentileMetricListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use percentileSourceTargetListMetricsSignalError() instead")
    void percentileSourceTargetListMetricsSignalE(OAIPercentileMetricListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void percentileSourceTargetListMetricsSignalError(OAIPercentileMetricListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use percentileTargetListMetricsSignalError() instead")
    void percentileTargetListMetricsSignalE(OAIPercentileMetricListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void percentileTargetListMetricsSignalError(OAIPercentileMetricListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use collectionListMetricDefinitionsSignalErrorFull() instead")
    void collectionListMetricDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionListMetricDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionListMetricsSignalErrorFull() instead")
    void collectionListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionListUsagesSignalErrorFull() instead")
    void collectionListUsagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionListUsagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionPartitionListMetricsSignalErrorFull() instead")
    void collectionPartitionListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionPartitionListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionPartitionListUsagesSignalErrorFull() instead")
    void collectionPartitionListUsagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionPartitionListUsagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionPartitionRegionListMetricsSignalErrorFull() instead")
    void collectionPartitionRegionListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionPartitionRegionListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionRegionListMetricsSignalErrorFull() instead")
    void collectionRegionListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionRegionListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountRegionListMetricsSignalErrorFull() instead")
    void databaseAccountRegionListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountRegionListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsCheckNameExistsSignalErrorFull() instead")
    void databaseAccountsCheckNameExistsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsCheckNameExistsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsCreateOrUpdateSignalErrorFull() instead")
    void databaseAccountsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsCreateUpdateCassandraKeyspaceSignalErrorFull() instead")
    void databaseAccountsCreateUpdateCassandraKeyspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsCreateUpdateCassandraKeyspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsCreateUpdateCassandraTableSignalErrorFull() instead")
    void databaseAccountsCreateUpdateCassandraTableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsCreateUpdateCassandraTableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsCreateUpdateGremlinDatabaseSignalErrorFull() instead")
    void databaseAccountsCreateUpdateGremlinDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsCreateUpdateGremlinDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsCreateUpdateGremlinGraphSignalErrorFull() instead")
    void databaseAccountsCreateUpdateGremlinGraphSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsCreateUpdateGremlinGraphSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsCreateUpdateMongoDBCollectionSignalErrorFull() instead")
    void databaseAccountsCreateUpdateMongoDBCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsCreateUpdateMongoDBCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsCreateUpdateMongoDBDatabaseSignalErrorFull() instead")
    void databaseAccountsCreateUpdateMongoDBDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsCreateUpdateMongoDBDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsCreateUpdateSqlContainerSignalErrorFull() instead")
    void databaseAccountsCreateUpdateSqlContainerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsCreateUpdateSqlContainerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsCreateUpdateSqlDatabaseSignalErrorFull() instead")
    void databaseAccountsCreateUpdateSqlDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsCreateUpdateSqlDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsCreateUpdateTableSignalErrorFull() instead")
    void databaseAccountsCreateUpdateTableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsCreateUpdateTableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsDeleteSignalErrorFull() instead")
    void databaseAccountsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsDeleteCassandraKeyspaceSignalErrorFull() instead")
    void databaseAccountsDeleteCassandraKeyspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsDeleteCassandraKeyspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsDeleteCassandraTableSignalErrorFull() instead")
    void databaseAccountsDeleteCassandraTableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsDeleteCassandraTableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsDeleteGremlinDatabaseSignalErrorFull() instead")
    void databaseAccountsDeleteGremlinDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsDeleteGremlinDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsDeleteGremlinGraphSignalErrorFull() instead")
    void databaseAccountsDeleteGremlinGraphSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsDeleteGremlinGraphSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsDeleteMongoDBCollectionSignalErrorFull() instead")
    void databaseAccountsDeleteMongoDBCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsDeleteMongoDBCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsDeleteMongoDBDatabaseSignalErrorFull() instead")
    void databaseAccountsDeleteMongoDBDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsDeleteMongoDBDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsDeleteSqlContainerSignalErrorFull() instead")
    void databaseAccountsDeleteSqlContainerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsDeleteSqlContainerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsDeleteSqlDatabaseSignalErrorFull() instead")
    void databaseAccountsDeleteSqlDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsDeleteSqlDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsDeleteTableSignalErrorFull() instead")
    void databaseAccountsDeleteTableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsDeleteTableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsFailoverPriorityChangeSignalErrorFull() instead")
    void databaseAccountsFailoverPriorityChangeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsFailoverPriorityChangeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetSignalErrorFull() instead")
    void databaseAccountsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetCassandraKeyspaceSignalErrorFull() instead")
    void databaseAccountsGetCassandraKeyspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetCassandraKeyspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetCassandraKeyspaceThroughputSignalErrorFull() instead")
    void databaseAccountsGetCassandraKeyspaceThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetCassandraKeyspaceThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetCassandraTableSignalErrorFull() instead")
    void databaseAccountsGetCassandraTableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetCassandraTableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetCassandraTableThroughputSignalErrorFull() instead")
    void databaseAccountsGetCassandraTableThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetCassandraTableThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetGremlinDatabaseSignalErrorFull() instead")
    void databaseAccountsGetGremlinDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetGremlinDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetGremlinDatabaseThroughputSignalErrorFull() instead")
    void databaseAccountsGetGremlinDatabaseThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetGremlinDatabaseThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetGremlinGraphSignalErrorFull() instead")
    void databaseAccountsGetGremlinGraphSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetGremlinGraphSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetGremlinGraphThroughputSignalErrorFull() instead")
    void databaseAccountsGetGremlinGraphThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetGremlinGraphThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetMongoDBCollectionSignalErrorFull() instead")
    void databaseAccountsGetMongoDBCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetMongoDBCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetMongoDBCollectionThroughputSignalErrorFull() instead")
    void databaseAccountsGetMongoDBCollectionThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetMongoDBCollectionThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetMongoDBDatabaseSignalErrorFull() instead")
    void databaseAccountsGetMongoDBDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetMongoDBDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetMongoDBDatabaseThroughputSignalErrorFull() instead")
    void databaseAccountsGetMongoDBDatabaseThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetMongoDBDatabaseThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetReadOnlyKeysSignalErrorFull() instead")
    void databaseAccountsGetReadOnlyKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetReadOnlyKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetSqlContainerSignalErrorFull() instead")
    void databaseAccountsGetSqlContainerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetSqlContainerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetSqlContainerThroughputSignalErrorFull() instead")
    void databaseAccountsGetSqlContainerThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetSqlContainerThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetSqlDatabaseSignalErrorFull() instead")
    void databaseAccountsGetSqlDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetSqlDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetSqlDatabaseThroughputSignalErrorFull() instead")
    void databaseAccountsGetSqlDatabaseThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetSqlDatabaseThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetTableSignalErrorFull() instead")
    void databaseAccountsGetTableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetTableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsGetTableThroughputSignalErrorFull() instead")
    void databaseAccountsGetTableThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsGetTableThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListSignalErrorFull() instead")
    void databaseAccountsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListByResourceGroupSignalErrorFull() instead")
    void databaseAccountsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListCassandraKeyspacesSignalErrorFull() instead")
    void databaseAccountsListCassandraKeyspacesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListCassandraKeyspacesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListCassandraTablesSignalErrorFull() instead")
    void databaseAccountsListCassandraTablesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListCassandraTablesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListConnectionStringsSignalErrorFull() instead")
    void databaseAccountsListConnectionStringsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListConnectionStringsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListGremlinDatabasesSignalErrorFull() instead")
    void databaseAccountsListGremlinDatabasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListGremlinDatabasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListGremlinGraphsSignalErrorFull() instead")
    void databaseAccountsListGremlinGraphsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListGremlinGraphsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListKeysSignalErrorFull() instead")
    void databaseAccountsListKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListMetricDefinitionsSignalErrorFull() instead")
    void databaseAccountsListMetricDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListMetricDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListMetricsSignalErrorFull() instead")
    void databaseAccountsListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListMongoDBCollectionsSignalErrorFull() instead")
    void databaseAccountsListMongoDBCollectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListMongoDBCollectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListMongoDBDatabasesSignalErrorFull() instead")
    void databaseAccountsListMongoDBDatabasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListMongoDBDatabasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListReadOnlyKeysSignalErrorFull() instead")
    void databaseAccountsListReadOnlyKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListReadOnlyKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListSqlContainersSignalErrorFull() instead")
    void databaseAccountsListSqlContainersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListSqlContainersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListSqlDatabasesSignalErrorFull() instead")
    void databaseAccountsListSqlDatabasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListSqlDatabasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListTablesSignalErrorFull() instead")
    void databaseAccountsListTablesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListTablesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsListUsagesSignalErrorFull() instead")
    void databaseAccountsListUsagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsListUsagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsOfflineRegionSignalErrorFull() instead")
    void databaseAccountsOfflineRegionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsOfflineRegionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsOnlineRegionSignalErrorFull() instead")
    void databaseAccountsOnlineRegionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsOnlineRegionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsPatchSignalErrorFull() instead")
    void databaseAccountsPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsRegenerateKeySignalErrorFull() instead")
    void databaseAccountsRegenerateKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsRegenerateKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsUpdateCassandraKeyspaceThroughputSignalErrorFull() instead")
    void databaseAccountsUpdateCassandraKeyspaceThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsUpdateCassandraKeyspaceThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsUpdateCassandraTableThroughputSignalErrorFull() instead")
    void databaseAccountsUpdateCassandraTableThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsUpdateCassandraTableThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsUpdateGremlinDatabaseThroughputSignalErrorFull() instead")
    void databaseAccountsUpdateGremlinDatabaseThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsUpdateGremlinDatabaseThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsUpdateGremlinGraphThroughputSignalErrorFull() instead")
    void databaseAccountsUpdateGremlinGraphThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsUpdateGremlinGraphThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsUpdateMongoDBCollectionThroughputSignalErrorFull() instead")
    void databaseAccountsUpdateMongoDBCollectionThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsUpdateMongoDBCollectionThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsUpdateMongoDBDatabaseThroughputSignalErrorFull() instead")
    void databaseAccountsUpdateMongoDBDatabaseThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsUpdateMongoDBDatabaseThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsUpdateSqlContainerThroughputSignalErrorFull() instead")
    void databaseAccountsUpdateSqlContainerThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsUpdateSqlContainerThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsUpdateSqlDatabaseThroughputSignalErrorFull() instead")
    void databaseAccountsUpdateSqlDatabaseThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsUpdateSqlDatabaseThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseAccountsUpdateTableThroughputSignalErrorFull() instead")
    void databaseAccountsUpdateTableThroughputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseAccountsUpdateTableThroughputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseListMetricDefinitionsSignalErrorFull() instead")
    void databaseListMetricDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseListMetricDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseListMetricsSignalErrorFull() instead")
    void databaseListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseListUsagesSignalErrorFull() instead")
    void databaseListUsagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseListUsagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partitionKeyRangeIdListMetricsSignalErrorFull() instead")
    void partitionKeyRangeIdListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partitionKeyRangeIdListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partitionKeyRangeIdRegionListMetricsSignalErrorFull() instead")
    void partitionKeyRangeIdRegionListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partitionKeyRangeIdRegionListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use percentileListMetricsSignalErrorFull() instead")
    void percentileListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void percentileListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use percentileSourceTargetListMetricsSignalErrorFull() instead")
    void percentileSourceTargetListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void percentileSourceTargetListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use percentileTargetListMetricsSignalErrorFull() instead")
    void percentileTargetListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void percentileTargetListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
