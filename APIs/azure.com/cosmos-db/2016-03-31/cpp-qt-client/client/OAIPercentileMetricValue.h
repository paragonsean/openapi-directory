/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2016-03-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPercentileMetricValue.h
 *
 * Represents percentile metrics values.
 */

#ifndef OAIPercentileMetricValue_H
#define OAIPercentileMetricValue_H

#include <QJsonObject>

#include <QDateTime>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPercentileMetricValue : public OAIObject {
public:
    OAIPercentileMetricValue();
    OAIPercentileMetricValue(QString json);
    ~OAIPercentileMetricValue() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getP10() const;
    void setP10(const double &p10);
    bool is_p10_Set() const;
    bool is_p10_Valid() const;

    double getP25() const;
    void setP25(const double &p25);
    bool is_p25_Set() const;
    bool is_p25_Valid() const;

    double getP50() const;
    void setP50(const double &p50);
    bool is_p50_Set() const;
    bool is_p50_Valid() const;

    double getP75() const;
    void setP75(const double &p75);
    bool is_p75_Set() const;
    bool is_p75_Valid() const;

    double getP90() const;
    void setP90(const double &p90);
    bool is_p90_Set() const;
    bool is_p90_Valid() const;

    double getP95() const;
    void setP95(const double &p95);
    bool is_p95_Set() const;
    bool is_p95_Valid() const;

    double getP99() const;
    void setP99(const double &p99);
    bool is_p99_Set() const;
    bool is_p99_Valid() const;

    double getCount() const;
    void setCount(const double &_count);
    bool is__count_Set() const;
    bool is__count_Valid() const;

    double getAverage() const;
    void setAverage(const double &average);
    bool is_average_Set() const;
    bool is_average_Valid() const;

    double getMaximum() const;
    void setMaximum(const double &maximum);
    bool is_maximum_Set() const;
    bool is_maximum_Valid() const;

    double getMinimum() const;
    void setMinimum(const double &minimum);
    bool is_minimum_Set() const;
    bool is_minimum_Valid() const;

    QDateTime getTimestamp() const;
    void setTimestamp(const QDateTime &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    double getTotal() const;
    void setTotal(const double &total);
    bool is_total_Set() const;
    bool is_total_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_p10;
    bool m_p10_isSet;
    bool m_p10_isValid;

    double m_p25;
    bool m_p25_isSet;
    bool m_p25_isValid;

    double m_p50;
    bool m_p50_isSet;
    bool m_p50_isValid;

    double m_p75;
    bool m_p75_isSet;
    bool m_p75_isValid;

    double m_p90;
    bool m_p90_isSet;
    bool m_p90_isValid;

    double m_p95;
    bool m_p95_isSet;
    bool m_p95_isValid;

    double m_p99;
    bool m_p99_isSet;
    bool m_p99_isValid;

    double m__count;
    bool m__count_isSet;
    bool m__count_isValid;

    double m_average;
    bool m_average_isSet;
    bool m_average_isValid;

    double m_maximum;
    bool m_maximum_isSet;
    bool m_maximum_isValid;

    double m_minimum;
    bool m_minimum_isSet;
    bool m_minimum_isValid;

    QDateTime m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    double m_total;
    bool m_total_isSet;
    bool m_total_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPercentileMetricValue)

#endif // OAIPercentileMetricValue_H
