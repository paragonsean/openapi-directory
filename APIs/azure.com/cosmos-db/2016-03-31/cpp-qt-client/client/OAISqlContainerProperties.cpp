/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2016-03-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISqlContainerProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISqlContainerProperties::OAISqlContainerProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISqlContainerProperties::OAISqlContainerProperties() {
    this->initializeModel();
}

OAISqlContainerProperties::~OAISqlContainerProperties() {}

void OAISqlContainerProperties::initializeModel() {

    m_conflict_resolution_policy_isSet = false;
    m_conflict_resolution_policy_isValid = false;

    m_default_ttl_isSet = false;
    m_default_ttl_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_indexing_policy_isSet = false;
    m_indexing_policy_isValid = false;

    m_partition_key_isSet = false;
    m_partition_key_isValid = false;

    m_unique_key_policy_isSet = false;
    m_unique_key_policy_isValid = false;

    m__etag_isSet = false;
    m__etag_isValid = false;

    m__rid_isSet = false;
    m__rid_isValid = false;

    m__ts_isSet = false;
    m__ts_isValid = false;
}

void OAISqlContainerProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISqlContainerProperties::fromJsonObject(QJsonObject json) {

    m_conflict_resolution_policy_isValid = ::OpenAPI::fromJsonValue(m_conflict_resolution_policy, json[QString("conflictResolutionPolicy")]);
    m_conflict_resolution_policy_isSet = !json[QString("conflictResolutionPolicy")].isNull() && m_conflict_resolution_policy_isValid;

    m_default_ttl_isValid = ::OpenAPI::fromJsonValue(m_default_ttl, json[QString("defaultTtl")]);
    m_default_ttl_isSet = !json[QString("defaultTtl")].isNull() && m_default_ttl_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_indexing_policy_isValid = ::OpenAPI::fromJsonValue(m_indexing_policy, json[QString("indexingPolicy")]);
    m_indexing_policy_isSet = !json[QString("indexingPolicy")].isNull() && m_indexing_policy_isValid;

    m_partition_key_isValid = ::OpenAPI::fromJsonValue(m_partition_key, json[QString("partitionKey")]);
    m_partition_key_isSet = !json[QString("partitionKey")].isNull() && m_partition_key_isValid;

    m_unique_key_policy_isValid = ::OpenAPI::fromJsonValue(m_unique_key_policy, json[QString("uniqueKeyPolicy")]);
    m_unique_key_policy_isSet = !json[QString("uniqueKeyPolicy")].isNull() && m_unique_key_policy_isValid;

    m__etag_isValid = ::OpenAPI::fromJsonValue(m__etag, json[QString("_etag")]);
    m__etag_isSet = !json[QString("_etag")].isNull() && m__etag_isValid;

    m__rid_isValid = ::OpenAPI::fromJsonValue(m__rid, json[QString("_rid")]);
    m__rid_isSet = !json[QString("_rid")].isNull() && m__rid_isValid;

    m__ts_isValid = ::OpenAPI::fromJsonValue(m__ts, json[QString("_ts")]);
    m__ts_isSet = !json[QString("_ts")].isNull() && m__ts_isValid;
}

QString OAISqlContainerProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISqlContainerProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_conflict_resolution_policy.isSet()) {
        obj.insert(QString("conflictResolutionPolicy"), ::OpenAPI::toJsonValue(m_conflict_resolution_policy));
    }
    if (m_default_ttl_isSet) {
        obj.insert(QString("defaultTtl"), ::OpenAPI::toJsonValue(m_default_ttl));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_indexing_policy.isSet()) {
        obj.insert(QString("indexingPolicy"), ::OpenAPI::toJsonValue(m_indexing_policy));
    }
    if (m_partition_key.isSet()) {
        obj.insert(QString("partitionKey"), ::OpenAPI::toJsonValue(m_partition_key));
    }
    if (m_unique_key_policy.isSet()) {
        obj.insert(QString("uniqueKeyPolicy"), ::OpenAPI::toJsonValue(m_unique_key_policy));
    }
    if (m__etag_isSet) {
        obj.insert(QString("_etag"), ::OpenAPI::toJsonValue(m__etag));
    }
    if (m__rid_isSet) {
        obj.insert(QString("_rid"), ::OpenAPI::toJsonValue(m__rid));
    }
    if (m__ts_isSet) {
        obj.insert(QString("_ts"), ::OpenAPI::toJsonValue(m__ts));
    }
    return obj;
}

OAIConflictResolutionPolicy OAISqlContainerProperties::getConflictResolutionPolicy() const {
    return m_conflict_resolution_policy;
}
void OAISqlContainerProperties::setConflictResolutionPolicy(const OAIConflictResolutionPolicy &conflict_resolution_policy) {
    m_conflict_resolution_policy = conflict_resolution_policy;
    m_conflict_resolution_policy_isSet = true;
}

bool OAISqlContainerProperties::is_conflict_resolution_policy_Set() const{
    return m_conflict_resolution_policy_isSet;
}

bool OAISqlContainerProperties::is_conflict_resolution_policy_Valid() const{
    return m_conflict_resolution_policy_isValid;
}

qint32 OAISqlContainerProperties::getDefaultTtl() const {
    return m_default_ttl;
}
void OAISqlContainerProperties::setDefaultTtl(const qint32 &default_ttl) {
    m_default_ttl = default_ttl;
    m_default_ttl_isSet = true;
}

bool OAISqlContainerProperties::is_default_ttl_Set() const{
    return m_default_ttl_isSet;
}

bool OAISqlContainerProperties::is_default_ttl_Valid() const{
    return m_default_ttl_isValid;
}

QString OAISqlContainerProperties::getId() const {
    return m_id;
}
void OAISqlContainerProperties::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISqlContainerProperties::is_id_Set() const{
    return m_id_isSet;
}

bool OAISqlContainerProperties::is_id_Valid() const{
    return m_id_isValid;
}

OAIIndexingPolicy OAISqlContainerProperties::getIndexingPolicy() const {
    return m_indexing_policy;
}
void OAISqlContainerProperties::setIndexingPolicy(const OAIIndexingPolicy &indexing_policy) {
    m_indexing_policy = indexing_policy;
    m_indexing_policy_isSet = true;
}

bool OAISqlContainerProperties::is_indexing_policy_Set() const{
    return m_indexing_policy_isSet;
}

bool OAISqlContainerProperties::is_indexing_policy_Valid() const{
    return m_indexing_policy_isValid;
}

OAIContainerPartitionKey OAISqlContainerProperties::getPartitionKey() const {
    return m_partition_key;
}
void OAISqlContainerProperties::setPartitionKey(const OAIContainerPartitionKey &partition_key) {
    m_partition_key = partition_key;
    m_partition_key_isSet = true;
}

bool OAISqlContainerProperties::is_partition_key_Set() const{
    return m_partition_key_isSet;
}

bool OAISqlContainerProperties::is_partition_key_Valid() const{
    return m_partition_key_isValid;
}

OAIUniqueKeyPolicy OAISqlContainerProperties::getUniqueKeyPolicy() const {
    return m_unique_key_policy;
}
void OAISqlContainerProperties::setUniqueKeyPolicy(const OAIUniqueKeyPolicy &unique_key_policy) {
    m_unique_key_policy = unique_key_policy;
    m_unique_key_policy_isSet = true;
}

bool OAISqlContainerProperties::is_unique_key_policy_Set() const{
    return m_unique_key_policy_isSet;
}

bool OAISqlContainerProperties::is_unique_key_policy_Valid() const{
    return m_unique_key_policy_isValid;
}

QString OAISqlContainerProperties::getEtag() const {
    return m__etag;
}
void OAISqlContainerProperties::setEtag(const QString &_etag) {
    m__etag = _etag;
    m__etag_isSet = true;
}

bool OAISqlContainerProperties::is__etag_Set() const{
    return m__etag_isSet;
}

bool OAISqlContainerProperties::is__etag_Valid() const{
    return m__etag_isValid;
}

QString OAISqlContainerProperties::getRid() const {
    return m__rid;
}
void OAISqlContainerProperties::setRid(const QString &_rid) {
    m__rid = _rid;
    m__rid_isSet = true;
}

bool OAISqlContainerProperties::is__rid_Set() const{
    return m__rid_isSet;
}

bool OAISqlContainerProperties::is__rid_Valid() const{
    return m__rid_isValid;
}

OAIObject OAISqlContainerProperties::getTs() const {
    return m__ts;
}
void OAISqlContainerProperties::setTs(const OAIObject &_ts) {
    m__ts = _ts;
    m__ts_isSet = true;
}

bool OAISqlContainerProperties::is__ts_Set() const{
    return m__ts_isSet;
}

bool OAISqlContainerProperties::is__ts_Valid() const{
    return m__ts_isValid;
}

bool OAISqlContainerProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conflict_resolution_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indexing_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_key_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m__etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__rid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__ts_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISqlContainerProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
