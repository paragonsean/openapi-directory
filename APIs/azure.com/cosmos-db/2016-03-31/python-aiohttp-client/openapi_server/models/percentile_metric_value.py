# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PercentileMetricValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, p10: float=None, p25: float=None, p50: float=None, p75: float=None, p90: float=None, p95: float=None, p99: float=None, count: float=None, average: float=None, maximum: float=None, minimum: float=None, timestamp: datetime=None, total: float=None):
        """PercentileMetricValue - a model defined in OpenAPI

        :param p10: The p10 of this PercentileMetricValue.
        :param p25: The p25 of this PercentileMetricValue.
        :param p50: The p50 of this PercentileMetricValue.
        :param p75: The p75 of this PercentileMetricValue.
        :param p90: The p90 of this PercentileMetricValue.
        :param p95: The p95 of this PercentileMetricValue.
        :param p99: The p99 of this PercentileMetricValue.
        :param count: The count of this PercentileMetricValue.
        :param average: The average of this PercentileMetricValue.
        :param maximum: The maximum of this PercentileMetricValue.
        :param minimum: The minimum of this PercentileMetricValue.
        :param timestamp: The timestamp of this PercentileMetricValue.
        :param total: The total of this PercentileMetricValue.
        """
        self.openapi_types = {
            'p10': float,
            'p25': float,
            'p50': float,
            'p75': float,
            'p90': float,
            'p95': float,
            'p99': float,
            'count': float,
            'average': float,
            'maximum': float,
            'minimum': float,
            'timestamp': datetime,
            'total': float
        }

        self.attribute_map = {
            'p10': 'P10',
            'p25': 'P25',
            'p50': 'P50',
            'p75': 'P75',
            'p90': 'P90',
            'p95': 'P95',
            'p99': 'P99',
            'count': '_count',
            'average': 'average',
            'maximum': 'maximum',
            'minimum': 'minimum',
            'timestamp': 'timestamp',
            'total': 'total'
        }

        self._p10 = p10
        self._p25 = p25
        self._p50 = p50
        self._p75 = p75
        self._p90 = p90
        self._p95 = p95
        self._p99 = p99
        self._count = count
        self._average = average
        self._maximum = maximum
        self._minimum = minimum
        self._timestamp = timestamp
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PercentileMetricValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PercentileMetricValue of this PercentileMetricValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def p10(self):
        """Gets the p10 of this PercentileMetricValue.

        The 10th percentile value for the metric.

        :return: The p10 of this PercentileMetricValue.
        :rtype: float
        """
        return self._p10

    @p10.setter
    def p10(self, p10):
        """Sets the p10 of this PercentileMetricValue.

        The 10th percentile value for the metric.

        :param p10: The p10 of this PercentileMetricValue.
        :type p10: float
        """

        self._p10 = p10

    @property
    def p25(self):
        """Gets the p25 of this PercentileMetricValue.

        The 25th percentile value for the metric.

        :return: The p25 of this PercentileMetricValue.
        :rtype: float
        """
        return self._p25

    @p25.setter
    def p25(self, p25):
        """Sets the p25 of this PercentileMetricValue.

        The 25th percentile value for the metric.

        :param p25: The p25 of this PercentileMetricValue.
        :type p25: float
        """

        self._p25 = p25

    @property
    def p50(self):
        """Gets the p50 of this PercentileMetricValue.

        The 50th percentile value for the metric.

        :return: The p50 of this PercentileMetricValue.
        :rtype: float
        """
        return self._p50

    @p50.setter
    def p50(self, p50):
        """Sets the p50 of this PercentileMetricValue.

        The 50th percentile value for the metric.

        :param p50: The p50 of this PercentileMetricValue.
        :type p50: float
        """

        self._p50 = p50

    @property
    def p75(self):
        """Gets the p75 of this PercentileMetricValue.

        The 75th percentile value for the metric.

        :return: The p75 of this PercentileMetricValue.
        :rtype: float
        """
        return self._p75

    @p75.setter
    def p75(self, p75):
        """Sets the p75 of this PercentileMetricValue.

        The 75th percentile value for the metric.

        :param p75: The p75 of this PercentileMetricValue.
        :type p75: float
        """

        self._p75 = p75

    @property
    def p90(self):
        """Gets the p90 of this PercentileMetricValue.

        The 90th percentile value for the metric.

        :return: The p90 of this PercentileMetricValue.
        :rtype: float
        """
        return self._p90

    @p90.setter
    def p90(self, p90):
        """Sets the p90 of this PercentileMetricValue.

        The 90th percentile value for the metric.

        :param p90: The p90 of this PercentileMetricValue.
        :type p90: float
        """

        self._p90 = p90

    @property
    def p95(self):
        """Gets the p95 of this PercentileMetricValue.

        The 95th percentile value for the metric.

        :return: The p95 of this PercentileMetricValue.
        :rtype: float
        """
        return self._p95

    @p95.setter
    def p95(self, p95):
        """Sets the p95 of this PercentileMetricValue.

        The 95th percentile value for the metric.

        :param p95: The p95 of this PercentileMetricValue.
        :type p95: float
        """

        self._p95 = p95

    @property
    def p99(self):
        """Gets the p99 of this PercentileMetricValue.

        The 99th percentile value for the metric.

        :return: The p99 of this PercentileMetricValue.
        :rtype: float
        """
        return self._p99

    @p99.setter
    def p99(self, p99):
        """Sets the p99 of this PercentileMetricValue.

        The 99th percentile value for the metric.

        :param p99: The p99 of this PercentileMetricValue.
        :type p99: float
        """

        self._p99 = p99

    @property
    def count(self):
        """Gets the count of this PercentileMetricValue.

        The number of values for the metric.

        :return: The count of this PercentileMetricValue.
        :rtype: float
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this PercentileMetricValue.

        The number of values for the metric.

        :param count: The count of this PercentileMetricValue.
        :type count: float
        """

        self._count = count

    @property
    def average(self):
        """Gets the average of this PercentileMetricValue.

        The average value of the metric.

        :return: The average of this PercentileMetricValue.
        :rtype: float
        """
        return self._average

    @average.setter
    def average(self, average):
        """Sets the average of this PercentileMetricValue.

        The average value of the metric.

        :param average: The average of this PercentileMetricValue.
        :type average: float
        """

        self._average = average

    @property
    def maximum(self):
        """Gets the maximum of this PercentileMetricValue.

        The max value of the metric.

        :return: The maximum of this PercentileMetricValue.
        :rtype: float
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """Sets the maximum of this PercentileMetricValue.

        The max value of the metric.

        :param maximum: The maximum of this PercentileMetricValue.
        :type maximum: float
        """

        self._maximum = maximum

    @property
    def minimum(self):
        """Gets the minimum of this PercentileMetricValue.

        The min value of the metric.

        :return: The minimum of this PercentileMetricValue.
        :rtype: float
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this PercentileMetricValue.

        The min value of the metric.

        :param minimum: The minimum of this PercentileMetricValue.
        :type minimum: float
        """

        self._minimum = minimum

    @property
    def timestamp(self):
        """Gets the timestamp of this PercentileMetricValue.

        The metric timestamp (ISO-8601 format).

        :return: The timestamp of this PercentileMetricValue.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this PercentileMetricValue.

        The metric timestamp (ISO-8601 format).

        :param timestamp: The timestamp of this PercentileMetricValue.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def total(self):
        """Gets the total of this PercentileMetricValue.

        The total value of the metric.

        :return: The total of this PercentileMetricValue.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PercentileMetricValue.

        The total value of the metric.

        :param total: The total of this PercentileMetricValue.
        :type total: float
        """

        self._total = total
