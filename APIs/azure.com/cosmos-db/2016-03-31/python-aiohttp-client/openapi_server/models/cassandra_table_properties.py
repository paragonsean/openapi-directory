# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cassandra_schema import CassandraSchema
from openapi_server import util


class CassandraTableProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_ttl: int=None, id: str=None, _schema: CassandraSchema=None):
        """CassandraTableProperties - a model defined in OpenAPI

        :param default_ttl: The default_ttl of this CassandraTableProperties.
        :param id: The id of this CassandraTableProperties.
        :param _schema: The _schema of this CassandraTableProperties.
        """
        self.openapi_types = {
            'default_ttl': int,
            'id': str,
            '_schema': CassandraSchema
        }

        self.attribute_map = {
            'default_ttl': 'defaultTtl',
            'id': 'id',
            '_schema': 'schema'
        }

        self._default_ttl = default_ttl
        self._id = id
        self.__schema = _schema

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CassandraTableProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CassandraTableProperties of this CassandraTableProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_ttl(self):
        """Gets the default_ttl of this CassandraTableProperties.

        Time to live of the Cosmos DB Cassandra table

        :return: The default_ttl of this CassandraTableProperties.
        :rtype: int
        """
        return self._default_ttl

    @default_ttl.setter
    def default_ttl(self, default_ttl):
        """Sets the default_ttl of this CassandraTableProperties.

        Time to live of the Cosmos DB Cassandra table

        :param default_ttl: The default_ttl of this CassandraTableProperties.
        :type default_ttl: int
        """

        self._default_ttl = default_ttl

    @property
    def id(self):
        """Gets the id of this CassandraTableProperties.

        Name of the Cosmos DB Cassandra table

        :return: The id of this CassandraTableProperties.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CassandraTableProperties.

        Name of the Cosmos DB Cassandra table

        :param id: The id of this CassandraTableProperties.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def _schema(self):
        """Gets the _schema of this CassandraTableProperties.


        :return: The _schema of this CassandraTableProperties.
        :rtype: CassandraSchema
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this CassandraTableProperties.


        :param _schema: The _schema of this CassandraTableProperties.
        :type _schema: CassandraSchema
        """

        self.__schema = _schema
