# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mongo_index import MongoIndex
from openapi_server import util


class MongoDBCollectionResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, indexes: List[MongoIndex]=None, shard_key: Dict[str, str]=None):
        """MongoDBCollectionResource - a model defined in OpenAPI

        :param id: The id of this MongoDBCollectionResource.
        :param indexes: The indexes of this MongoDBCollectionResource.
        :param shard_key: The shard_key of this MongoDBCollectionResource.
        """
        self.openapi_types = {
            'id': str,
            'indexes': List[MongoIndex],
            'shard_key': Dict[str, str]
        }

        self.attribute_map = {
            'id': 'id',
            'indexes': 'indexes',
            'shard_key': 'shardKey'
        }

        self._id = id
        self._indexes = indexes
        self._shard_key = shard_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MongoDBCollectionResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MongoDBCollectionResource of this MongoDBCollectionResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this MongoDBCollectionResource.

        Name of the Cosmos DB MongoDB collection

        :return: The id of this MongoDBCollectionResource.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MongoDBCollectionResource.

        Name of the Cosmos DB MongoDB collection

        :param id: The id of this MongoDBCollectionResource.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def indexes(self):
        """Gets the indexes of this MongoDBCollectionResource.

        List of index keys

        :return: The indexes of this MongoDBCollectionResource.
        :rtype: List[MongoIndex]
        """
        return self._indexes

    @indexes.setter
    def indexes(self, indexes):
        """Sets the indexes of this MongoDBCollectionResource.

        List of index keys

        :param indexes: The indexes of this MongoDBCollectionResource.
        :type indexes: List[MongoIndex]
        """

        self._indexes = indexes

    @property
    def shard_key(self):
        """Gets the shard_key of this MongoDBCollectionResource.

        The shard key and partition kind pair, only support \"Hash\" partition kind

        :return: The shard_key of this MongoDBCollectionResource.
        :rtype: Dict[str, str]
        """
        return self._shard_key

    @shard_key.setter
    def shard_key(self, shard_key):
        """Sets the shard_key of this MongoDBCollectionResource.

        The shard key and partition kind pair, only support \"Hash\" partition kind

        :param shard_key: The shard_key of this MongoDBCollectionResource.
        :type shard_key: Dict[str, str]
        """

        self._shard_key = shard_key
