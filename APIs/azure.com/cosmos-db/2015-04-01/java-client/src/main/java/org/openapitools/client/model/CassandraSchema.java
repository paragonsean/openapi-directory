/*
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2015-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CassandraPartitionKey;
import org.openapitools.client.model.ClusterKey;
import org.openapitools.client.model.Column;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Cosmos DB Cassandra table schema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:36:17.828390-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CassandraSchema {
  public static final String SERIALIZED_NAME_CLUSTER_KEYS = "clusterKeys";
  @SerializedName(SERIALIZED_NAME_CLUSTER_KEYS)
  private List<ClusterKey> clusterKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private List<Column> columns = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARTITION_KEYS = "partitionKeys";
  @SerializedName(SERIALIZED_NAME_PARTITION_KEYS)
  private List<CassandraPartitionKey> partitionKeys = new ArrayList<>();

  public CassandraSchema() {
  }

  public CassandraSchema clusterKeys(List<ClusterKey> clusterKeys) {
    this.clusterKeys = clusterKeys;
    return this;
  }

  public CassandraSchema addClusterKeysItem(ClusterKey clusterKeysItem) {
    if (this.clusterKeys == null) {
      this.clusterKeys = new ArrayList<>();
    }
    this.clusterKeys.add(clusterKeysItem);
    return this;
  }

  /**
   * List of cluster key.
   * @return clusterKeys
   */
  @javax.annotation.Nullable
  public List<ClusterKey> getClusterKeys() {
    return clusterKeys;
  }

  public void setClusterKeys(List<ClusterKey> clusterKeys) {
    this.clusterKeys = clusterKeys;
  }


  public CassandraSchema columns(List<Column> columns) {
    this.columns = columns;
    return this;
  }

  public CassandraSchema addColumnsItem(Column columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<>();
    }
    this.columns.add(columnsItem);
    return this;
  }

  /**
   * List of Cassandra table columns.
   * @return columns
   */
  @javax.annotation.Nullable
  public List<Column> getColumns() {
    return columns;
  }

  public void setColumns(List<Column> columns) {
    this.columns = columns;
  }


  public CassandraSchema partitionKeys(List<CassandraPartitionKey> partitionKeys) {
    this.partitionKeys = partitionKeys;
    return this;
  }

  public CassandraSchema addPartitionKeysItem(CassandraPartitionKey partitionKeysItem) {
    if (this.partitionKeys == null) {
      this.partitionKeys = new ArrayList<>();
    }
    this.partitionKeys.add(partitionKeysItem);
    return this;
  }

  /**
   * List of partition key.
   * @return partitionKeys
   */
  @javax.annotation.Nullable
  public List<CassandraPartitionKey> getPartitionKeys() {
    return partitionKeys;
  }

  public void setPartitionKeys(List<CassandraPartitionKey> partitionKeys) {
    this.partitionKeys = partitionKeys;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CassandraSchema cassandraSchema = (CassandraSchema) o;
    return Objects.equals(this.clusterKeys, cassandraSchema.clusterKeys) &&
        Objects.equals(this.columns, cassandraSchema.columns) &&
        Objects.equals(this.partitionKeys, cassandraSchema.partitionKeys);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterKeys, columns, partitionKeys);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CassandraSchema {\n");
    sb.append("    clusterKeys: ").append(toIndentedString(clusterKeys)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    partitionKeys: ").append(toIndentedString(partitionKeys)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clusterKeys");
    openapiFields.add("columns");
    openapiFields.add("partitionKeys");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CassandraSchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CassandraSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CassandraSchema is not found in the empty JSON string", CassandraSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CassandraSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CassandraSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("clusterKeys") != null && !jsonObj.get("clusterKeys").isJsonNull()) {
        JsonArray jsonArrayclusterKeys = jsonObj.getAsJsonArray("clusterKeys");
        if (jsonArrayclusterKeys != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clusterKeys").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clusterKeys` to be an array in the JSON string but got `%s`", jsonObj.get("clusterKeys").toString()));
          }

          // validate the optional field `clusterKeys` (array)
          for (int i = 0; i < jsonArrayclusterKeys.size(); i++) {
            ClusterKey.validateJsonElement(jsonArrayclusterKeys.get(i));
          };
        }
      }
      if (jsonObj.get("columns") != null && !jsonObj.get("columns").isJsonNull()) {
        JsonArray jsonArraycolumns = jsonObj.getAsJsonArray("columns");
        if (jsonArraycolumns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("columns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `columns` to be an array in the JSON string but got `%s`", jsonObj.get("columns").toString()));
          }

          // validate the optional field `columns` (array)
          for (int i = 0; i < jsonArraycolumns.size(); i++) {
            Column.validateJsonElement(jsonArraycolumns.get(i));
          };
        }
      }
      if (jsonObj.get("partitionKeys") != null && !jsonObj.get("partitionKeys").isJsonNull()) {
        JsonArray jsonArraypartitionKeys = jsonObj.getAsJsonArray("partitionKeys");
        if (jsonArraypartitionKeys != null) {
          // ensure the json data is an array
          if (!jsonObj.get("partitionKeys").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `partitionKeys` to be an array in the JSON string but got `%s`", jsonObj.get("partitionKeys").toString()));
          }

          // validate the optional field `partitionKeys` (array)
          for (int i = 0; i < jsonArraypartitionKeys.size(); i++) {
            CassandraPartitionKey.validateJsonElement(jsonArraypartitionKeys.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CassandraSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CassandraSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CassandraSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CassandraSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<CassandraSchema>() {
           @Override
           public void write(JsonWriter out, CassandraSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CassandraSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CassandraSchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CassandraSchema
   * @throws IOException if the JSON string is invalid with respect to CassandraSchema
   */
  public static CassandraSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CassandraSchema.class);
  }

  /**
   * Convert an instance of CassandraSchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

