/*
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2015-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A region in which the Azure Cosmos DB database account is deployed.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:36:17.828390-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Location {
  public static final String SERIALIZED_NAME_DOCUMENT_ENDPOINT = "documentEndpoint";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ENDPOINT)
  private String documentEndpoint;

  public static final String SERIALIZED_NAME_FAILOVER_PRIORITY = "failoverPriority";
  @SerializedName(SERIALIZED_NAME_FAILOVER_PRIORITY)
  private Integer failoverPriority;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_ZONE_REDUNDANT = "isZoneRedundant";
  @SerializedName(SERIALIZED_NAME_IS_ZONE_REDUNDANT)
  private Boolean isZoneRedundant;

  public static final String SERIALIZED_NAME_LOCATION_NAME = "locationName";
  @SerializedName(SERIALIZED_NAME_LOCATION_NAME)
  private String locationName;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public Location() {
  }

  public Location(
     String documentEndpoint, 
     String id
  ) {
    this();
    this.documentEndpoint = documentEndpoint;
    this.id = id;
  }

  /**
   * The connection endpoint for the specific region. Example: https://&amp;lt;accountName&amp;gt;-&amp;lt;locationName&amp;gt;.documents.azure.com:443/
   * @return documentEndpoint
   */
  @javax.annotation.Nullable
  public String getDocumentEndpoint() {
    return documentEndpoint;
  }



  public Location failoverPriority(Integer failoverPriority) {
    this.failoverPriority = failoverPriority;
    return this;
  }

  /**
   * The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority &#x3D; (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
   * minimum: 0
   * @return failoverPriority
   */
  @javax.annotation.Nullable
  public Integer getFailoverPriority() {
    return failoverPriority;
  }

  public void setFailoverPriority(Integer failoverPriority) {
    this.failoverPriority = failoverPriority;
  }


  /**
   * The unique identifier of the region within the database account. Example: &amp;lt;accountName&amp;gt;-&amp;lt;locationName&amp;gt;.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public Location isZoneRedundant(Boolean isZoneRedundant) {
    this.isZoneRedundant = isZoneRedundant;
    return this;
  }

  /**
   * Flag to indicate whether or not this region is an AvailabilityZone region
   * @return isZoneRedundant
   */
  @javax.annotation.Nullable
  public Boolean getIsZoneRedundant() {
    return isZoneRedundant;
  }

  public void setIsZoneRedundant(Boolean isZoneRedundant) {
    this.isZoneRedundant = isZoneRedundant;
  }


  public Location locationName(String locationName) {
    this.locationName = locationName;
    return this;
  }

  /**
   * The name of the region.
   * @return locationName
   */
  @javax.annotation.Nullable
  public String getLocationName() {
    return locationName;
  }

  public void setLocationName(String locationName) {
    this.locationName = locationName;
  }


  public Location provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * The status of the Cosmos DB account at the time the operation was called. The status can be one of following. &#39;Creating&#39; – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. &#39;Succeeded&#39; – the Cosmos DB account is active for use. &#39;Updating&#39; – the Cosmos DB account is being updated. &#39;Deleting&#39; – the Cosmos DB account is being deleted. &#39;Failed&#39; – the Cosmos DB account failed creation.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Location location = (Location) o;
    return Objects.equals(this.documentEndpoint, location.documentEndpoint) &&
        Objects.equals(this.failoverPriority, location.failoverPriority) &&
        Objects.equals(this.id, location.id) &&
        Objects.equals(this.isZoneRedundant, location.isZoneRedundant) &&
        Objects.equals(this.locationName, location.locationName) &&
        Objects.equals(this.provisioningState, location.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentEndpoint, failoverPriority, id, isZoneRedundant, locationName, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Location {\n");
    sb.append("    documentEndpoint: ").append(toIndentedString(documentEndpoint)).append("\n");
    sb.append("    failoverPriority: ").append(toIndentedString(failoverPriority)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isZoneRedundant: ").append(toIndentedString(isZoneRedundant)).append("\n");
    sb.append("    locationName: ").append(toIndentedString(locationName)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documentEndpoint");
    openapiFields.add("failoverPriority");
    openapiFields.add("id");
    openapiFields.add("isZoneRedundant");
    openapiFields.add("locationName");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Location
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Location.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Location is not found in the empty JSON string", Location.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Location.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Location` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("documentEndpoint") != null && !jsonObj.get("documentEndpoint").isJsonNull()) && !jsonObj.get("documentEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentEndpoint").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("locationName") != null && !jsonObj.get("locationName").isJsonNull()) && !jsonObj.get("locationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationName").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Location.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Location' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Location> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Location.class));

       return (TypeAdapter<T>) new TypeAdapter<Location>() {
           @Override
           public void write(JsonWriter out, Location value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Location read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Location given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Location
   * @throws IOException if the JSON string is invalid with respect to Location
   */
  public static Location fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Location.class);
  }

  /**
   * Convert an instance of Location to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

