/*
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2015-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CassandraKeyspace;
import org.openapitools.client.model.CassandraKeyspaceCreateUpdateParameters;
import org.openapitools.client.model.CassandraKeyspaceListResult;
import org.openapitools.client.model.CassandraTable;
import org.openapitools.client.model.CassandraTableCreateUpdateParameters;
import org.openapitools.client.model.CassandraTableListResult;
import org.openapitools.client.model.DatabaseAccount;
import org.openapitools.client.model.DatabaseAccountCreateUpdateParameters;
import org.openapitools.client.model.DatabaseAccountListConnectionStringsResult;
import org.openapitools.client.model.DatabaseAccountListKeysResult;
import org.openapitools.client.model.DatabaseAccountListReadOnlyKeysResult;
import org.openapitools.client.model.DatabaseAccountPatchParameters;
import org.openapitools.client.model.DatabaseAccountRegenerateKeyParameters;
import org.openapitools.client.model.DatabaseAccountsListResult;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.FailoverPolicies;
import org.openapitools.client.model.GremlinDatabase;
import org.openapitools.client.model.GremlinDatabaseCreateUpdateParameters;
import org.openapitools.client.model.GremlinDatabaseListResult;
import org.openapitools.client.model.GremlinGraph;
import org.openapitools.client.model.GremlinGraphCreateUpdateParameters;
import org.openapitools.client.model.GremlinGraphListResult;
import org.openapitools.client.model.MetricDefinitionsListResult;
import org.openapitools.client.model.MetricListResult;
import org.openapitools.client.model.MongoDBCollection;
import org.openapitools.client.model.MongoDBCollectionCreateUpdateParameters;
import org.openapitools.client.model.MongoDBCollectionListResult;
import org.openapitools.client.model.MongoDBDatabase;
import org.openapitools.client.model.MongoDBDatabaseCreateUpdateParameters;
import org.openapitools.client.model.MongoDBDatabaseListResult;
import org.openapitools.client.model.PartitionMetricListResult;
import org.openapitools.client.model.PartitionUsagesResult;
import org.openapitools.client.model.PercentileMetricListResult;
import org.openapitools.client.model.RegionForOnlineOffline;
import org.openapitools.client.model.SqlContainer;
import org.openapitools.client.model.SqlContainerCreateUpdateParameters;
import org.openapitools.client.model.SqlContainerListResult;
import org.openapitools.client.model.SqlDatabase;
import org.openapitools.client.model.SqlDatabaseCreateUpdateParameters;
import org.openapitools.client.model.SqlDatabaseListResult;
import org.openapitools.client.model.Table;
import org.openapitools.client.model.TableCreateUpdateParameters;
import org.openapitools.client.model.TableListResult;
import org.openapitools.client.model.Throughput;
import org.openapitools.client.model.ThroughputUpdateParameters;
import org.openapitools.client.model.UsagesResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for collectionListMetricDefinitions
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric definitions for the collection were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionListMetricDefinitionsCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/metricDefinitions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseRid" + "}", localVarApiClient.escapeString(databaseRid.toString()))
            .replace("{" + "collectionRid" + "}", localVarApiClient.escapeString(collectionRid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collectionListMetricDefinitionsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling collectionListMetricDefinitions(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling collectionListMetricDefinitions(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling collectionListMetricDefinitions(Async)");
        }

        // verify the required parameter 'databaseRid' is set
        if (databaseRid == null) {
            throw new ApiException("Missing the required parameter 'databaseRid' when calling collectionListMetricDefinitions(Async)");
        }

        // verify the required parameter 'collectionRid' is set
        if (collectionRid == null) {
            throw new ApiException("Missing the required parameter 'collectionRid' when calling collectionListMetricDefinitions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling collectionListMetricDefinitions(Async)");
        }

        return collectionListMetricDefinitionsCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves metric definitions for the given collection.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return MetricDefinitionsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric definitions for the collection were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public MetricDefinitionsListResult collectionListMetricDefinitions(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion) throws ApiException {
        ApiResponse<MetricDefinitionsListResult> localVarResp = collectionListMetricDefinitionsWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves metric definitions for the given collection.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;MetricDefinitionsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric definitions for the collection were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricDefinitionsListResult> collectionListMetricDefinitionsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = collectionListMetricDefinitionsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, null);
        Type localVarReturnType = new TypeToken<MetricDefinitionsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves metric definitions for the given collection.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric definitions for the collection were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionListMetricDefinitionsAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, final ApiCallback<MetricDefinitionsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = collectionListMetricDefinitionsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MetricDefinitionsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for collectionListMetrics
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionListMetricsCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/metrics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseRid" + "}", localVarApiClient.escapeString(databaseRid.toString()))
            .replace("{" + "collectionRid" + "}", localVarApiClient.escapeString(collectionRid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collectionListMetricsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling collectionListMetrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling collectionListMetrics(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling collectionListMetrics(Async)");
        }

        // verify the required parameter 'databaseRid' is set
        if (databaseRid == null) {
            throw new ApiException("Missing the required parameter 'databaseRid' when calling collectionListMetrics(Async)");
        }

        // verify the required parameter 'collectionRid' is set
        if (collectionRid == null) {
            throw new ApiException("Missing the required parameter 'collectionRid' when calling collectionListMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling collectionListMetrics(Async)");
        }

        // verify the required parameter '$filter' is set
        if ($filter == null) {
            throw new ApiException("Missing the required parameter '$filter' when calling collectionListMetrics(Async)");
        }

        return collectionListMetricsCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given database account and collection.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return MetricListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public MetricListResult collectionListMetrics(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter) throws ApiException {
        ApiResponse<MetricListResult> localVarResp = collectionListMetricsWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given database account and collection.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return ApiResponse&lt;MetricListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricListResult> collectionListMetricsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = collectionListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<MetricListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the metrics determined by the given filter for the given database account and collection.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionListMetricsAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback<MetricListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = collectionListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<MetricListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for collectionListUsages
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the collection were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionListUsagesCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/usages"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseRid" + "}", localVarApiClient.escapeString(databaseRid.toString()))
            .replace("{" + "collectionRid" + "}", localVarApiClient.escapeString(collectionRid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collectionListUsagesValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling collectionListUsages(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling collectionListUsages(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling collectionListUsages(Async)");
        }

        // verify the required parameter 'databaseRid' is set
        if (databaseRid == null) {
            throw new ApiException("Missing the required parameter 'databaseRid' when calling collectionListUsages(Async)");
        }

        // verify the required parameter 'collectionRid' is set
        if (collectionRid == null) {
            throw new ApiException("Missing the required parameter 'collectionRid' when calling collectionListUsages(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling collectionListUsages(Async)");
        }

        return collectionListUsagesCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the usages (most recent storage data) for the given collection.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @return UsagesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the collection were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public UsagesResult collectionListUsages(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter) throws ApiException {
        ApiResponse<UsagesResult> localVarResp = collectionListUsagesWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the usages (most recent storage data) for the given collection.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @return ApiResponse&lt;UsagesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the collection were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsagesResult> collectionListUsagesWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = collectionListUsagesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<UsagesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the usages (most recent storage data) for the given collection.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the collection were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionListUsagesAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback<UsagesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = collectionListUsagesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<UsagesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for collectionPartitionListMetrics
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the collection were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionPartitionListMetricsCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitions/metrics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseRid" + "}", localVarApiClient.escapeString(databaseRid.toString()))
            .replace("{" + "collectionRid" + "}", localVarApiClient.escapeString(collectionRid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collectionPartitionListMetricsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling collectionPartitionListMetrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling collectionPartitionListMetrics(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling collectionPartitionListMetrics(Async)");
        }

        // verify the required parameter 'databaseRid' is set
        if (databaseRid == null) {
            throw new ApiException("Missing the required parameter 'databaseRid' when calling collectionPartitionListMetrics(Async)");
        }

        // verify the required parameter 'collectionRid' is set
        if (collectionRid == null) {
            throw new ApiException("Missing the required parameter 'collectionRid' when calling collectionPartitionListMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling collectionPartitionListMetrics(Async)");
        }

        // verify the required parameter '$filter' is set
        if ($filter == null) {
            throw new ApiException("Missing the required parameter '$filter' when calling collectionPartitionListMetrics(Async)");
        }

        return collectionPartitionListMetricsCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given collection, split by partition.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return PartitionMetricListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the collection were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public PartitionMetricListResult collectionPartitionListMetrics(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter) throws ApiException {
        ApiResponse<PartitionMetricListResult> localVarResp = collectionPartitionListMetricsWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given collection, split by partition.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return ApiResponse&lt;PartitionMetricListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the collection were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PartitionMetricListResult> collectionPartitionListMetricsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = collectionPartitionListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<PartitionMetricListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the metrics determined by the given filter for the given collection, split by partition.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the collection were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionPartitionListMetricsAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback<PartitionMetricListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = collectionPartitionListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<PartitionMetricListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for collectionPartitionListUsages
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the collection, per partition were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionPartitionListUsagesCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitions/usages"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseRid" + "}", localVarApiClient.escapeString(databaseRid.toString()))
            .replace("{" + "collectionRid" + "}", localVarApiClient.escapeString(collectionRid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collectionPartitionListUsagesValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling collectionPartitionListUsages(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling collectionPartitionListUsages(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling collectionPartitionListUsages(Async)");
        }

        // verify the required parameter 'databaseRid' is set
        if (databaseRid == null) {
            throw new ApiException("Missing the required parameter 'databaseRid' when calling collectionPartitionListUsages(Async)");
        }

        // verify the required parameter 'collectionRid' is set
        if (collectionRid == null) {
            throw new ApiException("Missing the required parameter 'collectionRid' when calling collectionPartitionListUsages(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling collectionPartitionListUsages(Async)");
        }

        return collectionPartitionListUsagesCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the usages (most recent storage data) for the given collection, split by partition.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @return PartitionUsagesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the collection, per partition were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public PartitionUsagesResult collectionPartitionListUsages(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter) throws ApiException {
        ApiResponse<PartitionUsagesResult> localVarResp = collectionPartitionListUsagesWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the usages (most recent storage data) for the given collection, split by partition.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @return ApiResponse&lt;PartitionUsagesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the collection, per partition were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PartitionUsagesResult> collectionPartitionListUsagesWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = collectionPartitionListUsagesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<PartitionUsagesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the usages (most recent storage data) for the given collection, split by partition.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the collection, per partition were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionPartitionListUsagesAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback<PartitionUsagesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = collectionPartitionListUsagesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<PartitionUsagesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for collectionPartitionRegionListMetrics
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the collection and region were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionPartitionRegionListMetricsCall(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/partitions/metrics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "region" + "}", localVarApiClient.escapeString(region.toString()))
            .replace("{" + "databaseRid" + "}", localVarApiClient.escapeString(databaseRid.toString()))
            .replace("{" + "collectionRid" + "}", localVarApiClient.escapeString(collectionRid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collectionPartitionRegionListMetricsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling collectionPartitionRegionListMetrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling collectionPartitionRegionListMetrics(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling collectionPartitionRegionListMetrics(Async)");
        }

        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling collectionPartitionRegionListMetrics(Async)");
        }

        // verify the required parameter 'databaseRid' is set
        if (databaseRid == null) {
            throw new ApiException("Missing the required parameter 'databaseRid' when calling collectionPartitionRegionListMetrics(Async)");
        }

        // verify the required parameter 'collectionRid' is set
        if (collectionRid == null) {
            throw new ApiException("Missing the required parameter 'collectionRid' when calling collectionPartitionRegionListMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling collectionPartitionRegionListMetrics(Async)");
        }

        // verify the required parameter '$filter' is set
        if ($filter == null) {
            throw new ApiException("Missing the required parameter '$filter' when calling collectionPartitionRegionListMetrics(Async)");
        }

        return collectionPartitionRegionListMetricsCall(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given collection and region, split by partition.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return PartitionMetricListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the collection and region were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public PartitionMetricListResult collectionPartitionRegionListMetrics(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String apiVersion, String $filter) throws ApiException {
        ApiResponse<PartitionMetricListResult> localVarResp = collectionPartitionRegionListMetricsWithHttpInfo(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given collection and region, split by partition.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return ApiResponse&lt;PartitionMetricListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the collection and region were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PartitionMetricListResult> collectionPartitionRegionListMetricsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = collectionPartitionRegionListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<PartitionMetricListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the metrics determined by the given filter for the given collection and region, split by partition.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the collection and region were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionPartitionRegionListMetricsAsync(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback<PartitionMetricListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = collectionPartitionRegionListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<PartitionMetricListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for collectionRegionListMetrics
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionRegionListMetricsCall(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/metrics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "region" + "}", localVarApiClient.escapeString(region.toString()))
            .replace("{" + "databaseRid" + "}", localVarApiClient.escapeString(databaseRid.toString()))
            .replace("{" + "collectionRid" + "}", localVarApiClient.escapeString(collectionRid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collectionRegionListMetricsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling collectionRegionListMetrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling collectionRegionListMetrics(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling collectionRegionListMetrics(Async)");
        }

        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling collectionRegionListMetrics(Async)");
        }

        // verify the required parameter 'databaseRid' is set
        if (databaseRid == null) {
            throw new ApiException("Missing the required parameter 'databaseRid' when calling collectionRegionListMetrics(Async)");
        }

        // verify the required parameter 'collectionRid' is set
        if (collectionRid == null) {
            throw new ApiException("Missing the required parameter 'collectionRid' when calling collectionRegionListMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling collectionRegionListMetrics(Async)");
        }

        // verify the required parameter '$filter' is set
        if ($filter == null) {
            throw new ApiException("Missing the required parameter '$filter' when calling collectionRegionListMetrics(Async)");
        }

        return collectionRegionListMetricsCall(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given database account, collection and region.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return MetricListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public MetricListResult collectionRegionListMetrics(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String apiVersion, String $filter) throws ApiException {
        ApiResponse<MetricListResult> localVarResp = collectionRegionListMetricsWithHttpInfo(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given database account, collection and region.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return ApiResponse&lt;MetricListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricListResult> collectionRegionListMetricsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = collectionRegionListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<MetricListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the metrics determined by the given filter for the given database account, collection and region.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionRegionListMetricsAsync(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String apiVersion, String $filter, final ApiCallback<MetricListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = collectionRegionListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<MetricListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountRegionListMetrics
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountRegionListMetricsCall(String subscriptionId, String resourceGroupName, String accountName, String region, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/metrics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "region" + "}", localVarApiClient.escapeString(region.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountRegionListMetricsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String region, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountRegionListMetrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountRegionListMetrics(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountRegionListMetrics(Async)");
        }

        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling databaseAccountRegionListMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountRegionListMetrics(Async)");
        }

        // verify the required parameter '$filter' is set
        if ($filter == null) {
            throw new ApiException("Missing the required parameter '$filter' when calling databaseAccountRegionListMetrics(Async)");
        }

        return databaseAccountRegionListMetricsCall(subscriptionId, resourceGroupName, accountName, region, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given database account and region.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return MetricListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public MetricListResult databaseAccountRegionListMetrics(String subscriptionId, String resourceGroupName, String accountName, String region, String apiVersion, String $filter) throws ApiException {
        ApiResponse<MetricListResult> localVarResp = databaseAccountRegionListMetricsWithHttpInfo(subscriptionId, resourceGroupName, accountName, region, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given database account and region.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return ApiResponse&lt;MetricListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricListResult> databaseAccountRegionListMetricsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String region, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountRegionListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, region, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<MetricListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the metrics determined by the given filter for the given database account and region.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountRegionListMetricsAsync(String subscriptionId, String resourceGroupName, String accountName, String region, String apiVersion, String $filter, final ApiCallback<MetricListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountRegionListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, region, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<MetricListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsCheckNameExists
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The account name is valid but is already in use. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The account name is available and valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsCheckNameExistsCall(String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.DocumentDB/databaseAccountNames/{accountName}"
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsCheckNameExistsValidateBeforeCall(String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsCheckNameExists(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsCheckNameExists(Async)");
        }

        return databaseAccountsCheckNameExistsCall(accountName, apiVersion, _callback);

    }

    /**
     * 
     * Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only lowercase letters, numbers, and the &#39;-&#39; character, and must be between 3 and 50 characters.
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The account name is valid but is already in use. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The account name is available and valid. </td><td>  -  </td></tr>
     </table>
     */
    public void databaseAccountsCheckNameExists(String accountName, String apiVersion) throws ApiException {
        databaseAccountsCheckNameExistsWithHttpInfo(accountName, apiVersion);
    }

    /**
     * 
     * Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only lowercase letters, numbers, and the &#39;-&#39; character, and must be between 3 and 50 characters.
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The account name is valid but is already in use. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The account name is available and valid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> databaseAccountsCheckNameExistsWithHttpInfo(String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsCheckNameExistsValidateBeforeCall(accountName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only lowercase letters, numbers, and the &#39;-&#39; character, and must be between 3 and 50 characters.
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The account name is valid but is already in use. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The account name is available and valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsCheckNameExistsAsync(String accountName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsCheckNameExistsValidateBeforeCall(accountName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsCreateOrUpdate
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateParameters The parameters to provide for the current database account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The database account create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountCreateUpdateParameters createUpdateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdateParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountCreateUpdateParameters createUpdateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'createUpdateParameters' is set
        if (createUpdateParameters == null) {
            throw new ApiException("Missing the required parameter 'createUpdateParameters' when calling databaseAccountsCreateOrUpdate(Async)");
        }

        return databaseAccountsCreateOrUpdateCall(subscriptionId, resourceGroupName, accountName, apiVersion, createUpdateParameters, _callback);

    }

    /**
     * 
     * Creates or updates an Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateParameters The parameters to provide for the current database account. (required)
     * @return DatabaseAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The database account create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseAccount databaseAccountsCreateOrUpdate(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountCreateUpdateParameters createUpdateParameters) throws ApiException {
        ApiResponse<DatabaseAccount> localVarResp = databaseAccountsCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion, createUpdateParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates an Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateParameters The parameters to provide for the current database account. (required)
     * @return ApiResponse&lt;DatabaseAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The database account create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseAccount> databaseAccountsCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountCreateUpdateParameters createUpdateParameters) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, createUpdateParameters, null);
        Type localVarReturnType = new TypeToken<DatabaseAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates an Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateParameters The parameters to provide for the current database account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The database account create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountCreateUpdateParameters createUpdateParameters, final ApiCallback<DatabaseAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, createUpdateParameters, _callback);
        Type localVarReturnType = new TypeToken<DatabaseAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsCreateUpdateCassandraKeyspace
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateCassandraKeyspaceParameters The parameters to provide for the current Cassandra keyspace. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra keyspace create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Cassandra keyspace create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsCreateUpdateCassandraKeyspaceCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, CassandraKeyspaceCreateUpdateParameters createUpdateCassandraKeyspaceParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdateCassandraKeyspaceParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "keyspaceName" + "}", localVarApiClient.escapeString(keyspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsCreateUpdateCassandraKeyspaceValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, CassandraKeyspaceCreateUpdateParameters createUpdateCassandraKeyspaceParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsCreateUpdateCassandraKeyspace(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsCreateUpdateCassandraKeyspace(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsCreateUpdateCassandraKeyspace(Async)");
        }

        // verify the required parameter 'keyspaceName' is set
        if (keyspaceName == null) {
            throw new ApiException("Missing the required parameter 'keyspaceName' when calling databaseAccountsCreateUpdateCassandraKeyspace(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsCreateUpdateCassandraKeyspace(Async)");
        }

        // verify the required parameter 'createUpdateCassandraKeyspaceParameters' is set
        if (createUpdateCassandraKeyspaceParameters == null) {
            throw new ApiException("Missing the required parameter 'createUpdateCassandraKeyspaceParameters' when calling databaseAccountsCreateUpdateCassandraKeyspace(Async)");
        }

        return databaseAccountsCreateUpdateCassandraKeyspaceCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, createUpdateCassandraKeyspaceParameters, _callback);

    }

    /**
     * 
     * Create or update an Azure Cosmos DB Cassandra keyspace
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateCassandraKeyspaceParameters The parameters to provide for the current Cassandra keyspace. (required)
     * @return CassandraKeyspace
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra keyspace create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Cassandra keyspace create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public CassandraKeyspace databaseAccountsCreateUpdateCassandraKeyspace(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, CassandraKeyspaceCreateUpdateParameters createUpdateCassandraKeyspaceParameters) throws ApiException {
        ApiResponse<CassandraKeyspace> localVarResp = databaseAccountsCreateUpdateCassandraKeyspaceWithHttpInfo(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, createUpdateCassandraKeyspaceParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update an Azure Cosmos DB Cassandra keyspace
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateCassandraKeyspaceParameters The parameters to provide for the current Cassandra keyspace. (required)
     * @return ApiResponse&lt;CassandraKeyspace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra keyspace create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Cassandra keyspace create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CassandraKeyspace> databaseAccountsCreateUpdateCassandraKeyspaceWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, CassandraKeyspaceCreateUpdateParameters createUpdateCassandraKeyspaceParameters) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsCreateUpdateCassandraKeyspaceValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, createUpdateCassandraKeyspaceParameters, null);
        Type localVarReturnType = new TypeToken<CassandraKeyspace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update an Azure Cosmos DB Cassandra keyspace
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateCassandraKeyspaceParameters The parameters to provide for the current Cassandra keyspace. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra keyspace create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Cassandra keyspace create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsCreateUpdateCassandraKeyspaceAsync(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, CassandraKeyspaceCreateUpdateParameters createUpdateCassandraKeyspaceParameters, final ApiCallback<CassandraKeyspace> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsCreateUpdateCassandraKeyspaceValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, createUpdateCassandraKeyspaceParameters, _callback);
        Type localVarReturnType = new TypeToken<CassandraKeyspace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsCreateUpdateCassandraTable
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateCassandraTableParameters The parameters to provide for the current Cassandra Table. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra Table create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Cassandra Table create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsCreateUpdateCassandraTableCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, CassandraTableCreateUpdateParameters createUpdateCassandraTableParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdateCassandraTableParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceName}/tables/{tableName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "keyspaceName" + "}", localVarApiClient.escapeString(keyspaceName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsCreateUpdateCassandraTableValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, CassandraTableCreateUpdateParameters createUpdateCassandraTableParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsCreateUpdateCassandraTable(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsCreateUpdateCassandraTable(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsCreateUpdateCassandraTable(Async)");
        }

        // verify the required parameter 'keyspaceName' is set
        if (keyspaceName == null) {
            throw new ApiException("Missing the required parameter 'keyspaceName' when calling databaseAccountsCreateUpdateCassandraTable(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling databaseAccountsCreateUpdateCassandraTable(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsCreateUpdateCassandraTable(Async)");
        }

        // verify the required parameter 'createUpdateCassandraTableParameters' is set
        if (createUpdateCassandraTableParameters == null) {
            throw new ApiException("Missing the required parameter 'createUpdateCassandraTableParameters' when calling databaseAccountsCreateUpdateCassandraTable(Async)");
        }

        return databaseAccountsCreateUpdateCassandraTableCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, createUpdateCassandraTableParameters, _callback);

    }

    /**
     * 
     * Create or update an Azure Cosmos DB Cassandra Table
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateCassandraTableParameters The parameters to provide for the current Cassandra Table. (required)
     * @return CassandraTable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra Table create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Cassandra Table create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public CassandraTable databaseAccountsCreateUpdateCassandraTable(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, CassandraTableCreateUpdateParameters createUpdateCassandraTableParameters) throws ApiException {
        ApiResponse<CassandraTable> localVarResp = databaseAccountsCreateUpdateCassandraTableWithHttpInfo(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, createUpdateCassandraTableParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update an Azure Cosmos DB Cassandra Table
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateCassandraTableParameters The parameters to provide for the current Cassandra Table. (required)
     * @return ApiResponse&lt;CassandraTable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra Table create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Cassandra Table create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CassandraTable> databaseAccountsCreateUpdateCassandraTableWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, CassandraTableCreateUpdateParameters createUpdateCassandraTableParameters) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsCreateUpdateCassandraTableValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, createUpdateCassandraTableParameters, null);
        Type localVarReturnType = new TypeToken<CassandraTable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update an Azure Cosmos DB Cassandra Table
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateCassandraTableParameters The parameters to provide for the current Cassandra Table. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra Table create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Cassandra Table create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsCreateUpdateCassandraTableAsync(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, CassandraTableCreateUpdateParameters createUpdateCassandraTableParameters, final ApiCallback<CassandraTable> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsCreateUpdateCassandraTableValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, createUpdateCassandraTableParameters, _callback);
        Type localVarReturnType = new TypeToken<CassandraTable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsCreateUpdateGremlinDatabase
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateGremlinDatabaseParameters The parameters to provide for the current Gremlin database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin database create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Gremlin database create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsCreateUpdateGremlinDatabaseCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, GremlinDatabaseCreateUpdateParameters createUpdateGremlinDatabaseParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdateGremlinDatabaseParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsCreateUpdateGremlinDatabaseValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, GremlinDatabaseCreateUpdateParameters createUpdateGremlinDatabaseParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsCreateUpdateGremlinDatabase(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsCreateUpdateGremlinDatabase(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsCreateUpdateGremlinDatabase(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsCreateUpdateGremlinDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsCreateUpdateGremlinDatabase(Async)");
        }

        // verify the required parameter 'createUpdateGremlinDatabaseParameters' is set
        if (createUpdateGremlinDatabaseParameters == null) {
            throw new ApiException("Missing the required parameter 'createUpdateGremlinDatabaseParameters' when calling databaseAccountsCreateUpdateGremlinDatabase(Async)");
        }

        return databaseAccountsCreateUpdateGremlinDatabaseCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateGremlinDatabaseParameters, _callback);

    }

    /**
     * 
     * Create or update an Azure Cosmos DB Gremlin database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateGremlinDatabaseParameters The parameters to provide for the current Gremlin database. (required)
     * @return GremlinDatabase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin database create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Gremlin database create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public GremlinDatabase databaseAccountsCreateUpdateGremlinDatabase(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, GremlinDatabaseCreateUpdateParameters createUpdateGremlinDatabaseParameters) throws ApiException {
        ApiResponse<GremlinDatabase> localVarResp = databaseAccountsCreateUpdateGremlinDatabaseWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateGremlinDatabaseParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update an Azure Cosmos DB Gremlin database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateGremlinDatabaseParameters The parameters to provide for the current Gremlin database. (required)
     * @return ApiResponse&lt;GremlinDatabase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin database create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Gremlin database create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GremlinDatabase> databaseAccountsCreateUpdateGremlinDatabaseWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, GremlinDatabaseCreateUpdateParameters createUpdateGremlinDatabaseParameters) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsCreateUpdateGremlinDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateGremlinDatabaseParameters, null);
        Type localVarReturnType = new TypeToken<GremlinDatabase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update an Azure Cosmos DB Gremlin database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateGremlinDatabaseParameters The parameters to provide for the current Gremlin database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin database create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Gremlin database create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsCreateUpdateGremlinDatabaseAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, GremlinDatabaseCreateUpdateParameters createUpdateGremlinDatabaseParameters, final ApiCallback<GremlinDatabase> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsCreateUpdateGremlinDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateGremlinDatabaseParameters, _callback);
        Type localVarReturnType = new TypeToken<GremlinDatabase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsCreateUpdateGremlinGraph
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateGremlinGraphParameters The parameters to provide for the current Gremlin graph. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin graph create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Gremlin graph create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsCreateUpdateGremlinGraphCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, GremlinGraphCreateUpdateParameters createUpdateGremlinGraphParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdateGremlinGraphParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseName}/graphs/{graphName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "graphName" + "}", localVarApiClient.escapeString(graphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsCreateUpdateGremlinGraphValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, GremlinGraphCreateUpdateParameters createUpdateGremlinGraphParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsCreateUpdateGremlinGraph(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsCreateUpdateGremlinGraph(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsCreateUpdateGremlinGraph(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsCreateUpdateGremlinGraph(Async)");
        }

        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling databaseAccountsCreateUpdateGremlinGraph(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsCreateUpdateGremlinGraph(Async)");
        }

        // verify the required parameter 'createUpdateGremlinGraphParameters' is set
        if (createUpdateGremlinGraphParameters == null) {
            throw new ApiException("Missing the required parameter 'createUpdateGremlinGraphParameters' when calling databaseAccountsCreateUpdateGremlinGraph(Async)");
        }

        return databaseAccountsCreateUpdateGremlinGraphCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, createUpdateGremlinGraphParameters, _callback);

    }

    /**
     * 
     * Create or update an Azure Cosmos DB Gremlin graph
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateGremlinGraphParameters The parameters to provide for the current Gremlin graph. (required)
     * @return GremlinGraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin graph create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Gremlin graph create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public GremlinGraph databaseAccountsCreateUpdateGremlinGraph(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, GremlinGraphCreateUpdateParameters createUpdateGremlinGraphParameters) throws ApiException {
        ApiResponse<GremlinGraph> localVarResp = databaseAccountsCreateUpdateGremlinGraphWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, createUpdateGremlinGraphParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update an Azure Cosmos DB Gremlin graph
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateGremlinGraphParameters The parameters to provide for the current Gremlin graph. (required)
     * @return ApiResponse&lt;GremlinGraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin graph create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Gremlin graph create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GremlinGraph> databaseAccountsCreateUpdateGremlinGraphWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, GremlinGraphCreateUpdateParameters createUpdateGremlinGraphParameters) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsCreateUpdateGremlinGraphValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, createUpdateGremlinGraphParameters, null);
        Type localVarReturnType = new TypeToken<GremlinGraph>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update an Azure Cosmos DB Gremlin graph
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateGremlinGraphParameters The parameters to provide for the current Gremlin graph. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin graph create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Gremlin graph create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsCreateUpdateGremlinGraphAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, GremlinGraphCreateUpdateParameters createUpdateGremlinGraphParameters, final ApiCallback<GremlinGraph> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsCreateUpdateGremlinGraphValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, createUpdateGremlinGraphParameters, _callback);
        Type localVarReturnType = new TypeToken<GremlinGraph>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsCreateUpdateMongoDBCollection
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateMongoDBCollectionParameters The parameters to provide for the current MongoDB Collection. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB Collection create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The MongoDB Collection create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsCreateUpdateMongoDBCollectionCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, MongoDBCollectionCreateUpdateParameters createUpdateMongoDBCollectionParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdateMongoDBCollectionParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases/{databaseName}/collections/{collectionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "collectionName" + "}", localVarApiClient.escapeString(collectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsCreateUpdateMongoDBCollectionValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, MongoDBCollectionCreateUpdateParameters createUpdateMongoDBCollectionParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsCreateUpdateMongoDBCollection(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsCreateUpdateMongoDBCollection(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsCreateUpdateMongoDBCollection(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsCreateUpdateMongoDBCollection(Async)");
        }

        // verify the required parameter 'collectionName' is set
        if (collectionName == null) {
            throw new ApiException("Missing the required parameter 'collectionName' when calling databaseAccountsCreateUpdateMongoDBCollection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsCreateUpdateMongoDBCollection(Async)");
        }

        // verify the required parameter 'createUpdateMongoDBCollectionParameters' is set
        if (createUpdateMongoDBCollectionParameters == null) {
            throw new ApiException("Missing the required parameter 'createUpdateMongoDBCollectionParameters' when calling databaseAccountsCreateUpdateMongoDBCollection(Async)");
        }

        return databaseAccountsCreateUpdateMongoDBCollectionCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, createUpdateMongoDBCollectionParameters, _callback);

    }

    /**
     * 
     * Create or update an Azure Cosmos DB MongoDB Collection
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateMongoDBCollectionParameters The parameters to provide for the current MongoDB Collection. (required)
     * @return MongoDBCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB Collection create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The MongoDB Collection create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public MongoDBCollection databaseAccountsCreateUpdateMongoDBCollection(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, MongoDBCollectionCreateUpdateParameters createUpdateMongoDBCollectionParameters) throws ApiException {
        ApiResponse<MongoDBCollection> localVarResp = databaseAccountsCreateUpdateMongoDBCollectionWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, createUpdateMongoDBCollectionParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update an Azure Cosmos DB MongoDB Collection
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateMongoDBCollectionParameters The parameters to provide for the current MongoDB Collection. (required)
     * @return ApiResponse&lt;MongoDBCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB Collection create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The MongoDB Collection create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MongoDBCollection> databaseAccountsCreateUpdateMongoDBCollectionWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, MongoDBCollectionCreateUpdateParameters createUpdateMongoDBCollectionParameters) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsCreateUpdateMongoDBCollectionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, createUpdateMongoDBCollectionParameters, null);
        Type localVarReturnType = new TypeToken<MongoDBCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update an Azure Cosmos DB MongoDB Collection
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateMongoDBCollectionParameters The parameters to provide for the current MongoDB Collection. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB Collection create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The MongoDB Collection create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsCreateUpdateMongoDBCollectionAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, MongoDBCollectionCreateUpdateParameters createUpdateMongoDBCollectionParameters, final ApiCallback<MongoDBCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsCreateUpdateMongoDBCollectionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, createUpdateMongoDBCollectionParameters, _callback);
        Type localVarReturnType = new TypeToken<MongoDBCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsCreateUpdateMongoDBDatabase
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateMongoDBDatabaseParameters The parameters to provide for the current MongoDB database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB database create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The MongoDB database create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsCreateUpdateMongoDBDatabaseCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, MongoDBDatabaseCreateUpdateParameters createUpdateMongoDBDatabaseParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdateMongoDBDatabaseParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases/{databaseName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsCreateUpdateMongoDBDatabaseValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, MongoDBDatabaseCreateUpdateParameters createUpdateMongoDBDatabaseParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsCreateUpdateMongoDBDatabase(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsCreateUpdateMongoDBDatabase(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsCreateUpdateMongoDBDatabase(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsCreateUpdateMongoDBDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsCreateUpdateMongoDBDatabase(Async)");
        }

        // verify the required parameter 'createUpdateMongoDBDatabaseParameters' is set
        if (createUpdateMongoDBDatabaseParameters == null) {
            throw new ApiException("Missing the required parameter 'createUpdateMongoDBDatabaseParameters' when calling databaseAccountsCreateUpdateMongoDBDatabase(Async)");
        }

        return databaseAccountsCreateUpdateMongoDBDatabaseCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateMongoDBDatabaseParameters, _callback);

    }

    /**
     * 
     * Create or updates Azure Cosmos DB MongoDB database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateMongoDBDatabaseParameters The parameters to provide for the current MongoDB database. (required)
     * @return MongoDBDatabase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB database create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The MongoDB database create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public MongoDBDatabase databaseAccountsCreateUpdateMongoDBDatabase(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, MongoDBDatabaseCreateUpdateParameters createUpdateMongoDBDatabaseParameters) throws ApiException {
        ApiResponse<MongoDBDatabase> localVarResp = databaseAccountsCreateUpdateMongoDBDatabaseWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateMongoDBDatabaseParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or updates Azure Cosmos DB MongoDB database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateMongoDBDatabaseParameters The parameters to provide for the current MongoDB database. (required)
     * @return ApiResponse&lt;MongoDBDatabase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB database create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The MongoDB database create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MongoDBDatabase> databaseAccountsCreateUpdateMongoDBDatabaseWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, MongoDBDatabaseCreateUpdateParameters createUpdateMongoDBDatabaseParameters) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsCreateUpdateMongoDBDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateMongoDBDatabaseParameters, null);
        Type localVarReturnType = new TypeToken<MongoDBDatabase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or updates Azure Cosmos DB MongoDB database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateMongoDBDatabaseParameters The parameters to provide for the current MongoDB database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB database create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The MongoDB database create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsCreateUpdateMongoDBDatabaseAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, MongoDBDatabaseCreateUpdateParameters createUpdateMongoDBDatabaseParameters, final ApiCallback<MongoDBDatabase> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsCreateUpdateMongoDBDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateMongoDBDatabaseParameters, _callback);
        Type localVarReturnType = new TypeToken<MongoDBDatabase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsCreateUpdateSqlContainer
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateSqlContainerParameters The parameters to provide for the current SQL container. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL container create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The SQL container create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsCreateUpdateSqlContainerCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, SqlContainerCreateUpdateParameters createUpdateSqlContainerParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdateSqlContainerParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseName}/containers/{containerName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsCreateUpdateSqlContainerValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, SqlContainerCreateUpdateParameters createUpdateSqlContainerParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsCreateUpdateSqlContainer(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsCreateUpdateSqlContainer(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsCreateUpdateSqlContainer(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsCreateUpdateSqlContainer(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling databaseAccountsCreateUpdateSqlContainer(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsCreateUpdateSqlContainer(Async)");
        }

        // verify the required parameter 'createUpdateSqlContainerParameters' is set
        if (createUpdateSqlContainerParameters == null) {
            throw new ApiException("Missing the required parameter 'createUpdateSqlContainerParameters' when calling databaseAccountsCreateUpdateSqlContainer(Async)");
        }

        return databaseAccountsCreateUpdateSqlContainerCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, createUpdateSqlContainerParameters, _callback);

    }

    /**
     * 
     * Create or update an Azure Cosmos DB SQL container
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateSqlContainerParameters The parameters to provide for the current SQL container. (required)
     * @return SqlContainer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL container create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The SQL container create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public SqlContainer databaseAccountsCreateUpdateSqlContainer(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, SqlContainerCreateUpdateParameters createUpdateSqlContainerParameters) throws ApiException {
        ApiResponse<SqlContainer> localVarResp = databaseAccountsCreateUpdateSqlContainerWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, createUpdateSqlContainerParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update an Azure Cosmos DB SQL container
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateSqlContainerParameters The parameters to provide for the current SQL container. (required)
     * @return ApiResponse&lt;SqlContainer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL container create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The SQL container create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SqlContainer> databaseAccountsCreateUpdateSqlContainerWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, SqlContainerCreateUpdateParameters createUpdateSqlContainerParameters) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsCreateUpdateSqlContainerValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, createUpdateSqlContainerParameters, null);
        Type localVarReturnType = new TypeToken<SqlContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update an Azure Cosmos DB SQL container
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateSqlContainerParameters The parameters to provide for the current SQL container. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL container create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The SQL container create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsCreateUpdateSqlContainerAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, SqlContainerCreateUpdateParameters createUpdateSqlContainerParameters, final ApiCallback<SqlContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsCreateUpdateSqlContainerValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, createUpdateSqlContainerParameters, _callback);
        Type localVarReturnType = new TypeToken<SqlContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsCreateUpdateSqlDatabase
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateSqlDatabaseParameters The parameters to provide for the current SQL database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL database create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The SQL database create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsCreateUpdateSqlDatabaseCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, SqlDatabaseCreateUpdateParameters createUpdateSqlDatabaseParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdateSqlDatabaseParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsCreateUpdateSqlDatabaseValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, SqlDatabaseCreateUpdateParameters createUpdateSqlDatabaseParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsCreateUpdateSqlDatabase(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsCreateUpdateSqlDatabase(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsCreateUpdateSqlDatabase(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsCreateUpdateSqlDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsCreateUpdateSqlDatabase(Async)");
        }

        // verify the required parameter 'createUpdateSqlDatabaseParameters' is set
        if (createUpdateSqlDatabaseParameters == null) {
            throw new ApiException("Missing the required parameter 'createUpdateSqlDatabaseParameters' when calling databaseAccountsCreateUpdateSqlDatabase(Async)");
        }

        return databaseAccountsCreateUpdateSqlDatabaseCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateSqlDatabaseParameters, _callback);

    }

    /**
     * 
     * Create or update an Azure Cosmos DB SQL database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateSqlDatabaseParameters The parameters to provide for the current SQL database. (required)
     * @return SqlDatabase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL database create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The SQL database create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public SqlDatabase databaseAccountsCreateUpdateSqlDatabase(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, SqlDatabaseCreateUpdateParameters createUpdateSqlDatabaseParameters) throws ApiException {
        ApiResponse<SqlDatabase> localVarResp = databaseAccountsCreateUpdateSqlDatabaseWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateSqlDatabaseParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update an Azure Cosmos DB SQL database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateSqlDatabaseParameters The parameters to provide for the current SQL database. (required)
     * @return ApiResponse&lt;SqlDatabase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL database create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The SQL database create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SqlDatabase> databaseAccountsCreateUpdateSqlDatabaseWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, SqlDatabaseCreateUpdateParameters createUpdateSqlDatabaseParameters) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsCreateUpdateSqlDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateSqlDatabaseParameters, null);
        Type localVarReturnType = new TypeToken<SqlDatabase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update an Azure Cosmos DB SQL database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateSqlDatabaseParameters The parameters to provide for the current SQL database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL database create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The SQL database create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsCreateUpdateSqlDatabaseAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, SqlDatabaseCreateUpdateParameters createUpdateSqlDatabaseParameters, final ApiCallback<SqlDatabase> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsCreateUpdateSqlDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateSqlDatabaseParameters, _callback);
        Type localVarReturnType = new TypeToken<SqlDatabase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsCreateUpdateTable
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateTableParameters The parameters to provide for the current Table. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Table create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Table create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsCreateUpdateTableCall(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, TableCreateUpdateParameters createUpdateTableParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdateTableParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/table/tables/{tableName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsCreateUpdateTableValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, TableCreateUpdateParameters createUpdateTableParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsCreateUpdateTable(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsCreateUpdateTable(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsCreateUpdateTable(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling databaseAccountsCreateUpdateTable(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsCreateUpdateTable(Async)");
        }

        // verify the required parameter 'createUpdateTableParameters' is set
        if (createUpdateTableParameters == null) {
            throw new ApiException("Missing the required parameter 'createUpdateTableParameters' when calling databaseAccountsCreateUpdateTable(Async)");
        }

        return databaseAccountsCreateUpdateTableCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, createUpdateTableParameters, _callback);

    }

    /**
     * 
     * Create or update an Azure Cosmos DB Table
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateTableParameters The parameters to provide for the current Table. (required)
     * @return Table
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Table create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Table create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public Table databaseAccountsCreateUpdateTable(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, TableCreateUpdateParameters createUpdateTableParameters) throws ApiException {
        ApiResponse<Table> localVarResp = databaseAccountsCreateUpdateTableWithHttpInfo(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, createUpdateTableParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update an Azure Cosmos DB Table
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateTableParameters The parameters to provide for the current Table. (required)
     * @return ApiResponse&lt;Table&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Table create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Table create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Table> databaseAccountsCreateUpdateTableWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, TableCreateUpdateParameters createUpdateTableParameters) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsCreateUpdateTableValidateBeforeCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, createUpdateTableParameters, null);
        Type localVarReturnType = new TypeToken<Table>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update an Azure Cosmos DB Table
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param createUpdateTableParameters The parameters to provide for the current Table. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Table create or update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Table create or update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsCreateUpdateTableAsync(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, TableCreateUpdateParameters createUpdateTableParameters, final ApiCallback<Table> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsCreateUpdateTableValidateBeforeCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, createUpdateTableParameters, _callback);
        Type localVarReturnType = new TypeToken<Table>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsDelete
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The database account delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified account does not exist in the subscription. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsDeleteCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsDelete(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsDelete(Async)");
        }

        return databaseAccountsDeleteCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The database account delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified account does not exist in the subscription. </td><td>  -  </td></tr>
     </table>
     */
    public void databaseAccountsDelete(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        databaseAccountsDeleteWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The database account delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified account does not exist in the subscription. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> databaseAccountsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The database account delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified account does not exist in the subscription. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsDeleteAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsDeleteCassandraKeyspace
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Cassandra keyspace delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Cassandra keyspace delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsDeleteCassandraKeyspaceCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "keyspaceName" + "}", localVarApiClient.escapeString(keyspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsDeleteCassandraKeyspaceValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsDeleteCassandraKeyspace(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsDeleteCassandraKeyspace(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsDeleteCassandraKeyspace(Async)");
        }

        // verify the required parameter 'keyspaceName' is set
        if (keyspaceName == null) {
            throw new ApiException("Missing the required parameter 'keyspaceName' when calling databaseAccountsDeleteCassandraKeyspace(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsDeleteCassandraKeyspace(Async)");
        }

        return databaseAccountsDeleteCassandraKeyspaceCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB Cassandra keyspace.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Cassandra keyspace delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Cassandra keyspace delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void databaseAccountsDeleteCassandraKeyspace(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion) throws ApiException {
        databaseAccountsDeleteCassandraKeyspaceWithHttpInfo(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion);
    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB Cassandra keyspace.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Cassandra keyspace delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Cassandra keyspace delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> databaseAccountsDeleteCassandraKeyspaceWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsDeleteCassandraKeyspaceValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing Azure Cosmos DB Cassandra keyspace.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Cassandra keyspace delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Cassandra keyspace delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsDeleteCassandraKeyspaceAsync(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsDeleteCassandraKeyspaceValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsDeleteCassandraTable
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Cassandra table delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Cassandra table delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsDeleteCassandraTableCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceName}/tables/{tableName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "keyspaceName" + "}", localVarApiClient.escapeString(keyspaceName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsDeleteCassandraTableValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsDeleteCassandraTable(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsDeleteCassandraTable(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsDeleteCassandraTable(Async)");
        }

        // verify the required parameter 'keyspaceName' is set
        if (keyspaceName == null) {
            throw new ApiException("Missing the required parameter 'keyspaceName' when calling databaseAccountsDeleteCassandraTable(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling databaseAccountsDeleteCassandraTable(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsDeleteCassandraTable(Async)");
        }

        return databaseAccountsDeleteCassandraTableCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB Cassandra table.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Cassandra table delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Cassandra table delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void databaseAccountsDeleteCassandraTable(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion) throws ApiException {
        databaseAccountsDeleteCassandraTableWithHttpInfo(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion);
    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB Cassandra table.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Cassandra table delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Cassandra table delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> databaseAccountsDeleteCassandraTableWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsDeleteCassandraTableValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing Azure Cosmos DB Cassandra table.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Cassandra table delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Cassandra table delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsDeleteCassandraTableAsync(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsDeleteCassandraTableValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsDeleteGremlinDatabase
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Gremlin database delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Gremlin database delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsDeleteGremlinDatabaseCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsDeleteGremlinDatabaseValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsDeleteGremlinDatabase(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsDeleteGremlinDatabase(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsDeleteGremlinDatabase(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsDeleteGremlinDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsDeleteGremlinDatabase(Async)");
        }

        return databaseAccountsDeleteGremlinDatabaseCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB Gremlin database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Gremlin database delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Gremlin database delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void databaseAccountsDeleteGremlinDatabase(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        databaseAccountsDeleteGremlinDatabaseWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB Gremlin database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Gremlin database delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Gremlin database delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> databaseAccountsDeleteGremlinDatabaseWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsDeleteGremlinDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing Azure Cosmos DB Gremlin database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Gremlin database delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Gremlin database delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsDeleteGremlinDatabaseAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsDeleteGremlinDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsDeleteGremlinGraph
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Gremlin graph delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Gremlin graph delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsDeleteGremlinGraphCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseName}/graphs/{graphName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "graphName" + "}", localVarApiClient.escapeString(graphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsDeleteGremlinGraphValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsDeleteGremlinGraph(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsDeleteGremlinGraph(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsDeleteGremlinGraph(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsDeleteGremlinGraph(Async)");
        }

        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling databaseAccountsDeleteGremlinGraph(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsDeleteGremlinGraph(Async)");
        }

        return databaseAccountsDeleteGremlinGraphCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB Gremlin graph.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Gremlin graph delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Gremlin graph delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void databaseAccountsDeleteGremlinGraph(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion) throws ApiException {
        databaseAccountsDeleteGremlinGraphWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion);
    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB Gremlin graph.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Gremlin graph delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Gremlin graph delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> databaseAccountsDeleteGremlinGraphWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsDeleteGremlinGraphValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing Azure Cosmos DB Gremlin graph.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Gremlin graph delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Gremlin graph delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsDeleteGremlinGraphAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsDeleteGremlinGraphValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsDeleteMongoDBCollection
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The MongoDB collection delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The MongoDB collection delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsDeleteMongoDBCollectionCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases/{databaseName}/collections/{collectionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "collectionName" + "}", localVarApiClient.escapeString(collectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsDeleteMongoDBCollectionValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsDeleteMongoDBCollection(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsDeleteMongoDBCollection(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsDeleteMongoDBCollection(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsDeleteMongoDBCollection(Async)");
        }

        // verify the required parameter 'collectionName' is set
        if (collectionName == null) {
            throw new ApiException("Missing the required parameter 'collectionName' when calling databaseAccountsDeleteMongoDBCollection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsDeleteMongoDBCollection(Async)");
        }

        return databaseAccountsDeleteMongoDBCollectionCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB MongoDB Collection.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The MongoDB collection delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The MongoDB collection delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void databaseAccountsDeleteMongoDBCollection(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion) throws ApiException {
        databaseAccountsDeleteMongoDBCollectionWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion);
    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB MongoDB Collection.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The MongoDB collection delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The MongoDB collection delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> databaseAccountsDeleteMongoDBCollectionWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsDeleteMongoDBCollectionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing Azure Cosmos DB MongoDB Collection.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The MongoDB collection delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The MongoDB collection delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsDeleteMongoDBCollectionAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsDeleteMongoDBCollectionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsDeleteMongoDBDatabase
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The MongoDB database delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The MongoDB database delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsDeleteMongoDBDatabaseCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases/{databaseName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsDeleteMongoDBDatabaseValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsDeleteMongoDBDatabase(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsDeleteMongoDBDatabase(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsDeleteMongoDBDatabase(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsDeleteMongoDBDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsDeleteMongoDBDatabase(Async)");
        }

        return databaseAccountsDeleteMongoDBDatabaseCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB MongoDB database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The MongoDB database delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The MongoDB database delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void databaseAccountsDeleteMongoDBDatabase(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        databaseAccountsDeleteMongoDBDatabaseWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB MongoDB database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The MongoDB database delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The MongoDB database delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> databaseAccountsDeleteMongoDBDatabaseWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsDeleteMongoDBDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing Azure Cosmos DB MongoDB database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The MongoDB database delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The MongoDB database delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsDeleteMongoDBDatabaseAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsDeleteMongoDBDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsDeleteSqlContainer
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The SQL container delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The SQL container delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsDeleteSqlContainerCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseName}/containers/{containerName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsDeleteSqlContainerValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsDeleteSqlContainer(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsDeleteSqlContainer(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsDeleteSqlContainer(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsDeleteSqlContainer(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling databaseAccountsDeleteSqlContainer(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsDeleteSqlContainer(Async)");
        }

        return databaseAccountsDeleteSqlContainerCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB SQL container.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The SQL container delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The SQL container delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void databaseAccountsDeleteSqlContainer(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion) throws ApiException {
        databaseAccountsDeleteSqlContainerWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion);
    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB SQL container.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The SQL container delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The SQL container delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> databaseAccountsDeleteSqlContainerWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsDeleteSqlContainerValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing Azure Cosmos DB SQL container.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The SQL container delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The SQL container delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsDeleteSqlContainerAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsDeleteSqlContainerValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsDeleteSqlDatabase
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The SQL database delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The SQL database delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsDeleteSqlDatabaseCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsDeleteSqlDatabaseValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsDeleteSqlDatabase(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsDeleteSqlDatabase(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsDeleteSqlDatabase(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsDeleteSqlDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsDeleteSqlDatabase(Async)");
        }

        return databaseAccountsDeleteSqlDatabaseCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB SQL database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The SQL database delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The SQL database delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void databaseAccountsDeleteSqlDatabase(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        databaseAccountsDeleteSqlDatabaseWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB SQL database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The SQL database delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The SQL database delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> databaseAccountsDeleteSqlDatabaseWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsDeleteSqlDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing Azure Cosmos DB SQL database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The SQL database delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The SQL database delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsDeleteSqlDatabaseAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsDeleteSqlDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsDeleteTable
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Table delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Table delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsDeleteTableCall(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/table/tables/{tableName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsDeleteTableValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsDeleteTable(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsDeleteTable(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsDeleteTable(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling databaseAccountsDeleteTable(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsDeleteTable(Async)");
        }

        return databaseAccountsDeleteTableCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB Table.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Table delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Table delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void databaseAccountsDeleteTable(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion) throws ApiException {
        databaseAccountsDeleteTableWithHttpInfo(subscriptionId, resourceGroupName, accountName, tableName, apiVersion);
    }

    /**
     * 
     * Deletes an existing Azure Cosmos DB Table.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Table delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Table delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> databaseAccountsDeleteTableWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsDeleteTableValidateBeforeCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing Azure Cosmos DB Table.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The Table delete operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Table delete operation was completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsDeleteTableAsync(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsDeleteTableValidateBeforeCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsFailoverPriorityChange
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param failoverParameters The new failover policies for the database account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The failover policy change operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsFailoverPriorityChangeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, FailoverPolicies failoverParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = failoverParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/failoverPriorityChange"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsFailoverPriorityChangeValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, FailoverPolicies failoverParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsFailoverPriorityChange(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsFailoverPriorityChange(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsFailoverPriorityChange(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsFailoverPriorityChange(Async)");
        }

        // verify the required parameter 'failoverParameters' is set
        if (failoverParameters == null) {
            throw new ApiException("Missing the required parameter 'failoverParameters' when calling databaseAccountsFailoverPriorityChange(Async)");
        }

        return databaseAccountsFailoverPriorityChangeCall(subscriptionId, resourceGroupName, accountName, apiVersion, failoverParameters, _callback);

    }

    /**
     * 
     * Changes the failover priority for the Azure Cosmos DB database account. A failover priority of 0 indicates a write region. The maximum value for a failover priority &#x3D; (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param failoverParameters The new failover policies for the database account. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The failover policy change operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void databaseAccountsFailoverPriorityChange(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, FailoverPolicies failoverParameters) throws ApiException {
        databaseAccountsFailoverPriorityChangeWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion, failoverParameters);
    }

    /**
     * 
     * Changes the failover priority for the Azure Cosmos DB database account. A failover priority of 0 indicates a write region. The maximum value for a failover priority &#x3D; (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param failoverParameters The new failover policies for the database account. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The failover policy change operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> databaseAccountsFailoverPriorityChangeWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, FailoverPolicies failoverParameters) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsFailoverPriorityChangeValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, failoverParameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Changes the failover priority for the Azure Cosmos DB database account. A failover priority of 0 indicates a write region. The maximum value for a failover priority &#x3D; (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param failoverParameters The new failover policies for the database account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The failover policy change operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsFailoverPriorityChangeAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, FailoverPolicies failoverParameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsFailoverPriorityChangeValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, failoverParameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsGet
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The database account properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGet(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsGet(Async)");
        }

        return databaseAccountsGetCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves the properties of an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return DatabaseAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The database account properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseAccount databaseAccountsGet(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        ApiResponse<DatabaseAccount> localVarResp = databaseAccountsGetWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the properties of an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;DatabaseAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The database account properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseAccount> databaseAccountsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DatabaseAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the properties of an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The database account properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<DatabaseAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DatabaseAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsGetCassandraKeyspace
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra keyspace property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetCassandraKeyspaceCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "keyspaceName" + "}", localVarApiClient.escapeString(keyspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsGetCassandraKeyspaceValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetCassandraKeyspace(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetCassandraKeyspace(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsGetCassandraKeyspace(Async)");
        }

        // verify the required parameter 'keyspaceName' is set
        if (keyspaceName == null) {
            throw new ApiException("Missing the required parameter 'keyspaceName' when calling databaseAccountsGetCassandraKeyspace(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsGetCassandraKeyspace(Async)");
        }

        return databaseAccountsGetCassandraKeyspaceCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the Cassandra keyspaces under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return CassandraKeyspace
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra keyspace property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public CassandraKeyspace databaseAccountsGetCassandraKeyspace(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion) throws ApiException {
        ApiResponse<CassandraKeyspace> localVarResp = databaseAccountsGetCassandraKeyspaceWithHttpInfo(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the Cassandra keyspaces under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;CassandraKeyspace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra keyspace property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CassandraKeyspace> databaseAccountsGetCassandraKeyspaceWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsGetCassandraKeyspaceValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, null);
        Type localVarReturnType = new TypeToken<CassandraKeyspace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the Cassandra keyspaces under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra keyspace property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetCassandraKeyspaceAsync(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, final ApiCallback<CassandraKeyspace> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsGetCassandraKeyspaceValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<CassandraKeyspace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsGetCassandraKeyspaceThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra Keyspace was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetCassandraKeyspaceThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceName}/settings/throughput"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "keyspaceName" + "}", localVarApiClient.escapeString(keyspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsGetCassandraKeyspaceThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetCassandraKeyspaceThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetCassandraKeyspaceThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsGetCassandraKeyspaceThroughput(Async)");
        }

        // verify the required parameter 'keyspaceName' is set
        if (keyspaceName == null) {
            throw new ApiException("Missing the required parameter 'keyspaceName' when calling databaseAccountsGetCassandraKeyspaceThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsGetCassandraKeyspaceThroughput(Async)");
        }

        return databaseAccountsGetCassandraKeyspaceThroughputCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the RUs per second of the Cassandra Keyspace under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return Throughput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra Keyspace was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public Throughput databaseAccountsGetCassandraKeyspaceThroughput(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion) throws ApiException {
        ApiResponse<Throughput> localVarResp = databaseAccountsGetCassandraKeyspaceThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the RUs per second of the Cassandra Keyspace under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;Throughput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra Keyspace was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Throughput> databaseAccountsGetCassandraKeyspaceThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsGetCassandraKeyspaceThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the RUs per second of the Cassandra Keyspace under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra Keyspace was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetCassandraKeyspaceThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, final ApiCallback<Throughput> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsGetCassandraKeyspaceThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsGetCassandraTable
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra table property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetCassandraTableCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceName}/tables/{tableName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "keyspaceName" + "}", localVarApiClient.escapeString(keyspaceName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsGetCassandraTableValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetCassandraTable(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetCassandraTable(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsGetCassandraTable(Async)");
        }

        // verify the required parameter 'keyspaceName' is set
        if (keyspaceName == null) {
            throw new ApiException("Missing the required parameter 'keyspaceName' when calling databaseAccountsGetCassandraTable(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling databaseAccountsGetCassandraTable(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsGetCassandraTable(Async)");
        }

        return databaseAccountsGetCassandraTableCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the Cassandra table under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return CassandraTable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra table property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public CassandraTable databaseAccountsGetCassandraTable(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion) throws ApiException {
        ApiResponse<CassandraTable> localVarResp = databaseAccountsGetCassandraTableWithHttpInfo(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the Cassandra table under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;CassandraTable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra table property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CassandraTable> databaseAccountsGetCassandraTableWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsGetCassandraTableValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, null);
        Type localVarReturnType = new TypeToken<CassandraTable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the Cassandra table under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra table property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetCassandraTableAsync(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, final ApiCallback<CassandraTable> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsGetCassandraTableValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<CassandraTable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsGetCassandraTableThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra table was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetCassandraTableThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceName}/tables/{tableName}/settings/throughput"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "keyspaceName" + "}", localVarApiClient.escapeString(keyspaceName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsGetCassandraTableThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetCassandraTableThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetCassandraTableThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsGetCassandraTableThroughput(Async)");
        }

        // verify the required parameter 'keyspaceName' is set
        if (keyspaceName == null) {
            throw new ApiException("Missing the required parameter 'keyspaceName' when calling databaseAccountsGetCassandraTableThroughput(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling databaseAccountsGetCassandraTableThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsGetCassandraTableThroughput(Async)");
        }

        return databaseAccountsGetCassandraTableThroughputCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the RUs per second of the Cassandra table under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return Throughput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra table was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public Throughput databaseAccountsGetCassandraTableThroughput(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion) throws ApiException {
        ApiResponse<Throughput> localVarResp = databaseAccountsGetCassandraTableThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the RUs per second of the Cassandra table under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;Throughput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra table was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Throughput> databaseAccountsGetCassandraTableThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsGetCassandraTableThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the RUs per second of the Cassandra table under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra table was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetCassandraTableThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, final ApiCallback<Throughput> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsGetCassandraTableThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsGetGremlinDatabase
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin database property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetGremlinDatabaseCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsGetGremlinDatabaseValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetGremlinDatabase(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetGremlinDatabase(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsGetGremlinDatabase(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsGetGremlinDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsGetGremlinDatabase(Async)");
        }

        return databaseAccountsGetGremlinDatabaseCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the Gremlin databases under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return GremlinDatabase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin database property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public GremlinDatabase databaseAccountsGetGremlinDatabase(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        ApiResponse<GremlinDatabase> localVarResp = databaseAccountsGetGremlinDatabaseWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the Gremlin databases under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;GremlinDatabase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin database property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GremlinDatabase> databaseAccountsGetGremlinDatabaseWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsGetGremlinDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, null);
        Type localVarReturnType = new TypeToken<GremlinDatabase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the Gremlin databases under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin database property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetGremlinDatabaseAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback<GremlinDatabase> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsGetGremlinDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<GremlinDatabase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsGetGremlinDatabaseThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin database was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetGremlinDatabaseThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseName}/settings/throughput"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsGetGremlinDatabaseThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetGremlinDatabaseThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetGremlinDatabaseThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsGetGremlinDatabaseThroughput(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsGetGremlinDatabaseThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsGetGremlinDatabaseThroughput(Async)");
        }

        return databaseAccountsGetGremlinDatabaseThroughputCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the RUs per second of the Gremlin database under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return Throughput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin database was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public Throughput databaseAccountsGetGremlinDatabaseThroughput(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        ApiResponse<Throughput> localVarResp = databaseAccountsGetGremlinDatabaseThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the RUs per second of the Gremlin database under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;Throughput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin database was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Throughput> databaseAccountsGetGremlinDatabaseThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsGetGremlinDatabaseThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the RUs per second of the Gremlin database under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin database was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetGremlinDatabaseThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback<Throughput> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsGetGremlinDatabaseThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsGetGremlinGraph
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin graph property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetGremlinGraphCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseName}/graphs/{graphName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "graphName" + "}", localVarApiClient.escapeString(graphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsGetGremlinGraphValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetGremlinGraph(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetGremlinGraph(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsGetGremlinGraph(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsGetGremlinGraph(Async)");
        }

        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling databaseAccountsGetGremlinGraph(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsGetGremlinGraph(Async)");
        }

        return databaseAccountsGetGremlinGraphCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the Gremlin graph under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return GremlinGraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin graph property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public GremlinGraph databaseAccountsGetGremlinGraph(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion) throws ApiException {
        ApiResponse<GremlinGraph> localVarResp = databaseAccountsGetGremlinGraphWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the Gremlin graph under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;GremlinGraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin graph property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GremlinGraph> databaseAccountsGetGremlinGraphWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsGetGremlinGraphValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, null);
        Type localVarReturnType = new TypeToken<GremlinGraph>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the Gremlin graph under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin graph property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetGremlinGraphAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, final ApiCallback<GremlinGraph> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsGetGremlinGraphValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<GremlinGraph>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsGetGremlinGraphThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin graph was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetGremlinGraphThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseName}/graphs/{graphName}/settings/throughput"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "graphName" + "}", localVarApiClient.escapeString(graphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsGetGremlinGraphThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetGremlinGraphThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetGremlinGraphThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsGetGremlinGraphThroughput(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsGetGremlinGraphThroughput(Async)");
        }

        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling databaseAccountsGetGremlinGraphThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsGetGremlinGraphThroughput(Async)");
        }

        return databaseAccountsGetGremlinGraphThroughputCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the Gremlin graph throughput under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return Throughput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin graph was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public Throughput databaseAccountsGetGremlinGraphThroughput(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion) throws ApiException {
        ApiResponse<Throughput> localVarResp = databaseAccountsGetGremlinGraphThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the Gremlin graph throughput under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;Throughput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin graph was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Throughput> databaseAccountsGetGremlinGraphThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsGetGremlinGraphThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the Gremlin graph throughput under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin graph was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetGremlinGraphThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, final ApiCallback<Throughput> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsGetGremlinGraphThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsGetMongoDBCollection
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB collection property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetMongoDBCollectionCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases/{databaseName}/collections/{collectionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "collectionName" + "}", localVarApiClient.escapeString(collectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsGetMongoDBCollectionValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetMongoDBCollection(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetMongoDBCollection(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsGetMongoDBCollection(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsGetMongoDBCollection(Async)");
        }

        // verify the required parameter 'collectionName' is set
        if (collectionName == null) {
            throw new ApiException("Missing the required parameter 'collectionName' when calling databaseAccountsGetMongoDBCollection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsGetMongoDBCollection(Async)");
        }

        return databaseAccountsGetMongoDBCollectionCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the MongoDB collection under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return MongoDBCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB collection property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public MongoDBCollection databaseAccountsGetMongoDBCollection(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion) throws ApiException {
        ApiResponse<MongoDBCollection> localVarResp = databaseAccountsGetMongoDBCollectionWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the MongoDB collection under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;MongoDBCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB collection property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MongoDBCollection> databaseAccountsGetMongoDBCollectionWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsGetMongoDBCollectionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<MongoDBCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the MongoDB collection under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB collection property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetMongoDBCollectionAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, final ApiCallback<MongoDBCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsGetMongoDBCollectionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MongoDBCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsGetMongoDBCollectionThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB collection was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetMongoDBCollectionThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases/{databaseName}/collections/{collectionName}/settings/throughput"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "collectionName" + "}", localVarApiClient.escapeString(collectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsGetMongoDBCollectionThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetMongoDBCollectionThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetMongoDBCollectionThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsGetMongoDBCollectionThroughput(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsGetMongoDBCollectionThroughput(Async)");
        }

        // verify the required parameter 'collectionName' is set
        if (collectionName == null) {
            throw new ApiException("Missing the required parameter 'collectionName' when calling databaseAccountsGetMongoDBCollectionThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsGetMongoDBCollectionThroughput(Async)");
        }

        return databaseAccountsGetMongoDBCollectionThroughputCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the RUs per second of the MongoDB collection under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return Throughput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB collection was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public Throughput databaseAccountsGetMongoDBCollectionThroughput(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion) throws ApiException {
        ApiResponse<Throughput> localVarResp = databaseAccountsGetMongoDBCollectionThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the RUs per second of the MongoDB collection under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;Throughput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB collection was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Throughput> databaseAccountsGetMongoDBCollectionThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsGetMongoDBCollectionThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the RUs per second of the MongoDB collection under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB collection was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetMongoDBCollectionThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, final ApiCallback<Throughput> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsGetMongoDBCollectionThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsGetMongoDBDatabase
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB database property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetMongoDBDatabaseCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases/{databaseName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsGetMongoDBDatabaseValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetMongoDBDatabase(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetMongoDBDatabase(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsGetMongoDBDatabase(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsGetMongoDBDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsGetMongoDBDatabase(Async)");
        }

        return databaseAccountsGetMongoDBDatabaseCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the MongoDB databases under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return MongoDBDatabase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB database property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public MongoDBDatabase databaseAccountsGetMongoDBDatabase(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        ApiResponse<MongoDBDatabase> localVarResp = databaseAccountsGetMongoDBDatabaseWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the MongoDB databases under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;MongoDBDatabase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB database property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MongoDBDatabase> databaseAccountsGetMongoDBDatabaseWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsGetMongoDBDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, null);
        Type localVarReturnType = new TypeToken<MongoDBDatabase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the MongoDB databases under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB database property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetMongoDBDatabaseAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback<MongoDBDatabase> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsGetMongoDBDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MongoDBDatabase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsGetMongoDBDatabaseThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB database was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetMongoDBDatabaseThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases/{databaseName}/settings/throughput"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsGetMongoDBDatabaseThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetMongoDBDatabaseThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetMongoDBDatabaseThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsGetMongoDBDatabaseThroughput(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsGetMongoDBDatabaseThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsGetMongoDBDatabaseThroughput(Async)");
        }

        return databaseAccountsGetMongoDBDatabaseThroughputCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the RUs per second of the MongoDB database under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return Throughput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB database was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public Throughput databaseAccountsGetMongoDBDatabaseThroughput(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        ApiResponse<Throughput> localVarResp = databaseAccountsGetMongoDBDatabaseThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the RUs per second of the MongoDB database under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;Throughput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB database was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Throughput> databaseAccountsGetMongoDBDatabaseThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsGetMongoDBDatabaseThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the RUs per second of the MongoDB database under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB database was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetMongoDBDatabaseThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback<Throughput> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsGetMongoDBDatabaseThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsGetReadOnlyKeys
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetReadOnlyKeysCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/readonlykeys"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsGetReadOnlyKeysValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetReadOnlyKeys(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetReadOnlyKeys(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsGetReadOnlyKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsGetReadOnlyKeys(Async)");
        }

        return databaseAccountsGetReadOnlyKeysCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the read-only access keys for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return DatabaseAccountListReadOnlyKeysResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseAccountListReadOnlyKeysResult databaseAccountsGetReadOnlyKeys(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        ApiResponse<DatabaseAccountListReadOnlyKeysResult> localVarResp = databaseAccountsGetReadOnlyKeysWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the read-only access keys for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;DatabaseAccountListReadOnlyKeysResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseAccountListReadOnlyKeysResult> databaseAccountsGetReadOnlyKeysWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsGetReadOnlyKeysValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DatabaseAccountListReadOnlyKeysResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the read-only access keys for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetReadOnlyKeysAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<DatabaseAccountListReadOnlyKeysResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsGetReadOnlyKeysValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DatabaseAccountListReadOnlyKeysResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsGetSqlContainer
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL container property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetSqlContainerCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseName}/containers/{containerName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsGetSqlContainerValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetSqlContainer(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetSqlContainer(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsGetSqlContainer(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsGetSqlContainer(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling databaseAccountsGetSqlContainer(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsGetSqlContainer(Async)");
        }

        return databaseAccountsGetSqlContainerCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the SQL container under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return SqlContainer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL container property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public SqlContainer databaseAccountsGetSqlContainer(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion) throws ApiException {
        ApiResponse<SqlContainer> localVarResp = databaseAccountsGetSqlContainerWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the SQL container under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;SqlContainer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL container property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SqlContainer> databaseAccountsGetSqlContainerWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsGetSqlContainerValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, null);
        Type localVarReturnType = new TypeToken<SqlContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the SQL container under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL container property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetSqlContainerAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, final ApiCallback<SqlContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsGetSqlContainerValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SqlContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsGetSqlContainerThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL container was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetSqlContainerThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseName}/containers/{containerName}/settings/throughput"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsGetSqlContainerThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetSqlContainerThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetSqlContainerThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsGetSqlContainerThroughput(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsGetSqlContainerThroughput(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling databaseAccountsGetSqlContainerThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsGetSqlContainerThroughput(Async)");
        }

        return databaseAccountsGetSqlContainerThroughputCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the RUs per second of the SQL container under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return Throughput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL container was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public Throughput databaseAccountsGetSqlContainerThroughput(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion) throws ApiException {
        ApiResponse<Throughput> localVarResp = databaseAccountsGetSqlContainerThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the RUs per second of the SQL container under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;Throughput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL container was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Throughput> databaseAccountsGetSqlContainerThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsGetSqlContainerThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the RUs per second of the SQL container under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL container was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetSqlContainerThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, final ApiCallback<Throughput> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsGetSqlContainerThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsGetSqlDatabase
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL database property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetSqlDatabaseCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsGetSqlDatabaseValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetSqlDatabase(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetSqlDatabase(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsGetSqlDatabase(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsGetSqlDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsGetSqlDatabase(Async)");
        }

        return databaseAccountsGetSqlDatabaseCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the SQL database under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return SqlDatabase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL database property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public SqlDatabase databaseAccountsGetSqlDatabase(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        ApiResponse<SqlDatabase> localVarResp = databaseAccountsGetSqlDatabaseWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the SQL database under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;SqlDatabase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL database property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SqlDatabase> databaseAccountsGetSqlDatabaseWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsGetSqlDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, null);
        Type localVarReturnType = new TypeToken<SqlDatabase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the SQL database under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL database property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetSqlDatabaseAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback<SqlDatabase> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsGetSqlDatabaseValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SqlDatabase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsGetSqlDatabaseThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL database was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetSqlDatabaseThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseName}/settings/throughput"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsGetSqlDatabaseThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetSqlDatabaseThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetSqlDatabaseThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsGetSqlDatabaseThroughput(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsGetSqlDatabaseThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsGetSqlDatabaseThroughput(Async)");
        }

        return databaseAccountsGetSqlDatabaseThroughputCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the RUs per second of the SQL database under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return Throughput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL database was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public Throughput databaseAccountsGetSqlDatabaseThroughput(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        ApiResponse<Throughput> localVarResp = databaseAccountsGetSqlDatabaseThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the RUs per second of the SQL database under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;Throughput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL database was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Throughput> databaseAccountsGetSqlDatabaseThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsGetSqlDatabaseThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the RUs per second of the SQL database under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL database was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetSqlDatabaseThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback<Throughput> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsGetSqlDatabaseThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsGetTable
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Table property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetTableCall(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/table/tables/{tableName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsGetTableValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetTable(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetTable(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsGetTable(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling databaseAccountsGetTable(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsGetTable(Async)");
        }

        return databaseAccountsGetTableCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the Tables under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return Table
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Table property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public Table databaseAccountsGetTable(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion) throws ApiException {
        ApiResponse<Table> localVarResp = databaseAccountsGetTableWithHttpInfo(subscriptionId, resourceGroupName, accountName, tableName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the Tables under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;Table&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Table property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Table> databaseAccountsGetTableWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsGetTableValidateBeforeCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Table>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the Tables under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Table property was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetTableAsync(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, final ApiCallback<Table> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsGetTableValidateBeforeCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Table>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsGetTableThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Table was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetTableThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/table/tables/{tableName}/settings/throughput"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsGetTableThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetTableThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetTableThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsGetTableThroughput(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling databaseAccountsGetTableThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsGetTableThroughput(Async)");
        }

        return databaseAccountsGetTableThroughputCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the RUs per second of the Table under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return Throughput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Table was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public Throughput databaseAccountsGetTableThroughput(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion) throws ApiException {
        ApiResponse<Throughput> localVarResp = databaseAccountsGetTableThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, tableName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the RUs per second of the Table under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;Throughput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Table was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Throughput> databaseAccountsGetTableThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsGetTableThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the RUs per second of the Table under an existing Azure Cosmos DB database account with the provided name.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Table was retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsGetTableThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, final ApiCallback<Throughput> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsGetTableThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsList
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/databaseAccounts"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsListValidateBeforeCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsList(Async)");
        }

        return databaseAccountsListCall(apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Lists all the Azure Cosmos DB database accounts available under the subscription.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @return DatabaseAccountsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseAccountsListResult databaseAccountsList(String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<DatabaseAccountsListResult> localVarResp = databaseAccountsListWithHttpInfo(apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the Azure Cosmos DB database accounts available under the subscription.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @return ApiResponse&lt;DatabaseAccountsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseAccountsListResult> databaseAccountsListWithHttpInfo(String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsListValidateBeforeCall(apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<DatabaseAccountsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the Azure Cosmos DB database accounts available under the subscription.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListAsync(String apiVersion, String subscriptionId, final ApiCallback<DatabaseAccountsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsListValidateBeforeCall(apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<DatabaseAccountsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsListByResourceGroup
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListByResourceGroupCall(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsListByResourceGroupValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsListByResourceGroup(Async)");
        }

        return databaseAccountsListByResourceGroupCall(resourceGroupName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Lists all the Azure Cosmos DB database accounts available under the given resource group.
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @return DatabaseAccountsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseAccountsListResult databaseAccountsListByResourceGroup(String resourceGroupName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<DatabaseAccountsListResult> localVarResp = databaseAccountsListByResourceGroupWithHttpInfo(resourceGroupName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the Azure Cosmos DB database accounts available under the given resource group.
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @return ApiResponse&lt;DatabaseAccountsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseAccountsListResult> databaseAccountsListByResourceGroupWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsListByResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<DatabaseAccountsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the Azure Cosmos DB database accounts available under the given resource group.
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListByResourceGroupAsync(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback<DatabaseAccountsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsListByResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<DatabaseAccountsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsListCassandraKeyspaces
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra keyspace properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListCassandraKeyspacesCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsListCassandraKeyspacesValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsListCassandraKeyspaces(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListCassandraKeyspaces(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsListCassandraKeyspaces(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsListCassandraKeyspaces(Async)");
        }

        return databaseAccountsListCassandraKeyspacesCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return CassandraKeyspaceListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra keyspace properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public CassandraKeyspaceListResult databaseAccountsListCassandraKeyspaces(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        ApiResponse<CassandraKeyspaceListResult> localVarResp = databaseAccountsListCassandraKeyspacesWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;CassandraKeyspaceListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra keyspace properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CassandraKeyspaceListResult> databaseAccountsListCassandraKeyspacesWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsListCassandraKeyspacesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<CassandraKeyspaceListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra keyspace properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListCassandraKeyspacesAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<CassandraKeyspaceListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsListCassandraKeyspacesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<CassandraKeyspaceListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsListCassandraTables
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra table properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListCassandraTablesCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceName}/tables"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "keyspaceName" + "}", localVarApiClient.escapeString(keyspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsListCassandraTablesValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsListCassandraTables(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListCassandraTables(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsListCassandraTables(Async)");
        }

        // verify the required parameter 'keyspaceName' is set
        if (keyspaceName == null) {
            throw new ApiException("Missing the required parameter 'keyspaceName' when calling databaseAccountsListCassandraTables(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsListCassandraTables(Async)");
        }

        return databaseAccountsListCassandraTablesCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the Cassandra table under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return CassandraTableListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra table properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public CassandraTableListResult databaseAccountsListCassandraTables(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion) throws ApiException {
        ApiResponse<CassandraTableListResult> localVarResp = databaseAccountsListCassandraTablesWithHttpInfo(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the Cassandra table under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;CassandraTableListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra table properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CassandraTableListResult> databaseAccountsListCassandraTablesWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsListCassandraTablesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, null);
        Type localVarReturnType = new TypeToken<CassandraTableListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the Cassandra table under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cassandra table properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListCassandraTablesAsync(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, final ApiCallback<CassandraTableListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsListCassandraTablesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<CassandraTableListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsListConnectionStrings
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListConnectionStringsCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/listConnectionStrings"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsListConnectionStringsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsListConnectionStrings(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListConnectionStrings(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsListConnectionStrings(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsListConnectionStrings(Async)");
        }

        return databaseAccountsListConnectionStringsCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the connection strings for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return DatabaseAccountListConnectionStringsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseAccountListConnectionStringsResult databaseAccountsListConnectionStrings(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        ApiResponse<DatabaseAccountListConnectionStringsResult> localVarResp = databaseAccountsListConnectionStringsWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the connection strings for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;DatabaseAccountListConnectionStringsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseAccountListConnectionStringsResult> databaseAccountsListConnectionStringsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsListConnectionStringsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DatabaseAccountListConnectionStringsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the connection strings for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListConnectionStringsAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<DatabaseAccountListConnectionStringsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsListConnectionStringsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DatabaseAccountListConnectionStringsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsListGremlinDatabases
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin database properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListGremlinDatabasesCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsListGremlinDatabasesValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsListGremlinDatabases(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListGremlinDatabases(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsListGremlinDatabases(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsListGremlinDatabases(Async)");
        }

        return databaseAccountsListGremlinDatabasesCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the Gremlin databases under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return GremlinDatabaseListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin database properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public GremlinDatabaseListResult databaseAccountsListGremlinDatabases(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        ApiResponse<GremlinDatabaseListResult> localVarResp = databaseAccountsListGremlinDatabasesWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the Gremlin databases under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;GremlinDatabaseListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin database properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GremlinDatabaseListResult> databaseAccountsListGremlinDatabasesWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsListGremlinDatabasesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<GremlinDatabaseListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the Gremlin databases under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin database properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListGremlinDatabasesAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<GremlinDatabaseListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsListGremlinDatabasesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<GremlinDatabaseListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsListGremlinGraphs
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin graph properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListGremlinGraphsCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseName}/graphs"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsListGremlinGraphsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsListGremlinGraphs(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListGremlinGraphs(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsListGremlinGraphs(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsListGremlinGraphs(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsListGremlinGraphs(Async)");
        }

        return databaseAccountsListGremlinGraphsCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the Gremlin graph under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return GremlinGraphListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin graph properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public GremlinGraphListResult databaseAccountsListGremlinGraphs(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        ApiResponse<GremlinGraphListResult> localVarResp = databaseAccountsListGremlinGraphsWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the Gremlin graph under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;GremlinGraphListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin graph properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GremlinGraphListResult> databaseAccountsListGremlinGraphsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsListGremlinGraphsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, null);
        Type localVarReturnType = new TypeToken<GremlinGraphListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the Gremlin graph under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Gremlin graph properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListGremlinGraphsAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback<GremlinGraphListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsListGremlinGraphsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<GremlinGraphListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsListKeys
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListKeysCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/listKeys"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsListKeysValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsListKeys(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListKeys(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsListKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsListKeys(Async)");
        }

        return databaseAccountsListKeysCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the access keys for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return DatabaseAccountListKeysResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseAccountListKeysResult databaseAccountsListKeys(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        ApiResponse<DatabaseAccountListKeysResult> localVarResp = databaseAccountsListKeysWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the access keys for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;DatabaseAccountListKeysResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseAccountListKeysResult> databaseAccountsListKeysWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsListKeysValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DatabaseAccountListKeysResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the access keys for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListKeysAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<DatabaseAccountListKeysResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsListKeysValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DatabaseAccountListKeysResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsListMetricDefinitions
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric definitions for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListMetricDefinitionsCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/metricDefinitions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsListMetricDefinitionsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsListMetricDefinitions(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListMetricDefinitions(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsListMetricDefinitions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsListMetricDefinitions(Async)");
        }

        return databaseAccountsListMetricDefinitionsCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves metric definitions for the given database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return MetricDefinitionsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric definitions for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public MetricDefinitionsListResult databaseAccountsListMetricDefinitions(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        ApiResponse<MetricDefinitionsListResult> localVarResp = databaseAccountsListMetricDefinitionsWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves metric definitions for the given database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;MetricDefinitionsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric definitions for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricDefinitionsListResult> databaseAccountsListMetricDefinitionsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsListMetricDefinitionsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<MetricDefinitionsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves metric definitions for the given database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric definitions for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListMetricDefinitionsAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<MetricDefinitionsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsListMetricDefinitionsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MetricDefinitionsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsListMetrics
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListMetricsCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/metrics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsListMetricsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsListMetrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListMetrics(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsListMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsListMetrics(Async)");
        }

        // verify the required parameter '$filter' is set
        if ($filter == null) {
            throw new ApiException("Missing the required parameter '$filter' when calling databaseAccountsListMetrics(Async)");
        }

        return databaseAccountsListMetricsCall(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return MetricListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public MetricListResult databaseAccountsListMetrics(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter) throws ApiException {
        ApiResponse<MetricListResult> localVarResp = databaseAccountsListMetricsWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return ApiResponse&lt;MetricListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricListResult> databaseAccountsListMetricsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<MetricListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the metrics determined by the given filter for the given database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListMetricsAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter, final ApiCallback<MetricListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<MetricListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsListMongoDBCollections
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB collection properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListMongoDBCollectionsCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases/{databaseName}/collections"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsListMongoDBCollectionsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsListMongoDBCollections(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListMongoDBCollections(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsListMongoDBCollections(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsListMongoDBCollections(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsListMongoDBCollections(Async)");
        }

        return databaseAccountsListMongoDBCollectionsCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the MongoDB collection under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return MongoDBCollectionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB collection properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public MongoDBCollectionListResult databaseAccountsListMongoDBCollections(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        ApiResponse<MongoDBCollectionListResult> localVarResp = databaseAccountsListMongoDBCollectionsWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the MongoDB collection under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;MongoDBCollectionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB collection properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MongoDBCollectionListResult> databaseAccountsListMongoDBCollectionsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsListMongoDBCollectionsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, null);
        Type localVarReturnType = new TypeToken<MongoDBCollectionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the MongoDB collection under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB collection properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListMongoDBCollectionsAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback<MongoDBCollectionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsListMongoDBCollectionsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MongoDBCollectionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsListMongoDBDatabases
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB database properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListMongoDBDatabasesCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsListMongoDBDatabasesValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsListMongoDBDatabases(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListMongoDBDatabases(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsListMongoDBDatabases(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsListMongoDBDatabases(Async)");
        }

        return databaseAccountsListMongoDBDatabasesCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the MongoDB databases under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return MongoDBDatabaseListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB database properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public MongoDBDatabaseListResult databaseAccountsListMongoDBDatabases(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        ApiResponse<MongoDBDatabaseListResult> localVarResp = databaseAccountsListMongoDBDatabasesWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the MongoDB databases under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;MongoDBDatabaseListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB database properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MongoDBDatabaseListResult> databaseAccountsListMongoDBDatabasesWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsListMongoDBDatabasesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<MongoDBDatabaseListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the MongoDB databases under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The MongoDB database properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListMongoDBDatabasesAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<MongoDBDatabaseListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsListMongoDBDatabasesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MongoDBDatabaseListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsListReadOnlyKeys
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListReadOnlyKeysCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/readonlykeys"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsListReadOnlyKeysValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsListReadOnlyKeys(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListReadOnlyKeys(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsListReadOnlyKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsListReadOnlyKeys(Async)");
        }

        return databaseAccountsListReadOnlyKeysCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the read-only access keys for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return DatabaseAccountListReadOnlyKeysResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseAccountListReadOnlyKeysResult databaseAccountsListReadOnlyKeys(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        ApiResponse<DatabaseAccountListReadOnlyKeysResult> localVarResp = databaseAccountsListReadOnlyKeysWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the read-only access keys for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;DatabaseAccountListReadOnlyKeysResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseAccountListReadOnlyKeysResult> databaseAccountsListReadOnlyKeysWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsListReadOnlyKeysValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DatabaseAccountListReadOnlyKeysResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the read-only access keys for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListReadOnlyKeysAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<DatabaseAccountListReadOnlyKeysResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsListReadOnlyKeysValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DatabaseAccountListReadOnlyKeysResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsListSqlContainers
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL container properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListSqlContainersCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseName}/containers"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsListSqlContainersValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsListSqlContainers(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListSqlContainers(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsListSqlContainers(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsListSqlContainers(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsListSqlContainers(Async)");
        }

        return databaseAccountsListSqlContainersCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the SQL container under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return SqlContainerListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL container properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public SqlContainerListResult databaseAccountsListSqlContainers(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        ApiResponse<SqlContainerListResult> localVarResp = databaseAccountsListSqlContainersWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the SQL container under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;SqlContainerListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL container properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SqlContainerListResult> databaseAccountsListSqlContainersWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsListSqlContainersValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, null);
        Type localVarReturnType = new TypeToken<SqlContainerListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the SQL container under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL container properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListSqlContainersAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, final ApiCallback<SqlContainerListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsListSqlContainersValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SqlContainerListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsListSqlDatabases
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL database properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListSqlDatabasesCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsListSqlDatabasesValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsListSqlDatabases(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListSqlDatabases(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsListSqlDatabases(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsListSqlDatabases(Async)");
        }

        return databaseAccountsListSqlDatabasesCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the SQL databases under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return SqlDatabaseListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL database properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public SqlDatabaseListResult databaseAccountsListSqlDatabases(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        ApiResponse<SqlDatabaseListResult> localVarResp = databaseAccountsListSqlDatabasesWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the SQL databases under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;SqlDatabaseListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL database properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SqlDatabaseListResult> databaseAccountsListSqlDatabasesWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsListSqlDatabasesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<SqlDatabaseListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the SQL databases under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SQL database properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListSqlDatabasesAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<SqlDatabaseListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsListSqlDatabasesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SqlDatabaseListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsListTables
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Table properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListTablesCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/table/tables"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsListTablesValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsListTables(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListTables(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsListTables(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsListTables(Async)");
        }

        return databaseAccountsListTablesCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the Tables under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return TableListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Table properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public TableListResult databaseAccountsListTables(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        ApiResponse<TableListResult> localVarResp = databaseAccountsListTablesWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the Tables under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;TableListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Table properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableListResult> databaseAccountsListTablesWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsListTablesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<TableListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the Tables under an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Table properties were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListTablesAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<TableListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsListTablesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<TableListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsListUsages
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListUsagesCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/usages"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsListUsagesValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsListUsages(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListUsages(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsListUsages(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsListUsages(Async)");
        }

        return databaseAccountsListUsagesCall(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the usages (most recent data) for the given database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @return UsagesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public UsagesResult databaseAccountsListUsages(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter) throws ApiException {
        ApiResponse<UsagesResult> localVarResp = databaseAccountsListUsagesWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the usages (most recent data) for the given database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @return ApiResponse&lt;UsagesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsagesResult> databaseAccountsListUsagesWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsListUsagesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<UsagesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the usages (most recent data) for the given database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsListUsagesAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter, final ApiCallback<UsagesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsListUsagesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<UsagesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsOfflineRegion
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param regionParameterForOffline Cosmos DB region to offline for the database account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The offline region operation is completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The offline region operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsOfflineRegionCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RegionForOnlineOffline regionParameterForOffline, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = regionParameterForOffline;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/offlineRegion"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsOfflineRegionValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RegionForOnlineOffline regionParameterForOffline, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsOfflineRegion(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsOfflineRegion(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsOfflineRegion(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsOfflineRegion(Async)");
        }

        // verify the required parameter 'regionParameterForOffline' is set
        if (regionParameterForOffline == null) {
            throw new ApiException("Missing the required parameter 'regionParameterForOffline' when calling databaseAccountsOfflineRegion(Async)");
        }

        return databaseAccountsOfflineRegionCall(subscriptionId, resourceGroupName, accountName, apiVersion, regionParameterForOffline, _callback);

    }

    /**
     * 
     * Offline the specified region for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param regionParameterForOffline Cosmos DB region to offline for the database account. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The offline region operation is completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The offline region operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void databaseAccountsOfflineRegion(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RegionForOnlineOffline regionParameterForOffline) throws ApiException {
        databaseAccountsOfflineRegionWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion, regionParameterForOffline);
    }

    /**
     * 
     * Offline the specified region for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param regionParameterForOffline Cosmos DB region to offline for the database account. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The offline region operation is completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The offline region operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> databaseAccountsOfflineRegionWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RegionForOnlineOffline regionParameterForOffline) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsOfflineRegionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, regionParameterForOffline, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Offline the specified region for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param regionParameterForOffline Cosmos DB region to offline for the database account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The offline region operation is completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The offline region operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsOfflineRegionAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RegionForOnlineOffline regionParameterForOffline, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsOfflineRegionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, regionParameterForOffline, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsOnlineRegion
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param regionParameterForOnline Cosmos DB region to online for the database account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The online region operation is completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The online region operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsOnlineRegionCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RegionForOnlineOffline regionParameterForOnline, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = regionParameterForOnline;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/onlineRegion"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsOnlineRegionValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RegionForOnlineOffline regionParameterForOnline, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsOnlineRegion(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsOnlineRegion(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsOnlineRegion(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsOnlineRegion(Async)");
        }

        // verify the required parameter 'regionParameterForOnline' is set
        if (regionParameterForOnline == null) {
            throw new ApiException("Missing the required parameter 'regionParameterForOnline' when calling databaseAccountsOnlineRegion(Async)");
        }

        return databaseAccountsOnlineRegionCall(subscriptionId, resourceGroupName, accountName, apiVersion, regionParameterForOnline, _callback);

    }

    /**
     * 
     * Online the specified region for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param regionParameterForOnline Cosmos DB region to online for the database account. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The online region operation is completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The online region operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void databaseAccountsOnlineRegion(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RegionForOnlineOffline regionParameterForOnline) throws ApiException {
        databaseAccountsOnlineRegionWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion, regionParameterForOnline);
    }

    /**
     * 
     * Online the specified region for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param regionParameterForOnline Cosmos DB region to online for the database account. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The online region operation is completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The online region operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> databaseAccountsOnlineRegionWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RegionForOnlineOffline regionParameterForOnline) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsOnlineRegionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, regionParameterForOnline, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Online the specified region for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param regionParameterForOnline Cosmos DB region to online for the database account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The online region operation is completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The online region operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsOnlineRegionAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RegionForOnlineOffline regionParameterForOnline, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsOnlineRegionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, regionParameterForOnline, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsPatch
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateParameters The tags parameter to patch for the current database account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The properties of the database account were patched successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsPatchCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountPatchParameters updateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsPatchValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountPatchParameters updateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsPatch(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsPatch(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsPatch(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsPatch(Async)");
        }

        // verify the required parameter 'updateParameters' is set
        if (updateParameters == null) {
            throw new ApiException("Missing the required parameter 'updateParameters' when calling databaseAccountsPatch(Async)");
        }

        return databaseAccountsPatchCall(subscriptionId, resourceGroupName, accountName, apiVersion, updateParameters, _callback);

    }

    /**
     * 
     * Patches the properties of an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateParameters The tags parameter to patch for the current database account. (required)
     * @return DatabaseAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The properties of the database account were patched successfully. </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseAccount databaseAccountsPatch(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountPatchParameters updateParameters) throws ApiException {
        ApiResponse<DatabaseAccount> localVarResp = databaseAccountsPatchWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion, updateParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Patches the properties of an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateParameters The tags parameter to patch for the current database account. (required)
     * @return ApiResponse&lt;DatabaseAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The properties of the database account were patched successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseAccount> databaseAccountsPatchWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountPatchParameters updateParameters) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsPatchValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, updateParameters, null);
        Type localVarReturnType = new TypeToken<DatabaseAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Patches the properties of an existing Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateParameters The tags parameter to patch for the current database account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The properties of the database account were patched successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsPatchAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountPatchParameters updateParameters, final ApiCallback<DatabaseAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsPatchValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, updateParameters, _callback);
        Type localVarReturnType = new TypeToken<DatabaseAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsRegenerateKey
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param keyToRegenerate The name of the key to regenerate. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The regenerate key operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsRegenerateKeyCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountRegenerateKeyParameters keyToRegenerate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keyToRegenerate;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/regenerateKey"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsRegenerateKeyValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountRegenerateKeyParameters keyToRegenerate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsRegenerateKey(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsRegenerateKey(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsRegenerateKey(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsRegenerateKey(Async)");
        }

        // verify the required parameter 'keyToRegenerate' is set
        if (keyToRegenerate == null) {
            throw new ApiException("Missing the required parameter 'keyToRegenerate' when calling databaseAccountsRegenerateKey(Async)");
        }

        return databaseAccountsRegenerateKeyCall(subscriptionId, resourceGroupName, accountName, apiVersion, keyToRegenerate, _callback);

    }

    /**
     * 
     * Regenerates an access key for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param keyToRegenerate The name of the key to regenerate. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The regenerate key operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public void databaseAccountsRegenerateKey(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountRegenerateKeyParameters keyToRegenerate) throws ApiException {
        databaseAccountsRegenerateKeyWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion, keyToRegenerate);
    }

    /**
     * 
     * Regenerates an access key for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param keyToRegenerate The name of the key to regenerate. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The regenerate key operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> databaseAccountsRegenerateKeyWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountRegenerateKeyParameters keyToRegenerate) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsRegenerateKeyValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, keyToRegenerate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Regenerates an access key for the specified Azure Cosmos DB database account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param keyToRegenerate The name of the key to regenerate. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The regenerate key operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsRegenerateKeyAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, DatabaseAccountRegenerateKeyParameters keyToRegenerate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsRegenerateKeyValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, keyToRegenerate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsUpdateCassandraKeyspaceThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Cassandra Keyspace. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra Keyspace update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Cassandra Keyspace update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsUpdateCassandraKeyspaceThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateThroughputParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceName}/settings/throughput"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "keyspaceName" + "}", localVarApiClient.escapeString(keyspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsUpdateCassandraKeyspaceThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsUpdateCassandraKeyspaceThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsUpdateCassandraKeyspaceThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsUpdateCassandraKeyspaceThroughput(Async)");
        }

        // verify the required parameter 'keyspaceName' is set
        if (keyspaceName == null) {
            throw new ApiException("Missing the required parameter 'keyspaceName' when calling databaseAccountsUpdateCassandraKeyspaceThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsUpdateCassandraKeyspaceThroughput(Async)");
        }

        // verify the required parameter 'updateThroughputParameters' is set
        if (updateThroughputParameters == null) {
            throw new ApiException("Missing the required parameter 'updateThroughputParameters' when calling databaseAccountsUpdateCassandraKeyspaceThroughput(Async)");
        }

        return databaseAccountsUpdateCassandraKeyspaceThroughputCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, updateThroughputParameters, _callback);

    }

    /**
     * 
     * Update RUs per second of an Azure Cosmos DB Cassandra Keyspace
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Cassandra Keyspace. (required)
     * @return Throughput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra Keyspace update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Cassandra Keyspace update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public Throughput databaseAccountsUpdateCassandraKeyspaceThroughput(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters) throws ApiException {
        ApiResponse<Throughput> localVarResp = databaseAccountsUpdateCassandraKeyspaceThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, updateThroughputParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update RUs per second of an Azure Cosmos DB Cassandra Keyspace
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Cassandra Keyspace. (required)
     * @return ApiResponse&lt;Throughput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra Keyspace update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Cassandra Keyspace update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Throughput> databaseAccountsUpdateCassandraKeyspaceThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsUpdateCassandraKeyspaceThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, updateThroughputParameters, null);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update RUs per second of an Azure Cosmos DB Cassandra Keyspace
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Cassandra Keyspace. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra Keyspace update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Cassandra Keyspace update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsUpdateCassandraKeyspaceThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters, final ApiCallback<Throughput> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsUpdateCassandraKeyspaceThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, updateThroughputParameters, _callback);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsUpdateCassandraTableThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Cassandra table. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra table update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Cassandra table update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsUpdateCassandraTableThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateThroughputParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceName}/tables/{tableName}/settings/throughput"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "keyspaceName" + "}", localVarApiClient.escapeString(keyspaceName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsUpdateCassandraTableThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsUpdateCassandraTableThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsUpdateCassandraTableThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsUpdateCassandraTableThroughput(Async)");
        }

        // verify the required parameter 'keyspaceName' is set
        if (keyspaceName == null) {
            throw new ApiException("Missing the required parameter 'keyspaceName' when calling databaseAccountsUpdateCassandraTableThroughput(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling databaseAccountsUpdateCassandraTableThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsUpdateCassandraTableThroughput(Async)");
        }

        // verify the required parameter 'updateThroughputParameters' is set
        if (updateThroughputParameters == null) {
            throw new ApiException("Missing the required parameter 'updateThroughputParameters' when calling databaseAccountsUpdateCassandraTableThroughput(Async)");
        }

        return databaseAccountsUpdateCassandraTableThroughputCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, updateThroughputParameters, _callback);

    }

    /**
     * 
     * Update RUs per second of an Azure Cosmos DB Cassandra table
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Cassandra table. (required)
     * @return Throughput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra table update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Cassandra table update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public Throughput databaseAccountsUpdateCassandraTableThroughput(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters) throws ApiException {
        ApiResponse<Throughput> localVarResp = databaseAccountsUpdateCassandraTableThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, updateThroughputParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update RUs per second of an Azure Cosmos DB Cassandra table
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Cassandra table. (required)
     * @return ApiResponse&lt;Throughput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra table update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Cassandra table update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Throughput> databaseAccountsUpdateCassandraTableThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsUpdateCassandraTableThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, updateThroughputParameters, null);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update RUs per second of an Azure Cosmos DB Cassandra table
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param keyspaceName Cosmos DB keyspace name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Cassandra table. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Cassandra table update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Cassandra table update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsUpdateCassandraTableThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String keyspaceName, String tableName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters, final ApiCallback<Throughput> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsUpdateCassandraTableThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, updateThroughputParameters, _callback);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsUpdateGremlinDatabaseThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Gremlin database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin database update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Gremlin database update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsUpdateGremlinDatabaseThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateThroughputParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseName}/settings/throughput"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsUpdateGremlinDatabaseThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsUpdateGremlinDatabaseThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsUpdateGremlinDatabaseThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsUpdateGremlinDatabaseThroughput(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsUpdateGremlinDatabaseThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsUpdateGremlinDatabaseThroughput(Async)");
        }

        // verify the required parameter 'updateThroughputParameters' is set
        if (updateThroughputParameters == null) {
            throw new ApiException("Missing the required parameter 'updateThroughputParameters' when calling databaseAccountsUpdateGremlinDatabaseThroughput(Async)");
        }

        return databaseAccountsUpdateGremlinDatabaseThroughputCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters, _callback);

    }

    /**
     * 
     * Update RUs per second of an Azure Cosmos DB Gremlin database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Gremlin database. (required)
     * @return Throughput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin database update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Gremlin database update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public Throughput databaseAccountsUpdateGremlinDatabaseThroughput(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters) throws ApiException {
        ApiResponse<Throughput> localVarResp = databaseAccountsUpdateGremlinDatabaseThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update RUs per second of an Azure Cosmos DB Gremlin database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Gremlin database. (required)
     * @return ApiResponse&lt;Throughput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin database update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Gremlin database update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Throughput> databaseAccountsUpdateGremlinDatabaseThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsUpdateGremlinDatabaseThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters, null);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update RUs per second of an Azure Cosmos DB Gremlin database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Gremlin database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin database update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Gremlin database update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsUpdateGremlinDatabaseThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters, final ApiCallback<Throughput> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsUpdateGremlinDatabaseThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters, _callback);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsUpdateGremlinGraphThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Gremlin graph. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin graph update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Gremlin graph update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsUpdateGremlinGraphThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateThroughputParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseName}/graphs/{graphName}/settings/throughput"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "graphName" + "}", localVarApiClient.escapeString(graphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsUpdateGremlinGraphThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsUpdateGremlinGraphThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsUpdateGremlinGraphThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsUpdateGremlinGraphThroughput(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsUpdateGremlinGraphThroughput(Async)");
        }

        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling databaseAccountsUpdateGremlinGraphThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsUpdateGremlinGraphThroughput(Async)");
        }

        // verify the required parameter 'updateThroughputParameters' is set
        if (updateThroughputParameters == null) {
            throw new ApiException("Missing the required parameter 'updateThroughputParameters' when calling databaseAccountsUpdateGremlinGraphThroughput(Async)");
        }

        return databaseAccountsUpdateGremlinGraphThroughputCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, updateThroughputParameters, _callback);

    }

    /**
     * 
     * Update RUs per second of an Azure Cosmos DB Gremlin graph
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Gremlin graph. (required)
     * @return Throughput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin graph update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Gremlin graph update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public Throughput databaseAccountsUpdateGremlinGraphThroughput(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters) throws ApiException {
        ApiResponse<Throughput> localVarResp = databaseAccountsUpdateGremlinGraphThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, updateThroughputParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update RUs per second of an Azure Cosmos DB Gremlin graph
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Gremlin graph. (required)
     * @return ApiResponse&lt;Throughput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin graph update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Gremlin graph update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Throughput> databaseAccountsUpdateGremlinGraphThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsUpdateGremlinGraphThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, updateThroughputParameters, null);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update RUs per second of an Azure Cosmos DB Gremlin graph
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param graphName Cosmos DB graph name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current Gremlin graph. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Gremlin graph update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Gremlin graph update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsUpdateGremlinGraphThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String graphName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters, final ApiCallback<Throughput> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsUpdateGremlinGraphThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, updateThroughputParameters, _callback);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsUpdateMongoDBCollectionThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current MongoDB collection. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB collection update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the MongoDB collection update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsUpdateMongoDBCollectionThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateThroughputParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases/{databaseName}/collections/{collectionName}/settings/throughput"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "collectionName" + "}", localVarApiClient.escapeString(collectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsUpdateMongoDBCollectionThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsUpdateMongoDBCollectionThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsUpdateMongoDBCollectionThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsUpdateMongoDBCollectionThroughput(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsUpdateMongoDBCollectionThroughput(Async)");
        }

        // verify the required parameter 'collectionName' is set
        if (collectionName == null) {
            throw new ApiException("Missing the required parameter 'collectionName' when calling databaseAccountsUpdateMongoDBCollectionThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsUpdateMongoDBCollectionThroughput(Async)");
        }

        // verify the required parameter 'updateThroughputParameters' is set
        if (updateThroughputParameters == null) {
            throw new ApiException("Missing the required parameter 'updateThroughputParameters' when calling databaseAccountsUpdateMongoDBCollectionThroughput(Async)");
        }

        return databaseAccountsUpdateMongoDBCollectionThroughputCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, updateThroughputParameters, _callback);

    }

    /**
     * 
     * Update the RUs per second of an Azure Cosmos DB MongoDB collection
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current MongoDB collection. (required)
     * @return Throughput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB collection update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the MongoDB collection update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public Throughput databaseAccountsUpdateMongoDBCollectionThroughput(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters) throws ApiException {
        ApiResponse<Throughput> localVarResp = databaseAccountsUpdateMongoDBCollectionThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, updateThroughputParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update the RUs per second of an Azure Cosmos DB MongoDB collection
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current MongoDB collection. (required)
     * @return ApiResponse&lt;Throughput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB collection update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the MongoDB collection update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Throughput> databaseAccountsUpdateMongoDBCollectionThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsUpdateMongoDBCollectionThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, updateThroughputParameters, null);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update the RUs per second of an Azure Cosmos DB MongoDB collection
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param collectionName Cosmos DB collection name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current MongoDB collection. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB collection update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the MongoDB collection update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsUpdateMongoDBCollectionThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String collectionName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters, final ApiCallback<Throughput> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsUpdateMongoDBCollectionThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, updateThroughputParameters, _callback);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsUpdateMongoDBDatabaseThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current MongoDB database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB database update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the MongoDB database update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsUpdateMongoDBDatabaseThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateThroughputParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases/{databaseName}/settings/throughput"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsUpdateMongoDBDatabaseThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsUpdateMongoDBDatabaseThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsUpdateMongoDBDatabaseThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsUpdateMongoDBDatabaseThroughput(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsUpdateMongoDBDatabaseThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsUpdateMongoDBDatabaseThroughput(Async)");
        }

        // verify the required parameter 'updateThroughputParameters' is set
        if (updateThroughputParameters == null) {
            throw new ApiException("Missing the required parameter 'updateThroughputParameters' when calling databaseAccountsUpdateMongoDBDatabaseThroughput(Async)");
        }

        return databaseAccountsUpdateMongoDBDatabaseThroughputCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters, _callback);

    }

    /**
     * 
     * Update RUs per second of the an Azure Cosmos DB MongoDB database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current MongoDB database. (required)
     * @return Throughput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB database update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the MongoDB database update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public Throughput databaseAccountsUpdateMongoDBDatabaseThroughput(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters) throws ApiException {
        ApiResponse<Throughput> localVarResp = databaseAccountsUpdateMongoDBDatabaseThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update RUs per second of the an Azure Cosmos DB MongoDB database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current MongoDB database. (required)
     * @return ApiResponse&lt;Throughput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB database update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the MongoDB database update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Throughput> databaseAccountsUpdateMongoDBDatabaseThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsUpdateMongoDBDatabaseThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters, null);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update RUs per second of the an Azure Cosmos DB MongoDB database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current MongoDB database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the MongoDB database update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the MongoDB database update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsUpdateMongoDBDatabaseThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters, final ApiCallback<Throughput> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsUpdateMongoDBDatabaseThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters, _callback);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsUpdateSqlContainerThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current SQL container. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL container update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the SQL container update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsUpdateSqlContainerThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateThroughputParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseName}/containers/{containerName}/settings/throughput"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsUpdateSqlContainerThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsUpdateSqlContainerThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsUpdateSqlContainerThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsUpdateSqlContainerThroughput(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsUpdateSqlContainerThroughput(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling databaseAccountsUpdateSqlContainerThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsUpdateSqlContainerThroughput(Async)");
        }

        // verify the required parameter 'updateThroughputParameters' is set
        if (updateThroughputParameters == null) {
            throw new ApiException("Missing the required parameter 'updateThroughputParameters' when calling databaseAccountsUpdateSqlContainerThroughput(Async)");
        }

        return databaseAccountsUpdateSqlContainerThroughputCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, updateThroughputParameters, _callback);

    }

    /**
     * 
     * Update RUs per second of an Azure Cosmos DB SQL container
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current SQL container. (required)
     * @return Throughput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL container update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the SQL container update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public Throughput databaseAccountsUpdateSqlContainerThroughput(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters) throws ApiException {
        ApiResponse<Throughput> localVarResp = databaseAccountsUpdateSqlContainerThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, updateThroughputParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update RUs per second of an Azure Cosmos DB SQL container
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current SQL container. (required)
     * @return ApiResponse&lt;Throughput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL container update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the SQL container update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Throughput> databaseAccountsUpdateSqlContainerThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsUpdateSqlContainerThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, updateThroughputParameters, null);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update RUs per second of an Azure Cosmos DB SQL container
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param containerName Cosmos DB container name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current SQL container. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL container update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the SQL container update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsUpdateSqlContainerThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String containerName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters, final ApiCallback<Throughput> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsUpdateSqlContainerThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, updateThroughputParameters, _callback);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsUpdateSqlDatabaseThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current SQL database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL database update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the SQL database update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsUpdateSqlDatabaseThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateThroughputParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseName}/settings/throughput"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsUpdateSqlDatabaseThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsUpdateSqlDatabaseThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsUpdateSqlDatabaseThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsUpdateSqlDatabaseThroughput(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseAccountsUpdateSqlDatabaseThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsUpdateSqlDatabaseThroughput(Async)");
        }

        // verify the required parameter 'updateThroughputParameters' is set
        if (updateThroughputParameters == null) {
            throw new ApiException("Missing the required parameter 'updateThroughputParameters' when calling databaseAccountsUpdateSqlDatabaseThroughput(Async)");
        }

        return databaseAccountsUpdateSqlDatabaseThroughputCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters, _callback);

    }

    /**
     * 
     * Update RUs per second of an Azure Cosmos DB SQL database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current SQL database. (required)
     * @return Throughput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL database update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the SQL database update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public Throughput databaseAccountsUpdateSqlDatabaseThroughput(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters) throws ApiException {
        ApiResponse<Throughput> localVarResp = databaseAccountsUpdateSqlDatabaseThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update RUs per second of an Azure Cosmos DB SQL database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current SQL database. (required)
     * @return ApiResponse&lt;Throughput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL database update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the SQL database update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Throughput> databaseAccountsUpdateSqlDatabaseThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsUpdateSqlDatabaseThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters, null);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update RUs per second of an Azure Cosmos DB SQL database
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseName Cosmos DB database name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current SQL database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the SQL database update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the SQL database update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsUpdateSqlDatabaseThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters, final ApiCallback<Throughput> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsUpdateSqlDatabaseThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters, _callback);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseAccountsUpdateTableThroughput
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current Table. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Table update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Table update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsUpdateTableThroughputCall(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateThroughputParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/table/tables/{tableName}/settings/throughput"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseAccountsUpdateTableThroughputValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseAccountsUpdateTableThroughput(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseAccountsUpdateTableThroughput(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseAccountsUpdateTableThroughput(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling databaseAccountsUpdateTableThroughput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseAccountsUpdateTableThroughput(Async)");
        }

        // verify the required parameter 'updateThroughputParameters' is set
        if (updateThroughputParameters == null) {
            throw new ApiException("Missing the required parameter 'updateThroughputParameters' when calling databaseAccountsUpdateTableThroughput(Async)");
        }

        return databaseAccountsUpdateTableThroughputCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, updateThroughputParameters, _callback);

    }

    /**
     * 
     * Update RUs per second of an Azure Cosmos DB Table
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current Table. (required)
     * @return Throughput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Table update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Table update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public Throughput databaseAccountsUpdateTableThroughput(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters) throws ApiException {
        ApiResponse<Throughput> localVarResp = databaseAccountsUpdateTableThroughputWithHttpInfo(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, updateThroughputParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update RUs per second of an Azure Cosmos DB Table
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current Table. (required)
     * @return ApiResponse&lt;Throughput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Table update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Table update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Throughput> databaseAccountsUpdateTableThroughputWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters) throws ApiException {
        okhttp3.Call localVarCall = databaseAccountsUpdateTableThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, updateThroughputParameters, null);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update RUs per second of an Azure Cosmos DB Table
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param tableName Cosmos DB table name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current Table. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RUs per second of the Table update operation was completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The RUs per second of the Table update operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseAccountsUpdateTableThroughputAsync(String subscriptionId, String resourceGroupName, String accountName, String tableName, String apiVersion, ThroughputUpdateParameters updateThroughputParameters, final ApiCallback<Throughput> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseAccountsUpdateTableThroughputValidateBeforeCall(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, updateThroughputParameters, _callback);
        Type localVarReturnType = new TypeToken<Throughput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseListMetricDefinitions
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric definitions for the database were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseListMetricDefinitionsCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/metricDefinitions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseRid" + "}", localVarApiClient.escapeString(databaseRid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseListMetricDefinitionsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseListMetricDefinitions(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseListMetricDefinitions(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseListMetricDefinitions(Async)");
        }

        // verify the required parameter 'databaseRid' is set
        if (databaseRid == null) {
            throw new ApiException("Missing the required parameter 'databaseRid' when calling databaseListMetricDefinitions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseListMetricDefinitions(Async)");
        }

        return databaseListMetricDefinitionsCall(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves metric definitions for the given database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return MetricDefinitionsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric definitions for the database were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public MetricDefinitionsListResult databaseListMetricDefinitions(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion) throws ApiException {
        ApiResponse<MetricDefinitionsListResult> localVarResp = databaseListMetricDefinitionsWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves metric definitions for the given database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @return ApiResponse&lt;MetricDefinitionsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric definitions for the database were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricDefinitionsListResult> databaseListMetricDefinitionsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseListMetricDefinitionsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, null);
        Type localVarReturnType = new TypeToken<MetricDefinitionsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves metric definitions for the given database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric definitions for the database were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseListMetricDefinitionsAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion, final ApiCallback<MetricDefinitionsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseListMetricDefinitionsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MetricDefinitionsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseListMetrics
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseListMetricsCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/metrics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseRid" + "}", localVarApiClient.escapeString(databaseRid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseListMetricsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseListMetrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseListMetrics(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseListMetrics(Async)");
        }

        // verify the required parameter 'databaseRid' is set
        if (databaseRid == null) {
            throw new ApiException("Missing the required parameter 'databaseRid' when calling databaseListMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseListMetrics(Async)");
        }

        // verify the required parameter '$filter' is set
        if ($filter == null) {
            throw new ApiException("Missing the required parameter '$filter' when calling databaseListMetrics(Async)");
        }

        return databaseListMetricsCall(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given database account and database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return MetricListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public MetricListResult databaseListMetrics(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion, String $filter) throws ApiException {
        ApiResponse<MetricListResult> localVarResp = databaseListMetricsWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given database account and database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return ApiResponse&lt;MetricListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricListResult> databaseListMetricsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = databaseListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<MetricListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the metrics determined by the given filter for the given database account and database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metrics for the database account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseListMetricsAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion, String $filter, final ApiCallback<MetricListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<MetricListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseListUsages
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the database were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseListUsagesCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/usages"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseRid" + "}", localVarApiClient.escapeString(databaseRid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseListUsagesValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseListUsages(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseListUsages(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling databaseListUsages(Async)");
        }

        // verify the required parameter 'databaseRid' is set
        if (databaseRid == null) {
            throw new ApiException("Missing the required parameter 'databaseRid' when calling databaseListUsages(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseListUsages(Async)");
        }

        return databaseListUsagesCall(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the usages (most recent data) for the given database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @return UsagesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the database were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public UsagesResult databaseListUsages(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion, String $filter) throws ApiException {
        ApiResponse<UsagesResult> localVarResp = databaseListUsagesWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the usages (most recent data) for the given database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @return ApiResponse&lt;UsagesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the database were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsagesResult> databaseListUsagesWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = databaseListUsagesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<UsagesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the usages (most recent data) for the given database.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The usages for the database were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseListUsagesAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String apiVersion, String $filter, final ApiCallback<UsagesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseListUsagesValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<UsagesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for partitionKeyRangeIdListMetrics
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param partitionKeyRangeId Partition Key Range Id for which to get data. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the partition key range id were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partitionKeyRangeIdListMetricsCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String partitionKeyRangeId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitionKeyRangeId/{partitionKeyRangeId}/metrics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "databaseRid" + "}", localVarApiClient.escapeString(databaseRid.toString()))
            .replace("{" + "collectionRid" + "}", localVarApiClient.escapeString(collectionRid.toString()))
            .replace("{" + "partitionKeyRangeId" + "}", localVarApiClient.escapeString(partitionKeyRangeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partitionKeyRangeIdListMetricsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String partitionKeyRangeId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling partitionKeyRangeIdListMetrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling partitionKeyRangeIdListMetrics(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling partitionKeyRangeIdListMetrics(Async)");
        }

        // verify the required parameter 'databaseRid' is set
        if (databaseRid == null) {
            throw new ApiException("Missing the required parameter 'databaseRid' when calling partitionKeyRangeIdListMetrics(Async)");
        }

        // verify the required parameter 'collectionRid' is set
        if (collectionRid == null) {
            throw new ApiException("Missing the required parameter 'collectionRid' when calling partitionKeyRangeIdListMetrics(Async)");
        }

        // verify the required parameter 'partitionKeyRangeId' is set
        if (partitionKeyRangeId == null) {
            throw new ApiException("Missing the required parameter 'partitionKeyRangeId' when calling partitionKeyRangeIdListMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling partitionKeyRangeIdListMetrics(Async)");
        }

        // verify the required parameter '$filter' is set
        if ($filter == null) {
            throw new ApiException("Missing the required parameter '$filter' when calling partitionKeyRangeIdListMetrics(Async)");
        }

        return partitionKeyRangeIdListMetricsCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, partitionKeyRangeId, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given partition key range id.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param partitionKeyRangeId Partition Key Range Id for which to get data. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return PartitionMetricListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the partition key range id were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public PartitionMetricListResult partitionKeyRangeIdListMetrics(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String partitionKeyRangeId, String apiVersion, String $filter) throws ApiException {
        ApiResponse<PartitionMetricListResult> localVarResp = partitionKeyRangeIdListMetricsWithHttpInfo(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, partitionKeyRangeId, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given partition key range id.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param partitionKeyRangeId Partition Key Range Id for which to get data. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return ApiResponse&lt;PartitionMetricListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the partition key range id were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PartitionMetricListResult> partitionKeyRangeIdListMetricsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String partitionKeyRangeId, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = partitionKeyRangeIdListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, partitionKeyRangeId, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<PartitionMetricListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the metrics determined by the given filter for the given partition key range id.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param partitionKeyRangeId Partition Key Range Id for which to get data. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the partition key range id were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partitionKeyRangeIdListMetricsAsync(String subscriptionId, String resourceGroupName, String accountName, String databaseRid, String collectionRid, String partitionKeyRangeId, String apiVersion, String $filter, final ApiCallback<PartitionMetricListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = partitionKeyRangeIdListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, partitionKeyRangeId, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<PartitionMetricListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for partitionKeyRangeIdRegionListMetrics
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param partitionKeyRangeId Partition Key Range Id for which to get data. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the partition key range id and region were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partitionKeyRangeIdRegionListMetricsCall(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String partitionKeyRangeId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/partitionKeyRangeId/{partitionKeyRangeId}/metrics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "region" + "}", localVarApiClient.escapeString(region.toString()))
            .replace("{" + "databaseRid" + "}", localVarApiClient.escapeString(databaseRid.toString()))
            .replace("{" + "collectionRid" + "}", localVarApiClient.escapeString(collectionRid.toString()))
            .replace("{" + "partitionKeyRangeId" + "}", localVarApiClient.escapeString(partitionKeyRangeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partitionKeyRangeIdRegionListMetricsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String partitionKeyRangeId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling partitionKeyRangeIdRegionListMetrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling partitionKeyRangeIdRegionListMetrics(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling partitionKeyRangeIdRegionListMetrics(Async)");
        }

        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling partitionKeyRangeIdRegionListMetrics(Async)");
        }

        // verify the required parameter 'databaseRid' is set
        if (databaseRid == null) {
            throw new ApiException("Missing the required parameter 'databaseRid' when calling partitionKeyRangeIdRegionListMetrics(Async)");
        }

        // verify the required parameter 'collectionRid' is set
        if (collectionRid == null) {
            throw new ApiException("Missing the required parameter 'collectionRid' when calling partitionKeyRangeIdRegionListMetrics(Async)");
        }

        // verify the required parameter 'partitionKeyRangeId' is set
        if (partitionKeyRangeId == null) {
            throw new ApiException("Missing the required parameter 'partitionKeyRangeId' when calling partitionKeyRangeIdRegionListMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling partitionKeyRangeIdRegionListMetrics(Async)");
        }

        // verify the required parameter '$filter' is set
        if ($filter == null) {
            throw new ApiException("Missing the required parameter '$filter' when calling partitionKeyRangeIdRegionListMetrics(Async)");
        }

        return partitionKeyRangeIdRegionListMetricsCall(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, partitionKeyRangeId, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given partition key range id and region.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param partitionKeyRangeId Partition Key Range Id for which to get data. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return PartitionMetricListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the partition key range id and region were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public PartitionMetricListResult partitionKeyRangeIdRegionListMetrics(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String partitionKeyRangeId, String apiVersion, String $filter) throws ApiException {
        ApiResponse<PartitionMetricListResult> localVarResp = partitionKeyRangeIdRegionListMetricsWithHttpInfo(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, partitionKeyRangeId, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given partition key range id and region.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param partitionKeyRangeId Partition Key Range Id for which to get data. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return ApiResponse&lt;PartitionMetricListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the partition key range id and region were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PartitionMetricListResult> partitionKeyRangeIdRegionListMetricsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String partitionKeyRangeId, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = partitionKeyRangeIdRegionListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, partitionKeyRangeId, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<PartitionMetricListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the metrics determined by the given filter for the given partition key range id and region.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param region Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param databaseRid Cosmos DB database rid. (required)
     * @param collectionRid Cosmos DB collection rid. (required)
     * @param partitionKeyRangeId Partition Key Range Id for which to get data. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition-level metrics for the partition key range id and region were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partitionKeyRangeIdRegionListMetricsAsync(String subscriptionId, String resourceGroupName, String accountName, String region, String databaseRid, String collectionRid, String partitionKeyRangeId, String apiVersion, String $filter, final ApiCallback<PartitionMetricListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = partitionKeyRangeIdRegionListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, partitionKeyRangeId, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<PartitionMetricListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for percentileListMetrics
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The percentile metrics for the account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call percentileListMetricsCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/percentile/metrics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call percentileListMetricsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling percentileListMetrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling percentileListMetrics(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling percentileListMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling percentileListMetrics(Async)");
        }

        // verify the required parameter '$filter' is set
        if ($filter == null) {
            throw new ApiException("Missing the required parameter '$filter' when calling percentileListMetrics(Async)");
        }

        return percentileListMetricsCall(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given database account. This url is only for PBS and Replication Latency data
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return PercentileMetricListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The percentile metrics for the account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public PercentileMetricListResult percentileListMetrics(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter) throws ApiException {
        ApiResponse<PercentileMetricListResult> localVarResp = percentileListMetricsWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given database account. This url is only for PBS and Replication Latency data
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return ApiResponse&lt;PercentileMetricListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The percentile metrics for the account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PercentileMetricListResult> percentileListMetricsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = percentileListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<PercentileMetricListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the metrics determined by the given filter for the given database account. This url is only for PBS and Replication Latency data
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The percentile metrics for the account were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call percentileListMetricsAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter, final ApiCallback<PercentileMetricListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = percentileListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<PercentileMetricListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for percentileSourceTargetListMetrics
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param sourceRegion Source region from which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param targetRegion Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The percentile metrics for the account, source and target regions were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call percentileSourceTargetListMetricsCall(String subscriptionId, String resourceGroupName, String accountName, String sourceRegion, String targetRegion, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sourceRegion/{sourceRegion}/targetRegion/{targetRegion}/percentile/metrics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "sourceRegion" + "}", localVarApiClient.escapeString(sourceRegion.toString()))
            .replace("{" + "targetRegion" + "}", localVarApiClient.escapeString(targetRegion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call percentileSourceTargetListMetricsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String sourceRegion, String targetRegion, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling percentileSourceTargetListMetrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling percentileSourceTargetListMetrics(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling percentileSourceTargetListMetrics(Async)");
        }

        // verify the required parameter 'sourceRegion' is set
        if (sourceRegion == null) {
            throw new ApiException("Missing the required parameter 'sourceRegion' when calling percentileSourceTargetListMetrics(Async)");
        }

        // verify the required parameter 'targetRegion' is set
        if (targetRegion == null) {
            throw new ApiException("Missing the required parameter 'targetRegion' when calling percentileSourceTargetListMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling percentileSourceTargetListMetrics(Async)");
        }

        // verify the required parameter '$filter' is set
        if ($filter == null) {
            throw new ApiException("Missing the required parameter '$filter' when calling percentileSourceTargetListMetrics(Async)");
        }

        return percentileSourceTargetListMetricsCall(subscriptionId, resourceGroupName, accountName, sourceRegion, targetRegion, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given account, source and target region. This url is only for PBS and Replication Latency data
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param sourceRegion Source region from which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param targetRegion Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return PercentileMetricListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The percentile metrics for the account, source and target regions were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public PercentileMetricListResult percentileSourceTargetListMetrics(String subscriptionId, String resourceGroupName, String accountName, String sourceRegion, String targetRegion, String apiVersion, String $filter) throws ApiException {
        ApiResponse<PercentileMetricListResult> localVarResp = percentileSourceTargetListMetricsWithHttpInfo(subscriptionId, resourceGroupName, accountName, sourceRegion, targetRegion, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given account, source and target region. This url is only for PBS and Replication Latency data
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param sourceRegion Source region from which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param targetRegion Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return ApiResponse&lt;PercentileMetricListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The percentile metrics for the account, source and target regions were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PercentileMetricListResult> percentileSourceTargetListMetricsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String sourceRegion, String targetRegion, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = percentileSourceTargetListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, sourceRegion, targetRegion, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<PercentileMetricListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the metrics determined by the given filter for the given account, source and target region. This url is only for PBS and Replication Latency data
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param sourceRegion Source region from which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param targetRegion Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The percentile metrics for the account, source and target regions were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call percentileSourceTargetListMetricsAsync(String subscriptionId, String resourceGroupName, String accountName, String sourceRegion, String targetRegion, String apiVersion, String $filter, final ApiCallback<PercentileMetricListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = percentileSourceTargetListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, sourceRegion, targetRegion, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<PercentileMetricListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for percentileTargetListMetrics
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param targetRegion Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The percentile metrics for the account and target regions were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call percentileTargetListMetricsCall(String subscriptionId, String resourceGroupName, String accountName, String targetRegion, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/targetRegion/{targetRegion}/percentile/metrics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "targetRegion" + "}", localVarApiClient.escapeString(targetRegion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call percentileTargetListMetricsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String targetRegion, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling percentileTargetListMetrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling percentileTargetListMetrics(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling percentileTargetListMetrics(Async)");
        }

        // verify the required parameter 'targetRegion' is set
        if (targetRegion == null) {
            throw new ApiException("Missing the required parameter 'targetRegion' when calling percentileTargetListMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling percentileTargetListMetrics(Async)");
        }

        // verify the required parameter '$filter' is set
        if ($filter == null) {
            throw new ApiException("Missing the required parameter '$filter' when calling percentileTargetListMetrics(Async)");
        }

        return percentileTargetListMetricsCall(subscriptionId, resourceGroupName, accountName, targetRegion, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given account target region. This url is only for PBS and Replication Latency data
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param targetRegion Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return PercentileMetricListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The percentile metrics for the account and target regions were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public PercentileMetricListResult percentileTargetListMetrics(String subscriptionId, String resourceGroupName, String accountName, String targetRegion, String apiVersion, String $filter) throws ApiException {
        ApiResponse<PercentileMetricListResult> localVarResp = percentileTargetListMetricsWithHttpInfo(subscriptionId, resourceGroupName, accountName, targetRegion, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the metrics determined by the given filter for the given account target region. This url is only for PBS and Replication Latency data
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param targetRegion Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @return ApiResponse&lt;PercentileMetricListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The percentile metrics for the account and target regions were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PercentileMetricListResult> percentileTargetListMetricsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String targetRegion, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = percentileTargetListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, targetRegion, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<PercentileMetricListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the metrics determined by the given filter for the given account target region. This url is only for PBS and Replication Latency data
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Cosmos DB database account name. (required)
     * @param targetRegion Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-04-08. (required)
     * @param $filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The percentile metrics for the account and target regions were retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call percentileTargetListMetricsAsync(String subscriptionId, String resourceGroupName, String accountName, String targetRegion, String apiVersion, String $filter, final ApiCallback<PercentileMetricListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = percentileTargetListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, targetRegion, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<PercentileMetricListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
