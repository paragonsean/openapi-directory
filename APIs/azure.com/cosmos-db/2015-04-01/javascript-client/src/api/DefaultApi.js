/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2015-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CassandraKeyspace from '../model/CassandraKeyspace';
import CassandraKeyspaceCreateUpdateParameters from '../model/CassandraKeyspaceCreateUpdateParameters';
import CassandraKeyspaceListResult from '../model/CassandraKeyspaceListResult';
import CassandraTable from '../model/CassandraTable';
import CassandraTableCreateUpdateParameters from '../model/CassandraTableCreateUpdateParameters';
import CassandraTableListResult from '../model/CassandraTableListResult';
import DatabaseAccount from '../model/DatabaseAccount';
import DatabaseAccountCreateUpdateParameters from '../model/DatabaseAccountCreateUpdateParameters';
import DatabaseAccountListConnectionStringsResult from '../model/DatabaseAccountListConnectionStringsResult';
import DatabaseAccountListKeysResult from '../model/DatabaseAccountListKeysResult';
import DatabaseAccountListReadOnlyKeysResult from '../model/DatabaseAccountListReadOnlyKeysResult';
import DatabaseAccountPatchParameters from '../model/DatabaseAccountPatchParameters';
import DatabaseAccountRegenerateKeyParameters from '../model/DatabaseAccountRegenerateKeyParameters';
import DatabaseAccountsListResult from '../model/DatabaseAccountsListResult';
import ErrorResponse from '../model/ErrorResponse';
import FailoverPolicies from '../model/FailoverPolicies';
import GremlinDatabase from '../model/GremlinDatabase';
import GremlinDatabaseCreateUpdateParameters from '../model/GremlinDatabaseCreateUpdateParameters';
import GremlinDatabaseListResult from '../model/GremlinDatabaseListResult';
import GremlinGraph from '../model/GremlinGraph';
import GremlinGraphCreateUpdateParameters from '../model/GremlinGraphCreateUpdateParameters';
import GremlinGraphListResult from '../model/GremlinGraphListResult';
import MetricDefinitionsListResult from '../model/MetricDefinitionsListResult';
import MetricListResult from '../model/MetricListResult';
import MongoDBCollection from '../model/MongoDBCollection';
import MongoDBCollectionCreateUpdateParameters from '../model/MongoDBCollectionCreateUpdateParameters';
import MongoDBCollectionListResult from '../model/MongoDBCollectionListResult';
import MongoDBDatabase from '../model/MongoDBDatabase';
import MongoDBDatabaseCreateUpdateParameters from '../model/MongoDBDatabaseCreateUpdateParameters';
import MongoDBDatabaseListResult from '../model/MongoDBDatabaseListResult';
import PartitionMetricListResult from '../model/PartitionMetricListResult';
import PartitionUsagesResult from '../model/PartitionUsagesResult';
import PercentileMetricListResult from '../model/PercentileMetricListResult';
import RegionForOnlineOffline from '../model/RegionForOnlineOffline';
import SqlContainer from '../model/SqlContainer';
import SqlContainerCreateUpdateParameters from '../model/SqlContainerCreateUpdateParameters';
import SqlContainerListResult from '../model/SqlContainerListResult';
import SqlDatabase from '../model/SqlDatabase';
import SqlDatabaseCreateUpdateParameters from '../model/SqlDatabaseCreateUpdateParameters';
import SqlDatabaseListResult from '../model/SqlDatabaseListResult';
import Table from '../model/Table';
import TableCreateUpdateParameters from '../model/TableCreateUpdateParameters';
import TableListResult from '../model/TableListResult';
import Throughput from '../model/Throughput';
import ThroughputUpdateParameters from '../model/ThroughputUpdateParameters';
import UsagesResult from '../model/UsagesResult';

/**
* Default service.
* @module api/DefaultApi
* @version 2015-04-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the collectionListMetricDefinitions operation.
     * @callback module:api/DefaultApi~collectionListMetricDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricDefinitionsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves metric definitions for the given collection.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseRid Cosmos DB database rid.
     * @param {String} collectionRid Cosmos DB collection rid.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~collectionListMetricDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricDefinitionsListResult}
     */
    collectionListMetricDefinitions(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling collectionListMetricDefinitions");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling collectionListMetricDefinitions");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling collectionListMetricDefinitions");
      }
      // verify the required parameter 'databaseRid' is set
      if (databaseRid === undefined || databaseRid === null) {
        throw new Error("Missing the required parameter 'databaseRid' when calling collectionListMetricDefinitions");
      }
      // verify the required parameter 'collectionRid' is set
      if (collectionRid === undefined || collectionRid === null) {
        throw new Error("Missing the required parameter 'collectionRid' when calling collectionListMetricDefinitions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling collectionListMetricDefinitions");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseRid': databaseRid,
        'collectionRid': collectionRid
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricDefinitionsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/metricDefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionListMetrics operation.
     * @callback module:api/DefaultApi~collectionListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metrics determined by the given filter for the given database account and collection.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseRid Cosmos DB database rid.
     * @param {String} collectionRid Cosmos DB collection rid.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {String} filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param {module:api/DefaultApi~collectionListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricListResult}
     */
    collectionListMetrics(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, filter, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling collectionListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling collectionListMetrics");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling collectionListMetrics");
      }
      // verify the required parameter 'databaseRid' is set
      if (databaseRid === undefined || databaseRid === null) {
        throw new Error("Missing the required parameter 'databaseRid' when calling collectionListMetrics");
      }
      // verify the required parameter 'collectionRid' is set
      if (collectionRid === undefined || collectionRid === null) {
        throw new Error("Missing the required parameter 'collectionRid' when calling collectionListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling collectionListMetrics");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling collectionListMetrics");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseRid': databaseRid,
        'collectionRid': collectionRid
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionListUsages operation.
     * @callback module:api/DefaultApi~collectionListUsagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsagesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the usages (most recent storage data) for the given collection.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseRid Cosmos DB database rid.
     * @param {String} collectionRid Cosmos DB collection rid.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).
     * @param {module:api/DefaultApi~collectionListUsagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsagesResult}
     */
    collectionListUsages(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling collectionListUsages");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling collectionListUsages");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling collectionListUsages");
      }
      // verify the required parameter 'databaseRid' is set
      if (databaseRid === undefined || databaseRid === null) {
        throw new Error("Missing the required parameter 'databaseRid' when calling collectionListUsages");
      }
      // verify the required parameter 'collectionRid' is set
      if (collectionRid === undefined || collectionRid === null) {
        throw new Error("Missing the required parameter 'collectionRid' when calling collectionListUsages");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling collectionListUsages");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseRid': databaseRid,
        'collectionRid': collectionRid
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsagesResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/usages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionPartitionListMetrics operation.
     * @callback module:api/DefaultApi~collectionPartitionListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartitionMetricListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metrics determined by the given filter for the given collection, split by partition.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseRid Cosmos DB database rid.
     * @param {String} collectionRid Cosmos DB collection rid.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {String} filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param {module:api/DefaultApi~collectionPartitionListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartitionMetricListResult}
     */
    collectionPartitionListMetrics(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, filter, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling collectionPartitionListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling collectionPartitionListMetrics");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling collectionPartitionListMetrics");
      }
      // verify the required parameter 'databaseRid' is set
      if (databaseRid === undefined || databaseRid === null) {
        throw new Error("Missing the required parameter 'databaseRid' when calling collectionPartitionListMetrics");
      }
      // verify the required parameter 'collectionRid' is set
      if (collectionRid === undefined || collectionRid === null) {
        throw new Error("Missing the required parameter 'collectionRid' when calling collectionPartitionListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling collectionPartitionListMetrics");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling collectionPartitionListMetrics");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseRid': databaseRid,
        'collectionRid': collectionRid
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PartitionMetricListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitions/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionPartitionListUsages operation.
     * @callback module:api/DefaultApi~collectionPartitionListUsagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartitionUsagesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the usages (most recent storage data) for the given collection, split by partition.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseRid Cosmos DB database rid.
     * @param {String} collectionRid Cosmos DB collection rid.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).
     * @param {module:api/DefaultApi~collectionPartitionListUsagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartitionUsagesResult}
     */
    collectionPartitionListUsages(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling collectionPartitionListUsages");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling collectionPartitionListUsages");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling collectionPartitionListUsages");
      }
      // verify the required parameter 'databaseRid' is set
      if (databaseRid === undefined || databaseRid === null) {
        throw new Error("Missing the required parameter 'databaseRid' when calling collectionPartitionListUsages");
      }
      // verify the required parameter 'collectionRid' is set
      if (collectionRid === undefined || collectionRid === null) {
        throw new Error("Missing the required parameter 'collectionRid' when calling collectionPartitionListUsages");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling collectionPartitionListUsages");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseRid': databaseRid,
        'collectionRid': collectionRid
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PartitionUsagesResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitions/usages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionPartitionRegionListMetrics operation.
     * @callback module:api/DefaultApi~collectionPartitionRegionListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartitionMetricListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metrics determined by the given filter for the given collection and region, split by partition.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} region Cosmos DB region, with spaces between words and each word capitalized.
     * @param {String} databaseRid Cosmos DB database rid.
     * @param {String} collectionRid Cosmos DB collection rid.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {String} filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param {module:api/DefaultApi~collectionPartitionRegionListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartitionMetricListResult}
     */
    collectionPartitionRegionListMetrics(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, apiVersion, filter, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling collectionPartitionRegionListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling collectionPartitionRegionListMetrics");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling collectionPartitionRegionListMetrics");
      }
      // verify the required parameter 'region' is set
      if (region === undefined || region === null) {
        throw new Error("Missing the required parameter 'region' when calling collectionPartitionRegionListMetrics");
      }
      // verify the required parameter 'databaseRid' is set
      if (databaseRid === undefined || databaseRid === null) {
        throw new Error("Missing the required parameter 'databaseRid' when calling collectionPartitionRegionListMetrics");
      }
      // verify the required parameter 'collectionRid' is set
      if (collectionRid === undefined || collectionRid === null) {
        throw new Error("Missing the required parameter 'collectionRid' when calling collectionPartitionRegionListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling collectionPartitionRegionListMetrics");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling collectionPartitionRegionListMetrics");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'region': region,
        'databaseRid': databaseRid,
        'collectionRid': collectionRid
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PartitionMetricListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/partitions/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionRegionListMetrics operation.
     * @callback module:api/DefaultApi~collectionRegionListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metrics determined by the given filter for the given database account, collection and region.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} region Cosmos DB region, with spaces between words and each word capitalized.
     * @param {String} databaseRid Cosmos DB database rid.
     * @param {String} collectionRid Cosmos DB collection rid.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {String} filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param {module:api/DefaultApi~collectionRegionListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricListResult}
     */
    collectionRegionListMetrics(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, apiVersion, filter, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling collectionRegionListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling collectionRegionListMetrics");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling collectionRegionListMetrics");
      }
      // verify the required parameter 'region' is set
      if (region === undefined || region === null) {
        throw new Error("Missing the required parameter 'region' when calling collectionRegionListMetrics");
      }
      // verify the required parameter 'databaseRid' is set
      if (databaseRid === undefined || databaseRid === null) {
        throw new Error("Missing the required parameter 'databaseRid' when calling collectionRegionListMetrics");
      }
      // verify the required parameter 'collectionRid' is set
      if (collectionRid === undefined || collectionRid === null) {
        throw new Error("Missing the required parameter 'collectionRid' when calling collectionRegionListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling collectionRegionListMetrics");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling collectionRegionListMetrics");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'region': region,
        'databaseRid': databaseRid,
        'collectionRid': collectionRid
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountRegionListMetrics operation.
     * @callback module:api/DefaultApi~databaseAccountRegionListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metrics determined by the given filter for the given database account and region.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} region Cosmos DB region, with spaces between words and each word capitalized.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {String} filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param {module:api/DefaultApi~databaseAccountRegionListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricListResult}
     */
    databaseAccountRegionListMetrics(subscriptionId, resourceGroupName, accountName, region, apiVersion, filter, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountRegionListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountRegionListMetrics");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountRegionListMetrics");
      }
      // verify the required parameter 'region' is set
      if (region === undefined || region === null) {
        throw new Error("Missing the required parameter 'region' when calling databaseAccountRegionListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountRegionListMetrics");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling databaseAccountRegionListMetrics");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'region': region
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsCheckNameExists operation.
     * @callback module:api/DefaultApi~databaseAccountsCheckNameExistsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only lowercase letters, numbers, and the '-' character, and must be between 3 and 50 characters.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsCheckNameExistsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    databaseAccountsCheckNameExists(accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsCheckNameExists");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsCheckNameExists");
      }

      let pathParams = {
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.DocumentDB/databaseAccountNames/{accountName}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsCreateOrUpdate operation.
     * @callback module:api/DefaultApi~databaseAccountsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates an Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:model/DatabaseAccountCreateUpdateParameters} createUpdateParameters The parameters to provide for the current database account.
     * @param {module:api/DefaultApi~databaseAccountsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseAccount}
     */
    databaseAccountsCreateOrUpdate(subscriptionId, resourceGroupName, accountName, apiVersion, createUpdateParameters, callback) {
      let postBody = createUpdateParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsCreateOrUpdate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsCreateOrUpdate");
      }
      // verify the required parameter 'createUpdateParameters' is set
      if (createUpdateParameters === undefined || createUpdateParameters === null) {
        throw new Error("Missing the required parameter 'createUpdateParameters' when calling databaseAccountsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DatabaseAccount;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsCreateUpdateCassandraKeyspace operation.
     * @callback module:api/DefaultApi~databaseAccountsCreateUpdateCassandraKeyspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CassandraKeyspace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an Azure Cosmos DB Cassandra keyspace
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} keyspaceName Cosmos DB keyspace name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:model/CassandraKeyspaceCreateUpdateParameters} createUpdateCassandraKeyspaceParameters The parameters to provide for the current Cassandra keyspace.
     * @param {module:api/DefaultApi~databaseAccountsCreateUpdateCassandraKeyspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CassandraKeyspace}
     */
    databaseAccountsCreateUpdateCassandraKeyspace(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, createUpdateCassandraKeyspaceParameters, callback) {
      let postBody = createUpdateCassandraKeyspaceParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsCreateUpdateCassandraKeyspace");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsCreateUpdateCassandraKeyspace");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsCreateUpdateCassandraKeyspace");
      }
      // verify the required parameter 'keyspaceName' is set
      if (keyspaceName === undefined || keyspaceName === null) {
        throw new Error("Missing the required parameter 'keyspaceName' when calling databaseAccountsCreateUpdateCassandraKeyspace");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsCreateUpdateCassandraKeyspace");
      }
      // verify the required parameter 'createUpdateCassandraKeyspaceParameters' is set
      if (createUpdateCassandraKeyspaceParameters === undefined || createUpdateCassandraKeyspaceParameters === null) {
        throw new Error("Missing the required parameter 'createUpdateCassandraKeyspaceParameters' when calling databaseAccountsCreateUpdateCassandraKeyspace");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'keyspaceName': keyspaceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CassandraKeyspace;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsCreateUpdateCassandraTable operation.
     * @callback module:api/DefaultApi~databaseAccountsCreateUpdateCassandraTableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CassandraTable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an Azure Cosmos DB Cassandra Table
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} keyspaceName Cosmos DB keyspace name.
     * @param {String} tableName Cosmos DB table name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:model/CassandraTableCreateUpdateParameters} createUpdateCassandraTableParameters The parameters to provide for the current Cassandra Table.
     * @param {module:api/DefaultApi~databaseAccountsCreateUpdateCassandraTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CassandraTable}
     */
    databaseAccountsCreateUpdateCassandraTable(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, createUpdateCassandraTableParameters, callback) {
      let postBody = createUpdateCassandraTableParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsCreateUpdateCassandraTable");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsCreateUpdateCassandraTable");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsCreateUpdateCassandraTable");
      }
      // verify the required parameter 'keyspaceName' is set
      if (keyspaceName === undefined || keyspaceName === null) {
        throw new Error("Missing the required parameter 'keyspaceName' when calling databaseAccountsCreateUpdateCassandraTable");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling databaseAccountsCreateUpdateCassandraTable");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsCreateUpdateCassandraTable");
      }
      // verify the required parameter 'createUpdateCassandraTableParameters' is set
      if (createUpdateCassandraTableParameters === undefined || createUpdateCassandraTableParameters === null) {
        throw new Error("Missing the required parameter 'createUpdateCassandraTableParameters' when calling databaseAccountsCreateUpdateCassandraTable");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'keyspaceName': keyspaceName,
        'tableName': tableName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CassandraTable;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceName}/tables/{tableName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsCreateUpdateGremlinDatabase operation.
     * @callback module:api/DefaultApi~databaseAccountsCreateUpdateGremlinDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GremlinDatabase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an Azure Cosmos DB Gremlin database
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:model/GremlinDatabaseCreateUpdateParameters} createUpdateGremlinDatabaseParameters The parameters to provide for the current Gremlin database.
     * @param {module:api/DefaultApi~databaseAccountsCreateUpdateGremlinDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GremlinDatabase}
     */
    databaseAccountsCreateUpdateGremlinDatabase(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateGremlinDatabaseParameters, callback) {
      let postBody = createUpdateGremlinDatabaseParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsCreateUpdateGremlinDatabase");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsCreateUpdateGremlinDatabase");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsCreateUpdateGremlinDatabase");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsCreateUpdateGremlinDatabase");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsCreateUpdateGremlinDatabase");
      }
      // verify the required parameter 'createUpdateGremlinDatabaseParameters' is set
      if (createUpdateGremlinDatabaseParameters === undefined || createUpdateGremlinDatabaseParameters === null) {
        throw new Error("Missing the required parameter 'createUpdateGremlinDatabaseParameters' when calling databaseAccountsCreateUpdateGremlinDatabase");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GremlinDatabase;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsCreateUpdateGremlinGraph operation.
     * @callback module:api/DefaultApi~databaseAccountsCreateUpdateGremlinGraphCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GremlinGraph} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an Azure Cosmos DB Gremlin graph
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} graphName Cosmos DB graph name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:model/GremlinGraphCreateUpdateParameters} createUpdateGremlinGraphParameters The parameters to provide for the current Gremlin graph.
     * @param {module:api/DefaultApi~databaseAccountsCreateUpdateGremlinGraphCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GremlinGraph}
     */
    databaseAccountsCreateUpdateGremlinGraph(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, createUpdateGremlinGraphParameters, callback) {
      let postBody = createUpdateGremlinGraphParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsCreateUpdateGremlinGraph");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsCreateUpdateGremlinGraph");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsCreateUpdateGremlinGraph");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsCreateUpdateGremlinGraph");
      }
      // verify the required parameter 'graphName' is set
      if (graphName === undefined || graphName === null) {
        throw new Error("Missing the required parameter 'graphName' when calling databaseAccountsCreateUpdateGremlinGraph");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsCreateUpdateGremlinGraph");
      }
      // verify the required parameter 'createUpdateGremlinGraphParameters' is set
      if (createUpdateGremlinGraphParameters === undefined || createUpdateGremlinGraphParameters === null) {
        throw new Error("Missing the required parameter 'createUpdateGremlinGraphParameters' when calling databaseAccountsCreateUpdateGremlinGraph");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'graphName': graphName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GremlinGraph;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseName}/graphs/{graphName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsCreateUpdateMongoDBCollection operation.
     * @callback module:api/DefaultApi~databaseAccountsCreateUpdateMongoDBCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MongoDBCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an Azure Cosmos DB MongoDB Collection
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} collectionName Cosmos DB collection name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:model/MongoDBCollectionCreateUpdateParameters} createUpdateMongoDBCollectionParameters The parameters to provide for the current MongoDB Collection.
     * @param {module:api/DefaultApi~databaseAccountsCreateUpdateMongoDBCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MongoDBCollection}
     */
    databaseAccountsCreateUpdateMongoDBCollection(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, createUpdateMongoDBCollectionParameters, callback) {
      let postBody = createUpdateMongoDBCollectionParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsCreateUpdateMongoDBCollection");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsCreateUpdateMongoDBCollection");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsCreateUpdateMongoDBCollection");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsCreateUpdateMongoDBCollection");
      }
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling databaseAccountsCreateUpdateMongoDBCollection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsCreateUpdateMongoDBCollection");
      }
      // verify the required parameter 'createUpdateMongoDBCollectionParameters' is set
      if (createUpdateMongoDBCollectionParameters === undefined || createUpdateMongoDBCollectionParameters === null) {
        throw new Error("Missing the required parameter 'createUpdateMongoDBCollectionParameters' when calling databaseAccountsCreateUpdateMongoDBCollection");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'collectionName': collectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MongoDBCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases/{databaseName}/collections/{collectionName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsCreateUpdateMongoDBDatabase operation.
     * @callback module:api/DefaultApi~databaseAccountsCreateUpdateMongoDBDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MongoDBDatabase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or updates Azure Cosmos DB MongoDB database
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:model/MongoDBDatabaseCreateUpdateParameters} createUpdateMongoDBDatabaseParameters The parameters to provide for the current MongoDB database.
     * @param {module:api/DefaultApi~databaseAccountsCreateUpdateMongoDBDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MongoDBDatabase}
     */
    databaseAccountsCreateUpdateMongoDBDatabase(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateMongoDBDatabaseParameters, callback) {
      let postBody = createUpdateMongoDBDatabaseParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsCreateUpdateMongoDBDatabase");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsCreateUpdateMongoDBDatabase");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsCreateUpdateMongoDBDatabase");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsCreateUpdateMongoDBDatabase");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsCreateUpdateMongoDBDatabase");
      }
      // verify the required parameter 'createUpdateMongoDBDatabaseParameters' is set
      if (createUpdateMongoDBDatabaseParameters === undefined || createUpdateMongoDBDatabaseParameters === null) {
        throw new Error("Missing the required parameter 'createUpdateMongoDBDatabaseParameters' when calling databaseAccountsCreateUpdateMongoDBDatabase");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MongoDBDatabase;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases/{databaseName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsCreateUpdateSqlContainer operation.
     * @callback module:api/DefaultApi~databaseAccountsCreateUpdateSqlContainerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SqlContainer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an Azure Cosmos DB SQL container
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} containerName Cosmos DB container name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:model/SqlContainerCreateUpdateParameters} createUpdateSqlContainerParameters The parameters to provide for the current SQL container.
     * @param {module:api/DefaultApi~databaseAccountsCreateUpdateSqlContainerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SqlContainer}
     */
    databaseAccountsCreateUpdateSqlContainer(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, createUpdateSqlContainerParameters, callback) {
      let postBody = createUpdateSqlContainerParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsCreateUpdateSqlContainer");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsCreateUpdateSqlContainer");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsCreateUpdateSqlContainer");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsCreateUpdateSqlContainer");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling databaseAccountsCreateUpdateSqlContainer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsCreateUpdateSqlContainer");
      }
      // verify the required parameter 'createUpdateSqlContainerParameters' is set
      if (createUpdateSqlContainerParameters === undefined || createUpdateSqlContainerParameters === null) {
        throw new Error("Missing the required parameter 'createUpdateSqlContainerParameters' when calling databaseAccountsCreateUpdateSqlContainer");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'containerName': containerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SqlContainer;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseName}/containers/{containerName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsCreateUpdateSqlDatabase operation.
     * @callback module:api/DefaultApi~databaseAccountsCreateUpdateSqlDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SqlDatabase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an Azure Cosmos DB SQL database
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:model/SqlDatabaseCreateUpdateParameters} createUpdateSqlDatabaseParameters The parameters to provide for the current SQL database.
     * @param {module:api/DefaultApi~databaseAccountsCreateUpdateSqlDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SqlDatabase}
     */
    databaseAccountsCreateUpdateSqlDatabase(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, createUpdateSqlDatabaseParameters, callback) {
      let postBody = createUpdateSqlDatabaseParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsCreateUpdateSqlDatabase");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsCreateUpdateSqlDatabase");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsCreateUpdateSqlDatabase");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsCreateUpdateSqlDatabase");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsCreateUpdateSqlDatabase");
      }
      // verify the required parameter 'createUpdateSqlDatabaseParameters' is set
      if (createUpdateSqlDatabaseParameters === undefined || createUpdateSqlDatabaseParameters === null) {
        throw new Error("Missing the required parameter 'createUpdateSqlDatabaseParameters' when calling databaseAccountsCreateUpdateSqlDatabase");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SqlDatabase;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsCreateUpdateTable operation.
     * @callback module:api/DefaultApi~databaseAccountsCreateUpdateTableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Table} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an Azure Cosmos DB Table
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} tableName Cosmos DB table name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:model/TableCreateUpdateParameters} createUpdateTableParameters The parameters to provide for the current Table.
     * @param {module:api/DefaultApi~databaseAccountsCreateUpdateTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Table}
     */
    databaseAccountsCreateUpdateTable(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, createUpdateTableParameters, callback) {
      let postBody = createUpdateTableParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsCreateUpdateTable");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsCreateUpdateTable");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsCreateUpdateTable");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling databaseAccountsCreateUpdateTable");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsCreateUpdateTable");
      }
      // verify the required parameter 'createUpdateTableParameters' is set
      if (createUpdateTableParameters === undefined || createUpdateTableParameters === null) {
        throw new Error("Missing the required parameter 'createUpdateTableParameters' when calling databaseAccountsCreateUpdateTable");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'tableName': tableName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Table;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/table/tables/{tableName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsDelete operation.
     * @callback module:api/DefaultApi~databaseAccountsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    databaseAccountsDelete(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsDelete");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsDeleteCassandraKeyspace operation.
     * @callback module:api/DefaultApi~databaseAccountsDeleteCassandraKeyspaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Azure Cosmos DB Cassandra keyspace.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} keyspaceName Cosmos DB keyspace name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsDeleteCassandraKeyspaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    databaseAccountsDeleteCassandraKeyspace(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsDeleteCassandraKeyspace");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsDeleteCassandraKeyspace");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsDeleteCassandraKeyspace");
      }
      // verify the required parameter 'keyspaceName' is set
      if (keyspaceName === undefined || keyspaceName === null) {
        throw new Error("Missing the required parameter 'keyspaceName' when calling databaseAccountsDeleteCassandraKeyspace");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsDeleteCassandraKeyspace");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'keyspaceName': keyspaceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsDeleteCassandraTable operation.
     * @callback module:api/DefaultApi~databaseAccountsDeleteCassandraTableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Azure Cosmos DB Cassandra table.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} keyspaceName Cosmos DB keyspace name.
     * @param {String} tableName Cosmos DB table name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsDeleteCassandraTableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    databaseAccountsDeleteCassandraTable(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsDeleteCassandraTable");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsDeleteCassandraTable");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsDeleteCassandraTable");
      }
      // verify the required parameter 'keyspaceName' is set
      if (keyspaceName === undefined || keyspaceName === null) {
        throw new Error("Missing the required parameter 'keyspaceName' when calling databaseAccountsDeleteCassandraTable");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling databaseAccountsDeleteCassandraTable");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsDeleteCassandraTable");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'keyspaceName': keyspaceName,
        'tableName': tableName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceName}/tables/{tableName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsDeleteGremlinDatabase operation.
     * @callback module:api/DefaultApi~databaseAccountsDeleteGremlinDatabaseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Azure Cosmos DB Gremlin database.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsDeleteGremlinDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    databaseAccountsDeleteGremlinDatabase(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsDeleteGremlinDatabase");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsDeleteGremlinDatabase");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsDeleteGremlinDatabase");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsDeleteGremlinDatabase");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsDeleteGremlinDatabase");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsDeleteGremlinGraph operation.
     * @callback module:api/DefaultApi~databaseAccountsDeleteGremlinGraphCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Azure Cosmos DB Gremlin graph.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} graphName Cosmos DB graph name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsDeleteGremlinGraphCallback} callback The callback function, accepting three arguments: error, data, response
     */
    databaseAccountsDeleteGremlinGraph(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsDeleteGremlinGraph");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsDeleteGremlinGraph");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsDeleteGremlinGraph");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsDeleteGremlinGraph");
      }
      // verify the required parameter 'graphName' is set
      if (graphName === undefined || graphName === null) {
        throw new Error("Missing the required parameter 'graphName' when calling databaseAccountsDeleteGremlinGraph");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsDeleteGremlinGraph");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'graphName': graphName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseName}/graphs/{graphName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsDeleteMongoDBCollection operation.
     * @callback module:api/DefaultApi~databaseAccountsDeleteMongoDBCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Azure Cosmos DB MongoDB Collection.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} collectionName Cosmos DB collection name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsDeleteMongoDBCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    databaseAccountsDeleteMongoDBCollection(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsDeleteMongoDBCollection");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsDeleteMongoDBCollection");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsDeleteMongoDBCollection");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsDeleteMongoDBCollection");
      }
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling databaseAccountsDeleteMongoDBCollection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsDeleteMongoDBCollection");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'collectionName': collectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases/{databaseName}/collections/{collectionName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsDeleteMongoDBDatabase operation.
     * @callback module:api/DefaultApi~databaseAccountsDeleteMongoDBDatabaseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Azure Cosmos DB MongoDB database.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsDeleteMongoDBDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    databaseAccountsDeleteMongoDBDatabase(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsDeleteMongoDBDatabase");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsDeleteMongoDBDatabase");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsDeleteMongoDBDatabase");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsDeleteMongoDBDatabase");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsDeleteMongoDBDatabase");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases/{databaseName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsDeleteSqlContainer operation.
     * @callback module:api/DefaultApi~databaseAccountsDeleteSqlContainerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Azure Cosmos DB SQL container.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} containerName Cosmos DB container name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsDeleteSqlContainerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    databaseAccountsDeleteSqlContainer(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsDeleteSqlContainer");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsDeleteSqlContainer");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsDeleteSqlContainer");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsDeleteSqlContainer");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling databaseAccountsDeleteSqlContainer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsDeleteSqlContainer");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'containerName': containerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseName}/containers/{containerName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsDeleteSqlDatabase operation.
     * @callback module:api/DefaultApi~databaseAccountsDeleteSqlDatabaseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Azure Cosmos DB SQL database.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsDeleteSqlDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    databaseAccountsDeleteSqlDatabase(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsDeleteSqlDatabase");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsDeleteSqlDatabase");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsDeleteSqlDatabase");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsDeleteSqlDatabase");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsDeleteSqlDatabase");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsDeleteTable operation.
     * @callback module:api/DefaultApi~databaseAccountsDeleteTableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Azure Cosmos DB Table.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} tableName Cosmos DB table name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsDeleteTableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    databaseAccountsDeleteTable(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsDeleteTable");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsDeleteTable");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsDeleteTable");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling databaseAccountsDeleteTable");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsDeleteTable");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'tableName': tableName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/table/tables/{tableName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsFailoverPriorityChange operation.
     * @callback module:api/DefaultApi~databaseAccountsFailoverPriorityChangeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes the failover priority for the Azure Cosmos DB database account. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:model/FailoverPolicies} failoverParameters The new failover policies for the database account.
     * @param {module:api/DefaultApi~databaseAccountsFailoverPriorityChangeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    databaseAccountsFailoverPriorityChange(subscriptionId, resourceGroupName, accountName, apiVersion, failoverParameters, callback) {
      let postBody = failoverParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsFailoverPriorityChange");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsFailoverPriorityChange");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsFailoverPriorityChange");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsFailoverPriorityChange");
      }
      // verify the required parameter 'failoverParameters' is set
      if (failoverParameters === undefined || failoverParameters === null) {
        throw new Error("Missing the required parameter 'failoverParameters' when calling databaseAccountsFailoverPriorityChange");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/failoverPriorityChange', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsGet operation.
     * @callback module:api/DefaultApi~databaseAccountsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the properties of an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseAccount}
     */
    databaseAccountsGet(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGet");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseAccount;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsGetCassandraKeyspace operation.
     * @callback module:api/DefaultApi~databaseAccountsGetCassandraKeyspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CassandraKeyspace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Cassandra keyspaces under an existing Azure Cosmos DB database account with the provided name.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} keyspaceName Cosmos DB keyspace name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsGetCassandraKeyspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CassandraKeyspace}
     */
    databaseAccountsGetCassandraKeyspace(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetCassandraKeyspace");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetCassandraKeyspace");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsGetCassandraKeyspace");
      }
      // verify the required parameter 'keyspaceName' is set
      if (keyspaceName === undefined || keyspaceName === null) {
        throw new Error("Missing the required parameter 'keyspaceName' when calling databaseAccountsGetCassandraKeyspace");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsGetCassandraKeyspace");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'keyspaceName': keyspaceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CassandraKeyspace;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsGetCassandraKeyspaceThroughput operation.
     * @callback module:api/DefaultApi~databaseAccountsGetCassandraKeyspaceThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Throughput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the RUs per second of the Cassandra Keyspace under an existing Azure Cosmos DB database account with the provided name.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} keyspaceName Cosmos DB keyspace name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsGetCassandraKeyspaceThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Throughput}
     */
    databaseAccountsGetCassandraKeyspaceThroughput(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetCassandraKeyspaceThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetCassandraKeyspaceThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsGetCassandraKeyspaceThroughput");
      }
      // verify the required parameter 'keyspaceName' is set
      if (keyspaceName === undefined || keyspaceName === null) {
        throw new Error("Missing the required parameter 'keyspaceName' when calling databaseAccountsGetCassandraKeyspaceThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsGetCassandraKeyspaceThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'keyspaceName': keyspaceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Throughput;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceName}/settings/throughput', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsGetCassandraTable operation.
     * @callback module:api/DefaultApi~databaseAccountsGetCassandraTableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CassandraTable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Cassandra table under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} keyspaceName Cosmos DB keyspace name.
     * @param {String} tableName Cosmos DB table name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsGetCassandraTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CassandraTable}
     */
    databaseAccountsGetCassandraTable(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetCassandraTable");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetCassandraTable");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsGetCassandraTable");
      }
      // verify the required parameter 'keyspaceName' is set
      if (keyspaceName === undefined || keyspaceName === null) {
        throw new Error("Missing the required parameter 'keyspaceName' when calling databaseAccountsGetCassandraTable");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling databaseAccountsGetCassandraTable");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsGetCassandraTable");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'keyspaceName': keyspaceName,
        'tableName': tableName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CassandraTable;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceName}/tables/{tableName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsGetCassandraTableThroughput operation.
     * @callback module:api/DefaultApi~databaseAccountsGetCassandraTableThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Throughput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the RUs per second of the Cassandra table under an existing Azure Cosmos DB database account with the provided name.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} keyspaceName Cosmos DB keyspace name.
     * @param {String} tableName Cosmos DB table name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsGetCassandraTableThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Throughput}
     */
    databaseAccountsGetCassandraTableThroughput(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetCassandraTableThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetCassandraTableThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsGetCassandraTableThroughput");
      }
      // verify the required parameter 'keyspaceName' is set
      if (keyspaceName === undefined || keyspaceName === null) {
        throw new Error("Missing the required parameter 'keyspaceName' when calling databaseAccountsGetCassandraTableThroughput");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling databaseAccountsGetCassandraTableThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsGetCassandraTableThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'keyspaceName': keyspaceName,
        'tableName': tableName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Throughput;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceName}/tables/{tableName}/settings/throughput', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsGetGremlinDatabase operation.
     * @callback module:api/DefaultApi~databaseAccountsGetGremlinDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GremlinDatabase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Gremlin databases under an existing Azure Cosmos DB database account with the provided name.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsGetGremlinDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GremlinDatabase}
     */
    databaseAccountsGetGremlinDatabase(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetGremlinDatabase");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetGremlinDatabase");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsGetGremlinDatabase");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsGetGremlinDatabase");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsGetGremlinDatabase");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GremlinDatabase;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsGetGremlinDatabaseThroughput operation.
     * @callback module:api/DefaultApi~databaseAccountsGetGremlinDatabaseThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Throughput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the RUs per second of the Gremlin database under an existing Azure Cosmos DB database account with the provided name.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsGetGremlinDatabaseThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Throughput}
     */
    databaseAccountsGetGremlinDatabaseThroughput(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetGremlinDatabaseThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetGremlinDatabaseThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsGetGremlinDatabaseThroughput");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsGetGremlinDatabaseThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsGetGremlinDatabaseThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Throughput;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseName}/settings/throughput', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsGetGremlinGraph operation.
     * @callback module:api/DefaultApi~databaseAccountsGetGremlinGraphCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GremlinGraph} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Gremlin graph under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} graphName Cosmos DB graph name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsGetGremlinGraphCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GremlinGraph}
     */
    databaseAccountsGetGremlinGraph(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetGremlinGraph");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetGremlinGraph");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsGetGremlinGraph");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsGetGremlinGraph");
      }
      // verify the required parameter 'graphName' is set
      if (graphName === undefined || graphName === null) {
        throw new Error("Missing the required parameter 'graphName' when calling databaseAccountsGetGremlinGraph");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsGetGremlinGraph");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'graphName': graphName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GremlinGraph;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseName}/graphs/{graphName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsGetGremlinGraphThroughput operation.
     * @callback module:api/DefaultApi~databaseAccountsGetGremlinGraphThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Throughput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Gremlin graph throughput under an existing Azure Cosmos DB database account with the provided name.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} graphName Cosmos DB graph name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsGetGremlinGraphThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Throughput}
     */
    databaseAccountsGetGremlinGraphThroughput(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetGremlinGraphThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetGremlinGraphThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsGetGremlinGraphThroughput");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsGetGremlinGraphThroughput");
      }
      // verify the required parameter 'graphName' is set
      if (graphName === undefined || graphName === null) {
        throw new Error("Missing the required parameter 'graphName' when calling databaseAccountsGetGremlinGraphThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsGetGremlinGraphThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'graphName': graphName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Throughput;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseName}/graphs/{graphName}/settings/throughput', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsGetMongoDBCollection operation.
     * @callback module:api/DefaultApi~databaseAccountsGetMongoDBCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MongoDBCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the MongoDB collection under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} collectionName Cosmos DB collection name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsGetMongoDBCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MongoDBCollection}
     */
    databaseAccountsGetMongoDBCollection(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetMongoDBCollection");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetMongoDBCollection");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsGetMongoDBCollection");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsGetMongoDBCollection");
      }
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling databaseAccountsGetMongoDBCollection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsGetMongoDBCollection");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'collectionName': collectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MongoDBCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases/{databaseName}/collections/{collectionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsGetMongoDBCollectionThroughput operation.
     * @callback module:api/DefaultApi~databaseAccountsGetMongoDBCollectionThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Throughput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the RUs per second of the MongoDB collection under an existing Azure Cosmos DB database account with the provided name.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} collectionName Cosmos DB collection name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsGetMongoDBCollectionThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Throughput}
     */
    databaseAccountsGetMongoDBCollectionThroughput(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetMongoDBCollectionThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetMongoDBCollectionThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsGetMongoDBCollectionThroughput");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsGetMongoDBCollectionThroughput");
      }
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling databaseAccountsGetMongoDBCollectionThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsGetMongoDBCollectionThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'collectionName': collectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Throughput;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases/{databaseName}/collections/{collectionName}/settings/throughput', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsGetMongoDBDatabase operation.
     * @callback module:api/DefaultApi~databaseAccountsGetMongoDBDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MongoDBDatabase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the MongoDB databases under an existing Azure Cosmos DB database account with the provided name.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsGetMongoDBDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MongoDBDatabase}
     */
    databaseAccountsGetMongoDBDatabase(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetMongoDBDatabase");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetMongoDBDatabase");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsGetMongoDBDatabase");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsGetMongoDBDatabase");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsGetMongoDBDatabase");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MongoDBDatabase;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases/{databaseName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsGetMongoDBDatabaseThroughput operation.
     * @callback module:api/DefaultApi~databaseAccountsGetMongoDBDatabaseThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Throughput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the RUs per second of the MongoDB database under an existing Azure Cosmos DB database account with the provided name.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsGetMongoDBDatabaseThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Throughput}
     */
    databaseAccountsGetMongoDBDatabaseThroughput(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetMongoDBDatabaseThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetMongoDBDatabaseThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsGetMongoDBDatabaseThroughput");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsGetMongoDBDatabaseThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsGetMongoDBDatabaseThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Throughput;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases/{databaseName}/settings/throughput', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsGetReadOnlyKeys operation.
     * @callback module:api/DefaultApi~databaseAccountsGetReadOnlyKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseAccountListReadOnlyKeysResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the read-only access keys for the specified Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsGetReadOnlyKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseAccountListReadOnlyKeysResult}
     */
    databaseAccountsGetReadOnlyKeys(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetReadOnlyKeys");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetReadOnlyKeys");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsGetReadOnlyKeys");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsGetReadOnlyKeys");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseAccountListReadOnlyKeysResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/readonlykeys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsGetSqlContainer operation.
     * @callback module:api/DefaultApi~databaseAccountsGetSqlContainerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SqlContainer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the SQL container under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} containerName Cosmos DB container name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsGetSqlContainerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SqlContainer}
     */
    databaseAccountsGetSqlContainer(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetSqlContainer");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetSqlContainer");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsGetSqlContainer");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsGetSqlContainer");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling databaseAccountsGetSqlContainer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsGetSqlContainer");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'containerName': containerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SqlContainer;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseName}/containers/{containerName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsGetSqlContainerThroughput operation.
     * @callback module:api/DefaultApi~databaseAccountsGetSqlContainerThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Throughput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the RUs per second of the SQL container under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} containerName Cosmos DB container name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsGetSqlContainerThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Throughput}
     */
    databaseAccountsGetSqlContainerThroughput(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetSqlContainerThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetSqlContainerThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsGetSqlContainerThroughput");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsGetSqlContainerThroughput");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling databaseAccountsGetSqlContainerThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsGetSqlContainerThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'containerName': containerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Throughput;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseName}/containers/{containerName}/settings/throughput', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsGetSqlDatabase operation.
     * @callback module:api/DefaultApi~databaseAccountsGetSqlDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SqlDatabase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the SQL database under an existing Azure Cosmos DB database account with the provided name.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsGetSqlDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SqlDatabase}
     */
    databaseAccountsGetSqlDatabase(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetSqlDatabase");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetSqlDatabase");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsGetSqlDatabase");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsGetSqlDatabase");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsGetSqlDatabase");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SqlDatabase;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsGetSqlDatabaseThroughput operation.
     * @callback module:api/DefaultApi~databaseAccountsGetSqlDatabaseThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Throughput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the RUs per second of the SQL database under an existing Azure Cosmos DB database account with the provided name.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsGetSqlDatabaseThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Throughput}
     */
    databaseAccountsGetSqlDatabaseThroughput(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetSqlDatabaseThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetSqlDatabaseThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsGetSqlDatabaseThroughput");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsGetSqlDatabaseThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsGetSqlDatabaseThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Throughput;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseName}/settings/throughput', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsGetTable operation.
     * @callback module:api/DefaultApi~databaseAccountsGetTableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Table} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Tables under an existing Azure Cosmos DB database account with the provided name.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} tableName Cosmos DB table name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsGetTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Table}
     */
    databaseAccountsGetTable(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetTable");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetTable");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsGetTable");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling databaseAccountsGetTable");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsGetTable");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'tableName': tableName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Table;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/table/tables/{tableName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsGetTableThroughput operation.
     * @callback module:api/DefaultApi~databaseAccountsGetTableThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Throughput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the RUs per second of the Table under an existing Azure Cosmos DB database account with the provided name.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} tableName Cosmos DB table name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsGetTableThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Throughput}
     */
    databaseAccountsGetTableThroughput(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsGetTableThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsGetTableThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsGetTableThroughput");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling databaseAccountsGetTableThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsGetTableThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'tableName': tableName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Throughput;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/table/tables/{tableName}/settings/throughput', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsList operation.
     * @callback module:api/DefaultApi~databaseAccountsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseAccountsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the Azure Cosmos DB database accounts available under the subscription.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {module:api/DefaultApi~databaseAccountsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseAccountsListResult}
     */
    databaseAccountsList(apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseAccountsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/databaseAccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsListByResourceGroup operation.
     * @callback module:api/DefaultApi~databaseAccountsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseAccountsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the Azure Cosmos DB database accounts available under the given resource group.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {module:api/DefaultApi~databaseAccountsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseAccountsListResult}
     */
    databaseAccountsListByResourceGroup(resourceGroupName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsListByResourceGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseAccountsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsListCassandraKeyspaces operation.
     * @callback module:api/DefaultApi~databaseAccountsListCassandraKeyspacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CassandraKeyspaceListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsListCassandraKeyspacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CassandraKeyspaceListResult}
     */
    databaseAccountsListCassandraKeyspaces(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsListCassandraKeyspaces");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListCassandraKeyspaces");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsListCassandraKeyspaces");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsListCassandraKeyspaces");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CassandraKeyspaceListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsListCassandraTables operation.
     * @callback module:api/DefaultApi~databaseAccountsListCassandraTablesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CassandraTableListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the Cassandra table under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} keyspaceName Cosmos DB keyspace name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsListCassandraTablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CassandraTableListResult}
     */
    databaseAccountsListCassandraTables(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsListCassandraTables");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListCassandraTables");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsListCassandraTables");
      }
      // verify the required parameter 'keyspaceName' is set
      if (keyspaceName === undefined || keyspaceName === null) {
        throw new Error("Missing the required parameter 'keyspaceName' when calling databaseAccountsListCassandraTables");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsListCassandraTables");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'keyspaceName': keyspaceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CassandraTableListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceName}/tables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsListConnectionStrings operation.
     * @callback module:api/DefaultApi~databaseAccountsListConnectionStringsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseAccountListConnectionStringsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the connection strings for the specified Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsListConnectionStringsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseAccountListConnectionStringsResult}
     */
    databaseAccountsListConnectionStrings(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsListConnectionStrings");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListConnectionStrings");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsListConnectionStrings");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsListConnectionStrings");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseAccountListConnectionStringsResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/listConnectionStrings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsListGremlinDatabases operation.
     * @callback module:api/DefaultApi~databaseAccountsListGremlinDatabasesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GremlinDatabaseListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the Gremlin databases under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsListGremlinDatabasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GremlinDatabaseListResult}
     */
    databaseAccountsListGremlinDatabases(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsListGremlinDatabases");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListGremlinDatabases");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsListGremlinDatabases");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsListGremlinDatabases");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GremlinDatabaseListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsListGremlinGraphs operation.
     * @callback module:api/DefaultApi~databaseAccountsListGremlinGraphsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GremlinGraphListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the Gremlin graph under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsListGremlinGraphsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GremlinGraphListResult}
     */
    databaseAccountsListGremlinGraphs(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsListGremlinGraphs");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListGremlinGraphs");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsListGremlinGraphs");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsListGremlinGraphs");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsListGremlinGraphs");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GremlinGraphListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseName}/graphs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsListKeys operation.
     * @callback module:api/DefaultApi~databaseAccountsListKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseAccountListKeysResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the access keys for the specified Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsListKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseAccountListKeysResult}
     */
    databaseAccountsListKeys(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsListKeys");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListKeys");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsListKeys");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsListKeys");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseAccountListKeysResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/listKeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsListMetricDefinitions operation.
     * @callback module:api/DefaultApi~databaseAccountsListMetricDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricDefinitionsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves metric definitions for the given database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsListMetricDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricDefinitionsListResult}
     */
    databaseAccountsListMetricDefinitions(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsListMetricDefinitions");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListMetricDefinitions");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsListMetricDefinitions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsListMetricDefinitions");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricDefinitionsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/metricDefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsListMetrics operation.
     * @callback module:api/DefaultApi~databaseAccountsListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metrics determined by the given filter for the given database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {String} filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param {module:api/DefaultApi~databaseAccountsListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricListResult}
     */
    databaseAccountsListMetrics(subscriptionId, resourceGroupName, accountName, apiVersion, filter, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListMetrics");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsListMetrics");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling databaseAccountsListMetrics");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsListMongoDBCollections operation.
     * @callback module:api/DefaultApi~databaseAccountsListMongoDBCollectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MongoDBCollectionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the MongoDB collection under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsListMongoDBCollectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MongoDBCollectionListResult}
     */
    databaseAccountsListMongoDBCollections(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsListMongoDBCollections");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListMongoDBCollections");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsListMongoDBCollections");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsListMongoDBCollections");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsListMongoDBCollections");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MongoDBCollectionListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases/{databaseName}/collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsListMongoDBDatabases operation.
     * @callback module:api/DefaultApi~databaseAccountsListMongoDBDatabasesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MongoDBDatabaseListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the MongoDB databases under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsListMongoDBDatabasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MongoDBDatabaseListResult}
     */
    databaseAccountsListMongoDBDatabases(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsListMongoDBDatabases");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListMongoDBDatabases");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsListMongoDBDatabases");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsListMongoDBDatabases");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MongoDBDatabaseListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsListReadOnlyKeys operation.
     * @callback module:api/DefaultApi~databaseAccountsListReadOnlyKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseAccountListReadOnlyKeysResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the read-only access keys for the specified Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsListReadOnlyKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseAccountListReadOnlyKeysResult}
     */
    databaseAccountsListReadOnlyKeys(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsListReadOnlyKeys");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListReadOnlyKeys");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsListReadOnlyKeys");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsListReadOnlyKeys");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseAccountListReadOnlyKeysResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/readonlykeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsListSqlContainers operation.
     * @callback module:api/DefaultApi~databaseAccountsListSqlContainersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SqlContainerListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the SQL container under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsListSqlContainersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SqlContainerListResult}
     */
    databaseAccountsListSqlContainers(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsListSqlContainers");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListSqlContainers");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsListSqlContainers");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsListSqlContainers");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsListSqlContainers");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SqlContainerListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseName}/containers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsListSqlDatabases operation.
     * @callback module:api/DefaultApi~databaseAccountsListSqlDatabasesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SqlDatabaseListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the SQL databases under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsListSqlDatabasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SqlDatabaseListResult}
     */
    databaseAccountsListSqlDatabases(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsListSqlDatabases");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListSqlDatabases");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsListSqlDatabases");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsListSqlDatabases");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SqlDatabaseListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsListTables operation.
     * @callback module:api/DefaultApi~databaseAccountsListTablesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TableListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the Tables under an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseAccountsListTablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TableListResult}
     */
    databaseAccountsListTables(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsListTables");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListTables");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsListTables");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsListTables");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TableListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/table/tables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsListUsages operation.
     * @callback module:api/DefaultApi~databaseAccountsListUsagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsagesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the usages (most recent data) for the given database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).
     * @param {module:api/DefaultApi~databaseAccountsListUsagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsagesResult}
     */
    databaseAccountsListUsages(subscriptionId, resourceGroupName, accountName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsListUsages");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsListUsages");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsListUsages");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsListUsages");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsagesResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/usages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsOfflineRegion operation.
     * @callback module:api/DefaultApi~databaseAccountsOfflineRegionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Offline the specified region for the specified Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:model/RegionForOnlineOffline} regionParameterForOffline Cosmos DB region to offline for the database account.
     * @param {module:api/DefaultApi~databaseAccountsOfflineRegionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    databaseAccountsOfflineRegion(subscriptionId, resourceGroupName, accountName, apiVersion, regionParameterForOffline, callback) {
      let postBody = regionParameterForOffline;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsOfflineRegion");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsOfflineRegion");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsOfflineRegion");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsOfflineRegion");
      }
      // verify the required parameter 'regionParameterForOffline' is set
      if (regionParameterForOffline === undefined || regionParameterForOffline === null) {
        throw new Error("Missing the required parameter 'regionParameterForOffline' when calling databaseAccountsOfflineRegion");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/offlineRegion', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsOnlineRegion operation.
     * @callback module:api/DefaultApi~databaseAccountsOnlineRegionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Online the specified region for the specified Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:model/RegionForOnlineOffline} regionParameterForOnline Cosmos DB region to online for the database account.
     * @param {module:api/DefaultApi~databaseAccountsOnlineRegionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    databaseAccountsOnlineRegion(subscriptionId, resourceGroupName, accountName, apiVersion, regionParameterForOnline, callback) {
      let postBody = regionParameterForOnline;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsOnlineRegion");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsOnlineRegion");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsOnlineRegion");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsOnlineRegion");
      }
      // verify the required parameter 'regionParameterForOnline' is set
      if (regionParameterForOnline === undefined || regionParameterForOnline === null) {
        throw new Error("Missing the required parameter 'regionParameterForOnline' when calling databaseAccountsOnlineRegion");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/onlineRegion', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsPatch operation.
     * @callback module:api/DefaultApi~databaseAccountsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patches the properties of an existing Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:model/DatabaseAccountPatchParameters} updateParameters The tags parameter to patch for the current database account.
     * @param {module:api/DefaultApi~databaseAccountsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseAccount}
     */
    databaseAccountsPatch(subscriptionId, resourceGroupName, accountName, apiVersion, updateParameters, callback) {
      let postBody = updateParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsPatch");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsPatch");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsPatch");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsPatch");
      }
      // verify the required parameter 'updateParameters' is set
      if (updateParameters === undefined || updateParameters === null) {
        throw new Error("Missing the required parameter 'updateParameters' when calling databaseAccountsPatch");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DatabaseAccount;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsRegenerateKey operation.
     * @callback module:api/DefaultApi~databaseAccountsRegenerateKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Regenerates an access key for the specified Azure Cosmos DB database account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:model/DatabaseAccountRegenerateKeyParameters} keyToRegenerate The name of the key to regenerate.
     * @param {module:api/DefaultApi~databaseAccountsRegenerateKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    databaseAccountsRegenerateKey(subscriptionId, resourceGroupName, accountName, apiVersion, keyToRegenerate, callback) {
      let postBody = keyToRegenerate;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsRegenerateKey");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsRegenerateKey");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsRegenerateKey");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsRegenerateKey");
      }
      // verify the required parameter 'keyToRegenerate' is set
      if (keyToRegenerate === undefined || keyToRegenerate === null) {
        throw new Error("Missing the required parameter 'keyToRegenerate' when calling databaseAccountsRegenerateKey");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/regenerateKey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsUpdateCassandraKeyspaceThroughput operation.
     * @callback module:api/DefaultApi~databaseAccountsUpdateCassandraKeyspaceThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Throughput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update RUs per second of an Azure Cosmos DB Cassandra Keyspace
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} keyspaceName Cosmos DB keyspace name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:model/ThroughputUpdateParameters} updateThroughputParameters The RUs per second of the parameters to provide for the current Cassandra Keyspace.
     * @param {module:api/DefaultApi~databaseAccountsUpdateCassandraKeyspaceThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Throughput}
     */
    databaseAccountsUpdateCassandraKeyspaceThroughput(subscriptionId, resourceGroupName, accountName, keyspaceName, apiVersion, updateThroughputParameters, callback) {
      let postBody = updateThroughputParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsUpdateCassandraKeyspaceThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsUpdateCassandraKeyspaceThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsUpdateCassandraKeyspaceThroughput");
      }
      // verify the required parameter 'keyspaceName' is set
      if (keyspaceName === undefined || keyspaceName === null) {
        throw new Error("Missing the required parameter 'keyspaceName' when calling databaseAccountsUpdateCassandraKeyspaceThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsUpdateCassandraKeyspaceThroughput");
      }
      // verify the required parameter 'updateThroughputParameters' is set
      if (updateThroughputParameters === undefined || updateThroughputParameters === null) {
        throw new Error("Missing the required parameter 'updateThroughputParameters' when calling databaseAccountsUpdateCassandraKeyspaceThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'keyspaceName': keyspaceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Throughput;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceName}/settings/throughput', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsUpdateCassandraTableThroughput operation.
     * @callback module:api/DefaultApi~databaseAccountsUpdateCassandraTableThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Throughput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update RUs per second of an Azure Cosmos DB Cassandra table
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} keyspaceName Cosmos DB keyspace name.
     * @param {String} tableName Cosmos DB table name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:model/ThroughputUpdateParameters} updateThroughputParameters The RUs per second of the parameters to provide for the current Cassandra table.
     * @param {module:api/DefaultApi~databaseAccountsUpdateCassandraTableThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Throughput}
     */
    databaseAccountsUpdateCassandraTableThroughput(subscriptionId, resourceGroupName, accountName, keyspaceName, tableName, apiVersion, updateThroughputParameters, callback) {
      let postBody = updateThroughputParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsUpdateCassandraTableThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsUpdateCassandraTableThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsUpdateCassandraTableThroughput");
      }
      // verify the required parameter 'keyspaceName' is set
      if (keyspaceName === undefined || keyspaceName === null) {
        throw new Error("Missing the required parameter 'keyspaceName' when calling databaseAccountsUpdateCassandraTableThroughput");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling databaseAccountsUpdateCassandraTableThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsUpdateCassandraTableThroughput");
      }
      // verify the required parameter 'updateThroughputParameters' is set
      if (updateThroughputParameters === undefined || updateThroughputParameters === null) {
        throw new Error("Missing the required parameter 'updateThroughputParameters' when calling databaseAccountsUpdateCassandraTableThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'keyspaceName': keyspaceName,
        'tableName': tableName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Throughput;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceName}/tables/{tableName}/settings/throughput', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsUpdateGremlinDatabaseThroughput operation.
     * @callback module:api/DefaultApi~databaseAccountsUpdateGremlinDatabaseThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Throughput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update RUs per second of an Azure Cosmos DB Gremlin database
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:model/ThroughputUpdateParameters} updateThroughputParameters The RUs per second of the parameters to provide for the current Gremlin database.
     * @param {module:api/DefaultApi~databaseAccountsUpdateGremlinDatabaseThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Throughput}
     */
    databaseAccountsUpdateGremlinDatabaseThroughput(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters, callback) {
      let postBody = updateThroughputParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsUpdateGremlinDatabaseThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsUpdateGremlinDatabaseThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsUpdateGremlinDatabaseThroughput");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsUpdateGremlinDatabaseThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsUpdateGremlinDatabaseThroughput");
      }
      // verify the required parameter 'updateThroughputParameters' is set
      if (updateThroughputParameters === undefined || updateThroughputParameters === null) {
        throw new Error("Missing the required parameter 'updateThroughputParameters' when calling databaseAccountsUpdateGremlinDatabaseThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Throughput;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseName}/settings/throughput', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsUpdateGremlinGraphThroughput operation.
     * @callback module:api/DefaultApi~databaseAccountsUpdateGremlinGraphThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Throughput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update RUs per second of an Azure Cosmos DB Gremlin graph
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} graphName Cosmos DB graph name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:model/ThroughputUpdateParameters} updateThroughputParameters The RUs per second of the parameters to provide for the current Gremlin graph.
     * @param {module:api/DefaultApi~databaseAccountsUpdateGremlinGraphThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Throughput}
     */
    databaseAccountsUpdateGremlinGraphThroughput(subscriptionId, resourceGroupName, accountName, databaseName, graphName, apiVersion, updateThroughputParameters, callback) {
      let postBody = updateThroughputParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsUpdateGremlinGraphThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsUpdateGremlinGraphThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsUpdateGremlinGraphThroughput");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsUpdateGremlinGraphThroughput");
      }
      // verify the required parameter 'graphName' is set
      if (graphName === undefined || graphName === null) {
        throw new Error("Missing the required parameter 'graphName' when calling databaseAccountsUpdateGremlinGraphThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsUpdateGremlinGraphThroughput");
      }
      // verify the required parameter 'updateThroughputParameters' is set
      if (updateThroughputParameters === undefined || updateThroughputParameters === null) {
        throw new Error("Missing the required parameter 'updateThroughputParameters' when calling databaseAccountsUpdateGremlinGraphThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'graphName': graphName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Throughput;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseName}/graphs/{graphName}/settings/throughput', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsUpdateMongoDBCollectionThroughput operation.
     * @callback module:api/DefaultApi~databaseAccountsUpdateMongoDBCollectionThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Throughput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the RUs per second of an Azure Cosmos DB MongoDB collection
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} collectionName Cosmos DB collection name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:model/ThroughputUpdateParameters} updateThroughputParameters The RUs per second of the parameters to provide for the current MongoDB collection.
     * @param {module:api/DefaultApi~databaseAccountsUpdateMongoDBCollectionThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Throughput}
     */
    databaseAccountsUpdateMongoDBCollectionThroughput(subscriptionId, resourceGroupName, accountName, databaseName, collectionName, apiVersion, updateThroughputParameters, callback) {
      let postBody = updateThroughputParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsUpdateMongoDBCollectionThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsUpdateMongoDBCollectionThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsUpdateMongoDBCollectionThroughput");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsUpdateMongoDBCollectionThroughput");
      }
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling databaseAccountsUpdateMongoDBCollectionThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsUpdateMongoDBCollectionThroughput");
      }
      // verify the required parameter 'updateThroughputParameters' is set
      if (updateThroughputParameters === undefined || updateThroughputParameters === null) {
        throw new Error("Missing the required parameter 'updateThroughputParameters' when calling databaseAccountsUpdateMongoDBCollectionThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'collectionName': collectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Throughput;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases/{databaseName}/collections/{collectionName}/settings/throughput', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsUpdateMongoDBDatabaseThroughput operation.
     * @callback module:api/DefaultApi~databaseAccountsUpdateMongoDBDatabaseThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Throughput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update RUs per second of the an Azure Cosmos DB MongoDB database
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:model/ThroughputUpdateParameters} updateThroughputParameters The RUs per second of the parameters to provide for the current MongoDB database.
     * @param {module:api/DefaultApi~databaseAccountsUpdateMongoDBDatabaseThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Throughput}
     */
    databaseAccountsUpdateMongoDBDatabaseThroughput(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters, callback) {
      let postBody = updateThroughputParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsUpdateMongoDBDatabaseThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsUpdateMongoDBDatabaseThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsUpdateMongoDBDatabaseThroughput");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsUpdateMongoDBDatabaseThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsUpdateMongoDBDatabaseThroughput");
      }
      // verify the required parameter 'updateThroughputParameters' is set
      if (updateThroughputParameters === undefined || updateThroughputParameters === null) {
        throw new Error("Missing the required parameter 'updateThroughputParameters' when calling databaseAccountsUpdateMongoDBDatabaseThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Throughput;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases/{databaseName}/settings/throughput', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsUpdateSqlContainerThroughput operation.
     * @callback module:api/DefaultApi~databaseAccountsUpdateSqlContainerThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Throughput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update RUs per second of an Azure Cosmos DB SQL container
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} containerName Cosmos DB container name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:model/ThroughputUpdateParameters} updateThroughputParameters The parameters to provide for the RUs per second of the current SQL container.
     * @param {module:api/DefaultApi~databaseAccountsUpdateSqlContainerThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Throughput}
     */
    databaseAccountsUpdateSqlContainerThroughput(subscriptionId, resourceGroupName, accountName, databaseName, containerName, apiVersion, updateThroughputParameters, callback) {
      let postBody = updateThroughputParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsUpdateSqlContainerThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsUpdateSqlContainerThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsUpdateSqlContainerThroughput");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsUpdateSqlContainerThroughput");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling databaseAccountsUpdateSqlContainerThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsUpdateSqlContainerThroughput");
      }
      // verify the required parameter 'updateThroughputParameters' is set
      if (updateThroughputParameters === undefined || updateThroughputParameters === null) {
        throw new Error("Missing the required parameter 'updateThroughputParameters' when calling databaseAccountsUpdateSqlContainerThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName,
        'containerName': containerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Throughput;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseName}/containers/{containerName}/settings/throughput', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsUpdateSqlDatabaseThroughput operation.
     * @callback module:api/DefaultApi~databaseAccountsUpdateSqlDatabaseThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Throughput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update RUs per second of an Azure Cosmos DB SQL database
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseName Cosmos DB database name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:model/ThroughputUpdateParameters} updateThroughputParameters The parameters to provide for the RUs per second of the current SQL database.
     * @param {module:api/DefaultApi~databaseAccountsUpdateSqlDatabaseThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Throughput}
     */
    databaseAccountsUpdateSqlDatabaseThroughput(subscriptionId, resourceGroupName, accountName, databaseName, apiVersion, updateThroughputParameters, callback) {
      let postBody = updateThroughputParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsUpdateSqlDatabaseThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsUpdateSqlDatabaseThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsUpdateSqlDatabaseThroughput");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseAccountsUpdateSqlDatabaseThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsUpdateSqlDatabaseThroughput");
      }
      // verify the required parameter 'updateThroughputParameters' is set
      if (updateThroughputParameters === undefined || updateThroughputParameters === null) {
        throw new Error("Missing the required parameter 'updateThroughputParameters' when calling databaseAccountsUpdateSqlDatabaseThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Throughput;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseName}/settings/throughput', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseAccountsUpdateTableThroughput operation.
     * @callback module:api/DefaultApi~databaseAccountsUpdateTableThroughputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Throughput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update RUs per second of an Azure Cosmos DB Table
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} tableName Cosmos DB table name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:model/ThroughputUpdateParameters} updateThroughputParameters The parameters to provide for the RUs per second of the current Table.
     * @param {module:api/DefaultApi~databaseAccountsUpdateTableThroughputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Throughput}
     */
    databaseAccountsUpdateTableThroughput(subscriptionId, resourceGroupName, accountName, tableName, apiVersion, updateThroughputParameters, callback) {
      let postBody = updateThroughputParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseAccountsUpdateTableThroughput");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseAccountsUpdateTableThroughput");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseAccountsUpdateTableThroughput");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling databaseAccountsUpdateTableThroughput");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseAccountsUpdateTableThroughput");
      }
      // verify the required parameter 'updateThroughputParameters' is set
      if (updateThroughputParameters === undefined || updateThroughputParameters === null) {
        throw new Error("Missing the required parameter 'updateThroughputParameters' when calling databaseAccountsUpdateTableThroughput");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'tableName': tableName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Throughput;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/table/tables/{tableName}/settings/throughput', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseListMetricDefinitions operation.
     * @callback module:api/DefaultApi~databaseListMetricDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricDefinitionsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves metric definitions for the given database.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseRid Cosmos DB database rid.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {module:api/DefaultApi~databaseListMetricDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricDefinitionsListResult}
     */
    databaseListMetricDefinitions(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseListMetricDefinitions");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseListMetricDefinitions");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseListMetricDefinitions");
      }
      // verify the required parameter 'databaseRid' is set
      if (databaseRid === undefined || databaseRid === null) {
        throw new Error("Missing the required parameter 'databaseRid' when calling databaseListMetricDefinitions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseListMetricDefinitions");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseRid': databaseRid
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricDefinitionsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/metricDefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseListMetrics operation.
     * @callback module:api/DefaultApi~databaseListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metrics determined by the given filter for the given database account and database.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseRid Cosmos DB database rid.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {String} filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param {module:api/DefaultApi~databaseListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricListResult}
     */
    databaseListMetrics(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, filter, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseListMetrics");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseListMetrics");
      }
      // verify the required parameter 'databaseRid' is set
      if (databaseRid === undefined || databaseRid === null) {
        throw new Error("Missing the required parameter 'databaseRid' when calling databaseListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseListMetrics");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling databaseListMetrics");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseRid': databaseRid
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseListUsages operation.
     * @callback module:api/DefaultApi~databaseListUsagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsagesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the usages (most recent data) for the given database.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseRid Cosmos DB database rid.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).
     * @param {module:api/DefaultApi~databaseListUsagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsagesResult}
     */
    databaseListUsages(subscriptionId, resourceGroupName, accountName, databaseRid, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseListUsages");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseListUsages");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling databaseListUsages");
      }
      // verify the required parameter 'databaseRid' is set
      if (databaseRid === undefined || databaseRid === null) {
        throw new Error("Missing the required parameter 'databaseRid' when calling databaseListUsages");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseListUsages");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseRid': databaseRid
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsagesResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/usages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the partitionKeyRangeIdListMetrics operation.
     * @callback module:api/DefaultApi~partitionKeyRangeIdListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartitionMetricListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metrics determined by the given filter for the given partition key range id.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} databaseRid Cosmos DB database rid.
     * @param {String} collectionRid Cosmos DB collection rid.
     * @param {String} partitionKeyRangeId Partition Key Range Id for which to get data.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {String} filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param {module:api/DefaultApi~partitionKeyRangeIdListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartitionMetricListResult}
     */
    partitionKeyRangeIdListMetrics(subscriptionId, resourceGroupName, accountName, databaseRid, collectionRid, partitionKeyRangeId, apiVersion, filter, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling partitionKeyRangeIdListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling partitionKeyRangeIdListMetrics");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling partitionKeyRangeIdListMetrics");
      }
      // verify the required parameter 'databaseRid' is set
      if (databaseRid === undefined || databaseRid === null) {
        throw new Error("Missing the required parameter 'databaseRid' when calling partitionKeyRangeIdListMetrics");
      }
      // verify the required parameter 'collectionRid' is set
      if (collectionRid === undefined || collectionRid === null) {
        throw new Error("Missing the required parameter 'collectionRid' when calling partitionKeyRangeIdListMetrics");
      }
      // verify the required parameter 'partitionKeyRangeId' is set
      if (partitionKeyRangeId === undefined || partitionKeyRangeId === null) {
        throw new Error("Missing the required parameter 'partitionKeyRangeId' when calling partitionKeyRangeIdListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling partitionKeyRangeIdListMetrics");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling partitionKeyRangeIdListMetrics");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'databaseRid': databaseRid,
        'collectionRid': collectionRid,
        'partitionKeyRangeId': partitionKeyRangeId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PartitionMetricListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitionKeyRangeId/{partitionKeyRangeId}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the partitionKeyRangeIdRegionListMetrics operation.
     * @callback module:api/DefaultApi~partitionKeyRangeIdRegionListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartitionMetricListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metrics determined by the given filter for the given partition key range id and region.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} region Cosmos DB region, with spaces between words and each word capitalized.
     * @param {String} databaseRid Cosmos DB database rid.
     * @param {String} collectionRid Cosmos DB collection rid.
     * @param {String} partitionKeyRangeId Partition Key Range Id for which to get data.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {String} filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param {module:api/DefaultApi~partitionKeyRangeIdRegionListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartitionMetricListResult}
     */
    partitionKeyRangeIdRegionListMetrics(subscriptionId, resourceGroupName, accountName, region, databaseRid, collectionRid, partitionKeyRangeId, apiVersion, filter, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling partitionKeyRangeIdRegionListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling partitionKeyRangeIdRegionListMetrics");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling partitionKeyRangeIdRegionListMetrics");
      }
      // verify the required parameter 'region' is set
      if (region === undefined || region === null) {
        throw new Error("Missing the required parameter 'region' when calling partitionKeyRangeIdRegionListMetrics");
      }
      // verify the required parameter 'databaseRid' is set
      if (databaseRid === undefined || databaseRid === null) {
        throw new Error("Missing the required parameter 'databaseRid' when calling partitionKeyRangeIdRegionListMetrics");
      }
      // verify the required parameter 'collectionRid' is set
      if (collectionRid === undefined || collectionRid === null) {
        throw new Error("Missing the required parameter 'collectionRid' when calling partitionKeyRangeIdRegionListMetrics");
      }
      // verify the required parameter 'partitionKeyRangeId' is set
      if (partitionKeyRangeId === undefined || partitionKeyRangeId === null) {
        throw new Error("Missing the required parameter 'partitionKeyRangeId' when calling partitionKeyRangeIdRegionListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling partitionKeyRangeIdRegionListMetrics");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling partitionKeyRangeIdRegionListMetrics");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'region': region,
        'databaseRid': databaseRid,
        'collectionRid': collectionRid,
        'partitionKeyRangeId': partitionKeyRangeId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PartitionMetricListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/partitionKeyRangeId/{partitionKeyRangeId}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the percentileListMetrics operation.
     * @callback module:api/DefaultApi~percentileListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PercentileMetricListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metrics determined by the given filter for the given database account. This url is only for PBS and Replication Latency data
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {String} filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param {module:api/DefaultApi~percentileListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PercentileMetricListResult}
     */
    percentileListMetrics(subscriptionId, resourceGroupName, accountName, apiVersion, filter, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling percentileListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling percentileListMetrics");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling percentileListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling percentileListMetrics");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling percentileListMetrics");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PercentileMetricListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/percentile/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the percentileSourceTargetListMetrics operation.
     * @callback module:api/DefaultApi~percentileSourceTargetListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PercentileMetricListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metrics determined by the given filter for the given account, source and target region. This url is only for PBS and Replication Latency data
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} sourceRegion Source region from which data is written. Cosmos DB region, with spaces between words and each word capitalized.
     * @param {String} targetRegion Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {String} filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param {module:api/DefaultApi~percentileSourceTargetListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PercentileMetricListResult}
     */
    percentileSourceTargetListMetrics(subscriptionId, resourceGroupName, accountName, sourceRegion, targetRegion, apiVersion, filter, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling percentileSourceTargetListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling percentileSourceTargetListMetrics");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling percentileSourceTargetListMetrics");
      }
      // verify the required parameter 'sourceRegion' is set
      if (sourceRegion === undefined || sourceRegion === null) {
        throw new Error("Missing the required parameter 'sourceRegion' when calling percentileSourceTargetListMetrics");
      }
      // verify the required parameter 'targetRegion' is set
      if (targetRegion === undefined || targetRegion === null) {
        throw new Error("Missing the required parameter 'targetRegion' when calling percentileSourceTargetListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling percentileSourceTargetListMetrics");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling percentileSourceTargetListMetrics");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'sourceRegion': sourceRegion,
        'targetRegion': targetRegion
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PercentileMetricListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sourceRegion/{sourceRegion}/targetRegion/{targetRegion}/percentile/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the percentileTargetListMetrics operation.
     * @callback module:api/DefaultApi~percentileTargetListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PercentileMetricListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metrics determined by the given filter for the given account target region. This url is only for PBS and Replication Latency data
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} targetRegion Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2015-04-08.
     * @param {String} filter An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param {module:api/DefaultApi~percentileTargetListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PercentileMetricListResult}
     */
    percentileTargetListMetrics(subscriptionId, resourceGroupName, accountName, targetRegion, apiVersion, filter, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling percentileTargetListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling percentileTargetListMetrics");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling percentileTargetListMetrics");
      }
      // verify the required parameter 'targetRegion' is set
      if (targetRegion === undefined || targetRegion === null) {
        throw new Error("Missing the required parameter 'targetRegion' when calling percentileTargetListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling percentileTargetListMetrics");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling percentileTargetListMetrics");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'targetRegion': targetRegion
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PercentileMetricListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/targetRegion/{targetRegion}/percentile/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
