/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2015-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Metric from './Metric';
import MetricName from './MetricName';
import MetricValue from './MetricValue';
import UnitType from './UnitType';

/**
 * The PartitionMetric model module.
 * @module model/PartitionMetric
 * @version 2015-04-01
 */
class PartitionMetric {
    /**
     * Constructs a new <code>PartitionMetric</code>.
     * The metric values for a single partition.
     * @alias module:model/PartitionMetric
     * @implements module:model/Metric
     */
    constructor() { 
        Metric.initialize(this);
        PartitionMetric.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PartitionMetric</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PartitionMetric} obj Optional instance to populate.
     * @return {module:model/PartitionMetric} The populated <code>PartitionMetric</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PartitionMetric();
            Metric.constructFromObject(data, obj);

            if (data.hasOwnProperty('partitionId')) {
                obj['partitionId'] = ApiClient.convertToType(data['partitionId'], 'String');
            }
            if (data.hasOwnProperty('partitionKeyRangeId')) {
                obj['partitionKeyRangeId'] = ApiClient.convertToType(data['partitionKeyRangeId'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('metricValues')) {
                obj['metricValues'] = ApiClient.convertToType(data['metricValues'], [MetricValue]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = MetricName.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('timeGrain')) {
                obj['timeGrain'] = ApiClient.convertToType(data['timeGrain'], 'String');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = UnitType.constructFromObject(data['unit']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PartitionMetric</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PartitionMetric</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['partitionId'] && !(typeof data['partitionId'] === 'string' || data['partitionId'] instanceof String)) {
            throw new Error("Expected the field `partitionId` to be a primitive type in the JSON string but got " + data['partitionId']);
        }
        // ensure the json data is a string
        if (data['partitionKeyRangeId'] && !(typeof data['partitionKeyRangeId'] === 'string' || data['partitionKeyRangeId'] instanceof String)) {
            throw new Error("Expected the field `partitionKeyRangeId` to be a primitive type in the JSON string but got " + data['partitionKeyRangeId']);
        }
        if (data['metricValues']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metricValues'])) {
                throw new Error("Expected the field `metricValues` to be an array in the JSON data but got " + data['metricValues']);
            }
            // validate the optional field `metricValues` (array)
            for (const item of data['metricValues']) {
                MetricValue.validateJSON(item);
            };
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          MetricName.validateJSON(data['name']);
        }
        // ensure the json data is a string
        if (data['timeGrain'] && !(typeof data['timeGrain'] === 'string' || data['timeGrain'] instanceof String)) {
            throw new Error("Expected the field `timeGrain` to be a primitive type in the JSON string but got " + data['timeGrain']);
        }

        return true;
    }


}



/**
 * The partition id (GUID identifier) of the metric values.
 * @member {String} partitionId
 */
PartitionMetric.prototype['partitionId'] = undefined;

/**
 * The partition key range id (integer identifier) of the metric values.
 * @member {String} partitionKeyRangeId
 */
PartitionMetric.prototype['partitionKeyRangeId'] = undefined;

/**
 * The end time for the metric (ISO-8601 format).
 * @member {Date} endTime
 */
PartitionMetric.prototype['endTime'] = undefined;

/**
 * The metric values for the specified time window and timestep.
 * @member {Array.<module:model/MetricValue>} metricValues
 */
PartitionMetric.prototype['metricValues'] = undefined;

/**
 * @member {module:model/MetricName} name
 */
PartitionMetric.prototype['name'] = undefined;

/**
 * The start time for the metric (ISO-8601 format).
 * @member {Date} startTime
 */
PartitionMetric.prototype['startTime'] = undefined;

/**
 * The time grain to be used to summarize the metric values.
 * @member {String} timeGrain
 */
PartitionMetric.prototype['timeGrain'] = undefined;

/**
 * @member {module:model/UnitType} unit
 */
PartitionMetric.prototype['unit'] = undefined;


// Implement Metric interface:
/**
 * The end time for the metric (ISO-8601 format).
 * @member {Date} endTime
 */
Metric.prototype['endTime'] = undefined;
/**
 * The metric values for the specified time window and timestep.
 * @member {Array.<module:model/MetricValue>} metricValues
 */
Metric.prototype['metricValues'] = undefined;
/**
 * @member {module:model/MetricName} name
 */
Metric.prototype['name'] = undefined;
/**
 * The start time for the metric (ISO-8601 format).
 * @member {Date} startTime
 */
Metric.prototype['startTime'] = undefined;
/**
 * The time grain to be used to summarize the metric values.
 * @member {String} timeGrain
 */
Metric.prototype['timeGrain'] = undefined;
/**
 * @member {module:model/UnitType} unit
 */
Metric.prototype['unit'] = undefined;




export default PartitionMetric;

