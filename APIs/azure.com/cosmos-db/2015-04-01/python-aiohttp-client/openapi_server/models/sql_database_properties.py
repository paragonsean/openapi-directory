# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SqlDatabaseProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, colls: str=None, users: str=None, id: str=None, etag: str=None, rid: str=None, ts: object=None):
        """SqlDatabaseProperties - a model defined in OpenAPI

        :param colls: The colls of this SqlDatabaseProperties.
        :param users: The users of this SqlDatabaseProperties.
        :param id: The id of this SqlDatabaseProperties.
        :param etag: The etag of this SqlDatabaseProperties.
        :param rid: The rid of this SqlDatabaseProperties.
        :param ts: The ts of this SqlDatabaseProperties.
        """
        self.openapi_types = {
            'colls': str,
            'users': str,
            'id': str,
            'etag': str,
            'rid': str,
            'ts': object
        }

        self.attribute_map = {
            'colls': '_colls',
            'users': '_users',
            'id': 'id',
            'etag': '_etag',
            'rid': '_rid',
            'ts': '_ts'
        }

        self._colls = colls
        self._users = users
        self._id = id
        self._etag = etag
        self._rid = rid
        self._ts = ts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SqlDatabaseProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SqlDatabaseProperties of this SqlDatabaseProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def colls(self):
        """Gets the colls of this SqlDatabaseProperties.

        A system generated property that specified the addressable path of the collections resource.

        :return: The colls of this SqlDatabaseProperties.
        :rtype: str
        """
        return self._colls

    @colls.setter
    def colls(self, colls):
        """Sets the colls of this SqlDatabaseProperties.

        A system generated property that specified the addressable path of the collections resource.

        :param colls: The colls of this SqlDatabaseProperties.
        :type colls: str
        """

        self._colls = colls

    @property
    def users(self):
        """Gets the users of this SqlDatabaseProperties.

        A system generated property that specifies the addressable path of the users resource.

        :return: The users of this SqlDatabaseProperties.
        :rtype: str
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this SqlDatabaseProperties.

        A system generated property that specifies the addressable path of the users resource.

        :param users: The users of this SqlDatabaseProperties.
        :type users: str
        """

        self._users = users

    @property
    def id(self):
        """Gets the id of this SqlDatabaseProperties.

        Name of the Cosmos DB SQL database

        :return: The id of this SqlDatabaseProperties.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SqlDatabaseProperties.

        Name of the Cosmos DB SQL database

        :param id: The id of this SqlDatabaseProperties.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this SqlDatabaseProperties.

        A system generated property representing the resource etag required for optimistic concurrency control.

        :return: The etag of this SqlDatabaseProperties.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this SqlDatabaseProperties.

        A system generated property representing the resource etag required for optimistic concurrency control.

        :param etag: The etag of this SqlDatabaseProperties.
        :type etag: str
        """

        self._etag = etag

    @property
    def rid(self):
        """Gets the rid of this SqlDatabaseProperties.

        A system generated property. A unique identifier.

        :return: The rid of this SqlDatabaseProperties.
        :rtype: str
        """
        return self._rid

    @rid.setter
    def rid(self, rid):
        """Sets the rid of this SqlDatabaseProperties.

        A system generated property. A unique identifier.

        :param rid: The rid of this SqlDatabaseProperties.
        :type rid: str
        """

        self._rid = rid

    @property
    def ts(self):
        """Gets the ts of this SqlDatabaseProperties.

        A system generated property that denotes the last updated timestamp of the resource.

        :return: The ts of this SqlDatabaseProperties.
        :rtype: object
        """
        return self._ts

    @ts.setter
    def ts(self, ts):
        """Sets the ts of this SqlDatabaseProperties.

        A system generated property that denotes the last updated timestamp of the resource.

        :param ts: The ts of this SqlDatabaseProperties.
        :type ts: object
        """

        self._ts = ts
