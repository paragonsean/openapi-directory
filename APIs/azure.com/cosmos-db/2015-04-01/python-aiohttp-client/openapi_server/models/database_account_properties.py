# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.capability import Capability
from openapi_server.models.connector_offer import ConnectorOffer
from openapi_server.models.consistency_policy import ConsistencyPolicy
from openapi_server.models.database_account_offer_type import DatabaseAccountOfferType
from openapi_server.models.failover_policy import FailoverPolicy
from openapi_server.models.location import Location
from openapi_server.models.virtual_network_rule import VirtualNetworkRule
from openapi_server import util


class DatabaseAccountProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capabilities: List[Capability]=None, connector_offer: ConnectorOffer=None, consistency_policy: ConsistencyPolicy=None, database_account_offer_type: DatabaseAccountOfferType=None, document_endpoint: str=None, enable_automatic_failover: bool=None, enable_cassandra_connector: bool=None, enable_multiple_write_locations: bool=None, failover_policies: List[FailoverPolicy]=None, ip_range_filter: str=None, is_virtual_network_filter_enabled: bool=None, provisioning_state: str=None, read_locations: List[Location]=None, virtual_network_rules: List[VirtualNetworkRule]=None, write_locations: List[Location]=None):
        """DatabaseAccountProperties - a model defined in OpenAPI

        :param capabilities: The capabilities of this DatabaseAccountProperties.
        :param connector_offer: The connector_offer of this DatabaseAccountProperties.
        :param consistency_policy: The consistency_policy of this DatabaseAccountProperties.
        :param database_account_offer_type: The database_account_offer_type of this DatabaseAccountProperties.
        :param document_endpoint: The document_endpoint of this DatabaseAccountProperties.
        :param enable_automatic_failover: The enable_automatic_failover of this DatabaseAccountProperties.
        :param enable_cassandra_connector: The enable_cassandra_connector of this DatabaseAccountProperties.
        :param enable_multiple_write_locations: The enable_multiple_write_locations of this DatabaseAccountProperties.
        :param failover_policies: The failover_policies of this DatabaseAccountProperties.
        :param ip_range_filter: The ip_range_filter of this DatabaseAccountProperties.
        :param is_virtual_network_filter_enabled: The is_virtual_network_filter_enabled of this DatabaseAccountProperties.
        :param provisioning_state: The provisioning_state of this DatabaseAccountProperties.
        :param read_locations: The read_locations of this DatabaseAccountProperties.
        :param virtual_network_rules: The virtual_network_rules of this DatabaseAccountProperties.
        :param write_locations: The write_locations of this DatabaseAccountProperties.
        """
        self.openapi_types = {
            'capabilities': List[Capability],
            'connector_offer': ConnectorOffer,
            'consistency_policy': ConsistencyPolicy,
            'database_account_offer_type': DatabaseAccountOfferType,
            'document_endpoint': str,
            'enable_automatic_failover': bool,
            'enable_cassandra_connector': bool,
            'enable_multiple_write_locations': bool,
            'failover_policies': List[FailoverPolicy],
            'ip_range_filter': str,
            'is_virtual_network_filter_enabled': bool,
            'provisioning_state': str,
            'read_locations': List[Location],
            'virtual_network_rules': List[VirtualNetworkRule],
            'write_locations': List[Location]
        }

        self.attribute_map = {
            'capabilities': 'capabilities',
            'connector_offer': 'connectorOffer',
            'consistency_policy': 'consistencyPolicy',
            'database_account_offer_type': 'databaseAccountOfferType',
            'document_endpoint': 'documentEndpoint',
            'enable_automatic_failover': 'enableAutomaticFailover',
            'enable_cassandra_connector': 'enableCassandraConnector',
            'enable_multiple_write_locations': 'enableMultipleWriteLocations',
            'failover_policies': 'failoverPolicies',
            'ip_range_filter': 'ipRangeFilter',
            'is_virtual_network_filter_enabled': 'isVirtualNetworkFilterEnabled',
            'provisioning_state': 'provisioningState',
            'read_locations': 'readLocations',
            'virtual_network_rules': 'virtualNetworkRules',
            'write_locations': 'writeLocations'
        }

        self._capabilities = capabilities
        self._connector_offer = connector_offer
        self._consistency_policy = consistency_policy
        self._database_account_offer_type = database_account_offer_type
        self._document_endpoint = document_endpoint
        self._enable_automatic_failover = enable_automatic_failover
        self._enable_cassandra_connector = enable_cassandra_connector
        self._enable_multiple_write_locations = enable_multiple_write_locations
        self._failover_policies = failover_policies
        self._ip_range_filter = ip_range_filter
        self._is_virtual_network_filter_enabled = is_virtual_network_filter_enabled
        self._provisioning_state = provisioning_state
        self._read_locations = read_locations
        self._virtual_network_rules = virtual_network_rules
        self._write_locations = write_locations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseAccountProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseAccountProperties of this DatabaseAccountProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capabilities(self):
        """Gets the capabilities of this DatabaseAccountProperties.

        List of Cosmos DB capabilities for the account

        :return: The capabilities of this DatabaseAccountProperties.
        :rtype: List[Capability]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this DatabaseAccountProperties.

        List of Cosmos DB capabilities for the account

        :param capabilities: The capabilities of this DatabaseAccountProperties.
        :type capabilities: List[Capability]
        """

        self._capabilities = capabilities

    @property
    def connector_offer(self):
        """Gets the connector_offer of this DatabaseAccountProperties.


        :return: The connector_offer of this DatabaseAccountProperties.
        :rtype: ConnectorOffer
        """
        return self._connector_offer

    @connector_offer.setter
    def connector_offer(self, connector_offer):
        """Sets the connector_offer of this DatabaseAccountProperties.


        :param connector_offer: The connector_offer of this DatabaseAccountProperties.
        :type connector_offer: ConnectorOffer
        """

        self._connector_offer = connector_offer

    @property
    def consistency_policy(self):
        """Gets the consistency_policy of this DatabaseAccountProperties.


        :return: The consistency_policy of this DatabaseAccountProperties.
        :rtype: ConsistencyPolicy
        """
        return self._consistency_policy

    @consistency_policy.setter
    def consistency_policy(self, consistency_policy):
        """Sets the consistency_policy of this DatabaseAccountProperties.


        :param consistency_policy: The consistency_policy of this DatabaseAccountProperties.
        :type consistency_policy: ConsistencyPolicy
        """

        self._consistency_policy = consistency_policy

    @property
    def database_account_offer_type(self):
        """Gets the database_account_offer_type of this DatabaseAccountProperties.


        :return: The database_account_offer_type of this DatabaseAccountProperties.
        :rtype: DatabaseAccountOfferType
        """
        return self._database_account_offer_type

    @database_account_offer_type.setter
    def database_account_offer_type(self, database_account_offer_type):
        """Sets the database_account_offer_type of this DatabaseAccountProperties.


        :param database_account_offer_type: The database_account_offer_type of this DatabaseAccountProperties.
        :type database_account_offer_type: DatabaseAccountOfferType
        """

        self._database_account_offer_type = database_account_offer_type

    @property
    def document_endpoint(self):
        """Gets the document_endpoint of this DatabaseAccountProperties.

        The connection endpoint for the Cosmos DB database account.

        :return: The document_endpoint of this DatabaseAccountProperties.
        :rtype: str
        """
        return self._document_endpoint

    @document_endpoint.setter
    def document_endpoint(self, document_endpoint):
        """Sets the document_endpoint of this DatabaseAccountProperties.

        The connection endpoint for the Cosmos DB database account.

        :param document_endpoint: The document_endpoint of this DatabaseAccountProperties.
        :type document_endpoint: str
        """

        self._document_endpoint = document_endpoint

    @property
    def enable_automatic_failover(self):
        """Gets the enable_automatic_failover of this DatabaseAccountProperties.

        Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.

        :return: The enable_automatic_failover of this DatabaseAccountProperties.
        :rtype: bool
        """
        return self._enable_automatic_failover

    @enable_automatic_failover.setter
    def enable_automatic_failover(self, enable_automatic_failover):
        """Sets the enable_automatic_failover of this DatabaseAccountProperties.

        Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.

        :param enable_automatic_failover: The enable_automatic_failover of this DatabaseAccountProperties.
        :type enable_automatic_failover: bool
        """

        self._enable_automatic_failover = enable_automatic_failover

    @property
    def enable_cassandra_connector(self):
        """Gets the enable_cassandra_connector of this DatabaseAccountProperties.

        Enables the cassandra connector on the Cosmos DB C* account

        :return: The enable_cassandra_connector of this DatabaseAccountProperties.
        :rtype: bool
        """
        return self._enable_cassandra_connector

    @enable_cassandra_connector.setter
    def enable_cassandra_connector(self, enable_cassandra_connector):
        """Sets the enable_cassandra_connector of this DatabaseAccountProperties.

        Enables the cassandra connector on the Cosmos DB C* account

        :param enable_cassandra_connector: The enable_cassandra_connector of this DatabaseAccountProperties.
        :type enable_cassandra_connector: bool
        """

        self._enable_cassandra_connector = enable_cassandra_connector

    @property
    def enable_multiple_write_locations(self):
        """Gets the enable_multiple_write_locations of this DatabaseAccountProperties.

        Enables the account to write in multiple locations

        :return: The enable_multiple_write_locations of this DatabaseAccountProperties.
        :rtype: bool
        """
        return self._enable_multiple_write_locations

    @enable_multiple_write_locations.setter
    def enable_multiple_write_locations(self, enable_multiple_write_locations):
        """Sets the enable_multiple_write_locations of this DatabaseAccountProperties.

        Enables the account to write in multiple locations

        :param enable_multiple_write_locations: The enable_multiple_write_locations of this DatabaseAccountProperties.
        :type enable_multiple_write_locations: bool
        """

        self._enable_multiple_write_locations = enable_multiple_write_locations

    @property
    def failover_policies(self):
        """Gets the failover_policies of this DatabaseAccountProperties.

        An array that contains the regions ordered by their failover priorities.

        :return: The failover_policies of this DatabaseAccountProperties.
        :rtype: List[FailoverPolicy]
        """
        return self._failover_policies

    @failover_policies.setter
    def failover_policies(self, failover_policies):
        """Sets the failover_policies of this DatabaseAccountProperties.

        An array that contains the regions ordered by their failover priorities.

        :param failover_policies: The failover_policies of this DatabaseAccountProperties.
        :type failover_policies: List[FailoverPolicy]
        """

        self._failover_policies = failover_policies

    @property
    def ip_range_filter(self):
        """Gets the ip_range_filter of this DatabaseAccountProperties.

        Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.

        :return: The ip_range_filter of this DatabaseAccountProperties.
        :rtype: str
        """
        return self._ip_range_filter

    @ip_range_filter.setter
    def ip_range_filter(self, ip_range_filter):
        """Sets the ip_range_filter of this DatabaseAccountProperties.

        Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.

        :param ip_range_filter: The ip_range_filter of this DatabaseAccountProperties.
        :type ip_range_filter: str
        """

        self._ip_range_filter = ip_range_filter

    @property
    def is_virtual_network_filter_enabled(self):
        """Gets the is_virtual_network_filter_enabled of this DatabaseAccountProperties.

        Flag to indicate whether to enable/disable Virtual Network ACL rules.

        :return: The is_virtual_network_filter_enabled of this DatabaseAccountProperties.
        :rtype: bool
        """
        return self._is_virtual_network_filter_enabled

    @is_virtual_network_filter_enabled.setter
    def is_virtual_network_filter_enabled(self, is_virtual_network_filter_enabled):
        """Sets the is_virtual_network_filter_enabled of this DatabaseAccountProperties.

        Flag to indicate whether to enable/disable Virtual Network ACL rules.

        :param is_virtual_network_filter_enabled: The is_virtual_network_filter_enabled of this DatabaseAccountProperties.
        :type is_virtual_network_filter_enabled: bool
        """

        self._is_virtual_network_filter_enabled = is_virtual_network_filter_enabled

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this DatabaseAccountProperties.

        The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation.

        :return: The provisioning_state of this DatabaseAccountProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this DatabaseAccountProperties.

        The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation.

        :param provisioning_state: The provisioning_state of this DatabaseAccountProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def read_locations(self):
        """Gets the read_locations of this DatabaseAccountProperties.

        An array that contains of the read locations enabled for the Cosmos DB account.

        :return: The read_locations of this DatabaseAccountProperties.
        :rtype: List[Location]
        """
        return self._read_locations

    @read_locations.setter
    def read_locations(self, read_locations):
        """Sets the read_locations of this DatabaseAccountProperties.

        An array that contains of the read locations enabled for the Cosmos DB account.

        :param read_locations: The read_locations of this DatabaseAccountProperties.
        :type read_locations: List[Location]
        """

        self._read_locations = read_locations

    @property
    def virtual_network_rules(self):
        """Gets the virtual_network_rules of this DatabaseAccountProperties.

        List of Virtual Network ACL rules configured for the Cosmos DB account.

        :return: The virtual_network_rules of this DatabaseAccountProperties.
        :rtype: List[VirtualNetworkRule]
        """
        return self._virtual_network_rules

    @virtual_network_rules.setter
    def virtual_network_rules(self, virtual_network_rules):
        """Sets the virtual_network_rules of this DatabaseAccountProperties.

        List of Virtual Network ACL rules configured for the Cosmos DB account.

        :param virtual_network_rules: The virtual_network_rules of this DatabaseAccountProperties.
        :type virtual_network_rules: List[VirtualNetworkRule]
        """

        self._virtual_network_rules = virtual_network_rules

    @property
    def write_locations(self):
        """Gets the write_locations of this DatabaseAccountProperties.

        An array that contains the write location for the Cosmos DB account.

        :return: The write_locations of this DatabaseAccountProperties.
        :rtype: List[Location]
        """
        return self._write_locations

    @write_locations.setter
    def write_locations(self, write_locations):
        """Sets the write_locations of this DatabaseAccountProperties.

        An array that contains the write location for the Cosmos DB account.

        :param write_locations: The write_locations of this DatabaseAccountProperties.
        :type write_locations: List[Location]
        """

        self._write_locations = write_locations
