# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConsistencyPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_consistency_level: str=None, max_interval_in_seconds: int=None, max_staleness_prefix: int=None):
        """ConsistencyPolicy - a model defined in OpenAPI

        :param default_consistency_level: The default_consistency_level of this ConsistencyPolicy.
        :param max_interval_in_seconds: The max_interval_in_seconds of this ConsistencyPolicy.
        :param max_staleness_prefix: The max_staleness_prefix of this ConsistencyPolicy.
        """
        self.openapi_types = {
            'default_consistency_level': str,
            'max_interval_in_seconds': int,
            'max_staleness_prefix': int
        }

        self.attribute_map = {
            'default_consistency_level': 'defaultConsistencyLevel',
            'max_interval_in_seconds': 'maxIntervalInSeconds',
            'max_staleness_prefix': 'maxStalenessPrefix'
        }

        self._default_consistency_level = default_consistency_level
        self._max_interval_in_seconds = max_interval_in_seconds
        self._max_staleness_prefix = max_staleness_prefix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsistencyPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConsistencyPolicy of this ConsistencyPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_consistency_level(self):
        """Gets the default_consistency_level of this ConsistencyPolicy.

        The default consistency level and configuration settings of the Cosmos DB account.

        :return: The default_consistency_level of this ConsistencyPolicy.
        :rtype: str
        """
        return self._default_consistency_level

    @default_consistency_level.setter
    def default_consistency_level(self, default_consistency_level):
        """Sets the default_consistency_level of this ConsistencyPolicy.

        The default consistency level and configuration settings of the Cosmos DB account.

        :param default_consistency_level: The default_consistency_level of this ConsistencyPolicy.
        :type default_consistency_level: str
        """
        allowed_values = ["Eventual", "Session", "BoundedStaleness", "Strong", "ConsistentPrefix"]  # noqa: E501
        if default_consistency_level not in allowed_values:
            raise ValueError(
                "Invalid value for `default_consistency_level` ({0}), must be one of {1}"
                .format(default_consistency_level, allowed_values)
            )

        self._default_consistency_level = default_consistency_level

    @property
    def max_interval_in_seconds(self):
        """Gets the max_interval_in_seconds of this ConsistencyPolicy.

        When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.

        :return: The max_interval_in_seconds of this ConsistencyPolicy.
        :rtype: int
        """
        return self._max_interval_in_seconds

    @max_interval_in_seconds.setter
    def max_interval_in_seconds(self, max_interval_in_seconds):
        """Sets the max_interval_in_seconds of this ConsistencyPolicy.

        When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.

        :param max_interval_in_seconds: The max_interval_in_seconds of this ConsistencyPolicy.
        :type max_interval_in_seconds: int
        """
        if max_interval_in_seconds is not None and max_interval_in_seconds > 86400:
            raise ValueError("Invalid value for `max_interval_in_seconds`, must be a value less than or equal to `86400`")
        if max_interval_in_seconds is not None and max_interval_in_seconds < 5:
            raise ValueError("Invalid value for `max_interval_in_seconds`, must be a value greater than or equal to `5`")

        self._max_interval_in_seconds = max_interval_in_seconds

    @property
    def max_staleness_prefix(self):
        """Gets the max_staleness_prefix of this ConsistencyPolicy.

        When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.

        :return: The max_staleness_prefix of this ConsistencyPolicy.
        :rtype: int
        """
        return self._max_staleness_prefix

    @max_staleness_prefix.setter
    def max_staleness_prefix(self, max_staleness_prefix):
        """Sets the max_staleness_prefix of this ConsistencyPolicy.

        When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.

        :param max_staleness_prefix: The max_staleness_prefix of this ConsistencyPolicy.
        :type max_staleness_prefix: int
        """
        if max_staleness_prefix is not None and max_staleness_prefix > 2147483647:
            raise ValueError("Invalid value for `max_staleness_prefix`, must be a value less than or equal to `2147483647`")
        if max_staleness_prefix is not None and max_staleness_prefix < 1:
            raise ValueError("Invalid value for `max_staleness_prefix`, must be a value greater than or equal to `1`")

        self._max_staleness_prefix = max_staleness_prefix
