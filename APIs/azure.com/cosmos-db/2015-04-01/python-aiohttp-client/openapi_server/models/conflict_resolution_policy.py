# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConflictResolutionPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conflict_resolution_path: str=None, conflict_resolution_procedure: str=None, mode: str='LastWriterWins'):
        """ConflictResolutionPolicy - a model defined in OpenAPI

        :param conflict_resolution_path: The conflict_resolution_path of this ConflictResolutionPolicy.
        :param conflict_resolution_procedure: The conflict_resolution_procedure of this ConflictResolutionPolicy.
        :param mode: The mode of this ConflictResolutionPolicy.
        """
        self.openapi_types = {
            'conflict_resolution_path': str,
            'conflict_resolution_procedure': str,
            'mode': str
        }

        self.attribute_map = {
            'conflict_resolution_path': 'conflictResolutionPath',
            'conflict_resolution_procedure': 'conflictResolutionProcedure',
            'mode': 'mode'
        }

        self._conflict_resolution_path = conflict_resolution_path
        self._conflict_resolution_procedure = conflict_resolution_procedure
        self._mode = mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConflictResolutionPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConflictResolutionPolicy of this ConflictResolutionPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conflict_resolution_path(self):
        """Gets the conflict_resolution_path of this ConflictResolutionPolicy.

        The conflict resolution path in the case of LastWriterWins mode.

        :return: The conflict_resolution_path of this ConflictResolutionPolicy.
        :rtype: str
        """
        return self._conflict_resolution_path

    @conflict_resolution_path.setter
    def conflict_resolution_path(self, conflict_resolution_path):
        """Sets the conflict_resolution_path of this ConflictResolutionPolicy.

        The conflict resolution path in the case of LastWriterWins mode.

        :param conflict_resolution_path: The conflict_resolution_path of this ConflictResolutionPolicy.
        :type conflict_resolution_path: str
        """

        self._conflict_resolution_path = conflict_resolution_path

    @property
    def conflict_resolution_procedure(self):
        """Gets the conflict_resolution_procedure of this ConflictResolutionPolicy.

        The procedure to resolve conflicts in the case of custom mode.

        :return: The conflict_resolution_procedure of this ConflictResolutionPolicy.
        :rtype: str
        """
        return self._conflict_resolution_procedure

    @conflict_resolution_procedure.setter
    def conflict_resolution_procedure(self, conflict_resolution_procedure):
        """Sets the conflict_resolution_procedure of this ConflictResolutionPolicy.

        The procedure to resolve conflicts in the case of custom mode.

        :param conflict_resolution_procedure: The conflict_resolution_procedure of this ConflictResolutionPolicy.
        :type conflict_resolution_procedure: str
        """

        self._conflict_resolution_procedure = conflict_resolution_procedure

    @property
    def mode(self):
        """Gets the mode of this ConflictResolutionPolicy.

        Indicates the conflict resolution mode.

        :return: The mode of this ConflictResolutionPolicy.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ConflictResolutionPolicy.

        Indicates the conflict resolution mode.

        :param mode: The mode of this ConflictResolutionPolicy.
        :type mode: str
        """
        allowed_values = ["LastWriterWins", "Custom"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode
