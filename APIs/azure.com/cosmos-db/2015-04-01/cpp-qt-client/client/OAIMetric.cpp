/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2015-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetric::OAIMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetric::OAIMetric() {
    this->initializeModel();
}

OAIMetric::~OAIMetric() {}

void OAIMetric::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_metric_values_isSet = false;
    m_metric_values_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_time_grain_isSet = false;
    m_time_grain_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIMetric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetric::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_metric_values_isValid = ::OpenAPI::fromJsonValue(m_metric_values, json[QString("metricValues")]);
    m_metric_values_isSet = !json[QString("metricValues")].isNull() && m_metric_values_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_time_grain_isValid = ::OpenAPI::fromJsonValue(m_time_grain, json[QString("timeGrain")]);
    m_time_grain_isSet = !json[QString("timeGrain")].isNull() && m_time_grain_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;
}

QString OAIMetric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetric::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_metric_values.size() > 0) {
        obj.insert(QString("metricValues"), ::OpenAPI::toJsonValue(m_metric_values));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_time_grain_isSet) {
        obj.insert(QString("timeGrain"), ::OpenAPI::toJsonValue(m_time_grain));
    }
    if (m_unit.isSet()) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

QDateTime OAIMetric::getEndTime() const {
    return m_end_time;
}
void OAIMetric::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIMetric::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIMetric::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QList<OAIMetricValue> OAIMetric::getMetricValues() const {
    return m_metric_values;
}
void OAIMetric::setMetricValues(const QList<OAIMetricValue> &metric_values) {
    m_metric_values = metric_values;
    m_metric_values_isSet = true;
}

bool OAIMetric::is_metric_values_Set() const{
    return m_metric_values_isSet;
}

bool OAIMetric::is_metric_values_Valid() const{
    return m_metric_values_isValid;
}

OAIMetricName OAIMetric::getName() const {
    return m_name;
}
void OAIMetric::setName(const OAIMetricName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMetric::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMetric::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIMetric::getStartTime() const {
    return m_start_time;
}
void OAIMetric::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIMetric::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIMetric::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIMetric::getTimeGrain() const {
    return m_time_grain;
}
void OAIMetric::setTimeGrain(const QString &time_grain) {
    m_time_grain = time_grain;
    m_time_grain_isSet = true;
}

bool OAIMetric::is_time_grain_Set() const{
    return m_time_grain_isSet;
}

bool OAIMetric::is_time_grain_Valid() const{
    return m_time_grain_isValid;
}

OAIUnitType OAIMetric::getUnit() const {
    return m_unit;
}
void OAIMetric::setUnit(const OAIUnitType &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIMetric::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIMetric::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIMetric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_grain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
