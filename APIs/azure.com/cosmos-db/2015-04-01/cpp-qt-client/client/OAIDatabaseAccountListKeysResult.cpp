/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2015-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseAccountListKeysResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseAccountListKeysResult::OAIDatabaseAccountListKeysResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseAccountListKeysResult::OAIDatabaseAccountListKeysResult() {
    this->initializeModel();
}

OAIDatabaseAccountListKeysResult::~OAIDatabaseAccountListKeysResult() {}

void OAIDatabaseAccountListKeysResult::initializeModel() {

    m_primary_master_key_isSet = false;
    m_primary_master_key_isValid = false;

    m_secondary_master_key_isSet = false;
    m_secondary_master_key_isValid = false;

    m_primary_readonly_master_key_isSet = false;
    m_primary_readonly_master_key_isValid = false;

    m_secondary_readonly_master_key_isSet = false;
    m_secondary_readonly_master_key_isValid = false;
}

void OAIDatabaseAccountListKeysResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseAccountListKeysResult::fromJsonObject(QJsonObject json) {

    m_primary_master_key_isValid = ::OpenAPI::fromJsonValue(m_primary_master_key, json[QString("primaryMasterKey")]);
    m_primary_master_key_isSet = !json[QString("primaryMasterKey")].isNull() && m_primary_master_key_isValid;

    m_secondary_master_key_isValid = ::OpenAPI::fromJsonValue(m_secondary_master_key, json[QString("secondaryMasterKey")]);
    m_secondary_master_key_isSet = !json[QString("secondaryMasterKey")].isNull() && m_secondary_master_key_isValid;

    m_primary_readonly_master_key_isValid = ::OpenAPI::fromJsonValue(m_primary_readonly_master_key, json[QString("primaryReadonlyMasterKey")]);
    m_primary_readonly_master_key_isSet = !json[QString("primaryReadonlyMasterKey")].isNull() && m_primary_readonly_master_key_isValid;

    m_secondary_readonly_master_key_isValid = ::OpenAPI::fromJsonValue(m_secondary_readonly_master_key, json[QString("secondaryReadonlyMasterKey")]);
    m_secondary_readonly_master_key_isSet = !json[QString("secondaryReadonlyMasterKey")].isNull() && m_secondary_readonly_master_key_isValid;
}

QString OAIDatabaseAccountListKeysResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseAccountListKeysResult::asJsonObject() const {
    QJsonObject obj;
    if (m_primary_master_key_isSet) {
        obj.insert(QString("primaryMasterKey"), ::OpenAPI::toJsonValue(m_primary_master_key));
    }
    if (m_secondary_master_key_isSet) {
        obj.insert(QString("secondaryMasterKey"), ::OpenAPI::toJsonValue(m_secondary_master_key));
    }
    if (m_primary_readonly_master_key_isSet) {
        obj.insert(QString("primaryReadonlyMasterKey"), ::OpenAPI::toJsonValue(m_primary_readonly_master_key));
    }
    if (m_secondary_readonly_master_key_isSet) {
        obj.insert(QString("secondaryReadonlyMasterKey"), ::OpenAPI::toJsonValue(m_secondary_readonly_master_key));
    }
    return obj;
}

QString OAIDatabaseAccountListKeysResult::getPrimaryMasterKey() const {
    return m_primary_master_key;
}
void OAIDatabaseAccountListKeysResult::setPrimaryMasterKey(const QString &primary_master_key) {
    m_primary_master_key = primary_master_key;
    m_primary_master_key_isSet = true;
}

bool OAIDatabaseAccountListKeysResult::is_primary_master_key_Set() const{
    return m_primary_master_key_isSet;
}

bool OAIDatabaseAccountListKeysResult::is_primary_master_key_Valid() const{
    return m_primary_master_key_isValid;
}

QString OAIDatabaseAccountListKeysResult::getSecondaryMasterKey() const {
    return m_secondary_master_key;
}
void OAIDatabaseAccountListKeysResult::setSecondaryMasterKey(const QString &secondary_master_key) {
    m_secondary_master_key = secondary_master_key;
    m_secondary_master_key_isSet = true;
}

bool OAIDatabaseAccountListKeysResult::is_secondary_master_key_Set() const{
    return m_secondary_master_key_isSet;
}

bool OAIDatabaseAccountListKeysResult::is_secondary_master_key_Valid() const{
    return m_secondary_master_key_isValid;
}

QString OAIDatabaseAccountListKeysResult::getPrimaryReadonlyMasterKey() const {
    return m_primary_readonly_master_key;
}
void OAIDatabaseAccountListKeysResult::setPrimaryReadonlyMasterKey(const QString &primary_readonly_master_key) {
    m_primary_readonly_master_key = primary_readonly_master_key;
    m_primary_readonly_master_key_isSet = true;
}

bool OAIDatabaseAccountListKeysResult::is_primary_readonly_master_key_Set() const{
    return m_primary_readonly_master_key_isSet;
}

bool OAIDatabaseAccountListKeysResult::is_primary_readonly_master_key_Valid() const{
    return m_primary_readonly_master_key_isValid;
}

QString OAIDatabaseAccountListKeysResult::getSecondaryReadonlyMasterKey() const {
    return m_secondary_readonly_master_key;
}
void OAIDatabaseAccountListKeysResult::setSecondaryReadonlyMasterKey(const QString &secondary_readonly_master_key) {
    m_secondary_readonly_master_key = secondary_readonly_master_key;
    m_secondary_readonly_master_key_isSet = true;
}

bool OAIDatabaseAccountListKeysResult::is_secondary_readonly_master_key_Set() const{
    return m_secondary_readonly_master_key_isSet;
}

bool OAIDatabaseAccountListKeysResult::is_secondary_readonly_master_key_Valid() const{
    return m_secondary_readonly_master_key_isValid;
}

bool OAIDatabaseAccountListKeysResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_primary_master_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_master_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_readonly_master_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_readonly_master_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseAccountListKeysResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
