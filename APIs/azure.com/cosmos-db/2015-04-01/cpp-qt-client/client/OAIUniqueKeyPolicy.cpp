/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2015-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUniqueKeyPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUniqueKeyPolicy::OAIUniqueKeyPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUniqueKeyPolicy::OAIUniqueKeyPolicy() {
    this->initializeModel();
}

OAIUniqueKeyPolicy::~OAIUniqueKeyPolicy() {}

void OAIUniqueKeyPolicy::initializeModel() {

    m_unique_keys_isSet = false;
    m_unique_keys_isValid = false;
}

void OAIUniqueKeyPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUniqueKeyPolicy::fromJsonObject(QJsonObject json) {

    m_unique_keys_isValid = ::OpenAPI::fromJsonValue(m_unique_keys, json[QString("uniqueKeys")]);
    m_unique_keys_isSet = !json[QString("uniqueKeys")].isNull() && m_unique_keys_isValid;
}

QString OAIUniqueKeyPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUniqueKeyPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_unique_keys.size() > 0) {
        obj.insert(QString("uniqueKeys"), ::OpenAPI::toJsonValue(m_unique_keys));
    }
    return obj;
}

QList<OAIUniqueKey> OAIUniqueKeyPolicy::getUniqueKeys() const {
    return m_unique_keys;
}
void OAIUniqueKeyPolicy::setUniqueKeys(const QList<OAIUniqueKey> &unique_keys) {
    m_unique_keys = unique_keys;
    m_unique_keys_isSet = true;
}

bool OAIUniqueKeyPolicy::is_unique_keys_Set() const{
    return m_unique_keys_isSet;
}

bool OAIUniqueKeyPolicy::is_unique_keys_Valid() const{
    return m_unique_keys_isValid;
}

bool OAIUniqueKeyPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_unique_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUniqueKeyPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
