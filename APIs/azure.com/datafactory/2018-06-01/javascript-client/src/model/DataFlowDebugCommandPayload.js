/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DataFlowDebugCommandPayload model module.
 * @module model/DataFlowDebugCommandPayload
 * @version 2018-06-01
 */
class DataFlowDebugCommandPayload {
    /**
     * Constructs a new <code>DataFlowDebugCommandPayload</code>.
     * Structure of command payload.
     * @alias module:model/DataFlowDebugCommandPayload
     * @param streamName {String} The stream name which is used for preview.
     */
    constructor(streamName) { 
        
        DataFlowDebugCommandPayload.initialize(this, streamName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, streamName) { 
        obj['streamName'] = streamName;
    }

    /**
     * Constructs a <code>DataFlowDebugCommandPayload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataFlowDebugCommandPayload} obj Optional instance to populate.
     * @return {module:model/DataFlowDebugCommandPayload} The populated <code>DataFlowDebugCommandPayload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataFlowDebugCommandPayload();

            if (data.hasOwnProperty('columns')) {
                obj['columns'] = ApiClient.convertToType(data['columns'], ['String']);
            }
            if (data.hasOwnProperty('expression')) {
                obj['expression'] = ApiClient.convertToType(data['expression'], 'String');
            }
            if (data.hasOwnProperty('rowLimits')) {
                obj['rowLimits'] = ApiClient.convertToType(data['rowLimits'], 'Number');
            }
            if (data.hasOwnProperty('streamName')) {
                obj['streamName'] = ApiClient.convertToType(data['streamName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataFlowDebugCommandPayload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataFlowDebugCommandPayload</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DataFlowDebugCommandPayload.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['columns'])) {
            throw new Error("Expected the field `columns` to be an array in the JSON data but got " + data['columns']);
        }
        // ensure the json data is a string
        if (data['expression'] && !(typeof data['expression'] === 'string' || data['expression'] instanceof String)) {
            throw new Error("Expected the field `expression` to be a primitive type in the JSON string but got " + data['expression']);
        }
        // ensure the json data is a string
        if (data['streamName'] && !(typeof data['streamName'] === 'string' || data['streamName'] instanceof String)) {
            throw new Error("Expected the field `streamName` to be a primitive type in the JSON string but got " + data['streamName']);
        }

        return true;
    }


}

DataFlowDebugCommandPayload.RequiredProperties = ["streamName"];

/**
 * Array of column names.
 * @member {Array.<String>} columns
 */
DataFlowDebugCommandPayload.prototype['columns'] = undefined;

/**
 * The expression which is used for preview.
 * @member {String} expression
 */
DataFlowDebugCommandPayload.prototype['expression'] = undefined;

/**
 * Row limits for preview response.
 * @member {Number} rowLimits
 */
DataFlowDebugCommandPayload.prototype['rowLimits'] = undefined;

/**
 * The stream name which is used for preview.
 * @member {String} streamName
 */
DataFlowDebugCommandPayload.prototype['streamName'] = undefined;






export default DataFlowDebugCommandPayload;

