/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GitHubAccessTokenRequest model module.
 * @module model/GitHubAccessTokenRequest
 * @version 2018-06-01
 */
class GitHubAccessTokenRequest {
    /**
     * Constructs a new <code>GitHubAccessTokenRequest</code>.
     * Get GitHub access token request definition.
     * @alias module:model/GitHubAccessTokenRequest
     * @param gitHubAccessCode {String} GitHub access code.
     * @param gitHubAccessTokenBaseUrl {String} GitHub access token base URL.
     */
    constructor(gitHubAccessCode, gitHubAccessTokenBaseUrl) { 
        
        GitHubAccessTokenRequest.initialize(this, gitHubAccessCode, gitHubAccessTokenBaseUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, gitHubAccessCode, gitHubAccessTokenBaseUrl) { 
        obj['gitHubAccessCode'] = gitHubAccessCode;
        obj['gitHubAccessTokenBaseUrl'] = gitHubAccessTokenBaseUrl;
    }

    /**
     * Constructs a <code>GitHubAccessTokenRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GitHubAccessTokenRequest} obj Optional instance to populate.
     * @return {module:model/GitHubAccessTokenRequest} The populated <code>GitHubAccessTokenRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GitHubAccessTokenRequest();

            if (data.hasOwnProperty('gitHubAccessCode')) {
                obj['gitHubAccessCode'] = ApiClient.convertToType(data['gitHubAccessCode'], 'String');
            }
            if (data.hasOwnProperty('gitHubAccessTokenBaseUrl')) {
                obj['gitHubAccessTokenBaseUrl'] = ApiClient.convertToType(data['gitHubAccessTokenBaseUrl'], 'String');
            }
            if (data.hasOwnProperty('gitHubClientId')) {
                obj['gitHubClientId'] = ApiClient.convertToType(data['gitHubClientId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GitHubAccessTokenRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GitHubAccessTokenRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GitHubAccessTokenRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['gitHubAccessCode'] && !(typeof data['gitHubAccessCode'] === 'string' || data['gitHubAccessCode'] instanceof String)) {
            throw new Error("Expected the field `gitHubAccessCode` to be a primitive type in the JSON string but got " + data['gitHubAccessCode']);
        }
        // ensure the json data is a string
        if (data['gitHubAccessTokenBaseUrl'] && !(typeof data['gitHubAccessTokenBaseUrl'] === 'string' || data['gitHubAccessTokenBaseUrl'] instanceof String)) {
            throw new Error("Expected the field `gitHubAccessTokenBaseUrl` to be a primitive type in the JSON string but got " + data['gitHubAccessTokenBaseUrl']);
        }
        // ensure the json data is a string
        if (data['gitHubClientId'] && !(typeof data['gitHubClientId'] === 'string' || data['gitHubClientId'] instanceof String)) {
            throw new Error("Expected the field `gitHubClientId` to be a primitive type in the JSON string but got " + data['gitHubClientId']);
        }

        return true;
    }


}

GitHubAccessTokenRequest.RequiredProperties = ["gitHubAccessCode", "gitHubAccessTokenBaseUrl"];

/**
 * GitHub access code.
 * @member {String} gitHubAccessCode
 */
GitHubAccessTokenRequest.prototype['gitHubAccessCode'] = undefined;

/**
 * GitHub access token base URL.
 * @member {String} gitHubAccessTokenBaseUrl
 */
GitHubAccessTokenRequest.prototype['gitHubAccessTokenBaseUrl'] = undefined;

/**
 * GitHub application client ID.
 * @member {String} gitHubClientId
 */
GitHubAccessTokenRequest.prototype['gitHubClientId'] = undefined;






export default GitHubAccessTokenRequest;

