/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RunQueryFilter model module.
 * @module model/RunQueryFilter
 * @version 2018-06-01
 */
class RunQueryFilter {
    /**
     * Constructs a new <code>RunQueryFilter</code>.
     * Query filter option for listing runs.
     * @alias module:model/RunQueryFilter
     * @param operand {module:model/RunQueryFilter.OperandEnum} Parameter name to be used for filter. The allowed operands to query pipeline runs are PipelineName, RunStart, RunEnd and Status; to query activity runs are ActivityName, ActivityRunStart, ActivityRunEnd, ActivityType and Status, and to query trigger runs are TriggerName, TriggerRunTimestamp and Status.
     * @param operator {module:model/RunQueryFilter.OperatorEnum} Operator to be used for filter.
     * @param values {Array.<String>} List of filter values.
     */
    constructor(operand, operator, values) { 
        
        RunQueryFilter.initialize(this, operand, operator, values);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, operand, operator, values) { 
        obj['operand'] = operand;
        obj['operator'] = operator;
        obj['values'] = values;
    }

    /**
     * Constructs a <code>RunQueryFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RunQueryFilter} obj Optional instance to populate.
     * @return {module:model/RunQueryFilter} The populated <code>RunQueryFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RunQueryFilter();

            if (data.hasOwnProperty('operand')) {
                obj['operand'] = ApiClient.convertToType(data['operand'], 'String');
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RunQueryFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RunQueryFilter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RunQueryFilter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['operand'] && !(typeof data['operand'] === 'string' || data['operand'] instanceof String)) {
            throw new Error("Expected the field `operand` to be a primitive type in the JSON string but got " + data['operand']);
        }
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['values'])) {
            throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
        }

        return true;
    }


}

RunQueryFilter.RequiredProperties = ["operand", "operator", "values"];

/**
 * Parameter name to be used for filter. The allowed operands to query pipeline runs are PipelineName, RunStart, RunEnd and Status; to query activity runs are ActivityName, ActivityRunStart, ActivityRunEnd, ActivityType and Status, and to query trigger runs are TriggerName, TriggerRunTimestamp and Status.
 * @member {module:model/RunQueryFilter.OperandEnum} operand
 */
RunQueryFilter.prototype['operand'] = undefined;

/**
 * Operator to be used for filter.
 * @member {module:model/RunQueryFilter.OperatorEnum} operator
 */
RunQueryFilter.prototype['operator'] = undefined;

/**
 * List of filter values.
 * @member {Array.<String>} values
 */
RunQueryFilter.prototype['values'] = undefined;





/**
 * Allowed values for the <code>operand</code> property.
 * @enum {String}
 * @readonly
 */
RunQueryFilter['OperandEnum'] = {

    /**
     * value: "PipelineName"
     * @const
     */
    "PipelineName": "PipelineName",

    /**
     * value: "Status"
     * @const
     */
    "Status": "Status",

    /**
     * value: "RunStart"
     * @const
     */
    "RunStart": "RunStart",

    /**
     * value: "RunEnd"
     * @const
     */
    "RunEnd": "RunEnd",

    /**
     * value: "ActivityName"
     * @const
     */
    "ActivityName": "ActivityName",

    /**
     * value: "ActivityRunStart"
     * @const
     */
    "ActivityRunStart": "ActivityRunStart",

    /**
     * value: "ActivityRunEnd"
     * @const
     */
    "ActivityRunEnd": "ActivityRunEnd",

    /**
     * value: "ActivityType"
     * @const
     */
    "ActivityType": "ActivityType",

    /**
     * value: "TriggerName"
     * @const
     */
    "TriggerName": "TriggerName",

    /**
     * value: "TriggerRunTimestamp"
     * @const
     */
    "TriggerRunTimestamp": "TriggerRunTimestamp",

    /**
     * value: "RunGroupId"
     * @const
     */
    "RunGroupId": "RunGroupId",

    /**
     * value: "LatestOnly"
     * @const
     */
    "LatestOnly": "LatestOnly"
};


/**
 * Allowed values for the <code>operator</code> property.
 * @enum {String}
 * @readonly
 */
RunQueryFilter['OperatorEnum'] = {

    /**
     * value: "Equals"
     * @const
     */
    "Equals": "Equals",

    /**
     * value: "NotEquals"
     * @const
     */
    "NotEquals": "NotEquals",

    /**
     * value: "In"
     * @const
     */
    "In": "In",

    /**
     * value: "NotIn"
     * @const
     */
    "NotIn": "NotIn"
};



export default RunQueryFilter;

