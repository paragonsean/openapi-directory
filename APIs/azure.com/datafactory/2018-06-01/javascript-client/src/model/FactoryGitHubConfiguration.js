/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FactoryRepoConfiguration from './FactoryRepoConfiguration';

/**
 * The FactoryGitHubConfiguration model module.
 * @module model/FactoryGitHubConfiguration
 * @version 2018-06-01
 */
class FactoryGitHubConfiguration {
    /**
     * Constructs a new <code>FactoryGitHubConfiguration</code>.
     * Factory&#39;s GitHub repo information.
     * @alias module:model/FactoryGitHubConfiguration
     * @extends module:model/FactoryRepoConfiguration
     * @implements module:model/FactoryRepoConfiguration
     * @param accountName {String} Account name.
     * @param collaborationBranch {String} Collaboration branch.
     * @param repositoryName {String} Repository name.
     * @param rootFolder {String} Root folder.
     * @param type {String} Type of repo configuration.
     */
    constructor(accountName, collaborationBranch, repositoryName, rootFolder, type) { 
        FactoryRepoConfiguration.initialize(this, accountName, collaborationBranch, repositoryName, rootFolder, type);
        FactoryGitHubConfiguration.initialize(this, accountName, collaborationBranch, repositoryName, rootFolder, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountName, collaborationBranch, repositoryName, rootFolder, type) { 
    }

    /**
     * Constructs a <code>FactoryGitHubConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FactoryGitHubConfiguration} obj Optional instance to populate.
     * @return {module:model/FactoryGitHubConfiguration} The populated <code>FactoryGitHubConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FactoryGitHubConfiguration();
            FactoryRepoConfiguration.constructFromObject(data, obj);
            FactoryRepoConfiguration.constructFromObject(data, obj);

            if (data.hasOwnProperty('hostName')) {
                obj['hostName'] = ApiClient.convertToType(data['hostName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FactoryGitHubConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FactoryGitHubConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FactoryGitHubConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['hostName'] && !(typeof data['hostName'] === 'string' || data['hostName'] instanceof String)) {
            throw new Error("Expected the field `hostName` to be a primitive type in the JSON string but got " + data['hostName']);
        }

        return true;
    }


}

FactoryGitHubConfiguration.RequiredProperties = ["accountName", "collaborationBranch", "repositoryName", "rootFolder", "type"];

/**
 * GitHub Enterprise host name. For example: https://github.mydomain.com
 * @member {String} hostName
 */
FactoryGitHubConfiguration.prototype['hostName'] = undefined;


// Implement FactoryRepoConfiguration interface:
/**
 * Account name.
 * @member {String} accountName
 */
FactoryRepoConfiguration.prototype['accountName'] = undefined;
/**
 * Collaboration branch.
 * @member {String} collaborationBranch
 */
FactoryRepoConfiguration.prototype['collaborationBranch'] = undefined;
/**
 * Last commit id.
 * @member {String} lastCommitId
 */
FactoryRepoConfiguration.prototype['lastCommitId'] = undefined;
/**
 * Repository name.
 * @member {String} repositoryName
 */
FactoryRepoConfiguration.prototype['repositoryName'] = undefined;
/**
 * Root folder.
 * @member {String} rootFolder
 */
FactoryRepoConfiguration.prototype['rootFolder'] = undefined;
/**
 * Type of repo configuration.
 * @member {String} type
 */
FactoryRepoConfiguration.prototype['type'] = undefined;




export default FactoryGitHubConfiguration;

