/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TriggerRun model module.
 * @module model/TriggerRun
 * @version 2018-06-01
 */
class TriggerRun {
    /**
     * Constructs a new <code>TriggerRun</code>.
     * Trigger runs.
     * @alias module:model/TriggerRun
     * @extends Object
     */
    constructor() { 
        
        TriggerRun.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TriggerRun</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TriggerRun} obj Optional instance to populate.
     * @return {module:model/TriggerRun} The populated <code>TriggerRun</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TriggerRun();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('dependencyStatus')) {
                obj['dependencyStatus'] = ApiClient.convertToType(data['dependencyStatus'], {'String': Object});
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('runDimension')) {
                obj['runDimension'] = ApiClient.convertToType(data['runDimension'], {'String': 'String'});
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('triggerName')) {
                obj['triggerName'] = ApiClient.convertToType(data['triggerName'], 'String');
            }
            if (data.hasOwnProperty('triggerRunId')) {
                obj['triggerRunId'] = ApiClient.convertToType(data['triggerRunId'], 'String');
            }
            if (data.hasOwnProperty('triggerRunTimestamp')) {
                obj['triggerRunTimestamp'] = ApiClient.convertToType(data['triggerRunTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('triggerType')) {
                obj['triggerType'] = ApiClient.convertToType(data['triggerType'], 'String');
            }
            if (data.hasOwnProperty('triggeredPipelines')) {
                obj['triggeredPipelines'] = ApiClient.convertToType(data['triggeredPipelines'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TriggerRun</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TriggerRun</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['triggerName'] && !(typeof data['triggerName'] === 'string' || data['triggerName'] instanceof String)) {
            throw new Error("Expected the field `triggerName` to be a primitive type in the JSON string but got " + data['triggerName']);
        }
        // ensure the json data is a string
        if (data['triggerRunId'] && !(typeof data['triggerRunId'] === 'string' || data['triggerRunId'] instanceof String)) {
            throw new Error("Expected the field `triggerRunId` to be a primitive type in the JSON string but got " + data['triggerRunId']);
        }
        // ensure the json data is a string
        if (data['triggerType'] && !(typeof data['triggerType'] === 'string' || data['triggerType'] instanceof String)) {
            throw new Error("Expected the field `triggerType` to be a primitive type in the JSON string but got " + data['triggerType']);
        }

        return true;
    }


}



/**
 * Status of the upstream pipelines.
 * @member {Object.<String, Object>} dependencyStatus
 */
TriggerRun.prototype['dependencyStatus'] = undefined;

/**
 * Trigger error message.
 * @member {String} message
 */
TriggerRun.prototype['message'] = undefined;

/**
 * List of property name and value related to trigger run. Name, value pair depends on type of trigger.
 * @member {Object.<String, String>} properties
 */
TriggerRun.prototype['properties'] = undefined;

/**
 * Run dimension for which trigger was fired.
 * @member {Object.<String, String>} runDimension
 */
TriggerRun.prototype['runDimension'] = undefined;

/**
 * Trigger run status.
 * @member {module:model/TriggerRun.StatusEnum} status
 */
TriggerRun.prototype['status'] = undefined;

/**
 * Trigger name.
 * @member {String} triggerName
 */
TriggerRun.prototype['triggerName'] = undefined;

/**
 * Trigger run id.
 * @member {String} triggerRunId
 */
TriggerRun.prototype['triggerRunId'] = undefined;

/**
 * Trigger run start time.
 * @member {Date} triggerRunTimestamp
 */
TriggerRun.prototype['triggerRunTimestamp'] = undefined;

/**
 * Trigger type.
 * @member {String} triggerType
 */
TriggerRun.prototype['triggerType'] = undefined;

/**
 * List of pipeline name and run Id triggered by the trigger run.
 * @member {Object.<String, String>} triggeredPipelines
 */
TriggerRun.prototype['triggeredPipelines'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
TriggerRun['StatusEnum'] = {

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Inprogress"
     * @const
     */
    "Inprogress": "Inprogress"
};



export default TriggerRun;

