/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FactoryRepoConfiguration model module.
 * @module model/FactoryRepoConfiguration
 * @version 2018-06-01
 */
class FactoryRepoConfiguration {
    /**
     * Constructs a new <code>FactoryRepoConfiguration</code>.
     * Factory&#39;s git repo information.
     * @alias module:model/FactoryRepoConfiguration
     * @param accountName {String} Account name.
     * @param collaborationBranch {String} Collaboration branch.
     * @param repositoryName {String} Repository name.
     * @param rootFolder {String} Root folder.
     * @param type {String} Type of repo configuration.
     */
    constructor(accountName, collaborationBranch, repositoryName, rootFolder, type) { 
        
        FactoryRepoConfiguration.initialize(this, accountName, collaborationBranch, repositoryName, rootFolder, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountName, collaborationBranch, repositoryName, rootFolder, type) { 
        obj['accountName'] = accountName;
        obj['collaborationBranch'] = collaborationBranch;
        obj['repositoryName'] = repositoryName;
        obj['rootFolder'] = rootFolder;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>FactoryRepoConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FactoryRepoConfiguration} obj Optional instance to populate.
     * @return {module:model/FactoryRepoConfiguration} The populated <code>FactoryRepoConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FactoryRepoConfiguration();

            if (data.hasOwnProperty('accountName')) {
                obj['accountName'] = ApiClient.convertToType(data['accountName'], 'String');
            }
            if (data.hasOwnProperty('collaborationBranch')) {
                obj['collaborationBranch'] = ApiClient.convertToType(data['collaborationBranch'], 'String');
            }
            if (data.hasOwnProperty('lastCommitId')) {
                obj['lastCommitId'] = ApiClient.convertToType(data['lastCommitId'], 'String');
            }
            if (data.hasOwnProperty('repositoryName')) {
                obj['repositoryName'] = ApiClient.convertToType(data['repositoryName'], 'String');
            }
            if (data.hasOwnProperty('rootFolder')) {
                obj['rootFolder'] = ApiClient.convertToType(data['rootFolder'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FactoryRepoConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FactoryRepoConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FactoryRepoConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accountName'] && !(typeof data['accountName'] === 'string' || data['accountName'] instanceof String)) {
            throw new Error("Expected the field `accountName` to be a primitive type in the JSON string but got " + data['accountName']);
        }
        // ensure the json data is a string
        if (data['collaborationBranch'] && !(typeof data['collaborationBranch'] === 'string' || data['collaborationBranch'] instanceof String)) {
            throw new Error("Expected the field `collaborationBranch` to be a primitive type in the JSON string but got " + data['collaborationBranch']);
        }
        // ensure the json data is a string
        if (data['lastCommitId'] && !(typeof data['lastCommitId'] === 'string' || data['lastCommitId'] instanceof String)) {
            throw new Error("Expected the field `lastCommitId` to be a primitive type in the JSON string but got " + data['lastCommitId']);
        }
        // ensure the json data is a string
        if (data['repositoryName'] && !(typeof data['repositoryName'] === 'string' || data['repositoryName'] instanceof String)) {
            throw new Error("Expected the field `repositoryName` to be a primitive type in the JSON string but got " + data['repositoryName']);
        }
        // ensure the json data is a string
        if (data['rootFolder'] && !(typeof data['rootFolder'] === 'string' || data['rootFolder'] instanceof String)) {
            throw new Error("Expected the field `rootFolder` to be a primitive type in the JSON string but got " + data['rootFolder']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

FactoryRepoConfiguration.RequiredProperties = ["accountName", "collaborationBranch", "repositoryName", "rootFolder", "type"];

/**
 * Account name.
 * @member {String} accountName
 */
FactoryRepoConfiguration.prototype['accountName'] = undefined;

/**
 * Collaboration branch.
 * @member {String} collaborationBranch
 */
FactoryRepoConfiguration.prototype['collaborationBranch'] = undefined;

/**
 * Last commit id.
 * @member {String} lastCommitId
 */
FactoryRepoConfiguration.prototype['lastCommitId'] = undefined;

/**
 * Repository name.
 * @member {String} repositoryName
 */
FactoryRepoConfiguration.prototype['repositoryName'] = undefined;

/**
 * Root folder.
 * @member {String} rootFolder
 */
FactoryRepoConfiguration.prototype['rootFolder'] = undefined;

/**
 * Type of repo configuration.
 * @member {String} type
 */
FactoryRepoConfiguration.prototype['type'] = undefined;






export default FactoryRepoConfiguration;

