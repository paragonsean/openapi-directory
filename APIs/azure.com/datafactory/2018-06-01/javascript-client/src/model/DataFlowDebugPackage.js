/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataFlowDebugPackageDebugSettings from './DataFlowDebugPackageDebugSettings';
import DataFlowDebugResource from './DataFlowDebugResource';
import DataFlowStagingInfo from './DataFlowStagingInfo';
import DatasetDebugResource from './DatasetDebugResource';
import LinkedServiceDebugResource from './LinkedServiceDebugResource';

/**
 * The DataFlowDebugPackage model module.
 * @module model/DataFlowDebugPackage
 * @version 2018-06-01
 */
class DataFlowDebugPackage {
    /**
     * Constructs a new <code>DataFlowDebugPackage</code>.
     * Request body structure for starting data flow debug session.
     * @alias module:model/DataFlowDebugPackage
     * @extends Object
     */
    constructor() { 
        
        DataFlowDebugPackage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataFlowDebugPackage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataFlowDebugPackage} obj Optional instance to populate.
     * @return {module:model/DataFlowDebugPackage} The populated <code>DataFlowDebugPackage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataFlowDebugPackage();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('dataFlow')) {
                obj['dataFlow'] = DataFlowDebugResource.constructFromObject(data['dataFlow']);
            }
            if (data.hasOwnProperty('datasets')) {
                obj['datasets'] = ApiClient.convertToType(data['datasets'], [DatasetDebugResource]);
            }
            if (data.hasOwnProperty('debugSettings')) {
                obj['debugSettings'] = DataFlowDebugPackageDebugSettings.constructFromObject(data['debugSettings']);
            }
            if (data.hasOwnProperty('linkedServices')) {
                obj['linkedServices'] = ApiClient.convertToType(data['linkedServices'], [LinkedServiceDebugResource]);
            }
            if (data.hasOwnProperty('sessionId')) {
                obj['sessionId'] = ApiClient.convertToType(data['sessionId'], 'String');
            }
            if (data.hasOwnProperty('staging')) {
                obj['staging'] = DataFlowStagingInfo.constructFromObject(data['staging']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataFlowDebugPackage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataFlowDebugPackage</code>.
     */
    static validateJSON(data) {
        // validate the optional field `dataFlow`
        if (data['dataFlow']) { // data not null
          DataFlowDebugResource.validateJSON(data['dataFlow']);
        }
        if (data['datasets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['datasets'])) {
                throw new Error("Expected the field `datasets` to be an array in the JSON data but got " + data['datasets']);
            }
            // validate the optional field `datasets` (array)
            for (const item of data['datasets']) {
                DatasetDebugResource.validateJSON(item);
            };
        }
        // validate the optional field `debugSettings`
        if (data['debugSettings']) { // data not null
          DataFlowDebugPackageDebugSettings.validateJSON(data['debugSettings']);
        }
        if (data['linkedServices']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['linkedServices'])) {
                throw new Error("Expected the field `linkedServices` to be an array in the JSON data but got " + data['linkedServices']);
            }
            // validate the optional field `linkedServices` (array)
            for (const item of data['linkedServices']) {
                LinkedServiceDebugResource.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sessionId'] && !(typeof data['sessionId'] === 'string' || data['sessionId'] instanceof String)) {
            throw new Error("Expected the field `sessionId` to be a primitive type in the JSON string but got " + data['sessionId']);
        }
        // validate the optional field `staging`
        if (data['staging']) { // data not null
          DataFlowStagingInfo.validateJSON(data['staging']);
        }

        return true;
    }


}



/**
 * @member {module:model/DataFlowDebugResource} dataFlow
 */
DataFlowDebugPackage.prototype['dataFlow'] = undefined;

/**
 * List of datasets.
 * @member {Array.<module:model/DatasetDebugResource>} datasets
 */
DataFlowDebugPackage.prototype['datasets'] = undefined;

/**
 * @member {module:model/DataFlowDebugPackageDebugSettings} debugSettings
 */
DataFlowDebugPackage.prototype['debugSettings'] = undefined;

/**
 * List of linked services.
 * @member {Array.<module:model/LinkedServiceDebugResource>} linkedServices
 */
DataFlowDebugPackage.prototype['linkedServices'] = undefined;

/**
 * The ID of data flow debug session.
 * @member {String} sessionId
 */
DataFlowDebugPackage.prototype['sessionId'] = undefined;

/**
 * @member {module:model/DataFlowStagingInfo} staging
 */
DataFlowDebugPackage.prototype['staging'] = undefined;






export default DataFlowDebugPackage;

