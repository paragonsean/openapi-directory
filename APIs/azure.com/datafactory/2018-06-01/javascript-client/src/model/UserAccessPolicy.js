/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserAccessPolicy model module.
 * @module model/UserAccessPolicy
 * @version 2018-06-01
 */
class UserAccessPolicy {
    /**
     * Constructs a new <code>UserAccessPolicy</code>.
     * Get Data Plane read only token request definition.
     * @alias module:model/UserAccessPolicy
     */
    constructor() { 
        
        UserAccessPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UserAccessPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserAccessPolicy} obj Optional instance to populate.
     * @return {module:model/UserAccessPolicy} The populated <code>UserAccessPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserAccessPolicy();

            if (data.hasOwnProperty('accessResourcePath')) {
                obj['accessResourcePath'] = ApiClient.convertToType(data['accessResourcePath'], 'String');
            }
            if (data.hasOwnProperty('expireTime')) {
                obj['expireTime'] = ApiClient.convertToType(data['expireTime'], 'String');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = ApiClient.convertToType(data['permissions'], 'String');
            }
            if (data.hasOwnProperty('profileName')) {
                obj['profileName'] = ApiClient.convertToType(data['profileName'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserAccessPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserAccessPolicy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accessResourcePath'] && !(typeof data['accessResourcePath'] === 'string' || data['accessResourcePath'] instanceof String)) {
            throw new Error("Expected the field `accessResourcePath` to be a primitive type in the JSON string but got " + data['accessResourcePath']);
        }
        // ensure the json data is a string
        if (data['expireTime'] && !(typeof data['expireTime'] === 'string' || data['expireTime'] instanceof String)) {
            throw new Error("Expected the field `expireTime` to be a primitive type in the JSON string but got " + data['expireTime']);
        }
        // ensure the json data is a string
        if (data['permissions'] && !(typeof data['permissions'] === 'string' || data['permissions'] instanceof String)) {
            throw new Error("Expected the field `permissions` to be a primitive type in the JSON string but got " + data['permissions']);
        }
        // ensure the json data is a string
        if (data['profileName'] && !(typeof data['profileName'] === 'string' || data['profileName'] instanceof String)) {
            throw new Error("Expected the field `profileName` to be a primitive type in the JSON string but got " + data['profileName']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }

        return true;
    }


}



/**
 * The resource path to get access relative to factory. Currently only empty string is supported which corresponds to the factory resource.
 * @member {String} accessResourcePath
 */
UserAccessPolicy.prototype['accessResourcePath'] = undefined;

/**
 * Expiration time for the token. Maximum duration for the token is eight hours and by default the token will expire in eight hours.
 * @member {String} expireTime
 */
UserAccessPolicy.prototype['expireTime'] = undefined;

/**
 * The string with permissions for Data Plane access. Currently only 'r' is supported which grants read only access.
 * @member {String} permissions
 */
UserAccessPolicy.prototype['permissions'] = undefined;

/**
 * The name of the profile. Currently only the default is supported. The default value is DefaultProfile.
 * @member {String} profileName
 */
UserAccessPolicy.prototype['profileName'] = undefined;

/**
 * Start time for the token. If not specified the current time will be used.
 * @member {String} startTime
 */
UserAccessPolicy.prototype['startTime'] = undefined;






export default UserAccessPolicy;

