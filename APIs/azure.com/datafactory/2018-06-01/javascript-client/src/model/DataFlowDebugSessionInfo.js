/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DataFlowDebugSessionInfo model module.
 * @module model/DataFlowDebugSessionInfo
 * @version 2018-06-01
 */
class DataFlowDebugSessionInfo {
    /**
     * Constructs a new <code>DataFlowDebugSessionInfo</code>.
     * Data flow debug session info.
     * @alias module:model/DataFlowDebugSessionInfo
     * @extends Object
     */
    constructor() { 
        
        DataFlowDebugSessionInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataFlowDebugSessionInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataFlowDebugSessionInfo} obj Optional instance to populate.
     * @return {module:model/DataFlowDebugSessionInfo} The populated <code>DataFlowDebugSessionInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataFlowDebugSessionInfo();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('computeType')) {
                obj['computeType'] = ApiClient.convertToType(data['computeType'], 'String');
            }
            if (data.hasOwnProperty('coreCount')) {
                obj['coreCount'] = ApiClient.convertToType(data['coreCount'], 'Number');
            }
            if (data.hasOwnProperty('dataFlowName')) {
                obj['dataFlowName'] = ApiClient.convertToType(data['dataFlowName'], 'String');
            }
            if (data.hasOwnProperty('integrationRuntimeName')) {
                obj['integrationRuntimeName'] = ApiClient.convertToType(data['integrationRuntimeName'], 'String');
            }
            if (data.hasOwnProperty('lastActivityTime')) {
                obj['lastActivityTime'] = ApiClient.convertToType(data['lastActivityTime'], 'String');
            }
            if (data.hasOwnProperty('nodeCount')) {
                obj['nodeCount'] = ApiClient.convertToType(data['nodeCount'], 'Number');
            }
            if (data.hasOwnProperty('sessionId')) {
                obj['sessionId'] = ApiClient.convertToType(data['sessionId'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('timeToLiveInMinutes')) {
                obj['timeToLiveInMinutes'] = ApiClient.convertToType(data['timeToLiveInMinutes'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataFlowDebugSessionInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataFlowDebugSessionInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['computeType'] && !(typeof data['computeType'] === 'string' || data['computeType'] instanceof String)) {
            throw new Error("Expected the field `computeType` to be a primitive type in the JSON string but got " + data['computeType']);
        }
        // ensure the json data is a string
        if (data['dataFlowName'] && !(typeof data['dataFlowName'] === 'string' || data['dataFlowName'] instanceof String)) {
            throw new Error("Expected the field `dataFlowName` to be a primitive type in the JSON string but got " + data['dataFlowName']);
        }
        // ensure the json data is a string
        if (data['integrationRuntimeName'] && !(typeof data['integrationRuntimeName'] === 'string' || data['integrationRuntimeName'] instanceof String)) {
            throw new Error("Expected the field `integrationRuntimeName` to be a primitive type in the JSON string but got " + data['integrationRuntimeName']);
        }
        // ensure the json data is a string
        if (data['lastActivityTime'] && !(typeof data['lastActivityTime'] === 'string' || data['lastActivityTime'] instanceof String)) {
            throw new Error("Expected the field `lastActivityTime` to be a primitive type in the JSON string but got " + data['lastActivityTime']);
        }
        // ensure the json data is a string
        if (data['sessionId'] && !(typeof data['sessionId'] === 'string' || data['sessionId'] instanceof String)) {
            throw new Error("Expected the field `sessionId` to be a primitive type in the JSON string but got " + data['sessionId']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }

        return true;
    }


}



/**
 * Compute type of the cluster.
 * @member {String} computeType
 */
DataFlowDebugSessionInfo.prototype['computeType'] = undefined;

/**
 * Core count of the cluster.
 * @member {Number} coreCount
 */
DataFlowDebugSessionInfo.prototype['coreCount'] = undefined;

/**
 * The name of the data flow.
 * @member {String} dataFlowName
 */
DataFlowDebugSessionInfo.prototype['dataFlowName'] = undefined;

/**
 * Attached integration runtime name of data flow debug session.
 * @member {String} integrationRuntimeName
 */
DataFlowDebugSessionInfo.prototype['integrationRuntimeName'] = undefined;

/**
 * Last activity time of data flow debug session.
 * @member {String} lastActivityTime
 */
DataFlowDebugSessionInfo.prototype['lastActivityTime'] = undefined;

/**
 * Node count of the cluster. (deprecated property)
 * @member {Number} nodeCount
 */
DataFlowDebugSessionInfo.prototype['nodeCount'] = undefined;

/**
 * The ID of data flow debug session.
 * @member {String} sessionId
 */
DataFlowDebugSessionInfo.prototype['sessionId'] = undefined;

/**
 * Start time of data flow debug session.
 * @member {String} startTime
 */
DataFlowDebugSessionInfo.prototype['startTime'] = undefined;

/**
 * Compute type of the cluster.
 * @member {Number} timeToLiveInMinutes
 */
DataFlowDebugSessionInfo.prototype['timeToLiveInMinutes'] = undefined;






export default DataFlowDebugSessionInfo;

