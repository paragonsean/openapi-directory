/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccessPolicyResponse from '../model/AccessPolicyResponse';
import CloudError from '../model/CloudError';
import Factory from '../model/Factory';
import FactoryListResponse from '../model/FactoryListResponse';
import FactoryRepoUpdate from '../model/FactoryRepoUpdate';
import FactoryUpdateParameters from '../model/FactoryUpdateParameters';
import GitHubAccessTokenRequest from '../model/GitHubAccessTokenRequest';
import GitHubAccessTokenResponse from '../model/GitHubAccessTokenResponse';
import UserAccessPolicy from '../model/UserAccessPolicy';

/**
* Factories service.
* @module api/FactoriesApi
* @version 2018-06-01
*/
export default class FactoriesApi {

    /**
    * Constructs a new FactoriesApi. 
    * @alias module:api/FactoriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the factoriesConfigureFactoryRepo operation.
     * @callback module:api/FactoriesApi~factoriesConfigureFactoryRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Factory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a factory's repo information.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} locationId The location identifier.
     * @param {String} apiVersion The API version.
     * @param {module:model/FactoryRepoUpdate} factoryRepoUpdate Update factory repo request definition.
     * @param {module:api/FactoriesApi~factoriesConfigureFactoryRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Factory}
     */
    factoriesConfigureFactoryRepo(subscriptionId, locationId, apiVersion, factoryRepoUpdate, callback) {
      let postBody = factoryRepoUpdate;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling factoriesConfigureFactoryRepo");
      }
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling factoriesConfigureFactoryRepo");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling factoriesConfigureFactoryRepo");
      }
      // verify the required parameter 'factoryRepoUpdate' is set
      if (factoryRepoUpdate === undefined || factoryRepoUpdate === null) {
        throw new Error("Missing the required parameter 'factoryRepoUpdate' when calling factoriesConfigureFactoryRepo");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'locationId': locationId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Factory;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.DataFactory/locations/{locationId}/configureFactoryRepo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the factoriesCreateOrUpdate operation.
     * @callback module:api/FactoriesApi~factoriesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Factory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a factory.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} apiVersion The API version.
     * @param {module:model/Factory} factory Factory resource definition.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] ETag of the factory entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update.
     * @param {module:api/FactoriesApi~factoriesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Factory}
     */
    factoriesCreateOrUpdate(subscriptionId, resourceGroupName, factoryName, apiVersion, factory, opts, callback) {
      opts = opts || {};
      let postBody = factory;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling factoriesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling factoriesCreateOrUpdate");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling factoriesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling factoriesCreateOrUpdate");
      }
      // verify the required parameter 'factory' is set
      if (factory === undefined || factory === null) {
        throw new Error("Missing the required parameter 'factory' when calling factoriesCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Factory;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the factoriesDelete operation.
     * @callback module:api/FactoriesApi~factoriesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a factory.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} apiVersion The API version.
     * @param {module:api/FactoriesApi~factoriesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    factoriesDelete(subscriptionId, resourceGroupName, factoryName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling factoriesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling factoriesDelete");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling factoriesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling factoriesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the factoriesGet operation.
     * @callback module:api/FactoriesApi~factoriesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Factory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a factory.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} apiVersion The API version.
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] ETag of the factory entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned.
     * @param {module:api/FactoriesApi~factoriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Factory}
     */
    factoriesGet(subscriptionId, resourceGroupName, factoryName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling factoriesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling factoriesGet");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling factoriesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling factoriesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Factory;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the factoriesGetDataPlaneAccess operation.
     * @callback module:api/FactoriesApi~factoriesGetDataPlaneAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Data Plane access.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} apiVersion The API version.
     * @param {module:model/UserAccessPolicy} policy Data Plane user access policy definition.
     * @param {module:api/FactoriesApi~factoriesGetDataPlaneAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessPolicyResponse}
     */
    factoriesGetDataPlaneAccess(subscriptionId, resourceGroupName, factoryName, apiVersion, policy, callback) {
      let postBody = policy;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling factoriesGetDataPlaneAccess");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling factoriesGetDataPlaneAccess");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling factoriesGetDataPlaneAccess");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling factoriesGetDataPlaneAccess");
      }
      // verify the required parameter 'policy' is set
      if (policy === undefined || policy === null) {
        throw new Error("Missing the required parameter 'policy' when calling factoriesGetDataPlaneAccess");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccessPolicyResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/getDataPlaneAccess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the factoriesGetGitHubAccessToken operation.
     * @callback module:api/FactoriesApi~factoriesGetGitHubAccessTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GitHubAccessTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get GitHub Access Token.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} apiVersion The API version.
     * @param {module:model/GitHubAccessTokenRequest} gitHubAccessTokenRequest Get GitHub access token request definition.
     * @param {module:api/FactoriesApi~factoriesGetGitHubAccessTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GitHubAccessTokenResponse}
     */
    factoriesGetGitHubAccessToken(subscriptionId, resourceGroupName, factoryName, apiVersion, gitHubAccessTokenRequest, callback) {
      let postBody = gitHubAccessTokenRequest;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling factoriesGetGitHubAccessToken");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling factoriesGetGitHubAccessToken");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling factoriesGetGitHubAccessToken");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling factoriesGetGitHubAccessToken");
      }
      // verify the required parameter 'gitHubAccessTokenRequest' is set
      if (gitHubAccessTokenRequest === undefined || gitHubAccessTokenRequest === null) {
        throw new Error("Missing the required parameter 'gitHubAccessTokenRequest' when calling factoriesGetGitHubAccessToken");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GitHubAccessTokenResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/getGitHubAccessToken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the factoriesList operation.
     * @callback module:api/FactoriesApi~factoriesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FactoryListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists factories under the specified subscription.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} apiVersion The API version.
     * @param {module:api/FactoriesApi~factoriesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FactoryListResponse}
     */
    factoriesList(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling factoriesList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling factoriesList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FactoryListResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.DataFactory/factories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the factoriesListByResourceGroup operation.
     * @callback module:api/FactoriesApi~factoriesListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FactoryListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists factories.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} apiVersion The API version.
     * @param {module:api/FactoriesApi~factoriesListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FactoryListResponse}
     */
    factoriesListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling factoriesListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling factoriesListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling factoriesListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FactoryListResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the factoriesUpdate operation.
     * @callback module:api/FactoriesApi~factoriesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Factory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a factory.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} apiVersion The API version.
     * @param {module:model/FactoryUpdateParameters} factoryUpdateParameters The parameters for updating a factory.
     * @param {module:api/FactoriesApi~factoriesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Factory}
     */
    factoriesUpdate(subscriptionId, resourceGroupName, factoryName, apiVersion, factoryUpdateParameters, callback) {
      let postBody = factoryUpdateParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling factoriesUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling factoriesUpdate");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling factoriesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling factoriesUpdate");
      }
      // verify the required parameter 'factoryUpdateParameters' is set
      if (factoryUpdateParameters === undefined || factoryUpdateParameters === null) {
        throw new Error("Missing the required parameter 'factoryUpdateParameters' when calling factoriesUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Factory;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
