/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import RunFilterParameters from '../model/RunFilterParameters';
import TriggerRunsQueryResponse from '../model/TriggerRunsQueryResponse';

/**
* Triggerruns service.
* @module api/TriggerrunsApi
* @version 2018-06-01
*/
export default class TriggerrunsApi {

    /**
    * Constructs a new TriggerrunsApi. 
    * @alias module:api/TriggerrunsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the triggerRunsQueryByFactory operation.
     * @callback module:api/TriggerrunsApi~triggerRunsQueryByFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TriggerRunsQueryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query trigger runs.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} apiVersion The API version.
     * @param {module:model/RunFilterParameters} filterParameters Parameters to filter the pipeline run.
     * @param {module:api/TriggerrunsApi~triggerRunsQueryByFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TriggerRunsQueryResponse}
     */
    triggerRunsQueryByFactory(subscriptionId, resourceGroupName, factoryName, apiVersion, filterParameters, callback) {
      let postBody = filterParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling triggerRunsQueryByFactory");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling triggerRunsQueryByFactory");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling triggerRunsQueryByFactory");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling triggerRunsQueryByFactory");
      }
      // verify the required parameter 'filterParameters' is set
      if (filterParameters === undefined || filterParameters === null) {
        throw new Error("Missing the required parameter 'filterParameters' when calling triggerRunsQueryByFactory");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TriggerRunsQueryResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryTriggerRuns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the triggerRunsRerun operation.
     * @callback module:api/TriggerrunsApi~triggerRunsRerunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rerun single trigger instance by runId.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} triggerName The trigger name.
     * @param {String} runId The pipeline run identifier.
     * @param {String} apiVersion The API version.
     * @param {module:api/TriggerrunsApi~triggerRunsRerunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    triggerRunsRerun(subscriptionId, resourceGroupName, factoryName, triggerName, runId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling triggerRunsRerun");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling triggerRunsRerun");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling triggerRunsRerun");
      }
      // verify the required parameter 'triggerName' is set
      if (triggerName === undefined || triggerName === null) {
        throw new Error("Missing the required parameter 'triggerName' when calling triggerRunsRerun");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling triggerRunsRerun");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling triggerRunsRerun");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'triggerName': triggerName,
        'runId': runId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/triggerRuns/{runId}/rerun', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
