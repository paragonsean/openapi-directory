/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import IntegrationRuntimeNodesGet200Response from '../model/IntegrationRuntimeNodesGet200Response';
import IntegrationRuntimeNodesGetIpAddress200Response from '../model/IntegrationRuntimeNodesGetIpAddress200Response';
import UpdateIntegrationRuntimeNodeRequest from '../model/UpdateIntegrationRuntimeNodeRequest';

/**
* IntegrationRuntimeNodes service.
* @module api/IntegrationRuntimeNodesApi
* @version 2018-06-01
*/
export default class IntegrationRuntimeNodesApi {

    /**
    * Constructs a new IntegrationRuntimeNodesApi. 
    * @alias module:api/IntegrationRuntimeNodesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the integrationRuntimeNodesDelete operation.
     * @callback module:api/IntegrationRuntimeNodesApi~integrationRuntimeNodesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a self-hosted integration runtime node.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} integrationRuntimeName The integration runtime name.
     * @param {String} nodeName The integration runtime node name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationRuntimeNodesApi~integrationRuntimeNodesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    integrationRuntimeNodesDelete(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, nodeName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationRuntimeNodesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationRuntimeNodesDelete");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling integrationRuntimeNodesDelete");
      }
      // verify the required parameter 'integrationRuntimeName' is set
      if (integrationRuntimeName === undefined || integrationRuntimeName === null) {
        throw new Error("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimeNodesDelete");
      }
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling integrationRuntimeNodesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationRuntimeNodesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'integrationRuntimeName': integrationRuntimeName,
        'nodeName': nodeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/nodes/{nodeName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationRuntimeNodesGet operation.
     * @callback module:api/IntegrationRuntimeNodesApi~integrationRuntimeNodesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationRuntimeNodesGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a self-hosted integration runtime node.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} integrationRuntimeName The integration runtime name.
     * @param {String} nodeName The integration runtime node name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationRuntimeNodesApi~integrationRuntimeNodesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationRuntimeNodesGet200Response}
     */
    integrationRuntimeNodesGet(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, nodeName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationRuntimeNodesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationRuntimeNodesGet");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling integrationRuntimeNodesGet");
      }
      // verify the required parameter 'integrationRuntimeName' is set
      if (integrationRuntimeName === undefined || integrationRuntimeName === null) {
        throw new Error("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimeNodesGet");
      }
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling integrationRuntimeNodesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationRuntimeNodesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'integrationRuntimeName': integrationRuntimeName,
        'nodeName': nodeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntegrationRuntimeNodesGet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/nodes/{nodeName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationRuntimeNodesGetIpAddress operation.
     * @callback module:api/IntegrationRuntimeNodesApi~integrationRuntimeNodesGetIpAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationRuntimeNodesGetIpAddress200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the IP address of self-hosted integration runtime node.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} integrationRuntimeName The integration runtime name.
     * @param {String} nodeName The integration runtime node name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationRuntimeNodesApi~integrationRuntimeNodesGetIpAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationRuntimeNodesGetIpAddress200Response}
     */
    integrationRuntimeNodesGetIpAddress(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, nodeName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationRuntimeNodesGetIpAddress");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationRuntimeNodesGetIpAddress");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling integrationRuntimeNodesGetIpAddress");
      }
      // verify the required parameter 'integrationRuntimeName' is set
      if (integrationRuntimeName === undefined || integrationRuntimeName === null) {
        throw new Error("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimeNodesGetIpAddress");
      }
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling integrationRuntimeNodesGetIpAddress");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationRuntimeNodesGetIpAddress");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'integrationRuntimeName': integrationRuntimeName,
        'nodeName': nodeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntegrationRuntimeNodesGetIpAddress200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/nodes/{nodeName}/ipAddress', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationRuntimeNodesUpdate operation.
     * @callback module:api/IntegrationRuntimeNodesApi~integrationRuntimeNodesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationRuntimeNodesGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a self-hosted integration runtime node.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} integrationRuntimeName The integration runtime name.
     * @param {String} nodeName The integration runtime node name.
     * @param {String} apiVersion The API version.
     * @param {module:model/UpdateIntegrationRuntimeNodeRequest} updateIntegrationRuntimeNodeRequest The parameters for updating an integration runtime node.
     * @param {module:api/IntegrationRuntimeNodesApi~integrationRuntimeNodesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationRuntimeNodesGet200Response}
     */
    integrationRuntimeNodesUpdate(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, nodeName, apiVersion, updateIntegrationRuntimeNodeRequest, callback) {
      let postBody = updateIntegrationRuntimeNodeRequest;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationRuntimeNodesUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationRuntimeNodesUpdate");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling integrationRuntimeNodesUpdate");
      }
      // verify the required parameter 'integrationRuntimeName' is set
      if (integrationRuntimeName === undefined || integrationRuntimeName === null) {
        throw new Error("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimeNodesUpdate");
      }
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling integrationRuntimeNodesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationRuntimeNodesUpdate");
      }
      // verify the required parameter 'updateIntegrationRuntimeNodeRequest' is set
      if (updateIntegrationRuntimeNodeRequest === undefined || updateIntegrationRuntimeNodeRequest === null) {
        throw new Error("Missing the required parameter 'updateIntegrationRuntimeNodeRequest' when calling integrationRuntimeNodesUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'integrationRuntimeName': integrationRuntimeName,
        'nodeName': nodeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IntegrationRuntimeNodesGet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/nodes/{nodeName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
