/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddDataFlowToDebugSessionResponse from '../model/AddDataFlowToDebugSessionResponse';
import CloudError from '../model/CloudError';
import CreateDataFlowDebugSessionRequest from '../model/CreateDataFlowDebugSessionRequest';
import CreateDataFlowDebugSessionResponse from '../model/CreateDataFlowDebugSessionResponse';
import DataFlowDebugCommandRequest from '../model/DataFlowDebugCommandRequest';
import DataFlowDebugCommandResponse from '../model/DataFlowDebugCommandResponse';
import DataFlowDebugPackage from '../model/DataFlowDebugPackage';
import DeleteDataFlowDebugSessionRequest from '../model/DeleteDataFlowDebugSessionRequest';
import QueryDataFlowDebugSessionsResponse from '../model/QueryDataFlowDebugSessionsResponse';

/**
* DataFlowDebugSession service.
* @module api/DataFlowDebugSessionApi
* @version 2018-06-01
*/
export default class DataFlowDebugSessionApi {

    /**
    * Constructs a new DataFlowDebugSessionApi. 
    * @alias module:api/DataFlowDebugSessionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dataFlowDebugSessionAddDataFlow operation.
     * @callback module:api/DataFlowDebugSessionApi~dataFlowDebugSessionAddDataFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddDataFlowToDebugSessionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a data flow into debug session.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} apiVersion The API version.
     * @param {module:model/DataFlowDebugPackage} request Data flow debug session definition with debug content.
     * @param {module:api/DataFlowDebugSessionApi~dataFlowDebugSessionAddDataFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddDataFlowToDebugSessionResponse}
     */
    dataFlowDebugSessionAddDataFlow(subscriptionId, resourceGroupName, factoryName, apiVersion, request, callback) {
      let postBody = request;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataFlowDebugSessionAddDataFlow");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataFlowDebugSessionAddDataFlow");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling dataFlowDebugSessionAddDataFlow");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataFlowDebugSessionAddDataFlow");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling dataFlowDebugSessionAddDataFlow");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddDataFlowToDebugSessionResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/addDataFlowToDebugSession', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataFlowDebugSessionCreate operation.
     * @callback module:api/DataFlowDebugSessionApi~dataFlowDebugSessionCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDataFlowDebugSessionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a data flow debug session.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} apiVersion The API version.
     * @param {module:model/CreateDataFlowDebugSessionRequest} request Data flow debug session definition
     * @param {module:api/DataFlowDebugSessionApi~dataFlowDebugSessionCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDataFlowDebugSessionResponse}
     */
    dataFlowDebugSessionCreate(subscriptionId, resourceGroupName, factoryName, apiVersion, request, callback) {
      let postBody = request;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataFlowDebugSessionCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataFlowDebugSessionCreate");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling dataFlowDebugSessionCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataFlowDebugSessionCreate");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling dataFlowDebugSessionCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDataFlowDebugSessionResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/createDataFlowDebugSession', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataFlowDebugSessionDelete operation.
     * @callback module:api/DataFlowDebugSessionApi~dataFlowDebugSessionDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a data flow debug session.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} apiVersion The API version.
     * @param {module:model/DeleteDataFlowDebugSessionRequest} request Data flow debug session definition for deletion
     * @param {module:api/DataFlowDebugSessionApi~dataFlowDebugSessionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dataFlowDebugSessionDelete(subscriptionId, resourceGroupName, factoryName, apiVersion, request, callback) {
      let postBody = request;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataFlowDebugSessionDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataFlowDebugSessionDelete");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling dataFlowDebugSessionDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataFlowDebugSessionDelete");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling dataFlowDebugSessionDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/deleteDataFlowDebugSession', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataFlowDebugSessionExecuteCommand operation.
     * @callback module:api/DataFlowDebugSessionApi~dataFlowDebugSessionExecuteCommandCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataFlowDebugCommandResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute a data flow debug command.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} apiVersion The API version.
     * @param {module:model/DataFlowDebugCommandRequest} request Data flow debug command definition.
     * @param {module:api/DataFlowDebugSessionApi~dataFlowDebugSessionExecuteCommandCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataFlowDebugCommandResponse}
     */
    dataFlowDebugSessionExecuteCommand(subscriptionId, resourceGroupName, factoryName, apiVersion, request, callback) {
      let postBody = request;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataFlowDebugSessionExecuteCommand");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataFlowDebugSessionExecuteCommand");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling dataFlowDebugSessionExecuteCommand");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataFlowDebugSessionExecuteCommand");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling dataFlowDebugSessionExecuteCommand");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DataFlowDebugCommandResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/executeDataFlowDebugCommand', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataFlowDebugSessionQueryByFactory operation.
     * @callback module:api/DataFlowDebugSessionApi~dataFlowDebugSessionQueryByFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryDataFlowDebugSessionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query all active data flow debug sessions.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} apiVersion The API version.
     * @param {module:api/DataFlowDebugSessionApi~dataFlowDebugSessionQueryByFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueryDataFlowDebugSessionsResponse}
     */
    dataFlowDebugSessionQueryByFactory(subscriptionId, resourceGroupName, factoryName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataFlowDebugSessionQueryByFactory");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataFlowDebugSessionQueryByFactory");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling dataFlowDebugSessionQueryByFactory");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataFlowDebugSessionQueryByFactory");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QueryDataFlowDebugSessionsResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryDataFlowDebugSessions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
