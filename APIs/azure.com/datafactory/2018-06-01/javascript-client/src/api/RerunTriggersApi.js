/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import RerunTriggerListResponse from '../model/RerunTriggerListResponse';
import RerunTumblingWindowTriggerActionParameters from '../model/RerunTumblingWindowTriggerActionParameters';
import TriggerResource from '../model/TriggerResource';

/**
* RerunTriggers service.
* @module api/RerunTriggersApi
* @version 2018-06-01
*/
export default class RerunTriggersApi {

    /**
    * Constructs a new RerunTriggersApi. 
    * @alias module:api/RerunTriggersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the rerunTriggersCancel operation.
     * @callback module:api/RerunTriggersApi~rerunTriggersCancelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a trigger.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} triggerName The trigger name.
     * @param {String} rerunTriggerName The rerun trigger name.
     * @param {String} apiVersion The API version.
     * @param {module:api/RerunTriggersApi~rerunTriggersCancelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rerunTriggersCancel(subscriptionId, resourceGroupName, factoryName, triggerName, rerunTriggerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling rerunTriggersCancel");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling rerunTriggersCancel");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling rerunTriggersCancel");
      }
      // verify the required parameter 'triggerName' is set
      if (triggerName === undefined || triggerName === null) {
        throw new Error("Missing the required parameter 'triggerName' when calling rerunTriggersCancel");
      }
      // verify the required parameter 'rerunTriggerName' is set
      if (rerunTriggerName === undefined || rerunTriggerName === null) {
        throw new Error("Missing the required parameter 'rerunTriggerName' when calling rerunTriggersCancel");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling rerunTriggersCancel");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'triggerName': triggerName,
        'rerunTriggerName': rerunTriggerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers/{rerunTriggerName}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rerunTriggersCreate operation.
     * @callback module:api/RerunTriggersApi~rerunTriggersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TriggerResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a rerun trigger.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} triggerName The trigger name.
     * @param {String} rerunTriggerName The rerun trigger name.
     * @param {String} apiVersion The API version.
     * @param {module:model/RerunTumblingWindowTriggerActionParameters} rerunTumblingWindowTriggerActionParameters Rerun tumbling window trigger action parameters.
     * @param {module:api/RerunTriggersApi~rerunTriggersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TriggerResource}
     */
    rerunTriggersCreate(subscriptionId, resourceGroupName, factoryName, triggerName, rerunTriggerName, apiVersion, rerunTumblingWindowTriggerActionParameters, callback) {
      let postBody = rerunTumblingWindowTriggerActionParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling rerunTriggersCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling rerunTriggersCreate");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling rerunTriggersCreate");
      }
      // verify the required parameter 'triggerName' is set
      if (triggerName === undefined || triggerName === null) {
        throw new Error("Missing the required parameter 'triggerName' when calling rerunTriggersCreate");
      }
      // verify the required parameter 'rerunTriggerName' is set
      if (rerunTriggerName === undefined || rerunTriggerName === null) {
        throw new Error("Missing the required parameter 'rerunTriggerName' when calling rerunTriggersCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling rerunTriggersCreate");
      }
      // verify the required parameter 'rerunTumblingWindowTriggerActionParameters' is set
      if (rerunTumblingWindowTriggerActionParameters === undefined || rerunTumblingWindowTriggerActionParameters === null) {
        throw new Error("Missing the required parameter 'rerunTumblingWindowTriggerActionParameters' when calling rerunTriggersCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'triggerName': triggerName,
        'rerunTriggerName': rerunTriggerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TriggerResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers/{rerunTriggerName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rerunTriggersListByTrigger operation.
     * @callback module:api/RerunTriggersApi~rerunTriggersListByTriggerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RerunTriggerListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists rerun triggers by an original trigger name.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} triggerName The trigger name.
     * @param {String} apiVersion The API version.
     * @param {module:api/RerunTriggersApi~rerunTriggersListByTriggerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RerunTriggerListResponse}
     */
    rerunTriggersListByTrigger(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling rerunTriggersListByTrigger");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling rerunTriggersListByTrigger");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling rerunTriggersListByTrigger");
      }
      // verify the required parameter 'triggerName' is set
      if (triggerName === undefined || triggerName === null) {
        throw new Error("Missing the required parameter 'triggerName' when calling rerunTriggersListByTrigger");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling rerunTriggersListByTrigger");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'triggerName': triggerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RerunTriggerListResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rerunTriggersStart operation.
     * @callback module:api/RerunTriggersApi~rerunTriggersStartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a trigger.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} triggerName The trigger name.
     * @param {String} rerunTriggerName The rerun trigger name.
     * @param {String} apiVersion The API version.
     * @param {module:api/RerunTriggersApi~rerunTriggersStartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rerunTriggersStart(subscriptionId, resourceGroupName, factoryName, triggerName, rerunTriggerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling rerunTriggersStart");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling rerunTriggersStart");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling rerunTriggersStart");
      }
      // verify the required parameter 'triggerName' is set
      if (triggerName === undefined || triggerName === null) {
        throw new Error("Missing the required parameter 'triggerName' when calling rerunTriggersStart");
      }
      // verify the required parameter 'rerunTriggerName' is set
      if (rerunTriggerName === undefined || rerunTriggerName === null) {
        throw new Error("Missing the required parameter 'rerunTriggerName' when calling rerunTriggersStart");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling rerunTriggersStart");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'triggerName': triggerName,
        'rerunTriggerName': rerunTriggerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers/{rerunTriggerName}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rerunTriggersStop operation.
     * @callback module:api/RerunTriggersApi~rerunTriggersStopCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops a trigger.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} triggerName The trigger name.
     * @param {String} rerunTriggerName The rerun trigger name.
     * @param {String} apiVersion The API version.
     * @param {module:api/RerunTriggersApi~rerunTriggersStopCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rerunTriggersStop(subscriptionId, resourceGroupName, factoryName, triggerName, rerunTriggerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling rerunTriggersStop");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling rerunTriggersStop");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling rerunTriggersStop");
      }
      // verify the required parameter 'triggerName' is set
      if (triggerName === undefined || triggerName === null) {
        throw new Error("Missing the required parameter 'triggerName' when calling rerunTriggersStop");
      }
      // verify the required parameter 'rerunTriggerName' is set
      if (rerunTriggerName === undefined || rerunTriggerName === null) {
        throw new Error("Missing the required parameter 'rerunTriggerName' when calling rerunTriggersStop");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling rerunTriggersStop");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'triggerName': triggerName,
        'rerunTriggerName': rerunTriggerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers/{rerunTriggerName}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
