/*
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.TriggerListResponse;
import org.openapitools.client.model.TriggerResource;
import org.openapitools.client.model.TriggerSubscriptionOperationStatus;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TriggersApi
 */
@Disabled
public class TriggersApiTest {

    private final TriggersApi api = new TriggersApi();

    /**
     * Creates or updates a trigger.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void triggersCreateOrUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String factoryName = null;
        String triggerName = null;
        String apiVersion = null;
        TriggerResource trigger = null;
        String ifMatch = null;
        TriggerResource response = api.triggersCreateOrUpdate(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion, trigger, ifMatch);
        // TODO: test validations
    }

    /**
     * Deletes a trigger.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void triggersDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String factoryName = null;
        String triggerName = null;
        String apiVersion = null;
        api.triggersDelete(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a trigger&#39;s event subscription status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void triggersGetEventSubscriptionStatusTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String factoryName = null;
        String triggerName = null;
        String apiVersion = null;
        TriggerSubscriptionOperationStatus response = api.triggersGetEventSubscriptionStatus(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists triggers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void triggersListByFactoryTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String factoryName = null;
        String apiVersion = null;
        TriggerListResponse response = api.triggersListByFactory(subscriptionId, resourceGroupName, factoryName, apiVersion);
        // TODO: test validations
    }

    /**
     * Starts a trigger.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void triggersStartTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String factoryName = null;
        String triggerName = null;
        String apiVersion = null;
        api.triggersStart(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Stops a trigger.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void triggersStopTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String factoryName = null;
        String triggerName = null;
        String apiVersion = null;
        api.triggersStop(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Subscribe event trigger to events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void triggersSubscribeToEventsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String factoryName = null;
        String triggerName = null;
        String apiVersion = null;
        TriggerSubscriptionOperationStatus response = api.triggersSubscribeToEvents(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Unsubscribe event trigger from events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void triggersUnsubscribeFromEventsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String factoryName = null;
        String triggerName = null;
        String apiVersion = null;
        TriggerSubscriptionOperationStatus response = api.triggersUnsubscribeFromEvents(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion);
        // TODO: test validations
    }

}
