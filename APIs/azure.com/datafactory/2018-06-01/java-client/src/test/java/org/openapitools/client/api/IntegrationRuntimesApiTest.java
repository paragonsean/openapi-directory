/*
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.CreateLinkedIntegrationRuntimeRequest;
import org.openapitools.client.model.IntegrationRuntimeListResponse;
import org.openapitools.client.model.IntegrationRuntimeResource;
import org.openapitools.client.model.IntegrationRuntimeStatusResponse;
import org.openapitools.client.model.IntegrationRuntimesGetConnectionInfo200Response;
import org.openapitools.client.model.IntegrationRuntimesGetMonitoringData200Response;
import org.openapitools.client.model.IntegrationRuntimesListAuthKeys200Response;
import org.openapitools.client.model.IntegrationRuntimesRegenerateAuthKeyRequest;
import org.openapitools.client.model.LinkedIntegrationRuntimeRequest;
import org.openapitools.client.model.UpdateIntegrationRuntimeRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IntegrationRuntimesApi
 */
@Disabled
public class IntegrationRuntimesApiTest {

    private final IntegrationRuntimesApi api = new IntegrationRuntimesApi();

    /**
     * Create a linked integration runtime entry in a shared integration runtime.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void integrationRuntimesCreateLinkedIntegrationRuntimeTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String factoryName = null;
        String integrationRuntimeName = null;
        String apiVersion = null;
        CreateLinkedIntegrationRuntimeRequest createLinkedIntegrationRuntimeRequest = null;
        IntegrationRuntimeStatusResponse response = api.integrationRuntimesCreateLinkedIntegrationRuntime(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, createLinkedIntegrationRuntimeRequest);
        // TODO: test validations
    }

    /**
     * Creates or updates an integration runtime.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void integrationRuntimesCreateOrUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String factoryName = null;
        String integrationRuntimeName = null;
        String apiVersion = null;
        IntegrationRuntimeResource integrationRuntime = null;
        String ifMatch = null;
        IntegrationRuntimeResource response = api.integrationRuntimesCreateOrUpdate(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, integrationRuntime, ifMatch);
        // TODO: test validations
    }

    /**
     * Deletes an integration runtime.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void integrationRuntimesDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String factoryName = null;
        String integrationRuntimeName = null;
        String apiVersion = null;
        api.integrationRuntimesDelete(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets an integration runtime.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void integrationRuntimesGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String factoryName = null;
        String integrationRuntimeName = null;
        String apiVersion = null;
        String ifNoneMatch = null;
        IntegrationRuntimeResource response = api.integrationRuntimesGet(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Gets the on-premises integration runtime connection information for encrypting the on-premises data source credentials.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void integrationRuntimesGetConnectionInfoTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String factoryName = null;
        String integrationRuntimeName = null;
        String apiVersion = null;
        IntegrationRuntimesGetConnectionInfo200Response response = api.integrationRuntimesGetConnectionInfo(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the integration runtime monitoring data, which includes the monitor data for all the nodes under this integration runtime.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void integrationRuntimesGetMonitoringDataTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String factoryName = null;
        String integrationRuntimeName = null;
        String apiVersion = null;
        IntegrationRuntimesGetMonitoringData200Response response = api.integrationRuntimesGetMonitoringData(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets detailed status information for an integration runtime.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void integrationRuntimesGetStatusTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String factoryName = null;
        String integrationRuntimeName = null;
        String apiVersion = null;
        IntegrationRuntimeStatusResponse response = api.integrationRuntimesGetStatus(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the authentication keys for an integration runtime.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void integrationRuntimesListAuthKeysTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String factoryName = null;
        String integrationRuntimeName = null;
        String apiVersion = null;
        IntegrationRuntimesListAuthKeys200Response response = api.integrationRuntimesListAuthKeys(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists integration runtimes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void integrationRuntimesListByFactoryTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String factoryName = null;
        String apiVersion = null;
        IntegrationRuntimeListResponse response = api.integrationRuntimesListByFactory(subscriptionId, resourceGroupName, factoryName, apiVersion);
        // TODO: test validations
    }

    /**
     * Regenerates the authentication key for an integration runtime.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void integrationRuntimesRegenerateAuthKeyTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String factoryName = null;
        String integrationRuntimeName = null;
        String apiVersion = null;
        IntegrationRuntimesRegenerateAuthKeyRequest regenerateKeyParameters = null;
        IntegrationRuntimesListAuthKeys200Response response = api.integrationRuntimesRegenerateAuthKey(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, regenerateKeyParameters);
        // TODO: test validations
    }

    /**
     * Remove all linked integration runtimes under specific data factory in a self-hosted integration runtime.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void integrationRuntimesRemoveLinksTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String factoryName = null;
        String integrationRuntimeName = null;
        String apiVersion = null;
        LinkedIntegrationRuntimeRequest linkedIntegrationRuntimeRequest = null;
        api.integrationRuntimesRemoveLinks(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, linkedIntegrationRuntimeRequest);
        // TODO: test validations
    }

    /**
     * Starts a ManagedReserved type integration runtime.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void integrationRuntimesStartTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String factoryName = null;
        String integrationRuntimeName = null;
        String apiVersion = null;
        IntegrationRuntimeStatusResponse response = api.integrationRuntimesStart(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion);
        // TODO: test validations
    }

    /**
     * Stops a ManagedReserved type integration runtime.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void integrationRuntimesStopTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String factoryName = null;
        String integrationRuntimeName = null;
        String apiVersion = null;
        api.integrationRuntimesStop(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion);
        // TODO: test validations
    }

    /**
     * Force the integration runtime to synchronize credentials across integration runtime nodes, and this will override the credentials across all worker nodes with those available on the dispatcher node. If you already have the latest credential backup file, you should manually import it (preferred) on any self-hosted integration runtime node than using this API directly.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void integrationRuntimesSyncCredentialsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String factoryName = null;
        String integrationRuntimeName = null;
        String apiVersion = null;
        api.integrationRuntimesSyncCredentials(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion);
        // TODO: test validations
    }

    /**
     * Updates an integration runtime.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void integrationRuntimesUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String factoryName = null;
        String integrationRuntimeName = null;
        String apiVersion = null;
        UpdateIntegrationRuntimeRequest updateIntegrationRuntimeRequest = null;
        IntegrationRuntimeResource response = api.integrationRuntimesUpdate(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, updateIntegrationRuntimeRequest);
        // TODO: test validations
    }

    /**
     * Upgrade self-hosted integration runtime to latest version if availability.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void integrationRuntimesUpgradeTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String factoryName = null;
        String integrationRuntimeName = null;
        String apiVersion = null;
        api.integrationRuntimesUpgrade(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion);
        // TODO: test validations
    }

}
