/*
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RunQueryFilter;
import org.openapitools.client.model.RunQueryOrderBy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Query parameters for listing runs.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:51:48.649367-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RunFilterParameters {
  public static final String SERIALIZED_NAME_CONTINUATION_TOKEN = "continuationToken";
  @SerializedName(SERIALIZED_NAME_CONTINUATION_TOKEN)
  private String continuationToken;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<RunQueryFilter> filters = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_UPDATED_AFTER = "lastUpdatedAfter";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_AFTER)
  private OffsetDateTime lastUpdatedAfter;

  public static final String SERIALIZED_NAME_LAST_UPDATED_BEFORE = "lastUpdatedBefore";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_BEFORE)
  private OffsetDateTime lastUpdatedBefore;

  public static final String SERIALIZED_NAME_ORDER_BY = "orderBy";
  @SerializedName(SERIALIZED_NAME_ORDER_BY)
  private List<RunQueryOrderBy> orderBy = new ArrayList<>();

  public RunFilterParameters() {
  }

  public RunFilterParameters continuationToken(String continuationToken) {
    this.continuationToken = continuationToken;
    return this;
  }

  /**
   * The continuation token for getting the next page of results. Null for first page.
   * @return continuationToken
   */
  @javax.annotation.Nullable
  public String getContinuationToken() {
    return continuationToken;
  }

  public void setContinuationToken(String continuationToken) {
    this.continuationToken = continuationToken;
  }


  public RunFilterParameters filters(List<RunQueryFilter> filters) {
    this.filters = filters;
    return this;
  }

  public RunFilterParameters addFiltersItem(RunQueryFilter filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

  /**
   * List of filters.
   * @return filters
   */
  @javax.annotation.Nullable
  public List<RunQueryFilter> getFilters() {
    return filters;
  }

  public void setFilters(List<RunQueryFilter> filters) {
    this.filters = filters;
  }


  public RunFilterParameters lastUpdatedAfter(OffsetDateTime lastUpdatedAfter) {
    this.lastUpdatedAfter = lastUpdatedAfter;
    return this;
  }

  /**
   * The time at or after which the run event was updated in &#39;ISO 8601&#39; format.
   * @return lastUpdatedAfter
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastUpdatedAfter() {
    return lastUpdatedAfter;
  }

  public void setLastUpdatedAfter(OffsetDateTime lastUpdatedAfter) {
    this.lastUpdatedAfter = lastUpdatedAfter;
  }


  public RunFilterParameters lastUpdatedBefore(OffsetDateTime lastUpdatedBefore) {
    this.lastUpdatedBefore = lastUpdatedBefore;
    return this;
  }

  /**
   * The time at or before which the run event was updated in &#39;ISO 8601&#39; format.
   * @return lastUpdatedBefore
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastUpdatedBefore() {
    return lastUpdatedBefore;
  }

  public void setLastUpdatedBefore(OffsetDateTime lastUpdatedBefore) {
    this.lastUpdatedBefore = lastUpdatedBefore;
  }


  public RunFilterParameters orderBy(List<RunQueryOrderBy> orderBy) {
    this.orderBy = orderBy;
    return this;
  }

  public RunFilterParameters addOrderByItem(RunQueryOrderBy orderByItem) {
    if (this.orderBy == null) {
      this.orderBy = new ArrayList<>();
    }
    this.orderBy.add(orderByItem);
    return this;
  }

  /**
   * List of OrderBy option.
   * @return orderBy
   */
  @javax.annotation.Nullable
  public List<RunQueryOrderBy> getOrderBy() {
    return orderBy;
  }

  public void setOrderBy(List<RunQueryOrderBy> orderBy) {
    this.orderBy = orderBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunFilterParameters runFilterParameters = (RunFilterParameters) o;
    return Objects.equals(this.continuationToken, runFilterParameters.continuationToken) &&
        Objects.equals(this.filters, runFilterParameters.filters) &&
        Objects.equals(this.lastUpdatedAfter, runFilterParameters.lastUpdatedAfter) &&
        Objects.equals(this.lastUpdatedBefore, runFilterParameters.lastUpdatedBefore) &&
        Objects.equals(this.orderBy, runFilterParameters.orderBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(continuationToken, filters, lastUpdatedAfter, lastUpdatedBefore, orderBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunFilterParameters {\n");
    sb.append("    continuationToken: ").append(toIndentedString(continuationToken)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    lastUpdatedAfter: ").append(toIndentedString(lastUpdatedAfter)).append("\n");
    sb.append("    lastUpdatedBefore: ").append(toIndentedString(lastUpdatedBefore)).append("\n");
    sb.append("    orderBy: ").append(toIndentedString(orderBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("continuationToken");
    openapiFields.add("filters");
    openapiFields.add("lastUpdatedAfter");
    openapiFields.add("lastUpdatedBefore");
    openapiFields.add("orderBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("lastUpdatedAfter");
    openapiRequiredFields.add("lastUpdatedBefore");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RunFilterParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RunFilterParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunFilterParameters is not found in the empty JSON string", RunFilterParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RunFilterParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RunFilterParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RunFilterParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("continuationToken") != null && !jsonObj.get("continuationToken").isJsonNull()) && !jsonObj.get("continuationToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `continuationToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("continuationToken").toString()));
      }
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
        if (jsonArrayfilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
          }

          // validate the optional field `filters` (array)
          for (int i = 0; i < jsonArrayfilters.size(); i++) {
            RunQueryFilter.validateJsonElement(jsonArrayfilters.get(i));
          };
        }
      }
      if (jsonObj.get("orderBy") != null && !jsonObj.get("orderBy").isJsonNull()) {
        JsonArray jsonArrayorderBy = jsonObj.getAsJsonArray("orderBy");
        if (jsonArrayorderBy != null) {
          // ensure the json data is an array
          if (!jsonObj.get("orderBy").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `orderBy` to be an array in the JSON string but got `%s`", jsonObj.get("orderBy").toString()));
          }

          // validate the optional field `orderBy` (array)
          for (int i = 0; i < jsonArrayorderBy.size(); i++) {
            RunQueryOrderBy.validateJsonElement(jsonArrayorderBy.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunFilterParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunFilterParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunFilterParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunFilterParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<RunFilterParameters>() {
           @Override
           public void write(JsonWriter out, RunFilterParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RunFilterParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RunFilterParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RunFilterParameters
   * @throws IOException if the JSON string is invalid with respect to RunFilterParameters
   */
  public static RunFilterParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunFilterParameters.class);
  }

  /**
   * Convert an instance of RunFilterParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

