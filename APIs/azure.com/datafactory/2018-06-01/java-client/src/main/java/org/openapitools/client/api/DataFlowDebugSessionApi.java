/*
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddDataFlowToDebugSessionResponse;
import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.CreateDataFlowDebugSessionRequest;
import org.openapitools.client.model.CreateDataFlowDebugSessionResponse;
import org.openapitools.client.model.DataFlowDebugCommandRequest;
import org.openapitools.client.model.DataFlowDebugCommandResponse;
import org.openapitools.client.model.DataFlowDebugPackage;
import org.openapitools.client.model.DeleteDataFlowDebugSessionRequest;
import org.openapitools.client.model.QueryDataFlowDebugSessionsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataFlowDebugSessionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataFlowDebugSessionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataFlowDebugSessionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dataFlowDebugSessionAddDataFlow
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @param request Data flow debug session definition with debug content. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataFlowDebugSessionAddDataFlowCall(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, DataFlowDebugPackage request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/addDataFlowToDebugSession"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataFlowDebugSessionAddDataFlowValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, DataFlowDebugPackage request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataFlowDebugSessionAddDataFlow(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataFlowDebugSessionAddDataFlow(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling dataFlowDebugSessionAddDataFlow(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataFlowDebugSessionAddDataFlow(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling dataFlowDebugSessionAddDataFlow(Async)");
        }

        return dataFlowDebugSessionAddDataFlowCall(subscriptionId, resourceGroupName, factoryName, apiVersion, request, _callback);

    }

    /**
     * 
     * Add a data flow into debug session.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @param request Data flow debug session definition with debug content. (required)
     * @return AddDataFlowToDebugSessionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public AddDataFlowToDebugSessionResponse dataFlowDebugSessionAddDataFlow(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, DataFlowDebugPackage request) throws ApiException {
        ApiResponse<AddDataFlowToDebugSessionResponse> localVarResp = dataFlowDebugSessionAddDataFlowWithHttpInfo(subscriptionId, resourceGroupName, factoryName, apiVersion, request);
        return localVarResp.getData();
    }

    /**
     * 
     * Add a data flow into debug session.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @param request Data flow debug session definition with debug content. (required)
     * @return ApiResponse&lt;AddDataFlowToDebugSessionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddDataFlowToDebugSessionResponse> dataFlowDebugSessionAddDataFlowWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, DataFlowDebugPackage request) throws ApiException {
        okhttp3.Call localVarCall = dataFlowDebugSessionAddDataFlowValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, apiVersion, request, null);
        Type localVarReturnType = new TypeToken<AddDataFlowToDebugSessionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add a data flow into debug session.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @param request Data flow debug session definition with debug content. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataFlowDebugSessionAddDataFlowAsync(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, DataFlowDebugPackage request, final ApiCallback<AddDataFlowToDebugSessionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataFlowDebugSessionAddDataFlowValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, apiVersion, request, _callback);
        Type localVarReturnType = new TypeToken<AddDataFlowToDebugSessionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataFlowDebugSessionCreate
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @param request Data flow debug session definition (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  * location - URI to poll for asynchronous operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataFlowDebugSessionCreateCall(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, CreateDataFlowDebugSessionRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/createDataFlowDebugSession"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataFlowDebugSessionCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, CreateDataFlowDebugSessionRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataFlowDebugSessionCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataFlowDebugSessionCreate(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling dataFlowDebugSessionCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataFlowDebugSessionCreate(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling dataFlowDebugSessionCreate(Async)");
        }

        return dataFlowDebugSessionCreateCall(subscriptionId, resourceGroupName, factoryName, apiVersion, request, _callback);

    }

    /**
     * 
     * Creates a data flow debug session.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @param request Data flow debug session definition (required)
     * @return CreateDataFlowDebugSessionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  * location - URI to poll for asynchronous operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public CreateDataFlowDebugSessionResponse dataFlowDebugSessionCreate(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, CreateDataFlowDebugSessionRequest request) throws ApiException {
        ApiResponse<CreateDataFlowDebugSessionResponse> localVarResp = dataFlowDebugSessionCreateWithHttpInfo(subscriptionId, resourceGroupName, factoryName, apiVersion, request);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a data flow debug session.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @param request Data flow debug session definition (required)
     * @return ApiResponse&lt;CreateDataFlowDebugSessionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  * location - URI to poll for asynchronous operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDataFlowDebugSessionResponse> dataFlowDebugSessionCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, CreateDataFlowDebugSessionRequest request) throws ApiException {
        okhttp3.Call localVarCall = dataFlowDebugSessionCreateValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, apiVersion, request, null);
        Type localVarReturnType = new TypeToken<CreateDataFlowDebugSessionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a data flow debug session.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @param request Data flow debug session definition (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  * location - URI to poll for asynchronous operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataFlowDebugSessionCreateAsync(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, CreateDataFlowDebugSessionRequest request, final ApiCallback<CreateDataFlowDebugSessionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataFlowDebugSessionCreateValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, apiVersion, request, _callback);
        Type localVarReturnType = new TypeToken<CreateDataFlowDebugSessionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataFlowDebugSessionDelete
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @param request Data flow debug session definition for deletion (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataFlowDebugSessionDeleteCall(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, DeleteDataFlowDebugSessionRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/deleteDataFlowDebugSession"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataFlowDebugSessionDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, DeleteDataFlowDebugSessionRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataFlowDebugSessionDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataFlowDebugSessionDelete(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling dataFlowDebugSessionDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataFlowDebugSessionDelete(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling dataFlowDebugSessionDelete(Async)");
        }

        return dataFlowDebugSessionDeleteCall(subscriptionId, resourceGroupName, factoryName, apiVersion, request, _callback);

    }

    /**
     * 
     * Deletes a data flow debug session.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @param request Data flow debug session definition for deletion (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public void dataFlowDebugSessionDelete(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, DeleteDataFlowDebugSessionRequest request) throws ApiException {
        dataFlowDebugSessionDeleteWithHttpInfo(subscriptionId, resourceGroupName, factoryName, apiVersion, request);
    }

    /**
     * 
     * Deletes a data flow debug session.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @param request Data flow debug session definition for deletion (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dataFlowDebugSessionDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, DeleteDataFlowDebugSessionRequest request) throws ApiException {
        okhttp3.Call localVarCall = dataFlowDebugSessionDeleteValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, apiVersion, request, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a data flow debug session.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @param request Data flow debug session definition for deletion (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataFlowDebugSessionDeleteAsync(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, DeleteDataFlowDebugSessionRequest request, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataFlowDebugSessionDeleteValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, apiVersion, request, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataFlowDebugSessionExecuteCommand
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @param request Data flow debug command definition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  * location - URI to poll for asynchronous operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataFlowDebugSessionExecuteCommandCall(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, DataFlowDebugCommandRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/executeDataFlowDebugCommand"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataFlowDebugSessionExecuteCommandValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, DataFlowDebugCommandRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataFlowDebugSessionExecuteCommand(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataFlowDebugSessionExecuteCommand(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling dataFlowDebugSessionExecuteCommand(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataFlowDebugSessionExecuteCommand(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling dataFlowDebugSessionExecuteCommand(Async)");
        }

        return dataFlowDebugSessionExecuteCommandCall(subscriptionId, resourceGroupName, factoryName, apiVersion, request, _callback);

    }

    /**
     * 
     * Execute a data flow debug command.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @param request Data flow debug command definition. (required)
     * @return DataFlowDebugCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  * location - URI to poll for asynchronous operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public DataFlowDebugCommandResponse dataFlowDebugSessionExecuteCommand(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, DataFlowDebugCommandRequest request) throws ApiException {
        ApiResponse<DataFlowDebugCommandResponse> localVarResp = dataFlowDebugSessionExecuteCommandWithHttpInfo(subscriptionId, resourceGroupName, factoryName, apiVersion, request);
        return localVarResp.getData();
    }

    /**
     * 
     * Execute a data flow debug command.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @param request Data flow debug command definition. (required)
     * @return ApiResponse&lt;DataFlowDebugCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  * location - URI to poll for asynchronous operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataFlowDebugCommandResponse> dataFlowDebugSessionExecuteCommandWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, DataFlowDebugCommandRequest request) throws ApiException {
        okhttp3.Call localVarCall = dataFlowDebugSessionExecuteCommandValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, apiVersion, request, null);
        Type localVarReturnType = new TypeToken<DataFlowDebugCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Execute a data flow debug command.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @param request Data flow debug command definition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  * location - URI to poll for asynchronous operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataFlowDebugSessionExecuteCommandAsync(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, DataFlowDebugCommandRequest request, final ApiCallback<DataFlowDebugCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataFlowDebugSessionExecuteCommandValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, apiVersion, request, _callback);
        Type localVarReturnType = new TypeToken<DataFlowDebugCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataFlowDebugSessionQueryByFactory
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataFlowDebugSessionQueryByFactoryCall(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryDataFlowDebugSessions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataFlowDebugSessionQueryByFactoryValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataFlowDebugSessionQueryByFactory(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataFlowDebugSessionQueryByFactory(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling dataFlowDebugSessionQueryByFactory(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataFlowDebugSessionQueryByFactory(Async)");
        }

        return dataFlowDebugSessionQueryByFactoryCall(subscriptionId, resourceGroupName, factoryName, apiVersion, _callback);

    }

    /**
     * 
     * Query all active data flow debug sessions.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @return QueryDataFlowDebugSessionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public QueryDataFlowDebugSessionsResponse dataFlowDebugSessionQueryByFactory(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion) throws ApiException {
        ApiResponse<QueryDataFlowDebugSessionsResponse> localVarResp = dataFlowDebugSessionQueryByFactoryWithHttpInfo(subscriptionId, resourceGroupName, factoryName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Query all active data flow debug sessions.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;QueryDataFlowDebugSessionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryDataFlowDebugSessionsResponse> dataFlowDebugSessionQueryByFactoryWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = dataFlowDebugSessionQueryByFactoryValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, apiVersion, null);
        Type localVarReturnType = new TypeToken<QueryDataFlowDebugSessionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Query all active data flow debug sessions.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataFlowDebugSessionQueryByFactoryAsync(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, final ApiCallback<QueryDataFlowDebugSessionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataFlowDebugSessionQueryByFactoryValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<QueryDataFlowDebugSessionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
