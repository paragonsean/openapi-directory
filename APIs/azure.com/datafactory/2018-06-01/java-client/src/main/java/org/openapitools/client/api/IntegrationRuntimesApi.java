/*
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.CreateLinkedIntegrationRuntimeRequest;
import org.openapitools.client.model.IntegrationRuntimeListResponse;
import org.openapitools.client.model.IntegrationRuntimeResource;
import org.openapitools.client.model.IntegrationRuntimeStatusResponse;
import org.openapitools.client.model.IntegrationRuntimesGetConnectionInfo200Response;
import org.openapitools.client.model.IntegrationRuntimesGetMonitoringData200Response;
import org.openapitools.client.model.IntegrationRuntimesListAuthKeys200Response;
import org.openapitools.client.model.IntegrationRuntimesRegenerateAuthKeyRequest;
import org.openapitools.client.model.LinkedIntegrationRuntimeRequest;
import org.openapitools.client.model.UpdateIntegrationRuntimeRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IntegrationRuntimesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IntegrationRuntimesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IntegrationRuntimesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for integrationRuntimesCreateLinkedIntegrationRuntime
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param createLinkedIntegrationRuntimeRequest The linked integration runtime properties. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesCreateLinkedIntegrationRuntimeCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, CreateLinkedIntegrationRuntimeRequest createLinkedIntegrationRuntimeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createLinkedIntegrationRuntimeRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/linkedIntegrationRuntime"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "integrationRuntimeName" + "}", localVarApiClient.escapeString(integrationRuntimeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call integrationRuntimesCreateLinkedIntegrationRuntimeValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, CreateLinkedIntegrationRuntimeRequest createLinkedIntegrationRuntimeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling integrationRuntimesCreateLinkedIntegrationRuntime(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesCreateLinkedIntegrationRuntime(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling integrationRuntimesCreateLinkedIntegrationRuntime(Async)");
        }

        // verify the required parameter 'integrationRuntimeName' is set
        if (integrationRuntimeName == null) {
            throw new ApiException("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimesCreateLinkedIntegrationRuntime(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling integrationRuntimesCreateLinkedIntegrationRuntime(Async)");
        }

        // verify the required parameter 'createLinkedIntegrationRuntimeRequest' is set
        if (createLinkedIntegrationRuntimeRequest == null) {
            throw new ApiException("Missing the required parameter 'createLinkedIntegrationRuntimeRequest' when calling integrationRuntimesCreateLinkedIntegrationRuntime(Async)");
        }

        return integrationRuntimesCreateLinkedIntegrationRuntimeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, createLinkedIntegrationRuntimeRequest, _callback);

    }

    /**
     * 
     * Create a linked integration runtime entry in a shared integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param createLinkedIntegrationRuntimeRequest The linked integration runtime properties. (required)
     * @return IntegrationRuntimeStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationRuntimeStatusResponse integrationRuntimesCreateLinkedIntegrationRuntime(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, CreateLinkedIntegrationRuntimeRequest createLinkedIntegrationRuntimeRequest) throws ApiException {
        ApiResponse<IntegrationRuntimeStatusResponse> localVarResp = integrationRuntimesCreateLinkedIntegrationRuntimeWithHttpInfo(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, createLinkedIntegrationRuntimeRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a linked integration runtime entry in a shared integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param createLinkedIntegrationRuntimeRequest The linked integration runtime properties. (required)
     * @return ApiResponse&lt;IntegrationRuntimeStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationRuntimeStatusResponse> integrationRuntimesCreateLinkedIntegrationRuntimeWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, CreateLinkedIntegrationRuntimeRequest createLinkedIntegrationRuntimeRequest) throws ApiException {
        okhttp3.Call localVarCall = integrationRuntimesCreateLinkedIntegrationRuntimeValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, createLinkedIntegrationRuntimeRequest, null);
        Type localVarReturnType = new TypeToken<IntegrationRuntimeStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a linked integration runtime entry in a shared integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param createLinkedIntegrationRuntimeRequest The linked integration runtime properties. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesCreateLinkedIntegrationRuntimeAsync(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, CreateLinkedIntegrationRuntimeRequest createLinkedIntegrationRuntimeRequest, final ApiCallback<IntegrationRuntimeStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = integrationRuntimesCreateLinkedIntegrationRuntimeValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, createLinkedIntegrationRuntimeRequest, _callback);
        Type localVarReturnType = new TypeToken<IntegrationRuntimeStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for integrationRuntimesCreateOrUpdate
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param integrationRuntime Integration runtime resource definition. (required)
     * @param ifMatch ETag of the integration runtime entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from PUT integration runtime operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, IntegrationRuntimeResource integrationRuntime, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = integrationRuntime;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "integrationRuntimeName" + "}", localVarApiClient.escapeString(integrationRuntimeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call integrationRuntimesCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, IntegrationRuntimeResource integrationRuntime, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling integrationRuntimesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling integrationRuntimesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'integrationRuntimeName' is set
        if (integrationRuntimeName == null) {
            throw new ApiException("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling integrationRuntimesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'integrationRuntime' is set
        if (integrationRuntime == null) {
            throw new ApiException("Missing the required parameter 'integrationRuntime' when calling integrationRuntimesCreateOrUpdate(Async)");
        }

        return integrationRuntimesCreateOrUpdateCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, integrationRuntime, ifMatch, _callback);

    }

    /**
     * 
     * Creates or updates an integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param integrationRuntime Integration runtime resource definition. (required)
     * @param ifMatch ETag of the integration runtime entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update. (optional)
     * @return IntegrationRuntimeResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from PUT integration runtime operation. </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationRuntimeResource integrationRuntimesCreateOrUpdate(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, IntegrationRuntimeResource integrationRuntime, String ifMatch) throws ApiException {
        ApiResponse<IntegrationRuntimeResource> localVarResp = integrationRuntimesCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, integrationRuntime, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates an integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param integrationRuntime Integration runtime resource definition. (required)
     * @param ifMatch ETag of the integration runtime entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update. (optional)
     * @return ApiResponse&lt;IntegrationRuntimeResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from PUT integration runtime operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationRuntimeResource> integrationRuntimesCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, IntegrationRuntimeResource integrationRuntime, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = integrationRuntimesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, integrationRuntime, ifMatch, null);
        Type localVarReturnType = new TypeToken<IntegrationRuntimeResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates an integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param integrationRuntime Integration runtime resource definition. (required)
     * @param ifMatch ETag of the integration runtime entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from PUT integration runtime operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, IntegrationRuntimeResource integrationRuntime, String ifMatch, final ApiCallback<IntegrationRuntimeResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = integrationRuntimesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, integrationRuntime, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<IntegrationRuntimeResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for integrationRuntimesDelete
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from DELETE integration runtime operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesDeleteCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "integrationRuntimeName" + "}", localVarApiClient.escapeString(integrationRuntimeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call integrationRuntimesDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling integrationRuntimesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesDelete(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling integrationRuntimesDelete(Async)");
        }

        // verify the required parameter 'integrationRuntimeName' is set
        if (integrationRuntimeName == null) {
            throw new ApiException("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling integrationRuntimesDelete(Async)");
        }

        return integrationRuntimesDeleteCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from DELETE integration runtime operation. </td><td>  -  </td></tr>
     </table>
     */
    public void integrationRuntimesDelete(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion) throws ApiException {
        integrationRuntimesDeleteWithHttpInfo(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion);
    }

    /**
     * 
     * Deletes an integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from DELETE integration runtime operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> integrationRuntimesDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = integrationRuntimesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from DELETE integration runtime operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesDeleteAsync(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = integrationRuntimesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for integrationRuntimesGet
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param ifNoneMatch ETag of the integration runtime entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from GET integration runtime operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesGetCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "integrationRuntimeName" + "}", localVarApiClient.escapeString(integrationRuntimeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call integrationRuntimesGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling integrationRuntimesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesGet(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling integrationRuntimesGet(Async)");
        }

        // verify the required parameter 'integrationRuntimeName' is set
        if (integrationRuntimeName == null) {
            throw new ApiException("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling integrationRuntimesGet(Async)");
        }

        return integrationRuntimesGetCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, ifNoneMatch, _callback);

    }

    /**
     * 
     * Gets an integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param ifNoneMatch ETag of the integration runtime entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. (optional)
     * @return IntegrationRuntimeResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from GET integration runtime operation. </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationRuntimeResource integrationRuntimesGet(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, String ifNoneMatch) throws ApiException {
        ApiResponse<IntegrationRuntimeResource> localVarResp = integrationRuntimesGetWithHttpInfo(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, ifNoneMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets an integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param ifNoneMatch ETag of the integration runtime entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. (optional)
     * @return ApiResponse&lt;IntegrationRuntimeResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from GET integration runtime operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationRuntimeResource> integrationRuntimesGetWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = integrationRuntimesGetValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, ifNoneMatch, null);
        Type localVarReturnType = new TypeToken<IntegrationRuntimeResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets an integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param ifNoneMatch ETag of the integration runtime entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from GET integration runtime operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesGetAsync(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, String ifNoneMatch, final ApiCallback<IntegrationRuntimeResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = integrationRuntimesGetValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, ifNoneMatch, _callback);
        Type localVarReturnType = new TypeToken<IntegrationRuntimeResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for integrationRuntimesGetConnectionInfo
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesGetConnectionInfoCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/getConnectionInfo"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "integrationRuntimeName" + "}", localVarApiClient.escapeString(integrationRuntimeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call integrationRuntimesGetConnectionInfoValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling integrationRuntimesGetConnectionInfo(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesGetConnectionInfo(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling integrationRuntimesGetConnectionInfo(Async)");
        }

        // verify the required parameter 'integrationRuntimeName' is set
        if (integrationRuntimeName == null) {
            throw new ApiException("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimesGetConnectionInfo(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling integrationRuntimesGetConnectionInfo(Async)");
        }

        return integrationRuntimesGetConnectionInfoCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the on-premises integration runtime connection information for encrypting the on-premises data source credentials.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @return IntegrationRuntimesGetConnectionInfo200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationRuntimesGetConnectionInfo200Response integrationRuntimesGetConnectionInfo(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion) throws ApiException {
        ApiResponse<IntegrationRuntimesGetConnectionInfo200Response> localVarResp = integrationRuntimesGetConnectionInfoWithHttpInfo(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the on-premises integration runtime connection information for encrypting the on-premises data source credentials.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;IntegrationRuntimesGetConnectionInfo200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationRuntimesGetConnectionInfo200Response> integrationRuntimesGetConnectionInfoWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = integrationRuntimesGetConnectionInfoValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, null);
        Type localVarReturnType = new TypeToken<IntegrationRuntimesGetConnectionInfo200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the on-premises integration runtime connection information for encrypting the on-premises data source credentials.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesGetConnectionInfoAsync(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, final ApiCallback<IntegrationRuntimesGetConnectionInfo200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = integrationRuntimesGetConnectionInfoValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<IntegrationRuntimesGetConnectionInfo200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for integrationRuntimesGetMonitoringData
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesGetMonitoringDataCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/monitoringData"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "integrationRuntimeName" + "}", localVarApiClient.escapeString(integrationRuntimeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call integrationRuntimesGetMonitoringDataValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling integrationRuntimesGetMonitoringData(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesGetMonitoringData(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling integrationRuntimesGetMonitoringData(Async)");
        }

        // verify the required parameter 'integrationRuntimeName' is set
        if (integrationRuntimeName == null) {
            throw new ApiException("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimesGetMonitoringData(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling integrationRuntimesGetMonitoringData(Async)");
        }

        return integrationRuntimesGetMonitoringDataCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, _callback);

    }

    /**
     * 
     * Get the integration runtime monitoring data, which includes the monitor data for all the nodes under this integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @return IntegrationRuntimesGetMonitoringData200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationRuntimesGetMonitoringData200Response integrationRuntimesGetMonitoringData(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion) throws ApiException {
        ApiResponse<IntegrationRuntimesGetMonitoringData200Response> localVarResp = integrationRuntimesGetMonitoringDataWithHttpInfo(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the integration runtime monitoring data, which includes the monitor data for all the nodes under this integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;IntegrationRuntimesGetMonitoringData200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationRuntimesGetMonitoringData200Response> integrationRuntimesGetMonitoringDataWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = integrationRuntimesGetMonitoringDataValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, null);
        Type localVarReturnType = new TypeToken<IntegrationRuntimesGetMonitoringData200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the integration runtime monitoring data, which includes the monitor data for all the nodes under this integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesGetMonitoringDataAsync(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, final ApiCallback<IntegrationRuntimesGetMonitoringData200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = integrationRuntimesGetMonitoringDataValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<IntegrationRuntimesGetMonitoringData200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for integrationRuntimesGetStatus
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesGetStatusCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/getStatus"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "integrationRuntimeName" + "}", localVarApiClient.escapeString(integrationRuntimeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call integrationRuntimesGetStatusValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling integrationRuntimesGetStatus(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesGetStatus(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling integrationRuntimesGetStatus(Async)");
        }

        // verify the required parameter 'integrationRuntimeName' is set
        if (integrationRuntimeName == null) {
            throw new ApiException("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimesGetStatus(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling integrationRuntimesGetStatus(Async)");
        }

        return integrationRuntimesGetStatusCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, _callback);

    }

    /**
     * 
     * Gets detailed status information for an integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @return IntegrationRuntimeStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationRuntimeStatusResponse integrationRuntimesGetStatus(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion) throws ApiException {
        ApiResponse<IntegrationRuntimeStatusResponse> localVarResp = integrationRuntimesGetStatusWithHttpInfo(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets detailed status information for an integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;IntegrationRuntimeStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationRuntimeStatusResponse> integrationRuntimesGetStatusWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = integrationRuntimesGetStatusValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, null);
        Type localVarReturnType = new TypeToken<IntegrationRuntimeStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets detailed status information for an integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesGetStatusAsync(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, final ApiCallback<IntegrationRuntimeStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = integrationRuntimesGetStatusValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<IntegrationRuntimeStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for integrationRuntimesListAuthKeys
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesListAuthKeysCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/listAuthKeys"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "integrationRuntimeName" + "}", localVarApiClient.escapeString(integrationRuntimeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call integrationRuntimesListAuthKeysValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling integrationRuntimesListAuthKeys(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesListAuthKeys(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling integrationRuntimesListAuthKeys(Async)");
        }

        // verify the required parameter 'integrationRuntimeName' is set
        if (integrationRuntimeName == null) {
            throw new ApiException("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimesListAuthKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling integrationRuntimesListAuthKeys(Async)");
        }

        return integrationRuntimesListAuthKeysCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves the authentication keys for an integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @return IntegrationRuntimesListAuthKeys200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationRuntimesListAuthKeys200Response integrationRuntimesListAuthKeys(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion) throws ApiException {
        ApiResponse<IntegrationRuntimesListAuthKeys200Response> localVarResp = integrationRuntimesListAuthKeysWithHttpInfo(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the authentication keys for an integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;IntegrationRuntimesListAuthKeys200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationRuntimesListAuthKeys200Response> integrationRuntimesListAuthKeysWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = integrationRuntimesListAuthKeysValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, null);
        Type localVarReturnType = new TypeToken<IntegrationRuntimesListAuthKeys200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the authentication keys for an integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesListAuthKeysAsync(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, final ApiCallback<IntegrationRuntimesListAuthKeys200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = integrationRuntimesListAuthKeysValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<IntegrationRuntimesListAuthKeys200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for integrationRuntimesListByFactory
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesListByFactoryCall(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call integrationRuntimesListByFactoryValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling integrationRuntimesListByFactory(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesListByFactory(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling integrationRuntimesListByFactory(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling integrationRuntimesListByFactory(Async)");
        }

        return integrationRuntimesListByFactoryCall(subscriptionId, resourceGroupName, factoryName, apiVersion, _callback);

    }

    /**
     * 
     * Lists integration runtimes.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @return IntegrationRuntimeListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationRuntimeListResponse integrationRuntimesListByFactory(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion) throws ApiException {
        ApiResponse<IntegrationRuntimeListResponse> localVarResp = integrationRuntimesListByFactoryWithHttpInfo(subscriptionId, resourceGroupName, factoryName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists integration runtimes.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;IntegrationRuntimeListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationRuntimeListResponse> integrationRuntimesListByFactoryWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = integrationRuntimesListByFactoryValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, apiVersion, null);
        Type localVarReturnType = new TypeToken<IntegrationRuntimeListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists integration runtimes.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesListByFactoryAsync(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, final ApiCallback<IntegrationRuntimeListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = integrationRuntimesListByFactoryValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<IntegrationRuntimeListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for integrationRuntimesRegenerateAuthKey
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param regenerateKeyParameters The parameters for regenerating integration runtime authentication key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesRegenerateAuthKeyCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, IntegrationRuntimesRegenerateAuthKeyRequest regenerateKeyParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = regenerateKeyParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/regenerateAuthKey"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "integrationRuntimeName" + "}", localVarApiClient.escapeString(integrationRuntimeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call integrationRuntimesRegenerateAuthKeyValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, IntegrationRuntimesRegenerateAuthKeyRequest regenerateKeyParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling integrationRuntimesRegenerateAuthKey(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesRegenerateAuthKey(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling integrationRuntimesRegenerateAuthKey(Async)");
        }

        // verify the required parameter 'integrationRuntimeName' is set
        if (integrationRuntimeName == null) {
            throw new ApiException("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimesRegenerateAuthKey(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling integrationRuntimesRegenerateAuthKey(Async)");
        }

        // verify the required parameter 'regenerateKeyParameters' is set
        if (regenerateKeyParameters == null) {
            throw new ApiException("Missing the required parameter 'regenerateKeyParameters' when calling integrationRuntimesRegenerateAuthKey(Async)");
        }

        return integrationRuntimesRegenerateAuthKeyCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, regenerateKeyParameters, _callback);

    }

    /**
     * 
     * Regenerates the authentication key for an integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param regenerateKeyParameters The parameters for regenerating integration runtime authentication key. (required)
     * @return IntegrationRuntimesListAuthKeys200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationRuntimesListAuthKeys200Response integrationRuntimesRegenerateAuthKey(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, IntegrationRuntimesRegenerateAuthKeyRequest regenerateKeyParameters) throws ApiException {
        ApiResponse<IntegrationRuntimesListAuthKeys200Response> localVarResp = integrationRuntimesRegenerateAuthKeyWithHttpInfo(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, regenerateKeyParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Regenerates the authentication key for an integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param regenerateKeyParameters The parameters for regenerating integration runtime authentication key. (required)
     * @return ApiResponse&lt;IntegrationRuntimesListAuthKeys200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationRuntimesListAuthKeys200Response> integrationRuntimesRegenerateAuthKeyWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, IntegrationRuntimesRegenerateAuthKeyRequest regenerateKeyParameters) throws ApiException {
        okhttp3.Call localVarCall = integrationRuntimesRegenerateAuthKeyValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, regenerateKeyParameters, null);
        Type localVarReturnType = new TypeToken<IntegrationRuntimesListAuthKeys200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Regenerates the authentication key for an integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param regenerateKeyParameters The parameters for regenerating integration runtime authentication key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesRegenerateAuthKeyAsync(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, IntegrationRuntimesRegenerateAuthKeyRequest regenerateKeyParameters, final ApiCallback<IntegrationRuntimesListAuthKeys200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = integrationRuntimesRegenerateAuthKeyValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, regenerateKeyParameters, _callback);
        Type localVarReturnType = new TypeToken<IntegrationRuntimesListAuthKeys200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for integrationRuntimesRemoveLinks
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param linkedIntegrationRuntimeRequest The data factory name for the linked integration runtime. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesRemoveLinksCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, LinkedIntegrationRuntimeRequest linkedIntegrationRuntimeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = linkedIntegrationRuntimeRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/removeLinks"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "integrationRuntimeName" + "}", localVarApiClient.escapeString(integrationRuntimeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call integrationRuntimesRemoveLinksValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, LinkedIntegrationRuntimeRequest linkedIntegrationRuntimeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling integrationRuntimesRemoveLinks(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesRemoveLinks(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling integrationRuntimesRemoveLinks(Async)");
        }

        // verify the required parameter 'integrationRuntimeName' is set
        if (integrationRuntimeName == null) {
            throw new ApiException("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimesRemoveLinks(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling integrationRuntimesRemoveLinks(Async)");
        }

        // verify the required parameter 'linkedIntegrationRuntimeRequest' is set
        if (linkedIntegrationRuntimeRequest == null) {
            throw new ApiException("Missing the required parameter 'linkedIntegrationRuntimeRequest' when calling integrationRuntimesRemoveLinks(Async)");
        }

        return integrationRuntimesRemoveLinksCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, linkedIntegrationRuntimeRequest, _callback);

    }

    /**
     * 
     * Remove all linked integration runtimes under specific data factory in a self-hosted integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param linkedIntegrationRuntimeRequest The data factory name for the linked integration runtime. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public void integrationRuntimesRemoveLinks(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, LinkedIntegrationRuntimeRequest linkedIntegrationRuntimeRequest) throws ApiException {
        integrationRuntimesRemoveLinksWithHttpInfo(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, linkedIntegrationRuntimeRequest);
    }

    /**
     * 
     * Remove all linked integration runtimes under specific data factory in a self-hosted integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param linkedIntegrationRuntimeRequest The data factory name for the linked integration runtime. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> integrationRuntimesRemoveLinksWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, LinkedIntegrationRuntimeRequest linkedIntegrationRuntimeRequest) throws ApiException {
        okhttp3.Call localVarCall = integrationRuntimesRemoveLinksValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, linkedIntegrationRuntimeRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove all linked integration runtimes under specific data factory in a self-hosted integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param linkedIntegrationRuntimeRequest The data factory name for the linked integration runtime. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesRemoveLinksAsync(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, LinkedIntegrationRuntimeRequest linkedIntegrationRuntimeRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = integrationRuntimesRemoveLinksValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, linkedIntegrationRuntimeRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for integrationRuntimesStart
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesStartCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/start"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "integrationRuntimeName" + "}", localVarApiClient.escapeString(integrationRuntimeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call integrationRuntimesStartValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling integrationRuntimesStart(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesStart(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling integrationRuntimesStart(Async)");
        }

        // verify the required parameter 'integrationRuntimeName' is set
        if (integrationRuntimeName == null) {
            throw new ApiException("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimesStart(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling integrationRuntimesStart(Async)");
        }

        return integrationRuntimesStartCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, _callback);

    }

    /**
     * 
     * Starts a ManagedReserved type integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @return IntegrationRuntimeStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationRuntimeStatusResponse integrationRuntimesStart(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion) throws ApiException {
        ApiResponse<IntegrationRuntimeStatusResponse> localVarResp = integrationRuntimesStartWithHttpInfo(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Starts a ManagedReserved type integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;IntegrationRuntimeStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationRuntimeStatusResponse> integrationRuntimesStartWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = integrationRuntimesStartValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, null);
        Type localVarReturnType = new TypeToken<IntegrationRuntimeStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Starts a ManagedReserved type integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesStartAsync(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, final ApiCallback<IntegrationRuntimeStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = integrationRuntimesStartValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<IntegrationRuntimeStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for integrationRuntimesStop
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesStopCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/stop"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "integrationRuntimeName" + "}", localVarApiClient.escapeString(integrationRuntimeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call integrationRuntimesStopValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling integrationRuntimesStop(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesStop(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling integrationRuntimesStop(Async)");
        }

        // verify the required parameter 'integrationRuntimeName' is set
        if (integrationRuntimeName == null) {
            throw new ApiException("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimesStop(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling integrationRuntimesStop(Async)");
        }

        return integrationRuntimesStopCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, _callback);

    }

    /**
     * 
     * Stops a ManagedReserved type integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public void integrationRuntimesStop(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion) throws ApiException {
        integrationRuntimesStopWithHttpInfo(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion);
    }

    /**
     * 
     * Stops a ManagedReserved type integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> integrationRuntimesStopWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = integrationRuntimesStopValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Stops a ManagedReserved type integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesStopAsync(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = integrationRuntimesStopValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for integrationRuntimesSyncCredentials
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesSyncCredentialsCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/syncCredentials"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "integrationRuntimeName" + "}", localVarApiClient.escapeString(integrationRuntimeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call integrationRuntimesSyncCredentialsValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling integrationRuntimesSyncCredentials(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesSyncCredentials(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling integrationRuntimesSyncCredentials(Async)");
        }

        // verify the required parameter 'integrationRuntimeName' is set
        if (integrationRuntimeName == null) {
            throw new ApiException("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimesSyncCredentials(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling integrationRuntimesSyncCredentials(Async)");
        }

        return integrationRuntimesSyncCredentialsCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, _callback);

    }

    /**
     * 
     * Force the integration runtime to synchronize credentials across integration runtime nodes, and this will override the credentials across all worker nodes with those available on the dispatcher node. If you already have the latest credential backup file, you should manually import it (preferred) on any self-hosted integration runtime node than using this API directly.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public void integrationRuntimesSyncCredentials(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion) throws ApiException {
        integrationRuntimesSyncCredentialsWithHttpInfo(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion);
    }

    /**
     * 
     * Force the integration runtime to synchronize credentials across integration runtime nodes, and this will override the credentials across all worker nodes with those available on the dispatcher node. If you already have the latest credential backup file, you should manually import it (preferred) on any self-hosted integration runtime node than using this API directly.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> integrationRuntimesSyncCredentialsWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = integrationRuntimesSyncCredentialsValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Force the integration runtime to synchronize credentials across integration runtime nodes, and this will override the credentials across all worker nodes with those available on the dispatcher node. If you already have the latest credential backup file, you should manually import it (preferred) on any self-hosted integration runtime node than using this API directly.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesSyncCredentialsAsync(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = integrationRuntimesSyncCredentialsValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for integrationRuntimesUpdate
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param updateIntegrationRuntimeRequest The parameters for updating an integration runtime. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesUpdateCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, UpdateIntegrationRuntimeRequest updateIntegrationRuntimeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateIntegrationRuntimeRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "integrationRuntimeName" + "}", localVarApiClient.escapeString(integrationRuntimeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call integrationRuntimesUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, UpdateIntegrationRuntimeRequest updateIntegrationRuntimeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling integrationRuntimesUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesUpdate(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling integrationRuntimesUpdate(Async)");
        }

        // verify the required parameter 'integrationRuntimeName' is set
        if (integrationRuntimeName == null) {
            throw new ApiException("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimesUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling integrationRuntimesUpdate(Async)");
        }

        // verify the required parameter 'updateIntegrationRuntimeRequest' is set
        if (updateIntegrationRuntimeRequest == null) {
            throw new ApiException("Missing the required parameter 'updateIntegrationRuntimeRequest' when calling integrationRuntimesUpdate(Async)");
        }

        return integrationRuntimesUpdateCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, updateIntegrationRuntimeRequest, _callback);

    }

    /**
     * 
     * Updates an integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param updateIntegrationRuntimeRequest The parameters for updating an integration runtime. (required)
     * @return IntegrationRuntimeResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationRuntimeResource integrationRuntimesUpdate(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, UpdateIntegrationRuntimeRequest updateIntegrationRuntimeRequest) throws ApiException {
        ApiResponse<IntegrationRuntimeResource> localVarResp = integrationRuntimesUpdateWithHttpInfo(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, updateIntegrationRuntimeRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param updateIntegrationRuntimeRequest The parameters for updating an integration runtime. (required)
     * @return ApiResponse&lt;IntegrationRuntimeResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationRuntimeResource> integrationRuntimesUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, UpdateIntegrationRuntimeRequest updateIntegrationRuntimeRequest) throws ApiException {
        okhttp3.Call localVarCall = integrationRuntimesUpdateValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, updateIntegrationRuntimeRequest, null);
        Type localVarReturnType = new TypeToken<IntegrationRuntimeResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an integration runtime.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param updateIntegrationRuntimeRequest The parameters for updating an integration runtime. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesUpdateAsync(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, UpdateIntegrationRuntimeRequest updateIntegrationRuntimeRequest, final ApiCallback<IntegrationRuntimeResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = integrationRuntimesUpdateValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, updateIntegrationRuntimeRequest, _callback);
        Type localVarReturnType = new TypeToken<IntegrationRuntimeResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for integrationRuntimesUpgrade
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesUpgradeCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/upgrade"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "integrationRuntimeName" + "}", localVarApiClient.escapeString(integrationRuntimeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call integrationRuntimesUpgradeValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling integrationRuntimesUpgrade(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesUpgrade(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling integrationRuntimesUpgrade(Async)");
        }

        // verify the required parameter 'integrationRuntimeName' is set
        if (integrationRuntimeName == null) {
            throw new ApiException("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimesUpgrade(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling integrationRuntimesUpgrade(Async)");
        }

        return integrationRuntimesUpgradeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, _callback);

    }

    /**
     * 
     * Upgrade self-hosted integration runtime to latest version if availability.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public void integrationRuntimesUpgrade(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion) throws ApiException {
        integrationRuntimesUpgradeWithHttpInfo(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion);
    }

    /**
     * 
     * Upgrade self-hosted integration runtime to latest version if availability.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> integrationRuntimesUpgradeWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = integrationRuntimesUpgradeValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Upgrade self-hosted integration runtime to latest version if availability.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimesUpgradeAsync(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = integrationRuntimesUpgradeValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
