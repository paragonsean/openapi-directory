/*
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DataFlowDebugPackageDebugSettings;
import org.openapitools.client.model.DataFlowDebugResource;
import org.openapitools.client.model.DataFlowStagingInfo;
import org.openapitools.client.model.DatasetDebugResource;
import org.openapitools.client.model.LinkedServiceDebugResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request body structure for starting data flow debug session.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:51:48.649367-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataFlowDebugPackage {
  public static final String SERIALIZED_NAME_DATA_FLOW = "dataFlow";
  @SerializedName(SERIALIZED_NAME_DATA_FLOW)
  private DataFlowDebugResource dataFlow;

  public static final String SERIALIZED_NAME_DATASETS = "datasets";
  @SerializedName(SERIALIZED_NAME_DATASETS)
  private List<DatasetDebugResource> datasets = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEBUG_SETTINGS = "debugSettings";
  @SerializedName(SERIALIZED_NAME_DEBUG_SETTINGS)
  private DataFlowDebugPackageDebugSettings debugSettings;

  public static final String SERIALIZED_NAME_LINKED_SERVICES = "linkedServices";
  @SerializedName(SERIALIZED_NAME_LINKED_SERVICES)
  private List<LinkedServiceDebugResource> linkedServices = new ArrayList<>();

  public static final String SERIALIZED_NAME_SESSION_ID = "sessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public static final String SERIALIZED_NAME_STAGING = "staging";
  @SerializedName(SERIALIZED_NAME_STAGING)
  private DataFlowStagingInfo staging;

  public DataFlowDebugPackage() {
  }

  public DataFlowDebugPackage dataFlow(DataFlowDebugResource dataFlow) {
    this.dataFlow = dataFlow;
    return this;
  }

  /**
   * Get dataFlow
   * @return dataFlow
   */
  @javax.annotation.Nullable
  public DataFlowDebugResource getDataFlow() {
    return dataFlow;
  }

  public void setDataFlow(DataFlowDebugResource dataFlow) {
    this.dataFlow = dataFlow;
  }


  public DataFlowDebugPackage datasets(List<DatasetDebugResource> datasets) {
    this.datasets = datasets;
    return this;
  }

  public DataFlowDebugPackage addDatasetsItem(DatasetDebugResource datasetsItem) {
    if (this.datasets == null) {
      this.datasets = new ArrayList<>();
    }
    this.datasets.add(datasetsItem);
    return this;
  }

  /**
   * List of datasets.
   * @return datasets
   */
  @javax.annotation.Nullable
  public List<DatasetDebugResource> getDatasets() {
    return datasets;
  }

  public void setDatasets(List<DatasetDebugResource> datasets) {
    this.datasets = datasets;
  }


  public DataFlowDebugPackage debugSettings(DataFlowDebugPackageDebugSettings debugSettings) {
    this.debugSettings = debugSettings;
    return this;
  }

  /**
   * Get debugSettings
   * @return debugSettings
   */
  @javax.annotation.Nullable
  public DataFlowDebugPackageDebugSettings getDebugSettings() {
    return debugSettings;
  }

  public void setDebugSettings(DataFlowDebugPackageDebugSettings debugSettings) {
    this.debugSettings = debugSettings;
  }


  public DataFlowDebugPackage linkedServices(List<LinkedServiceDebugResource> linkedServices) {
    this.linkedServices = linkedServices;
    return this;
  }

  public DataFlowDebugPackage addLinkedServicesItem(LinkedServiceDebugResource linkedServicesItem) {
    if (this.linkedServices == null) {
      this.linkedServices = new ArrayList<>();
    }
    this.linkedServices.add(linkedServicesItem);
    return this;
  }

  /**
   * List of linked services.
   * @return linkedServices
   */
  @javax.annotation.Nullable
  public List<LinkedServiceDebugResource> getLinkedServices() {
    return linkedServices;
  }

  public void setLinkedServices(List<LinkedServiceDebugResource> linkedServices) {
    this.linkedServices = linkedServices;
  }


  public DataFlowDebugPackage sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * The ID of data flow debug session.
   * @return sessionId
   */
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }


  public DataFlowDebugPackage staging(DataFlowStagingInfo staging) {
    this.staging = staging;
    return this;
  }

  /**
   * Get staging
   * @return staging
   */
  @javax.annotation.Nullable
  public DataFlowStagingInfo getStaging() {
    return staging;
  }

  public void setStaging(DataFlowStagingInfo staging) {
    this.staging = staging;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DataFlowDebugPackage instance itself
   */
  public DataFlowDebugPackage putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataFlowDebugPackage dataFlowDebugPackage = (DataFlowDebugPackage) o;
    return Objects.equals(this.dataFlow, dataFlowDebugPackage.dataFlow) &&
        Objects.equals(this.datasets, dataFlowDebugPackage.datasets) &&
        Objects.equals(this.debugSettings, dataFlowDebugPackage.debugSettings) &&
        Objects.equals(this.linkedServices, dataFlowDebugPackage.linkedServices) &&
        Objects.equals(this.sessionId, dataFlowDebugPackage.sessionId) &&
        Objects.equals(this.staging, dataFlowDebugPackage.staging)&&
        Objects.equals(this.additionalProperties, dataFlowDebugPackage.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataFlow, datasets, debugSettings, linkedServices, sessionId, staging, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataFlowDebugPackage {\n");
    sb.append("    dataFlow: ").append(toIndentedString(dataFlow)).append("\n");
    sb.append("    datasets: ").append(toIndentedString(datasets)).append("\n");
    sb.append("    debugSettings: ").append(toIndentedString(debugSettings)).append("\n");
    sb.append("    linkedServices: ").append(toIndentedString(linkedServices)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    staging: ").append(toIndentedString(staging)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataFlow");
    openapiFields.add("datasets");
    openapiFields.add("debugSettings");
    openapiFields.add("linkedServices");
    openapiFields.add("sessionId");
    openapiFields.add("staging");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataFlowDebugPackage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataFlowDebugPackage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataFlowDebugPackage is not found in the empty JSON string", DataFlowDebugPackage.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dataFlow`
      if (jsonObj.get("dataFlow") != null && !jsonObj.get("dataFlow").isJsonNull()) {
        DataFlowDebugResource.validateJsonElement(jsonObj.get("dataFlow"));
      }
      if (jsonObj.get("datasets") != null && !jsonObj.get("datasets").isJsonNull()) {
        JsonArray jsonArraydatasets = jsonObj.getAsJsonArray("datasets");
        if (jsonArraydatasets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("datasets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `datasets` to be an array in the JSON string but got `%s`", jsonObj.get("datasets").toString()));
          }

          // validate the optional field `datasets` (array)
          for (int i = 0; i < jsonArraydatasets.size(); i++) {
            DatasetDebugResource.validateJsonElement(jsonArraydatasets.get(i));
          };
        }
      }
      // validate the optional field `debugSettings`
      if (jsonObj.get("debugSettings") != null && !jsonObj.get("debugSettings").isJsonNull()) {
        DataFlowDebugPackageDebugSettings.validateJsonElement(jsonObj.get("debugSettings"));
      }
      if (jsonObj.get("linkedServices") != null && !jsonObj.get("linkedServices").isJsonNull()) {
        JsonArray jsonArraylinkedServices = jsonObj.getAsJsonArray("linkedServices");
        if (jsonArraylinkedServices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("linkedServices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `linkedServices` to be an array in the JSON string but got `%s`", jsonObj.get("linkedServices").toString()));
          }

          // validate the optional field `linkedServices` (array)
          for (int i = 0; i < jsonArraylinkedServices.size(); i++) {
            LinkedServiceDebugResource.validateJsonElement(jsonArraylinkedServices.get(i));
          };
        }
      }
      if ((jsonObj.get("sessionId") != null && !jsonObj.get("sessionId").isJsonNull()) && !jsonObj.get("sessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionId").toString()));
      }
      // validate the optional field `staging`
      if (jsonObj.get("staging") != null && !jsonObj.get("staging").isJsonNull()) {
        DataFlowStagingInfo.validateJsonElement(jsonObj.get("staging"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataFlowDebugPackage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataFlowDebugPackage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataFlowDebugPackage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataFlowDebugPackage.class));

       return (TypeAdapter<T>) new TypeAdapter<DataFlowDebugPackage>() {
           @Override
           public void write(JsonWriter out, DataFlowDebugPackage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DataFlowDebugPackage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             DataFlowDebugPackage instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataFlowDebugPackage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataFlowDebugPackage
   * @throws IOException if the JSON string is invalid with respect to DataFlowDebugPackage
   */
  public static DataFlowDebugPackage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataFlowDebugPackage.class);
  }

  /**
   * Convert an instance of DataFlowDebugPackage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

