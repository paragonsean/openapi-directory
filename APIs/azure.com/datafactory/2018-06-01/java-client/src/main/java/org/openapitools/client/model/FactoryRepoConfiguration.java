/*
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Factory&#39;s git repo information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:51:48.649367-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FactoryRepoConfiguration {
  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "accountName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  public static final String SERIALIZED_NAME_COLLABORATION_BRANCH = "collaborationBranch";
  @SerializedName(SERIALIZED_NAME_COLLABORATION_BRANCH)
  private String collaborationBranch;

  public static final String SERIALIZED_NAME_LAST_COMMIT_ID = "lastCommitId";
  @SerializedName(SERIALIZED_NAME_LAST_COMMIT_ID)
  private String lastCommitId;

  public static final String SERIALIZED_NAME_REPOSITORY_NAME = "repositoryName";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_NAME)
  private String repositoryName;

  public static final String SERIALIZED_NAME_ROOT_FOLDER = "rootFolder";
  @SerializedName(SERIALIZED_NAME_ROOT_FOLDER)
  private String rootFolder;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  protected String type;

  public FactoryRepoConfiguration() {
    this.type = this.getClass().getSimpleName();
  }

  public FactoryRepoConfiguration accountName(String accountName) {
    this.accountName = accountName;
    return this;
  }

  /**
   * Account name.
   * @return accountName
   */
  @javax.annotation.Nonnull
  public String getAccountName() {
    return accountName;
  }

  public void setAccountName(String accountName) {
    this.accountName = accountName;
  }


  public FactoryRepoConfiguration collaborationBranch(String collaborationBranch) {
    this.collaborationBranch = collaborationBranch;
    return this;
  }

  /**
   * Collaboration branch.
   * @return collaborationBranch
   */
  @javax.annotation.Nonnull
  public String getCollaborationBranch() {
    return collaborationBranch;
  }

  public void setCollaborationBranch(String collaborationBranch) {
    this.collaborationBranch = collaborationBranch;
  }


  public FactoryRepoConfiguration lastCommitId(String lastCommitId) {
    this.lastCommitId = lastCommitId;
    return this;
  }

  /**
   * Last commit id.
   * @return lastCommitId
   */
  @javax.annotation.Nullable
  public String getLastCommitId() {
    return lastCommitId;
  }

  public void setLastCommitId(String lastCommitId) {
    this.lastCommitId = lastCommitId;
  }


  public FactoryRepoConfiguration repositoryName(String repositoryName) {
    this.repositoryName = repositoryName;
    return this;
  }

  /**
   * Repository name.
   * @return repositoryName
   */
  @javax.annotation.Nonnull
  public String getRepositoryName() {
    return repositoryName;
  }

  public void setRepositoryName(String repositoryName) {
    this.repositoryName = repositoryName;
  }


  public FactoryRepoConfiguration rootFolder(String rootFolder) {
    this.rootFolder = rootFolder;
    return this;
  }

  /**
   * Root folder.
   * @return rootFolder
   */
  @javax.annotation.Nonnull
  public String getRootFolder() {
    return rootFolder;
  }

  public void setRootFolder(String rootFolder) {
    this.rootFolder = rootFolder;
  }


  public FactoryRepoConfiguration type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of repo configuration.
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FactoryRepoConfiguration factoryRepoConfiguration = (FactoryRepoConfiguration) o;
    return Objects.equals(this.accountName, factoryRepoConfiguration.accountName) &&
        Objects.equals(this.collaborationBranch, factoryRepoConfiguration.collaborationBranch) &&
        Objects.equals(this.lastCommitId, factoryRepoConfiguration.lastCommitId) &&
        Objects.equals(this.repositoryName, factoryRepoConfiguration.repositoryName) &&
        Objects.equals(this.rootFolder, factoryRepoConfiguration.rootFolder) &&
        Objects.equals(this.type, factoryRepoConfiguration.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountName, collaborationBranch, lastCommitId, repositoryName, rootFolder, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FactoryRepoConfiguration {\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    collaborationBranch: ").append(toIndentedString(collaborationBranch)).append("\n");
    sb.append("    lastCommitId: ").append(toIndentedString(lastCommitId)).append("\n");
    sb.append("    repositoryName: ").append(toIndentedString(repositoryName)).append("\n");
    sb.append("    rootFolder: ").append(toIndentedString(rootFolder)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountName");
    openapiFields.add("collaborationBranch");
    openapiFields.add("lastCommitId");
    openapiFields.add("repositoryName");
    openapiFields.add("rootFolder");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountName");
    openapiRequiredFields.add("collaborationBranch");
    openapiRequiredFields.add("repositoryName");
    openapiRequiredFields.add("rootFolder");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FactoryRepoConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FactoryRepoConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FactoryRepoConfiguration is not found in the empty JSON string", FactoryRepoConfiguration.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("type").getAsString();
      switch (discriminatorValue) {
        case "FactoryGitHubConfiguration":
          FactoryGitHubConfiguration.validateJsonElement(jsonElement);
          break;
        case "FactoryVSTSConfiguration":
          FactoryVSTSConfiguration.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of FactoryRepoConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FactoryRepoConfiguration
   * @throws IOException if the JSON string is invalid with respect to FactoryRepoConfiguration
   */
  public static FactoryRepoConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FactoryRepoConfiguration.class);
  }

  /**
   * Convert an instance of FactoryRepoConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

