/*
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.IntegrationRuntimeNodesGet200Response;
import org.openapitools.client.model.IntegrationRuntimeNodesGetIpAddress200Response;
import org.openapitools.client.model.UpdateIntegrationRuntimeNodeRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IntegrationRuntimeNodesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IntegrationRuntimeNodesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IntegrationRuntimeNodesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for integrationRuntimeNodesDelete
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param nodeName The integration runtime node name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimeNodesDeleteCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String nodeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/nodes/{nodeName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "integrationRuntimeName" + "}", localVarApiClient.escapeString(integrationRuntimeName.toString()))
            .replace("{" + "nodeName" + "}", localVarApiClient.escapeString(nodeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call integrationRuntimeNodesDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String nodeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling integrationRuntimeNodesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling integrationRuntimeNodesDelete(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling integrationRuntimeNodesDelete(Async)");
        }

        // verify the required parameter 'integrationRuntimeName' is set
        if (integrationRuntimeName == null) {
            throw new ApiException("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimeNodesDelete(Async)");
        }

        // verify the required parameter 'nodeName' is set
        if (nodeName == null) {
            throw new ApiException("Missing the required parameter 'nodeName' when calling integrationRuntimeNodesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling integrationRuntimeNodesDelete(Async)");
        }

        return integrationRuntimeNodesDeleteCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, nodeName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a self-hosted integration runtime node.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param nodeName The integration runtime node name. (required)
     * @param apiVersion The API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public void integrationRuntimeNodesDelete(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String nodeName, String apiVersion) throws ApiException {
        integrationRuntimeNodesDeleteWithHttpInfo(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, nodeName, apiVersion);
    }

    /**
     * 
     * Deletes a self-hosted integration runtime node.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param nodeName The integration runtime node name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> integrationRuntimeNodesDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String nodeName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = integrationRuntimeNodesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, nodeName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a self-hosted integration runtime node.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param nodeName The integration runtime node name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimeNodesDeleteAsync(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String nodeName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = integrationRuntimeNodesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, nodeName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for integrationRuntimeNodesGet
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param nodeName The integration runtime node name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimeNodesGetCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String nodeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/nodes/{nodeName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "integrationRuntimeName" + "}", localVarApiClient.escapeString(integrationRuntimeName.toString()))
            .replace("{" + "nodeName" + "}", localVarApiClient.escapeString(nodeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call integrationRuntimeNodesGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String nodeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling integrationRuntimeNodesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling integrationRuntimeNodesGet(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling integrationRuntimeNodesGet(Async)");
        }

        // verify the required parameter 'integrationRuntimeName' is set
        if (integrationRuntimeName == null) {
            throw new ApiException("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimeNodesGet(Async)");
        }

        // verify the required parameter 'nodeName' is set
        if (nodeName == null) {
            throw new ApiException("Missing the required parameter 'nodeName' when calling integrationRuntimeNodesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling integrationRuntimeNodesGet(Async)");
        }

        return integrationRuntimeNodesGetCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, nodeName, apiVersion, _callback);

    }

    /**
     * 
     * Gets a self-hosted integration runtime node.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param nodeName The integration runtime node name. (required)
     * @param apiVersion The API version. (required)
     * @return IntegrationRuntimeNodesGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationRuntimeNodesGet200Response integrationRuntimeNodesGet(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String nodeName, String apiVersion) throws ApiException {
        ApiResponse<IntegrationRuntimeNodesGet200Response> localVarResp = integrationRuntimeNodesGetWithHttpInfo(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, nodeName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a self-hosted integration runtime node.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param nodeName The integration runtime node name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;IntegrationRuntimeNodesGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationRuntimeNodesGet200Response> integrationRuntimeNodesGetWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String nodeName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = integrationRuntimeNodesGetValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, nodeName, apiVersion, null);
        Type localVarReturnType = new TypeToken<IntegrationRuntimeNodesGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a self-hosted integration runtime node.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param nodeName The integration runtime node name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimeNodesGetAsync(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String nodeName, String apiVersion, final ApiCallback<IntegrationRuntimeNodesGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = integrationRuntimeNodesGetValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, nodeName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<IntegrationRuntimeNodesGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for integrationRuntimeNodesGetIpAddress
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param nodeName The integration runtime node name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimeNodesGetIpAddressCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String nodeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/nodes/{nodeName}/ipAddress"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "integrationRuntimeName" + "}", localVarApiClient.escapeString(integrationRuntimeName.toString()))
            .replace("{" + "nodeName" + "}", localVarApiClient.escapeString(nodeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call integrationRuntimeNodesGetIpAddressValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String nodeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling integrationRuntimeNodesGetIpAddress(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling integrationRuntimeNodesGetIpAddress(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling integrationRuntimeNodesGetIpAddress(Async)");
        }

        // verify the required parameter 'integrationRuntimeName' is set
        if (integrationRuntimeName == null) {
            throw new ApiException("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimeNodesGetIpAddress(Async)");
        }

        // verify the required parameter 'nodeName' is set
        if (nodeName == null) {
            throw new ApiException("Missing the required parameter 'nodeName' when calling integrationRuntimeNodesGetIpAddress(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling integrationRuntimeNodesGetIpAddress(Async)");
        }

        return integrationRuntimeNodesGetIpAddressCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, nodeName, apiVersion, _callback);

    }

    /**
     * 
     * Get the IP address of self-hosted integration runtime node.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param nodeName The integration runtime node name. (required)
     * @param apiVersion The API version. (required)
     * @return IntegrationRuntimeNodesGetIpAddress200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationRuntimeNodesGetIpAddress200Response integrationRuntimeNodesGetIpAddress(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String nodeName, String apiVersion) throws ApiException {
        ApiResponse<IntegrationRuntimeNodesGetIpAddress200Response> localVarResp = integrationRuntimeNodesGetIpAddressWithHttpInfo(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, nodeName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the IP address of self-hosted integration runtime node.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param nodeName The integration runtime node name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;IntegrationRuntimeNodesGetIpAddress200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationRuntimeNodesGetIpAddress200Response> integrationRuntimeNodesGetIpAddressWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String nodeName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = integrationRuntimeNodesGetIpAddressValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, nodeName, apiVersion, null);
        Type localVarReturnType = new TypeToken<IntegrationRuntimeNodesGetIpAddress200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the IP address of self-hosted integration runtime node.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param nodeName The integration runtime node name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimeNodesGetIpAddressAsync(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String nodeName, String apiVersion, final ApiCallback<IntegrationRuntimeNodesGetIpAddress200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = integrationRuntimeNodesGetIpAddressValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, nodeName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<IntegrationRuntimeNodesGetIpAddress200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for integrationRuntimeNodesUpdate
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param nodeName The integration runtime node name. (required)
     * @param apiVersion The API version. (required)
     * @param updateIntegrationRuntimeNodeRequest The parameters for updating an integration runtime node. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimeNodesUpdateCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String nodeName, String apiVersion, UpdateIntegrationRuntimeNodeRequest updateIntegrationRuntimeNodeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateIntegrationRuntimeNodeRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/nodes/{nodeName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "integrationRuntimeName" + "}", localVarApiClient.escapeString(integrationRuntimeName.toString()))
            .replace("{" + "nodeName" + "}", localVarApiClient.escapeString(nodeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call integrationRuntimeNodesUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String nodeName, String apiVersion, UpdateIntegrationRuntimeNodeRequest updateIntegrationRuntimeNodeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling integrationRuntimeNodesUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling integrationRuntimeNodesUpdate(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling integrationRuntimeNodesUpdate(Async)");
        }

        // verify the required parameter 'integrationRuntimeName' is set
        if (integrationRuntimeName == null) {
            throw new ApiException("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimeNodesUpdate(Async)");
        }

        // verify the required parameter 'nodeName' is set
        if (nodeName == null) {
            throw new ApiException("Missing the required parameter 'nodeName' when calling integrationRuntimeNodesUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling integrationRuntimeNodesUpdate(Async)");
        }

        // verify the required parameter 'updateIntegrationRuntimeNodeRequest' is set
        if (updateIntegrationRuntimeNodeRequest == null) {
            throw new ApiException("Missing the required parameter 'updateIntegrationRuntimeNodeRequest' when calling integrationRuntimeNodesUpdate(Async)");
        }

        return integrationRuntimeNodesUpdateCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, nodeName, apiVersion, updateIntegrationRuntimeNodeRequest, _callback);

    }

    /**
     * 
     * Updates a self-hosted integration runtime node.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param nodeName The integration runtime node name. (required)
     * @param apiVersion The API version. (required)
     * @param updateIntegrationRuntimeNodeRequest The parameters for updating an integration runtime node. (required)
     * @return IntegrationRuntimeNodesGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationRuntimeNodesGet200Response integrationRuntimeNodesUpdate(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String nodeName, String apiVersion, UpdateIntegrationRuntimeNodeRequest updateIntegrationRuntimeNodeRequest) throws ApiException {
        ApiResponse<IntegrationRuntimeNodesGet200Response> localVarResp = integrationRuntimeNodesUpdateWithHttpInfo(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, nodeName, apiVersion, updateIntegrationRuntimeNodeRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a self-hosted integration runtime node.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param nodeName The integration runtime node name. (required)
     * @param apiVersion The API version. (required)
     * @param updateIntegrationRuntimeNodeRequest The parameters for updating an integration runtime node. (required)
     * @return ApiResponse&lt;IntegrationRuntimeNodesGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationRuntimeNodesGet200Response> integrationRuntimeNodesUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String nodeName, String apiVersion, UpdateIntegrationRuntimeNodeRequest updateIntegrationRuntimeNodeRequest) throws ApiException {
        okhttp3.Call localVarCall = integrationRuntimeNodesUpdateValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, nodeName, apiVersion, updateIntegrationRuntimeNodeRequest, null);
        Type localVarReturnType = new TypeToken<IntegrationRuntimeNodesGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a self-hosted integration runtime node.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param integrationRuntimeName The integration runtime name. (required)
     * @param nodeName The integration runtime node name. (required)
     * @param apiVersion The API version. (required)
     * @param updateIntegrationRuntimeNodeRequest The parameters for updating an integration runtime node. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationRuntimeNodesUpdateAsync(String subscriptionId, String resourceGroupName, String factoryName, String integrationRuntimeName, String nodeName, String apiVersion, UpdateIntegrationRuntimeNodeRequest updateIntegrationRuntimeNodeRequest, final ApiCallback<IntegrationRuntimeNodesGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = integrationRuntimeNodesUpdateValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, nodeName, apiVersion, updateIntegrationRuntimeNodeRequest, _callback);
        Type localVarReturnType = new TypeToken<IntegrationRuntimeNodesGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
