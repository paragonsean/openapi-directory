/*
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.TriggerListResponse;
import org.openapitools.client.model.TriggerResource;
import org.openapitools.client.model.TriggerSubscriptionOperationStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TriggersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TriggersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TriggersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for triggersCreateOrUpdate
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param triggerName The trigger name. (required)
     * @param apiVersion The API version. (required)
     * @param trigger Trigger resource definition. (required)
     * @param ifMatch ETag of the trigger entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggersCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion, TriggerResource trigger, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trigger;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "triggerName" + "}", localVarApiClient.escapeString(triggerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call triggersCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion, TriggerResource trigger, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling triggersCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling triggersCreateOrUpdate(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling triggersCreateOrUpdate(Async)");
        }

        // verify the required parameter 'triggerName' is set
        if (triggerName == null) {
            throw new ApiException("Missing the required parameter 'triggerName' when calling triggersCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling triggersCreateOrUpdate(Async)");
        }

        // verify the required parameter 'trigger' is set
        if (trigger == null) {
            throw new ApiException("Missing the required parameter 'trigger' when calling triggersCreateOrUpdate(Async)");
        }

        return triggersCreateOrUpdateCall(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion, trigger, ifMatch, _callback);

    }

    /**
     * 
     * Creates or updates a trigger.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param triggerName The trigger name. (required)
     * @param apiVersion The API version. (required)
     * @param trigger Trigger resource definition. (required)
     * @param ifMatch ETag of the trigger entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update. (optional)
     * @return TriggerResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public TriggerResource triggersCreateOrUpdate(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion, TriggerResource trigger, String ifMatch) throws ApiException {
        ApiResponse<TriggerResource> localVarResp = triggersCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion, trigger, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a trigger.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param triggerName The trigger name. (required)
     * @param apiVersion The API version. (required)
     * @param trigger Trigger resource definition. (required)
     * @param ifMatch ETag of the trigger entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update. (optional)
     * @return ApiResponse&lt;TriggerResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TriggerResource> triggersCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion, TriggerResource trigger, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = triggersCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion, trigger, ifMatch, null);
        Type localVarReturnType = new TypeToken<TriggerResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a trigger.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param triggerName The trigger name. (required)
     * @param apiVersion The API version. (required)
     * @param trigger Trigger resource definition. (required)
     * @param ifMatch ETag of the trigger entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggersCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion, TriggerResource trigger, String ifMatch, final ApiCallback<TriggerResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = triggersCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion, trigger, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<TriggerResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for triggersDelete
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param triggerName The trigger name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggersDeleteCall(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "triggerName" + "}", localVarApiClient.escapeString(triggerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call triggersDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling triggersDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling triggersDelete(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling triggersDelete(Async)");
        }

        // verify the required parameter 'triggerName' is set
        if (triggerName == null) {
            throw new ApiException("Missing the required parameter 'triggerName' when calling triggersDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling triggersDelete(Async)");
        }

        return triggersDeleteCall(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a trigger.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param triggerName The trigger name. (required)
     * @param apiVersion The API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public void triggersDelete(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion) throws ApiException {
        triggersDeleteWithHttpInfo(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion);
    }

    /**
     * 
     * Deletes a trigger.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param triggerName The trigger name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> triggersDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = triggersDeleteValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a trigger.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param triggerName The trigger name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggersDeleteAsync(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = triggersDeleteValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for triggersGetEventSubscriptionStatus
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param triggerName The trigger name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trigger event subscription state. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggersGetEventSubscriptionStatusCall(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/getEventSubscriptionStatus"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "triggerName" + "}", localVarApiClient.escapeString(triggerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call triggersGetEventSubscriptionStatusValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling triggersGetEventSubscriptionStatus(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling triggersGetEventSubscriptionStatus(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling triggersGetEventSubscriptionStatus(Async)");
        }

        // verify the required parameter 'triggerName' is set
        if (triggerName == null) {
            throw new ApiException("Missing the required parameter 'triggerName' when calling triggersGetEventSubscriptionStatus(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling triggersGetEventSubscriptionStatus(Async)");
        }

        return triggersGetEventSubscriptionStatusCall(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion, _callback);

    }

    /**
     * 
     * Get a trigger&#39;s event subscription status.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param triggerName The trigger name. (required)
     * @param apiVersion The API version. (required)
     * @return TriggerSubscriptionOperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trigger event subscription state. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public TriggerSubscriptionOperationStatus triggersGetEventSubscriptionStatus(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion) throws ApiException {
        ApiResponse<TriggerSubscriptionOperationStatus> localVarResp = triggersGetEventSubscriptionStatusWithHttpInfo(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a trigger&#39;s event subscription status.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param triggerName The trigger name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;TriggerSubscriptionOperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trigger event subscription state. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TriggerSubscriptionOperationStatus> triggersGetEventSubscriptionStatusWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = triggersGetEventSubscriptionStatusValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion, null);
        Type localVarReturnType = new TypeToken<TriggerSubscriptionOperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a trigger&#39;s event subscription status.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param triggerName The trigger name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trigger event subscription state. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggersGetEventSubscriptionStatusAsync(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion, final ApiCallback<TriggerSubscriptionOperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = triggersGetEventSubscriptionStatusValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<TriggerSubscriptionOperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for triggersListByFactory
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggersListByFactoryCall(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call triggersListByFactoryValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling triggersListByFactory(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling triggersListByFactory(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling triggersListByFactory(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling triggersListByFactory(Async)");
        }

        return triggersListByFactoryCall(subscriptionId, resourceGroupName, factoryName, apiVersion, _callback);

    }

    /**
     * 
     * Lists triggers.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @return TriggerListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public TriggerListResponse triggersListByFactory(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion) throws ApiException {
        ApiResponse<TriggerListResponse> localVarResp = triggersListByFactoryWithHttpInfo(subscriptionId, resourceGroupName, factoryName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists triggers.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;TriggerListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TriggerListResponse> triggersListByFactoryWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = triggersListByFactoryValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, apiVersion, null);
        Type localVarReturnType = new TypeToken<TriggerListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists triggers.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggersListByFactoryAsync(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, final ApiCallback<TriggerListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = triggersListByFactoryValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<TriggerListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for triggersStart
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param triggerName The trigger name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trigger has been started successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggersStartCall(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/start"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "triggerName" + "}", localVarApiClient.escapeString(triggerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call triggersStartValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling triggersStart(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling triggersStart(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling triggersStart(Async)");
        }

        // verify the required parameter 'triggerName' is set
        if (triggerName == null) {
            throw new ApiException("Missing the required parameter 'triggerName' when calling triggersStart(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling triggersStart(Async)");
        }

        return triggersStartCall(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion, _callback);

    }

    /**
     * 
     * Starts a trigger.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param triggerName The trigger name. (required)
     * @param apiVersion The API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trigger has been started successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public void triggersStart(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion) throws ApiException {
        triggersStartWithHttpInfo(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion);
    }

    /**
     * 
     * Starts a trigger.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param triggerName The trigger name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trigger has been started successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> triggersStartWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = triggersStartValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Starts a trigger.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param triggerName The trigger name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trigger has been started successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggersStartAsync(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = triggersStartValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for triggersStop
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param triggerName The trigger name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trigger has been stopped successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggersStopCall(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/stop"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "triggerName" + "}", localVarApiClient.escapeString(triggerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call triggersStopValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling triggersStop(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling triggersStop(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling triggersStop(Async)");
        }

        // verify the required parameter 'triggerName' is set
        if (triggerName == null) {
            throw new ApiException("Missing the required parameter 'triggerName' when calling triggersStop(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling triggersStop(Async)");
        }

        return triggersStopCall(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion, _callback);

    }

    /**
     * 
     * Stops a trigger.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param triggerName The trigger name. (required)
     * @param apiVersion The API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trigger has been stopped successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public void triggersStop(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion) throws ApiException {
        triggersStopWithHttpInfo(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion);
    }

    /**
     * 
     * Stops a trigger.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param triggerName The trigger name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trigger has been stopped successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> triggersStopWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = triggersStopValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Stops a trigger.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param triggerName The trigger name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trigger has been stopped successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggersStopAsync(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = triggersStopValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for triggersSubscribeToEvents
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param triggerName The trigger name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trigger is subscribed to events. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggersSubscribeToEventsCall(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/subscribeToEvents"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "triggerName" + "}", localVarApiClient.escapeString(triggerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call triggersSubscribeToEventsValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling triggersSubscribeToEvents(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling triggersSubscribeToEvents(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling triggersSubscribeToEvents(Async)");
        }

        // verify the required parameter 'triggerName' is set
        if (triggerName == null) {
            throw new ApiException("Missing the required parameter 'triggerName' when calling triggersSubscribeToEvents(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling triggersSubscribeToEvents(Async)");
        }

        return triggersSubscribeToEventsCall(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion, _callback);

    }

    /**
     * 
     * Subscribe event trigger to events.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param triggerName The trigger name. (required)
     * @param apiVersion The API version. (required)
     * @return TriggerSubscriptionOperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trigger is subscribed to events. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public TriggerSubscriptionOperationStatus triggersSubscribeToEvents(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion) throws ApiException {
        ApiResponse<TriggerSubscriptionOperationStatus> localVarResp = triggersSubscribeToEventsWithHttpInfo(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Subscribe event trigger to events.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param triggerName The trigger name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;TriggerSubscriptionOperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trigger is subscribed to events. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TriggerSubscriptionOperationStatus> triggersSubscribeToEventsWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = triggersSubscribeToEventsValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion, null);
        Type localVarReturnType = new TypeToken<TriggerSubscriptionOperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Subscribe event trigger to events.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param triggerName The trigger name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trigger is subscribed to events. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggersSubscribeToEventsAsync(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion, final ApiCallback<TriggerSubscriptionOperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = triggersSubscribeToEventsValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<TriggerSubscriptionOperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for triggersUnsubscribeFromEvents
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param triggerName The trigger name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trigger is unsubscribed from events. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggersUnsubscribeFromEventsCall(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/unsubscribeFromEvents"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "triggerName" + "}", localVarApiClient.escapeString(triggerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call triggersUnsubscribeFromEventsValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling triggersUnsubscribeFromEvents(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling triggersUnsubscribeFromEvents(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling triggersUnsubscribeFromEvents(Async)");
        }

        // verify the required parameter 'triggerName' is set
        if (triggerName == null) {
            throw new ApiException("Missing the required parameter 'triggerName' when calling triggersUnsubscribeFromEvents(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling triggersUnsubscribeFromEvents(Async)");
        }

        return triggersUnsubscribeFromEventsCall(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion, _callback);

    }

    /**
     * 
     * Unsubscribe event trigger from events.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param triggerName The trigger name. (required)
     * @param apiVersion The API version. (required)
     * @return TriggerSubscriptionOperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trigger is unsubscribed from events. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public TriggerSubscriptionOperationStatus triggersUnsubscribeFromEvents(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion) throws ApiException {
        ApiResponse<TriggerSubscriptionOperationStatus> localVarResp = triggersUnsubscribeFromEventsWithHttpInfo(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Unsubscribe event trigger from events.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param triggerName The trigger name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;TriggerSubscriptionOperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trigger is unsubscribed from events. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TriggerSubscriptionOperationStatus> triggersUnsubscribeFromEventsWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = triggersUnsubscribeFromEventsValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion, null);
        Type localVarReturnType = new TypeToken<TriggerSubscriptionOperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Unsubscribe event trigger from events.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param triggerName The trigger name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trigger is unsubscribed from events. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggersUnsubscribeFromEventsAsync(String subscriptionId, String resourceGroupName, String factoryName, String triggerName, String apiVersion, final ApiCallback<TriggerSubscriptionOperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = triggersUnsubscribeFromEventsValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, triggerName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<TriggerSubscriptionOperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
