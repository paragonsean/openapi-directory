/*
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.PipelineRunInvokedBy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a pipeline run.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:51:48.649367-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PipelineRun {
  public static final String SERIALIZED_NAME_DURATION_IN_MS = "durationInMs";
  @SerializedName(SERIALIZED_NAME_DURATION_IN_MS)
  private Integer durationInMs;

  public static final String SERIALIZED_NAME_INVOKED_BY = "invokedBy";
  @SerializedName(SERIALIZED_NAME_INVOKED_BY)
  private PipelineRunInvokedBy invokedBy;

  public static final String SERIALIZED_NAME_IS_LATEST = "isLatest";
  @SerializedName(SERIALIZED_NAME_IS_LATEST)
  private Boolean isLatest;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map<String, String> parameters = new HashMap<>();

  public static final String SERIALIZED_NAME_PIPELINE_NAME = "pipelineName";
  @SerializedName(SERIALIZED_NAME_PIPELINE_NAME)
  private String pipelineName;

  public static final String SERIALIZED_NAME_RUN_DIMENSIONS = "runDimensions";
  @SerializedName(SERIALIZED_NAME_RUN_DIMENSIONS)
  private Map<String, String> runDimensions = new HashMap<>();

  public static final String SERIALIZED_NAME_RUN_END = "runEnd";
  @SerializedName(SERIALIZED_NAME_RUN_END)
  private OffsetDateTime runEnd;

  public static final String SERIALIZED_NAME_RUN_GROUP_ID = "runGroupId";
  @SerializedName(SERIALIZED_NAME_RUN_GROUP_ID)
  private String runGroupId;

  public static final String SERIALIZED_NAME_RUN_ID = "runId";
  @SerializedName(SERIALIZED_NAME_RUN_ID)
  private String runId;

  public static final String SERIALIZED_NAME_RUN_START = "runStart";
  @SerializedName(SERIALIZED_NAME_RUN_START)
  private OffsetDateTime runStart;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public PipelineRun() {
  }

  public PipelineRun(
     Integer durationInMs, 
     Boolean isLatest, 
     OffsetDateTime lastUpdated, 
     String message, 
     Map<String, String> parameters, 
     String pipelineName, 
     Map<String, String> runDimensions, 
     OffsetDateTime runEnd, 
     String runGroupId, 
     String runId, 
     OffsetDateTime runStart, 
     String status
  ) {
    this();
    this.durationInMs = durationInMs;
    this.isLatest = isLatest;
    this.lastUpdated = lastUpdated;
    this.message = message;
    this.parameters = parameters;
    this.pipelineName = pipelineName;
    this.runDimensions = runDimensions;
    this.runEnd = runEnd;
    this.runGroupId = runGroupId;
    this.runId = runId;
    this.runStart = runStart;
    this.status = status;
  }

  /**
   * The duration of a pipeline run.
   * @return durationInMs
   */
  @javax.annotation.Nullable
  public Integer getDurationInMs() {
    return durationInMs;
  }



  public PipelineRun invokedBy(PipelineRunInvokedBy invokedBy) {
    this.invokedBy = invokedBy;
    return this;
  }

  /**
   * Get invokedBy
   * @return invokedBy
   */
  @javax.annotation.Nullable
  public PipelineRunInvokedBy getInvokedBy() {
    return invokedBy;
  }

  public void setInvokedBy(PipelineRunInvokedBy invokedBy) {
    this.invokedBy = invokedBy;
  }


  /**
   * Indicates if the recovered pipeline run is the latest in its group.
   * @return isLatest
   */
  @javax.annotation.Nullable
  public Boolean getIsLatest() {
    return isLatest;
  }



  /**
   * The last updated timestamp for the pipeline run event in ISO8601 format.
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }



  /**
   * The message from a pipeline run.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }



  /**
   * The full or partial list of parameter name, value pair used in the pipeline run.
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map<String, String> getParameters() {
    return parameters;
  }



  /**
   * The pipeline name.
   * @return pipelineName
   */
  @javax.annotation.Nullable
  public String getPipelineName() {
    return pipelineName;
  }



  /**
   * Run dimensions emitted by Pipeline run.
   * @return runDimensions
   */
  @javax.annotation.Nullable
  public Map<String, String> getRunDimensions() {
    return runDimensions;
  }



  /**
   * The end time of a pipeline run in ISO8601 format.
   * @return runEnd
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRunEnd() {
    return runEnd;
  }



  /**
   * Identifier that correlates all the recovery runs of a pipeline run.
   * @return runGroupId
   */
  @javax.annotation.Nullable
  public String getRunGroupId() {
    return runGroupId;
  }



  /**
   * Identifier of a run.
   * @return runId
   */
  @javax.annotation.Nullable
  public String getRunId() {
    return runId;
  }



  /**
   * The start time of a pipeline run in ISO8601 format.
   * @return runStart
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRunStart() {
    return runStart;
  }



  /**
   * The status of a pipeline run.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }


  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PipelineRun instance itself
   */
  public PipelineRun putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PipelineRun pipelineRun = (PipelineRun) o;
    return Objects.equals(this.durationInMs, pipelineRun.durationInMs) &&
        Objects.equals(this.invokedBy, pipelineRun.invokedBy) &&
        Objects.equals(this.isLatest, pipelineRun.isLatest) &&
        Objects.equals(this.lastUpdated, pipelineRun.lastUpdated) &&
        Objects.equals(this.message, pipelineRun.message) &&
        Objects.equals(this.parameters, pipelineRun.parameters) &&
        Objects.equals(this.pipelineName, pipelineRun.pipelineName) &&
        Objects.equals(this.runDimensions, pipelineRun.runDimensions) &&
        Objects.equals(this.runEnd, pipelineRun.runEnd) &&
        Objects.equals(this.runGroupId, pipelineRun.runGroupId) &&
        Objects.equals(this.runId, pipelineRun.runId) &&
        Objects.equals(this.runStart, pipelineRun.runStart) &&
        Objects.equals(this.status, pipelineRun.status)&&
        Objects.equals(this.additionalProperties, pipelineRun.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(durationInMs, invokedBy, isLatest, lastUpdated, message, parameters, pipelineName, runDimensions, runEnd, runGroupId, runId, runStart, status, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PipelineRun {\n");
    sb.append("    durationInMs: ").append(toIndentedString(durationInMs)).append("\n");
    sb.append("    invokedBy: ").append(toIndentedString(invokedBy)).append("\n");
    sb.append("    isLatest: ").append(toIndentedString(isLatest)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    pipelineName: ").append(toIndentedString(pipelineName)).append("\n");
    sb.append("    runDimensions: ").append(toIndentedString(runDimensions)).append("\n");
    sb.append("    runEnd: ").append(toIndentedString(runEnd)).append("\n");
    sb.append("    runGroupId: ").append(toIndentedString(runGroupId)).append("\n");
    sb.append("    runId: ").append(toIndentedString(runId)).append("\n");
    sb.append("    runStart: ").append(toIndentedString(runStart)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("durationInMs");
    openapiFields.add("invokedBy");
    openapiFields.add("isLatest");
    openapiFields.add("lastUpdated");
    openapiFields.add("message");
    openapiFields.add("parameters");
    openapiFields.add("pipelineName");
    openapiFields.add("runDimensions");
    openapiFields.add("runEnd");
    openapiFields.add("runGroupId");
    openapiFields.add("runId");
    openapiFields.add("runStart");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PipelineRun
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PipelineRun.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PipelineRun is not found in the empty JSON string", PipelineRun.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `invokedBy`
      if (jsonObj.get("invokedBy") != null && !jsonObj.get("invokedBy").isJsonNull()) {
        PipelineRunInvokedBy.validateJsonElement(jsonObj.get("invokedBy"));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("pipelineName") != null && !jsonObj.get("pipelineName").isJsonNull()) && !jsonObj.get("pipelineName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pipelineName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pipelineName").toString()));
      }
      if ((jsonObj.get("runGroupId") != null && !jsonObj.get("runGroupId").isJsonNull()) && !jsonObj.get("runGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runGroupId").toString()));
      }
      if ((jsonObj.get("runId") != null && !jsonObj.get("runId").isJsonNull()) && !jsonObj.get("runId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PipelineRun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PipelineRun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PipelineRun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PipelineRun.class));

       return (TypeAdapter<T>) new TypeAdapter<PipelineRun>() {
           @Override
           public void write(JsonWriter out, PipelineRun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PipelineRun read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             PipelineRun instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PipelineRun given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PipelineRun
   * @throws IOException if the JSON string is invalid with respect to PipelineRun
   */
  public static PipelineRun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PipelineRun.class);
  }

  /**
   * Convert an instance of PipelineRun to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

