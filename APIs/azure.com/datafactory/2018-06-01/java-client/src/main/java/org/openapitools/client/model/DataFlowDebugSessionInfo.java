/*
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Data flow debug session info.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:51:48.649367-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataFlowDebugSessionInfo {
  public static final String SERIALIZED_NAME_COMPUTE_TYPE = "computeType";
  @SerializedName(SERIALIZED_NAME_COMPUTE_TYPE)
  private String computeType;

  public static final String SERIALIZED_NAME_CORE_COUNT = "coreCount";
  @SerializedName(SERIALIZED_NAME_CORE_COUNT)
  private Integer coreCount;

  public static final String SERIALIZED_NAME_DATA_FLOW_NAME = "dataFlowName";
  @SerializedName(SERIALIZED_NAME_DATA_FLOW_NAME)
  private String dataFlowName;

  public static final String SERIALIZED_NAME_INTEGRATION_RUNTIME_NAME = "integrationRuntimeName";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_RUNTIME_NAME)
  private String integrationRuntimeName;

  public static final String SERIALIZED_NAME_LAST_ACTIVITY_TIME = "lastActivityTime";
  @SerializedName(SERIALIZED_NAME_LAST_ACTIVITY_TIME)
  private String lastActivityTime;

  public static final String SERIALIZED_NAME_NODE_COUNT = "nodeCount";
  @SerializedName(SERIALIZED_NAME_NODE_COUNT)
  private Integer nodeCount;

  public static final String SERIALIZED_NAME_SESSION_ID = "sessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_TIME_TO_LIVE_IN_MINUTES = "timeToLiveInMinutes";
  @SerializedName(SERIALIZED_NAME_TIME_TO_LIVE_IN_MINUTES)
  private Integer timeToLiveInMinutes;

  public DataFlowDebugSessionInfo() {
  }

  public DataFlowDebugSessionInfo computeType(String computeType) {
    this.computeType = computeType;
    return this;
  }

  /**
   * Compute type of the cluster.
   * @return computeType
   */
  @javax.annotation.Nullable
  public String getComputeType() {
    return computeType;
  }

  public void setComputeType(String computeType) {
    this.computeType = computeType;
  }


  public DataFlowDebugSessionInfo coreCount(Integer coreCount) {
    this.coreCount = coreCount;
    return this;
  }

  /**
   * Core count of the cluster.
   * @return coreCount
   */
  @javax.annotation.Nullable
  public Integer getCoreCount() {
    return coreCount;
  }

  public void setCoreCount(Integer coreCount) {
    this.coreCount = coreCount;
  }


  public DataFlowDebugSessionInfo dataFlowName(String dataFlowName) {
    this.dataFlowName = dataFlowName;
    return this;
  }

  /**
   * The name of the data flow.
   * @return dataFlowName
   */
  @javax.annotation.Nullable
  public String getDataFlowName() {
    return dataFlowName;
  }

  public void setDataFlowName(String dataFlowName) {
    this.dataFlowName = dataFlowName;
  }


  public DataFlowDebugSessionInfo integrationRuntimeName(String integrationRuntimeName) {
    this.integrationRuntimeName = integrationRuntimeName;
    return this;
  }

  /**
   * Attached integration runtime name of data flow debug session.
   * @return integrationRuntimeName
   */
  @javax.annotation.Nullable
  public String getIntegrationRuntimeName() {
    return integrationRuntimeName;
  }

  public void setIntegrationRuntimeName(String integrationRuntimeName) {
    this.integrationRuntimeName = integrationRuntimeName;
  }


  public DataFlowDebugSessionInfo lastActivityTime(String lastActivityTime) {
    this.lastActivityTime = lastActivityTime;
    return this;
  }

  /**
   * Last activity time of data flow debug session.
   * @return lastActivityTime
   */
  @javax.annotation.Nullable
  public String getLastActivityTime() {
    return lastActivityTime;
  }

  public void setLastActivityTime(String lastActivityTime) {
    this.lastActivityTime = lastActivityTime;
  }


  public DataFlowDebugSessionInfo nodeCount(Integer nodeCount) {
    this.nodeCount = nodeCount;
    return this;
  }

  /**
   * Node count of the cluster. (deprecated property)
   * @return nodeCount
   */
  @javax.annotation.Nullable
  public Integer getNodeCount() {
    return nodeCount;
  }

  public void setNodeCount(Integer nodeCount) {
    this.nodeCount = nodeCount;
  }


  public DataFlowDebugSessionInfo sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * The ID of data flow debug session.
   * @return sessionId
   */
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }


  public DataFlowDebugSessionInfo startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Start time of data flow debug session.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public DataFlowDebugSessionInfo timeToLiveInMinutes(Integer timeToLiveInMinutes) {
    this.timeToLiveInMinutes = timeToLiveInMinutes;
    return this;
  }

  /**
   * Compute type of the cluster.
   * @return timeToLiveInMinutes
   */
  @javax.annotation.Nullable
  public Integer getTimeToLiveInMinutes() {
    return timeToLiveInMinutes;
  }

  public void setTimeToLiveInMinutes(Integer timeToLiveInMinutes) {
    this.timeToLiveInMinutes = timeToLiveInMinutes;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DataFlowDebugSessionInfo instance itself
   */
  public DataFlowDebugSessionInfo putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataFlowDebugSessionInfo dataFlowDebugSessionInfo = (DataFlowDebugSessionInfo) o;
    return Objects.equals(this.computeType, dataFlowDebugSessionInfo.computeType) &&
        Objects.equals(this.coreCount, dataFlowDebugSessionInfo.coreCount) &&
        Objects.equals(this.dataFlowName, dataFlowDebugSessionInfo.dataFlowName) &&
        Objects.equals(this.integrationRuntimeName, dataFlowDebugSessionInfo.integrationRuntimeName) &&
        Objects.equals(this.lastActivityTime, dataFlowDebugSessionInfo.lastActivityTime) &&
        Objects.equals(this.nodeCount, dataFlowDebugSessionInfo.nodeCount) &&
        Objects.equals(this.sessionId, dataFlowDebugSessionInfo.sessionId) &&
        Objects.equals(this.startTime, dataFlowDebugSessionInfo.startTime) &&
        Objects.equals(this.timeToLiveInMinutes, dataFlowDebugSessionInfo.timeToLiveInMinutes)&&
        Objects.equals(this.additionalProperties, dataFlowDebugSessionInfo.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(computeType, coreCount, dataFlowName, integrationRuntimeName, lastActivityTime, nodeCount, sessionId, startTime, timeToLiveInMinutes, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataFlowDebugSessionInfo {\n");
    sb.append("    computeType: ").append(toIndentedString(computeType)).append("\n");
    sb.append("    coreCount: ").append(toIndentedString(coreCount)).append("\n");
    sb.append("    dataFlowName: ").append(toIndentedString(dataFlowName)).append("\n");
    sb.append("    integrationRuntimeName: ").append(toIndentedString(integrationRuntimeName)).append("\n");
    sb.append("    lastActivityTime: ").append(toIndentedString(lastActivityTime)).append("\n");
    sb.append("    nodeCount: ").append(toIndentedString(nodeCount)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    timeToLiveInMinutes: ").append(toIndentedString(timeToLiveInMinutes)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("computeType");
    openapiFields.add("coreCount");
    openapiFields.add("dataFlowName");
    openapiFields.add("integrationRuntimeName");
    openapiFields.add("lastActivityTime");
    openapiFields.add("nodeCount");
    openapiFields.add("sessionId");
    openapiFields.add("startTime");
    openapiFields.add("timeToLiveInMinutes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataFlowDebugSessionInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataFlowDebugSessionInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataFlowDebugSessionInfo is not found in the empty JSON string", DataFlowDebugSessionInfo.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("computeType") != null && !jsonObj.get("computeType").isJsonNull()) && !jsonObj.get("computeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `computeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("computeType").toString()));
      }
      if ((jsonObj.get("dataFlowName") != null && !jsonObj.get("dataFlowName").isJsonNull()) && !jsonObj.get("dataFlowName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataFlowName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataFlowName").toString()));
      }
      if ((jsonObj.get("integrationRuntimeName") != null && !jsonObj.get("integrationRuntimeName").isJsonNull()) && !jsonObj.get("integrationRuntimeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `integrationRuntimeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("integrationRuntimeName").toString()));
      }
      if ((jsonObj.get("lastActivityTime") != null && !jsonObj.get("lastActivityTime").isJsonNull()) && !jsonObj.get("lastActivityTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastActivityTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastActivityTime").toString()));
      }
      if ((jsonObj.get("sessionId") != null && !jsonObj.get("sessionId").isJsonNull()) && !jsonObj.get("sessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionId").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataFlowDebugSessionInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataFlowDebugSessionInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataFlowDebugSessionInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataFlowDebugSessionInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<DataFlowDebugSessionInfo>() {
           @Override
           public void write(JsonWriter out, DataFlowDebugSessionInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DataFlowDebugSessionInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             DataFlowDebugSessionInfo instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataFlowDebugSessionInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataFlowDebugSessionInfo
   * @throws IOException if the JSON string is invalid with respect to DataFlowDebugSessionInfo
   */
  public static DataFlowDebugSessionInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataFlowDebugSessionInfo.class);
  }

  /**
   * Convert an instance of DataFlowDebugSessionInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

