/*
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Update integration runtime request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:51:48.649367-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateIntegrationRuntimeRequest {
  /**
   * The state of integration runtime auto update.
   */
  @JsonAdapter(AutoUpdateEnum.Adapter.class)
  public enum AutoUpdateEnum {
    ON("On"),
    
    OFF("Off");

    private String value;

    AutoUpdateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AutoUpdateEnum fromValue(String value) {
      for (AutoUpdateEnum b : AutoUpdateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AutoUpdateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AutoUpdateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AutoUpdateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AutoUpdateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AutoUpdateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTO_UPDATE = "autoUpdate";
  @SerializedName(SERIALIZED_NAME_AUTO_UPDATE)
  private AutoUpdateEnum autoUpdate;

  public static final String SERIALIZED_NAME_UPDATE_DELAY_OFFSET = "updateDelayOffset";
  @SerializedName(SERIALIZED_NAME_UPDATE_DELAY_OFFSET)
  private String updateDelayOffset;

  public UpdateIntegrationRuntimeRequest() {
  }

  public UpdateIntegrationRuntimeRequest autoUpdate(AutoUpdateEnum autoUpdate) {
    this.autoUpdate = autoUpdate;
    return this;
  }

  /**
   * The state of integration runtime auto update.
   * @return autoUpdate
   */
  @javax.annotation.Nullable
  public AutoUpdateEnum getAutoUpdate() {
    return autoUpdate;
  }

  public void setAutoUpdate(AutoUpdateEnum autoUpdate) {
    this.autoUpdate = autoUpdate;
  }


  public UpdateIntegrationRuntimeRequest updateDelayOffset(String updateDelayOffset) {
    this.updateDelayOffset = updateDelayOffset;
    return this;
  }

  /**
   * The time offset (in hours) in the day, e.g., PT03H is 3 hours. The integration runtime auto update will happen on that time.
   * @return updateDelayOffset
   */
  @javax.annotation.Nullable
  public String getUpdateDelayOffset() {
    return updateDelayOffset;
  }

  public void setUpdateDelayOffset(String updateDelayOffset) {
    this.updateDelayOffset = updateDelayOffset;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateIntegrationRuntimeRequest updateIntegrationRuntimeRequest = (UpdateIntegrationRuntimeRequest) o;
    return Objects.equals(this.autoUpdate, updateIntegrationRuntimeRequest.autoUpdate) &&
        Objects.equals(this.updateDelayOffset, updateIntegrationRuntimeRequest.updateDelayOffset);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoUpdate, updateDelayOffset);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateIntegrationRuntimeRequest {\n");
    sb.append("    autoUpdate: ").append(toIndentedString(autoUpdate)).append("\n");
    sb.append("    updateDelayOffset: ").append(toIndentedString(updateDelayOffset)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoUpdate");
    openapiFields.add("updateDelayOffset");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateIntegrationRuntimeRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateIntegrationRuntimeRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateIntegrationRuntimeRequest is not found in the empty JSON string", UpdateIntegrationRuntimeRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateIntegrationRuntimeRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateIntegrationRuntimeRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("autoUpdate") != null && !jsonObj.get("autoUpdate").isJsonNull()) && !jsonObj.get("autoUpdate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoUpdate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoUpdate").toString()));
      }
      // validate the optional field `autoUpdate`
      if (jsonObj.get("autoUpdate") != null && !jsonObj.get("autoUpdate").isJsonNull()) {
        AutoUpdateEnum.validateJsonElement(jsonObj.get("autoUpdate"));
      }
      if ((jsonObj.get("updateDelayOffset") != null && !jsonObj.get("updateDelayOffset").isJsonNull()) && !jsonObj.get("updateDelayOffset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateDelayOffset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateDelayOffset").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateIntegrationRuntimeRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateIntegrationRuntimeRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateIntegrationRuntimeRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateIntegrationRuntimeRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateIntegrationRuntimeRequest>() {
           @Override
           public void write(JsonWriter out, UpdateIntegrationRuntimeRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateIntegrationRuntimeRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateIntegrationRuntimeRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateIntegrationRuntimeRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateIntegrationRuntimeRequest
   */
  public static UpdateIntegrationRuntimeRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateIntegrationRuntimeRequest.class);
  }

  /**
   * Convert an instance of UpdateIntegrationRuntimeRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

