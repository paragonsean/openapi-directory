/*
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.CreateRunResponse;
import org.openapitools.client.model.PipelineListResponse;
import org.openapitools.client.model.PipelineResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PipelinesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PipelinesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PipelinesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for pipelinesCreateOrUpdate
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param pipelineName The pipeline name. (required)
     * @param apiVersion The API version. (required)
     * @param pipeline Pipeline resource definition. (required)
     * @param ifMatch ETag of the pipeline entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pipelinesCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String factoryName, String pipelineName, String apiVersion, PipelineResource pipeline, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pipeline;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "pipelineName" + "}", localVarApiClient.escapeString(pipelineName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pipelinesCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String pipelineName, String apiVersion, PipelineResource pipeline, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling pipelinesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling pipelinesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling pipelinesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'pipelineName' is set
        if (pipelineName == null) {
            throw new ApiException("Missing the required parameter 'pipelineName' when calling pipelinesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling pipelinesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'pipeline' is set
        if (pipeline == null) {
            throw new ApiException("Missing the required parameter 'pipeline' when calling pipelinesCreateOrUpdate(Async)");
        }

        return pipelinesCreateOrUpdateCall(subscriptionId, resourceGroupName, factoryName, pipelineName, apiVersion, pipeline, ifMatch, _callback);

    }

    /**
     * 
     * Creates or updates a pipeline.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param pipelineName The pipeline name. (required)
     * @param apiVersion The API version. (required)
     * @param pipeline Pipeline resource definition. (required)
     * @param ifMatch ETag of the pipeline entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update. (optional)
     * @return PipelineResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public PipelineResource pipelinesCreateOrUpdate(String subscriptionId, String resourceGroupName, String factoryName, String pipelineName, String apiVersion, PipelineResource pipeline, String ifMatch) throws ApiException {
        ApiResponse<PipelineResource> localVarResp = pipelinesCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, factoryName, pipelineName, apiVersion, pipeline, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a pipeline.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param pipelineName The pipeline name. (required)
     * @param apiVersion The API version. (required)
     * @param pipeline Pipeline resource definition. (required)
     * @param ifMatch ETag of the pipeline entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update. (optional)
     * @return ApiResponse&lt;PipelineResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineResource> pipelinesCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String pipelineName, String apiVersion, PipelineResource pipeline, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = pipelinesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, pipelineName, apiVersion, pipeline, ifMatch, null);
        Type localVarReturnType = new TypeToken<PipelineResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a pipeline.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param pipelineName The pipeline name. (required)
     * @param apiVersion The API version. (required)
     * @param pipeline Pipeline resource definition. (required)
     * @param ifMatch ETag of the pipeline entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pipelinesCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String factoryName, String pipelineName, String apiVersion, PipelineResource pipeline, String ifMatch, final ApiCallback<PipelineResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = pipelinesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, pipelineName, apiVersion, pipeline, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<PipelineResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pipelinesCreateRun
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param pipelineName The pipeline name. (required)
     * @param apiVersion The API version. (required)
     * @param referencePipelineRunId The pipeline run identifier. If run ID is specified the parameters of the specified run will be used to create a new run. (optional)
     * @param isRecovery Recovery mode flag. If recovery mode is set to true, the specified referenced pipeline run and the new run will be grouped under the same groupId. (optional)
     * @param startActivityName In recovery mode, the rerun will start from this activity. If not specified, all activities will run. (optional)
     * @param parameters Parameters of the pipeline run. These parameters will be used only if the runId is not specified. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pipelinesCreateRunCall(String subscriptionId, String resourceGroupName, String factoryName, String pipelineName, String apiVersion, String referencePipelineRunId, Boolean isRecovery, String startActivityName, Map<String, Object> parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}/createRun"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "pipelineName" + "}", localVarApiClient.escapeString(pipelineName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (referencePipelineRunId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("referencePipelineRunId", referencePipelineRunId));
        }

        if (isRecovery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isRecovery", isRecovery));
        }

        if (startActivityName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startActivityName", startActivityName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pipelinesCreateRunValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String pipelineName, String apiVersion, String referencePipelineRunId, Boolean isRecovery, String startActivityName, Map<String, Object> parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling pipelinesCreateRun(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling pipelinesCreateRun(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling pipelinesCreateRun(Async)");
        }

        // verify the required parameter 'pipelineName' is set
        if (pipelineName == null) {
            throw new ApiException("Missing the required parameter 'pipelineName' when calling pipelinesCreateRun(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling pipelinesCreateRun(Async)");
        }

        return pipelinesCreateRunCall(subscriptionId, resourceGroupName, factoryName, pipelineName, apiVersion, referencePipelineRunId, isRecovery, startActivityName, parameters, _callback);

    }

    /**
     * 
     * Creates a run of a pipeline.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param pipelineName The pipeline name. (required)
     * @param apiVersion The API version. (required)
     * @param referencePipelineRunId The pipeline run identifier. If run ID is specified the parameters of the specified run will be used to create a new run. (optional)
     * @param isRecovery Recovery mode flag. If recovery mode is set to true, the specified referenced pipeline run and the new run will be grouped under the same groupId. (optional)
     * @param startActivityName In recovery mode, the rerun will start from this activity. If not specified, all activities will run. (optional)
     * @param parameters Parameters of the pipeline run. These parameters will be used only if the runId is not specified. (optional)
     * @return CreateRunResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public CreateRunResponse pipelinesCreateRun(String subscriptionId, String resourceGroupName, String factoryName, String pipelineName, String apiVersion, String referencePipelineRunId, Boolean isRecovery, String startActivityName, Map<String, Object> parameters) throws ApiException {
        ApiResponse<CreateRunResponse> localVarResp = pipelinesCreateRunWithHttpInfo(subscriptionId, resourceGroupName, factoryName, pipelineName, apiVersion, referencePipelineRunId, isRecovery, startActivityName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a run of a pipeline.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param pipelineName The pipeline name. (required)
     * @param apiVersion The API version. (required)
     * @param referencePipelineRunId The pipeline run identifier. If run ID is specified the parameters of the specified run will be used to create a new run. (optional)
     * @param isRecovery Recovery mode flag. If recovery mode is set to true, the specified referenced pipeline run and the new run will be grouped under the same groupId. (optional)
     * @param startActivityName In recovery mode, the rerun will start from this activity. If not specified, all activities will run. (optional)
     * @param parameters Parameters of the pipeline run. These parameters will be used only if the runId is not specified. (optional)
     * @return ApiResponse&lt;CreateRunResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateRunResponse> pipelinesCreateRunWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String pipelineName, String apiVersion, String referencePipelineRunId, Boolean isRecovery, String startActivityName, Map<String, Object> parameters) throws ApiException {
        okhttp3.Call localVarCall = pipelinesCreateRunValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, pipelineName, apiVersion, referencePipelineRunId, isRecovery, startActivityName, parameters, null);
        Type localVarReturnType = new TypeToken<CreateRunResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a run of a pipeline.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param pipelineName The pipeline name. (required)
     * @param apiVersion The API version. (required)
     * @param referencePipelineRunId The pipeline run identifier. If run ID is specified the parameters of the specified run will be used to create a new run. (optional)
     * @param isRecovery Recovery mode flag. If recovery mode is set to true, the specified referenced pipeline run and the new run will be grouped under the same groupId. (optional)
     * @param startActivityName In recovery mode, the rerun will start from this activity. If not specified, all activities will run. (optional)
     * @param parameters Parameters of the pipeline run. These parameters will be used only if the runId is not specified. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pipelinesCreateRunAsync(String subscriptionId, String resourceGroupName, String factoryName, String pipelineName, String apiVersion, String referencePipelineRunId, Boolean isRecovery, String startActivityName, Map<String, Object> parameters, final ApiCallback<CreateRunResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pipelinesCreateRunValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, pipelineName, apiVersion, referencePipelineRunId, isRecovery, startActivityName, parameters, _callback);
        Type localVarReturnType = new TypeToken<CreateRunResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pipelinesDelete
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param pipelineName The pipeline name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pipelinesDeleteCall(String subscriptionId, String resourceGroupName, String factoryName, String pipelineName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "pipelineName" + "}", localVarApiClient.escapeString(pipelineName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pipelinesDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String pipelineName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling pipelinesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling pipelinesDelete(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling pipelinesDelete(Async)");
        }

        // verify the required parameter 'pipelineName' is set
        if (pipelineName == null) {
            throw new ApiException("Missing the required parameter 'pipelineName' when calling pipelinesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling pipelinesDelete(Async)");
        }

        return pipelinesDeleteCall(subscriptionId, resourceGroupName, factoryName, pipelineName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a pipeline.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param pipelineName The pipeline name. (required)
     * @param apiVersion The API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public void pipelinesDelete(String subscriptionId, String resourceGroupName, String factoryName, String pipelineName, String apiVersion) throws ApiException {
        pipelinesDeleteWithHttpInfo(subscriptionId, resourceGroupName, factoryName, pipelineName, apiVersion);
    }

    /**
     * 
     * Deletes a pipeline.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param pipelineName The pipeline name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pipelinesDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String pipelineName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = pipelinesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, pipelineName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a pipeline.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param pipelineName The pipeline name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pipelinesDeleteAsync(String subscriptionId, String resourceGroupName, String factoryName, String pipelineName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pipelinesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, pipelineName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pipelinesGet
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param pipelineName The pipeline name. (required)
     * @param apiVersion The API version. (required)
     * @param ifNoneMatch ETag of the pipeline entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pipelinesGetCall(String subscriptionId, String resourceGroupName, String factoryName, String pipelineName, String apiVersion, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()))
            .replace("{" + "pipelineName" + "}", localVarApiClient.escapeString(pipelineName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pipelinesGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String pipelineName, String apiVersion, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling pipelinesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling pipelinesGet(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling pipelinesGet(Async)");
        }

        // verify the required parameter 'pipelineName' is set
        if (pipelineName == null) {
            throw new ApiException("Missing the required parameter 'pipelineName' when calling pipelinesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling pipelinesGet(Async)");
        }

        return pipelinesGetCall(subscriptionId, resourceGroupName, factoryName, pipelineName, apiVersion, ifNoneMatch, _callback);

    }

    /**
     * 
     * Gets a pipeline.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param pipelineName The pipeline name. (required)
     * @param apiVersion The API version. (required)
     * @param ifNoneMatch ETag of the pipeline entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. (optional)
     * @return PipelineResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public PipelineResource pipelinesGet(String subscriptionId, String resourceGroupName, String factoryName, String pipelineName, String apiVersion, String ifNoneMatch) throws ApiException {
        ApiResponse<PipelineResource> localVarResp = pipelinesGetWithHttpInfo(subscriptionId, resourceGroupName, factoryName, pipelineName, apiVersion, ifNoneMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a pipeline.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param pipelineName The pipeline name. (required)
     * @param apiVersion The API version. (required)
     * @param ifNoneMatch ETag of the pipeline entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. (optional)
     * @return ApiResponse&lt;PipelineResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineResource> pipelinesGetWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String pipelineName, String apiVersion, String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = pipelinesGetValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, pipelineName, apiVersion, ifNoneMatch, null);
        Type localVarReturnType = new TypeToken<PipelineResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a pipeline.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param pipelineName The pipeline name. (required)
     * @param apiVersion The API version. (required)
     * @param ifNoneMatch ETag of the pipeline entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pipelinesGetAsync(String subscriptionId, String resourceGroupName, String factoryName, String pipelineName, String apiVersion, String ifNoneMatch, final ApiCallback<PipelineResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = pipelinesGetValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, pipelineName, apiVersion, ifNoneMatch, _callback);
        Type localVarReturnType = new TypeToken<PipelineResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pipelinesListByFactory
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pipelinesListByFactoryCall(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "factoryName" + "}", localVarApiClient.escapeString(factoryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pipelinesListByFactoryValidateBeforeCall(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling pipelinesListByFactory(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling pipelinesListByFactory(Async)");
        }

        // verify the required parameter 'factoryName' is set
        if (factoryName == null) {
            throw new ApiException("Missing the required parameter 'factoryName' when calling pipelinesListByFactory(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling pipelinesListByFactory(Async)");
        }

        return pipelinesListByFactoryCall(subscriptionId, resourceGroupName, factoryName, apiVersion, _callback);

    }

    /**
     * 
     * Lists pipelines.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @return PipelineListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public PipelineListResponse pipelinesListByFactory(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion) throws ApiException {
        ApiResponse<PipelineListResponse> localVarResp = pipelinesListByFactoryWithHttpInfo(subscriptionId, resourceGroupName, factoryName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists pipelines.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;PipelineListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineListResponse> pipelinesListByFactoryWithHttpInfo(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = pipelinesListByFactoryValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, apiVersion, null);
        Type localVarReturnType = new TypeToken<PipelineListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists pipelines.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param factoryName The factory name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Azure Data Factory service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pipelinesListByFactoryAsync(String subscriptionId, String resourceGroupName, String factoryName, String apiVersion, final ApiCallback<PipelineListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pipelinesListByFactoryValidateBeforeCall(subscriptionId, resourceGroupName, factoryName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PipelineListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
