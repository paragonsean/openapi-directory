/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateDataFlowDebugSessionRequest.h
 *
 * Request body structure for creating data flow debug session.
 */

#ifndef OAICreateDataFlowDebugSessionRequest_H
#define OAICreateDataFlowDebugSessionRequest_H

#include <QJsonObject>

#include "OAIIntegrationRuntimeDebugResource.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIIntegrationRuntimeDebugResource;

class OAICreateDataFlowDebugSessionRequest : public OAIObject {
public:
    OAICreateDataFlowDebugSessionRequest();
    OAICreateDataFlowDebugSessionRequest(QString json);
    ~OAICreateDataFlowDebugSessionRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getComputeType() const;
    void setComputeType(const QString &compute_type);
    bool is_compute_type_Set() const;
    bool is_compute_type_Valid() const;

    qint32 getCoreCount() const;
    void setCoreCount(const qint32 &core_count);
    bool is_core_count_Set() const;
    bool is_core_count_Valid() const;

    OAIIntegrationRuntimeDebugResource getIntegrationRuntime() const;
    void setIntegrationRuntime(const OAIIntegrationRuntimeDebugResource &integration_runtime);
    bool is_integration_runtime_Set() const;
    bool is_integration_runtime_Valid() const;

    qint32 getTimeToLive() const;
    void setTimeToLive(const qint32 &time_to_live);
    bool is_time_to_live_Set() const;
    bool is_time_to_live_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_compute_type;
    bool m_compute_type_isSet;
    bool m_compute_type_isValid;

    qint32 m_core_count;
    bool m_core_count_isSet;
    bool m_core_count_isValid;

    OAIIntegrationRuntimeDebugResource m_integration_runtime;
    bool m_integration_runtime_isSet;
    bool m_integration_runtime_isValid;

    qint32 m_time_to_live;
    bool m_time_to_live_isSet;
    bool m_time_to_live_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateDataFlowDebugSessionRequest)

#endif // OAICreateDataFlowDebugSessionRequest_H
