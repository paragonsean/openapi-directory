/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataFlowDebugCommandPayload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataFlowDebugCommandPayload::OAIDataFlowDebugCommandPayload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataFlowDebugCommandPayload::OAIDataFlowDebugCommandPayload() {
    this->initializeModel();
}

OAIDataFlowDebugCommandPayload::~OAIDataFlowDebugCommandPayload() {}

void OAIDataFlowDebugCommandPayload::initializeModel() {

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_row_limits_isSet = false;
    m_row_limits_isValid = false;

    m_stream_name_isSet = false;
    m_stream_name_isValid = false;
}

void OAIDataFlowDebugCommandPayload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataFlowDebugCommandPayload::fromJsonObject(QJsonObject json) {

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("expression")]);
    m_expression_isSet = !json[QString("expression")].isNull() && m_expression_isValid;

    m_row_limits_isValid = ::OpenAPI::fromJsonValue(m_row_limits, json[QString("rowLimits")]);
    m_row_limits_isSet = !json[QString("rowLimits")].isNull() && m_row_limits_isValid;

    m_stream_name_isValid = ::OpenAPI::fromJsonValue(m_stream_name, json[QString("streamName")]);
    m_stream_name_isSet = !json[QString("streamName")].isNull() && m_stream_name_isValid;
}

QString OAIDataFlowDebugCommandPayload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataFlowDebugCommandPayload::asJsonObject() const {
    QJsonObject obj;
    if (m_columns.size() > 0) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_expression_isSet) {
        obj.insert(QString("expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_row_limits_isSet) {
        obj.insert(QString("rowLimits"), ::OpenAPI::toJsonValue(m_row_limits));
    }
    if (m_stream_name_isSet) {
        obj.insert(QString("streamName"), ::OpenAPI::toJsonValue(m_stream_name));
    }
    return obj;
}

QList<QString> OAIDataFlowDebugCommandPayload::getColumns() const {
    return m_columns;
}
void OAIDataFlowDebugCommandPayload::setColumns(const QList<QString> &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIDataFlowDebugCommandPayload::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIDataFlowDebugCommandPayload::is_columns_Valid() const{
    return m_columns_isValid;
}

QString OAIDataFlowDebugCommandPayload::getExpression() const {
    return m_expression;
}
void OAIDataFlowDebugCommandPayload::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIDataFlowDebugCommandPayload::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIDataFlowDebugCommandPayload::is_expression_Valid() const{
    return m_expression_isValid;
}

qint32 OAIDataFlowDebugCommandPayload::getRowLimits() const {
    return m_row_limits;
}
void OAIDataFlowDebugCommandPayload::setRowLimits(const qint32 &row_limits) {
    m_row_limits = row_limits;
    m_row_limits_isSet = true;
}

bool OAIDataFlowDebugCommandPayload::is_row_limits_Set() const{
    return m_row_limits_isSet;
}

bool OAIDataFlowDebugCommandPayload::is_row_limits_Valid() const{
    return m_row_limits_isValid;
}

QString OAIDataFlowDebugCommandPayload::getStreamName() const {
    return m_stream_name;
}
void OAIDataFlowDebugCommandPayload::setStreamName(const QString &stream_name) {
    m_stream_name = stream_name;
    m_stream_name_isSet = true;
}

bool OAIDataFlowDebugCommandPayload::is_stream_name_Set() const{
    return m_stream_name_isSet;
}

bool OAIDataFlowDebugCommandPayload::is_stream_name_Valid() const{
    return m_stream_name_isValid;
}

bool OAIDataFlowDebugCommandPayload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_limits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataFlowDebugCommandPayload::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stream_name_isValid && true;
}

} // namespace OpenAPI
