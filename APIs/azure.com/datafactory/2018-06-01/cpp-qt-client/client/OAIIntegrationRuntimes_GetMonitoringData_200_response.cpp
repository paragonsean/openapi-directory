/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntegrationRuntimes_GetMonitoringData_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntegrationRuntimes_GetMonitoringData_200_response::OAIIntegrationRuntimes_GetMonitoringData_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntegrationRuntimes_GetMonitoringData_200_response::OAIIntegrationRuntimes_GetMonitoringData_200_response() {
    this->initializeModel();
}

OAIIntegrationRuntimes_GetMonitoringData_200_response::~OAIIntegrationRuntimes_GetMonitoringData_200_response() {}

void OAIIntegrationRuntimes_GetMonitoringData_200_response::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_nodes_isSet = false;
    m_nodes_isValid = false;
}

void OAIIntegrationRuntimes_GetMonitoringData_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntegrationRuntimes_GetMonitoringData_200_response::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    if(json["nodes"].isArray()){
        auto arr = json["nodes"].toArray();
        m_nodes_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QMap<QString, OAIObject> item;
                m_nodes_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_nodes_isSet = !jval.isNull() && m_nodes_isValid;
                m_nodes.push_back(item);
            }
        }
    }
}

QString OAIIntegrationRuntimes_GetMonitoringData_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntegrationRuntimes_GetMonitoringData_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nodes.size() > 0) {
        
        obj.insert(QString("nodes"), toJsonValue(m_nodes));
    }
    return obj;
}

QString OAIIntegrationRuntimes_GetMonitoringData_200_response::getName() const {
    return m_name;
}
void OAIIntegrationRuntimes_GetMonitoringData_200_response::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIntegrationRuntimes_GetMonitoringData_200_response::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIntegrationRuntimes_GetMonitoringData_200_response::is_name_Valid() const{
    return m_name_isValid;
}

QList<QMap<QString, OAIObject>> OAIIntegrationRuntimes_GetMonitoringData_200_response::getNodes() const {
    return m_nodes;
}
void OAIIntegrationRuntimes_GetMonitoringData_200_response::setNodes(const QList<QMap<QString, OAIObject>> &nodes) {
    m_nodes = nodes;
    m_nodes_isSet = true;
}

bool OAIIntegrationRuntimes_GetMonitoringData_200_response::is_nodes_Set() const{
    return m_nodes_isSet;
}

bool OAIIntegrationRuntimes_GetMonitoringData_200_response::is_nodes_Valid() const{
    return m_nodes_isValid;
}

bool OAIIntegrationRuntimes_GetMonitoringData_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntegrationRuntimes_GetMonitoringData_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
