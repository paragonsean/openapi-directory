/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFactoriesApi_H
#define OAI_OAIFactoriesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccessPolicyResponse.h"
#include "OAICloudError.h"
#include "OAIFactory.h"
#include "OAIFactoryListResponse.h"
#include "OAIFactoryRepoUpdate.h"
#include "OAIFactoryUpdateParameters.h"
#include "OAIGitHubAccessTokenRequest.h"
#include "OAIGitHubAccessTokenResponse.h"
#include "OAIUserAccessPolicy.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFactoriesApi : public QObject {
    Q_OBJECT

public:
    OAIFactoriesApi(const int timeOut = 0);
    ~OAIFactoriesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  location_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  factory_repo_update OAIFactoryRepoUpdate [required]
    */
    virtual void factoriesConfigureFactoryRepo(const QString &subscription_id, const QString &location_id, const QString &api_version, const OAIFactoryRepoUpdate &factory_repo_update);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  factory OAIFactory [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void factoriesCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &api_version, const OAIFactory &factory, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void factoriesDelete(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void factoriesGet(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  policy OAIUserAccessPolicy [required]
    */
    virtual void factoriesGetDataPlaneAccess(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &api_version, const OAIUserAccessPolicy &policy);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  git_hub_access_token_request OAIGitHubAccessTokenRequest [required]
    */
    virtual void factoriesGetGitHubAccessToken(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &api_version, const OAIGitHubAccessTokenRequest &git_hub_access_token_request);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void factoriesList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void factoriesListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  factory_update_parameters OAIFactoryUpdateParameters [required]
    */
    virtual void factoriesUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &api_version, const OAIFactoryUpdateParameters &factory_update_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void factoriesConfigureFactoryRepoCallback(OAIHttpRequestWorker *worker);
    void factoriesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void factoriesDeleteCallback(OAIHttpRequestWorker *worker);
    void factoriesGetCallback(OAIHttpRequestWorker *worker);
    void factoriesGetDataPlaneAccessCallback(OAIHttpRequestWorker *worker);
    void factoriesGetGitHubAccessTokenCallback(OAIHttpRequestWorker *worker);
    void factoriesListCallback(OAIHttpRequestWorker *worker);
    void factoriesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void factoriesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void factoriesConfigureFactoryRepoSignal(OAIFactory summary);
    void factoriesCreateOrUpdateSignal(OAIFactory summary);
    void factoriesDeleteSignal();
    void factoriesGetSignal(OAIFactory summary);
    void factoriesGetDataPlaneAccessSignal(OAIAccessPolicyResponse summary);
    void factoriesGetGitHubAccessTokenSignal(OAIGitHubAccessTokenResponse summary);
    void factoriesListSignal(OAIFactoryListResponse summary);
    void factoriesListByResourceGroupSignal(OAIFactoryListResponse summary);
    void factoriesUpdateSignal(OAIFactory summary);


    void factoriesConfigureFactoryRepoSignalFull(OAIHttpRequestWorker *worker, OAIFactory summary);
    void factoriesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIFactory summary);
    void factoriesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void factoriesGetSignalFull(OAIHttpRequestWorker *worker, OAIFactory summary);
    void factoriesGetDataPlaneAccessSignalFull(OAIHttpRequestWorker *worker, OAIAccessPolicyResponse summary);
    void factoriesGetGitHubAccessTokenSignalFull(OAIHttpRequestWorker *worker, OAIGitHubAccessTokenResponse summary);
    void factoriesListSignalFull(OAIHttpRequestWorker *worker, OAIFactoryListResponse summary);
    void factoriesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIFactoryListResponse summary);
    void factoriesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIFactory summary);

    Q_DECL_DEPRECATED_X("Use factoriesConfigureFactoryRepoSignalError() instead")
    void factoriesConfigureFactoryRepoSignalE(OAIFactory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void factoriesConfigureFactoryRepoSignalError(OAIFactory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factoriesCreateOrUpdateSignalError() instead")
    void factoriesCreateOrUpdateSignalE(OAIFactory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void factoriesCreateOrUpdateSignalError(OAIFactory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factoriesDeleteSignalError() instead")
    void factoriesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void factoriesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factoriesGetSignalError() instead")
    void factoriesGetSignalE(OAIFactory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void factoriesGetSignalError(OAIFactory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factoriesGetDataPlaneAccessSignalError() instead")
    void factoriesGetDataPlaneAccessSignalE(OAIAccessPolicyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void factoriesGetDataPlaneAccessSignalError(OAIAccessPolicyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factoriesGetGitHubAccessTokenSignalError() instead")
    void factoriesGetGitHubAccessTokenSignalE(OAIGitHubAccessTokenResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void factoriesGetGitHubAccessTokenSignalError(OAIGitHubAccessTokenResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factoriesListSignalError() instead")
    void factoriesListSignalE(OAIFactoryListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void factoriesListSignalError(OAIFactoryListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factoriesListByResourceGroupSignalError() instead")
    void factoriesListByResourceGroupSignalE(OAIFactoryListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void factoriesListByResourceGroupSignalError(OAIFactoryListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factoriesUpdateSignalError() instead")
    void factoriesUpdateSignalE(OAIFactory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void factoriesUpdateSignalError(OAIFactory summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use factoriesConfigureFactoryRepoSignalErrorFull() instead")
    void factoriesConfigureFactoryRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void factoriesConfigureFactoryRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factoriesCreateOrUpdateSignalErrorFull() instead")
    void factoriesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void factoriesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factoriesDeleteSignalErrorFull() instead")
    void factoriesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void factoriesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factoriesGetSignalErrorFull() instead")
    void factoriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void factoriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factoriesGetDataPlaneAccessSignalErrorFull() instead")
    void factoriesGetDataPlaneAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void factoriesGetDataPlaneAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factoriesGetGitHubAccessTokenSignalErrorFull() instead")
    void factoriesGetGitHubAccessTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void factoriesGetGitHubAccessTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factoriesListSignalErrorFull() instead")
    void factoriesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void factoriesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factoriesListByResourceGroupSignalErrorFull() instead")
    void factoriesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void factoriesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use factoriesUpdateSignalErrorFull() instead")
    void factoriesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void factoriesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
