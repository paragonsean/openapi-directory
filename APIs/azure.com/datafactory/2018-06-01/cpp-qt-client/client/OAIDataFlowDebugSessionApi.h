/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDataFlowDebugSessionApi_H
#define OAI_OAIDataFlowDebugSessionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddDataFlowToDebugSessionResponse.h"
#include "OAICloudError.h"
#include "OAICreateDataFlowDebugSessionRequest.h"
#include "OAICreateDataFlowDebugSessionResponse.h"
#include "OAIDataFlowDebugCommandRequest.h"
#include "OAIDataFlowDebugCommandResponse.h"
#include "OAIDataFlowDebugPackage.h"
#include "OAIDeleteDataFlowDebugSessionRequest.h"
#include "OAIQueryDataFlowDebugSessionsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDataFlowDebugSessionApi : public QObject {
    Q_OBJECT

public:
    OAIDataFlowDebugSessionApi(const int timeOut = 0);
    ~OAIDataFlowDebugSessionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAIDataFlowDebugPackage [required]
    */
    virtual void dataFlowDebugSessionAddDataFlow(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &api_version, const OAIDataFlowDebugPackage &request);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAICreateDataFlowDebugSessionRequest [required]
    */
    virtual void dataFlowDebugSessionCreate(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &api_version, const OAICreateDataFlowDebugSessionRequest &request);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAIDeleteDataFlowDebugSessionRequest [required]
    */
    virtual void dataFlowDebugSessionDelete(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &api_version, const OAIDeleteDataFlowDebugSessionRequest &request);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAIDataFlowDebugCommandRequest [required]
    */
    virtual void dataFlowDebugSessionExecuteCommand(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &api_version, const OAIDataFlowDebugCommandRequest &request);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void dataFlowDebugSessionQueryByFactory(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dataFlowDebugSessionAddDataFlowCallback(OAIHttpRequestWorker *worker);
    void dataFlowDebugSessionCreateCallback(OAIHttpRequestWorker *worker);
    void dataFlowDebugSessionDeleteCallback(OAIHttpRequestWorker *worker);
    void dataFlowDebugSessionExecuteCommandCallback(OAIHttpRequestWorker *worker);
    void dataFlowDebugSessionQueryByFactoryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dataFlowDebugSessionAddDataFlowSignal(OAIAddDataFlowToDebugSessionResponse summary);
    void dataFlowDebugSessionCreateSignal(OAICreateDataFlowDebugSessionResponse summary);
    void dataFlowDebugSessionDeleteSignal();
    void dataFlowDebugSessionExecuteCommandSignal(OAIDataFlowDebugCommandResponse summary);
    void dataFlowDebugSessionQueryByFactorySignal(OAIQueryDataFlowDebugSessionsResponse summary);


    void dataFlowDebugSessionAddDataFlowSignalFull(OAIHttpRequestWorker *worker, OAIAddDataFlowToDebugSessionResponse summary);
    void dataFlowDebugSessionCreateSignalFull(OAIHttpRequestWorker *worker, OAICreateDataFlowDebugSessionResponse summary);
    void dataFlowDebugSessionDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dataFlowDebugSessionExecuteCommandSignalFull(OAIHttpRequestWorker *worker, OAIDataFlowDebugCommandResponse summary);
    void dataFlowDebugSessionQueryByFactorySignalFull(OAIHttpRequestWorker *worker, OAIQueryDataFlowDebugSessionsResponse summary);

    Q_DECL_DEPRECATED_X("Use dataFlowDebugSessionAddDataFlowSignalError() instead")
    void dataFlowDebugSessionAddDataFlowSignalE(OAIAddDataFlowToDebugSessionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataFlowDebugSessionAddDataFlowSignalError(OAIAddDataFlowToDebugSessionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataFlowDebugSessionCreateSignalError() instead")
    void dataFlowDebugSessionCreateSignalE(OAICreateDataFlowDebugSessionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataFlowDebugSessionCreateSignalError(OAICreateDataFlowDebugSessionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataFlowDebugSessionDeleteSignalError() instead")
    void dataFlowDebugSessionDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dataFlowDebugSessionDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataFlowDebugSessionExecuteCommandSignalError() instead")
    void dataFlowDebugSessionExecuteCommandSignalE(OAIDataFlowDebugCommandResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataFlowDebugSessionExecuteCommandSignalError(OAIDataFlowDebugCommandResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataFlowDebugSessionQueryByFactorySignalError() instead")
    void dataFlowDebugSessionQueryByFactorySignalE(OAIQueryDataFlowDebugSessionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataFlowDebugSessionQueryByFactorySignalError(OAIQueryDataFlowDebugSessionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dataFlowDebugSessionAddDataFlowSignalErrorFull() instead")
    void dataFlowDebugSessionAddDataFlowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataFlowDebugSessionAddDataFlowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataFlowDebugSessionCreateSignalErrorFull() instead")
    void dataFlowDebugSessionCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataFlowDebugSessionCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataFlowDebugSessionDeleteSignalErrorFull() instead")
    void dataFlowDebugSessionDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataFlowDebugSessionDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataFlowDebugSessionExecuteCommandSignalErrorFull() instead")
    void dataFlowDebugSessionExecuteCommandSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataFlowDebugSessionExecuteCommandSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataFlowDebugSessionQueryByFactorySignalErrorFull() instead")
    void dataFlowDebugSessionQueryByFactorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataFlowDebugSessionQueryByFactorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
