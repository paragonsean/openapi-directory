/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessPolicyResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessPolicyResponse::OAIAccessPolicyResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessPolicyResponse::OAIAccessPolicyResponse() {
    this->initializeModel();
}

OAIAccessPolicyResponse::~OAIAccessPolicyResponse() {}

void OAIAccessPolicyResponse::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_data_plane_url_isSet = false;
    m_data_plane_url_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;
}

void OAIAccessPolicyResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessPolicyResponse::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("accessToken")]);
    m_access_token_isSet = !json[QString("accessToken")].isNull() && m_access_token_isValid;

    m_data_plane_url_isValid = ::OpenAPI::fromJsonValue(m_data_plane_url, json[QString("dataPlaneUrl")]);
    m_data_plane_url_isSet = !json[QString("dataPlaneUrl")].isNull() && m_data_plane_url_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;
}

QString OAIAccessPolicyResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessPolicyResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("accessToken"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_data_plane_url_isSet) {
        obj.insert(QString("dataPlaneUrl"), ::OpenAPI::toJsonValue(m_data_plane_url));
    }
    if (m_policy.isSet()) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    return obj;
}

QString OAIAccessPolicyResponse::getAccessToken() const {
    return m_access_token;
}
void OAIAccessPolicyResponse::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAIAccessPolicyResponse::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAIAccessPolicyResponse::is_access_token_Valid() const{
    return m_access_token_isValid;
}

QString OAIAccessPolicyResponse::getDataPlaneUrl() const {
    return m_data_plane_url;
}
void OAIAccessPolicyResponse::setDataPlaneUrl(const QString &data_plane_url) {
    m_data_plane_url = data_plane_url;
    m_data_plane_url_isSet = true;
}

bool OAIAccessPolicyResponse::is_data_plane_url_Set() const{
    return m_data_plane_url_isSet;
}

bool OAIAccessPolicyResponse::is_data_plane_url_Valid() const{
    return m_data_plane_url_isValid;
}

OAIUserAccessPolicy OAIAccessPolicyResponse::getPolicy() const {
    return m_policy;
}
void OAIAccessPolicyResponse::setPolicy(const OAIUserAccessPolicy &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIAccessPolicyResponse::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIAccessPolicyResponse::is_policy_Valid() const{
    return m_policy_isValid;
}

bool OAIAccessPolicyResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_plane_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessPolicyResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
