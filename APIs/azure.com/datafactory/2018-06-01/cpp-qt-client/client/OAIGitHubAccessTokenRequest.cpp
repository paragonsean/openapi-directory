/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGitHubAccessTokenRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGitHubAccessTokenRequest::OAIGitHubAccessTokenRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGitHubAccessTokenRequest::OAIGitHubAccessTokenRequest() {
    this->initializeModel();
}

OAIGitHubAccessTokenRequest::~OAIGitHubAccessTokenRequest() {}

void OAIGitHubAccessTokenRequest::initializeModel() {

    m_git_hub_access_code_isSet = false;
    m_git_hub_access_code_isValid = false;

    m_git_hub_access_token_base_url_isSet = false;
    m_git_hub_access_token_base_url_isValid = false;

    m_git_hub_client_id_isSet = false;
    m_git_hub_client_id_isValid = false;
}

void OAIGitHubAccessTokenRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGitHubAccessTokenRequest::fromJsonObject(QJsonObject json) {

    m_git_hub_access_code_isValid = ::OpenAPI::fromJsonValue(m_git_hub_access_code, json[QString("gitHubAccessCode")]);
    m_git_hub_access_code_isSet = !json[QString("gitHubAccessCode")].isNull() && m_git_hub_access_code_isValid;

    m_git_hub_access_token_base_url_isValid = ::OpenAPI::fromJsonValue(m_git_hub_access_token_base_url, json[QString("gitHubAccessTokenBaseUrl")]);
    m_git_hub_access_token_base_url_isSet = !json[QString("gitHubAccessTokenBaseUrl")].isNull() && m_git_hub_access_token_base_url_isValid;

    m_git_hub_client_id_isValid = ::OpenAPI::fromJsonValue(m_git_hub_client_id, json[QString("gitHubClientId")]);
    m_git_hub_client_id_isSet = !json[QString("gitHubClientId")].isNull() && m_git_hub_client_id_isValid;
}

QString OAIGitHubAccessTokenRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGitHubAccessTokenRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_git_hub_access_code_isSet) {
        obj.insert(QString("gitHubAccessCode"), ::OpenAPI::toJsonValue(m_git_hub_access_code));
    }
    if (m_git_hub_access_token_base_url_isSet) {
        obj.insert(QString("gitHubAccessTokenBaseUrl"), ::OpenAPI::toJsonValue(m_git_hub_access_token_base_url));
    }
    if (m_git_hub_client_id_isSet) {
        obj.insert(QString("gitHubClientId"), ::OpenAPI::toJsonValue(m_git_hub_client_id));
    }
    return obj;
}

QString OAIGitHubAccessTokenRequest::getGitHubAccessCode() const {
    return m_git_hub_access_code;
}
void OAIGitHubAccessTokenRequest::setGitHubAccessCode(const QString &git_hub_access_code) {
    m_git_hub_access_code = git_hub_access_code;
    m_git_hub_access_code_isSet = true;
}

bool OAIGitHubAccessTokenRequest::is_git_hub_access_code_Set() const{
    return m_git_hub_access_code_isSet;
}

bool OAIGitHubAccessTokenRequest::is_git_hub_access_code_Valid() const{
    return m_git_hub_access_code_isValid;
}

QString OAIGitHubAccessTokenRequest::getGitHubAccessTokenBaseUrl() const {
    return m_git_hub_access_token_base_url;
}
void OAIGitHubAccessTokenRequest::setGitHubAccessTokenBaseUrl(const QString &git_hub_access_token_base_url) {
    m_git_hub_access_token_base_url = git_hub_access_token_base_url;
    m_git_hub_access_token_base_url_isSet = true;
}

bool OAIGitHubAccessTokenRequest::is_git_hub_access_token_base_url_Set() const{
    return m_git_hub_access_token_base_url_isSet;
}

bool OAIGitHubAccessTokenRequest::is_git_hub_access_token_base_url_Valid() const{
    return m_git_hub_access_token_base_url_isValid;
}

QString OAIGitHubAccessTokenRequest::getGitHubClientId() const {
    return m_git_hub_client_id;
}
void OAIGitHubAccessTokenRequest::setGitHubClientId(const QString &git_hub_client_id) {
    m_git_hub_client_id = git_hub_client_id;
    m_git_hub_client_id_isSet = true;
}

bool OAIGitHubAccessTokenRequest::is_git_hub_client_id_Set() const{
    return m_git_hub_client_id_isSet;
}

bool OAIGitHubAccessTokenRequest::is_git_hub_client_id_Valid() const{
    return m_git_hub_client_id_isValid;
}

bool OAIGitHubAccessTokenRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_git_hub_access_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_hub_access_token_base_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_hub_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGitHubAccessTokenRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_git_hub_access_code_isValid && m_git_hub_access_token_base_url_isValid && true;
}

} // namespace OpenAPI
