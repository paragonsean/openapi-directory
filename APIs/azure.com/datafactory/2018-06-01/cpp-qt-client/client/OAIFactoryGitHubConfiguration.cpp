/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFactoryGitHubConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFactoryGitHubConfiguration::OAIFactoryGitHubConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFactoryGitHubConfiguration::OAIFactoryGitHubConfiguration() {
    this->initializeModel();
}

OAIFactoryGitHubConfiguration::~OAIFactoryGitHubConfiguration() {}

void OAIFactoryGitHubConfiguration::initializeModel() {

    m_host_name_isSet = false;
    m_host_name_isValid = false;

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_collaboration_branch_isSet = false;
    m_collaboration_branch_isValid = false;

    m_last_commit_id_isSet = false;
    m_last_commit_id_isValid = false;

    m_repository_name_isSet = false;
    m_repository_name_isValid = false;

    m_root_folder_isSet = false;
    m_root_folder_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIFactoryGitHubConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFactoryGitHubConfiguration::fromJsonObject(QJsonObject json) {

    m_host_name_isValid = ::OpenAPI::fromJsonValue(m_host_name, json[QString("hostName")]);
    m_host_name_isSet = !json[QString("hostName")].isNull() && m_host_name_isValid;

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_collaboration_branch_isValid = ::OpenAPI::fromJsonValue(m_collaboration_branch, json[QString("collaborationBranch")]);
    m_collaboration_branch_isSet = !json[QString("collaborationBranch")].isNull() && m_collaboration_branch_isValid;

    m_last_commit_id_isValid = ::OpenAPI::fromJsonValue(m_last_commit_id, json[QString("lastCommitId")]);
    m_last_commit_id_isSet = !json[QString("lastCommitId")].isNull() && m_last_commit_id_isValid;

    m_repository_name_isValid = ::OpenAPI::fromJsonValue(m_repository_name, json[QString("repositoryName")]);
    m_repository_name_isSet = !json[QString("repositoryName")].isNull() && m_repository_name_isValid;

    m_root_folder_isValid = ::OpenAPI::fromJsonValue(m_root_folder, json[QString("rootFolder")]);
    m_root_folder_isSet = !json[QString("rootFolder")].isNull() && m_root_folder_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIFactoryGitHubConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFactoryGitHubConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_host_name_isSet) {
        obj.insert(QString("hostName"), ::OpenAPI::toJsonValue(m_host_name));
    }
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_collaboration_branch_isSet) {
        obj.insert(QString("collaborationBranch"), ::OpenAPI::toJsonValue(m_collaboration_branch));
    }
    if (m_last_commit_id_isSet) {
        obj.insert(QString("lastCommitId"), ::OpenAPI::toJsonValue(m_last_commit_id));
    }
    if (m_repository_name_isSet) {
        obj.insert(QString("repositoryName"), ::OpenAPI::toJsonValue(m_repository_name));
    }
    if (m_root_folder_isSet) {
        obj.insert(QString("rootFolder"), ::OpenAPI::toJsonValue(m_root_folder));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIFactoryGitHubConfiguration::getHostName() const {
    return m_host_name;
}
void OAIFactoryGitHubConfiguration::setHostName(const QString &host_name) {
    m_host_name = host_name;
    m_host_name_isSet = true;
}

bool OAIFactoryGitHubConfiguration::is_host_name_Set() const{
    return m_host_name_isSet;
}

bool OAIFactoryGitHubConfiguration::is_host_name_Valid() const{
    return m_host_name_isValid;
}

QString OAIFactoryGitHubConfiguration::getAccountName() const {
    return m_account_name;
}
void OAIFactoryGitHubConfiguration::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIFactoryGitHubConfiguration::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIFactoryGitHubConfiguration::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAIFactoryGitHubConfiguration::getCollaborationBranch() const {
    return m_collaboration_branch;
}
void OAIFactoryGitHubConfiguration::setCollaborationBranch(const QString &collaboration_branch) {
    m_collaboration_branch = collaboration_branch;
    m_collaboration_branch_isSet = true;
}

bool OAIFactoryGitHubConfiguration::is_collaboration_branch_Set() const{
    return m_collaboration_branch_isSet;
}

bool OAIFactoryGitHubConfiguration::is_collaboration_branch_Valid() const{
    return m_collaboration_branch_isValid;
}

QString OAIFactoryGitHubConfiguration::getLastCommitId() const {
    return m_last_commit_id;
}
void OAIFactoryGitHubConfiguration::setLastCommitId(const QString &last_commit_id) {
    m_last_commit_id = last_commit_id;
    m_last_commit_id_isSet = true;
}

bool OAIFactoryGitHubConfiguration::is_last_commit_id_Set() const{
    return m_last_commit_id_isSet;
}

bool OAIFactoryGitHubConfiguration::is_last_commit_id_Valid() const{
    return m_last_commit_id_isValid;
}

QString OAIFactoryGitHubConfiguration::getRepositoryName() const {
    return m_repository_name;
}
void OAIFactoryGitHubConfiguration::setRepositoryName(const QString &repository_name) {
    m_repository_name = repository_name;
    m_repository_name_isSet = true;
}

bool OAIFactoryGitHubConfiguration::is_repository_name_Set() const{
    return m_repository_name_isSet;
}

bool OAIFactoryGitHubConfiguration::is_repository_name_Valid() const{
    return m_repository_name_isValid;
}

QString OAIFactoryGitHubConfiguration::getRootFolder() const {
    return m_root_folder;
}
void OAIFactoryGitHubConfiguration::setRootFolder(const QString &root_folder) {
    m_root_folder = root_folder;
    m_root_folder_isSet = true;
}

bool OAIFactoryGitHubConfiguration::is_root_folder_Set() const{
    return m_root_folder_isSet;
}

bool OAIFactoryGitHubConfiguration::is_root_folder_Valid() const{
    return m_root_folder_isValid;
}

QString OAIFactoryGitHubConfiguration::getType() const {
    return m_type;
}
void OAIFactoryGitHubConfiguration::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFactoryGitHubConfiguration::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFactoryGitHubConfiguration::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIFactoryGitHubConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collaboration_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_commit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_folder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFactoryGitHubConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_name_isValid && m_collaboration_branch_isValid && m_repository_name_isValid && m_root_folder_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
