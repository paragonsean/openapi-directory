/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserAccessPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserAccessPolicy::OAIUserAccessPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserAccessPolicy::OAIUserAccessPolicy() {
    this->initializeModel();
}

OAIUserAccessPolicy::~OAIUserAccessPolicy() {}

void OAIUserAccessPolicy::initializeModel() {

    m_access_resource_path_isSet = false;
    m_access_resource_path_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_profile_name_isSet = false;
    m_profile_name_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIUserAccessPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserAccessPolicy::fromJsonObject(QJsonObject json) {

    m_access_resource_path_isValid = ::OpenAPI::fromJsonValue(m_access_resource_path, json[QString("accessResourcePath")]);
    m_access_resource_path_isSet = !json[QString("accessResourcePath")].isNull() && m_access_resource_path_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_profile_name_isValid = ::OpenAPI::fromJsonValue(m_profile_name, json[QString("profileName")]);
    m_profile_name_isSet = !json[QString("profileName")].isNull() && m_profile_name_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIUserAccessPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserAccessPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_access_resource_path_isSet) {
        obj.insert(QString("accessResourcePath"), ::OpenAPI::toJsonValue(m_access_resource_path));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_permissions_isSet) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_profile_name_isSet) {
        obj.insert(QString("profileName"), ::OpenAPI::toJsonValue(m_profile_name));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QString OAIUserAccessPolicy::getAccessResourcePath() const {
    return m_access_resource_path;
}
void OAIUserAccessPolicy::setAccessResourcePath(const QString &access_resource_path) {
    m_access_resource_path = access_resource_path;
    m_access_resource_path_isSet = true;
}

bool OAIUserAccessPolicy::is_access_resource_path_Set() const{
    return m_access_resource_path_isSet;
}

bool OAIUserAccessPolicy::is_access_resource_path_Valid() const{
    return m_access_resource_path_isValid;
}

QString OAIUserAccessPolicy::getExpireTime() const {
    return m_expire_time;
}
void OAIUserAccessPolicy::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAIUserAccessPolicy::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAIUserAccessPolicy::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QString OAIUserAccessPolicy::getPermissions() const {
    return m_permissions;
}
void OAIUserAccessPolicy::setPermissions(const QString &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIUserAccessPolicy::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIUserAccessPolicy::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAIUserAccessPolicy::getProfileName() const {
    return m_profile_name;
}
void OAIUserAccessPolicy::setProfileName(const QString &profile_name) {
    m_profile_name = profile_name;
    m_profile_name_isSet = true;
}

bool OAIUserAccessPolicy::is_profile_name_Set() const{
    return m_profile_name_isSet;
}

bool OAIUserAccessPolicy::is_profile_name_Valid() const{
    return m_profile_name_isValid;
}

QString OAIUserAccessPolicy::getStartTime() const {
    return m_start_time;
}
void OAIUserAccessPolicy::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIUserAccessPolicy::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIUserAccessPolicy::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIUserAccessPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_resource_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserAccessPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
