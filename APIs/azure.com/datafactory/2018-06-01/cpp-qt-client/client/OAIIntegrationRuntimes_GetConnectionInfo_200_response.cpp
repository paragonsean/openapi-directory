/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntegrationRuntimes_GetConnectionInfo_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntegrationRuntimes_GetConnectionInfo_200_response::OAIIntegrationRuntimes_GetConnectionInfo_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntegrationRuntimes_GetConnectionInfo_200_response::OAIIntegrationRuntimes_GetConnectionInfo_200_response() {
    this->initializeModel();
}

OAIIntegrationRuntimes_GetConnectionInfo_200_response::~OAIIntegrationRuntimes_GetConnectionInfo_200_response() {}

void OAIIntegrationRuntimes_GetConnectionInfo_200_response::initializeModel() {

    m_host_service_uri_isSet = false;
    m_host_service_uri_isValid = false;

    m_identity_cert_thumbprint_isSet = false;
    m_identity_cert_thumbprint_isValid = false;

    m_is_identity_cert_exprired_isSet = false;
    m_is_identity_cert_exprired_isValid = false;

    m_public_key_isSet = false;
    m_public_key_isValid = false;

    m_service_token_isSet = false;
    m_service_token_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIIntegrationRuntimes_GetConnectionInfo_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntegrationRuntimes_GetConnectionInfo_200_response::fromJsonObject(QJsonObject json) {

    m_host_service_uri_isValid = ::OpenAPI::fromJsonValue(m_host_service_uri, json[QString("hostServiceUri")]);
    m_host_service_uri_isSet = !json[QString("hostServiceUri")].isNull() && m_host_service_uri_isValid;

    m_identity_cert_thumbprint_isValid = ::OpenAPI::fromJsonValue(m_identity_cert_thumbprint, json[QString("identityCertThumbprint")]);
    m_identity_cert_thumbprint_isSet = !json[QString("identityCertThumbprint")].isNull() && m_identity_cert_thumbprint_isValid;

    m_is_identity_cert_exprired_isValid = ::OpenAPI::fromJsonValue(m_is_identity_cert_exprired, json[QString("isIdentityCertExprired")]);
    m_is_identity_cert_exprired_isSet = !json[QString("isIdentityCertExprired")].isNull() && m_is_identity_cert_exprired_isValid;

    m_public_key_isValid = ::OpenAPI::fromJsonValue(m_public_key, json[QString("publicKey")]);
    m_public_key_isSet = !json[QString("publicKey")].isNull() && m_public_key_isValid;

    m_service_token_isValid = ::OpenAPI::fromJsonValue(m_service_token, json[QString("serviceToken")]);
    m_service_token_isSet = !json[QString("serviceToken")].isNull() && m_service_token_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIIntegrationRuntimes_GetConnectionInfo_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntegrationRuntimes_GetConnectionInfo_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_host_service_uri_isSet) {
        obj.insert(QString("hostServiceUri"), ::OpenAPI::toJsonValue(m_host_service_uri));
    }
    if (m_identity_cert_thumbprint_isSet) {
        obj.insert(QString("identityCertThumbprint"), ::OpenAPI::toJsonValue(m_identity_cert_thumbprint));
    }
    if (m_is_identity_cert_exprired_isSet) {
        obj.insert(QString("isIdentityCertExprired"), ::OpenAPI::toJsonValue(m_is_identity_cert_exprired));
    }
    if (m_public_key_isSet) {
        obj.insert(QString("publicKey"), ::OpenAPI::toJsonValue(m_public_key));
    }
    if (m_service_token_isSet) {
        obj.insert(QString("serviceToken"), ::OpenAPI::toJsonValue(m_service_token));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIIntegrationRuntimes_GetConnectionInfo_200_response::getHostServiceUri() const {
    return m_host_service_uri;
}
void OAIIntegrationRuntimes_GetConnectionInfo_200_response::setHostServiceUri(const QString &host_service_uri) {
    m_host_service_uri = host_service_uri;
    m_host_service_uri_isSet = true;
}

bool OAIIntegrationRuntimes_GetConnectionInfo_200_response::is_host_service_uri_Set() const{
    return m_host_service_uri_isSet;
}

bool OAIIntegrationRuntimes_GetConnectionInfo_200_response::is_host_service_uri_Valid() const{
    return m_host_service_uri_isValid;
}

QString OAIIntegrationRuntimes_GetConnectionInfo_200_response::getIdentityCertThumbprint() const {
    return m_identity_cert_thumbprint;
}
void OAIIntegrationRuntimes_GetConnectionInfo_200_response::setIdentityCertThumbprint(const QString &identity_cert_thumbprint) {
    m_identity_cert_thumbprint = identity_cert_thumbprint;
    m_identity_cert_thumbprint_isSet = true;
}

bool OAIIntegrationRuntimes_GetConnectionInfo_200_response::is_identity_cert_thumbprint_Set() const{
    return m_identity_cert_thumbprint_isSet;
}

bool OAIIntegrationRuntimes_GetConnectionInfo_200_response::is_identity_cert_thumbprint_Valid() const{
    return m_identity_cert_thumbprint_isValid;
}

bool OAIIntegrationRuntimes_GetConnectionInfo_200_response::isIsIdentityCertExprired() const {
    return m_is_identity_cert_exprired;
}
void OAIIntegrationRuntimes_GetConnectionInfo_200_response::setIsIdentityCertExprired(const bool &is_identity_cert_exprired) {
    m_is_identity_cert_exprired = is_identity_cert_exprired;
    m_is_identity_cert_exprired_isSet = true;
}

bool OAIIntegrationRuntimes_GetConnectionInfo_200_response::is_is_identity_cert_exprired_Set() const{
    return m_is_identity_cert_exprired_isSet;
}

bool OAIIntegrationRuntimes_GetConnectionInfo_200_response::is_is_identity_cert_exprired_Valid() const{
    return m_is_identity_cert_exprired_isValid;
}

QString OAIIntegrationRuntimes_GetConnectionInfo_200_response::getPublicKey() const {
    return m_public_key;
}
void OAIIntegrationRuntimes_GetConnectionInfo_200_response::setPublicKey(const QString &public_key) {
    m_public_key = public_key;
    m_public_key_isSet = true;
}

bool OAIIntegrationRuntimes_GetConnectionInfo_200_response::is_public_key_Set() const{
    return m_public_key_isSet;
}

bool OAIIntegrationRuntimes_GetConnectionInfo_200_response::is_public_key_Valid() const{
    return m_public_key_isValid;
}

QString OAIIntegrationRuntimes_GetConnectionInfo_200_response::getServiceToken() const {
    return m_service_token;
}
void OAIIntegrationRuntimes_GetConnectionInfo_200_response::setServiceToken(const QString &service_token) {
    m_service_token = service_token;
    m_service_token_isSet = true;
}

bool OAIIntegrationRuntimes_GetConnectionInfo_200_response::is_service_token_Set() const{
    return m_service_token_isSet;
}

bool OAIIntegrationRuntimes_GetConnectionInfo_200_response::is_service_token_Valid() const{
    return m_service_token_isValid;
}

QString OAIIntegrationRuntimes_GetConnectionInfo_200_response::getVersion() const {
    return m_version;
}
void OAIIntegrationRuntimes_GetConnectionInfo_200_response::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIIntegrationRuntimes_GetConnectionInfo_200_response::is_version_Set() const{
    return m_version_isSet;
}

bool OAIIntegrationRuntimes_GetConnectionInfo_200_response::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIIntegrationRuntimes_GetConnectionInfo_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_service_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_cert_thumbprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_identity_cert_exprired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntegrationRuntimes_GetConnectionInfo_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
