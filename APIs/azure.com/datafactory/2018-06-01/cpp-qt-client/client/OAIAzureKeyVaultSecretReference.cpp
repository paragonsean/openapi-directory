/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureKeyVaultSecretReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureKeyVaultSecretReference::OAIAzureKeyVaultSecretReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureKeyVaultSecretReference::OAIAzureKeyVaultSecretReference() {
    this->initializeModel();
}

OAIAzureKeyVaultSecretReference::~OAIAzureKeyVaultSecretReference() {}

void OAIAzureKeyVaultSecretReference::initializeModel() {

    m_secret_name_isSet = false;
    m_secret_name_isValid = false;

    m_secret_version_isSet = false;
    m_secret_version_isValid = false;

    m_store_isSet = false;
    m_store_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAzureKeyVaultSecretReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureKeyVaultSecretReference::fromJsonObject(QJsonObject json) {

    m_secret_name_isValid = ::OpenAPI::fromJsonValue(m_secret_name, json[QString("secretName")]);
    m_secret_name_isSet = !json[QString("secretName")].isNull() && m_secret_name_isValid;

    m_secret_version_isValid = ::OpenAPI::fromJsonValue(m_secret_version, json[QString("secretVersion")]);
    m_secret_version_isSet = !json[QString("secretVersion")].isNull() && m_secret_version_isValid;

    m_store_isValid = ::OpenAPI::fromJsonValue(m_store, json[QString("store")]);
    m_store_isSet = !json[QString("store")].isNull() && m_store_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAzureKeyVaultSecretReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureKeyVaultSecretReference::asJsonObject() const {
    QJsonObject obj;
    if (m_secret_name_isSet) {
        obj.insert(QString("secretName"), ::OpenAPI::toJsonValue(m_secret_name));
    }
    if (m_secret_version_isSet) {
        obj.insert(QString("secretVersion"), ::OpenAPI::toJsonValue(m_secret_version));
    }
    if (m_store.isSet()) {
        obj.insert(QString("store"), ::OpenAPI::toJsonValue(m_store));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIObject OAIAzureKeyVaultSecretReference::getSecretName() const {
    return m_secret_name;
}
void OAIAzureKeyVaultSecretReference::setSecretName(const OAIObject &secret_name) {
    m_secret_name = secret_name;
    m_secret_name_isSet = true;
}

bool OAIAzureKeyVaultSecretReference::is_secret_name_Set() const{
    return m_secret_name_isSet;
}

bool OAIAzureKeyVaultSecretReference::is_secret_name_Valid() const{
    return m_secret_name_isValid;
}

OAIObject OAIAzureKeyVaultSecretReference::getSecretVersion() const {
    return m_secret_version;
}
void OAIAzureKeyVaultSecretReference::setSecretVersion(const OAIObject &secret_version) {
    m_secret_version = secret_version;
    m_secret_version_isSet = true;
}

bool OAIAzureKeyVaultSecretReference::is_secret_version_Set() const{
    return m_secret_version_isSet;
}

bool OAIAzureKeyVaultSecretReference::is_secret_version_Valid() const{
    return m_secret_version_isValid;
}

OAILinkedServiceReference OAIAzureKeyVaultSecretReference::getStore() const {
    return m_store;
}
void OAIAzureKeyVaultSecretReference::setStore(const OAILinkedServiceReference &store) {
    m_store = store;
    m_store_isSet = true;
}

bool OAIAzureKeyVaultSecretReference::is_store_Set() const{
    return m_store_isSet;
}

bool OAIAzureKeyVaultSecretReference::is_store_Valid() const{
    return m_store_isValid;
}

QString OAIAzureKeyVaultSecretReference::getType() const {
    return m_type;
}
void OAIAzureKeyVaultSecretReference::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAzureKeyVaultSecretReference::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAzureKeyVaultSecretReference::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAzureKeyVaultSecretReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_secret_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureKeyVaultSecretReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_secret_name_isValid && m_store_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
