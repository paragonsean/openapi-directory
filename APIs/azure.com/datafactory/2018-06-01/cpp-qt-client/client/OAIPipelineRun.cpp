/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipelineRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipelineRun::OAIPipelineRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipelineRun::OAIPipelineRun() {
    this->initializeModel();
}

OAIPipelineRun::~OAIPipelineRun() {}

void OAIPipelineRun::initializeModel() {

    m_duration_in_ms_isSet = false;
    m_duration_in_ms_isValid = false;

    m_invoked_by_isSet = false;
    m_invoked_by_isValid = false;

    m_is_latest_isSet = false;
    m_is_latest_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_pipeline_name_isSet = false;
    m_pipeline_name_isValid = false;

    m_run_dimensions_isSet = false;
    m_run_dimensions_isValid = false;

    m_run_end_isSet = false;
    m_run_end_isValid = false;

    m_run_group_id_isSet = false;
    m_run_group_id_isValid = false;

    m_run_id_isSet = false;
    m_run_id_isValid = false;

    m_run_start_isSet = false;
    m_run_start_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIPipelineRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipelineRun::fromJsonObject(QJsonObject json) {

    m_duration_in_ms_isValid = ::OpenAPI::fromJsonValue(m_duration_in_ms, json[QString("durationInMs")]);
    m_duration_in_ms_isSet = !json[QString("durationInMs")].isNull() && m_duration_in_ms_isValid;

    m_invoked_by_isValid = ::OpenAPI::fromJsonValue(m_invoked_by, json[QString("invokedBy")]);
    m_invoked_by_isSet = !json[QString("invokedBy")].isNull() && m_invoked_by_isValid;

    m_is_latest_isValid = ::OpenAPI::fromJsonValue(m_is_latest, json[QString("isLatest")]);
    m_is_latest_isSet = !json[QString("isLatest")].isNull() && m_is_latest_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_pipeline_name_isValid = ::OpenAPI::fromJsonValue(m_pipeline_name, json[QString("pipelineName")]);
    m_pipeline_name_isSet = !json[QString("pipelineName")].isNull() && m_pipeline_name_isValid;

    m_run_dimensions_isValid = ::OpenAPI::fromJsonValue(m_run_dimensions, json[QString("runDimensions")]);
    m_run_dimensions_isSet = !json[QString("runDimensions")].isNull() && m_run_dimensions_isValid;

    m_run_end_isValid = ::OpenAPI::fromJsonValue(m_run_end, json[QString("runEnd")]);
    m_run_end_isSet = !json[QString("runEnd")].isNull() && m_run_end_isValid;

    m_run_group_id_isValid = ::OpenAPI::fromJsonValue(m_run_group_id, json[QString("runGroupId")]);
    m_run_group_id_isSet = !json[QString("runGroupId")].isNull() && m_run_group_id_isValid;

    m_run_id_isValid = ::OpenAPI::fromJsonValue(m_run_id, json[QString("runId")]);
    m_run_id_isSet = !json[QString("runId")].isNull() && m_run_id_isValid;

    m_run_start_isValid = ::OpenAPI::fromJsonValue(m_run_start, json[QString("runStart")]);
    m_run_start_isSet = !json[QString("runStart")].isNull() && m_run_start_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIPipelineRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipelineRun::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_in_ms_isSet) {
        obj.insert(QString("durationInMs"), ::OpenAPI::toJsonValue(m_duration_in_ms));
    }
    if (m_invoked_by.isSet()) {
        obj.insert(QString("invokedBy"), ::OpenAPI::toJsonValue(m_invoked_by));
    }
    if (m_is_latest_isSet) {
        obj.insert(QString("isLatest"), ::OpenAPI::toJsonValue(m_is_latest));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_pipeline_name_isSet) {
        obj.insert(QString("pipelineName"), ::OpenAPI::toJsonValue(m_pipeline_name));
    }
    if (m_run_dimensions.size() > 0) {
        obj.insert(QString("runDimensions"), ::OpenAPI::toJsonValue(m_run_dimensions));
    }
    if (m_run_end_isSet) {
        obj.insert(QString("runEnd"), ::OpenAPI::toJsonValue(m_run_end));
    }
    if (m_run_group_id_isSet) {
        obj.insert(QString("runGroupId"), ::OpenAPI::toJsonValue(m_run_group_id));
    }
    if (m_run_id_isSet) {
        obj.insert(QString("runId"), ::OpenAPI::toJsonValue(m_run_id));
    }
    if (m_run_start_isSet) {
        obj.insert(QString("runStart"), ::OpenAPI::toJsonValue(m_run_start));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint32 OAIPipelineRun::getDurationInMs() const {
    return m_duration_in_ms;
}
void OAIPipelineRun::setDurationInMs(const qint32 &duration_in_ms) {
    m_duration_in_ms = duration_in_ms;
    m_duration_in_ms_isSet = true;
}

bool OAIPipelineRun::is_duration_in_ms_Set() const{
    return m_duration_in_ms_isSet;
}

bool OAIPipelineRun::is_duration_in_ms_Valid() const{
    return m_duration_in_ms_isValid;
}

OAIPipelineRunInvokedBy OAIPipelineRun::getInvokedBy() const {
    return m_invoked_by;
}
void OAIPipelineRun::setInvokedBy(const OAIPipelineRunInvokedBy &invoked_by) {
    m_invoked_by = invoked_by;
    m_invoked_by_isSet = true;
}

bool OAIPipelineRun::is_invoked_by_Set() const{
    return m_invoked_by_isSet;
}

bool OAIPipelineRun::is_invoked_by_Valid() const{
    return m_invoked_by_isValid;
}

bool OAIPipelineRun::isIsLatest() const {
    return m_is_latest;
}
void OAIPipelineRun::setIsLatest(const bool &is_latest) {
    m_is_latest = is_latest;
    m_is_latest_isSet = true;
}

bool OAIPipelineRun::is_is_latest_Set() const{
    return m_is_latest_isSet;
}

bool OAIPipelineRun::is_is_latest_Valid() const{
    return m_is_latest_isValid;
}

QDateTime OAIPipelineRun::getLastUpdated() const {
    return m_last_updated;
}
void OAIPipelineRun::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIPipelineRun::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIPipelineRun::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIPipelineRun::getMessage() const {
    return m_message;
}
void OAIPipelineRun::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIPipelineRun::is_message_Set() const{
    return m_message_isSet;
}

bool OAIPipelineRun::is_message_Valid() const{
    return m_message_isValid;
}

QMap<QString, QString> OAIPipelineRun::getParameters() const {
    return m_parameters;
}
void OAIPipelineRun::setParameters(const QMap<QString, QString> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIPipelineRun::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIPipelineRun::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIPipelineRun::getPipelineName() const {
    return m_pipeline_name;
}
void OAIPipelineRun::setPipelineName(const QString &pipeline_name) {
    m_pipeline_name = pipeline_name;
    m_pipeline_name_isSet = true;
}

bool OAIPipelineRun::is_pipeline_name_Set() const{
    return m_pipeline_name_isSet;
}

bool OAIPipelineRun::is_pipeline_name_Valid() const{
    return m_pipeline_name_isValid;
}

QMap<QString, QString> OAIPipelineRun::getRunDimensions() const {
    return m_run_dimensions;
}
void OAIPipelineRun::setRunDimensions(const QMap<QString, QString> &run_dimensions) {
    m_run_dimensions = run_dimensions;
    m_run_dimensions_isSet = true;
}

bool OAIPipelineRun::is_run_dimensions_Set() const{
    return m_run_dimensions_isSet;
}

bool OAIPipelineRun::is_run_dimensions_Valid() const{
    return m_run_dimensions_isValid;
}

QDateTime OAIPipelineRun::getRunEnd() const {
    return m_run_end;
}
void OAIPipelineRun::setRunEnd(const QDateTime &run_end) {
    m_run_end = run_end;
    m_run_end_isSet = true;
}

bool OAIPipelineRun::is_run_end_Set() const{
    return m_run_end_isSet;
}

bool OAIPipelineRun::is_run_end_Valid() const{
    return m_run_end_isValid;
}

QString OAIPipelineRun::getRunGroupId() const {
    return m_run_group_id;
}
void OAIPipelineRun::setRunGroupId(const QString &run_group_id) {
    m_run_group_id = run_group_id;
    m_run_group_id_isSet = true;
}

bool OAIPipelineRun::is_run_group_id_Set() const{
    return m_run_group_id_isSet;
}

bool OAIPipelineRun::is_run_group_id_Valid() const{
    return m_run_group_id_isValid;
}

QString OAIPipelineRun::getRunId() const {
    return m_run_id;
}
void OAIPipelineRun::setRunId(const QString &run_id) {
    m_run_id = run_id;
    m_run_id_isSet = true;
}

bool OAIPipelineRun::is_run_id_Set() const{
    return m_run_id_isSet;
}

bool OAIPipelineRun::is_run_id_Valid() const{
    return m_run_id_isValid;
}

QDateTime OAIPipelineRun::getRunStart() const {
    return m_run_start;
}
void OAIPipelineRun::setRunStart(const QDateTime &run_start) {
    m_run_start = run_start;
    m_run_start_isSet = true;
}

bool OAIPipelineRun::is_run_start_Set() const{
    return m_run_start_isSet;
}

bool OAIPipelineRun::is_run_start_Valid() const{
    return m_run_start_isValid;
}

QString OAIPipelineRun::getStatus() const {
    return m_status;
}
void OAIPipelineRun::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPipelineRun::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPipelineRun::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIPipelineRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_in_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoked_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_latest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipelineRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
