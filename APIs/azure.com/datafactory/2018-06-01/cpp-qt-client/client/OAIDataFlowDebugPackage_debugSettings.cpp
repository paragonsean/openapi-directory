/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataFlowDebugPackage_debugSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataFlowDebugPackage_debugSettings::OAIDataFlowDebugPackage_debugSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataFlowDebugPackage_debugSettings::OAIDataFlowDebugPackage_debugSettings() {
    this->initializeModel();
}

OAIDataFlowDebugPackage_debugSettings::~OAIDataFlowDebugPackage_debugSettings() {}

void OAIDataFlowDebugPackage_debugSettings::initializeModel() {

    m_dataset_parameters_isSet = false;
    m_dataset_parameters_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_source_settings_isSet = false;
    m_source_settings_isValid = false;
}

void OAIDataFlowDebugPackage_debugSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataFlowDebugPackage_debugSettings::fromJsonObject(QJsonObject json) {

    m_dataset_parameters_isValid = ::OpenAPI::fromJsonValue(m_dataset_parameters, json[QString("datasetParameters")]);
    m_dataset_parameters_isSet = !json[QString("datasetParameters")].isNull() && m_dataset_parameters_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_source_settings_isValid = ::OpenAPI::fromJsonValue(m_source_settings, json[QString("sourceSettings")]);
    m_source_settings_isSet = !json[QString("sourceSettings")].isNull() && m_source_settings_isValid;
}

QString OAIDataFlowDebugPackage_debugSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataFlowDebugPackage_debugSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_parameters_isSet) {
        obj.insert(QString("datasetParameters"), ::OpenAPI::toJsonValue(m_dataset_parameters));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_source_settings.size() > 0) {
        obj.insert(QString("sourceSettings"), ::OpenAPI::toJsonValue(m_source_settings));
    }
    return obj;
}

OAIObject OAIDataFlowDebugPackage_debugSettings::getDatasetParameters() const {
    return m_dataset_parameters;
}
void OAIDataFlowDebugPackage_debugSettings::setDatasetParameters(const OAIObject &dataset_parameters) {
    m_dataset_parameters = dataset_parameters;
    m_dataset_parameters_isSet = true;
}

bool OAIDataFlowDebugPackage_debugSettings::is_dataset_parameters_Set() const{
    return m_dataset_parameters_isSet;
}

bool OAIDataFlowDebugPackage_debugSettings::is_dataset_parameters_Valid() const{
    return m_dataset_parameters_isValid;
}

QMap<QString, OAIObject> OAIDataFlowDebugPackage_debugSettings::getParameters() const {
    return m_parameters;
}
void OAIDataFlowDebugPackage_debugSettings::setParameters(const QMap<QString, OAIObject> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIDataFlowDebugPackage_debugSettings::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIDataFlowDebugPackage_debugSettings::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QList<OAIDataFlowSourceSetting> OAIDataFlowDebugPackage_debugSettings::getSourceSettings() const {
    return m_source_settings;
}
void OAIDataFlowDebugPackage_debugSettings::setSourceSettings(const QList<OAIDataFlowSourceSetting> &source_settings) {
    m_source_settings = source_settings;
    m_source_settings_isSet = true;
}

bool OAIDataFlowDebugPackage_debugSettings::is_source_settings_Set() const{
    return m_source_settings_isSet;
}

bool OAIDataFlowDebugPackage_debugSettings::is_source_settings_Valid() const{
    return m_source_settings_isValid;
}

bool OAIDataFlowDebugPackage_debugSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataFlowDebugPackage_debugSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
