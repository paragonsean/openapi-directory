/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivityRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivityRun::OAIActivityRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivityRun::OAIActivityRun() {
    this->initializeModel();
}

OAIActivityRun::~OAIActivityRun() {}

void OAIActivityRun::initializeModel() {

    m_activity_name_isSet = false;
    m_activity_name_isValid = false;

    m_activity_run_end_isSet = false;
    m_activity_run_end_isValid = false;

    m_activity_run_id_isSet = false;
    m_activity_run_id_isValid = false;

    m_activity_run_start_isSet = false;
    m_activity_run_start_isValid = false;

    m_activity_type_isSet = false;
    m_activity_type_isValid = false;

    m_duration_in_ms_isSet = false;
    m_duration_in_ms_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;

    m_linked_service_name_isSet = false;
    m_linked_service_name_isValid = false;

    m_output_isSet = false;
    m_output_isValid = false;

    m_pipeline_name_isSet = false;
    m_pipeline_name_isValid = false;

    m_pipeline_run_id_isSet = false;
    m_pipeline_run_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIActivityRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivityRun::fromJsonObject(QJsonObject json) {

    m_activity_name_isValid = ::OpenAPI::fromJsonValue(m_activity_name, json[QString("activityName")]);
    m_activity_name_isSet = !json[QString("activityName")].isNull() && m_activity_name_isValid;

    m_activity_run_end_isValid = ::OpenAPI::fromJsonValue(m_activity_run_end, json[QString("activityRunEnd")]);
    m_activity_run_end_isSet = !json[QString("activityRunEnd")].isNull() && m_activity_run_end_isValid;

    m_activity_run_id_isValid = ::OpenAPI::fromJsonValue(m_activity_run_id, json[QString("activityRunId")]);
    m_activity_run_id_isSet = !json[QString("activityRunId")].isNull() && m_activity_run_id_isValid;

    m_activity_run_start_isValid = ::OpenAPI::fromJsonValue(m_activity_run_start, json[QString("activityRunStart")]);
    m_activity_run_start_isSet = !json[QString("activityRunStart")].isNull() && m_activity_run_start_isValid;

    m_activity_type_isValid = ::OpenAPI::fromJsonValue(m_activity_type, json[QString("activityType")]);
    m_activity_type_isSet = !json[QString("activityType")].isNull() && m_activity_type_isValid;

    m_duration_in_ms_isValid = ::OpenAPI::fromJsonValue(m_duration_in_ms, json[QString("durationInMs")]);
    m_duration_in_ms_isSet = !json[QString("durationInMs")].isNull() && m_duration_in_ms_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_linked_service_name_isValid = ::OpenAPI::fromJsonValue(m_linked_service_name, json[QString("linkedServiceName")]);
    m_linked_service_name_isSet = !json[QString("linkedServiceName")].isNull() && m_linked_service_name_isValid;

    m_output_isValid = ::OpenAPI::fromJsonValue(m_output, json[QString("output")]);
    m_output_isSet = !json[QString("output")].isNull() && m_output_isValid;

    m_pipeline_name_isValid = ::OpenAPI::fromJsonValue(m_pipeline_name, json[QString("pipelineName")]);
    m_pipeline_name_isSet = !json[QString("pipelineName")].isNull() && m_pipeline_name_isValid;

    m_pipeline_run_id_isValid = ::OpenAPI::fromJsonValue(m_pipeline_run_id, json[QString("pipelineRunId")]);
    m_pipeline_run_id_isSet = !json[QString("pipelineRunId")].isNull() && m_pipeline_run_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIActivityRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivityRun::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_name_isSet) {
        obj.insert(QString("activityName"), ::OpenAPI::toJsonValue(m_activity_name));
    }
    if (m_activity_run_end_isSet) {
        obj.insert(QString("activityRunEnd"), ::OpenAPI::toJsonValue(m_activity_run_end));
    }
    if (m_activity_run_id_isSet) {
        obj.insert(QString("activityRunId"), ::OpenAPI::toJsonValue(m_activity_run_id));
    }
    if (m_activity_run_start_isSet) {
        obj.insert(QString("activityRunStart"), ::OpenAPI::toJsonValue(m_activity_run_start));
    }
    if (m_activity_type_isSet) {
        obj.insert(QString("activityType"), ::OpenAPI::toJsonValue(m_activity_type));
    }
    if (m_duration_in_ms_isSet) {
        obj.insert(QString("durationInMs"), ::OpenAPI::toJsonValue(m_duration_in_ms));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_input_isSet) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_linked_service_name_isSet) {
        obj.insert(QString("linkedServiceName"), ::OpenAPI::toJsonValue(m_linked_service_name));
    }
    if (m_output_isSet) {
        obj.insert(QString("output"), ::OpenAPI::toJsonValue(m_output));
    }
    if (m_pipeline_name_isSet) {
        obj.insert(QString("pipelineName"), ::OpenAPI::toJsonValue(m_pipeline_name));
    }
    if (m_pipeline_run_id_isSet) {
        obj.insert(QString("pipelineRunId"), ::OpenAPI::toJsonValue(m_pipeline_run_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIActivityRun::getActivityName() const {
    return m_activity_name;
}
void OAIActivityRun::setActivityName(const QString &activity_name) {
    m_activity_name = activity_name;
    m_activity_name_isSet = true;
}

bool OAIActivityRun::is_activity_name_Set() const{
    return m_activity_name_isSet;
}

bool OAIActivityRun::is_activity_name_Valid() const{
    return m_activity_name_isValid;
}

QDateTime OAIActivityRun::getActivityRunEnd() const {
    return m_activity_run_end;
}
void OAIActivityRun::setActivityRunEnd(const QDateTime &activity_run_end) {
    m_activity_run_end = activity_run_end;
    m_activity_run_end_isSet = true;
}

bool OAIActivityRun::is_activity_run_end_Set() const{
    return m_activity_run_end_isSet;
}

bool OAIActivityRun::is_activity_run_end_Valid() const{
    return m_activity_run_end_isValid;
}

QString OAIActivityRun::getActivityRunId() const {
    return m_activity_run_id;
}
void OAIActivityRun::setActivityRunId(const QString &activity_run_id) {
    m_activity_run_id = activity_run_id;
    m_activity_run_id_isSet = true;
}

bool OAIActivityRun::is_activity_run_id_Set() const{
    return m_activity_run_id_isSet;
}

bool OAIActivityRun::is_activity_run_id_Valid() const{
    return m_activity_run_id_isValid;
}

QDateTime OAIActivityRun::getActivityRunStart() const {
    return m_activity_run_start;
}
void OAIActivityRun::setActivityRunStart(const QDateTime &activity_run_start) {
    m_activity_run_start = activity_run_start;
    m_activity_run_start_isSet = true;
}

bool OAIActivityRun::is_activity_run_start_Set() const{
    return m_activity_run_start_isSet;
}

bool OAIActivityRun::is_activity_run_start_Valid() const{
    return m_activity_run_start_isValid;
}

QString OAIActivityRun::getActivityType() const {
    return m_activity_type;
}
void OAIActivityRun::setActivityType(const QString &activity_type) {
    m_activity_type = activity_type;
    m_activity_type_isSet = true;
}

bool OAIActivityRun::is_activity_type_Set() const{
    return m_activity_type_isSet;
}

bool OAIActivityRun::is_activity_type_Valid() const{
    return m_activity_type_isValid;
}

qint32 OAIActivityRun::getDurationInMs() const {
    return m_duration_in_ms;
}
void OAIActivityRun::setDurationInMs(const qint32 &duration_in_ms) {
    m_duration_in_ms = duration_in_ms;
    m_duration_in_ms_isSet = true;
}

bool OAIActivityRun::is_duration_in_ms_Set() const{
    return m_duration_in_ms_isSet;
}

bool OAIActivityRun::is_duration_in_ms_Valid() const{
    return m_duration_in_ms_isValid;
}

OAIObject OAIActivityRun::getError() const {
    return m_error;
}
void OAIActivityRun::setError(const OAIObject &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIActivityRun::is_error_Set() const{
    return m_error_isSet;
}

bool OAIActivityRun::is_error_Valid() const{
    return m_error_isValid;
}

OAIObject OAIActivityRun::getInput() const {
    return m_input;
}
void OAIActivityRun::setInput(const OAIObject &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIActivityRun::is_input_Set() const{
    return m_input_isSet;
}

bool OAIActivityRun::is_input_Valid() const{
    return m_input_isValid;
}

QString OAIActivityRun::getLinkedServiceName() const {
    return m_linked_service_name;
}
void OAIActivityRun::setLinkedServiceName(const QString &linked_service_name) {
    m_linked_service_name = linked_service_name;
    m_linked_service_name_isSet = true;
}

bool OAIActivityRun::is_linked_service_name_Set() const{
    return m_linked_service_name_isSet;
}

bool OAIActivityRun::is_linked_service_name_Valid() const{
    return m_linked_service_name_isValid;
}

OAIObject OAIActivityRun::getOutput() const {
    return m_output;
}
void OAIActivityRun::setOutput(const OAIObject &output) {
    m_output = output;
    m_output_isSet = true;
}

bool OAIActivityRun::is_output_Set() const{
    return m_output_isSet;
}

bool OAIActivityRun::is_output_Valid() const{
    return m_output_isValid;
}

QString OAIActivityRun::getPipelineName() const {
    return m_pipeline_name;
}
void OAIActivityRun::setPipelineName(const QString &pipeline_name) {
    m_pipeline_name = pipeline_name;
    m_pipeline_name_isSet = true;
}

bool OAIActivityRun::is_pipeline_name_Set() const{
    return m_pipeline_name_isSet;
}

bool OAIActivityRun::is_pipeline_name_Valid() const{
    return m_pipeline_name_isValid;
}

QString OAIActivityRun::getPipelineRunId() const {
    return m_pipeline_run_id;
}
void OAIActivityRun::setPipelineRunId(const QString &pipeline_run_id) {
    m_pipeline_run_id = pipeline_run_id;
    m_pipeline_run_id_isSet = true;
}

bool OAIActivityRun::is_pipeline_run_id_Set() const{
    return m_pipeline_run_id_isSet;
}

bool OAIActivityRun::is_pipeline_run_id_Valid() const{
    return m_pipeline_run_id_isValid;
}

QString OAIActivityRun::getStatus() const {
    return m_status;
}
void OAIActivityRun::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIActivityRun::is_status_Set() const{
    return m_status_isSet;
}

bool OAIActivityRun::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIActivityRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_run_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_run_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_in_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivityRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
