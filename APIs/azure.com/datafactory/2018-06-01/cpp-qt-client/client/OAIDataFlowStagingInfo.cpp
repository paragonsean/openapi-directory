/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataFlowStagingInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataFlowStagingInfo::OAIDataFlowStagingInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataFlowStagingInfo::OAIDataFlowStagingInfo() {
    this->initializeModel();
}

OAIDataFlowStagingInfo::~OAIDataFlowStagingInfo() {}

void OAIDataFlowStagingInfo::initializeModel() {

    m_folder_path_isSet = false;
    m_folder_path_isValid = false;

    m_linked_service_isSet = false;
    m_linked_service_isValid = false;
}

void OAIDataFlowStagingInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataFlowStagingInfo::fromJsonObject(QJsonObject json) {

    m_folder_path_isValid = ::OpenAPI::fromJsonValue(m_folder_path, json[QString("folderPath")]);
    m_folder_path_isSet = !json[QString("folderPath")].isNull() && m_folder_path_isValid;

    m_linked_service_isValid = ::OpenAPI::fromJsonValue(m_linked_service, json[QString("linkedService")]);
    m_linked_service_isSet = !json[QString("linkedService")].isNull() && m_linked_service_isValid;
}

QString OAIDataFlowStagingInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataFlowStagingInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_folder_path_isSet) {
        obj.insert(QString("folderPath"), ::OpenAPI::toJsonValue(m_folder_path));
    }
    if (m_linked_service.isSet()) {
        obj.insert(QString("linkedService"), ::OpenAPI::toJsonValue(m_linked_service));
    }
    return obj;
}

QString OAIDataFlowStagingInfo::getFolderPath() const {
    return m_folder_path;
}
void OAIDataFlowStagingInfo::setFolderPath(const QString &folder_path) {
    m_folder_path = folder_path;
    m_folder_path_isSet = true;
}

bool OAIDataFlowStagingInfo::is_folder_path_Set() const{
    return m_folder_path_isSet;
}

bool OAIDataFlowStagingInfo::is_folder_path_Valid() const{
    return m_folder_path_isValid;
}

OAILinkedServiceReference OAIDataFlowStagingInfo::getLinkedService() const {
    return m_linked_service;
}
void OAIDataFlowStagingInfo::setLinkedService(const OAILinkedServiceReference &linked_service) {
    m_linked_service = linked_service;
    m_linked_service_isSet = true;
}

bool OAIDataFlowStagingInfo::is_linked_service_Set() const{
    return m_linked_service_isSet;
}

bool OAIDataFlowStagingInfo::is_linked_service_Valid() const{
    return m_linked_service_isValid;
}

bool OAIDataFlowStagingInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_folder_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_service.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataFlowStagingInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
