/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataFlowDebugPackage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataFlowDebugPackage::OAIDataFlowDebugPackage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataFlowDebugPackage::OAIDataFlowDebugPackage() {
    this->initializeModel();
}

OAIDataFlowDebugPackage::~OAIDataFlowDebugPackage() {}

void OAIDataFlowDebugPackage::initializeModel() {

    m_data_flow_isSet = false;
    m_data_flow_isValid = false;

    m_datasets_isSet = false;
    m_datasets_isValid = false;

    m_debug_settings_isSet = false;
    m_debug_settings_isValid = false;

    m_linked_services_isSet = false;
    m_linked_services_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_staging_isSet = false;
    m_staging_isValid = false;
}

void OAIDataFlowDebugPackage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataFlowDebugPackage::fromJsonObject(QJsonObject json) {

    m_data_flow_isValid = ::OpenAPI::fromJsonValue(m_data_flow, json[QString("dataFlow")]);
    m_data_flow_isSet = !json[QString("dataFlow")].isNull() && m_data_flow_isValid;

    m_datasets_isValid = ::OpenAPI::fromJsonValue(m_datasets, json[QString("datasets")]);
    m_datasets_isSet = !json[QString("datasets")].isNull() && m_datasets_isValid;

    m_debug_settings_isValid = ::OpenAPI::fromJsonValue(m_debug_settings, json[QString("debugSettings")]);
    m_debug_settings_isSet = !json[QString("debugSettings")].isNull() && m_debug_settings_isValid;

    m_linked_services_isValid = ::OpenAPI::fromJsonValue(m_linked_services, json[QString("linkedServices")]);
    m_linked_services_isSet = !json[QString("linkedServices")].isNull() && m_linked_services_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("sessionId")]);
    m_session_id_isSet = !json[QString("sessionId")].isNull() && m_session_id_isValid;

    m_staging_isValid = ::OpenAPI::fromJsonValue(m_staging, json[QString("staging")]);
    m_staging_isSet = !json[QString("staging")].isNull() && m_staging_isValid;
}

QString OAIDataFlowDebugPackage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataFlowDebugPackage::asJsonObject() const {
    QJsonObject obj;
    if (m_data_flow.isSet()) {
        obj.insert(QString("dataFlow"), ::OpenAPI::toJsonValue(m_data_flow));
    }
    if (m_datasets.size() > 0) {
        obj.insert(QString("datasets"), ::OpenAPI::toJsonValue(m_datasets));
    }
    if (m_debug_settings.isSet()) {
        obj.insert(QString("debugSettings"), ::OpenAPI::toJsonValue(m_debug_settings));
    }
    if (m_linked_services.size() > 0) {
        obj.insert(QString("linkedServices"), ::OpenAPI::toJsonValue(m_linked_services));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("sessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_staging.isSet()) {
        obj.insert(QString("staging"), ::OpenAPI::toJsonValue(m_staging));
    }
    return obj;
}

OAIDataFlowDebugResource OAIDataFlowDebugPackage::getDataFlow() const {
    return m_data_flow;
}
void OAIDataFlowDebugPackage::setDataFlow(const OAIDataFlowDebugResource &data_flow) {
    m_data_flow = data_flow;
    m_data_flow_isSet = true;
}

bool OAIDataFlowDebugPackage::is_data_flow_Set() const{
    return m_data_flow_isSet;
}

bool OAIDataFlowDebugPackage::is_data_flow_Valid() const{
    return m_data_flow_isValid;
}

QList<OAIDatasetDebugResource> OAIDataFlowDebugPackage::getDatasets() const {
    return m_datasets;
}
void OAIDataFlowDebugPackage::setDatasets(const QList<OAIDatasetDebugResource> &datasets) {
    m_datasets = datasets;
    m_datasets_isSet = true;
}

bool OAIDataFlowDebugPackage::is_datasets_Set() const{
    return m_datasets_isSet;
}

bool OAIDataFlowDebugPackage::is_datasets_Valid() const{
    return m_datasets_isValid;
}

OAIDataFlowDebugPackage_debugSettings OAIDataFlowDebugPackage::getDebugSettings() const {
    return m_debug_settings;
}
void OAIDataFlowDebugPackage::setDebugSettings(const OAIDataFlowDebugPackage_debugSettings &debug_settings) {
    m_debug_settings = debug_settings;
    m_debug_settings_isSet = true;
}

bool OAIDataFlowDebugPackage::is_debug_settings_Set() const{
    return m_debug_settings_isSet;
}

bool OAIDataFlowDebugPackage::is_debug_settings_Valid() const{
    return m_debug_settings_isValid;
}

QList<OAILinkedServiceDebugResource> OAIDataFlowDebugPackage::getLinkedServices() const {
    return m_linked_services;
}
void OAIDataFlowDebugPackage::setLinkedServices(const QList<OAILinkedServiceDebugResource> &linked_services) {
    m_linked_services = linked_services;
    m_linked_services_isSet = true;
}

bool OAIDataFlowDebugPackage::is_linked_services_Set() const{
    return m_linked_services_isSet;
}

bool OAIDataFlowDebugPackage::is_linked_services_Valid() const{
    return m_linked_services_isValid;
}

QString OAIDataFlowDebugPackage::getSessionId() const {
    return m_session_id;
}
void OAIDataFlowDebugPackage::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIDataFlowDebugPackage::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIDataFlowDebugPackage::is_session_id_Valid() const{
    return m_session_id_isValid;
}

OAIDataFlowStagingInfo OAIDataFlowDebugPackage::getStaging() const {
    return m_staging;
}
void OAIDataFlowDebugPackage::setStaging(const OAIDataFlowStagingInfo &staging) {
    m_staging = staging;
    m_staging_isSet = true;
}

bool OAIDataFlowDebugPackage::is_staging_Set() const{
    return m_staging_isSet;
}

bool OAIDataFlowDebugPackage::is_staging_Valid() const{
    return m_staging_isValid;
}

bool OAIDataFlowDebugPackage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_flow.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_datasets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_debug_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_staging.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataFlowDebugPackage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
