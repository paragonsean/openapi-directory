/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRerunTriggersApi_H
#define OAI_OAIRerunTriggersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIRerunTriggerListResponse.h"
#include "OAIRerunTumblingWindowTriggerActionParameters.h"
#include "OAITriggerResource.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRerunTriggersApi : public QObject {
    Q_OBJECT

public:
    OAIRerunTriggersApi(const int timeOut = 0);
    ~OAIRerunTriggersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  trigger_name QString [required]
    * @param[in]  rerun_trigger_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void rerunTriggersCancel(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &trigger_name, const QString &rerun_trigger_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  trigger_name QString [required]
    * @param[in]  rerun_trigger_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  rerun_tumbling_window_trigger_action_parameters OAIRerunTumblingWindowTriggerActionParameters [required]
    */
    virtual void rerunTriggersCreate(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &trigger_name, const QString &rerun_trigger_name, const QString &api_version, const OAIRerunTumblingWindowTriggerActionParameters &rerun_tumbling_window_trigger_action_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  trigger_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void rerunTriggersListByTrigger(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &trigger_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  trigger_name QString [required]
    * @param[in]  rerun_trigger_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void rerunTriggersStart(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &trigger_name, const QString &rerun_trigger_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  trigger_name QString [required]
    * @param[in]  rerun_trigger_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void rerunTriggersStop(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &trigger_name, const QString &rerun_trigger_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void rerunTriggersCancelCallback(OAIHttpRequestWorker *worker);
    void rerunTriggersCreateCallback(OAIHttpRequestWorker *worker);
    void rerunTriggersListByTriggerCallback(OAIHttpRequestWorker *worker);
    void rerunTriggersStartCallback(OAIHttpRequestWorker *worker);
    void rerunTriggersStopCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void rerunTriggersCancelSignal();
    void rerunTriggersCreateSignal(OAITriggerResource summary);
    void rerunTriggersListByTriggerSignal(OAIRerunTriggerListResponse summary);
    void rerunTriggersStartSignal();
    void rerunTriggersStopSignal();


    void rerunTriggersCancelSignalFull(OAIHttpRequestWorker *worker);
    void rerunTriggersCreateSignalFull(OAIHttpRequestWorker *worker, OAITriggerResource summary);
    void rerunTriggersListByTriggerSignalFull(OAIHttpRequestWorker *worker, OAIRerunTriggerListResponse summary);
    void rerunTriggersStartSignalFull(OAIHttpRequestWorker *worker);
    void rerunTriggersStopSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use rerunTriggersCancelSignalError() instead")
    void rerunTriggersCancelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void rerunTriggersCancelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rerunTriggersCreateSignalError() instead")
    void rerunTriggersCreateSignalE(OAITriggerResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rerunTriggersCreateSignalError(OAITriggerResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rerunTriggersListByTriggerSignalError() instead")
    void rerunTriggersListByTriggerSignalE(OAIRerunTriggerListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rerunTriggersListByTriggerSignalError(OAIRerunTriggerListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rerunTriggersStartSignalError() instead")
    void rerunTriggersStartSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void rerunTriggersStartSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rerunTriggersStopSignalError() instead")
    void rerunTriggersStopSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void rerunTriggersStopSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use rerunTriggersCancelSignalErrorFull() instead")
    void rerunTriggersCancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rerunTriggersCancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rerunTriggersCreateSignalErrorFull() instead")
    void rerunTriggersCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rerunTriggersCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rerunTriggersListByTriggerSignalErrorFull() instead")
    void rerunTriggersListByTriggerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rerunTriggersListByTriggerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rerunTriggersStartSignalErrorFull() instead")
    void rerunTriggersStartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rerunTriggersStartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rerunTriggersStopSignalErrorFull() instead")
    void rerunTriggersStopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rerunTriggersStopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
