/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataFlowDebugSessionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataFlowDebugSessionInfo::OAIDataFlowDebugSessionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataFlowDebugSessionInfo::OAIDataFlowDebugSessionInfo() {
    this->initializeModel();
}

OAIDataFlowDebugSessionInfo::~OAIDataFlowDebugSessionInfo() {}

void OAIDataFlowDebugSessionInfo::initializeModel() {

    m_compute_type_isSet = false;
    m_compute_type_isValid = false;

    m_core_count_isSet = false;
    m_core_count_isValid = false;

    m_data_flow_name_isSet = false;
    m_data_flow_name_isValid = false;

    m_integration_runtime_name_isSet = false;
    m_integration_runtime_name_isValid = false;

    m_last_activity_time_isSet = false;
    m_last_activity_time_isValid = false;

    m_node_count_isSet = false;
    m_node_count_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_time_to_live_in_minutes_isSet = false;
    m_time_to_live_in_minutes_isValid = false;
}

void OAIDataFlowDebugSessionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataFlowDebugSessionInfo::fromJsonObject(QJsonObject json) {

    m_compute_type_isValid = ::OpenAPI::fromJsonValue(m_compute_type, json[QString("computeType")]);
    m_compute_type_isSet = !json[QString("computeType")].isNull() && m_compute_type_isValid;

    m_core_count_isValid = ::OpenAPI::fromJsonValue(m_core_count, json[QString("coreCount")]);
    m_core_count_isSet = !json[QString("coreCount")].isNull() && m_core_count_isValid;

    m_data_flow_name_isValid = ::OpenAPI::fromJsonValue(m_data_flow_name, json[QString("dataFlowName")]);
    m_data_flow_name_isSet = !json[QString("dataFlowName")].isNull() && m_data_flow_name_isValid;

    m_integration_runtime_name_isValid = ::OpenAPI::fromJsonValue(m_integration_runtime_name, json[QString("integrationRuntimeName")]);
    m_integration_runtime_name_isSet = !json[QString("integrationRuntimeName")].isNull() && m_integration_runtime_name_isValid;

    m_last_activity_time_isValid = ::OpenAPI::fromJsonValue(m_last_activity_time, json[QString("lastActivityTime")]);
    m_last_activity_time_isSet = !json[QString("lastActivityTime")].isNull() && m_last_activity_time_isValid;

    m_node_count_isValid = ::OpenAPI::fromJsonValue(m_node_count, json[QString("nodeCount")]);
    m_node_count_isSet = !json[QString("nodeCount")].isNull() && m_node_count_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("sessionId")]);
    m_session_id_isSet = !json[QString("sessionId")].isNull() && m_session_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_time_to_live_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_time_to_live_in_minutes, json[QString("timeToLiveInMinutes")]);
    m_time_to_live_in_minutes_isSet = !json[QString("timeToLiveInMinutes")].isNull() && m_time_to_live_in_minutes_isValid;
}

QString OAIDataFlowDebugSessionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataFlowDebugSessionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_compute_type_isSet) {
        obj.insert(QString("computeType"), ::OpenAPI::toJsonValue(m_compute_type));
    }
    if (m_core_count_isSet) {
        obj.insert(QString("coreCount"), ::OpenAPI::toJsonValue(m_core_count));
    }
    if (m_data_flow_name_isSet) {
        obj.insert(QString("dataFlowName"), ::OpenAPI::toJsonValue(m_data_flow_name));
    }
    if (m_integration_runtime_name_isSet) {
        obj.insert(QString("integrationRuntimeName"), ::OpenAPI::toJsonValue(m_integration_runtime_name));
    }
    if (m_last_activity_time_isSet) {
        obj.insert(QString("lastActivityTime"), ::OpenAPI::toJsonValue(m_last_activity_time));
    }
    if (m_node_count_isSet) {
        obj.insert(QString("nodeCount"), ::OpenAPI::toJsonValue(m_node_count));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("sessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_time_to_live_in_minutes_isSet) {
        obj.insert(QString("timeToLiveInMinutes"), ::OpenAPI::toJsonValue(m_time_to_live_in_minutes));
    }
    return obj;
}

QString OAIDataFlowDebugSessionInfo::getComputeType() const {
    return m_compute_type;
}
void OAIDataFlowDebugSessionInfo::setComputeType(const QString &compute_type) {
    m_compute_type = compute_type;
    m_compute_type_isSet = true;
}

bool OAIDataFlowDebugSessionInfo::is_compute_type_Set() const{
    return m_compute_type_isSet;
}

bool OAIDataFlowDebugSessionInfo::is_compute_type_Valid() const{
    return m_compute_type_isValid;
}

qint32 OAIDataFlowDebugSessionInfo::getCoreCount() const {
    return m_core_count;
}
void OAIDataFlowDebugSessionInfo::setCoreCount(const qint32 &core_count) {
    m_core_count = core_count;
    m_core_count_isSet = true;
}

bool OAIDataFlowDebugSessionInfo::is_core_count_Set() const{
    return m_core_count_isSet;
}

bool OAIDataFlowDebugSessionInfo::is_core_count_Valid() const{
    return m_core_count_isValid;
}

QString OAIDataFlowDebugSessionInfo::getDataFlowName() const {
    return m_data_flow_name;
}
void OAIDataFlowDebugSessionInfo::setDataFlowName(const QString &data_flow_name) {
    m_data_flow_name = data_flow_name;
    m_data_flow_name_isSet = true;
}

bool OAIDataFlowDebugSessionInfo::is_data_flow_name_Set() const{
    return m_data_flow_name_isSet;
}

bool OAIDataFlowDebugSessionInfo::is_data_flow_name_Valid() const{
    return m_data_flow_name_isValid;
}

QString OAIDataFlowDebugSessionInfo::getIntegrationRuntimeName() const {
    return m_integration_runtime_name;
}
void OAIDataFlowDebugSessionInfo::setIntegrationRuntimeName(const QString &integration_runtime_name) {
    m_integration_runtime_name = integration_runtime_name;
    m_integration_runtime_name_isSet = true;
}

bool OAIDataFlowDebugSessionInfo::is_integration_runtime_name_Set() const{
    return m_integration_runtime_name_isSet;
}

bool OAIDataFlowDebugSessionInfo::is_integration_runtime_name_Valid() const{
    return m_integration_runtime_name_isValid;
}

QString OAIDataFlowDebugSessionInfo::getLastActivityTime() const {
    return m_last_activity_time;
}
void OAIDataFlowDebugSessionInfo::setLastActivityTime(const QString &last_activity_time) {
    m_last_activity_time = last_activity_time;
    m_last_activity_time_isSet = true;
}

bool OAIDataFlowDebugSessionInfo::is_last_activity_time_Set() const{
    return m_last_activity_time_isSet;
}

bool OAIDataFlowDebugSessionInfo::is_last_activity_time_Valid() const{
    return m_last_activity_time_isValid;
}

qint32 OAIDataFlowDebugSessionInfo::getNodeCount() const {
    return m_node_count;
}
void OAIDataFlowDebugSessionInfo::setNodeCount(const qint32 &node_count) {
    m_node_count = node_count;
    m_node_count_isSet = true;
}

bool OAIDataFlowDebugSessionInfo::is_node_count_Set() const{
    return m_node_count_isSet;
}

bool OAIDataFlowDebugSessionInfo::is_node_count_Valid() const{
    return m_node_count_isValid;
}

QString OAIDataFlowDebugSessionInfo::getSessionId() const {
    return m_session_id;
}
void OAIDataFlowDebugSessionInfo::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIDataFlowDebugSessionInfo::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIDataFlowDebugSessionInfo::is_session_id_Valid() const{
    return m_session_id_isValid;
}

QString OAIDataFlowDebugSessionInfo::getStartTime() const {
    return m_start_time;
}
void OAIDataFlowDebugSessionInfo::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIDataFlowDebugSessionInfo::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIDataFlowDebugSessionInfo::is_start_time_Valid() const{
    return m_start_time_isValid;
}

qint32 OAIDataFlowDebugSessionInfo::getTimeToLiveInMinutes() const {
    return m_time_to_live_in_minutes;
}
void OAIDataFlowDebugSessionInfo::setTimeToLiveInMinutes(const qint32 &time_to_live_in_minutes) {
    m_time_to_live_in_minutes = time_to_live_in_minutes;
    m_time_to_live_in_minutes_isSet = true;
}

bool OAIDataFlowDebugSessionInfo::is_time_to_live_in_minutes_Set() const{
    return m_time_to_live_in_minutes_isSet;
}

bool OAIDataFlowDebugSessionInfo::is_time_to_live_in_minutes_Valid() const{
    return m_time_to_live_in_minutes_isValid;
}

bool OAIDataFlowDebugSessionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compute_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_core_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_flow_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_runtime_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_activity_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_to_live_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataFlowDebugSessionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
