/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatasetReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatasetReference::OAIDatasetReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatasetReference::OAIDatasetReference() {
    this->initializeModel();
}

OAIDatasetReference::~OAIDatasetReference() {}

void OAIDatasetReference::initializeModel() {

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_reference_name_isSet = false;
    m_reference_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDatasetReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatasetReference::fromJsonObject(QJsonObject json) {

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_reference_name_isValid = ::OpenAPI::fromJsonValue(m_reference_name, json[QString("referenceName")]);
    m_reference_name_isSet = !json[QString("referenceName")].isNull() && m_reference_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDatasetReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatasetReference::asJsonObject() const {
    QJsonObject obj;
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_reference_name_isSet) {
        obj.insert(QString("referenceName"), ::OpenAPI::toJsonValue(m_reference_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QMap<QString, OAIObject> OAIDatasetReference::getParameters() const {
    return m_parameters;
}
void OAIDatasetReference::setParameters(const QMap<QString, OAIObject> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIDatasetReference::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIDatasetReference::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIDatasetReference::getReferenceName() const {
    return m_reference_name;
}
void OAIDatasetReference::setReferenceName(const QString &reference_name) {
    m_reference_name = reference_name;
    m_reference_name_isSet = true;
}

bool OAIDatasetReference::is_reference_name_Set() const{
    return m_reference_name_isSet;
}

bool OAIDatasetReference::is_reference_name_Valid() const{
    return m_reference_name_isValid;
}

QString OAIDatasetReference::getType() const {
    return m_type;
}
void OAIDatasetReference::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDatasetReference::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDatasetReference::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDatasetReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatasetReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_reference_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
