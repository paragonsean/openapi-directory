/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntegrationRuntimeNodes_Get_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntegrationRuntimeNodes_Get_200_response::OAIIntegrationRuntimeNodes_Get_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntegrationRuntimeNodes_Get_200_response::OAIIntegrationRuntimeNodes_Get_200_response() {
    this->initializeModel();
}

OAIIntegrationRuntimeNodes_Get_200_response::~OAIIntegrationRuntimeNodes_Get_200_response() {}

void OAIIntegrationRuntimeNodes_Get_200_response::initializeModel() {

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_concurrent_jobs_limit_isSet = false;
    m_concurrent_jobs_limit_isValid = false;

    m_expiry_time_isSet = false;
    m_expiry_time_isValid = false;

    m_host_service_uri_isSet = false;
    m_host_service_uri_isValid = false;

    m_is_active_dispatcher_isSet = false;
    m_is_active_dispatcher_isValid = false;

    m_last_connect_time_isSet = false;
    m_last_connect_time_isValid = false;

    m_last_end_update_time_isSet = false;
    m_last_end_update_time_isValid = false;

    m_last_start_time_isSet = false;
    m_last_start_time_isValid = false;

    m_last_start_update_time_isSet = false;
    m_last_start_update_time_isValid = false;

    m_last_stop_time_isSet = false;
    m_last_stop_time_isValid = false;

    m_last_update_result_isSet = false;
    m_last_update_result_isValid = false;

    m_machine_name_isSet = false;
    m_machine_name_isValid = false;

    m_max_concurrent_jobs_isSet = false;
    m_max_concurrent_jobs_isValid = false;

    m_node_name_isSet = false;
    m_node_name_isValid = false;

    m_register_time_isSet = false;
    m_register_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_version_status_isSet = false;
    m_version_status_isValid = false;
}

void OAIIntegrationRuntimeNodes_Get_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntegrationRuntimeNodes_Get_200_response::fromJsonObject(QJsonObject json) {

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_concurrent_jobs_limit_isValid = ::OpenAPI::fromJsonValue(m_concurrent_jobs_limit, json[QString("concurrentJobsLimit")]);
    m_concurrent_jobs_limit_isSet = !json[QString("concurrentJobsLimit")].isNull() && m_concurrent_jobs_limit_isValid;

    m_expiry_time_isValid = ::OpenAPI::fromJsonValue(m_expiry_time, json[QString("expiryTime")]);
    m_expiry_time_isSet = !json[QString("expiryTime")].isNull() && m_expiry_time_isValid;

    m_host_service_uri_isValid = ::OpenAPI::fromJsonValue(m_host_service_uri, json[QString("hostServiceUri")]);
    m_host_service_uri_isSet = !json[QString("hostServiceUri")].isNull() && m_host_service_uri_isValid;

    m_is_active_dispatcher_isValid = ::OpenAPI::fromJsonValue(m_is_active_dispatcher, json[QString("isActiveDispatcher")]);
    m_is_active_dispatcher_isSet = !json[QString("isActiveDispatcher")].isNull() && m_is_active_dispatcher_isValid;

    m_last_connect_time_isValid = ::OpenAPI::fromJsonValue(m_last_connect_time, json[QString("lastConnectTime")]);
    m_last_connect_time_isSet = !json[QString("lastConnectTime")].isNull() && m_last_connect_time_isValid;

    m_last_end_update_time_isValid = ::OpenAPI::fromJsonValue(m_last_end_update_time, json[QString("lastEndUpdateTime")]);
    m_last_end_update_time_isSet = !json[QString("lastEndUpdateTime")].isNull() && m_last_end_update_time_isValid;

    m_last_start_time_isValid = ::OpenAPI::fromJsonValue(m_last_start_time, json[QString("lastStartTime")]);
    m_last_start_time_isSet = !json[QString("lastStartTime")].isNull() && m_last_start_time_isValid;

    m_last_start_update_time_isValid = ::OpenAPI::fromJsonValue(m_last_start_update_time, json[QString("lastStartUpdateTime")]);
    m_last_start_update_time_isSet = !json[QString("lastStartUpdateTime")].isNull() && m_last_start_update_time_isValid;

    m_last_stop_time_isValid = ::OpenAPI::fromJsonValue(m_last_stop_time, json[QString("lastStopTime")]);
    m_last_stop_time_isSet = !json[QString("lastStopTime")].isNull() && m_last_stop_time_isValid;

    m_last_update_result_isValid = ::OpenAPI::fromJsonValue(m_last_update_result, json[QString("lastUpdateResult")]);
    m_last_update_result_isSet = !json[QString("lastUpdateResult")].isNull() && m_last_update_result_isValid;

    m_machine_name_isValid = ::OpenAPI::fromJsonValue(m_machine_name, json[QString("machineName")]);
    m_machine_name_isSet = !json[QString("machineName")].isNull() && m_machine_name_isValid;

    m_max_concurrent_jobs_isValid = ::OpenAPI::fromJsonValue(m_max_concurrent_jobs, json[QString("maxConcurrentJobs")]);
    m_max_concurrent_jobs_isSet = !json[QString("maxConcurrentJobs")].isNull() && m_max_concurrent_jobs_isValid;

    m_node_name_isValid = ::OpenAPI::fromJsonValue(m_node_name, json[QString("nodeName")]);
    m_node_name_isSet = !json[QString("nodeName")].isNull() && m_node_name_isValid;

    m_register_time_isValid = ::OpenAPI::fromJsonValue(m_register_time, json[QString("registerTime")]);
    m_register_time_isSet = !json[QString("registerTime")].isNull() && m_register_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_version_status_isValid = ::OpenAPI::fromJsonValue(m_version_status, json[QString("versionStatus")]);
    m_version_status_isSet = !json[QString("versionStatus")].isNull() && m_version_status_isValid;
}

QString OAIIntegrationRuntimeNodes_Get_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntegrationRuntimeNodes_Get_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_capabilities.size() > 0) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_concurrent_jobs_limit_isSet) {
        obj.insert(QString("concurrentJobsLimit"), ::OpenAPI::toJsonValue(m_concurrent_jobs_limit));
    }
    if (m_expiry_time_isSet) {
        obj.insert(QString("expiryTime"), ::OpenAPI::toJsonValue(m_expiry_time));
    }
    if (m_host_service_uri_isSet) {
        obj.insert(QString("hostServiceUri"), ::OpenAPI::toJsonValue(m_host_service_uri));
    }
    if (m_is_active_dispatcher_isSet) {
        obj.insert(QString("isActiveDispatcher"), ::OpenAPI::toJsonValue(m_is_active_dispatcher));
    }
    if (m_last_connect_time_isSet) {
        obj.insert(QString("lastConnectTime"), ::OpenAPI::toJsonValue(m_last_connect_time));
    }
    if (m_last_end_update_time_isSet) {
        obj.insert(QString("lastEndUpdateTime"), ::OpenAPI::toJsonValue(m_last_end_update_time));
    }
    if (m_last_start_time_isSet) {
        obj.insert(QString("lastStartTime"), ::OpenAPI::toJsonValue(m_last_start_time));
    }
    if (m_last_start_update_time_isSet) {
        obj.insert(QString("lastStartUpdateTime"), ::OpenAPI::toJsonValue(m_last_start_update_time));
    }
    if (m_last_stop_time_isSet) {
        obj.insert(QString("lastStopTime"), ::OpenAPI::toJsonValue(m_last_stop_time));
    }
    if (m_last_update_result_isSet) {
        obj.insert(QString("lastUpdateResult"), ::OpenAPI::toJsonValue(m_last_update_result));
    }
    if (m_machine_name_isSet) {
        obj.insert(QString("machineName"), ::OpenAPI::toJsonValue(m_machine_name));
    }
    if (m_max_concurrent_jobs_isSet) {
        obj.insert(QString("maxConcurrentJobs"), ::OpenAPI::toJsonValue(m_max_concurrent_jobs));
    }
    if (m_node_name_isSet) {
        obj.insert(QString("nodeName"), ::OpenAPI::toJsonValue(m_node_name));
    }
    if (m_register_time_isSet) {
        obj.insert(QString("registerTime"), ::OpenAPI::toJsonValue(m_register_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_version_status_isSet) {
        obj.insert(QString("versionStatus"), ::OpenAPI::toJsonValue(m_version_status));
    }
    return obj;
}

QMap<QString, QString> OAIIntegrationRuntimeNodes_Get_200_response::getCapabilities() const {
    return m_capabilities;
}
void OAIIntegrationRuntimeNodes_Get_200_response::setCapabilities(const QMap<QString, QString> &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

qint32 OAIIntegrationRuntimeNodes_Get_200_response::getConcurrentJobsLimit() const {
    return m_concurrent_jobs_limit;
}
void OAIIntegrationRuntimeNodes_Get_200_response::setConcurrentJobsLimit(const qint32 &concurrent_jobs_limit) {
    m_concurrent_jobs_limit = concurrent_jobs_limit;
    m_concurrent_jobs_limit_isSet = true;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_concurrent_jobs_limit_Set() const{
    return m_concurrent_jobs_limit_isSet;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_concurrent_jobs_limit_Valid() const{
    return m_concurrent_jobs_limit_isValid;
}

QDateTime OAIIntegrationRuntimeNodes_Get_200_response::getExpiryTime() const {
    return m_expiry_time;
}
void OAIIntegrationRuntimeNodes_Get_200_response::setExpiryTime(const QDateTime &expiry_time) {
    m_expiry_time = expiry_time;
    m_expiry_time_isSet = true;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_expiry_time_Set() const{
    return m_expiry_time_isSet;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_expiry_time_Valid() const{
    return m_expiry_time_isValid;
}

QString OAIIntegrationRuntimeNodes_Get_200_response::getHostServiceUri() const {
    return m_host_service_uri;
}
void OAIIntegrationRuntimeNodes_Get_200_response::setHostServiceUri(const QString &host_service_uri) {
    m_host_service_uri = host_service_uri;
    m_host_service_uri_isSet = true;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_host_service_uri_Set() const{
    return m_host_service_uri_isSet;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_host_service_uri_Valid() const{
    return m_host_service_uri_isValid;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::isIsActiveDispatcher() const {
    return m_is_active_dispatcher;
}
void OAIIntegrationRuntimeNodes_Get_200_response::setIsActiveDispatcher(const bool &is_active_dispatcher) {
    m_is_active_dispatcher = is_active_dispatcher;
    m_is_active_dispatcher_isSet = true;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_is_active_dispatcher_Set() const{
    return m_is_active_dispatcher_isSet;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_is_active_dispatcher_Valid() const{
    return m_is_active_dispatcher_isValid;
}

QDateTime OAIIntegrationRuntimeNodes_Get_200_response::getLastConnectTime() const {
    return m_last_connect_time;
}
void OAIIntegrationRuntimeNodes_Get_200_response::setLastConnectTime(const QDateTime &last_connect_time) {
    m_last_connect_time = last_connect_time;
    m_last_connect_time_isSet = true;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_last_connect_time_Set() const{
    return m_last_connect_time_isSet;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_last_connect_time_Valid() const{
    return m_last_connect_time_isValid;
}

QDateTime OAIIntegrationRuntimeNodes_Get_200_response::getLastEndUpdateTime() const {
    return m_last_end_update_time;
}
void OAIIntegrationRuntimeNodes_Get_200_response::setLastEndUpdateTime(const QDateTime &last_end_update_time) {
    m_last_end_update_time = last_end_update_time;
    m_last_end_update_time_isSet = true;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_last_end_update_time_Set() const{
    return m_last_end_update_time_isSet;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_last_end_update_time_Valid() const{
    return m_last_end_update_time_isValid;
}

QDateTime OAIIntegrationRuntimeNodes_Get_200_response::getLastStartTime() const {
    return m_last_start_time;
}
void OAIIntegrationRuntimeNodes_Get_200_response::setLastStartTime(const QDateTime &last_start_time) {
    m_last_start_time = last_start_time;
    m_last_start_time_isSet = true;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_last_start_time_Set() const{
    return m_last_start_time_isSet;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_last_start_time_Valid() const{
    return m_last_start_time_isValid;
}

QDateTime OAIIntegrationRuntimeNodes_Get_200_response::getLastStartUpdateTime() const {
    return m_last_start_update_time;
}
void OAIIntegrationRuntimeNodes_Get_200_response::setLastStartUpdateTime(const QDateTime &last_start_update_time) {
    m_last_start_update_time = last_start_update_time;
    m_last_start_update_time_isSet = true;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_last_start_update_time_Set() const{
    return m_last_start_update_time_isSet;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_last_start_update_time_Valid() const{
    return m_last_start_update_time_isValid;
}

QDateTime OAIIntegrationRuntimeNodes_Get_200_response::getLastStopTime() const {
    return m_last_stop_time;
}
void OAIIntegrationRuntimeNodes_Get_200_response::setLastStopTime(const QDateTime &last_stop_time) {
    m_last_stop_time = last_stop_time;
    m_last_stop_time_isSet = true;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_last_stop_time_Set() const{
    return m_last_stop_time_isSet;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_last_stop_time_Valid() const{
    return m_last_stop_time_isValid;
}

QString OAIIntegrationRuntimeNodes_Get_200_response::getLastUpdateResult() const {
    return m_last_update_result;
}
void OAIIntegrationRuntimeNodes_Get_200_response::setLastUpdateResult(const QString &last_update_result) {
    m_last_update_result = last_update_result;
    m_last_update_result_isSet = true;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_last_update_result_Set() const{
    return m_last_update_result_isSet;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_last_update_result_Valid() const{
    return m_last_update_result_isValid;
}

QString OAIIntegrationRuntimeNodes_Get_200_response::getMachineName() const {
    return m_machine_name;
}
void OAIIntegrationRuntimeNodes_Get_200_response::setMachineName(const QString &machine_name) {
    m_machine_name = machine_name;
    m_machine_name_isSet = true;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_machine_name_Set() const{
    return m_machine_name_isSet;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_machine_name_Valid() const{
    return m_machine_name_isValid;
}

qint32 OAIIntegrationRuntimeNodes_Get_200_response::getMaxConcurrentJobs() const {
    return m_max_concurrent_jobs;
}
void OAIIntegrationRuntimeNodes_Get_200_response::setMaxConcurrentJobs(const qint32 &max_concurrent_jobs) {
    m_max_concurrent_jobs = max_concurrent_jobs;
    m_max_concurrent_jobs_isSet = true;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_max_concurrent_jobs_Set() const{
    return m_max_concurrent_jobs_isSet;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_max_concurrent_jobs_Valid() const{
    return m_max_concurrent_jobs_isValid;
}

QString OAIIntegrationRuntimeNodes_Get_200_response::getNodeName() const {
    return m_node_name;
}
void OAIIntegrationRuntimeNodes_Get_200_response::setNodeName(const QString &node_name) {
    m_node_name = node_name;
    m_node_name_isSet = true;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_node_name_Set() const{
    return m_node_name_isSet;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_node_name_Valid() const{
    return m_node_name_isValid;
}

QDateTime OAIIntegrationRuntimeNodes_Get_200_response::getRegisterTime() const {
    return m_register_time;
}
void OAIIntegrationRuntimeNodes_Get_200_response::setRegisterTime(const QDateTime &register_time) {
    m_register_time = register_time;
    m_register_time_isSet = true;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_register_time_Set() const{
    return m_register_time_isSet;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_register_time_Valid() const{
    return m_register_time_isValid;
}

QString OAIIntegrationRuntimeNodes_Get_200_response::getStatus() const {
    return m_status;
}
void OAIIntegrationRuntimeNodes_Get_200_response::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_status_Set() const{
    return m_status_isSet;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIIntegrationRuntimeNodes_Get_200_response::getVersion() const {
    return m_version;
}
void OAIIntegrationRuntimeNodes_Get_200_response::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_version_Set() const{
    return m_version_isSet;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_version_Valid() const{
    return m_version_isValid;
}

QString OAIIntegrationRuntimeNodes_Get_200_response::getVersionStatus() const {
    return m_version_status;
}
void OAIIntegrationRuntimeNodes_Get_200_response::setVersionStatus(const QString &version_status) {
    m_version_status = version_status;
    m_version_status_isSet = true;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_version_status_Set() const{
    return m_version_status_isSet;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::is_version_status_Valid() const{
    return m_version_status_isValid;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_concurrent_jobs_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_service_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_dispatcher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_connect_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_end_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_start_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_stop_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_concurrent_jobs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_register_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntegrationRuntimeNodes_Get_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
