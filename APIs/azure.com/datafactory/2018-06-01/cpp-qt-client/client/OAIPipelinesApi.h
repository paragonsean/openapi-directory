/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPipelinesApi_H
#define OAI_OAIPipelinesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAICreateRunResponse.h"
#include "OAIObject.h"
#include "OAIPipelineListResponse.h"
#include "OAIPipelineResource.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPipelinesApi : public QObject {
    Q_OBJECT

public:
    OAIPipelinesApi(const int timeOut = 0);
    ~OAIPipelinesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  pipeline_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  pipeline OAIPipelineResource [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void pipelinesCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &pipeline_name, const QString &api_version, const OAIPipelineResource &pipeline, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  pipeline_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  reference_pipeline_run_id QString [optional]
    * @param[in]  is_recovery bool [optional]
    * @param[in]  start_activity_name QString [optional]
    * @param[in]  parameters QMap<QString, OAIObject> [optional]
    */
    virtual void pipelinesCreateRun(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &pipeline_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &reference_pipeline_run_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_recovery = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &start_activity_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QMap<QString, OAIObject>> &parameters = ::OpenAPI::OptionalParam<QMap<QString, OAIObject>>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  pipeline_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void pipelinesDelete(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &pipeline_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  pipeline_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void pipelinesGet(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &pipeline_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void pipelinesListByFactory(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void pipelinesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void pipelinesCreateRunCallback(OAIHttpRequestWorker *worker);
    void pipelinesDeleteCallback(OAIHttpRequestWorker *worker);
    void pipelinesGetCallback(OAIHttpRequestWorker *worker);
    void pipelinesListByFactoryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void pipelinesCreateOrUpdateSignal(OAIPipelineResource summary);
    void pipelinesCreateRunSignal(OAICreateRunResponse summary);
    void pipelinesDeleteSignal();
    void pipelinesGetSignal(OAIPipelineResource summary);
    void pipelinesListByFactorySignal(OAIPipelineListResponse summary);


    void pipelinesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPipelineResource summary);
    void pipelinesCreateRunSignalFull(OAIHttpRequestWorker *worker, OAICreateRunResponse summary);
    void pipelinesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void pipelinesGetSignalFull(OAIHttpRequestWorker *worker, OAIPipelineResource summary);
    void pipelinesListByFactorySignalFull(OAIHttpRequestWorker *worker, OAIPipelineListResponse summary);

    Q_DECL_DEPRECATED_X("Use pipelinesCreateOrUpdateSignalError() instead")
    void pipelinesCreateOrUpdateSignalE(OAIPipelineResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pipelinesCreateOrUpdateSignalError(OAIPipelineResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pipelinesCreateRunSignalError() instead")
    void pipelinesCreateRunSignalE(OAICreateRunResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pipelinesCreateRunSignalError(OAICreateRunResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pipelinesDeleteSignalError() instead")
    void pipelinesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pipelinesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pipelinesGetSignalError() instead")
    void pipelinesGetSignalE(OAIPipelineResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pipelinesGetSignalError(OAIPipelineResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pipelinesListByFactorySignalError() instead")
    void pipelinesListByFactorySignalE(OAIPipelineListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pipelinesListByFactorySignalError(OAIPipelineListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use pipelinesCreateOrUpdateSignalErrorFull() instead")
    void pipelinesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pipelinesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pipelinesCreateRunSignalErrorFull() instead")
    void pipelinesCreateRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pipelinesCreateRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pipelinesDeleteSignalErrorFull() instead")
    void pipelinesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pipelinesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pipelinesGetSignalErrorFull() instead")
    void pipelinesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pipelinesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pipelinesListByFactorySignalErrorFull() instead")
    void pipelinesListByFactorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pipelinesListByFactorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
