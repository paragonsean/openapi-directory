/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunFilterParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunFilterParameters::OAIRunFilterParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunFilterParameters::OAIRunFilterParameters() {
    this->initializeModel();
}

OAIRunFilterParameters::~OAIRunFilterParameters() {}

void OAIRunFilterParameters::initializeModel() {

    m_continuation_token_isSet = false;
    m_continuation_token_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_last_updated_after_isSet = false;
    m_last_updated_after_isValid = false;

    m_last_updated_before_isSet = false;
    m_last_updated_before_isValid = false;

    m_order_by_isSet = false;
    m_order_by_isValid = false;
}

void OAIRunFilterParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunFilterParameters::fromJsonObject(QJsonObject json) {

    m_continuation_token_isValid = ::OpenAPI::fromJsonValue(m_continuation_token, json[QString("continuationToken")]);
    m_continuation_token_isSet = !json[QString("continuationToken")].isNull() && m_continuation_token_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_last_updated_after_isValid = ::OpenAPI::fromJsonValue(m_last_updated_after, json[QString("lastUpdatedAfter")]);
    m_last_updated_after_isSet = !json[QString("lastUpdatedAfter")].isNull() && m_last_updated_after_isValid;

    m_last_updated_before_isValid = ::OpenAPI::fromJsonValue(m_last_updated_before, json[QString("lastUpdatedBefore")]);
    m_last_updated_before_isSet = !json[QString("lastUpdatedBefore")].isNull() && m_last_updated_before_isValid;

    m_order_by_isValid = ::OpenAPI::fromJsonValue(m_order_by, json[QString("orderBy")]);
    m_order_by_isSet = !json[QString("orderBy")].isNull() && m_order_by_isValid;
}

QString OAIRunFilterParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunFilterParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_continuation_token_isSet) {
        obj.insert(QString("continuationToken"), ::OpenAPI::toJsonValue(m_continuation_token));
    }
    if (m_filters.size() > 0) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_last_updated_after_isSet) {
        obj.insert(QString("lastUpdatedAfter"), ::OpenAPI::toJsonValue(m_last_updated_after));
    }
    if (m_last_updated_before_isSet) {
        obj.insert(QString("lastUpdatedBefore"), ::OpenAPI::toJsonValue(m_last_updated_before));
    }
    if (m_order_by.size() > 0) {
        obj.insert(QString("orderBy"), ::OpenAPI::toJsonValue(m_order_by));
    }
    return obj;
}

QString OAIRunFilterParameters::getContinuationToken() const {
    return m_continuation_token;
}
void OAIRunFilterParameters::setContinuationToken(const QString &continuation_token) {
    m_continuation_token = continuation_token;
    m_continuation_token_isSet = true;
}

bool OAIRunFilterParameters::is_continuation_token_Set() const{
    return m_continuation_token_isSet;
}

bool OAIRunFilterParameters::is_continuation_token_Valid() const{
    return m_continuation_token_isValid;
}

QList<OAIRunQueryFilter> OAIRunFilterParameters::getFilters() const {
    return m_filters;
}
void OAIRunFilterParameters::setFilters(const QList<OAIRunQueryFilter> &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIRunFilterParameters::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIRunFilterParameters::is_filters_Valid() const{
    return m_filters_isValid;
}

QDateTime OAIRunFilterParameters::getLastUpdatedAfter() const {
    return m_last_updated_after;
}
void OAIRunFilterParameters::setLastUpdatedAfter(const QDateTime &last_updated_after) {
    m_last_updated_after = last_updated_after;
    m_last_updated_after_isSet = true;
}

bool OAIRunFilterParameters::is_last_updated_after_Set() const{
    return m_last_updated_after_isSet;
}

bool OAIRunFilterParameters::is_last_updated_after_Valid() const{
    return m_last_updated_after_isValid;
}

QDateTime OAIRunFilterParameters::getLastUpdatedBefore() const {
    return m_last_updated_before;
}
void OAIRunFilterParameters::setLastUpdatedBefore(const QDateTime &last_updated_before) {
    m_last_updated_before = last_updated_before;
    m_last_updated_before_isSet = true;
}

bool OAIRunFilterParameters::is_last_updated_before_Set() const{
    return m_last_updated_before_isSet;
}

bool OAIRunFilterParameters::is_last_updated_before_Valid() const{
    return m_last_updated_before_isValid;
}

QList<OAIRunQueryOrderBy> OAIRunFilterParameters::getOrderBy() const {
    return m_order_by;
}
void OAIRunFilterParameters::setOrderBy(const QList<OAIRunQueryOrderBy> &order_by) {
    m_order_by = order_by;
    m_order_by_isSet = true;
}

bool OAIRunFilterParameters::is_order_by_Set() const{
    return m_order_by_isSet;
}

bool OAIRunFilterParameters::is_order_by_Valid() const{
    return m_order_by_isValid;
}

bool OAIRunFilterParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_continuation_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_by.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunFilterParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_last_updated_after_isValid && m_last_updated_before_isValid && true;
}

} // namespace OpenAPI
