/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDataFlowDebugSessionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDataFlowDebugSessionRequest::OAICreateDataFlowDebugSessionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDataFlowDebugSessionRequest::OAICreateDataFlowDebugSessionRequest() {
    this->initializeModel();
}

OAICreateDataFlowDebugSessionRequest::~OAICreateDataFlowDebugSessionRequest() {}

void OAICreateDataFlowDebugSessionRequest::initializeModel() {

    m_compute_type_isSet = false;
    m_compute_type_isValid = false;

    m_core_count_isSet = false;
    m_core_count_isValid = false;

    m_integration_runtime_isSet = false;
    m_integration_runtime_isValid = false;

    m_time_to_live_isSet = false;
    m_time_to_live_isValid = false;
}

void OAICreateDataFlowDebugSessionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDataFlowDebugSessionRequest::fromJsonObject(QJsonObject json) {

    m_compute_type_isValid = ::OpenAPI::fromJsonValue(m_compute_type, json[QString("computeType")]);
    m_compute_type_isSet = !json[QString("computeType")].isNull() && m_compute_type_isValid;

    m_core_count_isValid = ::OpenAPI::fromJsonValue(m_core_count, json[QString("coreCount")]);
    m_core_count_isSet = !json[QString("coreCount")].isNull() && m_core_count_isValid;

    m_integration_runtime_isValid = ::OpenAPI::fromJsonValue(m_integration_runtime, json[QString("integrationRuntime")]);
    m_integration_runtime_isSet = !json[QString("integrationRuntime")].isNull() && m_integration_runtime_isValid;

    m_time_to_live_isValid = ::OpenAPI::fromJsonValue(m_time_to_live, json[QString("timeToLive")]);
    m_time_to_live_isSet = !json[QString("timeToLive")].isNull() && m_time_to_live_isValid;
}

QString OAICreateDataFlowDebugSessionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDataFlowDebugSessionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_compute_type_isSet) {
        obj.insert(QString("computeType"), ::OpenAPI::toJsonValue(m_compute_type));
    }
    if (m_core_count_isSet) {
        obj.insert(QString("coreCount"), ::OpenAPI::toJsonValue(m_core_count));
    }
    if (m_integration_runtime.isSet()) {
        obj.insert(QString("integrationRuntime"), ::OpenAPI::toJsonValue(m_integration_runtime));
    }
    if (m_time_to_live_isSet) {
        obj.insert(QString("timeToLive"), ::OpenAPI::toJsonValue(m_time_to_live));
    }
    return obj;
}

QString OAICreateDataFlowDebugSessionRequest::getComputeType() const {
    return m_compute_type;
}
void OAICreateDataFlowDebugSessionRequest::setComputeType(const QString &compute_type) {
    m_compute_type = compute_type;
    m_compute_type_isSet = true;
}

bool OAICreateDataFlowDebugSessionRequest::is_compute_type_Set() const{
    return m_compute_type_isSet;
}

bool OAICreateDataFlowDebugSessionRequest::is_compute_type_Valid() const{
    return m_compute_type_isValid;
}

qint32 OAICreateDataFlowDebugSessionRequest::getCoreCount() const {
    return m_core_count;
}
void OAICreateDataFlowDebugSessionRequest::setCoreCount(const qint32 &core_count) {
    m_core_count = core_count;
    m_core_count_isSet = true;
}

bool OAICreateDataFlowDebugSessionRequest::is_core_count_Set() const{
    return m_core_count_isSet;
}

bool OAICreateDataFlowDebugSessionRequest::is_core_count_Valid() const{
    return m_core_count_isValid;
}

OAIIntegrationRuntimeDebugResource OAICreateDataFlowDebugSessionRequest::getIntegrationRuntime() const {
    return m_integration_runtime;
}
void OAICreateDataFlowDebugSessionRequest::setIntegrationRuntime(const OAIIntegrationRuntimeDebugResource &integration_runtime) {
    m_integration_runtime = integration_runtime;
    m_integration_runtime_isSet = true;
}

bool OAICreateDataFlowDebugSessionRequest::is_integration_runtime_Set() const{
    return m_integration_runtime_isSet;
}

bool OAICreateDataFlowDebugSessionRequest::is_integration_runtime_Valid() const{
    return m_integration_runtime_isValid;
}

qint32 OAICreateDataFlowDebugSessionRequest::getTimeToLive() const {
    return m_time_to_live;
}
void OAICreateDataFlowDebugSessionRequest::setTimeToLive(const qint32 &time_to_live) {
    m_time_to_live = time_to_live;
    m_time_to_live_isSet = true;
}

bool OAICreateDataFlowDebugSessionRequest::is_time_to_live_Set() const{
    return m_time_to_live_isSet;
}

bool OAICreateDataFlowDebugSessionRequest::is_time_to_live_Valid() const{
    return m_time_to_live_isValid;
}

bool OAICreateDataFlowDebugSessionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compute_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_core_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_runtime.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_to_live_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDataFlowDebugSessionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
