/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIntegrationRuntimesApi_H
#define OAI_OAIIntegrationRuntimesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAICreateLinkedIntegrationRuntimeRequest.h"
#include "OAIIntegrationRuntimeListResponse.h"
#include "OAIIntegrationRuntimeResource.h"
#include "OAIIntegrationRuntimeStatusResponse.h"
#include "OAIIntegrationRuntimes_GetConnectionInfo_200_response.h"
#include "OAIIntegrationRuntimes_GetMonitoringData_200_response.h"
#include "OAIIntegrationRuntimes_ListAuthKeys_200_response.h"
#include "OAIIntegrationRuntimes_RegenerateAuthKey_request.h"
#include "OAILinkedIntegrationRuntimeRequest.h"
#include "OAIUpdateIntegrationRuntimeRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIntegrationRuntimesApi : public QObject {
    Q_OBJECT

public:
    OAIIntegrationRuntimesApi(const int timeOut = 0);
    ~OAIIntegrationRuntimesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  integration_runtime_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_linked_integration_runtime_request OAICreateLinkedIntegrationRuntimeRequest [required]
    */
    virtual void integrationRuntimesCreateLinkedIntegrationRuntime(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &integration_runtime_name, const QString &api_version, const OAICreateLinkedIntegrationRuntimeRequest &create_linked_integration_runtime_request);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  integration_runtime_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  integration_runtime OAIIntegrationRuntimeResource [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void integrationRuntimesCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &integration_runtime_name, const QString &api_version, const OAIIntegrationRuntimeResource &integration_runtime, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  integration_runtime_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void integrationRuntimesDelete(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &integration_runtime_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  integration_runtime_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void integrationRuntimesGet(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &integration_runtime_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  integration_runtime_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void integrationRuntimesGetConnectionInfo(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &integration_runtime_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  integration_runtime_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void integrationRuntimesGetMonitoringData(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &integration_runtime_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  integration_runtime_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void integrationRuntimesGetStatus(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &integration_runtime_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  integration_runtime_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void integrationRuntimesListAuthKeys(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &integration_runtime_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void integrationRuntimesListByFactory(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  integration_runtime_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  regenerate_key_parameters OAIIntegrationRuntimes_RegenerateAuthKey_request [required]
    */
    virtual void integrationRuntimesRegenerateAuthKey(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &integration_runtime_name, const QString &api_version, const OAIIntegrationRuntimes_RegenerateAuthKey_request &regenerate_key_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  integration_runtime_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  linked_integration_runtime_request OAILinkedIntegrationRuntimeRequest [required]
    */
    virtual void integrationRuntimesRemoveLinks(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &integration_runtime_name, const QString &api_version, const OAILinkedIntegrationRuntimeRequest &linked_integration_runtime_request);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  integration_runtime_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void integrationRuntimesStart(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &integration_runtime_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  integration_runtime_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void integrationRuntimesStop(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &integration_runtime_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  integration_runtime_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void integrationRuntimesSyncCredentials(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &integration_runtime_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  integration_runtime_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  update_integration_runtime_request OAIUpdateIntegrationRuntimeRequest [required]
    */
    virtual void integrationRuntimesUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &integration_runtime_name, const QString &api_version, const OAIUpdateIntegrationRuntimeRequest &update_integration_runtime_request);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  integration_runtime_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void integrationRuntimesUpgrade(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &integration_runtime_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void integrationRuntimesCreateLinkedIntegrationRuntimeCallback(OAIHttpRequestWorker *worker);
    void integrationRuntimesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void integrationRuntimesDeleteCallback(OAIHttpRequestWorker *worker);
    void integrationRuntimesGetCallback(OAIHttpRequestWorker *worker);
    void integrationRuntimesGetConnectionInfoCallback(OAIHttpRequestWorker *worker);
    void integrationRuntimesGetMonitoringDataCallback(OAIHttpRequestWorker *worker);
    void integrationRuntimesGetStatusCallback(OAIHttpRequestWorker *worker);
    void integrationRuntimesListAuthKeysCallback(OAIHttpRequestWorker *worker);
    void integrationRuntimesListByFactoryCallback(OAIHttpRequestWorker *worker);
    void integrationRuntimesRegenerateAuthKeyCallback(OAIHttpRequestWorker *worker);
    void integrationRuntimesRemoveLinksCallback(OAIHttpRequestWorker *worker);
    void integrationRuntimesStartCallback(OAIHttpRequestWorker *worker);
    void integrationRuntimesStopCallback(OAIHttpRequestWorker *worker);
    void integrationRuntimesSyncCredentialsCallback(OAIHttpRequestWorker *worker);
    void integrationRuntimesUpdateCallback(OAIHttpRequestWorker *worker);
    void integrationRuntimesUpgradeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void integrationRuntimesCreateLinkedIntegrationRuntimeSignal(OAIIntegrationRuntimeStatusResponse summary);
    void integrationRuntimesCreateOrUpdateSignal(OAIIntegrationRuntimeResource summary);
    void integrationRuntimesDeleteSignal();
    void integrationRuntimesGetSignal(OAIIntegrationRuntimeResource summary);
    void integrationRuntimesGetConnectionInfoSignal(OAIIntegrationRuntimes_GetConnectionInfo_200_response summary);
    void integrationRuntimesGetMonitoringDataSignal(OAIIntegrationRuntimes_GetMonitoringData_200_response summary);
    void integrationRuntimesGetStatusSignal(OAIIntegrationRuntimeStatusResponse summary);
    void integrationRuntimesListAuthKeysSignal(OAIIntegrationRuntimes_ListAuthKeys_200_response summary);
    void integrationRuntimesListByFactorySignal(OAIIntegrationRuntimeListResponse summary);
    void integrationRuntimesRegenerateAuthKeySignal(OAIIntegrationRuntimes_ListAuthKeys_200_response summary);
    void integrationRuntimesRemoveLinksSignal();
    void integrationRuntimesStartSignal(OAIIntegrationRuntimeStatusResponse summary);
    void integrationRuntimesStopSignal();
    void integrationRuntimesSyncCredentialsSignal();
    void integrationRuntimesUpdateSignal(OAIIntegrationRuntimeResource summary);
    void integrationRuntimesUpgradeSignal();


    void integrationRuntimesCreateLinkedIntegrationRuntimeSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationRuntimeStatusResponse summary);
    void integrationRuntimesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationRuntimeResource summary);
    void integrationRuntimesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void integrationRuntimesGetSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationRuntimeResource summary);
    void integrationRuntimesGetConnectionInfoSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationRuntimes_GetConnectionInfo_200_response summary);
    void integrationRuntimesGetMonitoringDataSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationRuntimes_GetMonitoringData_200_response summary);
    void integrationRuntimesGetStatusSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationRuntimeStatusResponse summary);
    void integrationRuntimesListAuthKeysSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationRuntimes_ListAuthKeys_200_response summary);
    void integrationRuntimesListByFactorySignalFull(OAIHttpRequestWorker *worker, OAIIntegrationRuntimeListResponse summary);
    void integrationRuntimesRegenerateAuthKeySignalFull(OAIHttpRequestWorker *worker, OAIIntegrationRuntimes_ListAuthKeys_200_response summary);
    void integrationRuntimesRemoveLinksSignalFull(OAIHttpRequestWorker *worker);
    void integrationRuntimesStartSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationRuntimeStatusResponse summary);
    void integrationRuntimesStopSignalFull(OAIHttpRequestWorker *worker);
    void integrationRuntimesSyncCredentialsSignalFull(OAIHttpRequestWorker *worker);
    void integrationRuntimesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationRuntimeResource summary);
    void integrationRuntimesUpgradeSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use integrationRuntimesCreateLinkedIntegrationRuntimeSignalError() instead")
    void integrationRuntimesCreateLinkedIntegrationRuntimeSignalE(OAIIntegrationRuntimeStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesCreateLinkedIntegrationRuntimeSignalError(OAIIntegrationRuntimeStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesCreateOrUpdateSignalError() instead")
    void integrationRuntimesCreateOrUpdateSignalE(OAIIntegrationRuntimeResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesCreateOrUpdateSignalError(OAIIntegrationRuntimeResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesDeleteSignalError() instead")
    void integrationRuntimesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesGetSignalError() instead")
    void integrationRuntimesGetSignalE(OAIIntegrationRuntimeResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesGetSignalError(OAIIntegrationRuntimeResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesGetConnectionInfoSignalError() instead")
    void integrationRuntimesGetConnectionInfoSignalE(OAIIntegrationRuntimes_GetConnectionInfo_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesGetConnectionInfoSignalError(OAIIntegrationRuntimes_GetConnectionInfo_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesGetMonitoringDataSignalError() instead")
    void integrationRuntimesGetMonitoringDataSignalE(OAIIntegrationRuntimes_GetMonitoringData_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesGetMonitoringDataSignalError(OAIIntegrationRuntimes_GetMonitoringData_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesGetStatusSignalError() instead")
    void integrationRuntimesGetStatusSignalE(OAIIntegrationRuntimeStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesGetStatusSignalError(OAIIntegrationRuntimeStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesListAuthKeysSignalError() instead")
    void integrationRuntimesListAuthKeysSignalE(OAIIntegrationRuntimes_ListAuthKeys_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesListAuthKeysSignalError(OAIIntegrationRuntimes_ListAuthKeys_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesListByFactorySignalError() instead")
    void integrationRuntimesListByFactorySignalE(OAIIntegrationRuntimeListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesListByFactorySignalError(OAIIntegrationRuntimeListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesRegenerateAuthKeySignalError() instead")
    void integrationRuntimesRegenerateAuthKeySignalE(OAIIntegrationRuntimes_ListAuthKeys_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesRegenerateAuthKeySignalError(OAIIntegrationRuntimes_ListAuthKeys_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesRemoveLinksSignalError() instead")
    void integrationRuntimesRemoveLinksSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesRemoveLinksSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesStartSignalError() instead")
    void integrationRuntimesStartSignalE(OAIIntegrationRuntimeStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesStartSignalError(OAIIntegrationRuntimeStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesStopSignalError() instead")
    void integrationRuntimesStopSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesStopSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesSyncCredentialsSignalError() instead")
    void integrationRuntimesSyncCredentialsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesSyncCredentialsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesUpdateSignalError() instead")
    void integrationRuntimesUpdateSignalE(OAIIntegrationRuntimeResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesUpdateSignalError(OAIIntegrationRuntimeResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesUpgradeSignalError() instead")
    void integrationRuntimesUpgradeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesUpgradeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use integrationRuntimesCreateLinkedIntegrationRuntimeSignalErrorFull() instead")
    void integrationRuntimesCreateLinkedIntegrationRuntimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesCreateLinkedIntegrationRuntimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesCreateOrUpdateSignalErrorFull() instead")
    void integrationRuntimesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesDeleteSignalErrorFull() instead")
    void integrationRuntimesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesGetSignalErrorFull() instead")
    void integrationRuntimesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesGetConnectionInfoSignalErrorFull() instead")
    void integrationRuntimesGetConnectionInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesGetConnectionInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesGetMonitoringDataSignalErrorFull() instead")
    void integrationRuntimesGetMonitoringDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesGetMonitoringDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesGetStatusSignalErrorFull() instead")
    void integrationRuntimesGetStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesGetStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesListAuthKeysSignalErrorFull() instead")
    void integrationRuntimesListAuthKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesListAuthKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesListByFactorySignalErrorFull() instead")
    void integrationRuntimesListByFactorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesListByFactorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesRegenerateAuthKeySignalErrorFull() instead")
    void integrationRuntimesRegenerateAuthKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesRegenerateAuthKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesRemoveLinksSignalErrorFull() instead")
    void integrationRuntimesRemoveLinksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesRemoveLinksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesStartSignalErrorFull() instead")
    void integrationRuntimesStartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesStartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesStopSignalErrorFull() instead")
    void integrationRuntimesStopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesStopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesSyncCredentialsSignalErrorFull() instead")
    void integrationRuntimesSyncCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesSyncCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesUpdateSignalErrorFull() instead")
    void integrationRuntimesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationRuntimesUpgradeSignalErrorFull() instead")
    void integrationRuntimesUpgradeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationRuntimesUpgradeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
