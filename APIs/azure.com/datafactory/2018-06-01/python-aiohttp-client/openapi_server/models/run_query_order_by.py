# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RunQueryOrderBy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, order: str=None, order_by: str=None):
        """RunQueryOrderBy - a model defined in OpenAPI

        :param order: The order of this RunQueryOrderBy.
        :param order_by: The order_by of this RunQueryOrderBy.
        """
        self.openapi_types = {
            'order': str,
            'order_by': str
        }

        self.attribute_map = {
            'order': 'order',
            'order_by': 'orderBy'
        }

        self._order = order
        self._order_by = order_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunQueryOrderBy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunQueryOrderBy of this RunQueryOrderBy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def order(self):
        """Gets the order of this RunQueryOrderBy.

        Sorting order of the parameter.

        :return: The order of this RunQueryOrderBy.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this RunQueryOrderBy.

        Sorting order of the parameter.

        :param order: The order of this RunQueryOrderBy.
        :type order: str
        """
        allowed_values = ["ASC", "DESC"]  # noqa: E501
        if order not in allowed_values:
            raise ValueError(
                "Invalid value for `order` ({0}), must be one of {1}"
                .format(order, allowed_values)
            )

        self._order = order

    @property
    def order_by(self):
        """Gets the order_by of this RunQueryOrderBy.

        Parameter name to be used for order by. The allowed parameters to order by for pipeline runs are PipelineName, RunStart, RunEnd and Status; for activity runs are ActivityName, ActivityRunStart, ActivityRunEnd and Status; for trigger runs are TriggerName, TriggerRunTimestamp and Status.

        :return: The order_by of this RunQueryOrderBy.
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this RunQueryOrderBy.

        Parameter name to be used for order by. The allowed parameters to order by for pipeline runs are PipelineName, RunStart, RunEnd and Status; for activity runs are ActivityName, ActivityRunStart, ActivityRunEnd and Status; for trigger runs are TriggerName, TriggerRunTimestamp and Status.

        :param order_by: The order_by of this RunQueryOrderBy.
        :type order_by: str
        """
        allowed_values = ["RunStart", "RunEnd", "PipelineName", "Status", "ActivityName", "ActivityRunStart", "ActivityRunEnd", "TriggerName", "TriggerRunTimestamp"]  # noqa: E501
        if order_by not in allowed_values:
            raise ValueError(
                "Invalid value for `order_by` ({0}), must be one of {1}"
                .format(order_by, allowed_values)
            )

        self._order_by = order_by
