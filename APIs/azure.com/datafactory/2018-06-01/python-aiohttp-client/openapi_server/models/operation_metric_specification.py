# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.operation_metric_availability import OperationMetricAvailability
from openapi_server.models.operation_metric_dimension import OperationMetricDimension
from openapi_server import util


class OperationMetricSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation_type: str=None, availabilities: List[OperationMetricAvailability]=None, dimensions: List[OperationMetricDimension]=None, display_description: str=None, display_name: str=None, enable_regional_mdm_account: str=None, name: str=None, source_mdm_account: str=None, source_mdm_namespace: str=None, unit: str=None):
        """OperationMetricSpecification - a model defined in OpenAPI

        :param aggregation_type: The aggregation_type of this OperationMetricSpecification.
        :param availabilities: The availabilities of this OperationMetricSpecification.
        :param dimensions: The dimensions of this OperationMetricSpecification.
        :param display_description: The display_description of this OperationMetricSpecification.
        :param display_name: The display_name of this OperationMetricSpecification.
        :param enable_regional_mdm_account: The enable_regional_mdm_account of this OperationMetricSpecification.
        :param name: The name of this OperationMetricSpecification.
        :param source_mdm_account: The source_mdm_account of this OperationMetricSpecification.
        :param source_mdm_namespace: The source_mdm_namespace of this OperationMetricSpecification.
        :param unit: The unit of this OperationMetricSpecification.
        """
        self.openapi_types = {
            'aggregation_type': str,
            'availabilities': List[OperationMetricAvailability],
            'dimensions': List[OperationMetricDimension],
            'display_description': str,
            'display_name': str,
            'enable_regional_mdm_account': str,
            'name': str,
            'source_mdm_account': str,
            'source_mdm_namespace': str,
            'unit': str
        }

        self.attribute_map = {
            'aggregation_type': 'aggregationType',
            'availabilities': 'availabilities',
            'dimensions': 'dimensions',
            'display_description': 'displayDescription',
            'display_name': 'displayName',
            'enable_regional_mdm_account': 'enableRegionalMdmAccount',
            'name': 'name',
            'source_mdm_account': 'sourceMdmAccount',
            'source_mdm_namespace': 'sourceMdmNamespace',
            'unit': 'unit'
        }

        self._aggregation_type = aggregation_type
        self._availabilities = availabilities
        self._dimensions = dimensions
        self._display_description = display_description
        self._display_name = display_name
        self._enable_regional_mdm_account = enable_regional_mdm_account
        self._name = name
        self._source_mdm_account = source_mdm_account
        self._source_mdm_namespace = source_mdm_namespace
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OperationMetricSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OperationMetricSpecification of this OperationMetricSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation_type(self):
        """Gets the aggregation_type of this OperationMetricSpecification.

        The type of metric aggregation.

        :return: The aggregation_type of this OperationMetricSpecification.
        :rtype: str
        """
        return self._aggregation_type

    @aggregation_type.setter
    def aggregation_type(self, aggregation_type):
        """Sets the aggregation_type of this OperationMetricSpecification.

        The type of metric aggregation.

        :param aggregation_type: The aggregation_type of this OperationMetricSpecification.
        :type aggregation_type: str
        """

        self._aggregation_type = aggregation_type

    @property
    def availabilities(self):
        """Gets the availabilities of this OperationMetricSpecification.

        Defines how often data for metrics becomes available.

        :return: The availabilities of this OperationMetricSpecification.
        :rtype: List[OperationMetricAvailability]
        """
        return self._availabilities

    @availabilities.setter
    def availabilities(self, availabilities):
        """Sets the availabilities of this OperationMetricSpecification.

        Defines how often data for metrics becomes available.

        :param availabilities: The availabilities of this OperationMetricSpecification.
        :type availabilities: List[OperationMetricAvailability]
        """

        self._availabilities = availabilities

    @property
    def dimensions(self):
        """Gets the dimensions of this OperationMetricSpecification.

        Defines the metric dimension.

        :return: The dimensions of this OperationMetricSpecification.
        :rtype: List[OperationMetricDimension]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this OperationMetricSpecification.

        Defines the metric dimension.

        :param dimensions: The dimensions of this OperationMetricSpecification.
        :type dimensions: List[OperationMetricDimension]
        """

        self._dimensions = dimensions

    @property
    def display_description(self):
        """Gets the display_description of this OperationMetricSpecification.

        The description of the metric.

        :return: The display_description of this OperationMetricSpecification.
        :rtype: str
        """
        return self._display_description

    @display_description.setter
    def display_description(self, display_description):
        """Sets the display_description of this OperationMetricSpecification.

        The description of the metric.

        :param display_description: The display_description of this OperationMetricSpecification.
        :type display_description: str
        """

        self._display_description = display_description

    @property
    def display_name(self):
        """Gets the display_name of this OperationMetricSpecification.

        Localized display name of the metric.

        :return: The display_name of this OperationMetricSpecification.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this OperationMetricSpecification.

        Localized display name of the metric.

        :param display_name: The display_name of this OperationMetricSpecification.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def enable_regional_mdm_account(self):
        """Gets the enable_regional_mdm_account of this OperationMetricSpecification.

        Whether or not the service is using regional MDM accounts.

        :return: The enable_regional_mdm_account of this OperationMetricSpecification.
        :rtype: str
        """
        return self._enable_regional_mdm_account

    @enable_regional_mdm_account.setter
    def enable_regional_mdm_account(self, enable_regional_mdm_account):
        """Sets the enable_regional_mdm_account of this OperationMetricSpecification.

        Whether or not the service is using regional MDM accounts.

        :param enable_regional_mdm_account: The enable_regional_mdm_account of this OperationMetricSpecification.
        :type enable_regional_mdm_account: str
        """

        self._enable_regional_mdm_account = enable_regional_mdm_account

    @property
    def name(self):
        """Gets the name of this OperationMetricSpecification.

        The name of the metric.

        :return: The name of this OperationMetricSpecification.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OperationMetricSpecification.

        The name of the metric.

        :param name: The name of this OperationMetricSpecification.
        :type name: str
        """

        self._name = name

    @property
    def source_mdm_account(self):
        """Gets the source_mdm_account of this OperationMetricSpecification.

        The name of the MDM account.

        :return: The source_mdm_account of this OperationMetricSpecification.
        :rtype: str
        """
        return self._source_mdm_account

    @source_mdm_account.setter
    def source_mdm_account(self, source_mdm_account):
        """Sets the source_mdm_account of this OperationMetricSpecification.

        The name of the MDM account.

        :param source_mdm_account: The source_mdm_account of this OperationMetricSpecification.
        :type source_mdm_account: str
        """

        self._source_mdm_account = source_mdm_account

    @property
    def source_mdm_namespace(self):
        """Gets the source_mdm_namespace of this OperationMetricSpecification.

        The name of the MDM namespace.

        :return: The source_mdm_namespace of this OperationMetricSpecification.
        :rtype: str
        """
        return self._source_mdm_namespace

    @source_mdm_namespace.setter
    def source_mdm_namespace(self, source_mdm_namespace):
        """Sets the source_mdm_namespace of this OperationMetricSpecification.

        The name of the MDM namespace.

        :param source_mdm_namespace: The source_mdm_namespace of this OperationMetricSpecification.
        :type source_mdm_namespace: str
        """

        self._source_mdm_namespace = source_mdm_namespace

    @property
    def unit(self):
        """Gets the unit of this OperationMetricSpecification.

        The unit that the metric is measured in.

        :return: The unit of this OperationMetricSpecification.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this OperationMetricSpecification.

        The unit that the metric is measured in.

        :param unit: The unit of this OperationMetricSpecification.
        :type unit: str
        """

        self._unit = unit
