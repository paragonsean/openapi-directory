# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FactoryRepoConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_name: str=None, collaboration_branch: str=None, last_commit_id: str=None, repository_name: str=None, root_folder: str=None, type: str=None):
        """FactoryRepoConfiguration - a model defined in OpenAPI

        :param account_name: The account_name of this FactoryRepoConfiguration.
        :param collaboration_branch: The collaboration_branch of this FactoryRepoConfiguration.
        :param last_commit_id: The last_commit_id of this FactoryRepoConfiguration.
        :param repository_name: The repository_name of this FactoryRepoConfiguration.
        :param root_folder: The root_folder of this FactoryRepoConfiguration.
        :param type: The type of this FactoryRepoConfiguration.
        """
        self.openapi_types = {
            'account_name': str,
            'collaboration_branch': str,
            'last_commit_id': str,
            'repository_name': str,
            'root_folder': str,
            'type': str
        }

        self.attribute_map = {
            'account_name': 'accountName',
            'collaboration_branch': 'collaborationBranch',
            'last_commit_id': 'lastCommitId',
            'repository_name': 'repositoryName',
            'root_folder': 'rootFolder',
            'type': 'type'
        }

        self._account_name = account_name
        self._collaboration_branch = collaboration_branch
        self._last_commit_id = last_commit_id
        self._repository_name = repository_name
        self._root_folder = root_folder
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FactoryRepoConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FactoryRepoConfiguration of this FactoryRepoConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_name(self):
        """Gets the account_name of this FactoryRepoConfiguration.

        Account name.

        :return: The account_name of this FactoryRepoConfiguration.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this FactoryRepoConfiguration.

        Account name.

        :param account_name: The account_name of this FactoryRepoConfiguration.
        :type account_name: str
        """
        if account_name is None:
            raise ValueError("Invalid value for `account_name`, must not be `None`")

        self._account_name = account_name

    @property
    def collaboration_branch(self):
        """Gets the collaboration_branch of this FactoryRepoConfiguration.

        Collaboration branch.

        :return: The collaboration_branch of this FactoryRepoConfiguration.
        :rtype: str
        """
        return self._collaboration_branch

    @collaboration_branch.setter
    def collaboration_branch(self, collaboration_branch):
        """Sets the collaboration_branch of this FactoryRepoConfiguration.

        Collaboration branch.

        :param collaboration_branch: The collaboration_branch of this FactoryRepoConfiguration.
        :type collaboration_branch: str
        """
        if collaboration_branch is None:
            raise ValueError("Invalid value for `collaboration_branch`, must not be `None`")

        self._collaboration_branch = collaboration_branch

    @property
    def last_commit_id(self):
        """Gets the last_commit_id of this FactoryRepoConfiguration.

        Last commit id.

        :return: The last_commit_id of this FactoryRepoConfiguration.
        :rtype: str
        """
        return self._last_commit_id

    @last_commit_id.setter
    def last_commit_id(self, last_commit_id):
        """Sets the last_commit_id of this FactoryRepoConfiguration.

        Last commit id.

        :param last_commit_id: The last_commit_id of this FactoryRepoConfiguration.
        :type last_commit_id: str
        """

        self._last_commit_id = last_commit_id

    @property
    def repository_name(self):
        """Gets the repository_name of this FactoryRepoConfiguration.

        Repository name.

        :return: The repository_name of this FactoryRepoConfiguration.
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this FactoryRepoConfiguration.

        Repository name.

        :param repository_name: The repository_name of this FactoryRepoConfiguration.
        :type repository_name: str
        """
        if repository_name is None:
            raise ValueError("Invalid value for `repository_name`, must not be `None`")

        self._repository_name = repository_name

    @property
    def root_folder(self):
        """Gets the root_folder of this FactoryRepoConfiguration.

        Root folder.

        :return: The root_folder of this FactoryRepoConfiguration.
        :rtype: str
        """
        return self._root_folder

    @root_folder.setter
    def root_folder(self, root_folder):
        """Sets the root_folder of this FactoryRepoConfiguration.

        Root folder.

        :param root_folder: The root_folder of this FactoryRepoConfiguration.
        :type root_folder: str
        """
        if root_folder is None:
            raise ValueError("Invalid value for `root_folder`, must not be `None`")

        self._root_folder = root_folder

    @property
    def type(self):
        """Gets the type of this FactoryRepoConfiguration.

        Type of repo configuration.

        :return: The type of this FactoryRepoConfiguration.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FactoryRepoConfiguration.

        Type of repo configuration.

        :param type: The type of this FactoryRepoConfiguration.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
