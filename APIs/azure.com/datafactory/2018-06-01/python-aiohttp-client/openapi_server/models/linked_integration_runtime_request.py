# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LinkedIntegrationRuntimeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, factory_name: str=None):
        """LinkedIntegrationRuntimeRequest - a model defined in OpenAPI

        :param factory_name: The factory_name of this LinkedIntegrationRuntimeRequest.
        """
        self.openapi_types = {
            'factory_name': str
        }

        self.attribute_map = {
            'factory_name': 'factoryName'
        }

        self._factory_name = factory_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LinkedIntegrationRuntimeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LinkedIntegrationRuntimeRequest of this LinkedIntegrationRuntimeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def factory_name(self):
        """Gets the factory_name of this LinkedIntegrationRuntimeRequest.

        The data factory name for linked integration runtime.

        :return: The factory_name of this LinkedIntegrationRuntimeRequest.
        :rtype: str
        """
        return self._factory_name

    @factory_name.setter
    def factory_name(self, factory_name):
        """Sets the factory_name of this LinkedIntegrationRuntimeRequest.

        The data factory name for linked integration runtime.

        :param factory_name: The factory_name of this LinkedIntegrationRuntimeRequest.
        :type factory_name: str
        """
        if factory_name is None:
            raise ValueError("Invalid value for `factory_name`, must not be `None`")

        self._factory_name = factory_name
