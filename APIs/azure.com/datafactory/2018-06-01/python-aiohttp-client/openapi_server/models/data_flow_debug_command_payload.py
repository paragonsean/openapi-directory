# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataFlowDebugCommandPayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, columns: List[str]=None, expression: str=None, row_limits: int=None, stream_name: str=None):
        """DataFlowDebugCommandPayload - a model defined in OpenAPI

        :param columns: The columns of this DataFlowDebugCommandPayload.
        :param expression: The expression of this DataFlowDebugCommandPayload.
        :param row_limits: The row_limits of this DataFlowDebugCommandPayload.
        :param stream_name: The stream_name of this DataFlowDebugCommandPayload.
        """
        self.openapi_types = {
            'columns': List[str],
            'expression': str,
            'row_limits': int,
            'stream_name': str
        }

        self.attribute_map = {
            'columns': 'columns',
            'expression': 'expression',
            'row_limits': 'rowLimits',
            'stream_name': 'streamName'
        }

        self._columns = columns
        self._expression = expression
        self._row_limits = row_limits
        self._stream_name = stream_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataFlowDebugCommandPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataFlowDebugCommandPayload of this DataFlowDebugCommandPayload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def columns(self):
        """Gets the columns of this DataFlowDebugCommandPayload.

        Array of column names.

        :return: The columns of this DataFlowDebugCommandPayload.
        :rtype: List[str]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this DataFlowDebugCommandPayload.

        Array of column names.

        :param columns: The columns of this DataFlowDebugCommandPayload.
        :type columns: List[str]
        """

        self._columns = columns

    @property
    def expression(self):
        """Gets the expression of this DataFlowDebugCommandPayload.

        The expression which is used for preview.

        :return: The expression of this DataFlowDebugCommandPayload.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this DataFlowDebugCommandPayload.

        The expression which is used for preview.

        :param expression: The expression of this DataFlowDebugCommandPayload.
        :type expression: str
        """

        self._expression = expression

    @property
    def row_limits(self):
        """Gets the row_limits of this DataFlowDebugCommandPayload.

        Row limits for preview response.

        :return: The row_limits of this DataFlowDebugCommandPayload.
        :rtype: int
        """
        return self._row_limits

    @row_limits.setter
    def row_limits(self, row_limits):
        """Sets the row_limits of this DataFlowDebugCommandPayload.

        Row limits for preview response.

        :param row_limits: The row_limits of this DataFlowDebugCommandPayload.
        :type row_limits: int
        """

        self._row_limits = row_limits

    @property
    def stream_name(self):
        """Gets the stream_name of this DataFlowDebugCommandPayload.

        The stream name which is used for preview.

        :return: The stream_name of this DataFlowDebugCommandPayload.
        :rtype: str
        """
        return self._stream_name

    @stream_name.setter
    def stream_name(self, stream_name):
        """Sets the stream_name of this DataFlowDebugCommandPayload.

        The stream name which is used for preview.

        :param stream_name: The stream_name of this DataFlowDebugCommandPayload.
        :type stream_name: str
        """
        if stream_name is None:
            raise ValueError("Invalid value for `stream_name`, must not be `None`")

        self._stream_name = stream_name
