# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_flow_debug_package_debug_settings import DataFlowDebugPackageDebugSettings
from openapi_server.models.data_flow_debug_resource import DataFlowDebugResource
from openapi_server.models.data_flow_staging_info import DataFlowStagingInfo
from openapi_server.models.dataset_debug_resource import DatasetDebugResource
from openapi_server.models.linked_service_debug_resource import LinkedServiceDebugResource
from openapi_server import util


class DataFlowDebugPackage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_flow: DataFlowDebugResource=None, datasets: List[DatasetDebugResource]=None, debug_settings: DataFlowDebugPackageDebugSettings=None, linked_services: List[LinkedServiceDebugResource]=None, session_id: str=None, staging: DataFlowStagingInfo=None):
        """DataFlowDebugPackage - a model defined in OpenAPI

        :param data_flow: The data_flow of this DataFlowDebugPackage.
        :param datasets: The datasets of this DataFlowDebugPackage.
        :param debug_settings: The debug_settings of this DataFlowDebugPackage.
        :param linked_services: The linked_services of this DataFlowDebugPackage.
        :param session_id: The session_id of this DataFlowDebugPackage.
        :param staging: The staging of this DataFlowDebugPackage.
        """
        self.openapi_types = {
            'data_flow': DataFlowDebugResource,
            'datasets': List[DatasetDebugResource],
            'debug_settings': DataFlowDebugPackageDebugSettings,
            'linked_services': List[LinkedServiceDebugResource],
            'session_id': str,
            'staging': DataFlowStagingInfo
        }

        self.attribute_map = {
            'data_flow': 'dataFlow',
            'datasets': 'datasets',
            'debug_settings': 'debugSettings',
            'linked_services': 'linkedServices',
            'session_id': 'sessionId',
            'staging': 'staging'
        }

        self._data_flow = data_flow
        self._datasets = datasets
        self._debug_settings = debug_settings
        self._linked_services = linked_services
        self._session_id = session_id
        self._staging = staging

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataFlowDebugPackage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataFlowDebugPackage of this DataFlowDebugPackage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_flow(self):
        """Gets the data_flow of this DataFlowDebugPackage.


        :return: The data_flow of this DataFlowDebugPackage.
        :rtype: DataFlowDebugResource
        """
        return self._data_flow

    @data_flow.setter
    def data_flow(self, data_flow):
        """Sets the data_flow of this DataFlowDebugPackage.


        :param data_flow: The data_flow of this DataFlowDebugPackage.
        :type data_flow: DataFlowDebugResource
        """

        self._data_flow = data_flow

    @property
    def datasets(self):
        """Gets the datasets of this DataFlowDebugPackage.

        List of datasets.

        :return: The datasets of this DataFlowDebugPackage.
        :rtype: List[DatasetDebugResource]
        """
        return self._datasets

    @datasets.setter
    def datasets(self, datasets):
        """Sets the datasets of this DataFlowDebugPackage.

        List of datasets.

        :param datasets: The datasets of this DataFlowDebugPackage.
        :type datasets: List[DatasetDebugResource]
        """

        self._datasets = datasets

    @property
    def debug_settings(self):
        """Gets the debug_settings of this DataFlowDebugPackage.


        :return: The debug_settings of this DataFlowDebugPackage.
        :rtype: DataFlowDebugPackageDebugSettings
        """
        return self._debug_settings

    @debug_settings.setter
    def debug_settings(self, debug_settings):
        """Sets the debug_settings of this DataFlowDebugPackage.


        :param debug_settings: The debug_settings of this DataFlowDebugPackage.
        :type debug_settings: DataFlowDebugPackageDebugSettings
        """

        self._debug_settings = debug_settings

    @property
    def linked_services(self):
        """Gets the linked_services of this DataFlowDebugPackage.

        List of linked services.

        :return: The linked_services of this DataFlowDebugPackage.
        :rtype: List[LinkedServiceDebugResource]
        """
        return self._linked_services

    @linked_services.setter
    def linked_services(self, linked_services):
        """Sets the linked_services of this DataFlowDebugPackage.

        List of linked services.

        :param linked_services: The linked_services of this DataFlowDebugPackage.
        :type linked_services: List[LinkedServiceDebugResource]
        """

        self._linked_services = linked_services

    @property
    def session_id(self):
        """Gets the session_id of this DataFlowDebugPackage.

        The ID of data flow debug session.

        :return: The session_id of this DataFlowDebugPackage.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this DataFlowDebugPackage.

        The ID of data flow debug session.

        :param session_id: The session_id of this DataFlowDebugPackage.
        :type session_id: str
        """

        self._session_id = session_id

    @property
    def staging(self):
        """Gets the staging of this DataFlowDebugPackage.


        :return: The staging of this DataFlowDebugPackage.
        :rtype: DataFlowStagingInfo
        """
        return self._staging

    @staging.setter
    def staging(self, staging):
        """Sets the staging of this DataFlowDebugPackage.


        :param staging: The staging of this DataFlowDebugPackage.
        :type staging: DataFlowStagingInfo
        """

        self._staging = staging
