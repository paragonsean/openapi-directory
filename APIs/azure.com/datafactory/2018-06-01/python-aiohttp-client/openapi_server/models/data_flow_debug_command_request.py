# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_flow_debug_command_payload import DataFlowDebugCommandPayload
from openapi_server import util


class DataFlowDebugCommandRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, command: str=None, command_payload: DataFlowDebugCommandPayload=None, session_id: str=None):
        """DataFlowDebugCommandRequest - a model defined in OpenAPI

        :param command: The command of this DataFlowDebugCommandRequest.
        :param command_payload: The command_payload of this DataFlowDebugCommandRequest.
        :param session_id: The session_id of this DataFlowDebugCommandRequest.
        """
        self.openapi_types = {
            'command': str,
            'command_payload': DataFlowDebugCommandPayload,
            'session_id': str
        }

        self.attribute_map = {
            'command': 'command',
            'command_payload': 'commandPayload',
            'session_id': 'sessionId'
        }

        self._command = command
        self._command_payload = command_payload
        self._session_id = session_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataFlowDebugCommandRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataFlowDebugCommandRequest of this DataFlowDebugCommandRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def command(self):
        """Gets the command of this DataFlowDebugCommandRequest.

        The command type.

        :return: The command of this DataFlowDebugCommandRequest.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this DataFlowDebugCommandRequest.

        The command type.

        :param command: The command of this DataFlowDebugCommandRequest.
        :type command: str
        """
        allowed_values = ["executePreviewQuery", "executeStatisticsQuery", "executeExpressionQuery"]  # noqa: E501
        if command not in allowed_values:
            raise ValueError(
                "Invalid value for `command` ({0}), must be one of {1}"
                .format(command, allowed_values)
            )

        self._command = command

    @property
    def command_payload(self):
        """Gets the command_payload of this DataFlowDebugCommandRequest.


        :return: The command_payload of this DataFlowDebugCommandRequest.
        :rtype: DataFlowDebugCommandPayload
        """
        return self._command_payload

    @command_payload.setter
    def command_payload(self, command_payload):
        """Sets the command_payload of this DataFlowDebugCommandRequest.


        :param command_payload: The command_payload of this DataFlowDebugCommandRequest.
        :type command_payload: DataFlowDebugCommandPayload
        """

        self._command_payload = command_payload

    @property
    def session_id(self):
        """Gets the session_id of this DataFlowDebugCommandRequest.

        The ID of data flow debug session.

        :return: The session_id of this DataFlowDebugCommandRequest.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this DataFlowDebugCommandRequest.

        The ID of data flow debug session.

        :param session_id: The session_id of this DataFlowDebugCommandRequest.
        :type session_id: str
        """

        self._session_id = session_id
