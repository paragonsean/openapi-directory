# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataFlowReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset_parameters: object=None, reference_name: str=None, type: str=None):
        """DataFlowReference - a model defined in OpenAPI

        :param dataset_parameters: The dataset_parameters of this DataFlowReference.
        :param reference_name: The reference_name of this DataFlowReference.
        :param type: The type of this DataFlowReference.
        """
        self.openapi_types = {
            'dataset_parameters': object,
            'reference_name': str,
            'type': str
        }

        self.attribute_map = {
            'dataset_parameters': 'datasetParameters',
            'reference_name': 'referenceName',
            'type': 'type'
        }

        self._dataset_parameters = dataset_parameters
        self._reference_name = reference_name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataFlowReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataFlowReference of this DataFlowReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_parameters(self):
        """Gets the dataset_parameters of this DataFlowReference.

        Reference data flow parameters from dataset.

        :return: The dataset_parameters of this DataFlowReference.
        :rtype: object
        """
        return self._dataset_parameters

    @dataset_parameters.setter
    def dataset_parameters(self, dataset_parameters):
        """Sets the dataset_parameters of this DataFlowReference.

        Reference data flow parameters from dataset.

        :param dataset_parameters: The dataset_parameters of this DataFlowReference.
        :type dataset_parameters: object
        """

        self._dataset_parameters = dataset_parameters

    @property
    def reference_name(self):
        """Gets the reference_name of this DataFlowReference.

        Reference data flow name.

        :return: The reference_name of this DataFlowReference.
        :rtype: str
        """
        return self._reference_name

    @reference_name.setter
    def reference_name(self, reference_name):
        """Sets the reference_name of this DataFlowReference.

        Reference data flow name.

        :param reference_name: The reference_name of this DataFlowReference.
        :type reference_name: str
        """
        if reference_name is None:
            raise ValueError("Invalid value for `reference_name`, must not be `None`")

        self._reference_name = reference_name

    @property
    def type(self):
        """Gets the type of this DataFlowReference.

        Data flow reference type.

        :return: The type of this DataFlowReference.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DataFlowReference.

        Data flow reference type.

        :param type: The type of this DataFlowReference.
        :type type: str
        """
        allowed_values = ["DataFlowReference"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
