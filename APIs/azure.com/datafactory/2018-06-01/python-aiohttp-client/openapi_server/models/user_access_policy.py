# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserAccessPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_resource_path: str=None, expire_time: str=None, permissions: str=None, profile_name: str=None, start_time: str=None):
        """UserAccessPolicy - a model defined in OpenAPI

        :param access_resource_path: The access_resource_path of this UserAccessPolicy.
        :param expire_time: The expire_time of this UserAccessPolicy.
        :param permissions: The permissions of this UserAccessPolicy.
        :param profile_name: The profile_name of this UserAccessPolicy.
        :param start_time: The start_time of this UserAccessPolicy.
        """
        self.openapi_types = {
            'access_resource_path': str,
            'expire_time': str,
            'permissions': str,
            'profile_name': str,
            'start_time': str
        }

        self.attribute_map = {
            'access_resource_path': 'accessResourcePath',
            'expire_time': 'expireTime',
            'permissions': 'permissions',
            'profile_name': 'profileName',
            'start_time': 'startTime'
        }

        self._access_resource_path = access_resource_path
        self._expire_time = expire_time
        self._permissions = permissions
        self._profile_name = profile_name
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserAccessPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserAccessPolicy of this UserAccessPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_resource_path(self):
        """Gets the access_resource_path of this UserAccessPolicy.

        The resource path to get access relative to factory. Currently only empty string is supported which corresponds to the factory resource.

        :return: The access_resource_path of this UserAccessPolicy.
        :rtype: str
        """
        return self._access_resource_path

    @access_resource_path.setter
    def access_resource_path(self, access_resource_path):
        """Sets the access_resource_path of this UserAccessPolicy.

        The resource path to get access relative to factory. Currently only empty string is supported which corresponds to the factory resource.

        :param access_resource_path: The access_resource_path of this UserAccessPolicy.
        :type access_resource_path: str
        """

        self._access_resource_path = access_resource_path

    @property
    def expire_time(self):
        """Gets the expire_time of this UserAccessPolicy.

        Expiration time for the token. Maximum duration for the token is eight hours and by default the token will expire in eight hours.

        :return: The expire_time of this UserAccessPolicy.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this UserAccessPolicy.

        Expiration time for the token. Maximum duration for the token is eight hours and by default the token will expire in eight hours.

        :param expire_time: The expire_time of this UserAccessPolicy.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def permissions(self):
        """Gets the permissions of this UserAccessPolicy.

        The string with permissions for Data Plane access. Currently only 'r' is supported which grants read only access.

        :return: The permissions of this UserAccessPolicy.
        :rtype: str
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this UserAccessPolicy.

        The string with permissions for Data Plane access. Currently only 'r' is supported which grants read only access.

        :param permissions: The permissions of this UserAccessPolicy.
        :type permissions: str
        """

        self._permissions = permissions

    @property
    def profile_name(self):
        """Gets the profile_name of this UserAccessPolicy.

        The name of the profile. Currently only the default is supported. The default value is DefaultProfile.

        :return: The profile_name of this UserAccessPolicy.
        :rtype: str
        """
        return self._profile_name

    @profile_name.setter
    def profile_name(self, profile_name):
        """Sets the profile_name of this UserAccessPolicy.

        The name of the profile. Currently only the default is supported. The default value is DefaultProfile.

        :param profile_name: The profile_name of this UserAccessPolicy.
        :type profile_name: str
        """

        self._profile_name = profile_name

    @property
    def start_time(self):
        """Gets the start_time of this UserAccessPolicy.

        Start time for the token. If not specified the current time will be used.

        :return: The start_time of this UserAccessPolicy.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this UserAccessPolicy.

        Start time for the token. If not specified the current time will be used.

        :param start_time: The start_time of this UserAccessPolicy.
        :type start_time: str
        """

        self._start_time = start_time
