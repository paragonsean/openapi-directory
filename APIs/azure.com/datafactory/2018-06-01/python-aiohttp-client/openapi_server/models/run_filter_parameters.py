# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.run_query_filter import RunQueryFilter
from openapi_server.models.run_query_order_by import RunQueryOrderBy
from openapi_server import util


class RunFilterParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, continuation_token: str=None, filters: List[RunQueryFilter]=None, last_updated_after: datetime=None, last_updated_before: datetime=None, order_by: List[RunQueryOrderBy]=None):
        """RunFilterParameters - a model defined in OpenAPI

        :param continuation_token: The continuation_token of this RunFilterParameters.
        :param filters: The filters of this RunFilterParameters.
        :param last_updated_after: The last_updated_after of this RunFilterParameters.
        :param last_updated_before: The last_updated_before of this RunFilterParameters.
        :param order_by: The order_by of this RunFilterParameters.
        """
        self.openapi_types = {
            'continuation_token': str,
            'filters': List[RunQueryFilter],
            'last_updated_after': datetime,
            'last_updated_before': datetime,
            'order_by': List[RunQueryOrderBy]
        }

        self.attribute_map = {
            'continuation_token': 'continuationToken',
            'filters': 'filters',
            'last_updated_after': 'lastUpdatedAfter',
            'last_updated_before': 'lastUpdatedBefore',
            'order_by': 'orderBy'
        }

        self._continuation_token = continuation_token
        self._filters = filters
        self._last_updated_after = last_updated_after
        self._last_updated_before = last_updated_before
        self._order_by = order_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunFilterParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunFilterParameters of this RunFilterParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def continuation_token(self):
        """Gets the continuation_token of this RunFilterParameters.

        The continuation token for getting the next page of results. Null for first page.

        :return: The continuation_token of this RunFilterParameters.
        :rtype: str
        """
        return self._continuation_token

    @continuation_token.setter
    def continuation_token(self, continuation_token):
        """Sets the continuation_token of this RunFilterParameters.

        The continuation token for getting the next page of results. Null for first page.

        :param continuation_token: The continuation_token of this RunFilterParameters.
        :type continuation_token: str
        """

        self._continuation_token = continuation_token

    @property
    def filters(self):
        """Gets the filters of this RunFilterParameters.

        List of filters.

        :return: The filters of this RunFilterParameters.
        :rtype: List[RunQueryFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this RunFilterParameters.

        List of filters.

        :param filters: The filters of this RunFilterParameters.
        :type filters: List[RunQueryFilter]
        """

        self._filters = filters

    @property
    def last_updated_after(self):
        """Gets the last_updated_after of this RunFilterParameters.

        The time at or after which the run event was updated in 'ISO 8601' format.

        :return: The last_updated_after of this RunFilterParameters.
        :rtype: datetime
        """
        return self._last_updated_after

    @last_updated_after.setter
    def last_updated_after(self, last_updated_after):
        """Sets the last_updated_after of this RunFilterParameters.

        The time at or after which the run event was updated in 'ISO 8601' format.

        :param last_updated_after: The last_updated_after of this RunFilterParameters.
        :type last_updated_after: datetime
        """
        if last_updated_after is None:
            raise ValueError("Invalid value for `last_updated_after`, must not be `None`")

        self._last_updated_after = last_updated_after

    @property
    def last_updated_before(self):
        """Gets the last_updated_before of this RunFilterParameters.

        The time at or before which the run event was updated in 'ISO 8601' format.

        :return: The last_updated_before of this RunFilterParameters.
        :rtype: datetime
        """
        return self._last_updated_before

    @last_updated_before.setter
    def last_updated_before(self, last_updated_before):
        """Sets the last_updated_before of this RunFilterParameters.

        The time at or before which the run event was updated in 'ISO 8601' format.

        :param last_updated_before: The last_updated_before of this RunFilterParameters.
        :type last_updated_before: datetime
        """
        if last_updated_before is None:
            raise ValueError("Invalid value for `last_updated_before`, must not be `None`")

        self._last_updated_before = last_updated_before

    @property
    def order_by(self):
        """Gets the order_by of this RunFilterParameters.

        List of OrderBy option.

        :return: The order_by of this RunFilterParameters.
        :rtype: List[RunQueryOrderBy]
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this RunFilterParameters.

        List of OrderBy option.

        :param order_by: The order_by of this RunFilterParameters.
        :type order_by: List[RunQueryOrderBy]
        """

        self._order_by = order_by
