# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.linked_service_reference import LinkedServiceReference
from openapi_server.models.secret_base import SecretBase
from openapi_server import util


class AzureKeyVaultSecretReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, secret_name: object=None, secret_version: object=None, store: LinkedServiceReference=None, type: str=None):
        """AzureKeyVaultSecretReference - a model defined in OpenAPI

        :param secret_name: The secret_name of this AzureKeyVaultSecretReference.
        :param secret_version: The secret_version of this AzureKeyVaultSecretReference.
        :param store: The store of this AzureKeyVaultSecretReference.
        :param type: The type of this AzureKeyVaultSecretReference.
        """
        self.openapi_types = {
            'secret_name': object,
            'secret_version': object,
            'store': LinkedServiceReference,
            'type': str
        }

        self.attribute_map = {
            'secret_name': 'secretName',
            'secret_version': 'secretVersion',
            'store': 'store',
            'type': 'type'
        }

        self._secret_name = secret_name
        self._secret_version = secret_version
        self._store = store
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AzureKeyVaultSecretReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AzureKeyVaultSecretReference of this AzureKeyVaultSecretReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def secret_name(self):
        """Gets the secret_name of this AzureKeyVaultSecretReference.

        The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string).

        :return: The secret_name of this AzureKeyVaultSecretReference.
        :rtype: object
        """
        return self._secret_name

    @secret_name.setter
    def secret_name(self, secret_name):
        """Sets the secret_name of this AzureKeyVaultSecretReference.

        The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string).

        :param secret_name: The secret_name of this AzureKeyVaultSecretReference.
        :type secret_name: object
        """
        if secret_name is None:
            raise ValueError("Invalid value for `secret_name`, must not be `None`")

        self._secret_name = secret_name

    @property
    def secret_version(self):
        """Gets the secret_version of this AzureKeyVaultSecretReference.

        The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string).

        :return: The secret_version of this AzureKeyVaultSecretReference.
        :rtype: object
        """
        return self._secret_version

    @secret_version.setter
    def secret_version(self, secret_version):
        """Sets the secret_version of this AzureKeyVaultSecretReference.

        The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string).

        :param secret_version: The secret_version of this AzureKeyVaultSecretReference.
        :type secret_version: object
        """

        self._secret_version = secret_version

    @property
    def store(self):
        """Gets the store of this AzureKeyVaultSecretReference.


        :return: The store of this AzureKeyVaultSecretReference.
        :rtype: LinkedServiceReference
        """
        return self._store

    @store.setter
    def store(self, store):
        """Sets the store of this AzureKeyVaultSecretReference.


        :param store: The store of this AzureKeyVaultSecretReference.
        :type store: LinkedServiceReference
        """
        if store is None:
            raise ValueError("Invalid value for `store`, must not be `None`")

        self._store = store

    @property
    def type(self):
        """Gets the type of this AzureKeyVaultSecretReference.

        Type of the secret.

        :return: The type of this AzureKeyVaultSecretReference.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AzureKeyVaultSecretReference.

        Type of the secret.

        :param type: The type of this AzureKeyVaultSecretReference.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
