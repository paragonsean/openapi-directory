/*
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Factory&#39;s VSTS repo information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:51:50.752646-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FactoryVSTSConfiguration {
  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "accountName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  public static final String SERIALIZED_NAME_COLLABORATION_BRANCH = "collaborationBranch";
  @SerializedName(SERIALIZED_NAME_COLLABORATION_BRANCH)
  private String collaborationBranch;

  public static final String SERIALIZED_NAME_LAST_COMMIT_ID = "lastCommitId";
  @SerializedName(SERIALIZED_NAME_LAST_COMMIT_ID)
  private String lastCommitId;

  public static final String SERIALIZED_NAME_PROJECT_NAME = "projectName";
  @SerializedName(SERIALIZED_NAME_PROJECT_NAME)
  private String projectName;

  public static final String SERIALIZED_NAME_REPOSITORY_NAME = "repositoryName";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_NAME)
  private String repositoryName;

  public static final String SERIALIZED_NAME_ROOT_FOLDER = "rootFolder";
  @SerializedName(SERIALIZED_NAME_ROOT_FOLDER)
  private String rootFolder;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public FactoryVSTSConfiguration() {
  }

  public FactoryVSTSConfiguration accountName(String accountName) {
    this.accountName = accountName;
    return this;
  }

  /**
   * VSTS account name.
   * @return accountName
   */
  @javax.annotation.Nullable
  public String getAccountName() {
    return accountName;
  }

  public void setAccountName(String accountName) {
    this.accountName = accountName;
  }


  public FactoryVSTSConfiguration collaborationBranch(String collaborationBranch) {
    this.collaborationBranch = collaborationBranch;
    return this;
  }

  /**
   * VSTS collaboration branch.
   * @return collaborationBranch
   */
  @javax.annotation.Nullable
  public String getCollaborationBranch() {
    return collaborationBranch;
  }

  public void setCollaborationBranch(String collaborationBranch) {
    this.collaborationBranch = collaborationBranch;
  }


  public FactoryVSTSConfiguration lastCommitId(String lastCommitId) {
    this.lastCommitId = lastCommitId;
    return this;
  }

  /**
   * VSTS last commit id.
   * @return lastCommitId
   */
  @javax.annotation.Nullable
  public String getLastCommitId() {
    return lastCommitId;
  }

  public void setLastCommitId(String lastCommitId) {
    this.lastCommitId = lastCommitId;
  }


  public FactoryVSTSConfiguration projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  /**
   * VSTS project name.
   * @return projectName
   */
  @javax.annotation.Nullable
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }


  public FactoryVSTSConfiguration repositoryName(String repositoryName) {
    this.repositoryName = repositoryName;
    return this;
  }

  /**
   * VSTS repository name.
   * @return repositoryName
   */
  @javax.annotation.Nullable
  public String getRepositoryName() {
    return repositoryName;
  }

  public void setRepositoryName(String repositoryName) {
    this.repositoryName = repositoryName;
  }


  public FactoryVSTSConfiguration rootFolder(String rootFolder) {
    this.rootFolder = rootFolder;
    return this;
  }

  /**
   * VSTS root folder.
   * @return rootFolder
   */
  @javax.annotation.Nullable
  public String getRootFolder() {
    return rootFolder;
  }

  public void setRootFolder(String rootFolder) {
    this.rootFolder = rootFolder;
  }


  public FactoryVSTSConfiguration tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * VSTS tenant id.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FactoryVSTSConfiguration factoryVSTSConfiguration = (FactoryVSTSConfiguration) o;
    return Objects.equals(this.accountName, factoryVSTSConfiguration.accountName) &&
        Objects.equals(this.collaborationBranch, factoryVSTSConfiguration.collaborationBranch) &&
        Objects.equals(this.lastCommitId, factoryVSTSConfiguration.lastCommitId) &&
        Objects.equals(this.projectName, factoryVSTSConfiguration.projectName) &&
        Objects.equals(this.repositoryName, factoryVSTSConfiguration.repositoryName) &&
        Objects.equals(this.rootFolder, factoryVSTSConfiguration.rootFolder) &&
        Objects.equals(this.tenantId, factoryVSTSConfiguration.tenantId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountName, collaborationBranch, lastCommitId, projectName, repositoryName, rootFolder, tenantId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FactoryVSTSConfiguration {\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    collaborationBranch: ").append(toIndentedString(collaborationBranch)).append("\n");
    sb.append("    lastCommitId: ").append(toIndentedString(lastCommitId)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    repositoryName: ").append(toIndentedString(repositoryName)).append("\n");
    sb.append("    rootFolder: ").append(toIndentedString(rootFolder)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountName");
    openapiFields.add("collaborationBranch");
    openapiFields.add("lastCommitId");
    openapiFields.add("projectName");
    openapiFields.add("repositoryName");
    openapiFields.add("rootFolder");
    openapiFields.add("tenantId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FactoryVSTSConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FactoryVSTSConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FactoryVSTSConfiguration is not found in the empty JSON string", FactoryVSTSConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FactoryVSTSConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FactoryVSTSConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountName") != null && !jsonObj.get("accountName").isJsonNull()) && !jsonObj.get("accountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountName").toString()));
      }
      if ((jsonObj.get("collaborationBranch") != null && !jsonObj.get("collaborationBranch").isJsonNull()) && !jsonObj.get("collaborationBranch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collaborationBranch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collaborationBranch").toString()));
      }
      if ((jsonObj.get("lastCommitId") != null && !jsonObj.get("lastCommitId").isJsonNull()) && !jsonObj.get("lastCommitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastCommitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastCommitId").toString()));
      }
      if ((jsonObj.get("projectName") != null && !jsonObj.get("projectName").isJsonNull()) && !jsonObj.get("projectName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectName").toString()));
      }
      if ((jsonObj.get("repositoryName") != null && !jsonObj.get("repositoryName").isJsonNull()) && !jsonObj.get("repositoryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repositoryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repositoryName").toString()));
      }
      if ((jsonObj.get("rootFolder") != null && !jsonObj.get("rootFolder").isJsonNull()) && !jsonObj.get("rootFolder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rootFolder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rootFolder").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FactoryVSTSConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FactoryVSTSConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FactoryVSTSConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FactoryVSTSConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<FactoryVSTSConfiguration>() {
           @Override
           public void write(JsonWriter out, FactoryVSTSConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FactoryVSTSConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FactoryVSTSConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FactoryVSTSConfiguration
   * @throws IOException if the JSON string is invalid with respect to FactoryVSTSConfiguration
   */
  public static FactoryVSTSConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FactoryVSTSConfiguration.class);
  }

  /**
   * Convert an instance of FactoryVSTSConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

