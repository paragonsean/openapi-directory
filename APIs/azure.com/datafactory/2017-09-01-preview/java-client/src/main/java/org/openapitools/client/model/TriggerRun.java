/*
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Trigger runs.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:51:50.752646-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TriggerRun {
  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, String> properties = new HashMap<>();

  /**
   * Trigger run status.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed"),
    
    INPROGRESS("Inprogress");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TRIGGER_NAME = "triggerName";
  @SerializedName(SERIALIZED_NAME_TRIGGER_NAME)
  private String triggerName;

  public static final String SERIALIZED_NAME_TRIGGER_RUN_ID = "triggerRunId";
  @SerializedName(SERIALIZED_NAME_TRIGGER_RUN_ID)
  private String triggerRunId;

  public static final String SERIALIZED_NAME_TRIGGER_RUN_TIMESTAMP = "triggerRunTimestamp";
  @SerializedName(SERIALIZED_NAME_TRIGGER_RUN_TIMESTAMP)
  private OffsetDateTime triggerRunTimestamp;

  public static final String SERIALIZED_NAME_TRIGGER_TYPE = "triggerType";
  @SerializedName(SERIALIZED_NAME_TRIGGER_TYPE)
  private String triggerType;

  public static final String SERIALIZED_NAME_TRIGGERED_PIPELINES = "triggeredPipelines";
  @SerializedName(SERIALIZED_NAME_TRIGGERED_PIPELINES)
  private Map<String, String> triggeredPipelines = new HashMap<>();

  public TriggerRun() {
  }

  public TriggerRun(
     String message, 
     Map<String, String> properties, 
     StatusEnum status, 
     String triggerName, 
     String triggerRunId, 
     OffsetDateTime triggerRunTimestamp, 
     String triggerType, 
     Map<String, String> triggeredPipelines
  ) {
    this();
    this.message = message;
    this.properties = properties;
    this.status = status;
    this.triggerName = triggerName;
    this.triggerRunId = triggerRunId;
    this.triggerRunTimestamp = triggerRunTimestamp;
    this.triggerType = triggerType;
    this.triggeredPipelines = triggeredPipelines;
  }

  /**
   * Trigger error message.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }



  /**
   * List of property name and value related to trigger run. Name, value pair depends on type of trigger.
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, String> getProperties() {
    return properties;
  }



  /**
   * Trigger run status.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }



  /**
   * Trigger name.
   * @return triggerName
   */
  @javax.annotation.Nullable
  public String getTriggerName() {
    return triggerName;
  }



  /**
   * Trigger run id.
   * @return triggerRunId
   */
  @javax.annotation.Nullable
  public String getTriggerRunId() {
    return triggerRunId;
  }



  /**
   * Trigger run start time.
   * @return triggerRunTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTriggerRunTimestamp() {
    return triggerRunTimestamp;
  }



  /**
   * Trigger type.
   * @return triggerType
   */
  @javax.annotation.Nullable
  public String getTriggerType() {
    return triggerType;
  }



  /**
   * List of pipeline name and run Id triggered by the trigger run.
   * @return triggeredPipelines
   */
  @javax.annotation.Nullable
  public Map<String, String> getTriggeredPipelines() {
    return triggeredPipelines;
  }


  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TriggerRun instance itself
   */
  public TriggerRun putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TriggerRun triggerRun = (TriggerRun) o;
    return Objects.equals(this.message, triggerRun.message) &&
        Objects.equals(this.properties, triggerRun.properties) &&
        Objects.equals(this.status, triggerRun.status) &&
        Objects.equals(this.triggerName, triggerRun.triggerName) &&
        Objects.equals(this.triggerRunId, triggerRun.triggerRunId) &&
        Objects.equals(this.triggerRunTimestamp, triggerRun.triggerRunTimestamp) &&
        Objects.equals(this.triggerType, triggerRun.triggerType) &&
        Objects.equals(this.triggeredPipelines, triggerRun.triggeredPipelines)&&
        Objects.equals(this.additionalProperties, triggerRun.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(message, properties, status, triggerName, triggerRunId, triggerRunTimestamp, triggerType, triggeredPipelines, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TriggerRun {\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    triggerName: ").append(toIndentedString(triggerName)).append("\n");
    sb.append("    triggerRunId: ").append(toIndentedString(triggerRunId)).append("\n");
    sb.append("    triggerRunTimestamp: ").append(toIndentedString(triggerRunTimestamp)).append("\n");
    sb.append("    triggerType: ").append(toIndentedString(triggerType)).append("\n");
    sb.append("    triggeredPipelines: ").append(toIndentedString(triggeredPipelines)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("message");
    openapiFields.add("properties");
    openapiFields.add("status");
    openapiFields.add("triggerName");
    openapiFields.add("triggerRunId");
    openapiFields.add("triggerRunTimestamp");
    openapiFields.add("triggerType");
    openapiFields.add("triggeredPipelines");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TriggerRun
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TriggerRun.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TriggerRun is not found in the empty JSON string", TriggerRun.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("triggerName") != null && !jsonObj.get("triggerName").isJsonNull()) && !jsonObj.get("triggerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("triggerName").toString()));
      }
      if ((jsonObj.get("triggerRunId") != null && !jsonObj.get("triggerRunId").isJsonNull()) && !jsonObj.get("triggerRunId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggerRunId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("triggerRunId").toString()));
      }
      if ((jsonObj.get("triggerType") != null && !jsonObj.get("triggerType").isJsonNull()) && !jsonObj.get("triggerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("triggerType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TriggerRun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TriggerRun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TriggerRun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TriggerRun.class));

       return (TypeAdapter<T>) new TypeAdapter<TriggerRun>() {
           @Override
           public void write(JsonWriter out, TriggerRun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TriggerRun read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             TriggerRun instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TriggerRun given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TriggerRun
   * @throws IOException if the JSON string is invalid with respect to TriggerRun
   */
  public static TriggerRun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TriggerRun.class);
  }

  /**
   * Convert an instance of TriggerRun to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

