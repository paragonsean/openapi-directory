/*
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of Self-hosted integration runtime node.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:51:50.752646-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IntegrationRuntimeNodesUpdate200Response {
  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private Map<String, String> capabilities = new HashMap<>();

  public static final String SERIALIZED_NAME_CONCURRENT_JOBS_LIMIT = "concurrentJobsLimit";
  @SerializedName(SERIALIZED_NAME_CONCURRENT_JOBS_LIMIT)
  private Integer concurrentJobsLimit;

  public static final String SERIALIZED_NAME_EXPIRY_TIME = "expiryTime";
  @SerializedName(SERIALIZED_NAME_EXPIRY_TIME)
  private OffsetDateTime expiryTime;

  public static final String SERIALIZED_NAME_HOST_SERVICE_URI = "hostServiceUri";
  @SerializedName(SERIALIZED_NAME_HOST_SERVICE_URI)
  private String hostServiceUri;

  public static final String SERIALIZED_NAME_IS_ACTIVE_DISPATCHER = "isActiveDispatcher";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE_DISPATCHER)
  private Boolean isActiveDispatcher;

  public static final String SERIALIZED_NAME_LAST_CONNECT_TIME = "lastConnectTime";
  @SerializedName(SERIALIZED_NAME_LAST_CONNECT_TIME)
  private OffsetDateTime lastConnectTime;

  public static final String SERIALIZED_NAME_LAST_END_UPDATE_TIME = "lastEndUpdateTime";
  @SerializedName(SERIALIZED_NAME_LAST_END_UPDATE_TIME)
  private OffsetDateTime lastEndUpdateTime;

  public static final String SERIALIZED_NAME_LAST_START_TIME = "lastStartTime";
  @SerializedName(SERIALIZED_NAME_LAST_START_TIME)
  private OffsetDateTime lastStartTime;

  public static final String SERIALIZED_NAME_LAST_START_UPDATE_TIME = "lastStartUpdateTime";
  @SerializedName(SERIALIZED_NAME_LAST_START_UPDATE_TIME)
  private OffsetDateTime lastStartUpdateTime;

  public static final String SERIALIZED_NAME_LAST_STOP_TIME = "lastStopTime";
  @SerializedName(SERIALIZED_NAME_LAST_STOP_TIME)
  private OffsetDateTime lastStopTime;

  /**
   * The result of the last integration runtime node update.
   */
  @JsonAdapter(LastUpdateResultEnum.Adapter.class)
  public enum LastUpdateResultEnum {
    SUCCEED("Succeed"),
    
    FAIL("Fail");

    private String value;

    LastUpdateResultEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LastUpdateResultEnum fromValue(String value) {
      for (LastUpdateResultEnum b : LastUpdateResultEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LastUpdateResultEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LastUpdateResultEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LastUpdateResultEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LastUpdateResultEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LastUpdateResultEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LAST_UPDATE_RESULT = "lastUpdateResult";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_RESULT)
  private LastUpdateResultEnum lastUpdateResult;

  public static final String SERIALIZED_NAME_MACHINE_NAME = "machineName";
  @SerializedName(SERIALIZED_NAME_MACHINE_NAME)
  private String machineName;

  public static final String SERIALIZED_NAME_MAX_CONCURRENT_JOBS = "maxConcurrentJobs";
  @SerializedName(SERIALIZED_NAME_MAX_CONCURRENT_JOBS)
  private Integer maxConcurrentJobs;

  public static final String SERIALIZED_NAME_NODE_NAME = "nodeName";
  @SerializedName(SERIALIZED_NAME_NODE_NAME)
  private String nodeName;

  public static final String SERIALIZED_NAME_REGISTER_TIME = "registerTime";
  @SerializedName(SERIALIZED_NAME_REGISTER_TIME)
  private OffsetDateTime registerTime;

  /**
   * Status of the integration runtime node.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NEED_REGISTRATION("NeedRegistration"),
    
    ONLINE("Online"),
    
    LIMITED("Limited"),
    
    OFFLINE("Offline"),
    
    UPGRADING("Upgrading"),
    
    INITIALIZING("Initializing"),
    
    INITIALIZE_FAILED("InitializeFailed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_VERSION_STATUS = "versionStatus";
  @SerializedName(SERIALIZED_NAME_VERSION_STATUS)
  private String versionStatus;

  public IntegrationRuntimeNodesUpdate200Response() {
  }

  public IntegrationRuntimeNodesUpdate200Response(
     Map<String, String> capabilities, 
     Integer concurrentJobsLimit, 
     OffsetDateTime expiryTime, 
     String hostServiceUri, 
     Boolean isActiveDispatcher, 
     OffsetDateTime lastConnectTime, 
     OffsetDateTime lastEndUpdateTime, 
     OffsetDateTime lastStartTime, 
     OffsetDateTime lastStartUpdateTime, 
     OffsetDateTime lastStopTime, 
     LastUpdateResultEnum lastUpdateResult, 
     String machineName, 
     Integer maxConcurrentJobs, 
     String nodeName, 
     OffsetDateTime registerTime, 
     StatusEnum status, 
     String version, 
     String versionStatus
  ) {
    this();
    this.capabilities = capabilities;
    this.concurrentJobsLimit = concurrentJobsLimit;
    this.expiryTime = expiryTime;
    this.hostServiceUri = hostServiceUri;
    this.isActiveDispatcher = isActiveDispatcher;
    this.lastConnectTime = lastConnectTime;
    this.lastEndUpdateTime = lastEndUpdateTime;
    this.lastStartTime = lastStartTime;
    this.lastStartUpdateTime = lastStartUpdateTime;
    this.lastStopTime = lastStopTime;
    this.lastUpdateResult = lastUpdateResult;
    this.machineName = machineName;
    this.maxConcurrentJobs = maxConcurrentJobs;
    this.nodeName = nodeName;
    this.registerTime = registerTime;
    this.status = status;
    this.version = version;
    this.versionStatus = versionStatus;
  }

  /**
   * The integration runtime capabilities dictionary
   * @return capabilities
   */
  @javax.annotation.Nullable
  public Map<String, String> getCapabilities() {
    return capabilities;
  }



  /**
   * Maximum concurrent jobs on the integration runtime node.
   * @return concurrentJobsLimit
   */
  @javax.annotation.Nullable
  public Integer getConcurrentJobsLimit() {
    return concurrentJobsLimit;
  }



  /**
   * The time at which the integration runtime will expire in ISO8601 format.
   * @return expiryTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpiryTime() {
    return expiryTime;
  }



  /**
   * URI for the host machine of the integration runtime.
   * @return hostServiceUri
   */
  @javax.annotation.Nullable
  public String getHostServiceUri() {
    return hostServiceUri;
  }



  /**
   * Indicates whether this node is the active dispatcher for integration runtime requests.
   * @return isActiveDispatcher
   */
  @javax.annotation.Nullable
  public Boolean getIsActiveDispatcher() {
    return isActiveDispatcher;
  }



  /**
   * The most recent time at which the integration runtime was connected in ISO8601 format.
   * @return lastConnectTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastConnectTime() {
    return lastConnectTime;
  }



  /**
   * The last time for the integration runtime node update end.
   * @return lastEndUpdateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastEndUpdateTime() {
    return lastEndUpdateTime;
  }



  /**
   * The time the node last started up.
   * @return lastStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastStartTime() {
    return lastStartTime;
  }



  /**
   * The last time for the integration runtime node update start.
   * @return lastStartUpdateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastStartUpdateTime() {
    return lastStartUpdateTime;
  }



  /**
   * The integration runtime node last stop time.
   * @return lastStopTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastStopTime() {
    return lastStopTime;
  }



  /**
   * The result of the last integration runtime node update.
   * @return lastUpdateResult
   */
  @javax.annotation.Nullable
  public LastUpdateResultEnum getLastUpdateResult() {
    return lastUpdateResult;
  }



  /**
   * Machine name of the integration runtime node.
   * @return machineName
   */
  @javax.annotation.Nullable
  public String getMachineName() {
    return machineName;
  }



  /**
   * The maximum concurrent jobs in this integration runtime.
   * @return maxConcurrentJobs
   */
  @javax.annotation.Nullable
  public Integer getMaxConcurrentJobs() {
    return maxConcurrentJobs;
  }



  /**
   * Name of the integration runtime node.
   * @return nodeName
   */
  @javax.annotation.Nullable
  public String getNodeName() {
    return nodeName;
  }



  /**
   * The time at which the integration runtime node was registered in ISO8601 format.
   * @return registerTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRegisterTime() {
    return registerTime;
  }



  /**
   * Status of the integration runtime node.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }



  /**
   * Version of the integration runtime node.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }



  /**
   * Status of the integration runtime node version.
   * @return versionStatus
   */
  @javax.annotation.Nullable
  public String getVersionStatus() {
    return versionStatus;
  }


  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the IntegrationRuntimeNodesUpdate200Response instance itself
   */
  public IntegrationRuntimeNodesUpdate200Response putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegrationRuntimeNodesUpdate200Response integrationRuntimeNodesUpdate200Response = (IntegrationRuntimeNodesUpdate200Response) o;
    return Objects.equals(this.capabilities, integrationRuntimeNodesUpdate200Response.capabilities) &&
        Objects.equals(this.concurrentJobsLimit, integrationRuntimeNodesUpdate200Response.concurrentJobsLimit) &&
        Objects.equals(this.expiryTime, integrationRuntimeNodesUpdate200Response.expiryTime) &&
        Objects.equals(this.hostServiceUri, integrationRuntimeNodesUpdate200Response.hostServiceUri) &&
        Objects.equals(this.isActiveDispatcher, integrationRuntimeNodesUpdate200Response.isActiveDispatcher) &&
        Objects.equals(this.lastConnectTime, integrationRuntimeNodesUpdate200Response.lastConnectTime) &&
        Objects.equals(this.lastEndUpdateTime, integrationRuntimeNodesUpdate200Response.lastEndUpdateTime) &&
        Objects.equals(this.lastStartTime, integrationRuntimeNodesUpdate200Response.lastStartTime) &&
        Objects.equals(this.lastStartUpdateTime, integrationRuntimeNodesUpdate200Response.lastStartUpdateTime) &&
        Objects.equals(this.lastStopTime, integrationRuntimeNodesUpdate200Response.lastStopTime) &&
        Objects.equals(this.lastUpdateResult, integrationRuntimeNodesUpdate200Response.lastUpdateResult) &&
        Objects.equals(this.machineName, integrationRuntimeNodesUpdate200Response.machineName) &&
        Objects.equals(this.maxConcurrentJobs, integrationRuntimeNodesUpdate200Response.maxConcurrentJobs) &&
        Objects.equals(this.nodeName, integrationRuntimeNodesUpdate200Response.nodeName) &&
        Objects.equals(this.registerTime, integrationRuntimeNodesUpdate200Response.registerTime) &&
        Objects.equals(this.status, integrationRuntimeNodesUpdate200Response.status) &&
        Objects.equals(this.version, integrationRuntimeNodesUpdate200Response.version) &&
        Objects.equals(this.versionStatus, integrationRuntimeNodesUpdate200Response.versionStatus)&&
        Objects.equals(this.additionalProperties, integrationRuntimeNodesUpdate200Response.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capabilities, concurrentJobsLimit, expiryTime, hostServiceUri, isActiveDispatcher, lastConnectTime, lastEndUpdateTime, lastStartTime, lastStartUpdateTime, lastStopTime, lastUpdateResult, machineName, maxConcurrentJobs, nodeName, registerTime, status, version, versionStatus, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegrationRuntimeNodesUpdate200Response {\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    concurrentJobsLimit: ").append(toIndentedString(concurrentJobsLimit)).append("\n");
    sb.append("    expiryTime: ").append(toIndentedString(expiryTime)).append("\n");
    sb.append("    hostServiceUri: ").append(toIndentedString(hostServiceUri)).append("\n");
    sb.append("    isActiveDispatcher: ").append(toIndentedString(isActiveDispatcher)).append("\n");
    sb.append("    lastConnectTime: ").append(toIndentedString(lastConnectTime)).append("\n");
    sb.append("    lastEndUpdateTime: ").append(toIndentedString(lastEndUpdateTime)).append("\n");
    sb.append("    lastStartTime: ").append(toIndentedString(lastStartTime)).append("\n");
    sb.append("    lastStartUpdateTime: ").append(toIndentedString(lastStartUpdateTime)).append("\n");
    sb.append("    lastStopTime: ").append(toIndentedString(lastStopTime)).append("\n");
    sb.append("    lastUpdateResult: ").append(toIndentedString(lastUpdateResult)).append("\n");
    sb.append("    machineName: ").append(toIndentedString(machineName)).append("\n");
    sb.append("    maxConcurrentJobs: ").append(toIndentedString(maxConcurrentJobs)).append("\n");
    sb.append("    nodeName: ").append(toIndentedString(nodeName)).append("\n");
    sb.append("    registerTime: ").append(toIndentedString(registerTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    versionStatus: ").append(toIndentedString(versionStatus)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capabilities");
    openapiFields.add("concurrentJobsLimit");
    openapiFields.add("expiryTime");
    openapiFields.add("hostServiceUri");
    openapiFields.add("isActiveDispatcher");
    openapiFields.add("lastConnectTime");
    openapiFields.add("lastEndUpdateTime");
    openapiFields.add("lastStartTime");
    openapiFields.add("lastStartUpdateTime");
    openapiFields.add("lastStopTime");
    openapiFields.add("lastUpdateResult");
    openapiFields.add("machineName");
    openapiFields.add("maxConcurrentJobs");
    openapiFields.add("nodeName");
    openapiFields.add("registerTime");
    openapiFields.add("status");
    openapiFields.add("version");
    openapiFields.add("versionStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IntegrationRuntimeNodesUpdate200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IntegrationRuntimeNodesUpdate200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntegrationRuntimeNodesUpdate200Response is not found in the empty JSON string", IntegrationRuntimeNodesUpdate200Response.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hostServiceUri") != null && !jsonObj.get("hostServiceUri").isJsonNull()) && !jsonObj.get("hostServiceUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostServiceUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostServiceUri").toString()));
      }
      if ((jsonObj.get("lastUpdateResult") != null && !jsonObj.get("lastUpdateResult").isJsonNull()) && !jsonObj.get("lastUpdateResult").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUpdateResult` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUpdateResult").toString()));
      }
      // validate the optional field `lastUpdateResult`
      if (jsonObj.get("lastUpdateResult") != null && !jsonObj.get("lastUpdateResult").isJsonNull()) {
        LastUpdateResultEnum.validateJsonElement(jsonObj.get("lastUpdateResult"));
      }
      if ((jsonObj.get("machineName") != null && !jsonObj.get("machineName").isJsonNull()) && !jsonObj.get("machineName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machineName").toString()));
      }
      if ((jsonObj.get("nodeName") != null && !jsonObj.get("nodeName").isJsonNull()) && !jsonObj.get("nodeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeName").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("versionStatus") != null && !jsonObj.get("versionStatus").isJsonNull()) && !jsonObj.get("versionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntegrationRuntimeNodesUpdate200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntegrationRuntimeNodesUpdate200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntegrationRuntimeNodesUpdate200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntegrationRuntimeNodesUpdate200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<IntegrationRuntimeNodesUpdate200Response>() {
           @Override
           public void write(JsonWriter out, IntegrationRuntimeNodesUpdate200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public IntegrationRuntimeNodesUpdate200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             IntegrationRuntimeNodesUpdate200Response instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IntegrationRuntimeNodesUpdate200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IntegrationRuntimeNodesUpdate200Response
   * @throws IOException if the JSON string is invalid with respect to IntegrationRuntimeNodesUpdate200Response
   */
  public static IntegrationRuntimeNodesUpdate200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntegrationRuntimeNodesUpdate200Response.class);
  }

  /**
   * Convert an instance of IntegrationRuntimeNodesUpdate200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

