/*
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about an activity run in a pipeline.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:51:50.752646-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActivityRun {
  public static final String SERIALIZED_NAME_ACTIVITY_NAME = "activityName";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_NAME)
  private String activityName;

  public static final String SERIALIZED_NAME_ACTIVITY_RUN_END = "activityRunEnd";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_RUN_END)
  private OffsetDateTime activityRunEnd;

  public static final String SERIALIZED_NAME_ACTIVITY_RUN_ID = "activityRunId";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_RUN_ID)
  private String activityRunId;

  public static final String SERIALIZED_NAME_ACTIVITY_RUN_START = "activityRunStart";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_RUN_START)
  private OffsetDateTime activityRunStart;

  public static final String SERIALIZED_NAME_ACTIVITY_TYPE = "activityType";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_TYPE)
  private String activityType;

  public static final String SERIALIZED_NAME_DURATION_IN_MS = "durationInMs";
  @SerializedName(SERIALIZED_NAME_DURATION_IN_MS)
  private Integer durationInMs;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private Object error;

  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private Object input;

  public static final String SERIALIZED_NAME_LINKED_SERVICE_NAME = "linkedServiceName";
  @SerializedName(SERIALIZED_NAME_LINKED_SERVICE_NAME)
  private String linkedServiceName;

  public static final String SERIALIZED_NAME_OUTPUT = "output";
  @SerializedName(SERIALIZED_NAME_OUTPUT)
  private Object output;

  public static final String SERIALIZED_NAME_PIPELINE_NAME = "pipelineName";
  @SerializedName(SERIALIZED_NAME_PIPELINE_NAME)
  private String pipelineName;

  public static final String SERIALIZED_NAME_PIPELINE_RUN_ID = "pipelineRunId";
  @SerializedName(SERIALIZED_NAME_PIPELINE_RUN_ID)
  private String pipelineRunId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public ActivityRun() {
  }

  public ActivityRun(
     String activityName, 
     OffsetDateTime activityRunEnd, 
     String activityRunId, 
     OffsetDateTime activityRunStart, 
     String activityType, 
     Integer durationInMs, 
     Object error, 
     Object input, 
     String linkedServiceName, 
     Object output, 
     String pipelineName, 
     String pipelineRunId, 
     String status
  ) {
    this();
    this.activityName = activityName;
    this.activityRunEnd = activityRunEnd;
    this.activityRunId = activityRunId;
    this.activityRunStart = activityRunStart;
    this.activityType = activityType;
    this.durationInMs = durationInMs;
    this.error = error;
    this.input = input;
    this.linkedServiceName = linkedServiceName;
    this.output = output;
    this.pipelineName = pipelineName;
    this.pipelineRunId = pipelineRunId;
    this.status = status;
  }

  /**
   * The name of the activity.
   * @return activityName
   */
  @javax.annotation.Nullable
  public String getActivityName() {
    return activityName;
  }



  /**
   * The end time of the activity run in &#39;ISO 8601&#39; format.
   * @return activityRunEnd
   */
  @javax.annotation.Nullable
  public OffsetDateTime getActivityRunEnd() {
    return activityRunEnd;
  }



  /**
   * The id of the activity run.
   * @return activityRunId
   */
  @javax.annotation.Nullable
  public String getActivityRunId() {
    return activityRunId;
  }



  /**
   * The start time of the activity run in &#39;ISO 8601&#39; format.
   * @return activityRunStart
   */
  @javax.annotation.Nullable
  public OffsetDateTime getActivityRunStart() {
    return activityRunStart;
  }



  /**
   * The type of the activity.
   * @return activityType
   */
  @javax.annotation.Nullable
  public String getActivityType() {
    return activityType;
  }



  /**
   * The duration of the activity run.
   * @return durationInMs
   */
  @javax.annotation.Nullable
  public Integer getDurationInMs() {
    return durationInMs;
  }



  /**
   * The error if any from the activity run.
   * @return error
   */
  @javax.annotation.Nullable
  public Object getError() {
    return error;
  }



  /**
   * The input for the activity.
   * @return input
   */
  @javax.annotation.Nullable
  public Object getInput() {
    return input;
  }



  /**
   * The name of the compute linked service.
   * @return linkedServiceName
   */
  @javax.annotation.Nullable
  public String getLinkedServiceName() {
    return linkedServiceName;
  }



  /**
   * The output for the activity.
   * @return output
   */
  @javax.annotation.Nullable
  public Object getOutput() {
    return output;
  }



  /**
   * The name of the pipeline.
   * @return pipelineName
   */
  @javax.annotation.Nullable
  public String getPipelineName() {
    return pipelineName;
  }



  /**
   * The id of the pipeline run.
   * @return pipelineRunId
   */
  @javax.annotation.Nullable
  public String getPipelineRunId() {
    return pipelineRunId;
  }



  /**
   * The status of the activity run.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }


  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ActivityRun instance itself
   */
  public ActivityRun putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivityRun activityRun = (ActivityRun) o;
    return Objects.equals(this.activityName, activityRun.activityName) &&
        Objects.equals(this.activityRunEnd, activityRun.activityRunEnd) &&
        Objects.equals(this.activityRunId, activityRun.activityRunId) &&
        Objects.equals(this.activityRunStart, activityRun.activityRunStart) &&
        Objects.equals(this.activityType, activityRun.activityType) &&
        Objects.equals(this.durationInMs, activityRun.durationInMs) &&
        Objects.equals(this.error, activityRun.error) &&
        Objects.equals(this.input, activityRun.input) &&
        Objects.equals(this.linkedServiceName, activityRun.linkedServiceName) &&
        Objects.equals(this.output, activityRun.output) &&
        Objects.equals(this.pipelineName, activityRun.pipelineName) &&
        Objects.equals(this.pipelineRunId, activityRun.pipelineRunId) &&
        Objects.equals(this.status, activityRun.status)&&
        Objects.equals(this.additionalProperties, activityRun.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityName, activityRunEnd, activityRunId, activityRunStart, activityType, durationInMs, error, input, linkedServiceName, output, pipelineName, pipelineRunId, status, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivityRun {\n");
    sb.append("    activityName: ").append(toIndentedString(activityName)).append("\n");
    sb.append("    activityRunEnd: ").append(toIndentedString(activityRunEnd)).append("\n");
    sb.append("    activityRunId: ").append(toIndentedString(activityRunId)).append("\n");
    sb.append("    activityRunStart: ").append(toIndentedString(activityRunStart)).append("\n");
    sb.append("    activityType: ").append(toIndentedString(activityType)).append("\n");
    sb.append("    durationInMs: ").append(toIndentedString(durationInMs)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    linkedServiceName: ").append(toIndentedString(linkedServiceName)).append("\n");
    sb.append("    output: ").append(toIndentedString(output)).append("\n");
    sb.append("    pipelineName: ").append(toIndentedString(pipelineName)).append("\n");
    sb.append("    pipelineRunId: ").append(toIndentedString(pipelineRunId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activityName");
    openapiFields.add("activityRunEnd");
    openapiFields.add("activityRunId");
    openapiFields.add("activityRunStart");
    openapiFields.add("activityType");
    openapiFields.add("durationInMs");
    openapiFields.add("error");
    openapiFields.add("input");
    openapiFields.add("linkedServiceName");
    openapiFields.add("output");
    openapiFields.add("pipelineName");
    openapiFields.add("pipelineRunId");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActivityRun
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActivityRun.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActivityRun is not found in the empty JSON string", ActivityRun.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("activityName") != null && !jsonObj.get("activityName").isJsonNull()) && !jsonObj.get("activityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activityName").toString()));
      }
      if ((jsonObj.get("activityRunId") != null && !jsonObj.get("activityRunId").isJsonNull()) && !jsonObj.get("activityRunId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activityRunId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activityRunId").toString()));
      }
      if ((jsonObj.get("activityType") != null && !jsonObj.get("activityType").isJsonNull()) && !jsonObj.get("activityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activityType").toString()));
      }
      if ((jsonObj.get("linkedServiceName") != null && !jsonObj.get("linkedServiceName").isJsonNull()) && !jsonObj.get("linkedServiceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedServiceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkedServiceName").toString()));
      }
      if ((jsonObj.get("pipelineName") != null && !jsonObj.get("pipelineName").isJsonNull()) && !jsonObj.get("pipelineName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pipelineName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pipelineName").toString()));
      }
      if ((jsonObj.get("pipelineRunId") != null && !jsonObj.get("pipelineRunId").isJsonNull()) && !jsonObj.get("pipelineRunId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pipelineRunId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pipelineRunId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActivityRun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActivityRun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActivityRun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActivityRun.class));

       return (TypeAdapter<T>) new TypeAdapter<ActivityRun>() {
           @Override
           public void write(JsonWriter out, ActivityRun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ActivityRun read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ActivityRun instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActivityRun given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActivityRun
   * @throws IOException if the JSON string is invalid with respect to ActivityRun
   */
  public static ActivityRun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActivityRun.class);
  }

  /**
   * Convert an instance of ActivityRun to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

