/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITriggersApi_H
#define OAI_OAITriggersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAITriggerListResponse.h"
#include "OAITriggerResource.h"
#include "OAITriggerRunListResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITriggersApi : public QObject {
    Q_OBJECT

public:
    OAITriggersApi(const int timeOut = 0);
    ~OAITriggersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  trigger_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  trigger OAITriggerResource [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void triggersCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &trigger_name, const QString &api_version, const OAITriggerResource &trigger, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  trigger_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void triggersDelete(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &trigger_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void triggersListByFactory(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  trigger_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  start_time QDateTime [required]
    * @param[in]  end_time QDateTime [required]
    */
    virtual void triggersListRuns(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &trigger_name, const QString &api_version, const QDateTime &start_time, const QDateTime &end_time);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  trigger_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void triggersStart(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &trigger_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  factory_name QString [required]
    * @param[in]  trigger_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void triggersStop(const QString &subscription_id, const QString &resource_group_name, const QString &factory_name, const QString &trigger_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void triggersCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void triggersDeleteCallback(OAIHttpRequestWorker *worker);
    void triggersListByFactoryCallback(OAIHttpRequestWorker *worker);
    void triggersListRunsCallback(OAIHttpRequestWorker *worker);
    void triggersStartCallback(OAIHttpRequestWorker *worker);
    void triggersStopCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void triggersCreateOrUpdateSignal(OAITriggerResource summary);
    void triggersDeleteSignal();
    void triggersListByFactorySignal(OAITriggerListResponse summary);
    void triggersListRunsSignal(OAITriggerRunListResponse summary);
    void triggersStartSignal();
    void triggersStopSignal();


    void triggersCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAITriggerResource summary);
    void triggersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void triggersListByFactorySignalFull(OAIHttpRequestWorker *worker, OAITriggerListResponse summary);
    void triggersListRunsSignalFull(OAIHttpRequestWorker *worker, OAITriggerRunListResponse summary);
    void triggersStartSignalFull(OAIHttpRequestWorker *worker);
    void triggersStopSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use triggersCreateOrUpdateSignalError() instead")
    void triggersCreateOrUpdateSignalE(OAITriggerResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void triggersCreateOrUpdateSignalError(OAITriggerResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use triggersDeleteSignalError() instead")
    void triggersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void triggersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use triggersListByFactorySignalError() instead")
    void triggersListByFactorySignalE(OAITriggerListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void triggersListByFactorySignalError(OAITriggerListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use triggersListRunsSignalError() instead")
    void triggersListRunsSignalE(OAITriggerRunListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void triggersListRunsSignalError(OAITriggerRunListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use triggersStartSignalError() instead")
    void triggersStartSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void triggersStartSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use triggersStopSignalError() instead")
    void triggersStopSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void triggersStopSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use triggersCreateOrUpdateSignalErrorFull() instead")
    void triggersCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void triggersCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use triggersDeleteSignalErrorFull() instead")
    void triggersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void triggersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use triggersListByFactorySignalErrorFull() instead")
    void triggersListByFactorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void triggersListByFactorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use triggersListRunsSignalErrorFull() instead")
    void triggersListRunsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void triggersListRunsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use triggersStartSignalErrorFull() instead")
    void triggersStartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void triggersStartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use triggersStopSignalErrorFull() instead")
    void triggersStopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void triggersStopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
