/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFactoryProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFactoryProperties::OAIFactoryProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFactoryProperties::OAIFactoryProperties() {
    this->initializeModel();
}

OAIFactoryProperties::~OAIFactoryProperties() {}

void OAIFactoryProperties::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_vsts_configuration_isSet = false;
    m_vsts_configuration_isValid = false;
}

void OAIFactoryProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFactoryProperties::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_vsts_configuration_isValid = ::OpenAPI::fromJsonValue(m_vsts_configuration, json[QString("vstsConfiguration")]);
    m_vsts_configuration_isSet = !json[QString("vstsConfiguration")].isNull() && m_vsts_configuration_isValid;
}

QString OAIFactoryProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFactoryProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_vsts_configuration.isSet()) {
        obj.insert(QString("vstsConfiguration"), ::OpenAPI::toJsonValue(m_vsts_configuration));
    }
    return obj;
}

QDateTime OAIFactoryProperties::getCreateTime() const {
    return m_create_time;
}
void OAIFactoryProperties::setCreateTime(const QDateTime &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIFactoryProperties::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIFactoryProperties::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIFactoryProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIFactoryProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIFactoryProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIFactoryProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIFactoryProperties::getVersion() const {
    return m_version;
}
void OAIFactoryProperties::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIFactoryProperties::is_version_Set() const{
    return m_version_isSet;
}

bool OAIFactoryProperties::is_version_Valid() const{
    return m_version_isValid;
}

OAIFactoryVSTSConfiguration OAIFactoryProperties::getVstsConfiguration() const {
    return m_vsts_configuration;
}
void OAIFactoryProperties::setVstsConfiguration(const OAIFactoryVSTSConfiguration &vsts_configuration) {
    m_vsts_configuration = vsts_configuration;
    m_vsts_configuration_isSet = true;
}

bool OAIFactoryProperties::is_vsts_configuration_Set() const{
    return m_vsts_configuration_isSet;
}

bool OAIFactoryProperties::is_vsts_configuration_Valid() const{
    return m_vsts_configuration_isValid;
}

bool OAIFactoryProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vsts_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFactoryProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
