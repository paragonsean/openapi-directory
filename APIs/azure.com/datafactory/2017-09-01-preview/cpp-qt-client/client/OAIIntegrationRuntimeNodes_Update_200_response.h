/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIntegrationRuntimeNodes_Update_200_response.h
 *
 * Properties of Self-hosted integration runtime node.
 */

#ifndef OAIIntegrationRuntimeNodes_Update_200_response_H
#define OAIIntegrationRuntimeNodes_Update_200_response_H

#include <QJsonObject>

#include "OAIObject.h"
#include <QDateTime>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIIntegrationRuntimeNodes_Update_200_response : public OAIObject {
public:
    OAIIntegrationRuntimeNodes_Update_200_response();
    OAIIntegrationRuntimeNodes_Update_200_response(QString json);
    ~OAIIntegrationRuntimeNodes_Update_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QString> getCapabilities() const;
    void setCapabilities(const QMap<QString, QString> &capabilities);
    bool is_capabilities_Set() const;
    bool is_capabilities_Valid() const;

    qint32 getConcurrentJobsLimit() const;
    void setConcurrentJobsLimit(const qint32 &concurrent_jobs_limit);
    bool is_concurrent_jobs_limit_Set() const;
    bool is_concurrent_jobs_limit_Valid() const;

    QDateTime getExpiryTime() const;
    void setExpiryTime(const QDateTime &expiry_time);
    bool is_expiry_time_Set() const;
    bool is_expiry_time_Valid() const;

    QString getHostServiceUri() const;
    void setHostServiceUri(const QString &host_service_uri);
    bool is_host_service_uri_Set() const;
    bool is_host_service_uri_Valid() const;

    bool isIsActiveDispatcher() const;
    void setIsActiveDispatcher(const bool &is_active_dispatcher);
    bool is_is_active_dispatcher_Set() const;
    bool is_is_active_dispatcher_Valid() const;

    QDateTime getLastConnectTime() const;
    void setLastConnectTime(const QDateTime &last_connect_time);
    bool is_last_connect_time_Set() const;
    bool is_last_connect_time_Valid() const;

    QDateTime getLastEndUpdateTime() const;
    void setLastEndUpdateTime(const QDateTime &last_end_update_time);
    bool is_last_end_update_time_Set() const;
    bool is_last_end_update_time_Valid() const;

    QDateTime getLastStartTime() const;
    void setLastStartTime(const QDateTime &last_start_time);
    bool is_last_start_time_Set() const;
    bool is_last_start_time_Valid() const;

    QDateTime getLastStartUpdateTime() const;
    void setLastStartUpdateTime(const QDateTime &last_start_update_time);
    bool is_last_start_update_time_Set() const;
    bool is_last_start_update_time_Valid() const;

    QDateTime getLastStopTime() const;
    void setLastStopTime(const QDateTime &last_stop_time);
    bool is_last_stop_time_Set() const;
    bool is_last_stop_time_Valid() const;

    QString getLastUpdateResult() const;
    void setLastUpdateResult(const QString &last_update_result);
    bool is_last_update_result_Set() const;
    bool is_last_update_result_Valid() const;

    QString getMachineName() const;
    void setMachineName(const QString &machine_name);
    bool is_machine_name_Set() const;
    bool is_machine_name_Valid() const;

    qint32 getMaxConcurrentJobs() const;
    void setMaxConcurrentJobs(const qint32 &max_concurrent_jobs);
    bool is_max_concurrent_jobs_Set() const;
    bool is_max_concurrent_jobs_Valid() const;

    QString getNodeName() const;
    void setNodeName(const QString &node_name);
    bool is_node_name_Set() const;
    bool is_node_name_Valid() const;

    QDateTime getRegisterTime() const;
    void setRegisterTime(const QDateTime &register_time);
    bool is_register_time_Set() const;
    bool is_register_time_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    QString getVersionStatus() const;
    void setVersionStatus(const QString &version_status);
    bool is_version_status_Set() const;
    bool is_version_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QString> m_capabilities;
    bool m_capabilities_isSet;
    bool m_capabilities_isValid;

    qint32 m_concurrent_jobs_limit;
    bool m_concurrent_jobs_limit_isSet;
    bool m_concurrent_jobs_limit_isValid;

    QDateTime m_expiry_time;
    bool m_expiry_time_isSet;
    bool m_expiry_time_isValid;

    QString m_host_service_uri;
    bool m_host_service_uri_isSet;
    bool m_host_service_uri_isValid;

    bool m_is_active_dispatcher;
    bool m_is_active_dispatcher_isSet;
    bool m_is_active_dispatcher_isValid;

    QDateTime m_last_connect_time;
    bool m_last_connect_time_isSet;
    bool m_last_connect_time_isValid;

    QDateTime m_last_end_update_time;
    bool m_last_end_update_time_isSet;
    bool m_last_end_update_time_isValid;

    QDateTime m_last_start_time;
    bool m_last_start_time_isSet;
    bool m_last_start_time_isValid;

    QDateTime m_last_start_update_time;
    bool m_last_start_update_time_isSet;
    bool m_last_start_update_time_isValid;

    QDateTime m_last_stop_time;
    bool m_last_stop_time_isSet;
    bool m_last_stop_time_isValid;

    QString m_last_update_result;
    bool m_last_update_result_isSet;
    bool m_last_update_result_isValid;

    QString m_machine_name;
    bool m_machine_name_isSet;
    bool m_machine_name_isValid;

    qint32 m_max_concurrent_jobs;
    bool m_max_concurrent_jobs_isSet;
    bool m_max_concurrent_jobs_isValid;

    QString m_node_name;
    bool m_node_name_isSet;
    bool m_node_name_isValid;

    QDateTime m_register_time;
    bool m_register_time_isSet;
    bool m_register_time_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;

    QString m_version_status;
    bool m_version_status_isSet;
    bool m_version_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIntegrationRuntimeNodes_Update_200_response)

#endif // OAIIntegrationRuntimeNodes_Update_200_response_H
