/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFactoryVSTSConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFactoryVSTSConfiguration::OAIFactoryVSTSConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFactoryVSTSConfiguration::OAIFactoryVSTSConfiguration() {
    this->initializeModel();
}

OAIFactoryVSTSConfiguration::~OAIFactoryVSTSConfiguration() {}

void OAIFactoryVSTSConfiguration::initializeModel() {

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_collaboration_branch_isSet = false;
    m_collaboration_branch_isValid = false;

    m_last_commit_id_isSet = false;
    m_last_commit_id_isValid = false;

    m_project_name_isSet = false;
    m_project_name_isValid = false;

    m_repository_name_isSet = false;
    m_repository_name_isValid = false;

    m_root_folder_isSet = false;
    m_root_folder_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;
}

void OAIFactoryVSTSConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFactoryVSTSConfiguration::fromJsonObject(QJsonObject json) {

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_collaboration_branch_isValid = ::OpenAPI::fromJsonValue(m_collaboration_branch, json[QString("collaborationBranch")]);
    m_collaboration_branch_isSet = !json[QString("collaborationBranch")].isNull() && m_collaboration_branch_isValid;

    m_last_commit_id_isValid = ::OpenAPI::fromJsonValue(m_last_commit_id, json[QString("lastCommitId")]);
    m_last_commit_id_isSet = !json[QString("lastCommitId")].isNull() && m_last_commit_id_isValid;

    m_project_name_isValid = ::OpenAPI::fromJsonValue(m_project_name, json[QString("projectName")]);
    m_project_name_isSet = !json[QString("projectName")].isNull() && m_project_name_isValid;

    m_repository_name_isValid = ::OpenAPI::fromJsonValue(m_repository_name, json[QString("repositoryName")]);
    m_repository_name_isSet = !json[QString("repositoryName")].isNull() && m_repository_name_isValid;

    m_root_folder_isValid = ::OpenAPI::fromJsonValue(m_root_folder, json[QString("rootFolder")]);
    m_root_folder_isSet = !json[QString("rootFolder")].isNull() && m_root_folder_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;
}

QString OAIFactoryVSTSConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFactoryVSTSConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_collaboration_branch_isSet) {
        obj.insert(QString("collaborationBranch"), ::OpenAPI::toJsonValue(m_collaboration_branch));
    }
    if (m_last_commit_id_isSet) {
        obj.insert(QString("lastCommitId"), ::OpenAPI::toJsonValue(m_last_commit_id));
    }
    if (m_project_name_isSet) {
        obj.insert(QString("projectName"), ::OpenAPI::toJsonValue(m_project_name));
    }
    if (m_repository_name_isSet) {
        obj.insert(QString("repositoryName"), ::OpenAPI::toJsonValue(m_repository_name));
    }
    if (m_root_folder_isSet) {
        obj.insert(QString("rootFolder"), ::OpenAPI::toJsonValue(m_root_folder));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    return obj;
}

QString OAIFactoryVSTSConfiguration::getAccountName() const {
    return m_account_name;
}
void OAIFactoryVSTSConfiguration::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIFactoryVSTSConfiguration::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIFactoryVSTSConfiguration::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAIFactoryVSTSConfiguration::getCollaborationBranch() const {
    return m_collaboration_branch;
}
void OAIFactoryVSTSConfiguration::setCollaborationBranch(const QString &collaboration_branch) {
    m_collaboration_branch = collaboration_branch;
    m_collaboration_branch_isSet = true;
}

bool OAIFactoryVSTSConfiguration::is_collaboration_branch_Set() const{
    return m_collaboration_branch_isSet;
}

bool OAIFactoryVSTSConfiguration::is_collaboration_branch_Valid() const{
    return m_collaboration_branch_isValid;
}

QString OAIFactoryVSTSConfiguration::getLastCommitId() const {
    return m_last_commit_id;
}
void OAIFactoryVSTSConfiguration::setLastCommitId(const QString &last_commit_id) {
    m_last_commit_id = last_commit_id;
    m_last_commit_id_isSet = true;
}

bool OAIFactoryVSTSConfiguration::is_last_commit_id_Set() const{
    return m_last_commit_id_isSet;
}

bool OAIFactoryVSTSConfiguration::is_last_commit_id_Valid() const{
    return m_last_commit_id_isValid;
}

QString OAIFactoryVSTSConfiguration::getProjectName() const {
    return m_project_name;
}
void OAIFactoryVSTSConfiguration::setProjectName(const QString &project_name) {
    m_project_name = project_name;
    m_project_name_isSet = true;
}

bool OAIFactoryVSTSConfiguration::is_project_name_Set() const{
    return m_project_name_isSet;
}

bool OAIFactoryVSTSConfiguration::is_project_name_Valid() const{
    return m_project_name_isValid;
}

QString OAIFactoryVSTSConfiguration::getRepositoryName() const {
    return m_repository_name;
}
void OAIFactoryVSTSConfiguration::setRepositoryName(const QString &repository_name) {
    m_repository_name = repository_name;
    m_repository_name_isSet = true;
}

bool OAIFactoryVSTSConfiguration::is_repository_name_Set() const{
    return m_repository_name_isSet;
}

bool OAIFactoryVSTSConfiguration::is_repository_name_Valid() const{
    return m_repository_name_isValid;
}

QString OAIFactoryVSTSConfiguration::getRootFolder() const {
    return m_root_folder;
}
void OAIFactoryVSTSConfiguration::setRootFolder(const QString &root_folder) {
    m_root_folder = root_folder;
    m_root_folder_isSet = true;
}

bool OAIFactoryVSTSConfiguration::is_root_folder_Set() const{
    return m_root_folder_isSet;
}

bool OAIFactoryVSTSConfiguration::is_root_folder_Valid() const{
    return m_root_folder_isValid;
}

QString OAIFactoryVSTSConfiguration::getTenantId() const {
    return m_tenant_id;
}
void OAIFactoryVSTSConfiguration::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIFactoryVSTSConfiguration::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIFactoryVSTSConfiguration::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAIFactoryVSTSConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collaboration_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_commit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_folder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFactoryVSTSConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
