/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITriggerRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITriggerRun::OAITriggerRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITriggerRun::OAITriggerRun() {
    this->initializeModel();
}

OAITriggerRun::~OAITriggerRun() {}

void OAITriggerRun::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_trigger_name_isSet = false;
    m_trigger_name_isValid = false;

    m_trigger_run_id_isSet = false;
    m_trigger_run_id_isValid = false;

    m_trigger_run_timestamp_isSet = false;
    m_trigger_run_timestamp_isValid = false;

    m_trigger_type_isSet = false;
    m_trigger_type_isValid = false;

    m_triggered_pipelines_isSet = false;
    m_triggered_pipelines_isValid = false;
}

void OAITriggerRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITriggerRun::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_trigger_name_isValid = ::OpenAPI::fromJsonValue(m_trigger_name, json[QString("triggerName")]);
    m_trigger_name_isSet = !json[QString("triggerName")].isNull() && m_trigger_name_isValid;

    m_trigger_run_id_isValid = ::OpenAPI::fromJsonValue(m_trigger_run_id, json[QString("triggerRunId")]);
    m_trigger_run_id_isSet = !json[QString("triggerRunId")].isNull() && m_trigger_run_id_isValid;

    m_trigger_run_timestamp_isValid = ::OpenAPI::fromJsonValue(m_trigger_run_timestamp, json[QString("triggerRunTimestamp")]);
    m_trigger_run_timestamp_isSet = !json[QString("triggerRunTimestamp")].isNull() && m_trigger_run_timestamp_isValid;

    m_trigger_type_isValid = ::OpenAPI::fromJsonValue(m_trigger_type, json[QString("triggerType")]);
    m_trigger_type_isSet = !json[QString("triggerType")].isNull() && m_trigger_type_isValid;

    m_triggered_pipelines_isValid = ::OpenAPI::fromJsonValue(m_triggered_pipelines, json[QString("triggeredPipelines")]);
    m_triggered_pipelines_isSet = !json[QString("triggeredPipelines")].isNull() && m_triggered_pipelines_isValid;
}

QString OAITriggerRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITriggerRun::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_trigger_name_isSet) {
        obj.insert(QString("triggerName"), ::OpenAPI::toJsonValue(m_trigger_name));
    }
    if (m_trigger_run_id_isSet) {
        obj.insert(QString("triggerRunId"), ::OpenAPI::toJsonValue(m_trigger_run_id));
    }
    if (m_trigger_run_timestamp_isSet) {
        obj.insert(QString("triggerRunTimestamp"), ::OpenAPI::toJsonValue(m_trigger_run_timestamp));
    }
    if (m_trigger_type_isSet) {
        obj.insert(QString("triggerType"), ::OpenAPI::toJsonValue(m_trigger_type));
    }
    if (m_triggered_pipelines.size() > 0) {
        obj.insert(QString("triggeredPipelines"), ::OpenAPI::toJsonValue(m_triggered_pipelines));
    }
    return obj;
}

QString OAITriggerRun::getMessage() const {
    return m_message;
}
void OAITriggerRun::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAITriggerRun::is_message_Set() const{
    return m_message_isSet;
}

bool OAITriggerRun::is_message_Valid() const{
    return m_message_isValid;
}

QMap<QString, QString> OAITriggerRun::getProperties() const {
    return m_properties;
}
void OAITriggerRun::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAITriggerRun::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAITriggerRun::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAITriggerRun::getStatus() const {
    return m_status;
}
void OAITriggerRun::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITriggerRun::is_status_Set() const{
    return m_status_isSet;
}

bool OAITriggerRun::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITriggerRun::getTriggerName() const {
    return m_trigger_name;
}
void OAITriggerRun::setTriggerName(const QString &trigger_name) {
    m_trigger_name = trigger_name;
    m_trigger_name_isSet = true;
}

bool OAITriggerRun::is_trigger_name_Set() const{
    return m_trigger_name_isSet;
}

bool OAITriggerRun::is_trigger_name_Valid() const{
    return m_trigger_name_isValid;
}

QString OAITriggerRun::getTriggerRunId() const {
    return m_trigger_run_id;
}
void OAITriggerRun::setTriggerRunId(const QString &trigger_run_id) {
    m_trigger_run_id = trigger_run_id;
    m_trigger_run_id_isSet = true;
}

bool OAITriggerRun::is_trigger_run_id_Set() const{
    return m_trigger_run_id_isSet;
}

bool OAITriggerRun::is_trigger_run_id_Valid() const{
    return m_trigger_run_id_isValid;
}

QDateTime OAITriggerRun::getTriggerRunTimestamp() const {
    return m_trigger_run_timestamp;
}
void OAITriggerRun::setTriggerRunTimestamp(const QDateTime &trigger_run_timestamp) {
    m_trigger_run_timestamp = trigger_run_timestamp;
    m_trigger_run_timestamp_isSet = true;
}

bool OAITriggerRun::is_trigger_run_timestamp_Set() const{
    return m_trigger_run_timestamp_isSet;
}

bool OAITriggerRun::is_trigger_run_timestamp_Valid() const{
    return m_trigger_run_timestamp_isValid;
}

QString OAITriggerRun::getTriggerType() const {
    return m_trigger_type;
}
void OAITriggerRun::setTriggerType(const QString &trigger_type) {
    m_trigger_type = trigger_type;
    m_trigger_type_isSet = true;
}

bool OAITriggerRun::is_trigger_type_Set() const{
    return m_trigger_type_isSet;
}

bool OAITriggerRun::is_trigger_type_Valid() const{
    return m_trigger_type_isValid;
}

QMap<QString, QString> OAITriggerRun::getTriggeredPipelines() const {
    return m_triggered_pipelines;
}
void OAITriggerRun::setTriggeredPipelines(const QMap<QString, QString> &triggered_pipelines) {
    m_triggered_pipelines = triggered_pipelines;
    m_triggered_pipelines_isSet = true;
}

bool OAITriggerRun::is_triggered_pipelines_Set() const{
    return m_triggered_pipelines_isSet;
}

bool OAITriggerRun::is_triggered_pipelines_Valid() const{
    return m_triggered_pipelines_isValid;
}

bool OAITriggerRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_run_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_triggered_pipelines.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITriggerRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
