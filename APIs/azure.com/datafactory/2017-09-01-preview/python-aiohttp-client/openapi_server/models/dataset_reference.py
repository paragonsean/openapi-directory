# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatasetReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parameters: Dict[str, object]=None, reference_name: str=None, type: str=None):
        """DatasetReference - a model defined in OpenAPI

        :param parameters: The parameters of this DatasetReference.
        :param reference_name: The reference_name of this DatasetReference.
        :param type: The type of this DatasetReference.
        """
        self.openapi_types = {
            'parameters': Dict[str, object],
            'reference_name': str,
            'type': str
        }

        self.attribute_map = {
            'parameters': 'parameters',
            'reference_name': 'referenceName',
            'type': 'type'
        }

        self._parameters = parameters
        self._reference_name = reference_name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatasetReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatasetReference of this DatasetReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameters(self):
        """Gets the parameters of this DatasetReference.

        An object mapping parameter names to argument values.

        :return: The parameters of this DatasetReference.
        :rtype: Dict[str, object]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this DatasetReference.

        An object mapping parameter names to argument values.

        :param parameters: The parameters of this DatasetReference.
        :type parameters: Dict[str, object]
        """

        self._parameters = parameters

    @property
    def reference_name(self):
        """Gets the reference_name of this DatasetReference.

        Reference dataset name.

        :return: The reference_name of this DatasetReference.
        :rtype: str
        """
        return self._reference_name

    @reference_name.setter
    def reference_name(self, reference_name):
        """Sets the reference_name of this DatasetReference.

        Reference dataset name.

        :param reference_name: The reference_name of this DatasetReference.
        :type reference_name: str
        """
        if reference_name is None:
            raise ValueError("Invalid value for `reference_name`, must not be `None`")

        self._reference_name = reference_name

    @property
    def type(self):
        """Gets the type of this DatasetReference.

        Dataset reference type.

        :return: The type of this DatasetReference.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DatasetReference.

        Dataset reference type.

        :param type: The type of this DatasetReference.
        :type type: str
        """
        allowed_values = ["DatasetReference"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
