# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ParameterSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_value: object=None, type: str=None):
        """ParameterSpecification - a model defined in OpenAPI

        :param default_value: The default_value of this ParameterSpecification.
        :param type: The type of this ParameterSpecification.
        """
        self.openapi_types = {
            'default_value': object,
            'type': str
        }

        self.attribute_map = {
            'default_value': 'defaultValue',
            'type': 'type'
        }

        self._default_value = default_value
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParameterSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParameterSpecification of this ParameterSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_value(self):
        """Gets the default_value of this ParameterSpecification.

        Default value of parameter.

        :return: The default_value of this ParameterSpecification.
        :rtype: object
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this ParameterSpecification.

        Default value of parameter.

        :param default_value: The default_value of this ParameterSpecification.
        :type default_value: object
        """

        self._default_value = default_value

    @property
    def type(self):
        """Gets the type of this ParameterSpecification.

        Parameter type.

        :return: The type of this ParameterSpecification.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ParameterSpecification.

        Parameter type.

        :param type: The type of this ParameterSpecification.
        :type type: str
        """
        allowed_values = ["Object", "String", "Int", "Float", "Bool", "Array", "SecureString"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
