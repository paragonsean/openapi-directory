# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateIntegrationRuntimeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_update: str=None, update_delay_offset: str=None):
        """UpdateIntegrationRuntimeRequest - a model defined in OpenAPI

        :param auto_update: The auto_update of this UpdateIntegrationRuntimeRequest.
        :param update_delay_offset: The update_delay_offset of this UpdateIntegrationRuntimeRequest.
        """
        self.openapi_types = {
            'auto_update': str,
            'update_delay_offset': str
        }

        self.attribute_map = {
            'auto_update': 'autoUpdate',
            'update_delay_offset': 'updateDelayOffset'
        }

        self._auto_update = auto_update
        self._update_delay_offset = update_delay_offset

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateIntegrationRuntimeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateIntegrationRuntimeRequest of this UpdateIntegrationRuntimeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_update(self):
        """Gets the auto_update of this UpdateIntegrationRuntimeRequest.

        The state of integration runtime auto update.

        :return: The auto_update of this UpdateIntegrationRuntimeRequest.
        :rtype: str
        """
        return self._auto_update

    @auto_update.setter
    def auto_update(self, auto_update):
        """Sets the auto_update of this UpdateIntegrationRuntimeRequest.

        The state of integration runtime auto update.

        :param auto_update: The auto_update of this UpdateIntegrationRuntimeRequest.
        :type auto_update: str
        """
        allowed_values = ["On", "Off"]  # noqa: E501
        if auto_update not in allowed_values:
            raise ValueError(
                "Invalid value for `auto_update` ({0}), must be one of {1}"
                .format(auto_update, allowed_values)
            )

        self._auto_update = auto_update

    @property
    def update_delay_offset(self):
        """Gets the update_delay_offset of this UpdateIntegrationRuntimeRequest.

        The time offset (in hours) in the day, e.g., PT03H is 3 hours. The integration runtime auto update will happen on that time.

        :return: The update_delay_offset of this UpdateIntegrationRuntimeRequest.
        :rtype: str
        """
        return self._update_delay_offset

    @update_delay_offset.setter
    def update_delay_offset(self, update_delay_offset):
        """Sets the update_delay_offset of this UpdateIntegrationRuntimeRequest.

        The time offset (in hours) in the day, e.g., PT03H is 3 hours. The integration runtime auto update will happen on that time.

        :param update_delay_offset: The update_delay_offset of this UpdateIntegrationRuntimeRequest.
        :type update_delay_offset: str
        """

        self._update_delay_offset = update_delay_offset
