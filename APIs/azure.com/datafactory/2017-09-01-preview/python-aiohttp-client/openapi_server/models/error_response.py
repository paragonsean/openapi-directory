# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ErrorResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, details: List[ErrorResponse]=None, message: str=None, target: str=None):
        """ErrorResponse - a model defined in OpenAPI

        :param code: The code of this ErrorResponse.
        :param details: The details of this ErrorResponse.
        :param message: The message of this ErrorResponse.
        :param target: The target of this ErrorResponse.
        """
        self.openapi_types = {
            'code': str,
            'details': List[ErrorResponse],
            'message': str,
            'target': str
        }

        self.attribute_map = {
            'code': 'code',
            'details': 'details',
            'message': 'message',
            'target': 'target'
        }

        self._code = code
        self._details = details
        self._message = message
        self._target = target

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErrorResponse of this ErrorResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ErrorResponse.

        Error code.

        :return: The code of this ErrorResponse.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ErrorResponse.

        Error code.

        :param code: The code of this ErrorResponse.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def details(self):
        """Gets the details of this ErrorResponse.

        Array with additional error details.

        :return: The details of this ErrorResponse.
        :rtype: List[ErrorResponse]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ErrorResponse.

        Array with additional error details.

        :param details: The details of this ErrorResponse.
        :type details: List[ErrorResponse]
        """

        self._details = details

    @property
    def message(self):
        """Gets the message of this ErrorResponse.

        Error message.

        :return: The message of this ErrorResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ErrorResponse.

        Error message.

        :param message: The message of this ErrorResponse.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def target(self):
        """Gets the target of this ErrorResponse.

        Property name/path in request associated with error.

        :return: The target of this ErrorResponse.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this ErrorResponse.

        Property name/path in request associated with error.

        :param target: The target of this ErrorResponse.
        :type target: str
        """

        self._target = target
