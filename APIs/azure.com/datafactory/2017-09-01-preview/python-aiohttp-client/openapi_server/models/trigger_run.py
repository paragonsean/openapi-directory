# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TriggerRun(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, properties: Dict[str, str]=None, status: str=None, trigger_name: str=None, trigger_run_id: str=None, trigger_run_timestamp: datetime=None, trigger_type: str=None, triggered_pipelines: Dict[str, str]=None):
        """TriggerRun - a model defined in OpenAPI

        :param message: The message of this TriggerRun.
        :param properties: The properties of this TriggerRun.
        :param status: The status of this TriggerRun.
        :param trigger_name: The trigger_name of this TriggerRun.
        :param trigger_run_id: The trigger_run_id of this TriggerRun.
        :param trigger_run_timestamp: The trigger_run_timestamp of this TriggerRun.
        :param trigger_type: The trigger_type of this TriggerRun.
        :param triggered_pipelines: The triggered_pipelines of this TriggerRun.
        """
        self.openapi_types = {
            'message': str,
            'properties': Dict[str, str],
            'status': str,
            'trigger_name': str,
            'trigger_run_id': str,
            'trigger_run_timestamp': datetime,
            'trigger_type': str,
            'triggered_pipelines': Dict[str, str]
        }

        self.attribute_map = {
            'message': 'message',
            'properties': 'properties',
            'status': 'status',
            'trigger_name': 'triggerName',
            'trigger_run_id': 'triggerRunId',
            'trigger_run_timestamp': 'triggerRunTimestamp',
            'trigger_type': 'triggerType',
            'triggered_pipelines': 'triggeredPipelines'
        }

        self._message = message
        self._properties = properties
        self._status = status
        self._trigger_name = trigger_name
        self._trigger_run_id = trigger_run_id
        self._trigger_run_timestamp = trigger_run_timestamp
        self._trigger_type = trigger_type
        self._triggered_pipelines = triggered_pipelines

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TriggerRun':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TriggerRun of this TriggerRun.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this TriggerRun.

        Trigger error message.

        :return: The message of this TriggerRun.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TriggerRun.

        Trigger error message.

        :param message: The message of this TriggerRun.
        :type message: str
        """

        self._message = message

    @property
    def properties(self):
        """Gets the properties of this TriggerRun.

        List of property name and value related to trigger run. Name, value pair depends on type of trigger.

        :return: The properties of this TriggerRun.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this TriggerRun.

        List of property name and value related to trigger run. Name, value pair depends on type of trigger.

        :param properties: The properties of this TriggerRun.
        :type properties: Dict[str, str]
        """

        self._properties = properties

    @property
    def status(self):
        """Gets the status of this TriggerRun.

        Trigger run status.

        :return: The status of this TriggerRun.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TriggerRun.

        Trigger run status.

        :param status: The status of this TriggerRun.
        :type status: str
        """
        allowed_values = ["Succeeded", "Failed", "Inprogress"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def trigger_name(self):
        """Gets the trigger_name of this TriggerRun.

        Trigger name.

        :return: The trigger_name of this TriggerRun.
        :rtype: str
        """
        return self._trigger_name

    @trigger_name.setter
    def trigger_name(self, trigger_name):
        """Sets the trigger_name of this TriggerRun.

        Trigger name.

        :param trigger_name: The trigger_name of this TriggerRun.
        :type trigger_name: str
        """

        self._trigger_name = trigger_name

    @property
    def trigger_run_id(self):
        """Gets the trigger_run_id of this TriggerRun.

        Trigger run id.

        :return: The trigger_run_id of this TriggerRun.
        :rtype: str
        """
        return self._trigger_run_id

    @trigger_run_id.setter
    def trigger_run_id(self, trigger_run_id):
        """Sets the trigger_run_id of this TriggerRun.

        Trigger run id.

        :param trigger_run_id: The trigger_run_id of this TriggerRun.
        :type trigger_run_id: str
        """

        self._trigger_run_id = trigger_run_id

    @property
    def trigger_run_timestamp(self):
        """Gets the trigger_run_timestamp of this TriggerRun.

        Trigger run start time.

        :return: The trigger_run_timestamp of this TriggerRun.
        :rtype: datetime
        """
        return self._trigger_run_timestamp

    @trigger_run_timestamp.setter
    def trigger_run_timestamp(self, trigger_run_timestamp):
        """Sets the trigger_run_timestamp of this TriggerRun.

        Trigger run start time.

        :param trigger_run_timestamp: The trigger_run_timestamp of this TriggerRun.
        :type trigger_run_timestamp: datetime
        """

        self._trigger_run_timestamp = trigger_run_timestamp

    @property
    def trigger_type(self):
        """Gets the trigger_type of this TriggerRun.

        Trigger type.

        :return: The trigger_type of this TriggerRun.
        :rtype: str
        """
        return self._trigger_type

    @trigger_type.setter
    def trigger_type(self, trigger_type):
        """Sets the trigger_type of this TriggerRun.

        Trigger type.

        :param trigger_type: The trigger_type of this TriggerRun.
        :type trigger_type: str
        """

        self._trigger_type = trigger_type

    @property
    def triggered_pipelines(self):
        """Gets the triggered_pipelines of this TriggerRun.

        List of pipeline name and run Id triggered by the trigger run.

        :return: The triggered_pipelines of this TriggerRun.
        :rtype: Dict[str, str]
        """
        return self._triggered_pipelines

    @triggered_pipelines.setter
    def triggered_pipelines(self, triggered_pipelines):
        """Sets the triggered_pipelines of this TriggerRun.

        List of pipeline name and run Id triggered by the trigger run.

        :param triggered_pipelines: The triggered_pipelines of this TriggerRun.
        :type triggered_pipelines: Dict[str, str]
        """

        self._triggered_pipelines = triggered_pipelines
