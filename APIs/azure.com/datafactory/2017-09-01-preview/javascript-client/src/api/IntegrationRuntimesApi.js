/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import IntegrationRuntimeListResponse from '../model/IntegrationRuntimeListResponse';
import IntegrationRuntimeResource from '../model/IntegrationRuntimeResource';
import IntegrationRuntimeStatusResponse from '../model/IntegrationRuntimeStatusResponse';
import IntegrationRuntimesGetConnectionInfo200Response from '../model/IntegrationRuntimesGetConnectionInfo200Response';
import IntegrationRuntimesGetMonitoringData200Response from '../model/IntegrationRuntimesGetMonitoringData200Response';
import IntegrationRuntimesListAuthKeys200Response from '../model/IntegrationRuntimesListAuthKeys200Response';
import IntegrationRuntimesRegenerateAuthKeyRequest from '../model/IntegrationRuntimesRegenerateAuthKeyRequest';
import IntegrationRuntimesRemoveNodeRequest from '../model/IntegrationRuntimesRemoveNodeRequest';
import UpdateIntegrationRuntimeRequest from '../model/UpdateIntegrationRuntimeRequest';

/**
* IntegrationRuntimes service.
* @module api/IntegrationRuntimesApi
* @version 2017-09-01-preview
*/
export default class IntegrationRuntimesApi {

    /**
    * Constructs a new IntegrationRuntimesApi. 
    * @alias module:api/IntegrationRuntimesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the integrationRuntimesCreateOrUpdate operation.
     * @callback module:api/IntegrationRuntimesApi~integrationRuntimesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationRuntimeResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates an integration runtime.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} integrationRuntimeName The integration runtime name.
     * @param {String} apiVersion The API version.
     * @param {module:model/IntegrationRuntimeResource} integrationRuntime Integration runtime resource definition.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] ETag of the integration runtime entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update.
     * @param {module:api/IntegrationRuntimesApi~integrationRuntimesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationRuntimeResource}
     */
    integrationRuntimesCreateOrUpdate(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, integrationRuntime, opts, callback) {
      opts = opts || {};
      let postBody = integrationRuntime;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationRuntimesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesCreateOrUpdate");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling integrationRuntimesCreateOrUpdate");
      }
      // verify the required parameter 'integrationRuntimeName' is set
      if (integrationRuntimeName === undefined || integrationRuntimeName === null) {
        throw new Error("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationRuntimesCreateOrUpdate");
      }
      // verify the required parameter 'integrationRuntime' is set
      if (integrationRuntime === undefined || integrationRuntime === null) {
        throw new Error("Missing the required parameter 'integrationRuntime' when calling integrationRuntimesCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'integrationRuntimeName': integrationRuntimeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IntegrationRuntimeResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationRuntimesDelete operation.
     * @callback module:api/IntegrationRuntimesApi~integrationRuntimesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an integration runtime.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} integrationRuntimeName The integration runtime name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationRuntimesApi~integrationRuntimesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    integrationRuntimesDelete(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationRuntimesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesDelete");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling integrationRuntimesDelete");
      }
      // verify the required parameter 'integrationRuntimeName' is set
      if (integrationRuntimeName === undefined || integrationRuntimeName === null) {
        throw new Error("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationRuntimesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'integrationRuntimeName': integrationRuntimeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationRuntimesGet operation.
     * @callback module:api/IntegrationRuntimesApi~integrationRuntimesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationRuntimeResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an integration runtime.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} integrationRuntimeName The integration runtime name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationRuntimesApi~integrationRuntimesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationRuntimeResource}
     */
    integrationRuntimesGet(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationRuntimesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesGet");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling integrationRuntimesGet");
      }
      // verify the required parameter 'integrationRuntimeName' is set
      if (integrationRuntimeName === undefined || integrationRuntimeName === null) {
        throw new Error("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationRuntimesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'integrationRuntimeName': integrationRuntimeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntegrationRuntimeResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationRuntimesGetConnectionInfo operation.
     * @callback module:api/IntegrationRuntimesApi~integrationRuntimesGetConnectionInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationRuntimesGetConnectionInfo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the on-premises integration runtime connection information for encrypting the on-premises data source credentials.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} integrationRuntimeName The integration runtime name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationRuntimesApi~integrationRuntimesGetConnectionInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationRuntimesGetConnectionInfo200Response}
     */
    integrationRuntimesGetConnectionInfo(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationRuntimesGetConnectionInfo");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesGetConnectionInfo");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling integrationRuntimesGetConnectionInfo");
      }
      // verify the required parameter 'integrationRuntimeName' is set
      if (integrationRuntimeName === undefined || integrationRuntimeName === null) {
        throw new Error("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimesGetConnectionInfo");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationRuntimesGetConnectionInfo");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'integrationRuntimeName': integrationRuntimeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntegrationRuntimesGetConnectionInfo200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/getConnectionInfo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationRuntimesGetMonitoringData operation.
     * @callback module:api/IntegrationRuntimesApi~integrationRuntimesGetMonitoringDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationRuntimesGetMonitoringData200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the integration runtime monitoring data, which includes the monitor data for all the nodes under this integration runtime.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} integrationRuntimeName The integration runtime name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationRuntimesApi~integrationRuntimesGetMonitoringDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationRuntimesGetMonitoringData200Response}
     */
    integrationRuntimesGetMonitoringData(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationRuntimesGetMonitoringData");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesGetMonitoringData");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling integrationRuntimesGetMonitoringData");
      }
      // verify the required parameter 'integrationRuntimeName' is set
      if (integrationRuntimeName === undefined || integrationRuntimeName === null) {
        throw new Error("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimesGetMonitoringData");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationRuntimesGetMonitoringData");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'integrationRuntimeName': integrationRuntimeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntegrationRuntimesGetMonitoringData200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/monitoringData', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationRuntimesGetStatus operation.
     * @callback module:api/IntegrationRuntimesApi~integrationRuntimesGetStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationRuntimeStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets detailed status information for an integration runtime.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} integrationRuntimeName The integration runtime name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationRuntimesApi~integrationRuntimesGetStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationRuntimeStatusResponse}
     */
    integrationRuntimesGetStatus(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationRuntimesGetStatus");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesGetStatus");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling integrationRuntimesGetStatus");
      }
      // verify the required parameter 'integrationRuntimeName' is set
      if (integrationRuntimeName === undefined || integrationRuntimeName === null) {
        throw new Error("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimesGetStatus");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationRuntimesGetStatus");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'integrationRuntimeName': integrationRuntimeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntegrationRuntimeStatusResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/getStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationRuntimesListAuthKeys operation.
     * @callback module:api/IntegrationRuntimesApi~integrationRuntimesListAuthKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationRuntimesListAuthKeys200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the authentication keys for an integration runtime.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} integrationRuntimeName The integration runtime name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationRuntimesApi~integrationRuntimesListAuthKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationRuntimesListAuthKeys200Response}
     */
    integrationRuntimesListAuthKeys(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationRuntimesListAuthKeys");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesListAuthKeys");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling integrationRuntimesListAuthKeys");
      }
      // verify the required parameter 'integrationRuntimeName' is set
      if (integrationRuntimeName === undefined || integrationRuntimeName === null) {
        throw new Error("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimesListAuthKeys");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationRuntimesListAuthKeys");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'integrationRuntimeName': integrationRuntimeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntegrationRuntimesListAuthKeys200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/listAuthKeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationRuntimesListByFactory operation.
     * @callback module:api/IntegrationRuntimesApi~integrationRuntimesListByFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationRuntimeListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists integration runtimes.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationRuntimesApi~integrationRuntimesListByFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationRuntimeListResponse}
     */
    integrationRuntimesListByFactory(subscriptionId, resourceGroupName, factoryName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationRuntimesListByFactory");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesListByFactory");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling integrationRuntimesListByFactory");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationRuntimesListByFactory");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntegrationRuntimeListResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationRuntimesRegenerateAuthKey operation.
     * @callback module:api/IntegrationRuntimesApi~integrationRuntimesRegenerateAuthKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationRuntimesListAuthKeys200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Regenerates the authentication key for an integration runtime.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} integrationRuntimeName The integration runtime name.
     * @param {String} apiVersion The API version.
     * @param {module:model/IntegrationRuntimesRegenerateAuthKeyRequest} regenerateKeyParameters The parameters for regenerating integration runtime authentication key.
     * @param {module:api/IntegrationRuntimesApi~integrationRuntimesRegenerateAuthKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationRuntimesListAuthKeys200Response}
     */
    integrationRuntimesRegenerateAuthKey(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, regenerateKeyParameters, callback) {
      let postBody = regenerateKeyParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationRuntimesRegenerateAuthKey");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesRegenerateAuthKey");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling integrationRuntimesRegenerateAuthKey");
      }
      // verify the required parameter 'integrationRuntimeName' is set
      if (integrationRuntimeName === undefined || integrationRuntimeName === null) {
        throw new Error("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimesRegenerateAuthKey");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationRuntimesRegenerateAuthKey");
      }
      // verify the required parameter 'regenerateKeyParameters' is set
      if (regenerateKeyParameters === undefined || regenerateKeyParameters === null) {
        throw new Error("Missing the required parameter 'regenerateKeyParameters' when calling integrationRuntimesRegenerateAuthKey");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'integrationRuntimeName': integrationRuntimeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IntegrationRuntimesListAuthKeys200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/regenerateAuthKey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationRuntimesRemoveNode operation.
     * @callback module:api/IntegrationRuntimesApi~integrationRuntimesRemoveNodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a node from integration runtime.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} integrationRuntimeName The integration runtime name.
     * @param {String} apiVersion The API version.
     * @param {module:model/IntegrationRuntimesRemoveNodeRequest} removeNodeParameters The name of the node to be removed from an integration runtime.
     * @param {module:api/IntegrationRuntimesApi~integrationRuntimesRemoveNodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    integrationRuntimesRemoveNode(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, removeNodeParameters, callback) {
      let postBody = removeNodeParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationRuntimesRemoveNode");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesRemoveNode");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling integrationRuntimesRemoveNode");
      }
      // verify the required parameter 'integrationRuntimeName' is set
      if (integrationRuntimeName === undefined || integrationRuntimeName === null) {
        throw new Error("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimesRemoveNode");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationRuntimesRemoveNode");
      }
      // verify the required parameter 'removeNodeParameters' is set
      if (removeNodeParameters === undefined || removeNodeParameters === null) {
        throw new Error("Missing the required parameter 'removeNodeParameters' when calling integrationRuntimesRemoveNode");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'integrationRuntimeName': integrationRuntimeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/removeNode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationRuntimesStart operation.
     * @callback module:api/IntegrationRuntimesApi~integrationRuntimesStartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationRuntimeStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a ManagedReserved type integration runtime.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} integrationRuntimeName The integration runtime name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationRuntimesApi~integrationRuntimesStartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationRuntimeStatusResponse}
     */
    integrationRuntimesStart(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationRuntimesStart");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesStart");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling integrationRuntimesStart");
      }
      // verify the required parameter 'integrationRuntimeName' is set
      if (integrationRuntimeName === undefined || integrationRuntimeName === null) {
        throw new Error("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimesStart");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationRuntimesStart");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'integrationRuntimeName': integrationRuntimeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntegrationRuntimeStatusResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationRuntimesStop operation.
     * @callback module:api/IntegrationRuntimesApi~integrationRuntimesStopCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops a ManagedReserved type integration runtime.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} integrationRuntimeName The integration runtime name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationRuntimesApi~integrationRuntimesStopCallback} callback The callback function, accepting three arguments: error, data, response
     */
    integrationRuntimesStop(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationRuntimesStop");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesStop");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling integrationRuntimesStop");
      }
      // verify the required parameter 'integrationRuntimeName' is set
      if (integrationRuntimeName === undefined || integrationRuntimeName === null) {
        throw new Error("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimesStop");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationRuntimesStop");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'integrationRuntimeName': integrationRuntimeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationRuntimesSyncCredentials operation.
     * @callback module:api/IntegrationRuntimesApi~integrationRuntimesSyncCredentialsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Force the integration runtime to synchronize credentials across integration runtime nodes, and this will override the credentials across all worker nodes with those available on the dispatcher node. If you already have the latest credential backup file, you should manually import it (preferred) on any self-hosted integration runtime node than using this API directly.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} integrationRuntimeName The integration runtime name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationRuntimesApi~integrationRuntimesSyncCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    integrationRuntimesSyncCredentials(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationRuntimesSyncCredentials");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesSyncCredentials");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling integrationRuntimesSyncCredentials");
      }
      // verify the required parameter 'integrationRuntimeName' is set
      if (integrationRuntimeName === undefined || integrationRuntimeName === null) {
        throw new Error("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimesSyncCredentials");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationRuntimesSyncCredentials");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'integrationRuntimeName': integrationRuntimeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/syncCredentials', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationRuntimesUpdate operation.
     * @callback module:api/IntegrationRuntimesApi~integrationRuntimesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationRuntimeStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an integration runtime.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} integrationRuntimeName The integration runtime name.
     * @param {String} apiVersion The API version.
     * @param {module:model/UpdateIntegrationRuntimeRequest} updateIntegrationRuntimeRequest The parameters for updating an integration runtime.
     * @param {module:api/IntegrationRuntimesApi~integrationRuntimesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationRuntimeStatusResponse}
     */
    integrationRuntimesUpdate(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, updateIntegrationRuntimeRequest, callback) {
      let postBody = updateIntegrationRuntimeRequest;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationRuntimesUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesUpdate");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling integrationRuntimesUpdate");
      }
      // verify the required parameter 'integrationRuntimeName' is set
      if (integrationRuntimeName === undefined || integrationRuntimeName === null) {
        throw new Error("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationRuntimesUpdate");
      }
      // verify the required parameter 'updateIntegrationRuntimeRequest' is set
      if (updateIntegrationRuntimeRequest === undefined || updateIntegrationRuntimeRequest === null) {
        throw new Error("Missing the required parameter 'updateIntegrationRuntimeRequest' when calling integrationRuntimesUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'integrationRuntimeName': integrationRuntimeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IntegrationRuntimeStatusResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationRuntimesUpgrade operation.
     * @callback module:api/IntegrationRuntimesApi~integrationRuntimesUpgradeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upgrade self-hosted integration runtime to latest version if availability.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} integrationRuntimeName The integration runtime name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationRuntimesApi~integrationRuntimesUpgradeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    integrationRuntimesUpgrade(subscriptionId, resourceGroupName, factoryName, integrationRuntimeName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationRuntimesUpgrade");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationRuntimesUpgrade");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling integrationRuntimesUpgrade");
      }
      // verify the required parameter 'integrationRuntimeName' is set
      if (integrationRuntimeName === undefined || integrationRuntimeName === null) {
        throw new Error("Missing the required parameter 'integrationRuntimeName' when calling integrationRuntimesUpgrade");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationRuntimesUpgrade");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'integrationRuntimeName': integrationRuntimeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/upgrade', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
