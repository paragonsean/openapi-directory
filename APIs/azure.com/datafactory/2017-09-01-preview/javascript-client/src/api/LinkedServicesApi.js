/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import LinkedServiceListResponse from '../model/LinkedServiceListResponse';
import LinkedServiceResource from '../model/LinkedServiceResource';

/**
* LinkedServices service.
* @module api/LinkedServicesApi
* @version 2017-09-01-preview
*/
export default class LinkedServicesApi {

    /**
    * Constructs a new LinkedServicesApi. 
    * @alias module:api/LinkedServicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the linkedServicesCreateOrUpdate operation.
     * @callback module:api/LinkedServicesApi~linkedServicesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkedServiceResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a linked service.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} linkedServiceName The linked service name.
     * @param {String} apiVersion The API version.
     * @param {module:model/LinkedServiceResource} linkedService Linked service resource definition.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] ETag of the linkedService entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update.
     * @param {module:api/LinkedServicesApi~linkedServicesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkedServiceResource}
     */
    linkedServicesCreateOrUpdate(subscriptionId, resourceGroupName, factoryName, linkedServiceName, apiVersion, linkedService, opts, callback) {
      opts = opts || {};
      let postBody = linkedService;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling linkedServicesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling linkedServicesCreateOrUpdate");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling linkedServicesCreateOrUpdate");
      }
      // verify the required parameter 'linkedServiceName' is set
      if (linkedServiceName === undefined || linkedServiceName === null) {
        throw new Error("Missing the required parameter 'linkedServiceName' when calling linkedServicesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling linkedServicesCreateOrUpdate");
      }
      // verify the required parameter 'linkedService' is set
      if (linkedService === undefined || linkedService === null) {
        throw new Error("Missing the required parameter 'linkedService' when calling linkedServicesCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'linkedServiceName': linkedServiceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LinkedServiceResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/linkedservices/{linkedServiceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the linkedServicesDelete operation.
     * @callback module:api/LinkedServicesApi~linkedServicesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a linked service.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} linkedServiceName The linked service name.
     * @param {String} apiVersion The API version.
     * @param {module:api/LinkedServicesApi~linkedServicesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    linkedServicesDelete(subscriptionId, resourceGroupName, factoryName, linkedServiceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling linkedServicesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling linkedServicesDelete");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling linkedServicesDelete");
      }
      // verify the required parameter 'linkedServiceName' is set
      if (linkedServiceName === undefined || linkedServiceName === null) {
        throw new Error("Missing the required parameter 'linkedServiceName' when calling linkedServicesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling linkedServicesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'linkedServiceName': linkedServiceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/linkedservices/{linkedServiceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the linkedServicesGet operation.
     * @callback module:api/LinkedServicesApi~linkedServicesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkedServiceResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a linked service.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} linkedServiceName The linked service name.
     * @param {String} apiVersion The API version.
     * @param {module:api/LinkedServicesApi~linkedServicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkedServiceResource}
     */
    linkedServicesGet(subscriptionId, resourceGroupName, factoryName, linkedServiceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling linkedServicesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling linkedServicesGet");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling linkedServicesGet");
      }
      // verify the required parameter 'linkedServiceName' is set
      if (linkedServiceName === undefined || linkedServiceName === null) {
        throw new Error("Missing the required parameter 'linkedServiceName' when calling linkedServicesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling linkedServicesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'linkedServiceName': linkedServiceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkedServiceResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/linkedservices/{linkedServiceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the linkedServicesListByFactory operation.
     * @callback module:api/LinkedServicesApi~linkedServicesListByFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkedServiceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists linked services.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} apiVersion The API version.
     * @param {module:api/LinkedServicesApi~linkedServicesListByFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkedServiceListResponse}
     */
    linkedServicesListByFactory(subscriptionId, resourceGroupName, factoryName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling linkedServicesListByFactory");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling linkedServicesListByFactory");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling linkedServicesListByFactory");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling linkedServicesListByFactory");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkedServiceListResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/linkedservices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
