/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateRunResponse from '../model/CreateRunResponse';
import ErrorResponse from '../model/ErrorResponse';
import PipelineListResponse from '../model/PipelineListResponse';
import PipelineResource from '../model/PipelineResource';

/**
* Pipelines service.
* @module api/PipelinesApi
* @version 2017-09-01-preview
*/
export default class PipelinesApi {

    /**
    * Constructs a new PipelinesApi. 
    * @alias module:api/PipelinesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the pipelinesCreateOrUpdate operation.
     * @callback module:api/PipelinesApi~pipelinesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a pipeline.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} pipelineName The pipeline name.
     * @param {String} apiVersion The API version.
     * @param {module:model/PipelineResource} pipeline Pipeline resource definition.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] ETag of the pipeline entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update.
     * @param {module:api/PipelinesApi~pipelinesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineResource}
     */
    pipelinesCreateOrUpdate(subscriptionId, resourceGroupName, factoryName, pipelineName, apiVersion, pipeline, opts, callback) {
      opts = opts || {};
      let postBody = pipeline;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling pipelinesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling pipelinesCreateOrUpdate");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling pipelinesCreateOrUpdate");
      }
      // verify the required parameter 'pipelineName' is set
      if (pipelineName === undefined || pipelineName === null) {
        throw new Error("Missing the required parameter 'pipelineName' when calling pipelinesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling pipelinesCreateOrUpdate");
      }
      // verify the required parameter 'pipeline' is set
      if (pipeline === undefined || pipeline === null) {
        throw new Error("Missing the required parameter 'pipeline' when calling pipelinesCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'pipelineName': pipelineName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PipelineResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pipelinesCreateRun operation.
     * @callback module:api/PipelinesApi~pipelinesCreateRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRunResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a run of a pipeline.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} pipelineName The pipeline name.
     * @param {String} apiVersion The API version.
     * @param {Object} opts Optional parameters
     * @param {Object.<String, {String: Object}>} [parameters] Parameters of the pipeline run.
     * @param {module:api/PipelinesApi~pipelinesCreateRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRunResponse}
     */
    pipelinesCreateRun(subscriptionId, resourceGroupName, factoryName, pipelineName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = opts['parameters'];
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling pipelinesCreateRun");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling pipelinesCreateRun");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling pipelinesCreateRun");
      }
      // verify the required parameter 'pipelineName' is set
      if (pipelineName === undefined || pipelineName === null) {
        throw new Error("Missing the required parameter 'pipelineName' when calling pipelinesCreateRun");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling pipelinesCreateRun");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'pipelineName': pipelineName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRunResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}/createRun', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pipelinesDelete operation.
     * @callback module:api/PipelinesApi~pipelinesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a pipeline.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} pipelineName The pipeline name.
     * @param {String} apiVersion The API version.
     * @param {module:api/PipelinesApi~pipelinesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pipelinesDelete(subscriptionId, resourceGroupName, factoryName, pipelineName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling pipelinesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling pipelinesDelete");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling pipelinesDelete");
      }
      // verify the required parameter 'pipelineName' is set
      if (pipelineName === undefined || pipelineName === null) {
        throw new Error("Missing the required parameter 'pipelineName' when calling pipelinesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling pipelinesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'pipelineName': pipelineName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pipelinesGet operation.
     * @callback module:api/PipelinesApi~pipelinesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a pipeline.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} pipelineName The pipeline name.
     * @param {String} apiVersion The API version.
     * @param {module:api/PipelinesApi~pipelinesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineResource}
     */
    pipelinesGet(subscriptionId, resourceGroupName, factoryName, pipelineName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling pipelinesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling pipelinesGet");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling pipelinesGet");
      }
      // verify the required parameter 'pipelineName' is set
      if (pipelineName === undefined || pipelineName === null) {
        throw new Error("Missing the required parameter 'pipelineName' when calling pipelinesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling pipelinesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'pipelineName': pipelineName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PipelineResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pipelinesListByFactory operation.
     * @callback module:api/PipelinesApi~pipelinesListByFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists pipelines.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} apiVersion The API version.
     * @param {module:api/PipelinesApi~pipelinesListByFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineListResponse}
     */
    pipelinesListByFactory(subscriptionId, resourceGroupName, factoryName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling pipelinesListByFactory");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling pipelinesListByFactory");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling pipelinesListByFactory");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling pipelinesListByFactory");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PipelineListResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
