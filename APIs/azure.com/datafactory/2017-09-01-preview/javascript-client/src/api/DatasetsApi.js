/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DatasetListResponse from '../model/DatasetListResponse';
import DatasetResource from '../model/DatasetResource';
import ErrorResponse from '../model/ErrorResponse';

/**
* Datasets service.
* @module api/DatasetsApi
* @version 2017-09-01-preview
*/
export default class DatasetsApi {

    /**
    * Constructs a new DatasetsApi. 
    * @alias module:api/DatasetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the datasetsCreateOrUpdate operation.
     * @callback module:api/DatasetsApi~datasetsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatasetResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a dataset.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} datasetName The dataset name.
     * @param {String} apiVersion The API version.
     * @param {module:model/DatasetResource} dataset Dataset resource definition.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] ETag of the dataset entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update.
     * @param {module:api/DatasetsApi~datasetsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatasetResource}
     */
    datasetsCreateOrUpdate(subscriptionId, resourceGroupName, factoryName, datasetName, apiVersion, dataset, opts, callback) {
      opts = opts || {};
      let postBody = dataset;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling datasetsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling datasetsCreateOrUpdate");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling datasetsCreateOrUpdate");
      }
      // verify the required parameter 'datasetName' is set
      if (datasetName === undefined || datasetName === null) {
        throw new Error("Missing the required parameter 'datasetName' when calling datasetsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling datasetsCreateOrUpdate");
      }
      // verify the required parameter 'dataset' is set
      if (dataset === undefined || dataset === null) {
        throw new Error("Missing the required parameter 'dataset' when calling datasetsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'datasetName': datasetName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DatasetResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/datasets/{datasetName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetsDelete operation.
     * @callback module:api/DatasetsApi~datasetsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a dataset.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} datasetName The dataset name.
     * @param {String} apiVersion The API version.
     * @param {module:api/DatasetsApi~datasetsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    datasetsDelete(subscriptionId, resourceGroupName, factoryName, datasetName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling datasetsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling datasetsDelete");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling datasetsDelete");
      }
      // verify the required parameter 'datasetName' is set
      if (datasetName === undefined || datasetName === null) {
        throw new Error("Missing the required parameter 'datasetName' when calling datasetsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling datasetsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'datasetName': datasetName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/datasets/{datasetName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetsGet operation.
     * @callback module:api/DatasetsApi~datasetsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatasetResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a dataset.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} datasetName The dataset name.
     * @param {String} apiVersion The API version.
     * @param {module:api/DatasetsApi~datasetsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatasetResource}
     */
    datasetsGet(subscriptionId, resourceGroupName, factoryName, datasetName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling datasetsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling datasetsGet");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling datasetsGet");
      }
      // verify the required parameter 'datasetName' is set
      if (datasetName === undefined || datasetName === null) {
        throw new Error("Missing the required parameter 'datasetName' when calling datasetsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling datasetsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName,
        'datasetName': datasetName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatasetResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/datasets/{datasetName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetsListByFactory operation.
     * @callback module:api/DatasetsApi~datasetsListByFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatasetListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists datasets.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} factoryName The factory name.
     * @param {String} apiVersion The API version.
     * @param {module:api/DatasetsApi~datasetsListByFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatasetListResponse}
     */
    datasetsListByFactory(subscriptionId, resourceGroupName, factoryName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling datasetsListByFactory");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling datasetsListByFactory");
      }
      // verify the required parameter 'factoryName' is set
      if (factoryName === undefined || factoryName === null) {
        throw new Error("Missing the required parameter 'factoryName' when calling datasetsListByFactory");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling datasetsListByFactory");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'factoryName': factoryName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatasetListResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/datasets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
