/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IntegrationRuntimeNodesUpdate200Response model module.
 * @module model/IntegrationRuntimeNodesUpdate200Response
 * @version 2017-09-01-preview
 */
class IntegrationRuntimeNodesUpdate200Response {
    /**
     * Constructs a new <code>IntegrationRuntimeNodesUpdate200Response</code>.
     * Properties of Self-hosted integration runtime node.
     * @alias module:model/IntegrationRuntimeNodesUpdate200Response
     * @extends Object
     */
    constructor() { 
        
        IntegrationRuntimeNodesUpdate200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IntegrationRuntimeNodesUpdate200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IntegrationRuntimeNodesUpdate200Response} obj Optional instance to populate.
     * @return {module:model/IntegrationRuntimeNodesUpdate200Response} The populated <code>IntegrationRuntimeNodesUpdate200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IntegrationRuntimeNodesUpdate200Response();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('capabilities')) {
                obj['capabilities'] = ApiClient.convertToType(data['capabilities'], {'String': 'String'});
            }
            if (data.hasOwnProperty('concurrentJobsLimit')) {
                obj['concurrentJobsLimit'] = ApiClient.convertToType(data['concurrentJobsLimit'], 'Number');
            }
            if (data.hasOwnProperty('expiryTime')) {
                obj['expiryTime'] = ApiClient.convertToType(data['expiryTime'], 'Date');
            }
            if (data.hasOwnProperty('hostServiceUri')) {
                obj['hostServiceUri'] = ApiClient.convertToType(data['hostServiceUri'], 'String');
            }
            if (data.hasOwnProperty('isActiveDispatcher')) {
                obj['isActiveDispatcher'] = ApiClient.convertToType(data['isActiveDispatcher'], 'Boolean');
            }
            if (data.hasOwnProperty('lastConnectTime')) {
                obj['lastConnectTime'] = ApiClient.convertToType(data['lastConnectTime'], 'Date');
            }
            if (data.hasOwnProperty('lastEndUpdateTime')) {
                obj['lastEndUpdateTime'] = ApiClient.convertToType(data['lastEndUpdateTime'], 'Date');
            }
            if (data.hasOwnProperty('lastStartTime')) {
                obj['lastStartTime'] = ApiClient.convertToType(data['lastStartTime'], 'Date');
            }
            if (data.hasOwnProperty('lastStartUpdateTime')) {
                obj['lastStartUpdateTime'] = ApiClient.convertToType(data['lastStartUpdateTime'], 'Date');
            }
            if (data.hasOwnProperty('lastStopTime')) {
                obj['lastStopTime'] = ApiClient.convertToType(data['lastStopTime'], 'Date');
            }
            if (data.hasOwnProperty('lastUpdateResult')) {
                obj['lastUpdateResult'] = ApiClient.convertToType(data['lastUpdateResult'], 'String');
            }
            if (data.hasOwnProperty('machineName')) {
                obj['machineName'] = ApiClient.convertToType(data['machineName'], 'String');
            }
            if (data.hasOwnProperty('maxConcurrentJobs')) {
                obj['maxConcurrentJobs'] = ApiClient.convertToType(data['maxConcurrentJobs'], 'Number');
            }
            if (data.hasOwnProperty('nodeName')) {
                obj['nodeName'] = ApiClient.convertToType(data['nodeName'], 'String');
            }
            if (data.hasOwnProperty('registerTime')) {
                obj['registerTime'] = ApiClient.convertToType(data['registerTime'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('versionStatus')) {
                obj['versionStatus'] = ApiClient.convertToType(data['versionStatus'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IntegrationRuntimeNodesUpdate200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IntegrationRuntimeNodesUpdate200Response</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['hostServiceUri'] && !(typeof data['hostServiceUri'] === 'string' || data['hostServiceUri'] instanceof String)) {
            throw new Error("Expected the field `hostServiceUri` to be a primitive type in the JSON string but got " + data['hostServiceUri']);
        }
        // ensure the json data is a string
        if (data['lastUpdateResult'] && !(typeof data['lastUpdateResult'] === 'string' || data['lastUpdateResult'] instanceof String)) {
            throw new Error("Expected the field `lastUpdateResult` to be a primitive type in the JSON string but got " + data['lastUpdateResult']);
        }
        // ensure the json data is a string
        if (data['machineName'] && !(typeof data['machineName'] === 'string' || data['machineName'] instanceof String)) {
            throw new Error("Expected the field `machineName` to be a primitive type in the JSON string but got " + data['machineName']);
        }
        // ensure the json data is a string
        if (data['nodeName'] && !(typeof data['nodeName'] === 'string' || data['nodeName'] instanceof String)) {
            throw new Error("Expected the field `nodeName` to be a primitive type in the JSON string but got " + data['nodeName']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['versionStatus'] && !(typeof data['versionStatus'] === 'string' || data['versionStatus'] instanceof String)) {
            throw new Error("Expected the field `versionStatus` to be a primitive type in the JSON string but got " + data['versionStatus']);
        }

        return true;
    }


}



/**
 * The integration runtime capabilities dictionary
 * @member {Object.<String, String>} capabilities
 */
IntegrationRuntimeNodesUpdate200Response.prototype['capabilities'] = undefined;

/**
 * Maximum concurrent jobs on the integration runtime node.
 * @member {Number} concurrentJobsLimit
 */
IntegrationRuntimeNodesUpdate200Response.prototype['concurrentJobsLimit'] = undefined;

/**
 * The time at which the integration runtime will expire in ISO8601 format.
 * @member {Date} expiryTime
 */
IntegrationRuntimeNodesUpdate200Response.prototype['expiryTime'] = undefined;

/**
 * URI for the host machine of the integration runtime.
 * @member {String} hostServiceUri
 */
IntegrationRuntimeNodesUpdate200Response.prototype['hostServiceUri'] = undefined;

/**
 * Indicates whether this node is the active dispatcher for integration runtime requests.
 * @member {Boolean} isActiveDispatcher
 */
IntegrationRuntimeNodesUpdate200Response.prototype['isActiveDispatcher'] = undefined;

/**
 * The most recent time at which the integration runtime was connected in ISO8601 format.
 * @member {Date} lastConnectTime
 */
IntegrationRuntimeNodesUpdate200Response.prototype['lastConnectTime'] = undefined;

/**
 * The last time for the integration runtime node update end.
 * @member {Date} lastEndUpdateTime
 */
IntegrationRuntimeNodesUpdate200Response.prototype['lastEndUpdateTime'] = undefined;

/**
 * The time the node last started up.
 * @member {Date} lastStartTime
 */
IntegrationRuntimeNodesUpdate200Response.prototype['lastStartTime'] = undefined;

/**
 * The last time for the integration runtime node update start.
 * @member {Date} lastStartUpdateTime
 */
IntegrationRuntimeNodesUpdate200Response.prototype['lastStartUpdateTime'] = undefined;

/**
 * The integration runtime node last stop time.
 * @member {Date} lastStopTime
 */
IntegrationRuntimeNodesUpdate200Response.prototype['lastStopTime'] = undefined;

/**
 * The result of the last integration runtime node update.
 * @member {module:model/IntegrationRuntimeNodesUpdate200Response.LastUpdateResultEnum} lastUpdateResult
 */
IntegrationRuntimeNodesUpdate200Response.prototype['lastUpdateResult'] = undefined;

/**
 * Machine name of the integration runtime node.
 * @member {String} machineName
 */
IntegrationRuntimeNodesUpdate200Response.prototype['machineName'] = undefined;

/**
 * The maximum concurrent jobs in this integration runtime.
 * @member {Number} maxConcurrentJobs
 */
IntegrationRuntimeNodesUpdate200Response.prototype['maxConcurrentJobs'] = undefined;

/**
 * Name of the integration runtime node.
 * @member {String} nodeName
 */
IntegrationRuntimeNodesUpdate200Response.prototype['nodeName'] = undefined;

/**
 * The time at which the integration runtime node was registered in ISO8601 format.
 * @member {Date} registerTime
 */
IntegrationRuntimeNodesUpdate200Response.prototype['registerTime'] = undefined;

/**
 * Status of the integration runtime node.
 * @member {module:model/IntegrationRuntimeNodesUpdate200Response.StatusEnum} status
 */
IntegrationRuntimeNodesUpdate200Response.prototype['status'] = undefined;

/**
 * Version of the integration runtime node.
 * @member {String} version
 */
IntegrationRuntimeNodesUpdate200Response.prototype['version'] = undefined;

/**
 * Status of the integration runtime node version.
 * @member {String} versionStatus
 */
IntegrationRuntimeNodesUpdate200Response.prototype['versionStatus'] = undefined;





/**
 * Allowed values for the <code>lastUpdateResult</code> property.
 * @enum {String}
 * @readonly
 */
IntegrationRuntimeNodesUpdate200Response['LastUpdateResultEnum'] = {

    /**
     * value: "Succeed"
     * @const
     */
    "Succeed": "Succeed",

    /**
     * value: "Fail"
     * @const
     */
    "Fail": "Fail"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
IntegrationRuntimeNodesUpdate200Response['StatusEnum'] = {

    /**
     * value: "NeedRegistration"
     * @const
     */
    "NeedRegistration": "NeedRegistration",

    /**
     * value: "Online"
     * @const
     */
    "Online": "Online",

    /**
     * value: "Limited"
     * @const
     */
    "Limited": "Limited",

    /**
     * value: "Offline"
     * @const
     */
    "Offline": "Offline",

    /**
     * value: "Upgrading"
     * @const
     */
    "Upgrading": "Upgrading",

    /**
     * value: "Initializing"
     * @const
     */
    "Initializing": "Initializing",

    /**
     * value: "InitializeFailed"
     * @const
     */
    "InitializeFailed": "InitializeFailed"
};



export default IntegrationRuntimeNodesUpdate200Response;

