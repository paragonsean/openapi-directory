/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FactoryVSTSConfiguration from './FactoryVSTSConfiguration';

/**
 * The FactoryProperties model module.
 * @module model/FactoryProperties
 * @version 2017-09-01-preview
 */
class FactoryProperties {
    /**
     * Constructs a new <code>FactoryProperties</code>.
     * Factory resource properties.
     * @alias module:model/FactoryProperties
     */
    constructor() { 
        
        FactoryProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FactoryProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FactoryProperties} obj Optional instance to populate.
     * @return {module:model/FactoryProperties} The populated <code>FactoryProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FactoryProperties();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'Date');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('vstsConfiguration')) {
                obj['vstsConfiguration'] = FactoryVSTSConfiguration.constructFromObject(data['vstsConfiguration']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FactoryProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FactoryProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // validate the optional field `vstsConfiguration`
        if (data['vstsConfiguration']) { // data not null
          FactoryVSTSConfiguration.validateJSON(data['vstsConfiguration']);
        }

        return true;
    }


}



/**
 * Time the factory was created in ISO8601 format.
 * @member {Date} createTime
 */
FactoryProperties.prototype['createTime'] = undefined;

/**
 * Factory provisioning state, example Succeeded.
 * @member {String} provisioningState
 */
FactoryProperties.prototype['provisioningState'] = undefined;

/**
 * Version of the factory.
 * @member {String} version
 */
FactoryProperties.prototype['version'] = undefined;

/**
 * @member {module:model/FactoryVSTSConfiguration} vstsConfiguration
 */
FactoryProperties.prototype['vstsConfiguration'] = undefined;






export default FactoryProperties;

