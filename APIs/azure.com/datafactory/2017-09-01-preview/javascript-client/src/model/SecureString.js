/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SecretBase from './SecretBase';

/**
 * The SecureString model module.
 * @module model/SecureString
 * @version 2017-09-01-preview
 */
class SecureString {
    /**
     * Constructs a new <code>SecureString</code>.
     * Azure Data Factory secure string definition. The string value will be masked with asterisks &#39;*&#39; during Get or List API calls.
     * @alias module:model/SecureString
     * @extends module:model/SecretBase
     * @implements module:model/SecretBase
     * @param type {String} Type of the secret.
     */
    constructor(type) { 
        SecretBase.initialize(this, type);
        SecureString.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['value'] = value;
    }

    /**
     * Constructs a <code>SecureString</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SecureString} obj Optional instance to populate.
     * @return {module:model/SecureString} The populated <code>SecureString</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SecureString();
            SecretBase.constructFromObject(data, obj);
            SecretBase.constructFromObject(data, obj);

            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SecureString</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SecureString</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SecureString.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

SecureString.RequiredProperties = ["value", "type"];

/**
 * Value of secure string.
 * @member {String} value
 */
SecureString.prototype['value'] = undefined;


// Implement SecretBase interface:
/**
 * Type of the secret.
 * @member {String} type
 */
SecretBase.prototype['type'] = undefined;




export default SecureString;

