/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OperationMetricAvailability from './OperationMetricAvailability';

/**
 * The OperationMetricSpecification model module.
 * @module model/OperationMetricSpecification
 * @version 2017-09-01-preview
 */
class OperationMetricSpecification {
    /**
     * Constructs a new <code>OperationMetricSpecification</code>.
     * Details about an operation related to metrics.
     * @alias module:model/OperationMetricSpecification
     */
    constructor() { 
        
        OperationMetricSpecification.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OperationMetricSpecification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OperationMetricSpecification} obj Optional instance to populate.
     * @return {module:model/OperationMetricSpecification} The populated <code>OperationMetricSpecification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OperationMetricSpecification();

            if (data.hasOwnProperty('aggregationType')) {
                obj['aggregationType'] = ApiClient.convertToType(data['aggregationType'], 'String');
            }
            if (data.hasOwnProperty('availabilities')) {
                obj['availabilities'] = ApiClient.convertToType(data['availabilities'], [OperationMetricAvailability]);
            }
            if (data.hasOwnProperty('displayDescription')) {
                obj['displayDescription'] = ApiClient.convertToType(data['displayDescription'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('enableRegionalMdmAccount')) {
                obj['enableRegionalMdmAccount'] = ApiClient.convertToType(data['enableRegionalMdmAccount'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('sourceMdmAccount')) {
                obj['sourceMdmAccount'] = ApiClient.convertToType(data['sourceMdmAccount'], 'String');
            }
            if (data.hasOwnProperty('sourceMdmNamespace')) {
                obj['sourceMdmNamespace'] = ApiClient.convertToType(data['sourceMdmNamespace'], 'String');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OperationMetricSpecification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OperationMetricSpecification</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['aggregationType'] && !(typeof data['aggregationType'] === 'string' || data['aggregationType'] instanceof String)) {
            throw new Error("Expected the field `aggregationType` to be a primitive type in the JSON string but got " + data['aggregationType']);
        }
        if (data['availabilities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['availabilities'])) {
                throw new Error("Expected the field `availabilities` to be an array in the JSON data but got " + data['availabilities']);
            }
            // validate the optional field `availabilities` (array)
            for (const item of data['availabilities']) {
                OperationMetricAvailability.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['displayDescription'] && !(typeof data['displayDescription'] === 'string' || data['displayDescription'] instanceof String)) {
            throw new Error("Expected the field `displayDescription` to be a primitive type in the JSON string but got " + data['displayDescription']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['enableRegionalMdmAccount'] && !(typeof data['enableRegionalMdmAccount'] === 'string' || data['enableRegionalMdmAccount'] instanceof String)) {
            throw new Error("Expected the field `enableRegionalMdmAccount` to be a primitive type in the JSON string but got " + data['enableRegionalMdmAccount']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['sourceMdmAccount'] && !(typeof data['sourceMdmAccount'] === 'string' || data['sourceMdmAccount'] instanceof String)) {
            throw new Error("Expected the field `sourceMdmAccount` to be a primitive type in the JSON string but got " + data['sourceMdmAccount']);
        }
        // ensure the json data is a string
        if (data['sourceMdmNamespace'] && !(typeof data['sourceMdmNamespace'] === 'string' || data['sourceMdmNamespace'] instanceof String)) {
            throw new Error("Expected the field `sourceMdmNamespace` to be a primitive type in the JSON string but got " + data['sourceMdmNamespace']);
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }

        return true;
    }


}



/**
 * The type of metric aggregation.
 * @member {String} aggregationType
 */
OperationMetricSpecification.prototype['aggregationType'] = undefined;

/**
 * Defines how often data for metrics becomes available.
 * @member {Array.<module:model/OperationMetricAvailability>} availabilities
 */
OperationMetricSpecification.prototype['availabilities'] = undefined;

/**
 * The description of the metric.
 * @member {String} displayDescription
 */
OperationMetricSpecification.prototype['displayDescription'] = undefined;

/**
 * Localized display name of the metric.
 * @member {String} displayName
 */
OperationMetricSpecification.prototype['displayName'] = undefined;

/**
 * Whether or not the service is using regional MDM accounts.
 * @member {String} enableRegionalMdmAccount
 */
OperationMetricSpecification.prototype['enableRegionalMdmAccount'] = undefined;

/**
 * The name of the metric.
 * @member {String} name
 */
OperationMetricSpecification.prototype['name'] = undefined;

/**
 * The name of the MDM account.
 * @member {String} sourceMdmAccount
 */
OperationMetricSpecification.prototype['sourceMdmAccount'] = undefined;

/**
 * The name of the MDM namespace.
 * @member {String} sourceMdmNamespace
 */
OperationMetricSpecification.prototype['sourceMdmNamespace'] = undefined;

/**
 * The unit that the metric is measured in.
 * @member {String} unit
 */
OperationMetricSpecification.prototype['unit'] = undefined;






export default OperationMetricSpecification;

