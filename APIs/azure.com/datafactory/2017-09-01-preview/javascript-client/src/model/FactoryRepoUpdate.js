/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FactoryVSTSConfiguration from './FactoryVSTSConfiguration';

/**
 * The FactoryRepoUpdate model module.
 * @module model/FactoryRepoUpdate
 * @version 2017-09-01-preview
 */
class FactoryRepoUpdate {
    /**
     * Constructs a new <code>FactoryRepoUpdate</code>.
     * Factory&#39;s VSTS repo information.
     * @alias module:model/FactoryRepoUpdate
     */
    constructor() { 
        
        FactoryRepoUpdate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FactoryRepoUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FactoryRepoUpdate} obj Optional instance to populate.
     * @return {module:model/FactoryRepoUpdate} The populated <code>FactoryRepoUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FactoryRepoUpdate();

            if (data.hasOwnProperty('factoryResourceId')) {
                obj['factoryResourceId'] = ApiClient.convertToType(data['factoryResourceId'], 'String');
            }
            if (data.hasOwnProperty('resourceGroupName')) {
                obj['resourceGroupName'] = ApiClient.convertToType(data['resourceGroupName'], 'String');
            }
            if (data.hasOwnProperty('vstsConfiguration')) {
                obj['vstsConfiguration'] = FactoryVSTSConfiguration.constructFromObject(data['vstsConfiguration']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FactoryRepoUpdate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FactoryRepoUpdate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['factoryResourceId'] && !(typeof data['factoryResourceId'] === 'string' || data['factoryResourceId'] instanceof String)) {
            throw new Error("Expected the field `factoryResourceId` to be a primitive type in the JSON string but got " + data['factoryResourceId']);
        }
        // ensure the json data is a string
        if (data['resourceGroupName'] && !(typeof data['resourceGroupName'] === 'string' || data['resourceGroupName'] instanceof String)) {
            throw new Error("Expected the field `resourceGroupName` to be a primitive type in the JSON string but got " + data['resourceGroupName']);
        }
        // validate the optional field `vstsConfiguration`
        if (data['vstsConfiguration']) { // data not null
          FactoryVSTSConfiguration.validateJSON(data['vstsConfiguration']);
        }

        return true;
    }


}



/**
 * The factory resource id.
 * @member {String} factoryResourceId
 */
FactoryRepoUpdate.prototype['factoryResourceId'] = undefined;

/**
 * The resource group name.
 * @member {String} resourceGroupName
 */
FactoryRepoUpdate.prototype['resourceGroupName'] = undefined;

/**
 * @member {module:model/FactoryVSTSConfiguration} vstsConfiguration
 */
FactoryRepoUpdate.prototype['vstsConfiguration'] = undefined;






export default FactoryRepoUpdate;

