/**
 * DataFactoryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DataFactoryManagementClient);
  }
}(this, function(expect, DataFactoryManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DataFactoryManagementClient.IntegrationRuntimeNodesUpdate200Response();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IntegrationRuntimeNodesUpdate200Response', function() {
    it('should create an instance of IntegrationRuntimeNodesUpdate200Response', function() {
      // uncomment below and update the code to test IntegrationRuntimeNodesUpdate200Response
      //var instance = new DataFactoryManagementClient.IntegrationRuntimeNodesUpdate200Response();
      //expect(instance).to.be.a(DataFactoryManagementClient.IntegrationRuntimeNodesUpdate200Response);
    });

    it('should have the property capabilities (base name: "capabilities")', function() {
      // uncomment below and update the code to test the property capabilities
      //var instance = new DataFactoryManagementClient.IntegrationRuntimeNodesUpdate200Response();
      //expect(instance).to.be();
    });

    it('should have the property concurrentJobsLimit (base name: "concurrentJobsLimit")', function() {
      // uncomment below and update the code to test the property concurrentJobsLimit
      //var instance = new DataFactoryManagementClient.IntegrationRuntimeNodesUpdate200Response();
      //expect(instance).to.be();
    });

    it('should have the property expiryTime (base name: "expiryTime")', function() {
      // uncomment below and update the code to test the property expiryTime
      //var instance = new DataFactoryManagementClient.IntegrationRuntimeNodesUpdate200Response();
      //expect(instance).to.be();
    });

    it('should have the property hostServiceUri (base name: "hostServiceUri")', function() {
      // uncomment below and update the code to test the property hostServiceUri
      //var instance = new DataFactoryManagementClient.IntegrationRuntimeNodesUpdate200Response();
      //expect(instance).to.be();
    });

    it('should have the property isActiveDispatcher (base name: "isActiveDispatcher")', function() {
      // uncomment below and update the code to test the property isActiveDispatcher
      //var instance = new DataFactoryManagementClient.IntegrationRuntimeNodesUpdate200Response();
      //expect(instance).to.be();
    });

    it('should have the property lastConnectTime (base name: "lastConnectTime")', function() {
      // uncomment below and update the code to test the property lastConnectTime
      //var instance = new DataFactoryManagementClient.IntegrationRuntimeNodesUpdate200Response();
      //expect(instance).to.be();
    });

    it('should have the property lastEndUpdateTime (base name: "lastEndUpdateTime")', function() {
      // uncomment below and update the code to test the property lastEndUpdateTime
      //var instance = new DataFactoryManagementClient.IntegrationRuntimeNodesUpdate200Response();
      //expect(instance).to.be();
    });

    it('should have the property lastStartTime (base name: "lastStartTime")', function() {
      // uncomment below and update the code to test the property lastStartTime
      //var instance = new DataFactoryManagementClient.IntegrationRuntimeNodesUpdate200Response();
      //expect(instance).to.be();
    });

    it('should have the property lastStartUpdateTime (base name: "lastStartUpdateTime")', function() {
      // uncomment below and update the code to test the property lastStartUpdateTime
      //var instance = new DataFactoryManagementClient.IntegrationRuntimeNodesUpdate200Response();
      //expect(instance).to.be();
    });

    it('should have the property lastStopTime (base name: "lastStopTime")', function() {
      // uncomment below and update the code to test the property lastStopTime
      //var instance = new DataFactoryManagementClient.IntegrationRuntimeNodesUpdate200Response();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdateResult (base name: "lastUpdateResult")', function() {
      // uncomment below and update the code to test the property lastUpdateResult
      //var instance = new DataFactoryManagementClient.IntegrationRuntimeNodesUpdate200Response();
      //expect(instance).to.be();
    });

    it('should have the property machineName (base name: "machineName")', function() {
      // uncomment below and update the code to test the property machineName
      //var instance = new DataFactoryManagementClient.IntegrationRuntimeNodesUpdate200Response();
      //expect(instance).to.be();
    });

    it('should have the property maxConcurrentJobs (base name: "maxConcurrentJobs")', function() {
      // uncomment below and update the code to test the property maxConcurrentJobs
      //var instance = new DataFactoryManagementClient.IntegrationRuntimeNodesUpdate200Response();
      //expect(instance).to.be();
    });

    it('should have the property nodeName (base name: "nodeName")', function() {
      // uncomment below and update the code to test the property nodeName
      //var instance = new DataFactoryManagementClient.IntegrationRuntimeNodesUpdate200Response();
      //expect(instance).to.be();
    });

    it('should have the property registerTime (base name: "registerTime")', function() {
      // uncomment below and update the code to test the property registerTime
      //var instance = new DataFactoryManagementClient.IntegrationRuntimeNodesUpdate200Response();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new DataFactoryManagementClient.IntegrationRuntimeNodesUpdate200Response();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new DataFactoryManagementClient.IntegrationRuntimeNodesUpdate200Response();
      //expect(instance).to.be();
    });

    it('should have the property versionStatus (base name: "versionStatus")', function() {
      // uncomment below and update the code to test the property versionStatus
      //var instance = new DataFactoryManagementClient.IntegrationRuntimeNodesUpdate200Response();
      //expect(instance).to.be();
    });

  });

}));
