/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on logger entity Azure API Management deployment.The Logger entity in API Management represents an event sink that you can use to log API Management events. Currently the Logger entity supports logging API Management events to Azure EventHub.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.LoggerCollection;
import org.openapitools.client.model.LoggerContract;
import org.openapitools.client.model.LoggerListByServiceDefaultResponse;
import org.openapitools.client.model.LoggerUpdateContract;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LoggersApi
 */
@Disabled
public class LoggersApiTest {

    private final LoggersApi api = new LoggersApi();

    /**
     * Creates or Updates a logger.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loggerCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String loggerid = null;
        String apiVersion = null;
        String subscriptionId = null;
        LoggerContract parameters = null;
        String ifMatch = null;
        LoggerContract response = api.loggerCreateOrUpdate(resourceGroupName, serviceName, loggerid, apiVersion, subscriptionId, parameters, ifMatch);
        // TODO: test validations
    }

    /**
     * Deletes the specified logger.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loggerDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String loggerid = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.loggerDelete(resourceGroupName, serviceName, loggerid, ifMatch, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the details of the logger specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loggerGetTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String loggerid = null;
        String apiVersion = null;
        String subscriptionId = null;
        LoggerContract response = api.loggerGet(resourceGroupName, serviceName, loggerid, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the entity state (Etag) version of the logger specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loggerGetEntityTagTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String loggerid = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.loggerGetEntityTag(resourceGroupName, serviceName, loggerid, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists a collection of loggers in the specified service instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loggerListByServiceTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        LoggerCollection response = api.loggerListByService(resourceGroupName, serviceName, apiVersion, subscriptionId, $filter, $top, $skip);
        // TODO: test validations
    }

    /**
     * Updates an existing logger.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loggerUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String loggerid = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        LoggerUpdateContract parameters = null;
        api.loggerUpdate(resourceGroupName, serviceName, loggerid, ifMatch, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
