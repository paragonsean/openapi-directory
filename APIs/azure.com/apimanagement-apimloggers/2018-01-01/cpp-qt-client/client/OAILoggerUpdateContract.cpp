/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on logger entity Azure API Management deployment.The Logger entity in API Management represents an event sink that you can use to log API Management events. Currently the Logger entity supports logging API Management events to Azure EventHub.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoggerUpdateContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoggerUpdateContract::OAILoggerUpdateContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoggerUpdateContract::OAILoggerUpdateContract() {
    this->initializeModel();
}

OAILoggerUpdateContract::~OAILoggerUpdateContract() {}

void OAILoggerUpdateContract::initializeModel() {

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAILoggerUpdateContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoggerUpdateContract::fromJsonObject(QJsonObject json) {

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAILoggerUpdateContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoggerUpdateContract::asJsonObject() const {
    QJsonObject obj;
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

OAILoggerUpdateParameters OAILoggerUpdateContract::getProperties() const {
    return m_properties;
}
void OAILoggerUpdateContract::setProperties(const OAILoggerUpdateParameters &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAILoggerUpdateContract::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAILoggerUpdateContract::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAILoggerUpdateContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoggerUpdateContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
