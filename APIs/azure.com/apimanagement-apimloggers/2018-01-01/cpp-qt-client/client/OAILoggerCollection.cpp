/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on logger entity Azure API Management deployment.The Logger entity in API Management represents an event sink that you can use to log API Management events. Currently the Logger entity supports logging API Management events to Azure EventHub.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoggerCollection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoggerCollection::OAILoggerCollection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoggerCollection::OAILoggerCollection() {
    this->initializeModel();
}

OAILoggerCollection::~OAILoggerCollection() {}

void OAILoggerCollection::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_next_link_isSet = false;
    m_next_link_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAILoggerCollection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoggerCollection::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_next_link_isValid = ::OpenAPI::fromJsonValue(m_next_link, json[QString("nextLink")]);
    m_next_link_isSet = !json[QString("nextLink")].isNull() && m_next_link_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAILoggerCollection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoggerCollection::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_next_link_isSet) {
        obj.insert(QString("nextLink"), ::OpenAPI::toJsonValue(m_next_link));
    }
    if (m_value.size() > 0) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

qint64 OAILoggerCollection::getCount() const {
    return m_count;
}
void OAILoggerCollection::setCount(const qint64 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAILoggerCollection::is_count_Set() const{
    return m_count_isSet;
}

bool OAILoggerCollection::is_count_Valid() const{
    return m_count_isValid;
}

QString OAILoggerCollection::getNextLink() const {
    return m_next_link;
}
void OAILoggerCollection::setNextLink(const QString &next_link) {
    m_next_link = next_link;
    m_next_link_isSet = true;
}

bool OAILoggerCollection::is_next_link_Set() const{
    return m_next_link_isSet;
}

bool OAILoggerCollection::is_next_link_Valid() const{
    return m_next_link_isValid;
}

QList<OAILoggerContract> OAILoggerCollection::getValue() const {
    return m_value;
}
void OAILoggerCollection::setValue(const QList<OAILoggerContract> &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAILoggerCollection::is_value_Set() const{
    return m_value_isSet;
}

bool OAILoggerCollection::is_value_Valid() const{
    return m_value_isValid;
}

bool OAILoggerCollection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoggerCollection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
