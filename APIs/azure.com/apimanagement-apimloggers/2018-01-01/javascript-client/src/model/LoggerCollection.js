/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on logger entity Azure API Management deployment.The Logger entity in API Management represents an event sink that you can use to log API Management events. Currently the Logger entity supports logging API Management events to Azure EventHub.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LoggerContract from './LoggerContract';

/**
 * The LoggerCollection model module.
 * @module model/LoggerCollection
 * @version 2018-01-01
 */
class LoggerCollection {
    /**
     * Constructs a new <code>LoggerCollection</code>.
     * Paged Logger list representation.
     * @alias module:model/LoggerCollection
     */
    constructor() { 
        
        LoggerCollection.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LoggerCollection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoggerCollection} obj Optional instance to populate.
     * @return {module:model/LoggerCollection} The populated <code>LoggerCollection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoggerCollection();

            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('nextLink')) {
                obj['nextLink'] = ApiClient.convertToType(data['nextLink'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], [LoggerContract]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoggerCollection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoggerCollection</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['nextLink'] && !(typeof data['nextLink'] === 'string' || data['nextLink'] instanceof String)) {
            throw new Error("Expected the field `nextLink` to be a primitive type in the JSON string but got " + data['nextLink']);
        }
        if (data['value']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['value'])) {
                throw new Error("Expected the field `value` to be an array in the JSON data but got " + data['value']);
            }
            // validate the optional field `value` (array)
            for (const item of data['value']) {
                LoggerContract.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Total record count number across all pages.
 * @member {Number} count
 */
LoggerCollection.prototype['count'] = undefined;

/**
 * Next page link if any.
 * @member {String} nextLink
 */
LoggerCollection.prototype['nextLink'] = undefined;

/**
 * Logger values.
 * @member {Array.<module:model/LoggerContract>} value
 */
LoggerCollection.prototype['value'] = undefined;






export default LoggerCollection;

