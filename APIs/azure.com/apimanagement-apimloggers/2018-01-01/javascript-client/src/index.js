/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on logger entity Azure API Management deployment.The Logger entity in API Management represents an event sink that you can use to log API Management events. Currently the Logger entity supports logging API Management events to Azure EventHub.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import LoggerCollection from './model/LoggerCollection';
import LoggerContract from './model/LoggerContract';
import LoggerContractProperties from './model/LoggerContractProperties';
import LoggerListByServiceDefaultResponse from './model/LoggerListByServiceDefaultResponse';
import LoggerListByServiceDefaultResponseError from './model/LoggerListByServiceDefaultResponseError';
import LoggerListByServiceDefaultResponseErrorDetailsInner from './model/LoggerListByServiceDefaultResponseErrorDetailsInner';
import LoggerUpdateContract from './model/LoggerUpdateContract';
import LoggerUpdateParameters from './model/LoggerUpdateParameters';
import LoggersApi from './api/LoggersApi';


/**
* Use these REST APIs for performing operations on logger entity Azure API Management deployment.The Logger entity in API Management represents an event sink that you can use to log API Management events. Currently the Logger entity supports logging API Management events to Azure EventHub..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var ApiManagementClient = require('index'); // See note below*.
* var xxxSvc = new ApiManagementClient.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new ApiManagementClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new ApiManagementClient.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new ApiManagementClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2018-01-01
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The LoggerCollection model constructor.
     * @property {module:model/LoggerCollection}
     */
    LoggerCollection,

    /**
     * The LoggerContract model constructor.
     * @property {module:model/LoggerContract}
     */
    LoggerContract,

    /**
     * The LoggerContractProperties model constructor.
     * @property {module:model/LoggerContractProperties}
     */
    LoggerContractProperties,

    /**
     * The LoggerListByServiceDefaultResponse model constructor.
     * @property {module:model/LoggerListByServiceDefaultResponse}
     */
    LoggerListByServiceDefaultResponse,

    /**
     * The LoggerListByServiceDefaultResponseError model constructor.
     * @property {module:model/LoggerListByServiceDefaultResponseError}
     */
    LoggerListByServiceDefaultResponseError,

    /**
     * The LoggerListByServiceDefaultResponseErrorDetailsInner model constructor.
     * @property {module:model/LoggerListByServiceDefaultResponseErrorDetailsInner}
     */
    LoggerListByServiceDefaultResponseErrorDetailsInner,

    /**
     * The LoggerUpdateContract model constructor.
     * @property {module:model/LoggerUpdateContract}
     */
    LoggerUpdateContract,

    /**
     * The LoggerUpdateParameters model constructor.
     * @property {module:model/LoggerUpdateParameters}
     */
    LoggerUpdateParameters,

    /**
    * The LoggersApi service constructor.
    * @property {module:api/LoggersApi}
    */
    LoggersApi
};
