/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on logger entity Azure API Management deployment.The Logger entity in API Management represents an event sink that you can use to log API Management events. Currently the Logger entity supports logging API Management events to Azure EventHub.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILoggerApi_H
#define OAI_OAILoggerApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILogger_Get_200_response.h"
#include "OAILogger_ListByService_200_response.h"
#include "OAILogger_ListByService_default_response.h"
#include "OAILogger_Update_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILoggerApi : public QObject {
    Q_OBJECT

public:
    OAILoggerApi(const int timeOut = 0);
    ~OAILoggerApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  logger_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAILogger_Get_200_response [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void loggerCreateOrUpdate(const QString &resource_group_name, const QString &service_name, const QString &logger_id, const QString &api_version, const QString &subscription_id, const OAILogger_Get_200_response &parameters, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  logger_id QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  force bool [optional]
    */
    virtual void loggerDelete(const QString &resource_group_name, const QString &service_name, const QString &logger_id, const QString &if_match, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  logger_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void loggerGet(const QString &resource_group_name, const QString &service_name, const QString &logger_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  logger_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void loggerGetEntityTag(const QString &resource_group_name, const QString &service_name, const QString &logger_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    */
    virtual void loggerListByService(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  logger_id QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAILogger_Update_request [required]
    */
    virtual void loggerUpdate(const QString &resource_group_name, const QString &service_name, const QString &logger_id, const QString &if_match, const QString &api_version, const QString &subscription_id, const OAILogger_Update_request &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void loggerCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void loggerDeleteCallback(OAIHttpRequestWorker *worker);
    void loggerGetCallback(OAIHttpRequestWorker *worker);
    void loggerGetEntityTagCallback(OAIHttpRequestWorker *worker);
    void loggerListByServiceCallback(OAIHttpRequestWorker *worker);
    void loggerUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void loggerCreateOrUpdateSignal(OAILogger_Get_200_response summary);
    void loggerDeleteSignal();
    void loggerGetSignal(OAILogger_Get_200_response summary);
    void loggerGetEntityTagSignal();
    void loggerListByServiceSignal(OAILogger_ListByService_200_response summary);
    void loggerUpdateSignal();


    void loggerCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAILogger_Get_200_response summary);
    void loggerDeleteSignalFull(OAIHttpRequestWorker *worker);
    void loggerGetSignalFull(OAIHttpRequestWorker *worker, OAILogger_Get_200_response summary);
    void loggerGetEntityTagSignalFull(OAIHttpRequestWorker *worker);
    void loggerListByServiceSignalFull(OAIHttpRequestWorker *worker, OAILogger_ListByService_200_response summary);
    void loggerUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use loggerCreateOrUpdateSignalError() instead")
    void loggerCreateOrUpdateSignalE(OAILogger_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void loggerCreateOrUpdateSignalError(OAILogger_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loggerDeleteSignalError() instead")
    void loggerDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void loggerDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loggerGetSignalError() instead")
    void loggerGetSignalE(OAILogger_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void loggerGetSignalError(OAILogger_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loggerGetEntityTagSignalError() instead")
    void loggerGetEntityTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void loggerGetEntityTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loggerListByServiceSignalError() instead")
    void loggerListByServiceSignalE(OAILogger_ListByService_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void loggerListByServiceSignalError(OAILogger_ListByService_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loggerUpdateSignalError() instead")
    void loggerUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void loggerUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use loggerCreateOrUpdateSignalErrorFull() instead")
    void loggerCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loggerCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loggerDeleteSignalErrorFull() instead")
    void loggerDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loggerDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loggerGetSignalErrorFull() instead")
    void loggerGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loggerGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loggerGetEntityTagSignalErrorFull() instead")
    void loggerGetEntityTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loggerGetEntityTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loggerListByServiceSignalErrorFull() instead")
    void loggerListByServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loggerListByServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loggerUpdateSignalErrorFull() instead")
    void loggerUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loggerUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
