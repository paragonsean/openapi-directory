# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LoggerSamplingProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, evaluation_interval: str=None, initial_percentage: float=None, max_percentage: float=None, max_telemetry_items_per_second: int=None, min_percentage: float=None, moving_average_ratio: float=None, percentage: float=None, percentage_decrease_timeout: str=None, percentage_increase_timeout: str=None, sampling_type: str=None):
        """LoggerSamplingProperties - a model defined in OpenAPI

        :param evaluation_interval: The evaluation_interval of this LoggerSamplingProperties.
        :param initial_percentage: The initial_percentage of this LoggerSamplingProperties.
        :param max_percentage: The max_percentage of this LoggerSamplingProperties.
        :param max_telemetry_items_per_second: The max_telemetry_items_per_second of this LoggerSamplingProperties.
        :param min_percentage: The min_percentage of this LoggerSamplingProperties.
        :param moving_average_ratio: The moving_average_ratio of this LoggerSamplingProperties.
        :param percentage: The percentage of this LoggerSamplingProperties.
        :param percentage_decrease_timeout: The percentage_decrease_timeout of this LoggerSamplingProperties.
        :param percentage_increase_timeout: The percentage_increase_timeout of this LoggerSamplingProperties.
        :param sampling_type: The sampling_type of this LoggerSamplingProperties.
        """
        self.openapi_types = {
            'evaluation_interval': str,
            'initial_percentage': float,
            'max_percentage': float,
            'max_telemetry_items_per_second': int,
            'min_percentage': float,
            'moving_average_ratio': float,
            'percentage': float,
            'percentage_decrease_timeout': str,
            'percentage_increase_timeout': str,
            'sampling_type': str
        }

        self.attribute_map = {
            'evaluation_interval': 'evaluationInterval',
            'initial_percentage': 'initialPercentage',
            'max_percentage': 'maxPercentage',
            'max_telemetry_items_per_second': 'maxTelemetryItemsPerSecond',
            'min_percentage': 'minPercentage',
            'moving_average_ratio': 'movingAverageRatio',
            'percentage': 'percentage',
            'percentage_decrease_timeout': 'percentageDecreaseTimeout',
            'percentage_increase_timeout': 'percentageIncreaseTimeout',
            'sampling_type': 'samplingType'
        }

        self._evaluation_interval = evaluation_interval
        self._initial_percentage = initial_percentage
        self._max_percentage = max_percentage
        self._max_telemetry_items_per_second = max_telemetry_items_per_second
        self._min_percentage = min_percentage
        self._moving_average_ratio = moving_average_ratio
        self._percentage = percentage
        self._percentage_decrease_timeout = percentage_decrease_timeout
        self._percentage_increase_timeout = percentage_increase_timeout
        self._sampling_type = sampling_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoggerSamplingProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoggerSamplingProperties of this LoggerSamplingProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def evaluation_interval(self):
        """Gets the evaluation_interval of this LoggerSamplingProperties.

        Rate re-evaluation interval in ISO8601 format.

        :return: The evaluation_interval of this LoggerSamplingProperties.
        :rtype: str
        """
        return self._evaluation_interval

    @evaluation_interval.setter
    def evaluation_interval(self, evaluation_interval):
        """Sets the evaluation_interval of this LoggerSamplingProperties.

        Rate re-evaluation interval in ISO8601 format.

        :param evaluation_interval: The evaluation_interval of this LoggerSamplingProperties.
        :type evaluation_interval: str
        """
        if evaluation_interval is not None and len(evaluation_interval) > 2000:
            raise ValueError("Invalid value for `evaluation_interval`, length must be less than or equal to `2000`")
        if evaluation_interval is not None and len(evaluation_interval) < 1:
            raise ValueError("Invalid value for `evaluation_interval`, length must be greater than or equal to `1`")

        self._evaluation_interval = evaluation_interval

    @property
    def initial_percentage(self):
        """Gets the initial_percentage of this LoggerSamplingProperties.

        Initial sampling rate.

        :return: The initial_percentage of this LoggerSamplingProperties.
        :rtype: float
        """
        return self._initial_percentage

    @initial_percentage.setter
    def initial_percentage(self, initial_percentage):
        """Sets the initial_percentage of this LoggerSamplingProperties.

        Initial sampling rate.

        :param initial_percentage: The initial_percentage of this LoggerSamplingProperties.
        :type initial_percentage: float
        """

        self._initial_percentage = initial_percentage

    @property
    def max_percentage(self):
        """Gets the max_percentage of this LoggerSamplingProperties.

        Maximum allowed rate of sampling.

        :return: The max_percentage of this LoggerSamplingProperties.
        :rtype: float
        """
        return self._max_percentage

    @max_percentage.setter
    def max_percentage(self, max_percentage):
        """Sets the max_percentage of this LoggerSamplingProperties.

        Maximum allowed rate of sampling.

        :param max_percentage: The max_percentage of this LoggerSamplingProperties.
        :type max_percentage: float
        """

        self._max_percentage = max_percentage

    @property
    def max_telemetry_items_per_second(self):
        """Gets the max_telemetry_items_per_second of this LoggerSamplingProperties.

        Target rate of telemetry items per second.

        :return: The max_telemetry_items_per_second of this LoggerSamplingProperties.
        :rtype: int
        """
        return self._max_telemetry_items_per_second

    @max_telemetry_items_per_second.setter
    def max_telemetry_items_per_second(self, max_telemetry_items_per_second):
        """Sets the max_telemetry_items_per_second of this LoggerSamplingProperties.

        Target rate of telemetry items per second.

        :param max_telemetry_items_per_second: The max_telemetry_items_per_second of this LoggerSamplingProperties.
        :type max_telemetry_items_per_second: int
        """

        self._max_telemetry_items_per_second = max_telemetry_items_per_second

    @property
    def min_percentage(self):
        """Gets the min_percentage of this LoggerSamplingProperties.

        Minimum allowed rate of sampling.

        :return: The min_percentage of this LoggerSamplingProperties.
        :rtype: float
        """
        return self._min_percentage

    @min_percentage.setter
    def min_percentage(self, min_percentage):
        """Sets the min_percentage of this LoggerSamplingProperties.

        Minimum allowed rate of sampling.

        :param min_percentage: The min_percentage of this LoggerSamplingProperties.
        :type min_percentage: float
        """

        self._min_percentage = min_percentage

    @property
    def moving_average_ratio(self):
        """Gets the moving_average_ratio of this LoggerSamplingProperties.

        Moving average ration assigned to most recent value.

        :return: The moving_average_ratio of this LoggerSamplingProperties.
        :rtype: float
        """
        return self._moving_average_ratio

    @moving_average_ratio.setter
    def moving_average_ratio(self, moving_average_ratio):
        """Sets the moving_average_ratio of this LoggerSamplingProperties.

        Moving average ration assigned to most recent value.

        :param moving_average_ratio: The moving_average_ratio of this LoggerSamplingProperties.
        :type moving_average_ratio: float
        """

        self._moving_average_ratio = moving_average_ratio

    @property
    def percentage(self):
        """Gets the percentage of this LoggerSamplingProperties.

        Rate of sampling for fixed-rate sampling.

        :return: The percentage of this LoggerSamplingProperties.
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this LoggerSamplingProperties.

        Rate of sampling for fixed-rate sampling.

        :param percentage: The percentage of this LoggerSamplingProperties.
        :type percentage: float
        """

        self._percentage = percentage

    @property
    def percentage_decrease_timeout(self):
        """Gets the percentage_decrease_timeout of this LoggerSamplingProperties.

        Duration in ISO8601 format after which it's allowed to lower the sampling rate.

        :return: The percentage_decrease_timeout of this LoggerSamplingProperties.
        :rtype: str
        """
        return self._percentage_decrease_timeout

    @percentage_decrease_timeout.setter
    def percentage_decrease_timeout(self, percentage_decrease_timeout):
        """Sets the percentage_decrease_timeout of this LoggerSamplingProperties.

        Duration in ISO8601 format after which it's allowed to lower the sampling rate.

        :param percentage_decrease_timeout: The percentage_decrease_timeout of this LoggerSamplingProperties.
        :type percentage_decrease_timeout: str
        """
        if percentage_decrease_timeout is not None and len(percentage_decrease_timeout) > 2000:
            raise ValueError("Invalid value for `percentage_decrease_timeout`, length must be less than or equal to `2000`")
        if percentage_decrease_timeout is not None and len(percentage_decrease_timeout) < 1:
            raise ValueError("Invalid value for `percentage_decrease_timeout`, length must be greater than or equal to `1`")

        self._percentage_decrease_timeout = percentage_decrease_timeout

    @property
    def percentage_increase_timeout(self):
        """Gets the percentage_increase_timeout of this LoggerSamplingProperties.

        Duration in ISO8601 format after which it's allowed to increase the sampling rate.

        :return: The percentage_increase_timeout of this LoggerSamplingProperties.
        :rtype: str
        """
        return self._percentage_increase_timeout

    @percentage_increase_timeout.setter
    def percentage_increase_timeout(self, percentage_increase_timeout):
        """Sets the percentage_increase_timeout of this LoggerSamplingProperties.

        Duration in ISO8601 format after which it's allowed to increase the sampling rate.

        :param percentage_increase_timeout: The percentage_increase_timeout of this LoggerSamplingProperties.
        :type percentage_increase_timeout: str
        """
        if percentage_increase_timeout is not None and len(percentage_increase_timeout) > 2000:
            raise ValueError("Invalid value for `percentage_increase_timeout`, length must be less than or equal to `2000`")
        if percentage_increase_timeout is not None and len(percentage_increase_timeout) < 1:
            raise ValueError("Invalid value for `percentage_increase_timeout`, length must be greater than or equal to `1`")

        self._percentage_increase_timeout = percentage_increase_timeout

    @property
    def sampling_type(self):
        """Gets the sampling_type of this LoggerSamplingProperties.

        Sampling type.

        :return: The sampling_type of this LoggerSamplingProperties.
        :rtype: str
        """
        return self._sampling_type

    @sampling_type.setter
    def sampling_type(self, sampling_type):
        """Sets the sampling_type of this LoggerSamplingProperties.

        Sampling type.

        :param sampling_type: The sampling_type of this LoggerSamplingProperties.
        :type sampling_type: str
        """
        allowed_values = ["fixed", "adaptive"]  # noqa: E501
        if sampling_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sampling_type` ({0}), must be one of {1}"
                .format(sampling_type, allowed_values)
            )

        self._sampling_type = sampling_type
