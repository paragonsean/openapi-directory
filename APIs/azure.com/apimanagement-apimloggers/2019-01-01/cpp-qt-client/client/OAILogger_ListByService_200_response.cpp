/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on logger entity Azure API Management deployment.The Logger entity in API Management represents an event sink that you can use to log API Management events. Currently the Logger entity supports logging API Management events to Azure EventHub.
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogger_ListByService_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogger_ListByService_200_response::OAILogger_ListByService_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogger_ListByService_200_response::OAILogger_ListByService_200_response() {
    this->initializeModel();
}

OAILogger_ListByService_200_response::~OAILogger_ListByService_200_response() {}

void OAILogger_ListByService_200_response::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_next_link_isSet = false;
    m_next_link_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAILogger_ListByService_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogger_ListByService_200_response::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_next_link_isValid = ::OpenAPI::fromJsonValue(m_next_link, json[QString("nextLink")]);
    m_next_link_isSet = !json[QString("nextLink")].isNull() && m_next_link_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAILogger_ListByService_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogger_ListByService_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_next_link_isSet) {
        obj.insert(QString("nextLink"), ::OpenAPI::toJsonValue(m_next_link));
    }
    if (m_value.size() > 0) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

qint64 OAILogger_ListByService_200_response::getCount() const {
    return m_count;
}
void OAILogger_ListByService_200_response::setCount(const qint64 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAILogger_ListByService_200_response::is_count_Set() const{
    return m_count_isSet;
}

bool OAILogger_ListByService_200_response::is_count_Valid() const{
    return m_count_isValid;
}

QString OAILogger_ListByService_200_response::getNextLink() const {
    return m_next_link;
}
void OAILogger_ListByService_200_response::setNextLink(const QString &next_link) {
    m_next_link = next_link;
    m_next_link_isSet = true;
}

bool OAILogger_ListByService_200_response::is_next_link_Set() const{
    return m_next_link_isSet;
}

bool OAILogger_ListByService_200_response::is_next_link_Valid() const{
    return m_next_link_isValid;
}

QList<OAILogger_ListByService_200_response_value_inner> OAILogger_ListByService_200_response::getValue() const {
    return m_value;
}
void OAILogger_ListByService_200_response::setValue(const QList<OAILogger_ListByService_200_response_value_inner> &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAILogger_ListByService_200_response::is_value_Set() const{
    return m_value_isSet;
}

bool OAILogger_ListByService_200_response::is_value_Valid() const{
    return m_value_isValid;
}

bool OAILogger_ListByService_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogger_ListByService_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
