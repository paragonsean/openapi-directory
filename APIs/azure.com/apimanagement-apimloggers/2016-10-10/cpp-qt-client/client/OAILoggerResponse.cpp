/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on logger entity Azure API Management deployment.The Logger entity in API Management represents an event sink that you can use to log API Management events. Currently the Logger entity supports logging API Management events to Azure EventHub.
 *
 * The version of the OpenAPI document: 2016-10-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoggerResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoggerResponse::OAILoggerResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoggerResponse::OAILoggerResponse() {
    this->initializeModel();
}

OAILoggerResponse::~OAILoggerResponse() {}

void OAILoggerResponse::initializeModel() {

    m_credentials_isSet = false;
    m_credentials_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_buffered_isSet = false;
    m_is_buffered_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAILoggerResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoggerResponse::fromJsonObject(QJsonObject json) {

    m_credentials_isValid = ::OpenAPI::fromJsonValue(m_credentials, json[QString("credentials")]);
    m_credentials_isSet = !json[QString("credentials")].isNull() && m_credentials_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_buffered_isValid = ::OpenAPI::fromJsonValue(m_is_buffered, json[QString("isBuffered")]);
    m_is_buffered_isSet = !json[QString("isBuffered")].isNull() && m_is_buffered_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAILoggerResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoggerResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_credentials.size() > 0) {
        obj.insert(QString("credentials"), ::OpenAPI::toJsonValue(m_credentials));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_buffered_isSet) {
        obj.insert(QString("isBuffered"), ::OpenAPI::toJsonValue(m_is_buffered));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QMap<QString, QString> OAILoggerResponse::getCredentials() const {
    return m_credentials;
}
void OAILoggerResponse::setCredentials(const QMap<QString, QString> &credentials) {
    m_credentials = credentials;
    m_credentials_isSet = true;
}

bool OAILoggerResponse::is_credentials_Set() const{
    return m_credentials_isSet;
}

bool OAILoggerResponse::is_credentials_Valid() const{
    return m_credentials_isValid;
}

QString OAILoggerResponse::getDescription() const {
    return m_description;
}
void OAILoggerResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILoggerResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAILoggerResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAILoggerResponse::getId() const {
    return m_id;
}
void OAILoggerResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILoggerResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAILoggerResponse::is_id_Valid() const{
    return m_id_isValid;
}

bool OAILoggerResponse::isIsBuffered() const {
    return m_is_buffered;
}
void OAILoggerResponse::setIsBuffered(const bool &is_buffered) {
    m_is_buffered = is_buffered;
    m_is_buffered_isSet = true;
}

bool OAILoggerResponse::is_is_buffered_Set() const{
    return m_is_buffered_isSet;
}

bool OAILoggerResponse::is_is_buffered_Valid() const{
    return m_is_buffered_isValid;
}

QString OAILoggerResponse::getType() const {
    return m_type;
}
void OAILoggerResponse::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILoggerResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAILoggerResponse::is_type_Valid() const{
    return m_type_isValid;
}

bool OAILoggerResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_credentials.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_buffered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoggerResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_credentials_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
