/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on logger entity Azure API Management deployment.The Logger entity in API Management represents an event sink that you can use to log API Management events. Currently the Logger entity supports logging API Management events to Azure EventHub.
 *
 * The version of the OpenAPI document: 2016-10-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILoggersApi_H
#define OAI_OAILoggersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILoggerCollection.h"
#include "OAILoggerCreateParameters.h"
#include "OAILoggerResponse.h"
#include "OAILoggerUpdateParameters.h"
#include "OAILoggers_ListByService_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILoggersApi : public QObject {
    Q_OBJECT

public:
    OAILoggersApi(const int timeOut = 0);
    ~OAILoggersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  loggerid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAILoggerCreateParameters [required]
    */
    virtual void loggersCreateOrUpdate(const QString &resource_group_name, const QString &service_name, const QString &loggerid, const QString &api_version, const QString &subscription_id, const OAILoggerCreateParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  loggerid QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void loggersDelete(const QString &resource_group_name, const QString &service_name, const QString &loggerid, const QString &if_match, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  loggerid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void loggersGet(const QString &resource_group_name, const QString &service_name, const QString &loggerid, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    */
    virtual void loggersListByService(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  loggerid QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAILoggerUpdateParameters [required]
    */
    virtual void loggersUpdate(const QString &resource_group_name, const QString &service_name, const QString &loggerid, const QString &if_match, const QString &api_version, const QString &subscription_id, const OAILoggerUpdateParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void loggersCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void loggersDeleteCallback(OAIHttpRequestWorker *worker);
    void loggersGetCallback(OAIHttpRequestWorker *worker);
    void loggersListByServiceCallback(OAIHttpRequestWorker *worker);
    void loggersUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void loggersCreateOrUpdateSignal();
    void loggersDeleteSignal();
    void loggersGetSignal(OAILoggerResponse summary);
    void loggersListByServiceSignal(OAILoggerCollection summary);
    void loggersUpdateSignal();


    void loggersCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker);
    void loggersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void loggersGetSignalFull(OAIHttpRequestWorker *worker, OAILoggerResponse summary);
    void loggersListByServiceSignalFull(OAIHttpRequestWorker *worker, OAILoggerCollection summary);
    void loggersUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use loggersCreateOrUpdateSignalError() instead")
    void loggersCreateOrUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void loggersCreateOrUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loggersDeleteSignalError() instead")
    void loggersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void loggersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loggersGetSignalError() instead")
    void loggersGetSignalE(OAILoggerResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void loggersGetSignalError(OAILoggerResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loggersListByServiceSignalError() instead")
    void loggersListByServiceSignalE(OAILoggerCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void loggersListByServiceSignalError(OAILoggerCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loggersUpdateSignalError() instead")
    void loggersUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void loggersUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use loggersCreateOrUpdateSignalErrorFull() instead")
    void loggersCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loggersCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loggersDeleteSignalErrorFull() instead")
    void loggersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loggersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loggersGetSignalErrorFull() instead")
    void loggersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loggersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loggersListByServiceSignalErrorFull() instead")
    void loggersListByServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loggersListByServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loggersUpdateSignalErrorFull() instead")
    void loggersUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loggersUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
