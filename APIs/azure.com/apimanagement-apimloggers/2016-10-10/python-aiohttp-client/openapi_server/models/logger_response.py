# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LoggerResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, credentials: Dict[str, str]=None, description: str=None, id: str=None, is_buffered: bool=True, type: str=None):
        """LoggerResponse - a model defined in OpenAPI

        :param credentials: The credentials of this LoggerResponse.
        :param description: The description of this LoggerResponse.
        :param id: The id of this LoggerResponse.
        :param is_buffered: The is_buffered of this LoggerResponse.
        :param type: The type of this LoggerResponse.
        """
        self.openapi_types = {
            'credentials': Dict[str, str],
            'description': str,
            'id': str,
            'is_buffered': bool,
            'type': str
        }

        self.attribute_map = {
            'credentials': 'credentials',
            'description': 'description',
            'id': 'id',
            'is_buffered': 'isBuffered',
            'type': 'type'
        }

        self._credentials = credentials
        self._description = description
        self._id = id
        self._is_buffered = is_buffered
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoggerResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoggerResponse of this LoggerResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def credentials(self):
        """Gets the credentials of this LoggerResponse.

        The name and SendRule connection string of the event hub.

        :return: The credentials of this LoggerResponse.
        :rtype: Dict[str, str]
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this LoggerResponse.

        The name and SendRule connection string of the event hub.

        :param credentials: The credentials of this LoggerResponse.
        :type credentials: Dict[str, str]
        """
        if credentials is None:
            raise ValueError("Invalid value for `credentials`, must not be `None`")

        self._credentials = credentials

    @property
    def description(self):
        """Gets the description of this LoggerResponse.

        Logger description.

        :return: The description of this LoggerResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LoggerResponse.

        Logger description.

        :param description: The description of this LoggerResponse.
        :type description: str
        """
        if description is not None and len(description) > 256:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this LoggerResponse.

        Uniquely identifies the logger within the current API Management service instance. The value is a valid relative URL in the format of /loggers/{loggerId} where {loggerId} is a logger identifier.

        :return: The id of this LoggerResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LoggerResponse.

        Uniquely identifies the logger within the current API Management service instance. The value is a valid relative URL in the format of /loggers/{loggerId} where {loggerId} is a logger identifier.

        :param id: The id of this LoggerResponse.
        :type id: str
        """

        self._id = id

    @property
    def is_buffered(self):
        """Gets the is_buffered of this LoggerResponse.

        Whether records are buffered in the logger before publishing. Default is assumed to be true.

        :return: The is_buffered of this LoggerResponse.
        :rtype: bool
        """
        return self._is_buffered

    @is_buffered.setter
    def is_buffered(self, is_buffered):
        """Sets the is_buffered of this LoggerResponse.

        Whether records are buffered in the logger before publishing. Default is assumed to be true.

        :param is_buffered: The is_buffered of this LoggerResponse.
        :type is_buffered: bool
        """

        self._is_buffered = is_buffered

    @property
    def type(self):
        """Gets the type of this LoggerResponse.

        Logger type.

        :return: The type of this LoggerResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LoggerResponse.

        Logger type.

        :param type: The type of this LoggerResponse.
        :type type: str
        """
        allowed_values = ["AzureEventHub"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
