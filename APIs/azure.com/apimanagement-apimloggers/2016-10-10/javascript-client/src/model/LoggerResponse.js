/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on logger entity Azure API Management deployment.The Logger entity in API Management represents an event sink that you can use to log API Management events. Currently the Logger entity supports logging API Management events to Azure EventHub.
 *
 * The version of the OpenAPI document: 2016-10-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LoggerResponse model module.
 * @module model/LoggerResponse
 * @version 2016-10-10
 */
class LoggerResponse {
    /**
     * Constructs a new <code>LoggerResponse</code>.
     * The Logger entity in API Management represents an event sink that you can use to log API Management events. Currently the Logger entity supports logging API Management events to Azure Event Hubs.
     * @alias module:model/LoggerResponse
     * @param credentials {Object.<String, String>} The name and SendRule connection string of the event hub.
     * @param type {module:model/LoggerResponse.TypeEnum} Logger type.
     */
    constructor(credentials, type) { 
        
        LoggerResponse.initialize(this, credentials, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, credentials, type) { 
        obj['credentials'] = credentials;
        obj['isBuffered'] = true;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>LoggerResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoggerResponse} obj Optional instance to populate.
     * @return {module:model/LoggerResponse} The populated <code>LoggerResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoggerResponse();

            if (data.hasOwnProperty('credentials')) {
                obj['credentials'] = ApiClient.convertToType(data['credentials'], {'String': 'String'});
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isBuffered')) {
                obj['isBuffered'] = ApiClient.convertToType(data['isBuffered'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoggerResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoggerResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LoggerResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

LoggerResponse.RequiredProperties = ["credentials", "type"];

/**
 * The name and SendRule connection string of the event hub.
 * @member {Object.<String, String>} credentials
 */
LoggerResponse.prototype['credentials'] = undefined;

/**
 * Logger description.
 * @member {String} description
 */
LoggerResponse.prototype['description'] = undefined;

/**
 * Uniquely identifies the logger within the current API Management service instance. The value is a valid relative URL in the format of /loggers/{loggerId} where {loggerId} is a logger identifier.
 * @member {String} id
 */
LoggerResponse.prototype['id'] = undefined;

/**
 * Whether records are buffered in the logger before publishing. Default is assumed to be true.
 * @member {Boolean} isBuffered
 * @default true
 */
LoggerResponse.prototype['isBuffered'] = true;

/**
 * Logger type.
 * @member {module:model/LoggerResponse.TypeEnum} type
 */
LoggerResponse.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
LoggerResponse['TypeEnum'] = {

    /**
     * value: "AzureEventHub"
     * @const
     */
    "AzureEventHub": "AzureEventHub"
};



export default LoggerResponse;

