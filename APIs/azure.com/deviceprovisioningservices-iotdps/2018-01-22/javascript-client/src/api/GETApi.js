/**
 * iotDpsClient
 * API for using the Azure IoT Hub Device Provisioning Service features.
 *
 * The version of the OpenAPI document: 2018-01-22
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AsyncOperationResult from '../model/AsyncOperationResult';
import CertificateListDescription from '../model/CertificateListDescription';
import CertificateResponse from '../model/CertificateResponse';
import ErrorDetails from '../model/ErrorDetails';
import IotDpsSkuDefinitionListResult from '../model/IotDpsSkuDefinitionListResult';
import ProvisioningServiceDescription from '../model/ProvisioningServiceDescription';
import ProvisioningServiceDescriptionListResult from '../model/ProvisioningServiceDescriptionListResult';

/**
* GET service.
* @module api/GETApi
* @version 2018-01-22
*/
export default class GETApi {

    /**
    * Constructs a new GETApi. 
    * @alias module:api/GETApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dpsCertificateGet operation.
     * @callback module:api/GETApi~dpsCertificateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the certificate from the provisioning service.
     * @param {String} certificateName Name of the certificate to retrieve.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName Resource group identifier.
     * @param {String} provisioningServiceName Name of the provisioning service the certificate is associated with.
     * @param {String} apiVersion The version of the API.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] ETag of the certificate.
     * @param {module:api/GETApi~dpsCertificateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateResponse}
     */
    dpsCertificateGet(certificateName, subscriptionId, resourceGroupName, provisioningServiceName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'certificateName' is set
      if (certificateName === undefined || certificateName === null) {
        throw new Error("Missing the required parameter 'certificateName' when calling dpsCertificateGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dpsCertificateGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dpsCertificateGet");
      }
      // verify the required parameter 'provisioningServiceName' is set
      if (provisioningServiceName === undefined || provisioningServiceName === null) {
        throw new Error("Missing the required parameter 'provisioningServiceName' when calling dpsCertificateGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dpsCertificateGet");
      }

      let pathParams = {
        'certificateName': certificateName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'provisioningServiceName': provisioningServiceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CertificateResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dpsCertificateList operation.
     * @callback module:api/GETApi~dpsCertificateListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateListDescription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the certificates tied to the provisioning service.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName Name of resource group.
     * @param {String} provisioningServiceName Name of provisioning service to retrieve certificates for.
     * @param {String} apiVersion The version of the API.
     * @param {module:api/GETApi~dpsCertificateListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateListDescription}
     */
    dpsCertificateList(subscriptionId, resourceGroupName, provisioningServiceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dpsCertificateList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dpsCertificateList");
      }
      // verify the required parameter 'provisioningServiceName' is set
      if (provisioningServiceName === undefined || provisioningServiceName === null) {
        throw new Error("Missing the required parameter 'provisioningServiceName' when calling dpsCertificateList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dpsCertificateList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'provisioningServiceName': provisioningServiceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CertificateListDescription;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iotDpsResourceGet operation.
     * @callback module:api/GETApi~iotDpsResourceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProvisioningServiceDescription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the non-security related metadata of the provisioning service.
     * Get the metadata of the provisioning service without SAS keys.
     * @param {String} provisioningServiceName Name of the provisioning service to retrieve.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} apiVersion The version of the API.
     * @param {module:api/GETApi~iotDpsResourceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProvisioningServiceDescription}
     */
    iotDpsResourceGet(provisioningServiceName, subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'provisioningServiceName' is set
      if (provisioningServiceName === undefined || provisioningServiceName === null) {
        throw new Error("Missing the required parameter 'provisioningServiceName' when calling iotDpsResourceGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iotDpsResourceGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling iotDpsResourceGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iotDpsResourceGet");
      }

      let pathParams = {
        'provisioningServiceName': provisioningServiceName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProvisioningServiceDescription;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iotDpsResourceGetOperationResult operation.
     * @callback module:api/GETApi~iotDpsResourceGetOperationResultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AsyncOperationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the status of a long running operation, such as create, update or delete a provisioning service.
     * @param {String} operationId Operation id corresponding to long running operation. Use this to poll for the status.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName Resource group identifier.
     * @param {String} provisioningServiceName Name of provisioning service that the operation is running on.
     * @param {String} asyncinfo Async header used to poll on the status of the operation, obtained while creating the long running operation.
     * @param {String} apiVersion The version of the API.
     * @param {module:api/GETApi~iotDpsResourceGetOperationResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AsyncOperationResult}
     */
    iotDpsResourceGetOperationResult(operationId, subscriptionId, resourceGroupName, provisioningServiceName, asyncinfo, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling iotDpsResourceGetOperationResult");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iotDpsResourceGetOperationResult");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling iotDpsResourceGetOperationResult");
      }
      // verify the required parameter 'provisioningServiceName' is set
      if (provisioningServiceName === undefined || provisioningServiceName === null) {
        throw new Error("Missing the required parameter 'provisioningServiceName' when calling iotDpsResourceGetOperationResult");
      }
      // verify the required parameter 'asyncinfo' is set
      if (asyncinfo === undefined || asyncinfo === null) {
        throw new Error("Missing the required parameter 'asyncinfo' when calling iotDpsResourceGetOperationResult");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iotDpsResourceGetOperationResult");
      }

      let pathParams = {
        'operationId': operationId,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'provisioningServiceName': provisioningServiceName
      };
      let queryParams = {
        'asyncinfo': asyncinfo,
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AsyncOperationResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/operationresults/{operationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iotDpsResourceListByResourceGroup operation.
     * @callback module:api/GETApi~iotDpsResourceListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProvisioningServiceDescriptionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all provisioning services in the given resource group.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName Resource group identifier.
     * @param {String} apiVersion The version of the API.
     * @param {module:api/GETApi~iotDpsResourceListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProvisioningServiceDescriptionListResult}
     */
    iotDpsResourceListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iotDpsResourceListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling iotDpsResourceListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iotDpsResourceListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProvisioningServiceDescriptionListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iotDpsResourceListBySubscription operation.
     * @callback module:api/GETApi~iotDpsResourceListBySubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProvisioningServiceDescriptionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the provisioning services in a subscription.
     * List all the provisioning services for a given subscription id.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} apiVersion The version of the API.
     * @param {module:api/GETApi~iotDpsResourceListBySubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProvisioningServiceDescriptionListResult}
     */
    iotDpsResourceListBySubscription(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iotDpsResourceListBySubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iotDpsResourceListBySubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProvisioningServiceDescriptionListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Devices/provisioningServices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iotDpsResourceListValidSkus operation.
     * @callback module:api/GETApi~iotDpsResourceListValidSkusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IotDpsSkuDefinitionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of valid SKUs for a provisioning service.
     * Gets the list of valid SKUs and tiers for a provisioning service.
     * @param {String} provisioningServiceName Name of provisioning service.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName Name of resource group.
     * @param {String} apiVersion The version of the API.
     * @param {module:api/GETApi~iotDpsResourceListValidSkusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IotDpsSkuDefinitionListResult}
     */
    iotDpsResourceListValidSkus(provisioningServiceName, subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'provisioningServiceName' is set
      if (provisioningServiceName === undefined || provisioningServiceName === null) {
        throw new Error("Missing the required parameter 'provisioningServiceName' when calling iotDpsResourceListValidSkus");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iotDpsResourceListValidSkus");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling iotDpsResourceListValidSkus");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iotDpsResourceListValidSkus");
      }

      let pathParams = {
        'provisioningServiceName': provisioningServiceName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IotDpsSkuDefinitionListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/skus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
