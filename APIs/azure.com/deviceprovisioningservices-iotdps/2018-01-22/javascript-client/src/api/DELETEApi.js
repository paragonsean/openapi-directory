/**
 * iotDpsClient
 * API for using the Azure IoT Hub Device Provisioning Service features.
 *
 * The version of the OpenAPI document: 2018-01-22
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorDetails from '../model/ErrorDetails';

/**
* DELETE service.
* @module api/DELETEApi
* @version 2018-01-22
*/
export default class DELETEApi {

    /**
    * Constructs a new DELETEApi. 
    * @alias module:api/DELETEApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dpsCertificateDelete operation.
     * @callback module:api/DELETEApi~dpsCertificateDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the Provisioning Service Certificate.
     * Deletes the specified certificate associated with the Provisioning Service
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName Resource group identifier.
     * @param {String} ifMatch ETag of the certificate
     * @param {String} provisioningServiceName The name of the provisioning service.
     * @param {String} certificateName This is a mandatory field, and is the logical name of the certificate that the provisioning service will access by.
     * @param {String} apiVersion The version of the API.
     * @param {Object} opts Optional parameters
     * @param {String} [certificateName2] This is optional, and it is the Common Name of the certificate.
     * @param {Blob} [certificateRawBytes] Raw data within the certificate.
     * @param {Boolean} [certificateIsVerified] Indicates if certificate has been verified by owner of the private key.
     * @param {module:model/String} [certificatePurpose] A description that mentions the purpose of the certificate.
     * @param {Date} [certificateCreated] Time the certificate is created.
     * @param {Date} [certificateLastUpdated] Time the certificate is last updated.
     * @param {Boolean} [certificateHasPrivateKey] Indicates if the certificate contains a private key.
     * @param {String} [certificateNonce] Random number generated to indicate Proof of Possession.
     * @param {module:api/DELETEApi~dpsCertificateDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dpsCertificateDelete(subscriptionId, resourceGroupName, ifMatch, provisioningServiceName, certificateName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dpsCertificateDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dpsCertificateDelete");
      }
      // verify the required parameter 'ifMatch' is set
      if (ifMatch === undefined || ifMatch === null) {
        throw new Error("Missing the required parameter 'ifMatch' when calling dpsCertificateDelete");
      }
      // verify the required parameter 'provisioningServiceName' is set
      if (provisioningServiceName === undefined || provisioningServiceName === null) {
        throw new Error("Missing the required parameter 'provisioningServiceName' when calling dpsCertificateDelete");
      }
      // verify the required parameter 'certificateName' is set
      if (certificateName === undefined || certificateName === null) {
        throw new Error("Missing the required parameter 'certificateName' when calling dpsCertificateDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dpsCertificateDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'provisioningServiceName': provisioningServiceName,
        'certificateName': certificateName
      };
      let queryParams = {
        'certificate.name': opts['certificateName2'],
        'certificate.rawBytes': opts['certificateRawBytes'],
        'certificate.isVerified': opts['certificateIsVerified'],
        'certificate.purpose': opts['certificatePurpose'],
        'certificate.created': opts['certificateCreated'],
        'certificate.lastUpdated': opts['certificateLastUpdated'],
        'certificate.hasPrivateKey': opts['certificateHasPrivateKey'],
        'certificate.nonce': opts['certificateNonce'],
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': ifMatch
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iotDpsResourceDelete operation.
     * @callback module:api/DELETEApi~iotDpsResourceDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the Provisioning Service
     * Deletes the Provisioning Service.
     * @param {String} provisioningServiceName Name of provisioning service to delete.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName Resource group identifier.
     * @param {String} apiVersion The version of the API.
     * @param {module:api/DELETEApi~iotDpsResourceDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    iotDpsResourceDelete(provisioningServiceName, subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'provisioningServiceName' is set
      if (provisioningServiceName === undefined || provisioningServiceName === null) {
        throw new Error("Missing the required parameter 'provisioningServiceName' when calling iotDpsResourceDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iotDpsResourceDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling iotDpsResourceDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iotDpsResourceDelete");
      }

      let pathParams = {
        'provisioningServiceName': provisioningServiceName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
