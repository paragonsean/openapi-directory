/**
 * iotDpsClient
 * API for using the Azure IoT Hub Device Provisioning Service features.
 *
 * The version of the OpenAPI document: 2018-01-22
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IotHubDefinitionDescription from './IotHubDefinitionDescription';
import SharedAccessSignatureAuthorizationRuleAccessRightsDescription from './SharedAccessSignatureAuthorizationRuleAccessRightsDescription';

/**
 * The IotDpsPropertiesDescription model module.
 * @module model/IotDpsPropertiesDescription
 * @version 2018-01-22
 */
class IotDpsPropertiesDescription {
    /**
     * Constructs a new <code>IotDpsPropertiesDescription</code>.
     * the service specific properties of a provisioning service, including keys, linked iot hubs, current state, and system generated properties such as hostname and idScope
     * @alias module:model/IotDpsPropertiesDescription
     */
    constructor() { 
        
        IotDpsPropertiesDescription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IotDpsPropertiesDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IotDpsPropertiesDescription} obj Optional instance to populate.
     * @return {module:model/IotDpsPropertiesDescription} The populated <code>IotDpsPropertiesDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IotDpsPropertiesDescription();

            if (data.hasOwnProperty('allocationPolicy')) {
                obj['allocationPolicy'] = ApiClient.convertToType(data['allocationPolicy'], 'String');
            }
            if (data.hasOwnProperty('authorizationPolicies')) {
                obj['authorizationPolicies'] = ApiClient.convertToType(data['authorizationPolicies'], [SharedAccessSignatureAuthorizationRuleAccessRightsDescription]);
            }
            if (data.hasOwnProperty('deviceProvisioningHostName')) {
                obj['deviceProvisioningHostName'] = ApiClient.convertToType(data['deviceProvisioningHostName'], 'String');
            }
            if (data.hasOwnProperty('idScope')) {
                obj['idScope'] = ApiClient.convertToType(data['idScope'], 'String');
            }
            if (data.hasOwnProperty('iotHubs')) {
                obj['iotHubs'] = ApiClient.convertToType(data['iotHubs'], [IotHubDefinitionDescription]);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('serviceOperationsHostName')) {
                obj['serviceOperationsHostName'] = ApiClient.convertToType(data['serviceOperationsHostName'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IotDpsPropertiesDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IotDpsPropertiesDescription</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['allocationPolicy'] && !(typeof data['allocationPolicy'] === 'string' || data['allocationPolicy'] instanceof String)) {
            throw new Error("Expected the field `allocationPolicy` to be a primitive type in the JSON string but got " + data['allocationPolicy']);
        }
        if (data['authorizationPolicies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['authorizationPolicies'])) {
                throw new Error("Expected the field `authorizationPolicies` to be an array in the JSON data but got " + data['authorizationPolicies']);
            }
            // validate the optional field `authorizationPolicies` (array)
            for (const item of data['authorizationPolicies']) {
                SharedAccessSignatureAuthorizationRuleAccessRightsDescription.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['deviceProvisioningHostName'] && !(typeof data['deviceProvisioningHostName'] === 'string' || data['deviceProvisioningHostName'] instanceof String)) {
            throw new Error("Expected the field `deviceProvisioningHostName` to be a primitive type in the JSON string but got " + data['deviceProvisioningHostName']);
        }
        // ensure the json data is a string
        if (data['idScope'] && !(typeof data['idScope'] === 'string' || data['idScope'] instanceof String)) {
            throw new Error("Expected the field `idScope` to be a primitive type in the JSON string but got " + data['idScope']);
        }
        if (data['iotHubs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['iotHubs'])) {
                throw new Error("Expected the field `iotHubs` to be an array in the JSON data but got " + data['iotHubs']);
            }
            // validate the optional field `iotHubs` (array)
            for (const item of data['iotHubs']) {
                IotHubDefinitionDescription.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['serviceOperationsHostName'] && !(typeof data['serviceOperationsHostName'] === 'string' || data['serviceOperationsHostName'] instanceof String)) {
            throw new Error("Expected the field `serviceOperationsHostName` to be a primitive type in the JSON string but got " + data['serviceOperationsHostName']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Allocation policy to be used by this provisioning service.
 * @member {module:model/IotDpsPropertiesDescription.AllocationPolicyEnum} allocationPolicy
 */
IotDpsPropertiesDescription.prototype['allocationPolicy'] = undefined;

/**
 * List of authorization keys for a provisioning service.
 * @member {Array.<module:model/SharedAccessSignatureAuthorizationRuleAccessRightsDescription>} authorizationPolicies
 */
IotDpsPropertiesDescription.prototype['authorizationPolicies'] = undefined;

/**
 * Device endpoint for this provisioning service.
 * @member {String} deviceProvisioningHostName
 */
IotDpsPropertiesDescription.prototype['deviceProvisioningHostName'] = undefined;

/**
 * Unique identifier of this provisioning service.
 * @member {String} idScope
 */
IotDpsPropertiesDescription.prototype['idScope'] = undefined;

/**
 * List of IoT hubs associated with this provisioning service.
 * @member {Array.<module:model/IotHubDefinitionDescription>} iotHubs
 */
IotDpsPropertiesDescription.prototype['iotHubs'] = undefined;

/**
 * The ARM provisioning state of the provisioning service.
 * @member {String} provisioningState
 */
IotDpsPropertiesDescription.prototype['provisioningState'] = undefined;

/**
 * Service endpoint for provisioning service.
 * @member {String} serviceOperationsHostName
 */
IotDpsPropertiesDescription.prototype['serviceOperationsHostName'] = undefined;

/**
 * Current state of the provisioning service.
 * @member {module:model/IotDpsPropertiesDescription.StateEnum} state
 */
IotDpsPropertiesDescription.prototype['state'] = undefined;





/**
 * Allowed values for the <code>allocationPolicy</code> property.
 * @enum {String}
 * @readonly
 */
IotDpsPropertiesDescription['AllocationPolicyEnum'] = {

    /**
     * value: "Hashed"
     * @const
     */
    "Hashed": "Hashed",

    /**
     * value: "GeoLatency"
     * @const
     */
    "GeoLatency": "GeoLatency",

    /**
     * value: "Static"
     * @const
     */
    "Static": "Static"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
IotDpsPropertiesDescription['StateEnum'] = {

    /**
     * value: "Activating"
     * @const
     */
    "Activating": "Activating",

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Deleted"
     * @const
     */
    "Deleted": "Deleted",

    /**
     * value: "ActivationFailed"
     * @const
     */
    "ActivationFailed": "ActivationFailed",

    /**
     * value: "DeletionFailed"
     * @const
     */
    "DeletionFailed": "DeletionFailed",

    /**
     * value: "Transitioning"
     * @const
     */
    "Transitioning": "Transitioning",

    /**
     * value: "Suspending"
     * @const
     */
    "Suspending": "Suspending",

    /**
     * value: "Suspended"
     * @const
     */
    "Suspended": "Suspended",

    /**
     * value: "Resuming"
     * @const
     */
    "Resuming": "Resuming",

    /**
     * value: "FailingOver"
     * @const
     */
    "FailingOver": "FailingOver",

    /**
     * value: "FailoverFailed"
     * @const
     */
    "FailoverFailed": "FailoverFailed"
};



export default IotDpsPropertiesDescription;

