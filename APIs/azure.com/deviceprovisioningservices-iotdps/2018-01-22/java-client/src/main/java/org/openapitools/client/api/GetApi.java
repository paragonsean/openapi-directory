/*
 * iotDpsClient
 * API for using the Azure IoT Hub Device Provisioning Service features.
 *
 * The version of the OpenAPI document: 2018-01-22
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AsyncOperationResult;
import org.openapitools.client.model.CertificateListDescription;
import org.openapitools.client.model.CertificateResponse;
import org.openapitools.client.model.ErrorDetails;
import org.openapitools.client.model.IotDpsSkuDefinitionListResult;
import org.openapitools.client.model.ProvisioningServiceDescription;
import org.openapitools.client.model.ProvisioningServiceDescriptionListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GetApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GetApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dpsCertificateGet
     * @param certificateName Name of the certificate to retrieve. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Resource group identifier. (required)
     * @param provisioningServiceName Name of the provisioning service the certificate is associated with. (required)
     * @param apiVersion The version of the API. (required)
     * @param ifMatch ETag of the certificate. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadata for the specified certificate. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dpsCertificateGetCall(String certificateName, String subscriptionId, String resourceGroupName, String provisioningServiceName, String apiVersion, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}"
            .replace("{" + "certificateName" + "}", localVarApiClient.escapeString(certificateName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "provisioningServiceName" + "}", localVarApiClient.escapeString(provisioningServiceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dpsCertificateGetValidateBeforeCall(String certificateName, String subscriptionId, String resourceGroupName, String provisioningServiceName, String apiVersion, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'certificateName' is set
        if (certificateName == null) {
            throw new ApiException("Missing the required parameter 'certificateName' when calling dpsCertificateGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dpsCertificateGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dpsCertificateGet(Async)");
        }

        // verify the required parameter 'provisioningServiceName' is set
        if (provisioningServiceName == null) {
            throw new ApiException("Missing the required parameter 'provisioningServiceName' when calling dpsCertificateGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dpsCertificateGet(Async)");
        }

        return dpsCertificateGetCall(certificateName, subscriptionId, resourceGroupName, provisioningServiceName, apiVersion, ifMatch, _callback);

    }

    /**
     * 
     * Get the certificate from the provisioning service.
     * @param certificateName Name of the certificate to retrieve. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Resource group identifier. (required)
     * @param provisioningServiceName Name of the provisioning service the certificate is associated with. (required)
     * @param apiVersion The version of the API. (required)
     * @param ifMatch ETag of the certificate. (optional)
     * @return CertificateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadata for the specified certificate. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public CertificateResponse dpsCertificateGet(String certificateName, String subscriptionId, String resourceGroupName, String provisioningServiceName, String apiVersion, String ifMatch) throws ApiException {
        ApiResponse<CertificateResponse> localVarResp = dpsCertificateGetWithHttpInfo(certificateName, subscriptionId, resourceGroupName, provisioningServiceName, apiVersion, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the certificate from the provisioning service.
     * @param certificateName Name of the certificate to retrieve. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Resource group identifier. (required)
     * @param provisioningServiceName Name of the provisioning service the certificate is associated with. (required)
     * @param apiVersion The version of the API. (required)
     * @param ifMatch ETag of the certificate. (optional)
     * @return ApiResponse&lt;CertificateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadata for the specified certificate. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateResponse> dpsCertificateGetWithHttpInfo(String certificateName, String subscriptionId, String resourceGroupName, String provisioningServiceName, String apiVersion, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = dpsCertificateGetValidateBeforeCall(certificateName, subscriptionId, resourceGroupName, provisioningServiceName, apiVersion, ifMatch, null);
        Type localVarReturnType = new TypeToken<CertificateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the certificate from the provisioning service.
     * @param certificateName Name of the certificate to retrieve. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Resource group identifier. (required)
     * @param provisioningServiceName Name of the provisioning service the certificate is associated with. (required)
     * @param apiVersion The version of the API. (required)
     * @param ifMatch ETag of the certificate. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadata for the specified certificate. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dpsCertificateGetAsync(String certificateName, String subscriptionId, String resourceGroupName, String provisioningServiceName, String apiVersion, String ifMatch, final ApiCallback<CertificateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dpsCertificateGetValidateBeforeCall(certificateName, subscriptionId, resourceGroupName, provisioningServiceName, apiVersion, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<CertificateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dpsCertificateList
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Name of resource group. (required)
     * @param provisioningServiceName Name of provisioning service to retrieve certificates for. (required)
     * @param apiVersion The version of the API. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of certificate descriptions in a JSON-serialized array. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dpsCertificateListCall(String subscriptionId, String resourceGroupName, String provisioningServiceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "provisioningServiceName" + "}", localVarApiClient.escapeString(provisioningServiceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dpsCertificateListValidateBeforeCall(String subscriptionId, String resourceGroupName, String provisioningServiceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dpsCertificateList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dpsCertificateList(Async)");
        }

        // verify the required parameter 'provisioningServiceName' is set
        if (provisioningServiceName == null) {
            throw new ApiException("Missing the required parameter 'provisioningServiceName' when calling dpsCertificateList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dpsCertificateList(Async)");
        }

        return dpsCertificateListCall(subscriptionId, resourceGroupName, provisioningServiceName, apiVersion, _callback);

    }

    /**
     * 
     * Get all the certificates tied to the provisioning service.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Name of resource group. (required)
     * @param provisioningServiceName Name of provisioning service to retrieve certificates for. (required)
     * @param apiVersion The version of the API. (required)
     * @return CertificateListDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of certificate descriptions in a JSON-serialized array. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public CertificateListDescription dpsCertificateList(String subscriptionId, String resourceGroupName, String provisioningServiceName, String apiVersion) throws ApiException {
        ApiResponse<CertificateListDescription> localVarResp = dpsCertificateListWithHttpInfo(subscriptionId, resourceGroupName, provisioningServiceName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get all the certificates tied to the provisioning service.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Name of resource group. (required)
     * @param provisioningServiceName Name of provisioning service to retrieve certificates for. (required)
     * @param apiVersion The version of the API. (required)
     * @return ApiResponse&lt;CertificateListDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of certificate descriptions in a JSON-serialized array. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateListDescription> dpsCertificateListWithHttpInfo(String subscriptionId, String resourceGroupName, String provisioningServiceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = dpsCertificateListValidateBeforeCall(subscriptionId, resourceGroupName, provisioningServiceName, apiVersion, null);
        Type localVarReturnType = new TypeToken<CertificateListDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all the certificates tied to the provisioning service.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Name of resource group. (required)
     * @param provisioningServiceName Name of provisioning service to retrieve certificates for. (required)
     * @param apiVersion The version of the API. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of certificate descriptions in a JSON-serialized array. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dpsCertificateListAsync(String subscriptionId, String resourceGroupName, String provisioningServiceName, String apiVersion, final ApiCallback<CertificateListDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = dpsCertificateListValidateBeforeCall(subscriptionId, resourceGroupName, provisioningServiceName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<CertificateListDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iotDpsResourceGet
     * @param provisioningServiceName Name of the provisioning service to retrieve. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param apiVersion The version of the API. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Provisioning service description with no keys is included in the response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotDpsResourceGetCall(String provisioningServiceName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}"
            .replace("{" + "provisioningServiceName" + "}", localVarApiClient.escapeString(provisioningServiceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iotDpsResourceGetValidateBeforeCall(String provisioningServiceName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'provisioningServiceName' is set
        if (provisioningServiceName == null) {
            throw new ApiException("Missing the required parameter 'provisioningServiceName' when calling iotDpsResourceGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling iotDpsResourceGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling iotDpsResourceGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling iotDpsResourceGet(Async)");
        }

        return iotDpsResourceGetCall(provisioningServiceName, subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * Get the non-security related metadata of the provisioning service.
     * Get the metadata of the provisioning service without SAS keys.
     * @param provisioningServiceName Name of the provisioning service to retrieve. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param apiVersion The version of the API. (required)
     * @return ProvisioningServiceDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Provisioning service description with no keys is included in the response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProvisioningServiceDescription iotDpsResourceGet(String provisioningServiceName, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<ProvisioningServiceDescription> localVarResp = iotDpsResourceGetWithHttpInfo(provisioningServiceName, subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the non-security related metadata of the provisioning service.
     * Get the metadata of the provisioning service without SAS keys.
     * @param provisioningServiceName Name of the provisioning service to retrieve. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param apiVersion The version of the API. (required)
     * @return ApiResponse&lt;ProvisioningServiceDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Provisioning service description with no keys is included in the response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProvisioningServiceDescription> iotDpsResourceGetWithHttpInfo(String provisioningServiceName, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = iotDpsResourceGetValidateBeforeCall(provisioningServiceName, subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProvisioningServiceDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the non-security related metadata of the provisioning service. (asynchronously)
     * Get the metadata of the provisioning service without SAS keys.
     * @param provisioningServiceName Name of the provisioning service to retrieve. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param apiVersion The version of the API. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Provisioning service description with no keys is included in the response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotDpsResourceGetAsync(String provisioningServiceName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<ProvisioningServiceDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = iotDpsResourceGetValidateBeforeCall(provisioningServiceName, subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProvisioningServiceDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iotDpsResourceGetOperationResult
     * @param operationId Operation id corresponding to long running operation. Use this to poll for the status. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Resource group identifier. (required)
     * @param provisioningServiceName Name of provisioning service that the operation is running on. (required)
     * @param asyncinfo Async header used to poll on the status of the operation, obtained while creating the long running operation. (required)
     * @param apiVersion The version of the API. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The status of the long running operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotDpsResourceGetOperationResultCall(String operationId, String subscriptionId, String resourceGroupName, String provisioningServiceName, String asyncinfo, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/operationresults/{operationId}"
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "provisioningServiceName" + "}", localVarApiClient.escapeString(provisioningServiceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asyncinfo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asyncinfo", asyncinfo));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iotDpsResourceGetOperationResultValidateBeforeCall(String operationId, String subscriptionId, String resourceGroupName, String provisioningServiceName, String asyncinfo, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling iotDpsResourceGetOperationResult(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling iotDpsResourceGetOperationResult(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling iotDpsResourceGetOperationResult(Async)");
        }

        // verify the required parameter 'provisioningServiceName' is set
        if (provisioningServiceName == null) {
            throw new ApiException("Missing the required parameter 'provisioningServiceName' when calling iotDpsResourceGetOperationResult(Async)");
        }

        // verify the required parameter 'asyncinfo' is set
        if (asyncinfo == null) {
            throw new ApiException("Missing the required parameter 'asyncinfo' when calling iotDpsResourceGetOperationResult(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling iotDpsResourceGetOperationResult(Async)");
        }

        return iotDpsResourceGetOperationResultCall(operationId, subscriptionId, resourceGroupName, provisioningServiceName, asyncinfo, apiVersion, _callback);

    }

    /**
     * 
     * Gets the status of a long running operation, such as create, update or delete a provisioning service.
     * @param operationId Operation id corresponding to long running operation. Use this to poll for the status. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Resource group identifier. (required)
     * @param provisioningServiceName Name of provisioning service that the operation is running on. (required)
     * @param asyncinfo Async header used to poll on the status of the operation, obtained while creating the long running operation. (required)
     * @param apiVersion The version of the API. (required)
     * @return AsyncOperationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The status of the long running operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public AsyncOperationResult iotDpsResourceGetOperationResult(String operationId, String subscriptionId, String resourceGroupName, String provisioningServiceName, String asyncinfo, String apiVersion) throws ApiException {
        ApiResponse<AsyncOperationResult> localVarResp = iotDpsResourceGetOperationResultWithHttpInfo(operationId, subscriptionId, resourceGroupName, provisioningServiceName, asyncinfo, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the status of a long running operation, such as create, update or delete a provisioning service.
     * @param operationId Operation id corresponding to long running operation. Use this to poll for the status. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Resource group identifier. (required)
     * @param provisioningServiceName Name of provisioning service that the operation is running on. (required)
     * @param asyncinfo Async header used to poll on the status of the operation, obtained while creating the long running operation. (required)
     * @param apiVersion The version of the API. (required)
     * @return ApiResponse&lt;AsyncOperationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The status of the long running operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AsyncOperationResult> iotDpsResourceGetOperationResultWithHttpInfo(String operationId, String subscriptionId, String resourceGroupName, String provisioningServiceName, String asyncinfo, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = iotDpsResourceGetOperationResultValidateBeforeCall(operationId, subscriptionId, resourceGroupName, provisioningServiceName, asyncinfo, apiVersion, null);
        Type localVarReturnType = new TypeToken<AsyncOperationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the status of a long running operation, such as create, update or delete a provisioning service.
     * @param operationId Operation id corresponding to long running operation. Use this to poll for the status. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Resource group identifier. (required)
     * @param provisioningServiceName Name of provisioning service that the operation is running on. (required)
     * @param asyncinfo Async header used to poll on the status of the operation, obtained while creating the long running operation. (required)
     * @param apiVersion The version of the API. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The status of the long running operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotDpsResourceGetOperationResultAsync(String operationId, String subscriptionId, String resourceGroupName, String provisioningServiceName, String asyncinfo, String apiVersion, final ApiCallback<AsyncOperationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = iotDpsResourceGetOperationResultValidateBeforeCall(operationId, subscriptionId, resourceGroupName, provisioningServiceName, asyncinfo, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AsyncOperationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iotDpsResourceListByResourceGroup
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Resource group identifier. (required)
     * @param apiVersion The version of the API. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of provisioning services in the resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotDpsResourceListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iotDpsResourceListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling iotDpsResourceListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling iotDpsResourceListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling iotDpsResourceListByResourceGroup(Async)");
        }

        return iotDpsResourceListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * 
     * Get a list of all provisioning services in the given resource group.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Resource group identifier. (required)
     * @param apiVersion The version of the API. (required)
     * @return ProvisioningServiceDescriptionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of provisioning services in the resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public ProvisioningServiceDescriptionListResult iotDpsResourceListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<ProvisioningServiceDescriptionListResult> localVarResp = iotDpsResourceListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all provisioning services in the given resource group.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Resource group identifier. (required)
     * @param apiVersion The version of the API. (required)
     * @return ApiResponse&lt;ProvisioningServiceDescriptionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of provisioning services in the resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProvisioningServiceDescriptionListResult> iotDpsResourceListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = iotDpsResourceListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProvisioningServiceDescriptionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all provisioning services in the given resource group.
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Resource group identifier. (required)
     * @param apiVersion The version of the API. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of provisioning services in the resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotDpsResourceListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<ProvisioningServiceDescriptionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = iotDpsResourceListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProvisioningServiceDescriptionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iotDpsResourceListBySubscription
     * @param subscriptionId The subscription identifier. (required)
     * @param apiVersion The version of the API. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized array of the metadata from all the provisioning services in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotDpsResourceListBySubscriptionCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Devices/provisioningServices"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iotDpsResourceListBySubscriptionValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling iotDpsResourceListBySubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling iotDpsResourceListBySubscription(Async)");
        }

        return iotDpsResourceListBySubscriptionCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * Get all the provisioning services in a subscription.
     * List all the provisioning services for a given subscription id.
     * @param subscriptionId The subscription identifier. (required)
     * @param apiVersion The version of the API. (required)
     * @return ProvisioningServiceDescriptionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized array of the metadata from all the provisioning services in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public ProvisioningServiceDescriptionListResult iotDpsResourceListBySubscription(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProvisioningServiceDescriptionListResult> localVarResp = iotDpsResourceListBySubscriptionWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get all the provisioning services in a subscription.
     * List all the provisioning services for a given subscription id.
     * @param subscriptionId The subscription identifier. (required)
     * @param apiVersion The version of the API. (required)
     * @return ApiResponse&lt;ProvisioningServiceDescriptionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized array of the metadata from all the provisioning services in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProvisioningServiceDescriptionListResult> iotDpsResourceListBySubscriptionWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = iotDpsResourceListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProvisioningServiceDescriptionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the provisioning services in a subscription. (asynchronously)
     * List all the provisioning services for a given subscription id.
     * @param subscriptionId The subscription identifier. (required)
     * @param apiVersion The version of the API. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized array of the metadata from all the provisioning services in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotDpsResourceListBySubscriptionAsync(String subscriptionId, String apiVersion, final ApiCallback<ProvisioningServiceDescriptionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = iotDpsResourceListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProvisioningServiceDescriptionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iotDpsResourceListValidSkus
     * @param provisioningServiceName Name of provisioning service. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Name of resource group. (required)
     * @param apiVersion The version of the API. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized array of the valid SKUs for this provisioning service. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotDpsResourceListValidSkusCall(String provisioningServiceName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/skus"
            .replace("{" + "provisioningServiceName" + "}", localVarApiClient.escapeString(provisioningServiceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iotDpsResourceListValidSkusValidateBeforeCall(String provisioningServiceName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'provisioningServiceName' is set
        if (provisioningServiceName == null) {
            throw new ApiException("Missing the required parameter 'provisioningServiceName' when calling iotDpsResourceListValidSkus(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling iotDpsResourceListValidSkus(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling iotDpsResourceListValidSkus(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling iotDpsResourceListValidSkus(Async)");
        }

        return iotDpsResourceListValidSkusCall(provisioningServiceName, subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * Get the list of valid SKUs for a provisioning service.
     * Gets the list of valid SKUs and tiers for a provisioning service.
     * @param provisioningServiceName Name of provisioning service. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Name of resource group. (required)
     * @param apiVersion The version of the API. (required)
     * @return IotDpsSkuDefinitionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized array of the valid SKUs for this provisioning service. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public IotDpsSkuDefinitionListResult iotDpsResourceListValidSkus(String provisioningServiceName, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<IotDpsSkuDefinitionListResult> localVarResp = iotDpsResourceListValidSkusWithHttpInfo(provisioningServiceName, subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the list of valid SKUs for a provisioning service.
     * Gets the list of valid SKUs and tiers for a provisioning service.
     * @param provisioningServiceName Name of provisioning service. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Name of resource group. (required)
     * @param apiVersion The version of the API. (required)
     * @return ApiResponse&lt;IotDpsSkuDefinitionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized array of the valid SKUs for this provisioning service. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IotDpsSkuDefinitionListResult> iotDpsResourceListValidSkusWithHttpInfo(String provisioningServiceName, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = iotDpsResourceListValidSkusValidateBeforeCall(provisioningServiceName, subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<IotDpsSkuDefinitionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of valid SKUs for a provisioning service. (asynchronously)
     * Gets the list of valid SKUs and tiers for a provisioning service.
     * @param provisioningServiceName Name of provisioning service. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Name of resource group. (required)
     * @param apiVersion The version of the API. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized array of the valid SKUs for this provisioning service. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotDpsResourceListValidSkusAsync(String provisioningServiceName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<IotDpsSkuDefinitionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = iotDpsResourceListValidSkusValidateBeforeCall(provisioningServiceName, subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<IotDpsSkuDefinitionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
