/*
 * iotDpsClient
 * API for using the Azure IoT Hub Device Provisioning Service features.
 *
 * The version of the OpenAPI document: 2018-01-22
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CertificateResponse;
import org.openapitools.client.model.ErrorDetails;
import org.openapitools.client.model.NameAvailabilityInfo;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OperationInputs;
import org.openapitools.client.model.SharedAccessSignatureAuthorizationRuleAccessRightsDescription;
import org.openapitools.client.model.SharedAccessSignatureAuthorizationRuleListResult;
import org.openapitools.client.model.VerificationCodeRequest;
import org.openapitools.client.model.VerificationCodeResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PostApi
 */
@Disabled
public class PostApiTest {

    private final PostApi api = new PostApi();

    /**
     * Generate verification code for Proof of Possession.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dpsCertificateGenerateVerificationCodeTest() throws ApiException {
        String certificateName = null;
        String ifMatch = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String provisioningServiceName = null;
        String apiVersion = null;
        String certificateName2 = null;
        byte[] certificateRawBytes = null;
        Boolean certificateIsVerified = null;
        String certificatePurpose = null;
        OffsetDateTime certificateCreated = null;
        OffsetDateTime certificateLastUpdated = null;
        Boolean certificateHasPrivateKey = null;
        String certificateNonce = null;
        VerificationCodeResponse response = api.dpsCertificateGenerateVerificationCode(certificateName, ifMatch, subscriptionId, resourceGroupName, provisioningServiceName, apiVersion, certificateName2, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce);
        // TODO: test validations
    }

    /**
     * Verify certificate&#39;s private key possession.
     *
     * Verifies the certificate&#39;s private key possession by providing the leaf cert issued by the verifying pre uploaded certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dpsCertificateVerifyCertificateTest() throws ApiException {
        String certificateName = null;
        String ifMatch = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String provisioningServiceName = null;
        String apiVersion = null;
        VerificationCodeRequest request = null;
        String certificateName2 = null;
        byte[] certificateRawBytes = null;
        Boolean certificateIsVerified = null;
        String certificatePurpose = null;
        OffsetDateTime certificateCreated = null;
        OffsetDateTime certificateLastUpdated = null;
        Boolean certificateHasPrivateKey = null;
        String certificateNonce = null;
        CertificateResponse response = api.dpsCertificateVerifyCertificate(certificateName, ifMatch, subscriptionId, resourceGroupName, provisioningServiceName, apiVersion, request, certificateName2, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce);
        // TODO: test validations
    }

    /**
     * Check if a provisioning service name is available.
     *
     * Check if a provisioning service name is available. This will validate if the name is syntactically valid and if the name is usable
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iotDpsResourceCheckProvisioningServiceNameAvailabilityTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        OperationInputs arguments = null;
        NameAvailabilityInfo response = api.iotDpsResourceCheckProvisioningServiceNameAvailability(subscriptionId, apiVersion, arguments);
        // TODO: test validations
    }

    /**
     * Get the security metadata for a provisioning service.
     *
     * List the primary and secondary keys for a provisioning service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iotDpsResourceListKeysTest() throws ApiException {
        String provisioningServiceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        SharedAccessSignatureAuthorizationRuleListResult response = api.iotDpsResourceListKeys(provisioningServiceName, subscriptionId, resourceGroupName, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a shared access policy by name from a provisioning service.
     *
     * List primary and secondary keys for a specific key name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iotDpsResourceListKeysForKeyNameTest() throws ApiException {
        String provisioningServiceName = null;
        String keyName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        SharedAccessSignatureAuthorizationRuleAccessRightsDescription response = api.iotDpsResourceListKeysForKeyName(provisioningServiceName, keyName, subscriptionId, resourceGroupName, apiVersion);
        // TODO: test validations
    }

}
