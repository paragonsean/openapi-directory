/**
 * iotDpsClient
 * API for using the Azure IoT Hub Device Provisioning Service features.
 *
 * The version of the OpenAPI document: 2018-01-22
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerificationCodeResponse_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerificationCodeResponse_properties::OAIVerificationCodeResponse_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerificationCodeResponse_properties::OAIVerificationCodeResponse_properties() {
    this->initializeModel();
}

OAIVerificationCodeResponse_properties::~OAIVerificationCodeResponse_properties() {}

void OAIVerificationCodeResponse_properties::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_expiry_isSet = false;
    m_expiry_isValid = false;

    m_is_verified_isSet = false;
    m_is_verified_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_thumbprint_isSet = false;
    m_thumbprint_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_verification_code_isSet = false;
    m_verification_code_isValid = false;
}

void OAIVerificationCodeResponse_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerificationCodeResponse_properties::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_expiry_isValid = ::OpenAPI::fromJsonValue(m_expiry, json[QString("expiry")]);
    m_expiry_isSet = !json[QString("expiry")].isNull() && m_expiry_isValid;

    m_is_verified_isValid = ::OpenAPI::fromJsonValue(m_is_verified, json[QString("isVerified")]);
    m_is_verified_isSet = !json[QString("isVerified")].isNull() && m_is_verified_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_thumbprint_isValid = ::OpenAPI::fromJsonValue(m_thumbprint, json[QString("thumbprint")]);
    m_thumbprint_isSet = !json[QString("thumbprint")].isNull() && m_thumbprint_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_verification_code_isValid = ::OpenAPI::fromJsonValue(m_verification_code, json[QString("verificationCode")]);
    m_verification_code_isSet = !json[QString("verificationCode")].isNull() && m_verification_code_isValid;
}

QString OAIVerificationCodeResponse_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerificationCodeResponse_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_expiry_isSet) {
        obj.insert(QString("expiry"), ::OpenAPI::toJsonValue(m_expiry));
    }
    if (m_is_verified_isSet) {
        obj.insert(QString("isVerified"), ::OpenAPI::toJsonValue(m_is_verified));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_thumbprint_isSet) {
        obj.insert(QString("thumbprint"), ::OpenAPI::toJsonValue(m_thumbprint));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_verification_code_isSet) {
        obj.insert(QString("verificationCode"), ::OpenAPI::toJsonValue(m_verification_code));
    }
    return obj;
}

QString OAIVerificationCodeResponse_properties::getCreated() const {
    return m_created;
}
void OAIVerificationCodeResponse_properties::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIVerificationCodeResponse_properties::is_created_Set() const{
    return m_created_isSet;
}

bool OAIVerificationCodeResponse_properties::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIVerificationCodeResponse_properties::getExpiry() const {
    return m_expiry;
}
void OAIVerificationCodeResponse_properties::setExpiry(const QString &expiry) {
    m_expiry = expiry;
    m_expiry_isSet = true;
}

bool OAIVerificationCodeResponse_properties::is_expiry_Set() const{
    return m_expiry_isSet;
}

bool OAIVerificationCodeResponse_properties::is_expiry_Valid() const{
    return m_expiry_isValid;
}

bool OAIVerificationCodeResponse_properties::isIsVerified() const {
    return m_is_verified;
}
void OAIVerificationCodeResponse_properties::setIsVerified(const bool &is_verified) {
    m_is_verified = is_verified;
    m_is_verified_isSet = true;
}

bool OAIVerificationCodeResponse_properties::is_is_verified_Set() const{
    return m_is_verified_isSet;
}

bool OAIVerificationCodeResponse_properties::is_is_verified_Valid() const{
    return m_is_verified_isValid;
}

QString OAIVerificationCodeResponse_properties::getSubject() const {
    return m_subject;
}
void OAIVerificationCodeResponse_properties::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIVerificationCodeResponse_properties::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIVerificationCodeResponse_properties::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAIVerificationCodeResponse_properties::getThumbprint() const {
    return m_thumbprint;
}
void OAIVerificationCodeResponse_properties::setThumbprint(const QString &thumbprint) {
    m_thumbprint = thumbprint;
    m_thumbprint_isSet = true;
}

bool OAIVerificationCodeResponse_properties::is_thumbprint_Set() const{
    return m_thumbprint_isSet;
}

bool OAIVerificationCodeResponse_properties::is_thumbprint_Valid() const{
    return m_thumbprint_isValid;
}

QString OAIVerificationCodeResponse_properties::getUpdated() const {
    return m_updated;
}
void OAIVerificationCodeResponse_properties::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIVerificationCodeResponse_properties::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIVerificationCodeResponse_properties::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAIVerificationCodeResponse_properties::getVerificationCode() const {
    return m_verification_code;
}
void OAIVerificationCodeResponse_properties::setVerificationCode(const QString &verification_code) {
    m_verification_code = verification_code;
    m_verification_code_isSet = true;
}

bool OAIVerificationCodeResponse_properties::is_verification_code_Set() const{
    return m_verification_code_isSet;
}

bool OAIVerificationCodeResponse_properties::is_verification_code_Valid() const{
    return m_verification_code_isValid;
}

bool OAIVerificationCodeResponse_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_verified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerificationCodeResponse_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
