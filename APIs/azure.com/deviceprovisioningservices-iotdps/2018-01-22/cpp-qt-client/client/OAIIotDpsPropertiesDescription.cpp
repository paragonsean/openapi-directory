/**
 * iotDpsClient
 * API for using the Azure IoT Hub Device Provisioning Service features.
 *
 * The version of the OpenAPI document: 2018-01-22
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIotDpsPropertiesDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIotDpsPropertiesDescription::OAIIotDpsPropertiesDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIotDpsPropertiesDescription::OAIIotDpsPropertiesDescription() {
    this->initializeModel();
}

OAIIotDpsPropertiesDescription::~OAIIotDpsPropertiesDescription() {}

void OAIIotDpsPropertiesDescription::initializeModel() {

    m_allocation_policy_isSet = false;
    m_allocation_policy_isValid = false;

    m_authorization_policies_isSet = false;
    m_authorization_policies_isValid = false;

    m_device_provisioning_host_name_isSet = false;
    m_device_provisioning_host_name_isValid = false;

    m_id_scope_isSet = false;
    m_id_scope_isValid = false;

    m_iot_hubs_isSet = false;
    m_iot_hubs_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_service_operations_host_name_isSet = false;
    m_service_operations_host_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIIotDpsPropertiesDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIotDpsPropertiesDescription::fromJsonObject(QJsonObject json) {

    m_allocation_policy_isValid = ::OpenAPI::fromJsonValue(m_allocation_policy, json[QString("allocationPolicy")]);
    m_allocation_policy_isSet = !json[QString("allocationPolicy")].isNull() && m_allocation_policy_isValid;

    m_authorization_policies_isValid = ::OpenAPI::fromJsonValue(m_authorization_policies, json[QString("authorizationPolicies")]);
    m_authorization_policies_isSet = !json[QString("authorizationPolicies")].isNull() && m_authorization_policies_isValid;

    m_device_provisioning_host_name_isValid = ::OpenAPI::fromJsonValue(m_device_provisioning_host_name, json[QString("deviceProvisioningHostName")]);
    m_device_provisioning_host_name_isSet = !json[QString("deviceProvisioningHostName")].isNull() && m_device_provisioning_host_name_isValid;

    m_id_scope_isValid = ::OpenAPI::fromJsonValue(m_id_scope, json[QString("idScope")]);
    m_id_scope_isSet = !json[QString("idScope")].isNull() && m_id_scope_isValid;

    m_iot_hubs_isValid = ::OpenAPI::fromJsonValue(m_iot_hubs, json[QString("iotHubs")]);
    m_iot_hubs_isSet = !json[QString("iotHubs")].isNull() && m_iot_hubs_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_service_operations_host_name_isValid = ::OpenAPI::fromJsonValue(m_service_operations_host_name, json[QString("serviceOperationsHostName")]);
    m_service_operations_host_name_isSet = !json[QString("serviceOperationsHostName")].isNull() && m_service_operations_host_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIIotDpsPropertiesDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIotDpsPropertiesDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_allocation_policy_isSet) {
        obj.insert(QString("allocationPolicy"), ::OpenAPI::toJsonValue(m_allocation_policy));
    }
    if (m_authorization_policies.size() > 0) {
        obj.insert(QString("authorizationPolicies"), ::OpenAPI::toJsonValue(m_authorization_policies));
    }
    if (m_device_provisioning_host_name_isSet) {
        obj.insert(QString("deviceProvisioningHostName"), ::OpenAPI::toJsonValue(m_device_provisioning_host_name));
    }
    if (m_id_scope_isSet) {
        obj.insert(QString("idScope"), ::OpenAPI::toJsonValue(m_id_scope));
    }
    if (m_iot_hubs.size() > 0) {
        obj.insert(QString("iotHubs"), ::OpenAPI::toJsonValue(m_iot_hubs));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_service_operations_host_name_isSet) {
        obj.insert(QString("serviceOperationsHostName"), ::OpenAPI::toJsonValue(m_service_operations_host_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIIotDpsPropertiesDescription::getAllocationPolicy() const {
    return m_allocation_policy;
}
void OAIIotDpsPropertiesDescription::setAllocationPolicy(const QString &allocation_policy) {
    m_allocation_policy = allocation_policy;
    m_allocation_policy_isSet = true;
}

bool OAIIotDpsPropertiesDescription::is_allocation_policy_Set() const{
    return m_allocation_policy_isSet;
}

bool OAIIotDpsPropertiesDescription::is_allocation_policy_Valid() const{
    return m_allocation_policy_isValid;
}

QList<OAISharedAccessSignatureAuthorizationRule_AccessRightsDescription> OAIIotDpsPropertiesDescription::getAuthorizationPolicies() const {
    return m_authorization_policies;
}
void OAIIotDpsPropertiesDescription::setAuthorizationPolicies(const QList<OAISharedAccessSignatureAuthorizationRule_AccessRightsDescription> &authorization_policies) {
    m_authorization_policies = authorization_policies;
    m_authorization_policies_isSet = true;
}

bool OAIIotDpsPropertiesDescription::is_authorization_policies_Set() const{
    return m_authorization_policies_isSet;
}

bool OAIIotDpsPropertiesDescription::is_authorization_policies_Valid() const{
    return m_authorization_policies_isValid;
}

QString OAIIotDpsPropertiesDescription::getDeviceProvisioningHostName() const {
    return m_device_provisioning_host_name;
}
void OAIIotDpsPropertiesDescription::setDeviceProvisioningHostName(const QString &device_provisioning_host_name) {
    m_device_provisioning_host_name = device_provisioning_host_name;
    m_device_provisioning_host_name_isSet = true;
}

bool OAIIotDpsPropertiesDescription::is_device_provisioning_host_name_Set() const{
    return m_device_provisioning_host_name_isSet;
}

bool OAIIotDpsPropertiesDescription::is_device_provisioning_host_name_Valid() const{
    return m_device_provisioning_host_name_isValid;
}

QString OAIIotDpsPropertiesDescription::getIdScope() const {
    return m_id_scope;
}
void OAIIotDpsPropertiesDescription::setIdScope(const QString &id_scope) {
    m_id_scope = id_scope;
    m_id_scope_isSet = true;
}

bool OAIIotDpsPropertiesDescription::is_id_scope_Set() const{
    return m_id_scope_isSet;
}

bool OAIIotDpsPropertiesDescription::is_id_scope_Valid() const{
    return m_id_scope_isValid;
}

QList<OAIIotHubDefinitionDescription> OAIIotDpsPropertiesDescription::getIotHubs() const {
    return m_iot_hubs;
}
void OAIIotDpsPropertiesDescription::setIotHubs(const QList<OAIIotHubDefinitionDescription> &iot_hubs) {
    m_iot_hubs = iot_hubs;
    m_iot_hubs_isSet = true;
}

bool OAIIotDpsPropertiesDescription::is_iot_hubs_Set() const{
    return m_iot_hubs_isSet;
}

bool OAIIotDpsPropertiesDescription::is_iot_hubs_Valid() const{
    return m_iot_hubs_isValid;
}

QString OAIIotDpsPropertiesDescription::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIIotDpsPropertiesDescription::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIIotDpsPropertiesDescription::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIIotDpsPropertiesDescription::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIIotDpsPropertiesDescription::getServiceOperationsHostName() const {
    return m_service_operations_host_name;
}
void OAIIotDpsPropertiesDescription::setServiceOperationsHostName(const QString &service_operations_host_name) {
    m_service_operations_host_name = service_operations_host_name;
    m_service_operations_host_name_isSet = true;
}

bool OAIIotDpsPropertiesDescription::is_service_operations_host_name_Set() const{
    return m_service_operations_host_name_isSet;
}

bool OAIIotDpsPropertiesDescription::is_service_operations_host_name_Valid() const{
    return m_service_operations_host_name_isValid;
}

QString OAIIotDpsPropertiesDescription::getState() const {
    return m_state;
}
void OAIIotDpsPropertiesDescription::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIIotDpsPropertiesDescription::is_state_Set() const{
    return m_state_isSet;
}

bool OAIIotDpsPropertiesDescription::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIIotDpsPropertiesDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocation_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_provisioning_host_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iot_hubs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_operations_host_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIotDpsPropertiesDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
