/**
 * iotDpsClient
 * API for using the Azure IoT Hub Device Provisioning Service features.
 *
 * The version of the OpenAPI document: 2018-01-22
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIotHubDefinitionDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIotHubDefinitionDescription::OAIIotHubDefinitionDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIotHubDefinitionDescription::OAIIotHubDefinitionDescription() {
    this->initializeModel();
}

OAIIotHubDefinitionDescription::~OAIIotHubDefinitionDescription() {}

void OAIIotHubDefinitionDescription::initializeModel() {

    m_allocation_weight_isSet = false;
    m_allocation_weight_isValid = false;

    m_apply_allocation_policy_isSet = false;
    m_apply_allocation_policy_isValid = false;

    m_connection_string_isSet = false;
    m_connection_string_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIIotHubDefinitionDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIotHubDefinitionDescription::fromJsonObject(QJsonObject json) {

    m_allocation_weight_isValid = ::OpenAPI::fromJsonValue(m_allocation_weight, json[QString("allocationWeight")]);
    m_allocation_weight_isSet = !json[QString("allocationWeight")].isNull() && m_allocation_weight_isValid;

    m_apply_allocation_policy_isValid = ::OpenAPI::fromJsonValue(m_apply_allocation_policy, json[QString("applyAllocationPolicy")]);
    m_apply_allocation_policy_isSet = !json[QString("applyAllocationPolicy")].isNull() && m_apply_allocation_policy_isValid;

    m_connection_string_isValid = ::OpenAPI::fromJsonValue(m_connection_string, json[QString("connectionString")]);
    m_connection_string_isSet = !json[QString("connectionString")].isNull() && m_connection_string_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIIotHubDefinitionDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIotHubDefinitionDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_allocation_weight_isSet) {
        obj.insert(QString("allocationWeight"), ::OpenAPI::toJsonValue(m_allocation_weight));
    }
    if (m_apply_allocation_policy_isSet) {
        obj.insert(QString("applyAllocationPolicy"), ::OpenAPI::toJsonValue(m_apply_allocation_policy));
    }
    if (m_connection_string_isSet) {
        obj.insert(QString("connectionString"), ::OpenAPI::toJsonValue(m_connection_string));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

qint32 OAIIotHubDefinitionDescription::getAllocationWeight() const {
    return m_allocation_weight;
}
void OAIIotHubDefinitionDescription::setAllocationWeight(const qint32 &allocation_weight) {
    m_allocation_weight = allocation_weight;
    m_allocation_weight_isSet = true;
}

bool OAIIotHubDefinitionDescription::is_allocation_weight_Set() const{
    return m_allocation_weight_isSet;
}

bool OAIIotHubDefinitionDescription::is_allocation_weight_Valid() const{
    return m_allocation_weight_isValid;
}

bool OAIIotHubDefinitionDescription::isApplyAllocationPolicy() const {
    return m_apply_allocation_policy;
}
void OAIIotHubDefinitionDescription::setApplyAllocationPolicy(const bool &apply_allocation_policy) {
    m_apply_allocation_policy = apply_allocation_policy;
    m_apply_allocation_policy_isSet = true;
}

bool OAIIotHubDefinitionDescription::is_apply_allocation_policy_Set() const{
    return m_apply_allocation_policy_isSet;
}

bool OAIIotHubDefinitionDescription::is_apply_allocation_policy_Valid() const{
    return m_apply_allocation_policy_isValid;
}

QString OAIIotHubDefinitionDescription::getConnectionString() const {
    return m_connection_string;
}
void OAIIotHubDefinitionDescription::setConnectionString(const QString &connection_string) {
    m_connection_string = connection_string;
    m_connection_string_isSet = true;
}

bool OAIIotHubDefinitionDescription::is_connection_string_Set() const{
    return m_connection_string_isSet;
}

bool OAIIotHubDefinitionDescription::is_connection_string_Valid() const{
    return m_connection_string_isValid;
}

QString OAIIotHubDefinitionDescription::getLocation() const {
    return m_location;
}
void OAIIotHubDefinitionDescription::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIIotHubDefinitionDescription::is_location_Set() const{
    return m_location_isSet;
}

bool OAIIotHubDefinitionDescription::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIIotHubDefinitionDescription::getName() const {
    return m_name;
}
void OAIIotHubDefinitionDescription::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIotHubDefinitionDescription::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIotHubDefinitionDescription::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIIotHubDefinitionDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocation_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_apply_allocation_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIotHubDefinitionDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_connection_string_isValid && m_location_isValid && true;
}

} // namespace OpenAPI
