# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.iot_hub_definition_description import IotHubDefinitionDescription
from openapi_server.models.shared_access_signature_authorization_rule_access_rights_description import SharedAccessSignatureAuthorizationRuleAccessRightsDescription
from openapi_server import util


class IotDpsPropertiesDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allocation_policy: str=None, authorization_policies: List[SharedAccessSignatureAuthorizationRuleAccessRightsDescription]=None, device_provisioning_host_name: str=None, id_scope: str=None, iot_hubs: List[IotHubDefinitionDescription]=None, provisioning_state: str=None, service_operations_host_name: str=None, state: str=None):
        """IotDpsPropertiesDescription - a model defined in OpenAPI

        :param allocation_policy: The allocation_policy of this IotDpsPropertiesDescription.
        :param authorization_policies: The authorization_policies of this IotDpsPropertiesDescription.
        :param device_provisioning_host_name: The device_provisioning_host_name of this IotDpsPropertiesDescription.
        :param id_scope: The id_scope of this IotDpsPropertiesDescription.
        :param iot_hubs: The iot_hubs of this IotDpsPropertiesDescription.
        :param provisioning_state: The provisioning_state of this IotDpsPropertiesDescription.
        :param service_operations_host_name: The service_operations_host_name of this IotDpsPropertiesDescription.
        :param state: The state of this IotDpsPropertiesDescription.
        """
        self.openapi_types = {
            'allocation_policy': str,
            'authorization_policies': List[SharedAccessSignatureAuthorizationRuleAccessRightsDescription],
            'device_provisioning_host_name': str,
            'id_scope': str,
            'iot_hubs': List[IotHubDefinitionDescription],
            'provisioning_state': str,
            'service_operations_host_name': str,
            'state': str
        }

        self.attribute_map = {
            'allocation_policy': 'allocationPolicy',
            'authorization_policies': 'authorizationPolicies',
            'device_provisioning_host_name': 'deviceProvisioningHostName',
            'id_scope': 'idScope',
            'iot_hubs': 'iotHubs',
            'provisioning_state': 'provisioningState',
            'service_operations_host_name': 'serviceOperationsHostName',
            'state': 'state'
        }

        self._allocation_policy = allocation_policy
        self._authorization_policies = authorization_policies
        self._device_provisioning_host_name = device_provisioning_host_name
        self._id_scope = id_scope
        self._iot_hubs = iot_hubs
        self._provisioning_state = provisioning_state
        self._service_operations_host_name = service_operations_host_name
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IotDpsPropertiesDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IotDpsPropertiesDescription of this IotDpsPropertiesDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allocation_policy(self):
        """Gets the allocation_policy of this IotDpsPropertiesDescription.

        Allocation policy to be used by this provisioning service.

        :return: The allocation_policy of this IotDpsPropertiesDescription.
        :rtype: str
        """
        return self._allocation_policy

    @allocation_policy.setter
    def allocation_policy(self, allocation_policy):
        """Sets the allocation_policy of this IotDpsPropertiesDescription.

        Allocation policy to be used by this provisioning service.

        :param allocation_policy: The allocation_policy of this IotDpsPropertiesDescription.
        :type allocation_policy: str
        """
        allowed_values = ["Hashed", "GeoLatency", "Static"]  # noqa: E501
        if allocation_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `allocation_policy` ({0}), must be one of {1}"
                .format(allocation_policy, allowed_values)
            )

        self._allocation_policy = allocation_policy

    @property
    def authorization_policies(self):
        """Gets the authorization_policies of this IotDpsPropertiesDescription.

        List of authorization keys for a provisioning service.

        :return: The authorization_policies of this IotDpsPropertiesDescription.
        :rtype: List[SharedAccessSignatureAuthorizationRuleAccessRightsDescription]
        """
        return self._authorization_policies

    @authorization_policies.setter
    def authorization_policies(self, authorization_policies):
        """Sets the authorization_policies of this IotDpsPropertiesDescription.

        List of authorization keys for a provisioning service.

        :param authorization_policies: The authorization_policies of this IotDpsPropertiesDescription.
        :type authorization_policies: List[SharedAccessSignatureAuthorizationRuleAccessRightsDescription]
        """

        self._authorization_policies = authorization_policies

    @property
    def device_provisioning_host_name(self):
        """Gets the device_provisioning_host_name of this IotDpsPropertiesDescription.

        Device endpoint for this provisioning service.

        :return: The device_provisioning_host_name of this IotDpsPropertiesDescription.
        :rtype: str
        """
        return self._device_provisioning_host_name

    @device_provisioning_host_name.setter
    def device_provisioning_host_name(self, device_provisioning_host_name):
        """Sets the device_provisioning_host_name of this IotDpsPropertiesDescription.

        Device endpoint for this provisioning service.

        :param device_provisioning_host_name: The device_provisioning_host_name of this IotDpsPropertiesDescription.
        :type device_provisioning_host_name: str
        """

        self._device_provisioning_host_name = device_provisioning_host_name

    @property
    def id_scope(self):
        """Gets the id_scope of this IotDpsPropertiesDescription.

        Unique identifier of this provisioning service.

        :return: The id_scope of this IotDpsPropertiesDescription.
        :rtype: str
        """
        return self._id_scope

    @id_scope.setter
    def id_scope(self, id_scope):
        """Sets the id_scope of this IotDpsPropertiesDescription.

        Unique identifier of this provisioning service.

        :param id_scope: The id_scope of this IotDpsPropertiesDescription.
        :type id_scope: str
        """

        self._id_scope = id_scope

    @property
    def iot_hubs(self):
        """Gets the iot_hubs of this IotDpsPropertiesDescription.

        List of IoT hubs associated with this provisioning service.

        :return: The iot_hubs of this IotDpsPropertiesDescription.
        :rtype: List[IotHubDefinitionDescription]
        """
        return self._iot_hubs

    @iot_hubs.setter
    def iot_hubs(self, iot_hubs):
        """Sets the iot_hubs of this IotDpsPropertiesDescription.

        List of IoT hubs associated with this provisioning service.

        :param iot_hubs: The iot_hubs of this IotDpsPropertiesDescription.
        :type iot_hubs: List[IotHubDefinitionDescription]
        """

        self._iot_hubs = iot_hubs

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this IotDpsPropertiesDescription.

        The ARM provisioning state of the provisioning service.

        :return: The provisioning_state of this IotDpsPropertiesDescription.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this IotDpsPropertiesDescription.

        The ARM provisioning state of the provisioning service.

        :param provisioning_state: The provisioning_state of this IotDpsPropertiesDescription.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def service_operations_host_name(self):
        """Gets the service_operations_host_name of this IotDpsPropertiesDescription.

        Service endpoint for provisioning service.

        :return: The service_operations_host_name of this IotDpsPropertiesDescription.
        :rtype: str
        """
        return self._service_operations_host_name

    @service_operations_host_name.setter
    def service_operations_host_name(self, service_operations_host_name):
        """Sets the service_operations_host_name of this IotDpsPropertiesDescription.

        Service endpoint for provisioning service.

        :param service_operations_host_name: The service_operations_host_name of this IotDpsPropertiesDescription.
        :type service_operations_host_name: str
        """

        self._service_operations_host_name = service_operations_host_name

    @property
    def state(self):
        """Gets the state of this IotDpsPropertiesDescription.

        Current state of the provisioning service.

        :return: The state of this IotDpsPropertiesDescription.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this IotDpsPropertiesDescription.

        Current state of the provisioning service.

        :param state: The state of this IotDpsPropertiesDescription.
        :type state: str
        """
        allowed_values = ["Activating", "Active", "Deleting", "Deleted", "ActivationFailed", "DeletionFailed", "Transitioning", "Suspending", "Suspended", "Resuming", "FailingOver", "FailoverFailed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
