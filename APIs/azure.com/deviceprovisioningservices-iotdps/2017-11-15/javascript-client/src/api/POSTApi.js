/**
 * iotDpsClient
 * API for using the Azure IoT Hub Device Provisioning Service features.
 *
 * The version of the OpenAPI document: 2017-11-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CertificateResponse from '../model/CertificateResponse';
import ErrorDetails from '../model/ErrorDetails';
import NameAvailabilityInfo from '../model/NameAvailabilityInfo';
import OperationInputs from '../model/OperationInputs';
import SharedAccessSignatureAuthorizationRuleAccessRightsDescription from '../model/SharedAccessSignatureAuthorizationRuleAccessRightsDescription';
import SharedAccessSignatureAuthorizationRuleListResult from '../model/SharedAccessSignatureAuthorizationRuleListResult';
import VerificationCodeRequest from '../model/VerificationCodeRequest';
import VerificationCodeResponse from '../model/VerificationCodeResponse';

/**
* POST service.
* @module api/POSTApi
* @version 2017-11-15
*/
export default class POSTApi {

    /**
    * Constructs a new POSTApi. 
    * @alias module:api/POSTApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dpsCertificateGenerateVerificationCode operation.
     * @callback module:api/POSTApi~dpsCertificateGenerateVerificationCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerificationCodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate verification code for Proof of Possession.
     * @param {String} certificateName The mandatory logical name of the certificate, that the provisioning service uses to access.
     * @param {String} ifMatch ETag of the certificate. This is required to update an existing certificate, and ignored while creating a brand new certificate.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName name of resource group.
     * @param {String} provisioningServiceName Name of provisioning service.
     * @param {String} apiVersion The version of the API.
     * @param {Object} opts Optional parameters
     * @param {String} [certificateName2] Common Name for the certificate.
     * @param {Blob} [certificateRawBytes] Raw data of certificate.
     * @param {Boolean} [certificateIsVerified] Indicates if the certificate has been verified by owner of the private key.
     * @param {module:model/String} [certificatePurpose] Description mentioning the purpose of the certificate.
     * @param {Date} [certificateCreated] Certificate creation time.
     * @param {Date} [certificateLastUpdated] Certificate last updated time.
     * @param {Boolean} [certificateHasPrivateKey] Indicates if the certificate contains private key.
     * @param {String} [certificateNonce] Random number generated to indicate Proof of Possession.
     * @param {module:api/POSTApi~dpsCertificateGenerateVerificationCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerificationCodeResponse}
     */
    dpsCertificateGenerateVerificationCode(certificateName, ifMatch, subscriptionId, resourceGroupName, provisioningServiceName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'certificateName' is set
      if (certificateName === undefined || certificateName === null) {
        throw new Error("Missing the required parameter 'certificateName' when calling dpsCertificateGenerateVerificationCode");
      }
      // verify the required parameter 'ifMatch' is set
      if (ifMatch === undefined || ifMatch === null) {
        throw new Error("Missing the required parameter 'ifMatch' when calling dpsCertificateGenerateVerificationCode");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dpsCertificateGenerateVerificationCode");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dpsCertificateGenerateVerificationCode");
      }
      // verify the required parameter 'provisioningServiceName' is set
      if (provisioningServiceName === undefined || provisioningServiceName === null) {
        throw new Error("Missing the required parameter 'provisioningServiceName' when calling dpsCertificateGenerateVerificationCode");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dpsCertificateGenerateVerificationCode");
      }

      let pathParams = {
        'certificateName': certificateName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'provisioningServiceName': provisioningServiceName
      };
      let queryParams = {
        'certificate.name': opts['certificateName2'],
        'certificate.rawBytes': opts['certificateRawBytes'],
        'certificate.isVerified': opts['certificateIsVerified'],
        'certificate.purpose': opts['certificatePurpose'],
        'certificate.created': opts['certificateCreated'],
        'certificate.lastUpdated': opts['certificateLastUpdated'],
        'certificate.hasPrivateKey': opts['certificateHasPrivateKey'],
        'certificate.nonce': opts['certificateNonce'],
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': ifMatch
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VerificationCodeResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}/generateVerificationCode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dpsCertificateVerifyCertificate operation.
     * @callback module:api/POSTApi~dpsCertificateVerifyCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify certificate's private key possession.
     * Verifies the certificate's private key possession by providing the leaf cert issued by the verifying pre uploaded certificate.
     * @param {String} certificateName The mandatory logical name of the certificate, that the provisioning service uses to access.
     * @param {String} ifMatch ETag of the certificate.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} provisioningServiceName Provisioning service name.
     * @param {String} apiVersion The version of the API.
     * @param {module:model/VerificationCodeRequest} request The name of the certificate
     * @param {Object} opts Optional parameters
     * @param {String} [certificateName2] Common Name for the certificate.
     * @param {Blob} [certificateRawBytes] Raw data of certificate.
     * @param {Boolean} [certificateIsVerified] Indicates if the certificate has been verified by owner of the private key.
     * @param {module:model/String} [certificatePurpose] Describe the purpose of the certificate.
     * @param {Date} [certificateCreated] Certificate creation time.
     * @param {Date} [certificateLastUpdated] Certificate last updated time.
     * @param {Boolean} [certificateHasPrivateKey] Indicates if the certificate contains private key.
     * @param {String} [certificateNonce] Random number generated to indicate Proof of Possession.
     * @param {module:api/POSTApi~dpsCertificateVerifyCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateResponse}
     */
    dpsCertificateVerifyCertificate(certificateName, ifMatch, subscriptionId, resourceGroupName, provisioningServiceName, apiVersion, request, opts, callback) {
      opts = opts || {};
      let postBody = request;
      // verify the required parameter 'certificateName' is set
      if (certificateName === undefined || certificateName === null) {
        throw new Error("Missing the required parameter 'certificateName' when calling dpsCertificateVerifyCertificate");
      }
      // verify the required parameter 'ifMatch' is set
      if (ifMatch === undefined || ifMatch === null) {
        throw new Error("Missing the required parameter 'ifMatch' when calling dpsCertificateVerifyCertificate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dpsCertificateVerifyCertificate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dpsCertificateVerifyCertificate");
      }
      // verify the required parameter 'provisioningServiceName' is set
      if (provisioningServiceName === undefined || provisioningServiceName === null) {
        throw new Error("Missing the required parameter 'provisioningServiceName' when calling dpsCertificateVerifyCertificate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dpsCertificateVerifyCertificate");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling dpsCertificateVerifyCertificate");
      }

      let pathParams = {
        'certificateName': certificateName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'provisioningServiceName': provisioningServiceName
      };
      let queryParams = {
        'certificate.name': opts['certificateName2'],
        'certificate.rawBytes': opts['certificateRawBytes'],
        'certificate.isVerified': opts['certificateIsVerified'],
        'certificate.purpose': opts['certificatePurpose'],
        'certificate.created': opts['certificateCreated'],
        'certificate.lastUpdated': opts['certificateLastUpdated'],
        'certificate.hasPrivateKey': opts['certificateHasPrivateKey'],
        'certificate.nonce': opts['certificateNonce'],
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': ifMatch
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CertificateResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}/verify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iotDpsResourceCheckProvisioningServiceNameAvailability operation.
     * @callback module:api/POSTApi~iotDpsResourceCheckProvisioningServiceNameAvailabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NameAvailabilityInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if a provisioning service name is available.
     * Check if a provisioning service name is available. This will validate if the name is syntactically valid and if the name is usable
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} apiVersion The version of the API.
     * @param {module:model/OperationInputs} _arguments Set the name parameter in the OperationInputs structure to the name of the provisioning service to check.
     * @param {module:api/POSTApi~iotDpsResourceCheckProvisioningServiceNameAvailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NameAvailabilityInfo}
     */
    iotDpsResourceCheckProvisioningServiceNameAvailability(subscriptionId, apiVersion, _arguments, callback) {
      let postBody = _arguments;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iotDpsResourceCheckProvisioningServiceNameAvailability");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iotDpsResourceCheckProvisioningServiceNameAvailability");
      }
      // verify the required parameter '_arguments' is set
      if (_arguments === undefined || _arguments === null) {
        throw new Error("Missing the required parameter '_arguments' when calling iotDpsResourceCheckProvisioningServiceNameAvailability");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NameAvailabilityInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Devices/checkProvisioningServiceNameAvailability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iotDpsResourceListKeys operation.
     * @callback module:api/POSTApi~iotDpsResourceListKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SharedAccessSignatureAuthorizationRuleListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the security metadata for a provisioning service.
     * List the primary and secondary keys for a provisioning service.
     * @param {String} provisioningServiceName The provisioning service name to get the shared access keys for.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName resource group name
     * @param {String} apiVersion The version of the API.
     * @param {module:api/POSTApi~iotDpsResourceListKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SharedAccessSignatureAuthorizationRuleListResult}
     */
    iotDpsResourceListKeys(provisioningServiceName, subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'provisioningServiceName' is set
      if (provisioningServiceName === undefined || provisioningServiceName === null) {
        throw new Error("Missing the required parameter 'provisioningServiceName' when calling iotDpsResourceListKeys");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iotDpsResourceListKeys");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling iotDpsResourceListKeys");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iotDpsResourceListKeys");
      }

      let pathParams = {
        'provisioningServiceName': provisioningServiceName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SharedAccessSignatureAuthorizationRuleListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/listkeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iotDpsResourceListKeysForKeyName operation.
     * @callback module:api/POSTApi~iotDpsResourceListKeysForKeyNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SharedAccessSignatureAuthorizationRuleAccessRightsDescription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a shared access policy by name from a provisioning service.
     * List primary and secondary keys for a specific key name
     * @param {String} provisioningServiceName Name of the provisioning service.
     * @param {String} keyName Logical key name to get key-values for.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The name of the resource group that contains the provisioning service.
     * @param {String} apiVersion The version of the API.
     * @param {module:api/POSTApi~iotDpsResourceListKeysForKeyNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SharedAccessSignatureAuthorizationRuleAccessRightsDescription}
     */
    iotDpsResourceListKeysForKeyName(provisioningServiceName, keyName, subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'provisioningServiceName' is set
      if (provisioningServiceName === undefined || provisioningServiceName === null) {
        throw new Error("Missing the required parameter 'provisioningServiceName' when calling iotDpsResourceListKeysForKeyName");
      }
      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling iotDpsResourceListKeysForKeyName");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iotDpsResourceListKeysForKeyName");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling iotDpsResourceListKeysForKeyName");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iotDpsResourceListKeysForKeyName");
      }

      let pathParams = {
        'provisioningServiceName': provisioningServiceName,
        'keyName': keyName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SharedAccessSignatureAuthorizationRuleAccessRightsDescription;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/keys/{keyName}/listkeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
