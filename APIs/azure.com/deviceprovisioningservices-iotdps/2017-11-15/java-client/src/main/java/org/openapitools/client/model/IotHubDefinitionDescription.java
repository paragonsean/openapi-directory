/*
 * iotDpsClient
 * API for using the Azure IoT Hub Device Provisioning Service features.
 *
 * The version of the OpenAPI document: 2017-11-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Description of the IoT hub.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:29.767769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IotHubDefinitionDescription {
  public static final String SERIALIZED_NAME_ALLOCATION_WEIGHT = "allocationWeight";
  @SerializedName(SERIALIZED_NAME_ALLOCATION_WEIGHT)
  private Integer allocationWeight;

  public static final String SERIALIZED_NAME_APPLY_ALLOCATION_POLICY = "applyAllocationPolicy";
  @SerializedName(SERIALIZED_NAME_APPLY_ALLOCATION_POLICY)
  private Boolean applyAllocationPolicy;

  public static final String SERIALIZED_NAME_CONNECTION_STRING = "connectionString";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STRING)
  private String connectionString;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public IotHubDefinitionDescription() {
  }

  public IotHubDefinitionDescription(
     String name
  ) {
    this();
    this.name = name;
  }

  public IotHubDefinitionDescription allocationWeight(Integer allocationWeight) {
    this.allocationWeight = allocationWeight;
    return this;
  }

  /**
   * Weight to apply for a given IoT hub.
   * @return allocationWeight
   */
  @javax.annotation.Nullable
  public Integer getAllocationWeight() {
    return allocationWeight;
  }

  public void setAllocationWeight(Integer allocationWeight) {
    this.allocationWeight = allocationWeight;
  }


  public IotHubDefinitionDescription applyAllocationPolicy(Boolean applyAllocationPolicy) {
    this.applyAllocationPolicy = applyAllocationPolicy;
    return this;
  }

  /**
   * Flag for applying allocationPolicy or not for a given IoT hub.
   * @return applyAllocationPolicy
   */
  @javax.annotation.Nullable
  public Boolean getApplyAllocationPolicy() {
    return applyAllocationPolicy;
  }

  public void setApplyAllocationPolicy(Boolean applyAllocationPolicy) {
    this.applyAllocationPolicy = applyAllocationPolicy;
  }


  public IotHubDefinitionDescription connectionString(String connectionString) {
    this.connectionString = connectionString;
    return this;
  }

  /**
   * Connection string of the IoT hub.
   * @return connectionString
   */
  @javax.annotation.Nonnull
  public String getConnectionString() {
    return connectionString;
  }

  public void setConnectionString(String connectionString) {
    this.connectionString = connectionString;
  }


  public IotHubDefinitionDescription location(String location) {
    this.location = location;
    return this;
  }

  /**
   * ARM region of the IoT hub.
   * @return location
   */
  @javax.annotation.Nonnull
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  /**
   * Host name of the IoT hub.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IotHubDefinitionDescription iotHubDefinitionDescription = (IotHubDefinitionDescription) o;
    return Objects.equals(this.allocationWeight, iotHubDefinitionDescription.allocationWeight) &&
        Objects.equals(this.applyAllocationPolicy, iotHubDefinitionDescription.applyAllocationPolicy) &&
        Objects.equals(this.connectionString, iotHubDefinitionDescription.connectionString) &&
        Objects.equals(this.location, iotHubDefinitionDescription.location) &&
        Objects.equals(this.name, iotHubDefinitionDescription.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allocationWeight, applyAllocationPolicy, connectionString, location, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IotHubDefinitionDescription {\n");
    sb.append("    allocationWeight: ").append(toIndentedString(allocationWeight)).append("\n");
    sb.append("    applyAllocationPolicy: ").append(toIndentedString(applyAllocationPolicy)).append("\n");
    sb.append("    connectionString: ").append(toIndentedString(connectionString)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allocationWeight");
    openapiFields.add("applyAllocationPolicy");
    openapiFields.add("connectionString");
    openapiFields.add("location");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("connectionString");
    openapiRequiredFields.add("location");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IotHubDefinitionDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IotHubDefinitionDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IotHubDefinitionDescription is not found in the empty JSON string", IotHubDefinitionDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IotHubDefinitionDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IotHubDefinitionDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IotHubDefinitionDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("connectionString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionString").toString()));
      }
      if (!jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IotHubDefinitionDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IotHubDefinitionDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IotHubDefinitionDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IotHubDefinitionDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<IotHubDefinitionDescription>() {
           @Override
           public void write(JsonWriter out, IotHubDefinitionDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IotHubDefinitionDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IotHubDefinitionDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IotHubDefinitionDescription
   * @throws IOException if the JSON string is invalid with respect to IotHubDefinitionDescription
   */
  public static IotHubDefinitionDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IotHubDefinitionDescription.class);
  }

  /**
   * Convert an instance of IotHubDefinitionDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

