# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IotHubDefinitionDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allocation_weight: int=None, apply_allocation_policy: bool=None, connection_string: str=None, location: str=None, name: str=None):
        """IotHubDefinitionDescription - a model defined in OpenAPI

        :param allocation_weight: The allocation_weight of this IotHubDefinitionDescription.
        :param apply_allocation_policy: The apply_allocation_policy of this IotHubDefinitionDescription.
        :param connection_string: The connection_string of this IotHubDefinitionDescription.
        :param location: The location of this IotHubDefinitionDescription.
        :param name: The name of this IotHubDefinitionDescription.
        """
        self.openapi_types = {
            'allocation_weight': int,
            'apply_allocation_policy': bool,
            'connection_string': str,
            'location': str,
            'name': str
        }

        self.attribute_map = {
            'allocation_weight': 'allocationWeight',
            'apply_allocation_policy': 'applyAllocationPolicy',
            'connection_string': 'connectionString',
            'location': 'location',
            'name': 'name'
        }

        self._allocation_weight = allocation_weight
        self._apply_allocation_policy = apply_allocation_policy
        self._connection_string = connection_string
        self._location = location
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IotHubDefinitionDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IotHubDefinitionDescription of this IotHubDefinitionDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allocation_weight(self):
        """Gets the allocation_weight of this IotHubDefinitionDescription.

        Weight to apply for a given IoT hub.

        :return: The allocation_weight of this IotHubDefinitionDescription.
        :rtype: int
        """
        return self._allocation_weight

    @allocation_weight.setter
    def allocation_weight(self, allocation_weight):
        """Sets the allocation_weight of this IotHubDefinitionDescription.

        Weight to apply for a given IoT hub.

        :param allocation_weight: The allocation_weight of this IotHubDefinitionDescription.
        :type allocation_weight: int
        """

        self._allocation_weight = allocation_weight

    @property
    def apply_allocation_policy(self):
        """Gets the apply_allocation_policy of this IotHubDefinitionDescription.

        Flag for applying allocationPolicy or not for a given IoT hub.

        :return: The apply_allocation_policy of this IotHubDefinitionDescription.
        :rtype: bool
        """
        return self._apply_allocation_policy

    @apply_allocation_policy.setter
    def apply_allocation_policy(self, apply_allocation_policy):
        """Sets the apply_allocation_policy of this IotHubDefinitionDescription.

        Flag for applying allocationPolicy or not for a given IoT hub.

        :param apply_allocation_policy: The apply_allocation_policy of this IotHubDefinitionDescription.
        :type apply_allocation_policy: bool
        """

        self._apply_allocation_policy = apply_allocation_policy

    @property
    def connection_string(self):
        """Gets the connection_string of this IotHubDefinitionDescription.

        Connection string of the IoT hub.

        :return: The connection_string of this IotHubDefinitionDescription.
        :rtype: str
        """
        return self._connection_string

    @connection_string.setter
    def connection_string(self, connection_string):
        """Sets the connection_string of this IotHubDefinitionDescription.

        Connection string of the IoT hub.

        :param connection_string: The connection_string of this IotHubDefinitionDescription.
        :type connection_string: str
        """
        if connection_string is None:
            raise ValueError("Invalid value for `connection_string`, must not be `None`")

        self._connection_string = connection_string

    @property
    def location(self):
        """Gets the location of this IotHubDefinitionDescription.

        ARM region of the IoT hub.

        :return: The location of this IotHubDefinitionDescription.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this IotHubDefinitionDescription.

        ARM region of the IoT hub.

        :param location: The location of this IotHubDefinitionDescription.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def name(self):
        """Gets the name of this IotHubDefinitionDescription.

        Host name of the IoT hub.

        :return: The name of this IotHubDefinitionDescription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IotHubDefinitionDescription.

        Host name of the IoT hub.

        :param name: The name of this IotHubDefinitionDescription.
        :type name: str
        """

        self._name = name
