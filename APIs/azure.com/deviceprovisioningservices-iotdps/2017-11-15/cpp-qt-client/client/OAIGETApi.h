/**
 * iotDpsClient
 * API for using the Azure IoT Hub Device Provisioning Service features.
 *
 * The version of the OpenAPI document: 2017-11-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGETApi_H
#define OAI_OAIGETApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAsyncOperationResult.h"
#include "OAICertificateListDescription.h"
#include "OAICertificateResponse.h"
#include "OAIErrorDetails.h"
#include "OAIIotDpsSkuDefinitionListResult.h"
#include "OAIProvisioningServiceDescription.h"
#include "OAIProvisioningServiceDescriptionListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGETApi : public QObject {
    Q_OBJECT

public:
    OAIGETApi(const int timeOut = 0);
    ~OAIGETApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  certificate_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  provisioning_service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void dpsCertificateGet(const QString &certificate_name, const QString &subscription_id, const QString &resource_group_name, const QString &provisioning_service_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  provisioning_service_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void dpsCertificateList(const QString &subscription_id, const QString &resource_group_name, const QString &provisioning_service_name, const QString &api_version);

    /**
    * @param[in]  provisioning_service_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void iotDpsResourceGet(const QString &provisioning_service_name, const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  operation_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  provisioning_service_name QString [required]
    * @param[in]  asyncinfo QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void iotDpsResourceGetOperationResult(const QString &operation_id, const QString &subscription_id, const QString &resource_group_name, const QString &provisioning_service_name, const QString &asyncinfo, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void iotDpsResourceListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void iotDpsResourceListBySubscription(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  provisioning_service_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void iotDpsResourceListValidSkus(const QString &provisioning_service_name, const QString &subscription_id, const QString &resource_group_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dpsCertificateGetCallback(OAIHttpRequestWorker *worker);
    void dpsCertificateListCallback(OAIHttpRequestWorker *worker);
    void iotDpsResourceGetCallback(OAIHttpRequestWorker *worker);
    void iotDpsResourceGetOperationResultCallback(OAIHttpRequestWorker *worker);
    void iotDpsResourceListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void iotDpsResourceListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void iotDpsResourceListValidSkusCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dpsCertificateGetSignal(OAICertificateResponse summary);
    void dpsCertificateListSignal(OAICertificateListDescription summary);
    void iotDpsResourceGetSignal(OAIProvisioningServiceDescription summary);
    void iotDpsResourceGetOperationResultSignal(OAIAsyncOperationResult summary);
    void iotDpsResourceListByResourceGroupSignal(OAIProvisioningServiceDescriptionListResult summary);
    void iotDpsResourceListBySubscriptionSignal(OAIProvisioningServiceDescriptionListResult summary);
    void iotDpsResourceListValidSkusSignal(OAIIotDpsSkuDefinitionListResult summary);


    void dpsCertificateGetSignalFull(OAIHttpRequestWorker *worker, OAICertificateResponse summary);
    void dpsCertificateListSignalFull(OAIHttpRequestWorker *worker, OAICertificateListDescription summary);
    void iotDpsResourceGetSignalFull(OAIHttpRequestWorker *worker, OAIProvisioningServiceDescription summary);
    void iotDpsResourceGetOperationResultSignalFull(OAIHttpRequestWorker *worker, OAIAsyncOperationResult summary);
    void iotDpsResourceListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIProvisioningServiceDescriptionListResult summary);
    void iotDpsResourceListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIProvisioningServiceDescriptionListResult summary);
    void iotDpsResourceListValidSkusSignalFull(OAIHttpRequestWorker *worker, OAIIotDpsSkuDefinitionListResult summary);

    Q_DECL_DEPRECATED_X("Use dpsCertificateGetSignalError() instead")
    void dpsCertificateGetSignalE(OAICertificateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dpsCertificateGetSignalError(OAICertificateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dpsCertificateListSignalError() instead")
    void dpsCertificateListSignalE(OAICertificateListDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dpsCertificateListSignalError(OAICertificateListDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotDpsResourceGetSignalError() instead")
    void iotDpsResourceGetSignalE(OAIProvisioningServiceDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iotDpsResourceGetSignalError(OAIProvisioningServiceDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotDpsResourceGetOperationResultSignalError() instead")
    void iotDpsResourceGetOperationResultSignalE(OAIAsyncOperationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iotDpsResourceGetOperationResultSignalError(OAIAsyncOperationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotDpsResourceListByResourceGroupSignalError() instead")
    void iotDpsResourceListByResourceGroupSignalE(OAIProvisioningServiceDescriptionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iotDpsResourceListByResourceGroupSignalError(OAIProvisioningServiceDescriptionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotDpsResourceListBySubscriptionSignalError() instead")
    void iotDpsResourceListBySubscriptionSignalE(OAIProvisioningServiceDescriptionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iotDpsResourceListBySubscriptionSignalError(OAIProvisioningServiceDescriptionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotDpsResourceListValidSkusSignalError() instead")
    void iotDpsResourceListValidSkusSignalE(OAIIotDpsSkuDefinitionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iotDpsResourceListValidSkusSignalError(OAIIotDpsSkuDefinitionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dpsCertificateGetSignalErrorFull() instead")
    void dpsCertificateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dpsCertificateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dpsCertificateListSignalErrorFull() instead")
    void dpsCertificateListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dpsCertificateListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotDpsResourceGetSignalErrorFull() instead")
    void iotDpsResourceGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iotDpsResourceGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotDpsResourceGetOperationResultSignalErrorFull() instead")
    void iotDpsResourceGetOperationResultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iotDpsResourceGetOperationResultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotDpsResourceListByResourceGroupSignalErrorFull() instead")
    void iotDpsResourceListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iotDpsResourceListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotDpsResourceListBySubscriptionSignalErrorFull() instead")
    void iotDpsResourceListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iotDpsResourceListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotDpsResourceListValidSkusSignalErrorFull() instead")
    void iotDpsResourceListValidSkusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iotDpsResourceListValidSkusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
