/**
 * iotDpsClient
 * API for using the Azure IoT Hub Device Provisioning Service features.
 *
 * The version of the OpenAPI document: 2017-08-21-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPOSTApi_H
#define OAI_OAIPOSTApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICertificateResponse.h"
#include "OAIErrorDetails.h"
#include "OAINameAvailabilityInfo.h"
#include "OAIOperationInputs.h"
#include "OAISharedAccessSignatureAuthorizationRuleListResult.h"
#include "OAISharedAccessSignatureAuthorizationRule_AccessRightsDescription.h"
#include "OAIVerificationCodeRequest.h"
#include "OAIVerificationCodeResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPOSTApi : public QObject {
    Q_OBJECT

public:
    OAIPOSTApi(const int timeOut = 0);
    ~OAIPOSTApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  certificate_name QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  provisioning_service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  certificate_name2 QString [optional]
    * @param[in]  certificate_raw_bytes QByteArray [optional]
    * @param[in]  certificate_is_verified bool [optional]
    * @param[in]  certificate_purpose QString [optional]
    * @param[in]  certificate_created QDateTime [optional]
    * @param[in]  certificate_last_updated QDateTime [optional]
    * @param[in]  certificate_has_private_key bool [optional]
    * @param[in]  certificate_nonce QString [optional]
    */
    virtual void dpsCertificateGenerateVerificationCode(const QString &certificate_name, const QString &if_match, const QString &subscription_id, const QString &resource_group_name, const QString &provisioning_service_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &certificate_name2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QByteArray> &certificate_raw_bytes = ::OpenAPI::OptionalParam<QByteArray>(), const ::OpenAPI::OptionalParam<bool> &certificate_is_verified = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &certificate_purpose = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &certificate_created = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &certificate_last_updated = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &certificate_has_private_key = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &certificate_nonce = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  certificate_name QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  provisioning_service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAIVerificationCodeRequest [required]
    * @param[in]  certificate_name2 QString [optional]
    * @param[in]  certificate_raw_bytes QByteArray [optional]
    * @param[in]  certificate_is_verified bool [optional]
    * @param[in]  certificate_purpose QString [optional]
    * @param[in]  certificate_created QDateTime [optional]
    * @param[in]  certificate_last_updated QDateTime [optional]
    * @param[in]  certificate_has_private_key bool [optional]
    * @param[in]  certificate_nonce QString [optional]
    */
    virtual void dpsCertificateVerifyCertificate(const QString &certificate_name, const QString &if_match, const QString &subscription_id, const QString &resource_group_name, const QString &provisioning_service_name, const QString &api_version, const OAIVerificationCodeRequest &request, const ::OpenAPI::OptionalParam<QString> &certificate_name2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QByteArray> &certificate_raw_bytes = ::OpenAPI::OptionalParam<QByteArray>(), const ::OpenAPI::OptionalParam<bool> &certificate_is_verified = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &certificate_purpose = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &certificate_created = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &certificate_last_updated = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &certificate_has_private_key = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &certificate_nonce = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  arguments OAIOperationInputs [required]
    */
    virtual void iotDpsResourceCheckNameAvailability(const QString &subscription_id, const QString &api_version, const OAIOperationInputs &arguments);

    /**
    * @param[in]  provisioning_service_name QString [required]
    * @param[in]  key_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void iotDpsResourceGetKeysForKeyName(const QString &provisioning_service_name, const QString &key_name, const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  provisioning_service_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void iotDpsResourceListKeys(const QString &provisioning_service_name, const QString &subscription_id, const QString &resource_group_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dpsCertificateGenerateVerificationCodeCallback(OAIHttpRequestWorker *worker);
    void dpsCertificateVerifyCertificateCallback(OAIHttpRequestWorker *worker);
    void iotDpsResourceCheckNameAvailabilityCallback(OAIHttpRequestWorker *worker);
    void iotDpsResourceGetKeysForKeyNameCallback(OAIHttpRequestWorker *worker);
    void iotDpsResourceListKeysCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dpsCertificateGenerateVerificationCodeSignal(OAIVerificationCodeResponse summary);
    void dpsCertificateVerifyCertificateSignal(OAICertificateResponse summary);
    void iotDpsResourceCheckNameAvailabilitySignal(OAINameAvailabilityInfo summary);
    void iotDpsResourceGetKeysForKeyNameSignal(OAISharedAccessSignatureAuthorizationRule_AccessRightsDescription summary);
    void iotDpsResourceListKeysSignal(OAISharedAccessSignatureAuthorizationRuleListResult summary);


    void dpsCertificateGenerateVerificationCodeSignalFull(OAIHttpRequestWorker *worker, OAIVerificationCodeResponse summary);
    void dpsCertificateVerifyCertificateSignalFull(OAIHttpRequestWorker *worker, OAICertificateResponse summary);
    void iotDpsResourceCheckNameAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAINameAvailabilityInfo summary);
    void iotDpsResourceGetKeysForKeyNameSignalFull(OAIHttpRequestWorker *worker, OAISharedAccessSignatureAuthorizationRule_AccessRightsDescription summary);
    void iotDpsResourceListKeysSignalFull(OAIHttpRequestWorker *worker, OAISharedAccessSignatureAuthorizationRuleListResult summary);

    Q_DECL_DEPRECATED_X("Use dpsCertificateGenerateVerificationCodeSignalError() instead")
    void dpsCertificateGenerateVerificationCodeSignalE(OAIVerificationCodeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dpsCertificateGenerateVerificationCodeSignalError(OAIVerificationCodeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dpsCertificateVerifyCertificateSignalError() instead")
    void dpsCertificateVerifyCertificateSignalE(OAICertificateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dpsCertificateVerifyCertificateSignalError(OAICertificateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotDpsResourceCheckNameAvailabilitySignalError() instead")
    void iotDpsResourceCheckNameAvailabilitySignalE(OAINameAvailabilityInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iotDpsResourceCheckNameAvailabilitySignalError(OAINameAvailabilityInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotDpsResourceGetKeysForKeyNameSignalError() instead")
    void iotDpsResourceGetKeysForKeyNameSignalE(OAISharedAccessSignatureAuthorizationRule_AccessRightsDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iotDpsResourceGetKeysForKeyNameSignalError(OAISharedAccessSignatureAuthorizationRule_AccessRightsDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotDpsResourceListKeysSignalError() instead")
    void iotDpsResourceListKeysSignalE(OAISharedAccessSignatureAuthorizationRuleListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iotDpsResourceListKeysSignalError(OAISharedAccessSignatureAuthorizationRuleListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dpsCertificateGenerateVerificationCodeSignalErrorFull() instead")
    void dpsCertificateGenerateVerificationCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dpsCertificateGenerateVerificationCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dpsCertificateVerifyCertificateSignalErrorFull() instead")
    void dpsCertificateVerifyCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dpsCertificateVerifyCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotDpsResourceCheckNameAvailabilitySignalErrorFull() instead")
    void iotDpsResourceCheckNameAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iotDpsResourceCheckNameAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotDpsResourceGetKeysForKeyNameSignalErrorFull() instead")
    void iotDpsResourceGetKeysForKeyNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iotDpsResourceGetKeysForKeyNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotDpsResourceListKeysSignalErrorFull() instead")
    void iotDpsResourceListKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iotDpsResourceListKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
