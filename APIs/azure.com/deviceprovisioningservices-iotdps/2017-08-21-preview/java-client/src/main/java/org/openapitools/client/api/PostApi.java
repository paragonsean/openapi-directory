/*
 * iotDpsClient
 * API for using the Azure IoT Hub Device Provisioning Service features.
 *
 * The version of the OpenAPI document: 2017-08-21-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CertificateResponse;
import org.openapitools.client.model.ErrorDetails;
import org.openapitools.client.model.NameAvailabilityInfo;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OperationInputs;
import org.openapitools.client.model.SharedAccessSignatureAuthorizationRuleAccessRightsDescription;
import org.openapitools.client.model.SharedAccessSignatureAuthorizationRuleListResult;
import org.openapitools.client.model.VerificationCodeRequest;
import org.openapitools.client.model.VerificationCodeResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PostApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PostApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PostApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dpsCertificateGenerateVerificationCode
     * @param certificateName The mandatory logical name of the certificate, that the provisioning service uses to access. (required)
     * @param ifMatch ETag of the certificate. This is required to update an existing certificate, and ignored while creating a brand new certificate. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName name of resource group. (required)
     * @param provisioningServiceName Name of provisioning service. (required)
     * @param apiVersion The version of the API. (required)
     * @param certificateName2 Common Name for the certificate. (optional)
     * @param certificateRawBytes Raw data of certificate. (optional)
     * @param certificateIsVerified Indicates if the certificate has been verified by owner of the private key. (optional)
     * @param certificatePurpose Description mentioning the purpose of the certificate. (optional)
     * @param certificateCreated Certificate creation time. (optional)
     * @param certificateLastUpdated Certificate last updated time. (optional)
     * @param certificateHasPrivateKey Indicates if the certificate contains private key. (optional)
     * @param certificateNonce Random number generated to indicate Proof of Possession. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated verification code for that certificate is returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dpsCertificateGenerateVerificationCodeCall(String certificateName, String ifMatch, String subscriptionId, String resourceGroupName, String provisioningServiceName, String apiVersion, String certificateName2, byte[] certificateRawBytes, Boolean certificateIsVerified, String certificatePurpose, OffsetDateTime certificateCreated, OffsetDateTime certificateLastUpdated, Boolean certificateHasPrivateKey, String certificateNonce, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}/generateVerificationCode"
            .replace("{" + "certificateName" + "}", localVarApiClient.escapeString(certificateName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "provisioningServiceName" + "}", localVarApiClient.escapeString(provisioningServiceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (certificateName2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate.name", certificateName2));
        }

        if (certificateRawBytes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate.rawBytes", certificateRawBytes));
        }

        if (certificateIsVerified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate.isVerified", certificateIsVerified));
        }

        if (certificatePurpose != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate.purpose", certificatePurpose));
        }

        if (certificateCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate.created", certificateCreated));
        }

        if (certificateLastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate.lastUpdated", certificateLastUpdated));
        }

        if (certificateHasPrivateKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate.hasPrivateKey", certificateHasPrivateKey));
        }

        if (certificateNonce != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate.nonce", certificateNonce));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dpsCertificateGenerateVerificationCodeValidateBeforeCall(String certificateName, String ifMatch, String subscriptionId, String resourceGroupName, String provisioningServiceName, String apiVersion, String certificateName2, byte[] certificateRawBytes, Boolean certificateIsVerified, String certificatePurpose, OffsetDateTime certificateCreated, OffsetDateTime certificateLastUpdated, Boolean certificateHasPrivateKey, String certificateNonce, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'certificateName' is set
        if (certificateName == null) {
            throw new ApiException("Missing the required parameter 'certificateName' when calling dpsCertificateGenerateVerificationCode(Async)");
        }

        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling dpsCertificateGenerateVerificationCode(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dpsCertificateGenerateVerificationCode(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dpsCertificateGenerateVerificationCode(Async)");
        }

        // verify the required parameter 'provisioningServiceName' is set
        if (provisioningServiceName == null) {
            throw new ApiException("Missing the required parameter 'provisioningServiceName' when calling dpsCertificateGenerateVerificationCode(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dpsCertificateGenerateVerificationCode(Async)");
        }

        return dpsCertificateGenerateVerificationCodeCall(certificateName, ifMatch, subscriptionId, resourceGroupName, provisioningServiceName, apiVersion, certificateName2, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce, _callback);

    }

    /**
     * 
     * Generate verification code for Proof of Possession.
     * @param certificateName The mandatory logical name of the certificate, that the provisioning service uses to access. (required)
     * @param ifMatch ETag of the certificate. This is required to update an existing certificate, and ignored while creating a brand new certificate. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName name of resource group. (required)
     * @param provisioningServiceName Name of provisioning service. (required)
     * @param apiVersion The version of the API. (required)
     * @param certificateName2 Common Name for the certificate. (optional)
     * @param certificateRawBytes Raw data of certificate. (optional)
     * @param certificateIsVerified Indicates if the certificate has been verified by owner of the private key. (optional)
     * @param certificatePurpose Description mentioning the purpose of the certificate. (optional)
     * @param certificateCreated Certificate creation time. (optional)
     * @param certificateLastUpdated Certificate last updated time. (optional)
     * @param certificateHasPrivateKey Indicates if the certificate contains private key. (optional)
     * @param certificateNonce Random number generated to indicate Proof of Possession. (optional)
     * @return VerificationCodeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated verification code for that certificate is returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public VerificationCodeResponse dpsCertificateGenerateVerificationCode(String certificateName, String ifMatch, String subscriptionId, String resourceGroupName, String provisioningServiceName, String apiVersion, String certificateName2, byte[] certificateRawBytes, Boolean certificateIsVerified, String certificatePurpose, OffsetDateTime certificateCreated, OffsetDateTime certificateLastUpdated, Boolean certificateHasPrivateKey, String certificateNonce) throws ApiException {
        ApiResponse<VerificationCodeResponse> localVarResp = dpsCertificateGenerateVerificationCodeWithHttpInfo(certificateName, ifMatch, subscriptionId, resourceGroupName, provisioningServiceName, apiVersion, certificateName2, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce);
        return localVarResp.getData();
    }

    /**
     * 
     * Generate verification code for Proof of Possession.
     * @param certificateName The mandatory logical name of the certificate, that the provisioning service uses to access. (required)
     * @param ifMatch ETag of the certificate. This is required to update an existing certificate, and ignored while creating a brand new certificate. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName name of resource group. (required)
     * @param provisioningServiceName Name of provisioning service. (required)
     * @param apiVersion The version of the API. (required)
     * @param certificateName2 Common Name for the certificate. (optional)
     * @param certificateRawBytes Raw data of certificate. (optional)
     * @param certificateIsVerified Indicates if the certificate has been verified by owner of the private key. (optional)
     * @param certificatePurpose Description mentioning the purpose of the certificate. (optional)
     * @param certificateCreated Certificate creation time. (optional)
     * @param certificateLastUpdated Certificate last updated time. (optional)
     * @param certificateHasPrivateKey Indicates if the certificate contains private key. (optional)
     * @param certificateNonce Random number generated to indicate Proof of Possession. (optional)
     * @return ApiResponse&lt;VerificationCodeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated verification code for that certificate is returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerificationCodeResponse> dpsCertificateGenerateVerificationCodeWithHttpInfo(String certificateName, String ifMatch, String subscriptionId, String resourceGroupName, String provisioningServiceName, String apiVersion, String certificateName2, byte[] certificateRawBytes, Boolean certificateIsVerified, String certificatePurpose, OffsetDateTime certificateCreated, OffsetDateTime certificateLastUpdated, Boolean certificateHasPrivateKey, String certificateNonce) throws ApiException {
        okhttp3.Call localVarCall = dpsCertificateGenerateVerificationCodeValidateBeforeCall(certificateName, ifMatch, subscriptionId, resourceGroupName, provisioningServiceName, apiVersion, certificateName2, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce, null);
        Type localVarReturnType = new TypeToken<VerificationCodeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Generate verification code for Proof of Possession.
     * @param certificateName The mandatory logical name of the certificate, that the provisioning service uses to access. (required)
     * @param ifMatch ETag of the certificate. This is required to update an existing certificate, and ignored while creating a brand new certificate. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName name of resource group. (required)
     * @param provisioningServiceName Name of provisioning service. (required)
     * @param apiVersion The version of the API. (required)
     * @param certificateName2 Common Name for the certificate. (optional)
     * @param certificateRawBytes Raw data of certificate. (optional)
     * @param certificateIsVerified Indicates if the certificate has been verified by owner of the private key. (optional)
     * @param certificatePurpose Description mentioning the purpose of the certificate. (optional)
     * @param certificateCreated Certificate creation time. (optional)
     * @param certificateLastUpdated Certificate last updated time. (optional)
     * @param certificateHasPrivateKey Indicates if the certificate contains private key. (optional)
     * @param certificateNonce Random number generated to indicate Proof of Possession. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated verification code for that certificate is returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dpsCertificateGenerateVerificationCodeAsync(String certificateName, String ifMatch, String subscriptionId, String resourceGroupName, String provisioningServiceName, String apiVersion, String certificateName2, byte[] certificateRawBytes, Boolean certificateIsVerified, String certificatePurpose, OffsetDateTime certificateCreated, OffsetDateTime certificateLastUpdated, Boolean certificateHasPrivateKey, String certificateNonce, final ApiCallback<VerificationCodeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dpsCertificateGenerateVerificationCodeValidateBeforeCall(certificateName, ifMatch, subscriptionId, resourceGroupName, provisioningServiceName, apiVersion, certificateName2, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce, _callback);
        Type localVarReturnType = new TypeToken<VerificationCodeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dpsCertificateVerifyCertificate
     * @param certificateName The mandatory logical name of the certificate, that the provisioning service uses to access. (required)
     * @param ifMatch ETag of the certificate. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param provisioningServiceName Provisioning service name. (required)
     * @param apiVersion The version of the API. (required)
     * @param request  (required)
     * @param certificateName2 Common Name for the certificate. (optional)
     * @param certificateRawBytes Raw data of certificate. (optional)
     * @param certificateIsVerified Indicates if the certificate has been verified by owner of the private key. (optional)
     * @param certificatePurpose Describe the purpose of the certificate. (optional)
     * @param certificateCreated Certificate creation time. (optional)
     * @param certificateLastUpdated Certificate last updated time. (optional)
     * @param certificateHasPrivateKey Indicates if the certificate contains private key. (optional)
     * @param certificateNonce Random number generated to indicate Proof of Possession. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dpsCertificateVerifyCertificateCall(String certificateName, String ifMatch, String subscriptionId, String resourceGroupName, String provisioningServiceName, String apiVersion, VerificationCodeRequest request, String certificateName2, byte[] certificateRawBytes, Boolean certificateIsVerified, String certificatePurpose, OffsetDateTime certificateCreated, OffsetDateTime certificateLastUpdated, Boolean certificateHasPrivateKey, String certificateNonce, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}/verify"
            .replace("{" + "certificateName" + "}", localVarApiClient.escapeString(certificateName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "provisioningServiceName" + "}", localVarApiClient.escapeString(provisioningServiceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (certificateName2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate.name", certificateName2));
        }

        if (certificateRawBytes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate.rawBytes", certificateRawBytes));
        }

        if (certificateIsVerified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate.isVerified", certificateIsVerified));
        }

        if (certificatePurpose != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate.purpose", certificatePurpose));
        }

        if (certificateCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate.created", certificateCreated));
        }

        if (certificateLastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate.lastUpdated", certificateLastUpdated));
        }

        if (certificateHasPrivateKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate.hasPrivateKey", certificateHasPrivateKey));
        }

        if (certificateNonce != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate.nonce", certificateNonce));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dpsCertificateVerifyCertificateValidateBeforeCall(String certificateName, String ifMatch, String subscriptionId, String resourceGroupName, String provisioningServiceName, String apiVersion, VerificationCodeRequest request, String certificateName2, byte[] certificateRawBytes, Boolean certificateIsVerified, String certificatePurpose, OffsetDateTime certificateCreated, OffsetDateTime certificateLastUpdated, Boolean certificateHasPrivateKey, String certificateNonce, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'certificateName' is set
        if (certificateName == null) {
            throw new ApiException("Missing the required parameter 'certificateName' when calling dpsCertificateVerifyCertificate(Async)");
        }

        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling dpsCertificateVerifyCertificate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dpsCertificateVerifyCertificate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dpsCertificateVerifyCertificate(Async)");
        }

        // verify the required parameter 'provisioningServiceName' is set
        if (provisioningServiceName == null) {
            throw new ApiException("Missing the required parameter 'provisioningServiceName' when calling dpsCertificateVerifyCertificate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dpsCertificateVerifyCertificate(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling dpsCertificateVerifyCertificate(Async)");
        }

        return dpsCertificateVerifyCertificateCall(certificateName, ifMatch, subscriptionId, resourceGroupName, provisioningServiceName, apiVersion, request, certificateName2, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce, _callback);

    }

    /**
     * 
     * Verifies certificate for the provisioning service.
     * @param certificateName The mandatory logical name of the certificate, that the provisioning service uses to access. (required)
     * @param ifMatch ETag of the certificate. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param provisioningServiceName Provisioning service name. (required)
     * @param apiVersion The version of the API. (required)
     * @param request  (required)
     * @param certificateName2 Common Name for the certificate. (optional)
     * @param certificateRawBytes Raw data of certificate. (optional)
     * @param certificateIsVerified Indicates if the certificate has been verified by owner of the private key. (optional)
     * @param certificatePurpose Describe the purpose of the certificate. (optional)
     * @param certificateCreated Certificate creation time. (optional)
     * @param certificateLastUpdated Certificate last updated time. (optional)
     * @param certificateHasPrivateKey Indicates if the certificate contains private key. (optional)
     * @param certificateNonce Random number generated to indicate Proof of Possession. (optional)
     * @return CertificateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public CertificateResponse dpsCertificateVerifyCertificate(String certificateName, String ifMatch, String subscriptionId, String resourceGroupName, String provisioningServiceName, String apiVersion, VerificationCodeRequest request, String certificateName2, byte[] certificateRawBytes, Boolean certificateIsVerified, String certificatePurpose, OffsetDateTime certificateCreated, OffsetDateTime certificateLastUpdated, Boolean certificateHasPrivateKey, String certificateNonce) throws ApiException {
        ApiResponse<CertificateResponse> localVarResp = dpsCertificateVerifyCertificateWithHttpInfo(certificateName, ifMatch, subscriptionId, resourceGroupName, provisioningServiceName, apiVersion, request, certificateName2, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce);
        return localVarResp.getData();
    }

    /**
     * 
     * Verifies certificate for the provisioning service.
     * @param certificateName The mandatory logical name of the certificate, that the provisioning service uses to access. (required)
     * @param ifMatch ETag of the certificate. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param provisioningServiceName Provisioning service name. (required)
     * @param apiVersion The version of the API. (required)
     * @param request  (required)
     * @param certificateName2 Common Name for the certificate. (optional)
     * @param certificateRawBytes Raw data of certificate. (optional)
     * @param certificateIsVerified Indicates if the certificate has been verified by owner of the private key. (optional)
     * @param certificatePurpose Describe the purpose of the certificate. (optional)
     * @param certificateCreated Certificate creation time. (optional)
     * @param certificateLastUpdated Certificate last updated time. (optional)
     * @param certificateHasPrivateKey Indicates if the certificate contains private key. (optional)
     * @param certificateNonce Random number generated to indicate Proof of Possession. (optional)
     * @return ApiResponse&lt;CertificateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateResponse> dpsCertificateVerifyCertificateWithHttpInfo(String certificateName, String ifMatch, String subscriptionId, String resourceGroupName, String provisioningServiceName, String apiVersion, VerificationCodeRequest request, String certificateName2, byte[] certificateRawBytes, Boolean certificateIsVerified, String certificatePurpose, OffsetDateTime certificateCreated, OffsetDateTime certificateLastUpdated, Boolean certificateHasPrivateKey, String certificateNonce) throws ApiException {
        okhttp3.Call localVarCall = dpsCertificateVerifyCertificateValidateBeforeCall(certificateName, ifMatch, subscriptionId, resourceGroupName, provisioningServiceName, apiVersion, request, certificateName2, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce, null);
        Type localVarReturnType = new TypeToken<CertificateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Verifies certificate for the provisioning service.
     * @param certificateName The mandatory logical name of the certificate, that the provisioning service uses to access. (required)
     * @param ifMatch ETag of the certificate. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param provisioningServiceName Provisioning service name. (required)
     * @param apiVersion The version of the API. (required)
     * @param request  (required)
     * @param certificateName2 Common Name for the certificate. (optional)
     * @param certificateRawBytes Raw data of certificate. (optional)
     * @param certificateIsVerified Indicates if the certificate has been verified by owner of the private key. (optional)
     * @param certificatePurpose Describe the purpose of the certificate. (optional)
     * @param certificateCreated Certificate creation time. (optional)
     * @param certificateLastUpdated Certificate last updated time. (optional)
     * @param certificateHasPrivateKey Indicates if the certificate contains private key. (optional)
     * @param certificateNonce Random number generated to indicate Proof of Possession. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dpsCertificateVerifyCertificateAsync(String certificateName, String ifMatch, String subscriptionId, String resourceGroupName, String provisioningServiceName, String apiVersion, VerificationCodeRequest request, String certificateName2, byte[] certificateRawBytes, Boolean certificateIsVerified, String certificatePurpose, OffsetDateTime certificateCreated, OffsetDateTime certificateLastUpdated, Boolean certificateHasPrivateKey, String certificateNonce, final ApiCallback<CertificateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dpsCertificateVerifyCertificateValidateBeforeCall(certificateName, ifMatch, subscriptionId, resourceGroupName, provisioningServiceName, apiVersion, request, certificateName2, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce, _callback);
        Type localVarReturnType = new TypeToken<CertificateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iotDpsResourceCheckNameAvailability
     * @param subscriptionId The subscription identifier. (required)
     * @param apiVersion The version of the API. (required)
     * @param arguments Set the name parameter in the OperationInputs structure to the name of the provisioning service to check. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized response that specifies whether the provisioning service name is available. If the name is not available, the body contains the reason. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotDpsResourceCheckNameAvailabilityCall(String subscriptionId, String apiVersion, OperationInputs arguments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = arguments;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Devices/checkProvisioningServiceNameAvailability"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iotDpsResourceCheckNameAvailabilityValidateBeforeCall(String subscriptionId, String apiVersion, OperationInputs arguments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling iotDpsResourceCheckNameAvailability(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling iotDpsResourceCheckNameAvailability(Async)");
        }

        // verify the required parameter 'arguments' is set
        if (arguments == null) {
            throw new ApiException("Missing the required parameter 'arguments' when calling iotDpsResourceCheckNameAvailability(Async)");
        }

        return iotDpsResourceCheckNameAvailabilityCall(subscriptionId, apiVersion, arguments, _callback);

    }

    /**
     * Check if a provisioning service name is available.
     * Check if a provisioning service name is available.
     * @param subscriptionId The subscription identifier. (required)
     * @param apiVersion The version of the API. (required)
     * @param arguments Set the name parameter in the OperationInputs structure to the name of the provisioning service to check. (required)
     * @return NameAvailabilityInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized response that specifies whether the provisioning service name is available. If the name is not available, the body contains the reason. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public NameAvailabilityInfo iotDpsResourceCheckNameAvailability(String subscriptionId, String apiVersion, OperationInputs arguments) throws ApiException {
        ApiResponse<NameAvailabilityInfo> localVarResp = iotDpsResourceCheckNameAvailabilityWithHttpInfo(subscriptionId, apiVersion, arguments);
        return localVarResp.getData();
    }

    /**
     * Check if a provisioning service name is available.
     * Check if a provisioning service name is available.
     * @param subscriptionId The subscription identifier. (required)
     * @param apiVersion The version of the API. (required)
     * @param arguments Set the name parameter in the OperationInputs structure to the name of the provisioning service to check. (required)
     * @return ApiResponse&lt;NameAvailabilityInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized response that specifies whether the provisioning service name is available. If the name is not available, the body contains the reason. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NameAvailabilityInfo> iotDpsResourceCheckNameAvailabilityWithHttpInfo(String subscriptionId, String apiVersion, OperationInputs arguments) throws ApiException {
        okhttp3.Call localVarCall = iotDpsResourceCheckNameAvailabilityValidateBeforeCall(subscriptionId, apiVersion, arguments, null);
        Type localVarReturnType = new TypeToken<NameAvailabilityInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check if a provisioning service name is available. (asynchronously)
     * Check if a provisioning service name is available.
     * @param subscriptionId The subscription identifier. (required)
     * @param apiVersion The version of the API. (required)
     * @param arguments Set the name parameter in the OperationInputs structure to the name of the provisioning service to check. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized response that specifies whether the provisioning service name is available. If the name is not available, the body contains the reason. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotDpsResourceCheckNameAvailabilityAsync(String subscriptionId, String apiVersion, OperationInputs arguments, final ApiCallback<NameAvailabilityInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = iotDpsResourceCheckNameAvailabilityValidateBeforeCall(subscriptionId, apiVersion, arguments, _callback);
        Type localVarReturnType = new TypeToken<NameAvailabilityInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iotDpsResourceGetKeysForKeyName
     * @param provisioningServiceName Name of the provisioning service. (required)
     * @param keyName Logical key name to get key-values for. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the provisioning service. (required)
     * @param apiVersion The version of the API. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized shared access policy, including keys, that you can use to access one or more provisioning service endpoints. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotDpsResourceGetKeysForKeyNameCall(String provisioningServiceName, String keyName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/keys/{keyName}/listkeys"
            .replace("{" + "provisioningServiceName" + "}", localVarApiClient.escapeString(provisioningServiceName.toString()))
            .replace("{" + "keyName" + "}", localVarApiClient.escapeString(keyName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iotDpsResourceGetKeysForKeyNameValidateBeforeCall(String provisioningServiceName, String keyName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'provisioningServiceName' is set
        if (provisioningServiceName == null) {
            throw new ApiException("Missing the required parameter 'provisioningServiceName' when calling iotDpsResourceGetKeysForKeyName(Async)");
        }

        // verify the required parameter 'keyName' is set
        if (keyName == null) {
            throw new ApiException("Missing the required parameter 'keyName' when calling iotDpsResourceGetKeysForKeyName(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling iotDpsResourceGetKeysForKeyName(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling iotDpsResourceGetKeysForKeyName(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling iotDpsResourceGetKeysForKeyName(Async)");
        }

        return iotDpsResourceGetKeysForKeyNameCall(provisioningServiceName, keyName, subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * Get a shared access policy by name from a provisioning service.
     * Get a shared access policy by name from a provisioning service.
     * @param provisioningServiceName Name of the provisioning service. (required)
     * @param keyName Logical key name to get key-values for. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the provisioning service. (required)
     * @param apiVersion The version of the API. (required)
     * @return SharedAccessSignatureAuthorizationRuleAccessRightsDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized shared access policy, including keys, that you can use to access one or more provisioning service endpoints. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public SharedAccessSignatureAuthorizationRuleAccessRightsDescription iotDpsResourceGetKeysForKeyName(String provisioningServiceName, String keyName, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<SharedAccessSignatureAuthorizationRuleAccessRightsDescription> localVarResp = iotDpsResourceGetKeysForKeyNameWithHttpInfo(provisioningServiceName, keyName, subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a shared access policy by name from a provisioning service.
     * Get a shared access policy by name from a provisioning service.
     * @param provisioningServiceName Name of the provisioning service. (required)
     * @param keyName Logical key name to get key-values for. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the provisioning service. (required)
     * @param apiVersion The version of the API. (required)
     * @return ApiResponse&lt;SharedAccessSignatureAuthorizationRuleAccessRightsDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized shared access policy, including keys, that you can use to access one or more provisioning service endpoints. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SharedAccessSignatureAuthorizationRuleAccessRightsDescription> iotDpsResourceGetKeysForKeyNameWithHttpInfo(String provisioningServiceName, String keyName, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = iotDpsResourceGetKeysForKeyNameValidateBeforeCall(provisioningServiceName, keyName, subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<SharedAccessSignatureAuthorizationRuleAccessRightsDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a shared access policy by name from a provisioning service. (asynchronously)
     * Get a shared access policy by name from a provisioning service.
     * @param provisioningServiceName Name of the provisioning service. (required)
     * @param keyName Logical key name to get key-values for. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the provisioning service. (required)
     * @param apiVersion The version of the API. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized shared access policy, including keys, that you can use to access one or more provisioning service endpoints. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotDpsResourceGetKeysForKeyNameAsync(String provisioningServiceName, String keyName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<SharedAccessSignatureAuthorizationRuleAccessRightsDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = iotDpsResourceGetKeysForKeyNameValidateBeforeCall(provisioningServiceName, keyName, subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SharedAccessSignatureAuthorizationRuleAccessRightsDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iotDpsResourceListKeys
     * @param provisioningServiceName The provisioning service name to get the shared access keys for. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName resource group name (required)
     * @param apiVersion The version of the API. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized array of shared access policies, including keys, that you can use to access the provisioning service endpoints. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotDpsResourceListKeysCall(String provisioningServiceName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/listkeys"
            .replace("{" + "provisioningServiceName" + "}", localVarApiClient.escapeString(provisioningServiceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iotDpsResourceListKeysValidateBeforeCall(String provisioningServiceName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'provisioningServiceName' is set
        if (provisioningServiceName == null) {
            throw new ApiException("Missing the required parameter 'provisioningServiceName' when calling iotDpsResourceListKeys(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling iotDpsResourceListKeys(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling iotDpsResourceListKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling iotDpsResourceListKeys(Async)");
        }

        return iotDpsResourceListKeysCall(provisioningServiceName, subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * Get the security metadata for a provisioning service.
     * Get the security metadata for a provisioning service.
     * @param provisioningServiceName The provisioning service name to get the shared access keys for. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName resource group name (required)
     * @param apiVersion The version of the API. (required)
     * @return SharedAccessSignatureAuthorizationRuleListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized array of shared access policies, including keys, that you can use to access the provisioning service endpoints. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public SharedAccessSignatureAuthorizationRuleListResult iotDpsResourceListKeys(String provisioningServiceName, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<SharedAccessSignatureAuthorizationRuleListResult> localVarResp = iotDpsResourceListKeysWithHttpInfo(provisioningServiceName, subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the security metadata for a provisioning service.
     * Get the security metadata for a provisioning service.
     * @param provisioningServiceName The provisioning service name to get the shared access keys for. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName resource group name (required)
     * @param apiVersion The version of the API. (required)
     * @return ApiResponse&lt;SharedAccessSignatureAuthorizationRuleListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized array of shared access policies, including keys, that you can use to access the provisioning service endpoints. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SharedAccessSignatureAuthorizationRuleListResult> iotDpsResourceListKeysWithHttpInfo(String provisioningServiceName, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = iotDpsResourceListKeysValidateBeforeCall(provisioningServiceName, subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<SharedAccessSignatureAuthorizationRuleListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the security metadata for a provisioning service. (asynchronously)
     * Get the security metadata for a provisioning service.
     * @param provisioningServiceName The provisioning service name to get the shared access keys for. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName resource group name (required)
     * @param apiVersion The version of the API. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized array of shared access policies, including keys, that you can use to access the provisioning service endpoints. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotDpsResourceListKeysAsync(String provisioningServiceName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<SharedAccessSignatureAuthorizationRuleListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = iotDpsResourceListKeysValidateBeforeCall(provisioningServiceName, subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SharedAccessSignatureAuthorizationRuleListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
