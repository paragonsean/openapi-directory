# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hub_virtual_network_connection import HubVirtualNetworkConnection
from openapi_server.models.hub_virtual_network_connection_properties_remote_virtual_network import HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork
from openapi_server.models.virtual_hub_route_table import VirtualHubRouteTable
from openapi_server import util


class VirtualHubProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_prefix: str=None, express_route_gateway: HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork=None, p2_s_vpn_gateway: HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork=None, provisioning_state: str=None, route_table: VirtualHubRouteTable=None, virtual_network_connections: List[HubVirtualNetworkConnection]=None, virtual_wan: HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork=None, vpn_gateway: HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork=None):
        """VirtualHubProperties - a model defined in OpenAPI

        :param address_prefix: The address_prefix of this VirtualHubProperties.
        :param express_route_gateway: The express_route_gateway of this VirtualHubProperties.
        :param p2_s_vpn_gateway: The p2_s_vpn_gateway of this VirtualHubProperties.
        :param provisioning_state: The provisioning_state of this VirtualHubProperties.
        :param route_table: The route_table of this VirtualHubProperties.
        :param virtual_network_connections: The virtual_network_connections of this VirtualHubProperties.
        :param virtual_wan: The virtual_wan of this VirtualHubProperties.
        :param vpn_gateway: The vpn_gateway of this VirtualHubProperties.
        """
        self.openapi_types = {
            'address_prefix': str,
            'express_route_gateway': HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork,
            'p2_s_vpn_gateway': HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork,
            'provisioning_state': str,
            'route_table': VirtualHubRouteTable,
            'virtual_network_connections': List[HubVirtualNetworkConnection],
            'virtual_wan': HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork,
            'vpn_gateway': HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork
        }

        self.attribute_map = {
            'address_prefix': 'addressPrefix',
            'express_route_gateway': 'expressRouteGateway',
            'p2_s_vpn_gateway': 'p2SVpnGateway',
            'provisioning_state': 'provisioningState',
            'route_table': 'routeTable',
            'virtual_network_connections': 'virtualNetworkConnections',
            'virtual_wan': 'virtualWan',
            'vpn_gateway': 'vpnGateway'
        }

        self._address_prefix = address_prefix
        self._express_route_gateway = express_route_gateway
        self._p2_s_vpn_gateway = p2_s_vpn_gateway
        self._provisioning_state = provisioning_state
        self._route_table = route_table
        self._virtual_network_connections = virtual_network_connections
        self._virtual_wan = virtual_wan
        self._vpn_gateway = vpn_gateway

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualHubProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualHubProperties of this VirtualHubProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_prefix(self):
        """Gets the address_prefix of this VirtualHubProperties.

        Address-prefix for this VirtualHub.

        :return: The address_prefix of this VirtualHubProperties.
        :rtype: str
        """
        return self._address_prefix

    @address_prefix.setter
    def address_prefix(self, address_prefix):
        """Sets the address_prefix of this VirtualHubProperties.

        Address-prefix for this VirtualHub.

        :param address_prefix: The address_prefix of this VirtualHubProperties.
        :type address_prefix: str
        """

        self._address_prefix = address_prefix

    @property
    def express_route_gateway(self):
        """Gets the express_route_gateway of this VirtualHubProperties.


        :return: The express_route_gateway of this VirtualHubProperties.
        :rtype: HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork
        """
        return self._express_route_gateway

    @express_route_gateway.setter
    def express_route_gateway(self, express_route_gateway):
        """Sets the express_route_gateway of this VirtualHubProperties.


        :param express_route_gateway: The express_route_gateway of this VirtualHubProperties.
        :type express_route_gateway: HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork
        """

        self._express_route_gateway = express_route_gateway

    @property
    def p2_s_vpn_gateway(self):
        """Gets the p2_s_vpn_gateway of this VirtualHubProperties.


        :return: The p2_s_vpn_gateway of this VirtualHubProperties.
        :rtype: HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork
        """
        return self._p2_s_vpn_gateway

    @p2_s_vpn_gateway.setter
    def p2_s_vpn_gateway(self, p2_s_vpn_gateway):
        """Sets the p2_s_vpn_gateway of this VirtualHubProperties.


        :param p2_s_vpn_gateway: The p2_s_vpn_gateway of this VirtualHubProperties.
        :type p2_s_vpn_gateway: HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork
        """

        self._p2_s_vpn_gateway = p2_s_vpn_gateway

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this VirtualHubProperties.

        The current provisioning state.

        :return: The provisioning_state of this VirtualHubProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this VirtualHubProperties.

        The current provisioning state.

        :param provisioning_state: The provisioning_state of this VirtualHubProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Updating", "Deleting", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def route_table(self):
        """Gets the route_table of this VirtualHubProperties.


        :return: The route_table of this VirtualHubProperties.
        :rtype: VirtualHubRouteTable
        """
        return self._route_table

    @route_table.setter
    def route_table(self, route_table):
        """Sets the route_table of this VirtualHubProperties.


        :param route_table: The route_table of this VirtualHubProperties.
        :type route_table: VirtualHubRouteTable
        """

        self._route_table = route_table

    @property
    def virtual_network_connections(self):
        """Gets the virtual_network_connections of this VirtualHubProperties.

        List of all vnet connections with this VirtualHub.

        :return: The virtual_network_connections of this VirtualHubProperties.
        :rtype: List[HubVirtualNetworkConnection]
        """
        return self._virtual_network_connections

    @virtual_network_connections.setter
    def virtual_network_connections(self, virtual_network_connections):
        """Sets the virtual_network_connections of this VirtualHubProperties.

        List of all vnet connections with this VirtualHub.

        :param virtual_network_connections: The virtual_network_connections of this VirtualHubProperties.
        :type virtual_network_connections: List[HubVirtualNetworkConnection]
        """

        self._virtual_network_connections = virtual_network_connections

    @property
    def virtual_wan(self):
        """Gets the virtual_wan of this VirtualHubProperties.


        :return: The virtual_wan of this VirtualHubProperties.
        :rtype: HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork
        """
        return self._virtual_wan

    @virtual_wan.setter
    def virtual_wan(self, virtual_wan):
        """Sets the virtual_wan of this VirtualHubProperties.


        :param virtual_wan: The virtual_wan of this VirtualHubProperties.
        :type virtual_wan: HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork
        """

        self._virtual_wan = virtual_wan

    @property
    def vpn_gateway(self):
        """Gets the vpn_gateway of this VirtualHubProperties.


        :return: The vpn_gateway of this VirtualHubProperties.
        :rtype: HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork
        """
        return self._vpn_gateway

    @vpn_gateway.setter
    def vpn_gateway(self, vpn_gateway):
        """Sets the vpn_gateway of this VirtualHubProperties.


        :param vpn_gateway: The vpn_gateway of this VirtualHubProperties.
        :type vpn_gateway: HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork
        """

        self._vpn_gateway = vpn_gateway
