/**
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2019-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVirtualWanProperties.h
 *
 * Parameters for VirtualWAN
 */

#ifndef OAIVirtualWanProperties_H
#define OAIVirtualWanProperties_H

#include <QJsonObject>

#include "OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork.h"
#include "OAIOfficeTrafficCategory.h"
#include "OAIP2SVpnServerConfiguration.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIP2SVpnServerConfiguration;
class OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork;

class OAIVirtualWanProperties : public OAIObject {
public:
    OAIVirtualWanProperties();
    OAIVirtualWanProperties(QString json);
    ~OAIVirtualWanProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowBranchToBranchTraffic() const;
    void setAllowBranchToBranchTraffic(const bool &allow_branch_to_branch_traffic);
    bool is_allow_branch_to_branch_traffic_Set() const;
    bool is_allow_branch_to_branch_traffic_Valid() const;

    bool isAllowVnetToVnetTraffic() const;
    void setAllowVnetToVnetTraffic(const bool &allow_vnet_to_vnet_traffic);
    bool is_allow_vnet_to_vnet_traffic_Set() const;
    bool is_allow_vnet_to_vnet_traffic_Valid() const;

    bool isDisableVpnEncryption() const;
    void setDisableVpnEncryption(const bool &disable_vpn_encryption);
    bool is_disable_vpn_encryption_Set() const;
    bool is_disable_vpn_encryption_Valid() const;

    OAIOfficeTrafficCategory getOffice365LocalBreakoutCategory() const;
    void setOffice365LocalBreakoutCategory(const OAIOfficeTrafficCategory &office365_local_breakout_category);
    bool is_office365_local_breakout_category_Set() const;
    bool is_office365_local_breakout_category_Valid() const;

    QList<OAIP2SVpnServerConfiguration> getP2SVpnServerConfigurations() const;
    void setP2SVpnServerConfigurations(const QList<OAIP2SVpnServerConfiguration> &p2_s_vpn_server_configurations);
    bool is_p2_s_vpn_server_configurations_Set() const;
    bool is_p2_s_vpn_server_configurations_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    QString getSecurityProviderName() const;
    void setSecurityProviderName(const QString &security_provider_name);
    bool is_security_provider_name_Set() const;
    bool is_security_provider_name_Valid() const;

    QList<OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork> getVirtualHubs() const;
    void setVirtualHubs(const QList<OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork> &virtual_hubs);
    bool is_virtual_hubs_Set() const;
    bool is_virtual_hubs_Valid() const;

    QList<OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork> getVpnSites() const;
    void setVpnSites(const QList<OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork> &vpn_sites);
    bool is_vpn_sites_Set() const;
    bool is_vpn_sites_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allow_branch_to_branch_traffic;
    bool m_allow_branch_to_branch_traffic_isSet;
    bool m_allow_branch_to_branch_traffic_isValid;

    bool m_allow_vnet_to_vnet_traffic;
    bool m_allow_vnet_to_vnet_traffic_isSet;
    bool m_allow_vnet_to_vnet_traffic_isValid;

    bool m_disable_vpn_encryption;
    bool m_disable_vpn_encryption_isSet;
    bool m_disable_vpn_encryption_isValid;

    OAIOfficeTrafficCategory m_office365_local_breakout_category;
    bool m_office365_local_breakout_category_isSet;
    bool m_office365_local_breakout_category_isValid;

    QList<OAIP2SVpnServerConfiguration> m_p2_s_vpn_server_configurations;
    bool m_p2_s_vpn_server_configurations_isSet;
    bool m_p2_s_vpn_server_configurations_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    QString m_security_provider_name;
    bool m_security_provider_name_isSet;
    bool m_security_provider_name_isValid;

    QList<OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork> m_virtual_hubs;
    bool m_virtual_hubs_isSet;
    bool m_virtual_hubs_isValid;

    QList<OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork> m_vpn_sites;
    bool m_vpn_sites_isSet;
    bool m_vpn_sites_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVirtualWanProperties)

#endif // OAIVirtualWanProperties_H
