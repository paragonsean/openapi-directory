/**
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVpnConnectionProperties.h
 *
 * Parameters for VpnConnection.
 */

#ifndef OAIVpnConnectionProperties_H
#define OAIVpnConnectionProperties_H

#include <QJsonObject>

#include "OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork.h"
#include "OAIP2SVpnServerConfigurationProperties_vpnClientIpsecPolicies_inner.h"
#include "OAIVpnConnectionStatus.h"
#include "OAIVpnSiteLinkConnection.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIP2SVpnServerConfigurationProperties_vpnClientIpsecPolicies_inner;
class OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork;
class OAIVpnSiteLinkConnection;

class OAIVpnConnectionProperties : public OAIObject {
public:
    OAIVpnConnectionProperties();
    OAIVpnConnectionProperties(QString json);
    ~OAIVpnConnectionProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getConnectionBandwidth() const;
    void setConnectionBandwidth(const qint32 &connection_bandwidth);
    bool is_connection_bandwidth_Set() const;
    bool is_connection_bandwidth_Valid() const;

    OAIVpnConnectionStatus getConnectionStatus() const;
    void setConnectionStatus(const OAIVpnConnectionStatus &connection_status);
    bool is_connection_status_Set() const;
    bool is_connection_status_Valid() const;

    qint64 getEgressBytesTransferred() const;
    void setEgressBytesTransferred(const qint64 &egress_bytes_transferred);
    bool is_egress_bytes_transferred_Set() const;
    bool is_egress_bytes_transferred_Valid() const;

    bool isEnableBgp() const;
    void setEnableBgp(const bool &enable_bgp);
    bool is_enable_bgp_Set() const;
    bool is_enable_bgp_Valid() const;

    bool isEnableInternetSecurity() const;
    void setEnableInternetSecurity(const bool &enable_internet_security);
    bool is_enable_internet_security_Set() const;
    bool is_enable_internet_security_Valid() const;

    bool isEnableRateLimiting() const;
    void setEnableRateLimiting(const bool &enable_rate_limiting);
    bool is_enable_rate_limiting_Set() const;
    bool is_enable_rate_limiting_Valid() const;

    qint64 getIngressBytesTransferred() const;
    void setIngressBytesTransferred(const qint64 &ingress_bytes_transferred);
    bool is_ingress_bytes_transferred_Set() const;
    bool is_ingress_bytes_transferred_Valid() const;

    QList<OAIP2SVpnServerConfigurationProperties_vpnClientIpsecPolicies_inner> getIpsecPolicies() const;
    void setIpsecPolicies(const QList<OAIP2SVpnServerConfigurationProperties_vpnClientIpsecPolicies_inner> &ipsec_policies);
    bool is_ipsec_policies_Set() const;
    bool is_ipsec_policies_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork getRemoteVpnSite() const;
    void setRemoteVpnSite(const OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork &remote_vpn_site);
    bool is_remote_vpn_site_Set() const;
    bool is_remote_vpn_site_Valid() const;

    qint32 getRoutingWeight() const;
    void setRoutingWeight(const qint32 &routing_weight);
    bool is_routing_weight_Set() const;
    bool is_routing_weight_Valid() const;

    QString getSharedKey() const;
    void setSharedKey(const QString &shared_key);
    bool is_shared_key_Set() const;
    bool is_shared_key_Valid() const;

    bool isUseLocalAzureIpAddress() const;
    void setUseLocalAzureIpAddress(const bool &use_local_azure_ip_address);
    bool is_use_local_azure_ip_address_Set() const;
    bool is_use_local_azure_ip_address_Valid() const;

    bool isUsePolicyBasedTrafficSelectors() const;
    void setUsePolicyBasedTrafficSelectors(const bool &use_policy_based_traffic_selectors);
    bool is_use_policy_based_traffic_selectors_Set() const;
    bool is_use_policy_based_traffic_selectors_Valid() const;

    QString getVpnConnectionProtocolType() const;
    void setVpnConnectionProtocolType(const QString &vpn_connection_protocol_type);
    bool is_vpn_connection_protocol_type_Set() const;
    bool is_vpn_connection_protocol_type_Valid() const;

    QList<OAIVpnSiteLinkConnection> getVpnLinkConnections() const;
    void setVpnLinkConnections(const QList<OAIVpnSiteLinkConnection> &vpn_link_connections);
    bool is_vpn_link_connections_Set() const;
    bool is_vpn_link_connections_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_connection_bandwidth;
    bool m_connection_bandwidth_isSet;
    bool m_connection_bandwidth_isValid;

    OAIVpnConnectionStatus m_connection_status;
    bool m_connection_status_isSet;
    bool m_connection_status_isValid;

    qint64 m_egress_bytes_transferred;
    bool m_egress_bytes_transferred_isSet;
    bool m_egress_bytes_transferred_isValid;

    bool m_enable_bgp;
    bool m_enable_bgp_isSet;
    bool m_enable_bgp_isValid;

    bool m_enable_internet_security;
    bool m_enable_internet_security_isSet;
    bool m_enable_internet_security_isValid;

    bool m_enable_rate_limiting;
    bool m_enable_rate_limiting_isSet;
    bool m_enable_rate_limiting_isValid;

    qint64 m_ingress_bytes_transferred;
    bool m_ingress_bytes_transferred_isSet;
    bool m_ingress_bytes_transferred_isValid;

    QList<OAIP2SVpnServerConfigurationProperties_vpnClientIpsecPolicies_inner> m_ipsec_policies;
    bool m_ipsec_policies_isSet;
    bool m_ipsec_policies_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork m_remote_vpn_site;
    bool m_remote_vpn_site_isSet;
    bool m_remote_vpn_site_isValid;

    qint32 m_routing_weight;
    bool m_routing_weight_isSet;
    bool m_routing_weight_isValid;

    QString m_shared_key;
    bool m_shared_key_isSet;
    bool m_shared_key_isValid;

    bool m_use_local_azure_ip_address;
    bool m_use_local_azure_ip_address_isSet;
    bool m_use_local_azure_ip_address_isValid;

    bool m_use_policy_based_traffic_selectors;
    bool m_use_policy_based_traffic_selectors_isSet;
    bool m_use_policy_based_traffic_selectors_isValid;

    QString m_vpn_connection_protocol_type;
    bool m_vpn_connection_protocol_type_isSet;
    bool m_vpn_connection_protocol_type_isValid;

    QList<OAIVpnSiteLinkConnection> m_vpn_link_connections;
    bool m_vpn_link_connections_isSet;
    bool m_vpn_link_connections_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVpnConnectionProperties)

#endif // OAIVpnConnectionProperties_H
