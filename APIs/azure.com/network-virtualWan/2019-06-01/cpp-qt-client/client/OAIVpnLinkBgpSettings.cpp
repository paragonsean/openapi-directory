/**
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVpnLinkBgpSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVpnLinkBgpSettings::OAIVpnLinkBgpSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVpnLinkBgpSettings::OAIVpnLinkBgpSettings() {
    this->initializeModel();
}

OAIVpnLinkBgpSettings::~OAIVpnLinkBgpSettings() {}

void OAIVpnLinkBgpSettings::initializeModel() {

    m_asn_isSet = false;
    m_asn_isValid = false;

    m_bgp_peering_address_isSet = false;
    m_bgp_peering_address_isValid = false;
}

void OAIVpnLinkBgpSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVpnLinkBgpSettings::fromJsonObject(QJsonObject json) {

    m_asn_isValid = ::OpenAPI::fromJsonValue(m_asn, json[QString("asn")]);
    m_asn_isSet = !json[QString("asn")].isNull() && m_asn_isValid;

    m_bgp_peering_address_isValid = ::OpenAPI::fromJsonValue(m_bgp_peering_address, json[QString("bgpPeeringAddress")]);
    m_bgp_peering_address_isSet = !json[QString("bgpPeeringAddress")].isNull() && m_bgp_peering_address_isValid;
}

QString OAIVpnLinkBgpSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVpnLinkBgpSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_asn_isSet) {
        obj.insert(QString("asn"), ::OpenAPI::toJsonValue(m_asn));
    }
    if (m_bgp_peering_address_isSet) {
        obj.insert(QString("bgpPeeringAddress"), ::OpenAPI::toJsonValue(m_bgp_peering_address));
    }
    return obj;
}

qint64 OAIVpnLinkBgpSettings::getAsn() const {
    return m_asn;
}
void OAIVpnLinkBgpSettings::setAsn(const qint64 &asn) {
    m_asn = asn;
    m_asn_isSet = true;
}

bool OAIVpnLinkBgpSettings::is_asn_Set() const{
    return m_asn_isSet;
}

bool OAIVpnLinkBgpSettings::is_asn_Valid() const{
    return m_asn_isValid;
}

QString OAIVpnLinkBgpSettings::getBgpPeeringAddress() const {
    return m_bgp_peering_address;
}
void OAIVpnLinkBgpSettings::setBgpPeeringAddress(const QString &bgp_peering_address) {
    m_bgp_peering_address = bgp_peering_address;
    m_bgp_peering_address_isSet = true;
}

bool OAIVpnLinkBgpSettings::is_bgp_peering_address_Set() const{
    return m_bgp_peering_address_isSet;
}

bool OAIVpnLinkBgpSettings::is_bgp_peering_address_Valid() const{
    return m_bgp_peering_address_isValid;
}

bool OAIVpnLinkBgpSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bgp_peering_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVpnLinkBgpSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
