/**
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVpnLinkProviderProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVpnLinkProviderProperties::OAIVpnLinkProviderProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVpnLinkProviderProperties::OAIVpnLinkProviderProperties() {
    this->initializeModel();
}

OAIVpnLinkProviderProperties::~OAIVpnLinkProviderProperties() {}

void OAIVpnLinkProviderProperties::initializeModel() {

    m_link_provider_name_isSet = false;
    m_link_provider_name_isValid = false;

    m_link_speed_in_mbps_isSet = false;
    m_link_speed_in_mbps_isValid = false;
}

void OAIVpnLinkProviderProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVpnLinkProviderProperties::fromJsonObject(QJsonObject json) {

    m_link_provider_name_isValid = ::OpenAPI::fromJsonValue(m_link_provider_name, json[QString("linkProviderName")]);
    m_link_provider_name_isSet = !json[QString("linkProviderName")].isNull() && m_link_provider_name_isValid;

    m_link_speed_in_mbps_isValid = ::OpenAPI::fromJsonValue(m_link_speed_in_mbps, json[QString("linkSpeedInMbps")]);
    m_link_speed_in_mbps_isSet = !json[QString("linkSpeedInMbps")].isNull() && m_link_speed_in_mbps_isValid;
}

QString OAIVpnLinkProviderProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVpnLinkProviderProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_link_provider_name_isSet) {
        obj.insert(QString("linkProviderName"), ::OpenAPI::toJsonValue(m_link_provider_name));
    }
    if (m_link_speed_in_mbps_isSet) {
        obj.insert(QString("linkSpeedInMbps"), ::OpenAPI::toJsonValue(m_link_speed_in_mbps));
    }
    return obj;
}

QString OAIVpnLinkProviderProperties::getLinkProviderName() const {
    return m_link_provider_name;
}
void OAIVpnLinkProviderProperties::setLinkProviderName(const QString &link_provider_name) {
    m_link_provider_name = link_provider_name;
    m_link_provider_name_isSet = true;
}

bool OAIVpnLinkProviderProperties::is_link_provider_name_Set() const{
    return m_link_provider_name_isSet;
}

bool OAIVpnLinkProviderProperties::is_link_provider_name_Valid() const{
    return m_link_provider_name_isValid;
}

qint32 OAIVpnLinkProviderProperties::getLinkSpeedInMbps() const {
    return m_link_speed_in_mbps;
}
void OAIVpnLinkProviderProperties::setLinkSpeedInMbps(const qint32 &link_speed_in_mbps) {
    m_link_speed_in_mbps = link_speed_in_mbps;
    m_link_speed_in_mbps_isSet = true;
}

bool OAIVpnLinkProviderProperties::is_link_speed_in_mbps_Set() const{
    return m_link_speed_in_mbps_isSet;
}

bool OAIVpnLinkProviderProperties::is_link_speed_in_mbps_Valid() const{
    return m_link_speed_in_mbps_isValid;
}

bool OAIVpnLinkProviderProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_link_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_speed_in_mbps_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVpnLinkProviderProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
