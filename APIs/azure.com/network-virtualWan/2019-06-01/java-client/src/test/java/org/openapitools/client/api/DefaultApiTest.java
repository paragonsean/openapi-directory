/*
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetVpnSitesConfigurationRequest;
import org.openapitools.client.model.HubVirtualNetworkConnection;
import org.openapitools.client.model.ListHubVirtualNetworkConnectionsResult;
import org.openapitools.client.model.ListP2SVpnGatewaysResult;
import org.openapitools.client.model.ListP2SVpnServerConfigurationsResult;
import org.openapitools.client.model.ListVirtualHubsResult;
import org.openapitools.client.model.ListVirtualWANsResult;
import org.openapitools.client.model.ListVpnConnectionsResult;
import org.openapitools.client.model.ListVpnGatewaysResult;
import org.openapitools.client.model.ListVpnSiteLinkConnectionsResult;
import org.openapitools.client.model.ListVpnSiteLinksResult;
import org.openapitools.client.model.ListVpnSitesResult;
import org.openapitools.client.model.P2SVpnGateway;
import org.openapitools.client.model.P2SVpnServerConfiguration;
import org.openapitools.client.model.P2sVpnGatewaysListDefaultResponse;
import org.openapitools.client.model.VirtualHub;
import org.openapitools.client.model.VirtualWAN;
import org.openapitools.client.model.VirtualWanSecurityProviders;
import org.openapitools.client.model.VpnConnection;
import org.openapitools.client.model.VpnGateway;
import org.openapitools.client.model.VpnSite;
import org.openapitools.client.model.VpnSiteLink;
import org.openapitools.client.model.VpnSiteLinkConnection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Retrieves the details of a HubVirtualNetworkConnection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hubVirtualNetworkConnectionsGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String virtualHubName = null;
        String connectionName = null;
        String apiVersion = null;
        HubVirtualNetworkConnection response = api.hubVirtualNetworkConnectionsGet(subscriptionId, resourceGroupName, virtualHubName, connectionName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the details of all HubVirtualNetworkConnections.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hubVirtualNetworkConnectionsListTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String virtualHubName = null;
        String apiVersion = null;
        ListHubVirtualNetworkConnectionsResult response = api.hubVirtualNetworkConnectionsList(subscriptionId, resourceGroupName, virtualHubName, apiVersion);
        // TODO: test validations
    }

    /**
     * Creates a virtual wan p2s vpn gateway if it doesn&#39;t exist else updates the existing gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void p2sVpnGatewaysCreateOrUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String gatewayName = null;
        String apiVersion = null;
        P2SVpnGateway p2SVpnGatewayParameters = null;
        P2SVpnGateway response = api.p2sVpnGatewaysCreateOrUpdate(subscriptionId, resourceGroupName, gatewayName, apiVersion, p2SVpnGatewayParameters);
        // TODO: test validations
    }

    /**
     * Deletes a virtual wan p2s vpn gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void p2sVpnGatewaysDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String gatewayName = null;
        String apiVersion = null;
        api.p2sVpnGatewaysDelete(subscriptionId, resourceGroupName, gatewayName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the details of a virtual wan p2s vpn gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void p2sVpnGatewaysGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String gatewayName = null;
        String apiVersion = null;
        P2SVpnGateway response = api.p2sVpnGatewaysGet(subscriptionId, resourceGroupName, gatewayName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists all the P2SVpnGateways in a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void p2sVpnGatewaysListTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        ListP2SVpnGatewaysResult response = api.p2sVpnGatewaysList(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists all the P2SVpnGateways in a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void p2sVpnGatewaysListByResourceGroupTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        ListP2SVpnGatewaysResult response = api.p2sVpnGatewaysListByResourceGroup(subscriptionId, resourceGroupName, apiVersion);
        // TODO: test validations
    }

    /**
     * Creates a P2SVpnServerConfiguration to associate with a VirtualWan if it doesn&#39;t exist else updates the existing P2SVpnServerConfiguration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void p2sVpnServerConfigurationsCreateOrUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String virtualWanName = null;
        String p2SVpnServerConfigurationName = null;
        String apiVersion = null;
        P2SVpnServerConfiguration p2SVpnServerConfigurationParameters = null;
        P2SVpnServerConfiguration response = api.p2sVpnServerConfigurationsCreateOrUpdate(subscriptionId, resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, apiVersion, p2SVpnServerConfigurationParameters);
        // TODO: test validations
    }

    /**
     * Deletes a P2SVpnServerConfiguration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void p2sVpnServerConfigurationsDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String virtualWanName = null;
        String p2SVpnServerConfigurationName = null;
        String apiVersion = null;
        api.p2sVpnServerConfigurationsDelete(subscriptionId, resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the details of a P2SVpnServerConfiguration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void p2sVpnServerConfigurationsGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String virtualWanName = null;
        String p2SVpnServerConfigurationName = null;
        String apiVersion = null;
        P2SVpnServerConfiguration response = api.p2sVpnServerConfigurationsGet(subscriptionId, resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves all P2SVpnServerConfigurations for a particular VirtualWan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void p2sVpnServerConfigurationsListByVirtualWanTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String virtualWanName = null;
        String apiVersion = null;
        ListP2SVpnServerConfigurationsResult response = api.p2sVpnServerConfigurationsListByVirtualWan(subscriptionId, resourceGroupName, virtualWanName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gives the supported security providers for the virtual wan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void supportedSecurityProvidersTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String virtualWANName = null;
        String apiVersion = null;
        VirtualWanSecurityProviders response = api.supportedSecurityProviders(subscriptionId, resourceGroupName, virtualWANName, apiVersion);
        // TODO: test validations
    }

    /**
     * Creates a VirtualHub resource if it doesn&#39;t exist else updates the existing VirtualHub.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualHubsCreateOrUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String virtualHubName = null;
        String apiVersion = null;
        VirtualHub virtualHubParameters = null;
        VirtualHub response = api.virtualHubsCreateOrUpdate(subscriptionId, resourceGroupName, virtualHubName, apiVersion, virtualHubParameters);
        // TODO: test validations
    }

    /**
     * Deletes a VirtualHub.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualHubsDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String virtualHubName = null;
        String apiVersion = null;
        api.virtualHubsDelete(subscriptionId, resourceGroupName, virtualHubName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the details of a VirtualHub.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualHubsGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String virtualHubName = null;
        String apiVersion = null;
        VirtualHub response = api.virtualHubsGet(subscriptionId, resourceGroupName, virtualHubName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists all the VirtualHubs in a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualHubsListTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        ListVirtualHubsResult response = api.virtualHubsList(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists all the VirtualHubs in a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualHubsListByResourceGroupTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        ListVirtualHubsResult response = api.virtualHubsListByResourceGroup(subscriptionId, resourceGroupName, apiVersion);
        // TODO: test validations
    }

    /**
     * Creates a VirtualWAN resource if it doesn&#39;t exist else updates the existing VirtualWAN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualWansCreateOrUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String virtualWANName = null;
        String apiVersion = null;
        VirtualWAN waNParameters = null;
        VirtualWAN response = api.virtualWansCreateOrUpdate(subscriptionId, resourceGroupName, virtualWANName, apiVersion, waNParameters);
        // TODO: test validations
    }

    /**
     * Deletes a VirtualWAN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualWansDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String virtualWANName = null;
        String apiVersion = null;
        api.virtualWansDelete(subscriptionId, resourceGroupName, virtualWANName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the details of a VirtualWAN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualWansGetTest() throws ApiException {
        String resourceGroupName = null;
        String virtualWANName = null;
        String apiVersion = null;
        String subscriptionId = null;
        VirtualWAN response = api.virtualWansGet(resourceGroupName, virtualWANName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all the VirtualWANs in a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualWansListTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        ListVirtualWANsResult response = api.virtualWansList(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists all the VirtualWANs in a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualWansListByResourceGroupTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        ListVirtualWANsResult response = api.virtualWansListByResourceGroup(subscriptionId, resourceGroupName, apiVersion);
        // TODO: test validations
    }

    /**
     * Creates a vpn connection to a scalable vpn gateway if it doesn&#39;t exist else updates the existing connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vpnConnectionsCreateOrUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String gatewayName = null;
        String connectionName = null;
        String apiVersion = null;
        VpnConnection vpnConnectionParameters = null;
        VpnConnection response = api.vpnConnectionsCreateOrUpdate(subscriptionId, resourceGroupName, gatewayName, connectionName, apiVersion, vpnConnectionParameters);
        // TODO: test validations
    }

    /**
     * Deletes a vpn connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vpnConnectionsDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String gatewayName = null;
        String connectionName = null;
        String apiVersion = null;
        api.vpnConnectionsDelete(subscriptionId, resourceGroupName, gatewayName, connectionName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the details of a vpn connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vpnConnectionsGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String gatewayName = null;
        String connectionName = null;
        String apiVersion = null;
        VpnConnection response = api.vpnConnectionsGet(subscriptionId, resourceGroupName, gatewayName, connectionName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves all vpn connections for a particular virtual wan vpn gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vpnConnectionsListByVpnGatewayTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String gatewayName = null;
        String apiVersion = null;
        ListVpnConnectionsResult response = api.vpnConnectionsListByVpnGateway(subscriptionId, resourceGroupName, gatewayName, apiVersion);
        // TODO: test validations
    }

    /**
     * Creates a virtual wan vpn gateway if it doesn&#39;t exist else updates the existing gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vpnGatewaysCreateOrUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String gatewayName = null;
        String apiVersion = null;
        VpnGateway vpnGatewayParameters = null;
        VpnGateway response = api.vpnGatewaysCreateOrUpdate(subscriptionId, resourceGroupName, gatewayName, apiVersion, vpnGatewayParameters);
        // TODO: test validations
    }

    /**
     * Deletes a virtual wan vpn gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vpnGatewaysDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String gatewayName = null;
        String apiVersion = null;
        api.vpnGatewaysDelete(subscriptionId, resourceGroupName, gatewayName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the details of a virtual wan vpn gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vpnGatewaysGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String gatewayName = null;
        String apiVersion = null;
        VpnGateway response = api.vpnGatewaysGet(subscriptionId, resourceGroupName, gatewayName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists all the VpnGateways in a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vpnGatewaysListTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        ListVpnGatewaysResult response = api.vpnGatewaysList(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists all the VpnGateways in a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vpnGatewaysListByResourceGroupTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        ListVpnGatewaysResult response = api.vpnGatewaysListByResourceGroup(subscriptionId, resourceGroupName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves all vpn site link connections for a particular virtual wan vpn gateway vpn connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vpnLinkConnectionsListByVpnConnectionTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String gatewayName = null;
        String connectionName = null;
        String apiVersion = null;
        ListVpnSiteLinkConnectionsResult response = api.vpnLinkConnectionsListByVpnConnection(subscriptionId, resourceGroupName, gatewayName, connectionName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the details of a vpn site link connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vpnSiteLinkConnectionsGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String gatewayName = null;
        String connectionName = null;
        String linkConnectionName = null;
        String apiVersion = null;
        VpnSiteLinkConnection response = api.vpnSiteLinkConnectionsGet(subscriptionId, resourceGroupName, gatewayName, connectionName, linkConnectionName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the details of a VPN site link.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vpnSiteLinksGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String vpnSiteName = null;
        String vpnSiteLinkName = null;
        String apiVersion = null;
        VpnSiteLink response = api.vpnSiteLinksGet(subscriptionId, resourceGroupName, vpnSiteName, vpnSiteLinkName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists all the vpnSiteLinks in a resource group for a vpn site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vpnSiteLinksListByVpnSiteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String vpnSiteName = null;
        String apiVersion = null;
        ListVpnSiteLinksResult response = api.vpnSiteLinksListByVpnSite(subscriptionId, resourceGroupName, vpnSiteName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gives the sas-url to download the configurations for vpn-sites in a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vpnSitesConfigurationDownloadTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String virtualWANName = null;
        String apiVersion = null;
        GetVpnSitesConfigurationRequest request = null;
        api.vpnSitesConfigurationDownload(subscriptionId, resourceGroupName, virtualWANName, apiVersion, request);
        // TODO: test validations
    }

    /**
     * Creates a VpnSite resource if it doesn&#39;t exist else updates the existing VpnSite.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vpnSitesCreateOrUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String vpnSiteName = null;
        String apiVersion = null;
        VpnSite vpnSiteParameters = null;
        VpnSite response = api.vpnSitesCreateOrUpdate(subscriptionId, resourceGroupName, vpnSiteName, apiVersion, vpnSiteParameters);
        // TODO: test validations
    }

    /**
     * Deletes a VpnSite.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vpnSitesDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String vpnSiteName = null;
        String apiVersion = null;
        api.vpnSitesDelete(subscriptionId, resourceGroupName, vpnSiteName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the details of a VPN site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vpnSitesGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String vpnSiteName = null;
        String apiVersion = null;
        VpnSite response = api.vpnSitesGet(subscriptionId, resourceGroupName, vpnSiteName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists all the VpnSites in a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vpnSitesListTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        ListVpnSitesResult response = api.vpnSitesList(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists all the vpnSites in a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vpnSitesListByResourceGroupTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        ListVpnSitesResult response = api.vpnSitesListByResourceGroup(subscriptionId, resourceGroupName, apiVersion);
        // TODO: test validations
    }

}
