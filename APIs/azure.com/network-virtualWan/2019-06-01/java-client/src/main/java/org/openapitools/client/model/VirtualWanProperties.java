/*
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork;
import org.openapitools.client.model.OfficeTrafficCategory;
import org.openapitools.client.model.P2SVpnServerConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters for VirtualWAN.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:59:52.474491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualWanProperties {
  public static final String SERIALIZED_NAME_ALLOW_BRANCH_TO_BRANCH_TRAFFIC = "allowBranchToBranchTraffic";
  @SerializedName(SERIALIZED_NAME_ALLOW_BRANCH_TO_BRANCH_TRAFFIC)
  private Boolean allowBranchToBranchTraffic;

  public static final String SERIALIZED_NAME_ALLOW_VNET_TO_VNET_TRAFFIC = "allowVnetToVnetTraffic";
  @SerializedName(SERIALIZED_NAME_ALLOW_VNET_TO_VNET_TRAFFIC)
  private Boolean allowVnetToVnetTraffic;

  public static final String SERIALIZED_NAME_DISABLE_VPN_ENCRYPTION = "disableVpnEncryption";
  @SerializedName(SERIALIZED_NAME_DISABLE_VPN_ENCRYPTION)
  private Boolean disableVpnEncryption;

  public static final String SERIALIZED_NAME_OFFICE365_LOCAL_BREAKOUT_CATEGORY = "office365LocalBreakoutCategory";
  @SerializedName(SERIALIZED_NAME_OFFICE365_LOCAL_BREAKOUT_CATEGORY)
  private OfficeTrafficCategory office365LocalBreakoutCategory;

  public static final String SERIALIZED_NAME_P2_S_VPN_SERVER_CONFIGURATIONS = "p2SVpnServerConfigurations";
  @SerializedName(SERIALIZED_NAME_P2_S_VPN_SERVER_CONFIGURATIONS)
  private List<P2SVpnServerConfiguration> p2SVpnServerConfigurations = new ArrayList<>();

  /**
   * The current provisioning state.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    SUCCEEDED("Succeeded"),
    
    UPDATING("Updating"),
    
    DELETING("Deleting"),
    
    FAILED("Failed");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_SECURITY_PROVIDER_NAME = "securityProviderName";
  @SerializedName(SERIALIZED_NAME_SECURITY_PROVIDER_NAME)
  private String securityProviderName;

  public static final String SERIALIZED_NAME_VIRTUAL_HUBS = "virtualHubs";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_HUBS)
  private List<HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork> virtualHubs = new ArrayList<>();

  public static final String SERIALIZED_NAME_VPN_SITES = "vpnSites";
  @SerializedName(SERIALIZED_NAME_VPN_SITES)
  private List<HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork> vpnSites = new ArrayList<>();

  public VirtualWanProperties() {
  }

  public VirtualWanProperties(
     ProvisioningStateEnum provisioningState, 
     List<HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork> virtualHubs, 
     List<HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork> vpnSites
  ) {
    this();
    this.provisioningState = provisioningState;
    this.virtualHubs = virtualHubs;
    this.vpnSites = vpnSites;
  }

  public VirtualWanProperties allowBranchToBranchTraffic(Boolean allowBranchToBranchTraffic) {
    this.allowBranchToBranchTraffic = allowBranchToBranchTraffic;
    return this;
  }

  /**
   * True if branch to branch traffic is allowed.
   * @return allowBranchToBranchTraffic
   */
  @javax.annotation.Nullable
  public Boolean getAllowBranchToBranchTraffic() {
    return allowBranchToBranchTraffic;
  }

  public void setAllowBranchToBranchTraffic(Boolean allowBranchToBranchTraffic) {
    this.allowBranchToBranchTraffic = allowBranchToBranchTraffic;
  }


  public VirtualWanProperties allowVnetToVnetTraffic(Boolean allowVnetToVnetTraffic) {
    this.allowVnetToVnetTraffic = allowVnetToVnetTraffic;
    return this;
  }

  /**
   * True if Vnet to Vnet traffic is allowed.
   * @return allowVnetToVnetTraffic
   */
  @javax.annotation.Nullable
  public Boolean getAllowVnetToVnetTraffic() {
    return allowVnetToVnetTraffic;
  }

  public void setAllowVnetToVnetTraffic(Boolean allowVnetToVnetTraffic) {
    this.allowVnetToVnetTraffic = allowVnetToVnetTraffic;
  }


  public VirtualWanProperties disableVpnEncryption(Boolean disableVpnEncryption) {
    this.disableVpnEncryption = disableVpnEncryption;
    return this;
  }

  /**
   * Vpn encryption to be disabled or not.
   * @return disableVpnEncryption
   */
  @javax.annotation.Nullable
  public Boolean getDisableVpnEncryption() {
    return disableVpnEncryption;
  }

  public void setDisableVpnEncryption(Boolean disableVpnEncryption) {
    this.disableVpnEncryption = disableVpnEncryption;
  }


  public VirtualWanProperties office365LocalBreakoutCategory(OfficeTrafficCategory office365LocalBreakoutCategory) {
    this.office365LocalBreakoutCategory = office365LocalBreakoutCategory;
    return this;
  }

  /**
   * Get office365LocalBreakoutCategory
   * @return office365LocalBreakoutCategory
   */
  @javax.annotation.Nullable
  public OfficeTrafficCategory getOffice365LocalBreakoutCategory() {
    return office365LocalBreakoutCategory;
  }

  public void setOffice365LocalBreakoutCategory(OfficeTrafficCategory office365LocalBreakoutCategory) {
    this.office365LocalBreakoutCategory = office365LocalBreakoutCategory;
  }


  public VirtualWanProperties p2SVpnServerConfigurations(List<P2SVpnServerConfiguration> p2SVpnServerConfigurations) {
    this.p2SVpnServerConfigurations = p2SVpnServerConfigurations;
    return this;
  }

  public VirtualWanProperties addP2SVpnServerConfigurationsItem(P2SVpnServerConfiguration p2SVpnServerConfigurationsItem) {
    if (this.p2SVpnServerConfigurations == null) {
      this.p2SVpnServerConfigurations = new ArrayList<>();
    }
    this.p2SVpnServerConfigurations.add(p2SVpnServerConfigurationsItem);
    return this;
  }

  /**
   * List of all P2SVpnServerConfigurations associated with the virtual wan.
   * @return p2SVpnServerConfigurations
   */
  @javax.annotation.Nullable
  public List<P2SVpnServerConfiguration> getP2SVpnServerConfigurations() {
    return p2SVpnServerConfigurations;
  }

  public void setP2SVpnServerConfigurations(List<P2SVpnServerConfiguration> p2SVpnServerConfigurations) {
    this.p2SVpnServerConfigurations = p2SVpnServerConfigurations;
  }


  /**
   * The current provisioning state.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  public VirtualWanProperties securityProviderName(String securityProviderName) {
    this.securityProviderName = securityProviderName;
    return this;
  }

  /**
   * The Security Provider name.
   * @return securityProviderName
   */
  @javax.annotation.Nullable
  public String getSecurityProviderName() {
    return securityProviderName;
  }

  public void setSecurityProviderName(String securityProviderName) {
    this.securityProviderName = securityProviderName;
  }


  /**
   * List of VirtualHubs in the VirtualWAN.
   * @return virtualHubs
   */
  @javax.annotation.Nullable
  public List<HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork> getVirtualHubs() {
    return virtualHubs;
  }



  /**
   * List of VpnSites in the VirtualWAN.
   * @return vpnSites
   */
  @javax.annotation.Nullable
  public List<HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork> getVpnSites() {
    return vpnSites;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualWanProperties virtualWanProperties = (VirtualWanProperties) o;
    return Objects.equals(this.allowBranchToBranchTraffic, virtualWanProperties.allowBranchToBranchTraffic) &&
        Objects.equals(this.allowVnetToVnetTraffic, virtualWanProperties.allowVnetToVnetTraffic) &&
        Objects.equals(this.disableVpnEncryption, virtualWanProperties.disableVpnEncryption) &&
        Objects.equals(this.office365LocalBreakoutCategory, virtualWanProperties.office365LocalBreakoutCategory) &&
        Objects.equals(this.p2SVpnServerConfigurations, virtualWanProperties.p2SVpnServerConfigurations) &&
        Objects.equals(this.provisioningState, virtualWanProperties.provisioningState) &&
        Objects.equals(this.securityProviderName, virtualWanProperties.securityProviderName) &&
        Objects.equals(this.virtualHubs, virtualWanProperties.virtualHubs) &&
        Objects.equals(this.vpnSites, virtualWanProperties.vpnSites);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowBranchToBranchTraffic, allowVnetToVnetTraffic, disableVpnEncryption, office365LocalBreakoutCategory, p2SVpnServerConfigurations, provisioningState, securityProviderName, virtualHubs, vpnSites);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualWanProperties {\n");
    sb.append("    allowBranchToBranchTraffic: ").append(toIndentedString(allowBranchToBranchTraffic)).append("\n");
    sb.append("    allowVnetToVnetTraffic: ").append(toIndentedString(allowVnetToVnetTraffic)).append("\n");
    sb.append("    disableVpnEncryption: ").append(toIndentedString(disableVpnEncryption)).append("\n");
    sb.append("    office365LocalBreakoutCategory: ").append(toIndentedString(office365LocalBreakoutCategory)).append("\n");
    sb.append("    p2SVpnServerConfigurations: ").append(toIndentedString(p2SVpnServerConfigurations)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    securityProviderName: ").append(toIndentedString(securityProviderName)).append("\n");
    sb.append("    virtualHubs: ").append(toIndentedString(virtualHubs)).append("\n");
    sb.append("    vpnSites: ").append(toIndentedString(vpnSites)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowBranchToBranchTraffic");
    openapiFields.add("allowVnetToVnetTraffic");
    openapiFields.add("disableVpnEncryption");
    openapiFields.add("office365LocalBreakoutCategory");
    openapiFields.add("p2SVpnServerConfigurations");
    openapiFields.add("provisioningState");
    openapiFields.add("securityProviderName");
    openapiFields.add("virtualHubs");
    openapiFields.add("vpnSites");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualWanProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualWanProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualWanProperties is not found in the empty JSON string", VirtualWanProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualWanProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualWanProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `office365LocalBreakoutCategory`
      if (jsonObj.get("office365LocalBreakoutCategory") != null && !jsonObj.get("office365LocalBreakoutCategory").isJsonNull()) {
        OfficeTrafficCategory.validateJsonElement(jsonObj.get("office365LocalBreakoutCategory"));
      }
      if (jsonObj.get("p2SVpnServerConfigurations") != null && !jsonObj.get("p2SVpnServerConfigurations").isJsonNull()) {
        JsonArray jsonArrayp2SVpnServerConfigurations = jsonObj.getAsJsonArray("p2SVpnServerConfigurations");
        if (jsonArrayp2SVpnServerConfigurations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("p2SVpnServerConfigurations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `p2SVpnServerConfigurations` to be an array in the JSON string but got `%s`", jsonObj.get("p2SVpnServerConfigurations").toString()));
          }

          // validate the optional field `p2SVpnServerConfigurations` (array)
          for (int i = 0; i < jsonArrayp2SVpnServerConfigurations.size(); i++) {
            P2SVpnServerConfiguration.validateJsonElement(jsonArrayp2SVpnServerConfigurations.get(i));
          };
        }
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if ((jsonObj.get("securityProviderName") != null && !jsonObj.get("securityProviderName").isJsonNull()) && !jsonObj.get("securityProviderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `securityProviderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("securityProviderName").toString()));
      }
      if (jsonObj.get("virtualHubs") != null && !jsonObj.get("virtualHubs").isJsonNull()) {
        JsonArray jsonArrayvirtualHubs = jsonObj.getAsJsonArray("virtualHubs");
        if (jsonArrayvirtualHubs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("virtualHubs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `virtualHubs` to be an array in the JSON string but got `%s`", jsonObj.get("virtualHubs").toString()));
          }

          // validate the optional field `virtualHubs` (array)
          for (int i = 0; i < jsonArrayvirtualHubs.size(); i++) {
            HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork.validateJsonElement(jsonArrayvirtualHubs.get(i));
          };
        }
      }
      if (jsonObj.get("vpnSites") != null && !jsonObj.get("vpnSites").isJsonNull()) {
        JsonArray jsonArrayvpnSites = jsonObj.getAsJsonArray("vpnSites");
        if (jsonArrayvpnSites != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vpnSites").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vpnSites` to be an array in the JSON string but got `%s`", jsonObj.get("vpnSites").toString()));
          }

          // validate the optional field `vpnSites` (array)
          for (int i = 0; i < jsonArrayvpnSites.size(); i++) {
            HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork.validateJsonElement(jsonArrayvpnSites.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualWanProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualWanProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualWanProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualWanProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualWanProperties>() {
           @Override
           public void write(JsonWriter out, VirtualWanProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualWanProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualWanProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualWanProperties
   * @throws IOException if the JSON string is invalid with respect to VirtualWanProperties
   */
  public static VirtualWanProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualWanProperties.class);
  }

  /**
   * Convert an instance of VirtualWanProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

