/**
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner model module.
 * @module model/P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner
 * @version 2019-06-01
 */
class P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner {
    /**
     * Constructs a new <code>P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner</code>.
     * An IPSec Policy configuration for a virtual network gateway connection.
     * @alias module:model/P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner
     * @param dhGroup {module:model/P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner.DhGroupEnum} The DH Groups used in IKE Phase 1 for initial SA.
     * @param ikeEncryption {module:model/P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner.IkeEncryptionEnum} The IKE encryption algorithm (IKE phase 2).
     * @param ikeIntegrity {module:model/P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner.IkeIntegrityEnum} The IKE integrity algorithm (IKE phase 2).
     * @param ipsecEncryption {module:model/P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner.IpsecEncryptionEnum} The IPSec encryption algorithm (IKE phase 1).
     * @param ipsecIntegrity {module:model/P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner.IpsecIntegrityEnum} The IPSec integrity algorithm (IKE phase 1).
     * @param pfsGroup {module:model/P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner.PfsGroupEnum} The Pfs Groups used in IKE Phase 2 for new child SA.
     * @param saDataSizeKilobytes {Number} The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for a site to site VPN tunnel.
     * @param saLifeTimeSeconds {Number} The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.
     */
    constructor(dhGroup, ikeEncryption, ikeIntegrity, ipsecEncryption, ipsecIntegrity, pfsGroup, saDataSizeKilobytes, saLifeTimeSeconds) { 
        
        P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner.initialize(this, dhGroup, ikeEncryption, ikeIntegrity, ipsecEncryption, ipsecIntegrity, pfsGroup, saDataSizeKilobytes, saLifeTimeSeconds);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dhGroup, ikeEncryption, ikeIntegrity, ipsecEncryption, ipsecIntegrity, pfsGroup, saDataSizeKilobytes, saLifeTimeSeconds) { 
        obj['dhGroup'] = dhGroup;
        obj['ikeEncryption'] = ikeEncryption;
        obj['ikeIntegrity'] = ikeIntegrity;
        obj['ipsecEncryption'] = ipsecEncryption;
        obj['ipsecIntegrity'] = ipsecIntegrity;
        obj['pfsGroup'] = pfsGroup;
        obj['saDataSizeKilobytes'] = saDataSizeKilobytes;
        obj['saLifeTimeSeconds'] = saLifeTimeSeconds;
    }

    /**
     * Constructs a <code>P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner} obj Optional instance to populate.
     * @return {module:model/P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner} The populated <code>P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner();

            if (data.hasOwnProperty('dhGroup')) {
                obj['dhGroup'] = ApiClient.convertToType(data['dhGroup'], 'String');
            }
            if (data.hasOwnProperty('ikeEncryption')) {
                obj['ikeEncryption'] = ApiClient.convertToType(data['ikeEncryption'], 'String');
            }
            if (data.hasOwnProperty('ikeIntegrity')) {
                obj['ikeIntegrity'] = ApiClient.convertToType(data['ikeIntegrity'], 'String');
            }
            if (data.hasOwnProperty('ipsecEncryption')) {
                obj['ipsecEncryption'] = ApiClient.convertToType(data['ipsecEncryption'], 'String');
            }
            if (data.hasOwnProperty('ipsecIntegrity')) {
                obj['ipsecIntegrity'] = ApiClient.convertToType(data['ipsecIntegrity'], 'String');
            }
            if (data.hasOwnProperty('pfsGroup')) {
                obj['pfsGroup'] = ApiClient.convertToType(data['pfsGroup'], 'String');
            }
            if (data.hasOwnProperty('saDataSizeKilobytes')) {
                obj['saDataSizeKilobytes'] = ApiClient.convertToType(data['saDataSizeKilobytes'], 'Number');
            }
            if (data.hasOwnProperty('saLifeTimeSeconds')) {
                obj['saLifeTimeSeconds'] = ApiClient.convertToType(data['saLifeTimeSeconds'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dhGroup'] && !(typeof data['dhGroup'] === 'string' || data['dhGroup'] instanceof String)) {
            throw new Error("Expected the field `dhGroup` to be a primitive type in the JSON string but got " + data['dhGroup']);
        }
        // ensure the json data is a string
        if (data['ikeEncryption'] && !(typeof data['ikeEncryption'] === 'string' || data['ikeEncryption'] instanceof String)) {
            throw new Error("Expected the field `ikeEncryption` to be a primitive type in the JSON string but got " + data['ikeEncryption']);
        }
        // ensure the json data is a string
        if (data['ikeIntegrity'] && !(typeof data['ikeIntegrity'] === 'string' || data['ikeIntegrity'] instanceof String)) {
            throw new Error("Expected the field `ikeIntegrity` to be a primitive type in the JSON string but got " + data['ikeIntegrity']);
        }
        // ensure the json data is a string
        if (data['ipsecEncryption'] && !(typeof data['ipsecEncryption'] === 'string' || data['ipsecEncryption'] instanceof String)) {
            throw new Error("Expected the field `ipsecEncryption` to be a primitive type in the JSON string but got " + data['ipsecEncryption']);
        }
        // ensure the json data is a string
        if (data['ipsecIntegrity'] && !(typeof data['ipsecIntegrity'] === 'string' || data['ipsecIntegrity'] instanceof String)) {
            throw new Error("Expected the field `ipsecIntegrity` to be a primitive type in the JSON string but got " + data['ipsecIntegrity']);
        }
        // ensure the json data is a string
        if (data['pfsGroup'] && !(typeof data['pfsGroup'] === 'string' || data['pfsGroup'] instanceof String)) {
            throw new Error("Expected the field `pfsGroup` to be a primitive type in the JSON string but got " + data['pfsGroup']);
        }

        return true;
    }


}

P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner.RequiredProperties = ["dhGroup", "ikeEncryption", "ikeIntegrity", "ipsecEncryption", "ipsecIntegrity", "pfsGroup", "saDataSizeKilobytes", "saLifeTimeSeconds"];

/**
 * The DH Groups used in IKE Phase 1 for initial SA.
 * @member {module:model/P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner.DhGroupEnum} dhGroup
 */
P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner.prototype['dhGroup'] = undefined;

/**
 * The IKE encryption algorithm (IKE phase 2).
 * @member {module:model/P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner.IkeEncryptionEnum} ikeEncryption
 */
P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner.prototype['ikeEncryption'] = undefined;

/**
 * The IKE integrity algorithm (IKE phase 2).
 * @member {module:model/P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner.IkeIntegrityEnum} ikeIntegrity
 */
P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner.prototype['ikeIntegrity'] = undefined;

/**
 * The IPSec encryption algorithm (IKE phase 1).
 * @member {module:model/P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner.IpsecEncryptionEnum} ipsecEncryption
 */
P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner.prototype['ipsecEncryption'] = undefined;

/**
 * The IPSec integrity algorithm (IKE phase 1).
 * @member {module:model/P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner.IpsecIntegrityEnum} ipsecIntegrity
 */
P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner.prototype['ipsecIntegrity'] = undefined;

/**
 * The Pfs Groups used in IKE Phase 2 for new child SA.
 * @member {module:model/P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner.PfsGroupEnum} pfsGroup
 */
P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner.prototype['pfsGroup'] = undefined;

/**
 * The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for a site to site VPN tunnel.
 * @member {Number} saDataSizeKilobytes
 */
P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner.prototype['saDataSizeKilobytes'] = undefined;

/**
 * The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.
 * @member {Number} saLifeTimeSeconds
 */
P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner.prototype['saLifeTimeSeconds'] = undefined;





/**
 * Allowed values for the <code>dhGroup</code> property.
 * @enum {String}
 * @readonly
 */
P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner['DhGroupEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "DHGroup1"
     * @const
     */
    "DHGroup1": "DHGroup1",

    /**
     * value: "DHGroup2"
     * @const
     */
    "DHGroup2": "DHGroup2",

    /**
     * value: "DHGroup14"
     * @const
     */
    "DHGroup14": "DHGroup14",

    /**
     * value: "DHGroup2048"
     * @const
     */
    "DHGroup2048": "DHGroup2048",

    /**
     * value: "ECP256"
     * @const
     */
    "ECP256": "ECP256",

    /**
     * value: "ECP384"
     * @const
     */
    "ECP384": "ECP384",

    /**
     * value: "DHGroup24"
     * @const
     */
    "DHGroup24": "DHGroup24"
};


/**
 * Allowed values for the <code>ikeEncryption</code> property.
 * @enum {String}
 * @readonly
 */
P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner['IkeEncryptionEnum'] = {

    /**
     * value: "DES"
     * @const
     */
    "DES": "DES",

    /**
     * value: "DES3"
     * @const
     */
    "DES3": "DES3",

    /**
     * value: "AES128"
     * @const
     */
    "AES128": "AES128",

    /**
     * value: "AES192"
     * @const
     */
    "AES192": "AES192",

    /**
     * value: "AES256"
     * @const
     */
    "AES256": "AES256",

    /**
     * value: "GCMAES256"
     * @const
     */
    "GCMAES256": "GCMAES256",

    /**
     * value: "GCMAES128"
     * @const
     */
    "GCMAES128": "GCMAES128"
};


/**
 * Allowed values for the <code>ikeIntegrity</code> property.
 * @enum {String}
 * @readonly
 */
P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner['IkeIntegrityEnum'] = {

    /**
     * value: "MD5"
     * @const
     */
    "MD5": "MD5",

    /**
     * value: "SHA1"
     * @const
     */
    "SHA1": "SHA1",

    /**
     * value: "SHA256"
     * @const
     */
    "SHA256": "SHA256",

    /**
     * value: "SHA384"
     * @const
     */
    "SHA384": "SHA384",

    /**
     * value: "GCMAES256"
     * @const
     */
    "GCMAES256": "GCMAES256",

    /**
     * value: "GCMAES128"
     * @const
     */
    "GCMAES128": "GCMAES128"
};


/**
 * Allowed values for the <code>ipsecEncryption</code> property.
 * @enum {String}
 * @readonly
 */
P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner['IpsecEncryptionEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "DES"
     * @const
     */
    "DES": "DES",

    /**
     * value: "DES3"
     * @const
     */
    "DES3": "DES3",

    /**
     * value: "AES128"
     * @const
     */
    "AES128": "AES128",

    /**
     * value: "AES192"
     * @const
     */
    "AES192": "AES192",

    /**
     * value: "AES256"
     * @const
     */
    "AES256": "AES256",

    /**
     * value: "GCMAES128"
     * @const
     */
    "GCMAES128": "GCMAES128",

    /**
     * value: "GCMAES192"
     * @const
     */
    "GCMAES192": "GCMAES192",

    /**
     * value: "GCMAES256"
     * @const
     */
    "GCMAES256": "GCMAES256"
};


/**
 * Allowed values for the <code>ipsecIntegrity</code> property.
 * @enum {String}
 * @readonly
 */
P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner['IpsecIntegrityEnum'] = {

    /**
     * value: "MD5"
     * @const
     */
    "MD5": "MD5",

    /**
     * value: "SHA1"
     * @const
     */
    "SHA1": "SHA1",

    /**
     * value: "SHA256"
     * @const
     */
    "SHA256": "SHA256",

    /**
     * value: "GCMAES128"
     * @const
     */
    "GCMAES128": "GCMAES128",

    /**
     * value: "GCMAES192"
     * @const
     */
    "GCMAES192": "GCMAES192",

    /**
     * value: "GCMAES256"
     * @const
     */
    "GCMAES256": "GCMAES256"
};


/**
 * Allowed values for the <code>pfsGroup</code> property.
 * @enum {String}
 * @readonly
 */
P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner['PfsGroupEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "PFS1"
     * @const
     */
    "PFS1": "PFS1",

    /**
     * value: "PFS2"
     * @const
     */
    "PFS2": "PFS2",

    /**
     * value: "PFS2048"
     * @const
     */
    "PFS2048": "PFS2048",

    /**
     * value: "ECP256"
     * @const
     */
    "ECP256": "ECP256",

    /**
     * value: "ECP384"
     * @const
     */
    "ECP384": "ECP384",

    /**
     * value: "PFS24"
     * @const
     */
    "PFS24": "PFS24",

    /**
     * value: "PFS14"
     * @const
     */
    "PFS14": "PFS14",

    /**
     * value: "PFSMM"
     * @const
     */
    "PFSMM": "PFSMM"
};



export default P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner;

