/**
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2018-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetVpnSitesConfigurationRequest from '../model/GetVpnSitesConfigurationRequest';
import HubVirtualNetworkConnection from '../model/HubVirtualNetworkConnection';
import ListHubVirtualNetworkConnectionsResult from '../model/ListHubVirtualNetworkConnectionsResult';
import ListP2SVpnGatewaysResult from '../model/ListP2SVpnGatewaysResult';
import ListP2SVpnServerConfigurationsResult from '../model/ListP2SVpnServerConfigurationsResult';
import ListVirtualHubsResult from '../model/ListVirtualHubsResult';
import ListVirtualWANsResult from '../model/ListVirtualWANsResult';
import ListVpnConnectionsResult from '../model/ListVpnConnectionsResult';
import ListVpnGatewaysResult from '../model/ListVpnGatewaysResult';
import ListVpnSitesResult from '../model/ListVpnSitesResult';
import P2SVpnGateway from '../model/P2SVpnGateway';
import P2SVpnServerConfiguration from '../model/P2SVpnServerConfiguration';
import P2sVpnGatewaysListDefaultResponse from '../model/P2sVpnGatewaysListDefaultResponse';
import VirtualHub from '../model/VirtualHub';
import VirtualWAN from '../model/VirtualWAN';
import VirtualWanSecurityProviders from '../model/VirtualWanSecurityProviders';
import VpnConnection from '../model/VpnConnection';
import VpnGateway from '../model/VpnGateway';
import VpnSite from '../model/VpnSite';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-08-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the hubVirtualNetworkConnectionsGet operation.
     * @callback module:api/DefaultApi~hubVirtualNetworkConnectionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HubVirtualNetworkConnection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the details of a HubVirtualNetworkConnection.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name of the VirtualHub.
     * @param {String} virtualHubName The name of the VirtualHub.
     * @param {String} connectionName The name of the vpn connection.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DefaultApi~hubVirtualNetworkConnectionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HubVirtualNetworkConnection}
     */
    hubVirtualNetworkConnectionsGet(subscriptionId, resourceGroupName, virtualHubName, connectionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hubVirtualNetworkConnectionsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hubVirtualNetworkConnectionsGet");
      }
      // verify the required parameter 'virtualHubName' is set
      if (virtualHubName === undefined || virtualHubName === null) {
        throw new Error("Missing the required parameter 'virtualHubName' when calling hubVirtualNetworkConnectionsGet");
      }
      // verify the required parameter 'connectionName' is set
      if (connectionName === undefined || connectionName === null) {
        throw new Error("Missing the required parameter 'connectionName' when calling hubVirtualNetworkConnectionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hubVirtualNetworkConnectionsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'virtualHubName': virtualHubName,
        'connectionName': connectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HubVirtualNetworkConnection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{virtualHubName}/hubVirtualNetworkConnections/{connectionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hubVirtualNetworkConnectionsList operation.
     * @callback module:api/DefaultApi~hubVirtualNetworkConnectionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListHubVirtualNetworkConnectionsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the details of all HubVirtualNetworkConnections.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name of the VirtualHub.
     * @param {String} virtualHubName The name of the VirtualHub.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DefaultApi~hubVirtualNetworkConnectionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListHubVirtualNetworkConnectionsResult}
     */
    hubVirtualNetworkConnectionsList(subscriptionId, resourceGroupName, virtualHubName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hubVirtualNetworkConnectionsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hubVirtualNetworkConnectionsList");
      }
      // verify the required parameter 'virtualHubName' is set
      if (virtualHubName === undefined || virtualHubName === null) {
        throw new Error("Missing the required parameter 'virtualHubName' when calling hubVirtualNetworkConnectionsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hubVirtualNetworkConnectionsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'virtualHubName': virtualHubName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListHubVirtualNetworkConnectionsResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{virtualHubName}/hubVirtualNetworkConnections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the p2sVpnGatewaysCreateOrUpdate operation.
     * @callback module:api/DefaultApi~p2sVpnGatewaysCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/P2SVpnGateway} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a virtual wan p2s vpn gateway if it doesn't exist else updates the existing gateway.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name of the P2SVpnGateway.
     * @param {String} gatewayName The name of the gateway.
     * @param {String} apiVersion Client API version.
     * @param {module:model/P2SVpnGateway} p2SVpnGatewayParameters Parameters supplied to create or Update a virtual wan p2s vpn gateway.
     * @param {module:api/DefaultApi~p2sVpnGatewaysCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/P2SVpnGateway}
     */
    p2sVpnGatewaysCreateOrUpdate(subscriptionId, resourceGroupName, gatewayName, apiVersion, p2SVpnGatewayParameters, callback) {
      let postBody = p2SVpnGatewayParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling p2sVpnGatewaysCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling p2sVpnGatewaysCreateOrUpdate");
      }
      // verify the required parameter 'gatewayName' is set
      if (gatewayName === undefined || gatewayName === null) {
        throw new Error("Missing the required parameter 'gatewayName' when calling p2sVpnGatewaysCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling p2sVpnGatewaysCreateOrUpdate");
      }
      // verify the required parameter 'p2SVpnGatewayParameters' is set
      if (p2SVpnGatewayParameters === undefined || p2SVpnGatewayParameters === null) {
        throw new Error("Missing the required parameter 'p2SVpnGatewayParameters' when calling p2sVpnGatewaysCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'gatewayName': gatewayName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = P2SVpnGateway;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/p2svpnGateways/{gatewayName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the p2sVpnGatewaysDelete operation.
     * @callback module:api/DefaultApi~p2sVpnGatewaysDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a virtual wan p2s vpn gateway.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name of the P2SVpnGateway.
     * @param {String} gatewayName The name of the gateway.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DefaultApi~p2sVpnGatewaysDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    p2sVpnGatewaysDelete(subscriptionId, resourceGroupName, gatewayName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling p2sVpnGatewaysDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling p2sVpnGatewaysDelete");
      }
      // verify the required parameter 'gatewayName' is set
      if (gatewayName === undefined || gatewayName === null) {
        throw new Error("Missing the required parameter 'gatewayName' when calling p2sVpnGatewaysDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling p2sVpnGatewaysDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'gatewayName': gatewayName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/p2svpnGateways/{gatewayName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the p2sVpnGatewaysGet operation.
     * @callback module:api/DefaultApi~p2sVpnGatewaysGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/P2SVpnGateway} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the details of a virtual wan p2s vpn gateway.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name of the P2SVpnGateway.
     * @param {String} gatewayName The name of the gateway.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DefaultApi~p2sVpnGatewaysGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/P2SVpnGateway}
     */
    p2sVpnGatewaysGet(subscriptionId, resourceGroupName, gatewayName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling p2sVpnGatewaysGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling p2sVpnGatewaysGet");
      }
      // verify the required parameter 'gatewayName' is set
      if (gatewayName === undefined || gatewayName === null) {
        throw new Error("Missing the required parameter 'gatewayName' when calling p2sVpnGatewaysGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling p2sVpnGatewaysGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'gatewayName': gatewayName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = P2SVpnGateway;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/p2svpnGateways/{gatewayName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the p2sVpnGatewaysList operation.
     * @callback module:api/DefaultApi~p2sVpnGatewaysListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListP2SVpnGatewaysResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the P2SVpnGateways in a subscription.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DefaultApi~p2sVpnGatewaysListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListP2SVpnGatewaysResult}
     */
    p2sVpnGatewaysList(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling p2sVpnGatewaysList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling p2sVpnGatewaysList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListP2SVpnGatewaysResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Network/p2svpnGateways', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the p2sVpnGatewaysListByResourceGroup operation.
     * @callback module:api/DefaultApi~p2sVpnGatewaysListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListP2SVpnGatewaysResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the P2SVpnGateways in a resource group.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name of the P2SVpnGateway.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DefaultApi~p2sVpnGatewaysListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListP2SVpnGatewaysResult}
     */
    p2sVpnGatewaysListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling p2sVpnGatewaysListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling p2sVpnGatewaysListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling p2sVpnGatewaysListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListP2SVpnGatewaysResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/p2svpnGateways', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the p2sVpnServerConfigurationsCreateOrUpdate operation.
     * @callback module:api/DefaultApi~p2sVpnServerConfigurationsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/P2SVpnServerConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a P2SVpnServerConfiguration to associate with a VirtualWan if it doesn't exist else updates the existing P2SVpnServerConfiguration.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name of the VirtualWan.
     * @param {String} virtualWanName The name of the VirtualWan.
     * @param {String} p2SVpnServerConfigurationName The name of the P2SVpnServerConfiguration.
     * @param {String} apiVersion Client API version.
     * @param {module:model/P2SVpnServerConfiguration} p2SVpnServerConfigurationParameters Parameters supplied to create or Update a P2SVpnServerConfiguration.
     * @param {module:api/DefaultApi~p2sVpnServerConfigurationsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/P2SVpnServerConfiguration}
     */
    p2sVpnServerConfigurationsCreateOrUpdate(subscriptionId, resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, apiVersion, p2SVpnServerConfigurationParameters, callback) {
      let postBody = p2SVpnServerConfigurationParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling p2sVpnServerConfigurationsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling p2sVpnServerConfigurationsCreateOrUpdate");
      }
      // verify the required parameter 'virtualWanName' is set
      if (virtualWanName === undefined || virtualWanName === null) {
        throw new Error("Missing the required parameter 'virtualWanName' when calling p2sVpnServerConfigurationsCreateOrUpdate");
      }
      // verify the required parameter 'p2SVpnServerConfigurationName' is set
      if (p2SVpnServerConfigurationName === undefined || p2SVpnServerConfigurationName === null) {
        throw new Error("Missing the required parameter 'p2SVpnServerConfigurationName' when calling p2sVpnServerConfigurationsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling p2sVpnServerConfigurationsCreateOrUpdate");
      }
      // verify the required parameter 'p2SVpnServerConfigurationParameters' is set
      if (p2SVpnServerConfigurationParameters === undefined || p2SVpnServerConfigurationParameters === null) {
        throw new Error("Missing the required parameter 'p2SVpnServerConfigurationParameters' when calling p2sVpnServerConfigurationsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'virtualWanName': virtualWanName,
        'p2SVpnServerConfigurationName': p2SVpnServerConfigurationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = P2SVpnServerConfiguration;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWanName}/p2sVpnServerConfigurations/{p2SVpnServerConfigurationName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the p2sVpnServerConfigurationsDelete operation.
     * @callback module:api/DefaultApi~p2sVpnServerConfigurationsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a P2SVpnServerConfiguration.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name of the P2SVpnServerConfiguration.
     * @param {String} virtualWanName The name of the VirtualWan.
     * @param {String} p2SVpnServerConfigurationName The name of the P2SVpnServerConfiguration.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DefaultApi~p2sVpnServerConfigurationsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    p2sVpnServerConfigurationsDelete(subscriptionId, resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling p2sVpnServerConfigurationsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling p2sVpnServerConfigurationsDelete");
      }
      // verify the required parameter 'virtualWanName' is set
      if (virtualWanName === undefined || virtualWanName === null) {
        throw new Error("Missing the required parameter 'virtualWanName' when calling p2sVpnServerConfigurationsDelete");
      }
      // verify the required parameter 'p2SVpnServerConfigurationName' is set
      if (p2SVpnServerConfigurationName === undefined || p2SVpnServerConfigurationName === null) {
        throw new Error("Missing the required parameter 'p2SVpnServerConfigurationName' when calling p2sVpnServerConfigurationsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling p2sVpnServerConfigurationsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'virtualWanName': virtualWanName,
        'p2SVpnServerConfigurationName': p2SVpnServerConfigurationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWanName}/p2sVpnServerConfigurations/{p2SVpnServerConfigurationName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the p2sVpnServerConfigurationsGet operation.
     * @callback module:api/DefaultApi~p2sVpnServerConfigurationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/P2SVpnServerConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the details of a P2SVpnServerConfiguration.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name of the P2SVpnServerConfiguration.
     * @param {String} virtualWanName The name of the VirtualWan.
     * @param {String} p2SVpnServerConfigurationName The name of the P2SVpnServerConfiguration.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DefaultApi~p2sVpnServerConfigurationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/P2SVpnServerConfiguration}
     */
    p2sVpnServerConfigurationsGet(subscriptionId, resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling p2sVpnServerConfigurationsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling p2sVpnServerConfigurationsGet");
      }
      // verify the required parameter 'virtualWanName' is set
      if (virtualWanName === undefined || virtualWanName === null) {
        throw new Error("Missing the required parameter 'virtualWanName' when calling p2sVpnServerConfigurationsGet");
      }
      // verify the required parameter 'p2SVpnServerConfigurationName' is set
      if (p2SVpnServerConfigurationName === undefined || p2SVpnServerConfigurationName === null) {
        throw new Error("Missing the required parameter 'p2SVpnServerConfigurationName' when calling p2sVpnServerConfigurationsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling p2sVpnServerConfigurationsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'virtualWanName': virtualWanName,
        'p2SVpnServerConfigurationName': p2SVpnServerConfigurationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = P2SVpnServerConfiguration;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWanName}/p2sVpnServerConfigurations/{p2SVpnServerConfigurationName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the p2sVpnServerConfigurationsListByVirtualWan operation.
     * @callback module:api/DefaultApi~p2sVpnServerConfigurationsListByVirtualWanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListP2SVpnServerConfigurationsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all P2SVpnServerConfigurations for a particular VirtualWan.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name of the VirtualWan.
     * @param {String} virtualWanName The name of the VirtualWan.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DefaultApi~p2sVpnServerConfigurationsListByVirtualWanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListP2SVpnServerConfigurationsResult}
     */
    p2sVpnServerConfigurationsListByVirtualWan(subscriptionId, resourceGroupName, virtualWanName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling p2sVpnServerConfigurationsListByVirtualWan");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling p2sVpnServerConfigurationsListByVirtualWan");
      }
      // verify the required parameter 'virtualWanName' is set
      if (virtualWanName === undefined || virtualWanName === null) {
        throw new Error("Missing the required parameter 'virtualWanName' when calling p2sVpnServerConfigurationsListByVirtualWan");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling p2sVpnServerConfigurationsListByVirtualWan");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'virtualWanName': virtualWanName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListP2SVpnServerConfigurationsResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWanName}/p2sVpnServerConfigurations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the supportedSecurityProviders operation.
     * @callback module:api/DefaultApi~supportedSecurityProvidersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualWanSecurityProviders} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gives the supported security providers for the virtual wan.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} virtualWANName The name of the VirtualWAN for which supported security providers are needed.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DefaultApi~supportedSecurityProvidersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualWanSecurityProviders}
     */
    supportedSecurityProviders(subscriptionId, resourceGroupName, virtualWANName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling supportedSecurityProviders");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling supportedSecurityProviders");
      }
      // verify the required parameter 'virtualWANName' is set
      if (virtualWANName === undefined || virtualWANName === null) {
        throw new Error("Missing the required parameter 'virtualWANName' when calling supportedSecurityProviders");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling supportedSecurityProviders");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'virtualWANName': virtualWANName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VirtualWanSecurityProviders;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWANName}/supportedSecurityProviders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualHubsCreateOrUpdate operation.
     * @callback module:api/DefaultApi~virtualHubsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualHub} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a VirtualHub resource if it doesn't exist else updates the existing VirtualHub.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name of the VirtualHub.
     * @param {String} virtualHubName The name of the VirtualHub.
     * @param {String} apiVersion Client API version.
     * @param {module:model/VirtualHub} virtualHubParameters Parameters supplied to create or update VirtualHub.
     * @param {module:api/DefaultApi~virtualHubsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualHub}
     */
    virtualHubsCreateOrUpdate(subscriptionId, resourceGroupName, virtualHubName, apiVersion, virtualHubParameters, callback) {
      let postBody = virtualHubParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualHubsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling virtualHubsCreateOrUpdate");
      }
      // verify the required parameter 'virtualHubName' is set
      if (virtualHubName === undefined || virtualHubName === null) {
        throw new Error("Missing the required parameter 'virtualHubName' when calling virtualHubsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualHubsCreateOrUpdate");
      }
      // verify the required parameter 'virtualHubParameters' is set
      if (virtualHubParameters === undefined || virtualHubParameters === null) {
        throw new Error("Missing the required parameter 'virtualHubParameters' when calling virtualHubsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'virtualHubName': virtualHubName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VirtualHub;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{virtualHubName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualHubsDelete operation.
     * @callback module:api/DefaultApi~virtualHubsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a VirtualHub.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name of the VirtualHub.
     * @param {String} virtualHubName The name of the VirtualHub.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DefaultApi~virtualHubsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualHubsDelete(subscriptionId, resourceGroupName, virtualHubName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualHubsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling virtualHubsDelete");
      }
      // verify the required parameter 'virtualHubName' is set
      if (virtualHubName === undefined || virtualHubName === null) {
        throw new Error("Missing the required parameter 'virtualHubName' when calling virtualHubsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualHubsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'virtualHubName': virtualHubName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{virtualHubName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualHubsGet operation.
     * @callback module:api/DefaultApi~virtualHubsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualHub} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the details of a VirtualHub.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name of the VirtualHub.
     * @param {String} virtualHubName The name of the VirtualHub.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DefaultApi~virtualHubsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualHub}
     */
    virtualHubsGet(subscriptionId, resourceGroupName, virtualHubName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualHubsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling virtualHubsGet");
      }
      // verify the required parameter 'virtualHubName' is set
      if (virtualHubName === undefined || virtualHubName === null) {
        throw new Error("Missing the required parameter 'virtualHubName' when calling virtualHubsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualHubsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'virtualHubName': virtualHubName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VirtualHub;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{virtualHubName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualHubsList operation.
     * @callback module:api/DefaultApi~virtualHubsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVirtualHubsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the VirtualHubs in a subscription.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DefaultApi~virtualHubsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVirtualHubsResult}
     */
    virtualHubsList(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualHubsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualHubsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListVirtualHubsResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Network/virtualHubs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualHubsListByResourceGroup operation.
     * @callback module:api/DefaultApi~virtualHubsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVirtualHubsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the VirtualHubs in a resource group.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name of the VirtualHub.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DefaultApi~virtualHubsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVirtualHubsResult}
     */
    virtualHubsListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualHubsListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling virtualHubsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualHubsListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListVirtualHubsResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualWansCreateOrUpdate operation.
     * @callback module:api/DefaultApi~virtualWansCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualWAN} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a VirtualWAN resource if it doesn't exist else updates the existing VirtualWAN.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name of the VirtualWan.
     * @param {String} virtualWANName The name of the VirtualWAN being created or updated.
     * @param {String} apiVersion Client API version.
     * @param {module:model/VirtualWAN} wANParameters Parameters supplied to create or update VirtualWAN.
     * @param {module:api/DefaultApi~virtualWansCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualWAN}
     */
    virtualWansCreateOrUpdate(subscriptionId, resourceGroupName, virtualWANName, apiVersion, wANParameters, callback) {
      let postBody = wANParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualWansCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling virtualWansCreateOrUpdate");
      }
      // verify the required parameter 'virtualWANName' is set
      if (virtualWANName === undefined || virtualWANName === null) {
        throw new Error("Missing the required parameter 'virtualWANName' when calling virtualWansCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualWansCreateOrUpdate");
      }
      // verify the required parameter 'wANParameters' is set
      if (wANParameters === undefined || wANParameters === null) {
        throw new Error("Missing the required parameter 'wANParameters' when calling virtualWansCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'VirtualWANName': virtualWANName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VirtualWAN;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{VirtualWANName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualWansDelete operation.
     * @callback module:api/DefaultApi~virtualWansDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a VirtualWAN.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name of the VirtualWan.
     * @param {String} virtualWANName The name of the VirtualWAN being deleted.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DefaultApi~virtualWansDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualWansDelete(subscriptionId, resourceGroupName, virtualWANName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualWansDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling virtualWansDelete");
      }
      // verify the required parameter 'virtualWANName' is set
      if (virtualWANName === undefined || virtualWANName === null) {
        throw new Error("Missing the required parameter 'virtualWANName' when calling virtualWansDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualWansDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'VirtualWANName': virtualWANName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{VirtualWANName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualWansGet operation.
     * @callback module:api/DefaultApi~virtualWansGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualWAN} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the details of a VirtualWAN.
     * @param {String} resourceGroupName The resource group name of the VirtualWan.
     * @param {String} virtualWANName The name of the VirtualWAN being retrieved.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/DefaultApi~virtualWansGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualWAN}
     */
    virtualWansGet(resourceGroupName, virtualWANName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling virtualWansGet");
      }
      // verify the required parameter 'virtualWANName' is set
      if (virtualWANName === undefined || virtualWANName === null) {
        throw new Error("Missing the required parameter 'virtualWANName' when calling virtualWansGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualWansGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualWansGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'VirtualWANName': virtualWANName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VirtualWAN;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{VirtualWANName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualWansList operation.
     * @callback module:api/DefaultApi~virtualWansListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVirtualWANsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the VirtualWANs in a subscription.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DefaultApi~virtualWansListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVirtualWANsResult}
     */
    virtualWansList(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualWansList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualWansList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListVirtualWANsResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Network/virtualWans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualWansListByResourceGroup operation.
     * @callback module:api/DefaultApi~virtualWansListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVirtualWANsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the VirtualWANs in a resource group.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name of the VirtualWan.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DefaultApi~virtualWansListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVirtualWANsResult}
     */
    virtualWansListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualWansListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling virtualWansListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualWansListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListVirtualWANsResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vpnConnectionsCreateOrUpdate operation.
     * @callback module:api/DefaultApi~vpnConnectionsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VpnConnection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a vpn connection to a scalable vpn gateway if it doesn't exist else updates the existing connection.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name of the VpnGateway.
     * @param {String} gatewayName The name of the gateway.
     * @param {String} connectionName The name of the connection.
     * @param {String} apiVersion Client API version.
     * @param {module:model/VpnConnection} vpnConnectionParameters Parameters supplied to create or Update a VPN Connection.
     * @param {module:api/DefaultApi~vpnConnectionsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VpnConnection}
     */
    vpnConnectionsCreateOrUpdate(subscriptionId, resourceGroupName, gatewayName, connectionName, apiVersion, vpnConnectionParameters, callback) {
      let postBody = vpnConnectionParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vpnConnectionsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling vpnConnectionsCreateOrUpdate");
      }
      // verify the required parameter 'gatewayName' is set
      if (gatewayName === undefined || gatewayName === null) {
        throw new Error("Missing the required parameter 'gatewayName' when calling vpnConnectionsCreateOrUpdate");
      }
      // verify the required parameter 'connectionName' is set
      if (connectionName === undefined || connectionName === null) {
        throw new Error("Missing the required parameter 'connectionName' when calling vpnConnectionsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vpnConnectionsCreateOrUpdate");
      }
      // verify the required parameter 'vpnConnectionParameters' is set
      if (vpnConnectionParameters === undefined || vpnConnectionParameters === null) {
        throw new Error("Missing the required parameter 'vpnConnectionParameters' when calling vpnConnectionsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'gatewayName': gatewayName,
        'connectionName': connectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VpnConnection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/vpnConnections/{connectionName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vpnConnectionsDelete operation.
     * @callback module:api/DefaultApi~vpnConnectionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a vpn connection.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name of the VpnGateway.
     * @param {String} gatewayName The name of the gateway.
     * @param {String} connectionName The name of the connection.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DefaultApi~vpnConnectionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vpnConnectionsDelete(subscriptionId, resourceGroupName, gatewayName, connectionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vpnConnectionsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling vpnConnectionsDelete");
      }
      // verify the required parameter 'gatewayName' is set
      if (gatewayName === undefined || gatewayName === null) {
        throw new Error("Missing the required parameter 'gatewayName' when calling vpnConnectionsDelete");
      }
      // verify the required parameter 'connectionName' is set
      if (connectionName === undefined || connectionName === null) {
        throw new Error("Missing the required parameter 'connectionName' when calling vpnConnectionsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vpnConnectionsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'gatewayName': gatewayName,
        'connectionName': connectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/vpnConnections/{connectionName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vpnConnectionsGet operation.
     * @callback module:api/DefaultApi~vpnConnectionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VpnConnection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the details of a vpn connection.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name of the VpnGateway.
     * @param {String} gatewayName The name of the gateway.
     * @param {String} connectionName The name of the vpn connection.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DefaultApi~vpnConnectionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VpnConnection}
     */
    vpnConnectionsGet(subscriptionId, resourceGroupName, gatewayName, connectionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vpnConnectionsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling vpnConnectionsGet");
      }
      // verify the required parameter 'gatewayName' is set
      if (gatewayName === undefined || gatewayName === null) {
        throw new Error("Missing the required parameter 'gatewayName' when calling vpnConnectionsGet");
      }
      // verify the required parameter 'connectionName' is set
      if (connectionName === undefined || connectionName === null) {
        throw new Error("Missing the required parameter 'connectionName' when calling vpnConnectionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vpnConnectionsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'gatewayName': gatewayName,
        'connectionName': connectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VpnConnection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/vpnConnections/{connectionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vpnConnectionsListByVpnGateway operation.
     * @callback module:api/DefaultApi~vpnConnectionsListByVpnGatewayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVpnConnectionsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all vpn connections for a particular virtual wan vpn gateway.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name of the VpnGateway.
     * @param {String} gatewayName The name of the gateway.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DefaultApi~vpnConnectionsListByVpnGatewayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVpnConnectionsResult}
     */
    vpnConnectionsListByVpnGateway(subscriptionId, resourceGroupName, gatewayName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vpnConnectionsListByVpnGateway");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling vpnConnectionsListByVpnGateway");
      }
      // verify the required parameter 'gatewayName' is set
      if (gatewayName === undefined || gatewayName === null) {
        throw new Error("Missing the required parameter 'gatewayName' when calling vpnConnectionsListByVpnGateway");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vpnConnectionsListByVpnGateway");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'gatewayName': gatewayName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListVpnConnectionsResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/vpnConnections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vpnGatewaysCreateOrUpdate operation.
     * @callback module:api/DefaultApi~vpnGatewaysCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VpnGateway} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a virtual wan vpn gateway if it doesn't exist else updates the existing gateway.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name of the VpnGateway.
     * @param {String} gatewayName The name of the gateway.
     * @param {String} apiVersion Client API version.
     * @param {module:model/VpnGateway} vpnGatewayParameters Parameters supplied to create or Update a virtual wan vpn gateway.
     * @param {module:api/DefaultApi~vpnGatewaysCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VpnGateway}
     */
    vpnGatewaysCreateOrUpdate(subscriptionId, resourceGroupName, gatewayName, apiVersion, vpnGatewayParameters, callback) {
      let postBody = vpnGatewayParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vpnGatewaysCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling vpnGatewaysCreateOrUpdate");
      }
      // verify the required parameter 'gatewayName' is set
      if (gatewayName === undefined || gatewayName === null) {
        throw new Error("Missing the required parameter 'gatewayName' when calling vpnGatewaysCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vpnGatewaysCreateOrUpdate");
      }
      // verify the required parameter 'vpnGatewayParameters' is set
      if (vpnGatewayParameters === undefined || vpnGatewayParameters === null) {
        throw new Error("Missing the required parameter 'vpnGatewayParameters' when calling vpnGatewaysCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'gatewayName': gatewayName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VpnGateway;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vpnGatewaysDelete operation.
     * @callback module:api/DefaultApi~vpnGatewaysDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a virtual wan vpn gateway.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name of the VpnGateway.
     * @param {String} gatewayName The name of the gateway.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DefaultApi~vpnGatewaysDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vpnGatewaysDelete(subscriptionId, resourceGroupName, gatewayName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vpnGatewaysDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling vpnGatewaysDelete");
      }
      // verify the required parameter 'gatewayName' is set
      if (gatewayName === undefined || gatewayName === null) {
        throw new Error("Missing the required parameter 'gatewayName' when calling vpnGatewaysDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vpnGatewaysDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'gatewayName': gatewayName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vpnGatewaysGet operation.
     * @callback module:api/DefaultApi~vpnGatewaysGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VpnGateway} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the details of a virtual wan vpn gateway.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name of the VpnGateway.
     * @param {String} gatewayName The name of the gateway.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DefaultApi~vpnGatewaysGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VpnGateway}
     */
    vpnGatewaysGet(subscriptionId, resourceGroupName, gatewayName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vpnGatewaysGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling vpnGatewaysGet");
      }
      // verify the required parameter 'gatewayName' is set
      if (gatewayName === undefined || gatewayName === null) {
        throw new Error("Missing the required parameter 'gatewayName' when calling vpnGatewaysGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vpnGatewaysGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'gatewayName': gatewayName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VpnGateway;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vpnGatewaysList operation.
     * @callback module:api/DefaultApi~vpnGatewaysListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVpnGatewaysResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the VpnGateways in a subscription.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DefaultApi~vpnGatewaysListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVpnGatewaysResult}
     */
    vpnGatewaysList(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vpnGatewaysList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vpnGatewaysList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListVpnGatewaysResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Network/vpnGateways', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vpnGatewaysListByResourceGroup operation.
     * @callback module:api/DefaultApi~vpnGatewaysListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVpnGatewaysResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the VpnGateways in a resource group.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name of the VpnGateway.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DefaultApi~vpnGatewaysListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVpnGatewaysResult}
     */
    vpnGatewaysListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vpnGatewaysListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling vpnGatewaysListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vpnGatewaysListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListVpnGatewaysResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vpnSitesConfigurationDownload operation.
     * @callback module:api/DefaultApi~vpnSitesConfigurationDownloadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gives the sas-url to download the configurations for vpn-sites in a resource group.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} virtualWANName The name of the VirtualWAN for which configuration of all vpn-sites is needed.
     * @param {String} apiVersion Client API version.
     * @param {module:model/GetVpnSitesConfigurationRequest} request Parameters supplied to download vpn-sites configuration.
     * @param {module:api/DefaultApi~vpnSitesConfigurationDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vpnSitesConfigurationDownload(subscriptionId, resourceGroupName, virtualWANName, apiVersion, request, callback) {
      let postBody = request;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vpnSitesConfigurationDownload");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling vpnSitesConfigurationDownload");
      }
      // verify the required parameter 'virtualWANName' is set
      if (virtualWANName === undefined || virtualWANName === null) {
        throw new Error("Missing the required parameter 'virtualWANName' when calling vpnSitesConfigurationDownload");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vpnSitesConfigurationDownload");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling vpnSitesConfigurationDownload");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'virtualWANName': virtualWANName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWANName}/vpnConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vpnSitesCreateOrUpdate operation.
     * @callback module:api/DefaultApi~vpnSitesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VpnSite} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a VpnSite resource if it doesn't exist else updates the existing VpnSite.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name of the VpnSite.
     * @param {String} vpnSiteName The name of the VpnSite being created or updated.
     * @param {String} apiVersion Client API version.
     * @param {module:model/VpnSite} vpnSiteParameters Parameters supplied to create or update VpnSite.
     * @param {module:api/DefaultApi~vpnSitesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VpnSite}
     */
    vpnSitesCreateOrUpdate(subscriptionId, resourceGroupName, vpnSiteName, apiVersion, vpnSiteParameters, callback) {
      let postBody = vpnSiteParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vpnSitesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling vpnSitesCreateOrUpdate");
      }
      // verify the required parameter 'vpnSiteName' is set
      if (vpnSiteName === undefined || vpnSiteName === null) {
        throw new Error("Missing the required parameter 'vpnSiteName' when calling vpnSitesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vpnSitesCreateOrUpdate");
      }
      // verify the required parameter 'vpnSiteParameters' is set
      if (vpnSiteParameters === undefined || vpnSiteParameters === null) {
        throw new Error("Missing the required parameter 'vpnSiteParameters' when calling vpnSitesCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'vpnSiteName': vpnSiteName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VpnSite;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnSites/{vpnSiteName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vpnSitesDelete operation.
     * @callback module:api/DefaultApi~vpnSitesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a VpnSite.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name of the VpnSite.
     * @param {String} vpnSiteName The name of the VpnSite being deleted.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DefaultApi~vpnSitesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vpnSitesDelete(subscriptionId, resourceGroupName, vpnSiteName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vpnSitesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling vpnSitesDelete");
      }
      // verify the required parameter 'vpnSiteName' is set
      if (vpnSiteName === undefined || vpnSiteName === null) {
        throw new Error("Missing the required parameter 'vpnSiteName' when calling vpnSitesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vpnSitesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'vpnSiteName': vpnSiteName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnSites/{vpnSiteName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vpnSitesGet operation.
     * @callback module:api/DefaultApi~vpnSitesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VpnSite} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the details of a VPN site.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name of the VpnSite.
     * @param {String} vpnSiteName The name of the VpnSite being retrieved.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DefaultApi~vpnSitesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VpnSite}
     */
    vpnSitesGet(subscriptionId, resourceGroupName, vpnSiteName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vpnSitesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling vpnSitesGet");
      }
      // verify the required parameter 'vpnSiteName' is set
      if (vpnSiteName === undefined || vpnSiteName === null) {
        throw new Error("Missing the required parameter 'vpnSiteName' when calling vpnSitesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vpnSitesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'vpnSiteName': vpnSiteName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VpnSite;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnSites/{vpnSiteName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vpnSitesList operation.
     * @callback module:api/DefaultApi~vpnSitesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVpnSitesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the VpnSites in a subscription.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DefaultApi~vpnSitesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVpnSitesResult}
     */
    vpnSitesList(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vpnSitesList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vpnSitesList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListVpnSitesResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Network/vpnSites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vpnSitesListByResourceGroup operation.
     * @callback module:api/DefaultApi~vpnSitesListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVpnSitesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the vpnSites in a resource group.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group name of the VpnSite.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DefaultApi~vpnSitesListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVpnSitesResult}
     */
    vpnSitesListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vpnSitesListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling vpnSitesListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vpnSitesListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListVpnSitesResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnSites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
