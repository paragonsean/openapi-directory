/*
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2018-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork;
import org.openapitools.client.model.P2SVpnServerConfigRadiusClientRootCertificate;
import org.openapitools.client.model.P2SVpnServerConfigRadiusServerRootCertificate;
import org.openapitools.client.model.P2SVpnServerConfigVpnClientRevokedCertificate;
import org.openapitools.client.model.P2SVpnServerConfigVpnClientRootCertificate;
import org.openapitools.client.model.P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters for P2SVpnServerConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:59:31.328710-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class P2SVpnServerConfigurationProperties {
  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_P2_S_VPN_GATEWAYS = "p2SVpnGateways";
  @SerializedName(SERIALIZED_NAME_P2_S_VPN_GATEWAYS)
  private List<HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork> p2SVpnGateways = new ArrayList<>();

  public static final String SERIALIZED_NAME_P2_S_VPN_SERVER_CONFIG_RADIUS_CLIENT_ROOT_CERTIFICATES = "p2SVpnServerConfigRadiusClientRootCertificates";
  @SerializedName(SERIALIZED_NAME_P2_S_VPN_SERVER_CONFIG_RADIUS_CLIENT_ROOT_CERTIFICATES)
  private List<P2SVpnServerConfigRadiusClientRootCertificate> p2SVpnServerConfigRadiusClientRootCertificates = new ArrayList<>();

  public static final String SERIALIZED_NAME_P2_S_VPN_SERVER_CONFIG_RADIUS_SERVER_ROOT_CERTIFICATES = "p2SVpnServerConfigRadiusServerRootCertificates";
  @SerializedName(SERIALIZED_NAME_P2_S_VPN_SERVER_CONFIG_RADIUS_SERVER_ROOT_CERTIFICATES)
  private List<P2SVpnServerConfigRadiusServerRootCertificate> p2SVpnServerConfigRadiusServerRootCertificates = new ArrayList<>();

  public static final String SERIALIZED_NAME_P2_S_VPN_SERVER_CONFIG_VPN_CLIENT_REVOKED_CERTIFICATES = "p2SVpnServerConfigVpnClientRevokedCertificates";
  @SerializedName(SERIALIZED_NAME_P2_S_VPN_SERVER_CONFIG_VPN_CLIENT_REVOKED_CERTIFICATES)
  private List<P2SVpnServerConfigVpnClientRevokedCertificate> p2SVpnServerConfigVpnClientRevokedCertificates = new ArrayList<>();

  public static final String SERIALIZED_NAME_P2_S_VPN_SERVER_CONFIG_VPN_CLIENT_ROOT_CERTIFICATES = "p2SVpnServerConfigVpnClientRootCertificates";
  @SerializedName(SERIALIZED_NAME_P2_S_VPN_SERVER_CONFIG_VPN_CLIENT_ROOT_CERTIFICATES)
  private List<P2SVpnServerConfigVpnClientRootCertificate> p2SVpnServerConfigVpnClientRootCertificates = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_RADIUS_SERVER_ADDRESS = "radiusServerAddress";
  @SerializedName(SERIALIZED_NAME_RADIUS_SERVER_ADDRESS)
  private String radiusServerAddress;

  public static final String SERIALIZED_NAME_RADIUS_SERVER_SECRET = "radiusServerSecret";
  @SerializedName(SERIALIZED_NAME_RADIUS_SERVER_SECRET)
  private String radiusServerSecret;

  public static final String SERIALIZED_NAME_VPN_CLIENT_IPSEC_POLICIES = "vpnClientIpsecPolicies";
  @SerializedName(SERIALIZED_NAME_VPN_CLIENT_IPSEC_POLICIES)
  private List<P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner> vpnClientIpsecPolicies = new ArrayList<>();

  /**
   * VPN protocol enabled for the P2SVpnServerConfiguration.
   */
  @JsonAdapter(VpnProtocolsEnum.Adapter.class)
  public enum VpnProtocolsEnum {
    IKE_V2("IkeV2"),
    
    OPEN_VPN("OpenVPN");

    private String value;

    VpnProtocolsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VpnProtocolsEnum fromValue(String value) {
      for (VpnProtocolsEnum b : VpnProtocolsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VpnProtocolsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VpnProtocolsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VpnProtocolsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VpnProtocolsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VpnProtocolsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VPN_PROTOCOLS = "vpnProtocols";
  @SerializedName(SERIALIZED_NAME_VPN_PROTOCOLS)
  private List<VpnProtocolsEnum> vpnProtocols = new ArrayList<>();

  public P2SVpnServerConfigurationProperties() {
  }

  public P2SVpnServerConfigurationProperties(
     List<HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork> p2SVpnGateways, 
     String provisioningState
  ) {
    this();
    this.p2SVpnGateways = p2SVpnGateways;
    this.provisioningState = provisioningState;
  }

  public P2SVpnServerConfigurationProperties etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * A unique read-only string that changes whenever the resource is updated.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public P2SVpnServerConfigurationProperties name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the P2SVpnServerConfiguration that is unique within a VirtualWan in a resource group. This name can be used to access the resource along with Parent VirtualWan resource name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Get p2SVpnGateways
   * @return p2SVpnGateways
   */
  @javax.annotation.Nullable
  public List<HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork> getP2SVpnGateways() {
    return p2SVpnGateways;
  }



  public P2SVpnServerConfigurationProperties p2SVpnServerConfigRadiusClientRootCertificates(List<P2SVpnServerConfigRadiusClientRootCertificate> p2SVpnServerConfigRadiusClientRootCertificates) {
    this.p2SVpnServerConfigRadiusClientRootCertificates = p2SVpnServerConfigRadiusClientRootCertificates;
    return this;
  }

  public P2SVpnServerConfigurationProperties addP2SVpnServerConfigRadiusClientRootCertificatesItem(P2SVpnServerConfigRadiusClientRootCertificate p2SVpnServerConfigRadiusClientRootCertificatesItem) {
    if (this.p2SVpnServerConfigRadiusClientRootCertificates == null) {
      this.p2SVpnServerConfigRadiusClientRootCertificates = new ArrayList<>();
    }
    this.p2SVpnServerConfigRadiusClientRootCertificates.add(p2SVpnServerConfigRadiusClientRootCertificatesItem);
    return this;
  }

  /**
   * Radius client root certificate of P2SVpnServerConfiguration.
   * @return p2SVpnServerConfigRadiusClientRootCertificates
   */
  @javax.annotation.Nullable
  public List<P2SVpnServerConfigRadiusClientRootCertificate> getP2SVpnServerConfigRadiusClientRootCertificates() {
    return p2SVpnServerConfigRadiusClientRootCertificates;
  }

  public void setP2SVpnServerConfigRadiusClientRootCertificates(List<P2SVpnServerConfigRadiusClientRootCertificate> p2SVpnServerConfigRadiusClientRootCertificates) {
    this.p2SVpnServerConfigRadiusClientRootCertificates = p2SVpnServerConfigRadiusClientRootCertificates;
  }


  public P2SVpnServerConfigurationProperties p2SVpnServerConfigRadiusServerRootCertificates(List<P2SVpnServerConfigRadiusServerRootCertificate> p2SVpnServerConfigRadiusServerRootCertificates) {
    this.p2SVpnServerConfigRadiusServerRootCertificates = p2SVpnServerConfigRadiusServerRootCertificates;
    return this;
  }

  public P2SVpnServerConfigurationProperties addP2SVpnServerConfigRadiusServerRootCertificatesItem(P2SVpnServerConfigRadiusServerRootCertificate p2SVpnServerConfigRadiusServerRootCertificatesItem) {
    if (this.p2SVpnServerConfigRadiusServerRootCertificates == null) {
      this.p2SVpnServerConfigRadiusServerRootCertificates = new ArrayList<>();
    }
    this.p2SVpnServerConfigRadiusServerRootCertificates.add(p2SVpnServerConfigRadiusServerRootCertificatesItem);
    return this;
  }

  /**
   * Radius Server root certificate of P2SVpnServerConfiguration.
   * @return p2SVpnServerConfigRadiusServerRootCertificates
   */
  @javax.annotation.Nullable
  public List<P2SVpnServerConfigRadiusServerRootCertificate> getP2SVpnServerConfigRadiusServerRootCertificates() {
    return p2SVpnServerConfigRadiusServerRootCertificates;
  }

  public void setP2SVpnServerConfigRadiusServerRootCertificates(List<P2SVpnServerConfigRadiusServerRootCertificate> p2SVpnServerConfigRadiusServerRootCertificates) {
    this.p2SVpnServerConfigRadiusServerRootCertificates = p2SVpnServerConfigRadiusServerRootCertificates;
  }


  public P2SVpnServerConfigurationProperties p2SVpnServerConfigVpnClientRevokedCertificates(List<P2SVpnServerConfigVpnClientRevokedCertificate> p2SVpnServerConfigVpnClientRevokedCertificates) {
    this.p2SVpnServerConfigVpnClientRevokedCertificates = p2SVpnServerConfigVpnClientRevokedCertificates;
    return this;
  }

  public P2SVpnServerConfigurationProperties addP2SVpnServerConfigVpnClientRevokedCertificatesItem(P2SVpnServerConfigVpnClientRevokedCertificate p2SVpnServerConfigVpnClientRevokedCertificatesItem) {
    if (this.p2SVpnServerConfigVpnClientRevokedCertificates == null) {
      this.p2SVpnServerConfigVpnClientRevokedCertificates = new ArrayList<>();
    }
    this.p2SVpnServerConfigVpnClientRevokedCertificates.add(p2SVpnServerConfigVpnClientRevokedCertificatesItem);
    return this;
  }

  /**
   * VPN client revoked certificate of P2SVpnServerConfiguration.
   * @return p2SVpnServerConfigVpnClientRevokedCertificates
   */
  @javax.annotation.Nullable
  public List<P2SVpnServerConfigVpnClientRevokedCertificate> getP2SVpnServerConfigVpnClientRevokedCertificates() {
    return p2SVpnServerConfigVpnClientRevokedCertificates;
  }

  public void setP2SVpnServerConfigVpnClientRevokedCertificates(List<P2SVpnServerConfigVpnClientRevokedCertificate> p2SVpnServerConfigVpnClientRevokedCertificates) {
    this.p2SVpnServerConfigVpnClientRevokedCertificates = p2SVpnServerConfigVpnClientRevokedCertificates;
  }


  public P2SVpnServerConfigurationProperties p2SVpnServerConfigVpnClientRootCertificates(List<P2SVpnServerConfigVpnClientRootCertificate> p2SVpnServerConfigVpnClientRootCertificates) {
    this.p2SVpnServerConfigVpnClientRootCertificates = p2SVpnServerConfigVpnClientRootCertificates;
    return this;
  }

  public P2SVpnServerConfigurationProperties addP2SVpnServerConfigVpnClientRootCertificatesItem(P2SVpnServerConfigVpnClientRootCertificate p2SVpnServerConfigVpnClientRootCertificatesItem) {
    if (this.p2SVpnServerConfigVpnClientRootCertificates == null) {
      this.p2SVpnServerConfigVpnClientRootCertificates = new ArrayList<>();
    }
    this.p2SVpnServerConfigVpnClientRootCertificates.add(p2SVpnServerConfigVpnClientRootCertificatesItem);
    return this;
  }

  /**
   * VPN client root certificate of P2SVpnServerConfiguration.
   * @return p2SVpnServerConfigVpnClientRootCertificates
   */
  @javax.annotation.Nullable
  public List<P2SVpnServerConfigVpnClientRootCertificate> getP2SVpnServerConfigVpnClientRootCertificates() {
    return p2SVpnServerConfigVpnClientRootCertificates;
  }

  public void setP2SVpnServerConfigVpnClientRootCertificates(List<P2SVpnServerConfigVpnClientRootCertificate> p2SVpnServerConfigVpnClientRootCertificates) {
    this.p2SVpnServerConfigVpnClientRootCertificates = p2SVpnServerConfigVpnClientRootCertificates;
  }


  /**
   * The provisioning state of the P2SVpnServerConfiguration resource. Possible values are: &#39;Updating&#39;, &#39;Deleting&#39;, and &#39;Failed&#39;.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  public P2SVpnServerConfigurationProperties radiusServerAddress(String radiusServerAddress) {
    this.radiusServerAddress = radiusServerAddress;
    return this;
  }

  /**
   * The radius server address property of the P2SVpnServerConfiguration resource for point to site client connection.
   * @return radiusServerAddress
   */
  @javax.annotation.Nullable
  public String getRadiusServerAddress() {
    return radiusServerAddress;
  }

  public void setRadiusServerAddress(String radiusServerAddress) {
    this.radiusServerAddress = radiusServerAddress;
  }


  public P2SVpnServerConfigurationProperties radiusServerSecret(String radiusServerSecret) {
    this.radiusServerSecret = radiusServerSecret;
    return this;
  }

  /**
   * The radius secret property of the P2SVpnServerConfiguration resource for point to site client connection.
   * @return radiusServerSecret
   */
  @javax.annotation.Nullable
  public String getRadiusServerSecret() {
    return radiusServerSecret;
  }

  public void setRadiusServerSecret(String radiusServerSecret) {
    this.radiusServerSecret = radiusServerSecret;
  }


  public P2SVpnServerConfigurationProperties vpnClientIpsecPolicies(List<P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner> vpnClientIpsecPolicies) {
    this.vpnClientIpsecPolicies = vpnClientIpsecPolicies;
    return this;
  }

  public P2SVpnServerConfigurationProperties addVpnClientIpsecPoliciesItem(P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner vpnClientIpsecPoliciesItem) {
    if (this.vpnClientIpsecPolicies == null) {
      this.vpnClientIpsecPolicies = new ArrayList<>();
    }
    this.vpnClientIpsecPolicies.add(vpnClientIpsecPoliciesItem);
    return this;
  }

  /**
   * VpnClientIpsecPolicies for P2SVpnServerConfiguration.
   * @return vpnClientIpsecPolicies
   */
  @javax.annotation.Nullable
  public List<P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner> getVpnClientIpsecPolicies() {
    return vpnClientIpsecPolicies;
  }

  public void setVpnClientIpsecPolicies(List<P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner> vpnClientIpsecPolicies) {
    this.vpnClientIpsecPolicies = vpnClientIpsecPolicies;
  }


  public P2SVpnServerConfigurationProperties vpnProtocols(List<VpnProtocolsEnum> vpnProtocols) {
    this.vpnProtocols = vpnProtocols;
    return this;
  }

  public P2SVpnServerConfigurationProperties addVpnProtocolsItem(VpnProtocolsEnum vpnProtocolsItem) {
    if (this.vpnProtocols == null) {
      this.vpnProtocols = new ArrayList<>();
    }
    this.vpnProtocols.add(vpnProtocolsItem);
    return this;
  }

  /**
   * vpnProtocols for the P2SVpnServerConfiguration.
   * @return vpnProtocols
   */
  @javax.annotation.Nullable
  public List<VpnProtocolsEnum> getVpnProtocols() {
    return vpnProtocols;
  }

  public void setVpnProtocols(List<VpnProtocolsEnum> vpnProtocols) {
    this.vpnProtocols = vpnProtocols;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    P2SVpnServerConfigurationProperties p2SVpnServerConfigurationProperties = (P2SVpnServerConfigurationProperties) o;
    return Objects.equals(this.etag, p2SVpnServerConfigurationProperties.etag) &&
        Objects.equals(this.name, p2SVpnServerConfigurationProperties.name) &&
        Objects.equals(this.p2SVpnGateways, p2SVpnServerConfigurationProperties.p2SVpnGateways) &&
        Objects.equals(this.p2SVpnServerConfigRadiusClientRootCertificates, p2SVpnServerConfigurationProperties.p2SVpnServerConfigRadiusClientRootCertificates) &&
        Objects.equals(this.p2SVpnServerConfigRadiusServerRootCertificates, p2SVpnServerConfigurationProperties.p2SVpnServerConfigRadiusServerRootCertificates) &&
        Objects.equals(this.p2SVpnServerConfigVpnClientRevokedCertificates, p2SVpnServerConfigurationProperties.p2SVpnServerConfigVpnClientRevokedCertificates) &&
        Objects.equals(this.p2SVpnServerConfigVpnClientRootCertificates, p2SVpnServerConfigurationProperties.p2SVpnServerConfigVpnClientRootCertificates) &&
        Objects.equals(this.provisioningState, p2SVpnServerConfigurationProperties.provisioningState) &&
        Objects.equals(this.radiusServerAddress, p2SVpnServerConfigurationProperties.radiusServerAddress) &&
        Objects.equals(this.radiusServerSecret, p2SVpnServerConfigurationProperties.radiusServerSecret) &&
        Objects.equals(this.vpnClientIpsecPolicies, p2SVpnServerConfigurationProperties.vpnClientIpsecPolicies) &&
        Objects.equals(this.vpnProtocols, p2SVpnServerConfigurationProperties.vpnProtocols);
  }

  @Override
  public int hashCode() {
    return Objects.hash(etag, name, p2SVpnGateways, p2SVpnServerConfigRadiusClientRootCertificates, p2SVpnServerConfigRadiusServerRootCertificates, p2SVpnServerConfigVpnClientRevokedCertificates, p2SVpnServerConfigVpnClientRootCertificates, provisioningState, radiusServerAddress, radiusServerSecret, vpnClientIpsecPolicies, vpnProtocols);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class P2SVpnServerConfigurationProperties {\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    p2SVpnGateways: ").append(toIndentedString(p2SVpnGateways)).append("\n");
    sb.append("    p2SVpnServerConfigRadiusClientRootCertificates: ").append(toIndentedString(p2SVpnServerConfigRadiusClientRootCertificates)).append("\n");
    sb.append("    p2SVpnServerConfigRadiusServerRootCertificates: ").append(toIndentedString(p2SVpnServerConfigRadiusServerRootCertificates)).append("\n");
    sb.append("    p2SVpnServerConfigVpnClientRevokedCertificates: ").append(toIndentedString(p2SVpnServerConfigVpnClientRevokedCertificates)).append("\n");
    sb.append("    p2SVpnServerConfigVpnClientRootCertificates: ").append(toIndentedString(p2SVpnServerConfigVpnClientRootCertificates)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    radiusServerAddress: ").append(toIndentedString(radiusServerAddress)).append("\n");
    sb.append("    radiusServerSecret: ").append(toIndentedString(radiusServerSecret)).append("\n");
    sb.append("    vpnClientIpsecPolicies: ").append(toIndentedString(vpnClientIpsecPolicies)).append("\n");
    sb.append("    vpnProtocols: ").append(toIndentedString(vpnProtocols)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("etag");
    openapiFields.add("name");
    openapiFields.add("p2SVpnGateways");
    openapiFields.add("p2SVpnServerConfigRadiusClientRootCertificates");
    openapiFields.add("p2SVpnServerConfigRadiusServerRootCertificates");
    openapiFields.add("p2SVpnServerConfigVpnClientRevokedCertificates");
    openapiFields.add("p2SVpnServerConfigVpnClientRootCertificates");
    openapiFields.add("provisioningState");
    openapiFields.add("radiusServerAddress");
    openapiFields.add("radiusServerSecret");
    openapiFields.add("vpnClientIpsecPolicies");
    openapiFields.add("vpnProtocols");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to P2SVpnServerConfigurationProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!P2SVpnServerConfigurationProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in P2SVpnServerConfigurationProperties is not found in the empty JSON string", P2SVpnServerConfigurationProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!P2SVpnServerConfigurationProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `P2SVpnServerConfigurationProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("p2SVpnGateways") != null && !jsonObj.get("p2SVpnGateways").isJsonNull()) {
        JsonArray jsonArrayp2SVpnGateways = jsonObj.getAsJsonArray("p2SVpnGateways");
        if (jsonArrayp2SVpnGateways != null) {
          // ensure the json data is an array
          if (!jsonObj.get("p2SVpnGateways").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `p2SVpnGateways` to be an array in the JSON string but got `%s`", jsonObj.get("p2SVpnGateways").toString()));
          }

          // validate the optional field `p2SVpnGateways` (array)
          for (int i = 0; i < jsonArrayp2SVpnGateways.size(); i++) {
            HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork.validateJsonElement(jsonArrayp2SVpnGateways.get(i));
          };
        }
      }
      if (jsonObj.get("p2SVpnServerConfigRadiusClientRootCertificates") != null && !jsonObj.get("p2SVpnServerConfigRadiusClientRootCertificates").isJsonNull()) {
        JsonArray jsonArrayp2SVpnServerConfigRadiusClientRootCertificates = jsonObj.getAsJsonArray("p2SVpnServerConfigRadiusClientRootCertificates");
        if (jsonArrayp2SVpnServerConfigRadiusClientRootCertificates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("p2SVpnServerConfigRadiusClientRootCertificates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `p2SVpnServerConfigRadiusClientRootCertificates` to be an array in the JSON string but got `%s`", jsonObj.get("p2SVpnServerConfigRadiusClientRootCertificates").toString()));
          }

          // validate the optional field `p2SVpnServerConfigRadiusClientRootCertificates` (array)
          for (int i = 0; i < jsonArrayp2SVpnServerConfigRadiusClientRootCertificates.size(); i++) {
            P2SVpnServerConfigRadiusClientRootCertificate.validateJsonElement(jsonArrayp2SVpnServerConfigRadiusClientRootCertificates.get(i));
          };
        }
      }
      if (jsonObj.get("p2SVpnServerConfigRadiusServerRootCertificates") != null && !jsonObj.get("p2SVpnServerConfigRadiusServerRootCertificates").isJsonNull()) {
        JsonArray jsonArrayp2SVpnServerConfigRadiusServerRootCertificates = jsonObj.getAsJsonArray("p2SVpnServerConfigRadiusServerRootCertificates");
        if (jsonArrayp2SVpnServerConfigRadiusServerRootCertificates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("p2SVpnServerConfigRadiusServerRootCertificates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `p2SVpnServerConfigRadiusServerRootCertificates` to be an array in the JSON string but got `%s`", jsonObj.get("p2SVpnServerConfigRadiusServerRootCertificates").toString()));
          }

          // validate the optional field `p2SVpnServerConfigRadiusServerRootCertificates` (array)
          for (int i = 0; i < jsonArrayp2SVpnServerConfigRadiusServerRootCertificates.size(); i++) {
            P2SVpnServerConfigRadiusServerRootCertificate.validateJsonElement(jsonArrayp2SVpnServerConfigRadiusServerRootCertificates.get(i));
          };
        }
      }
      if (jsonObj.get("p2SVpnServerConfigVpnClientRevokedCertificates") != null && !jsonObj.get("p2SVpnServerConfigVpnClientRevokedCertificates").isJsonNull()) {
        JsonArray jsonArrayp2SVpnServerConfigVpnClientRevokedCertificates = jsonObj.getAsJsonArray("p2SVpnServerConfigVpnClientRevokedCertificates");
        if (jsonArrayp2SVpnServerConfigVpnClientRevokedCertificates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("p2SVpnServerConfigVpnClientRevokedCertificates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `p2SVpnServerConfigVpnClientRevokedCertificates` to be an array in the JSON string but got `%s`", jsonObj.get("p2SVpnServerConfigVpnClientRevokedCertificates").toString()));
          }

          // validate the optional field `p2SVpnServerConfigVpnClientRevokedCertificates` (array)
          for (int i = 0; i < jsonArrayp2SVpnServerConfigVpnClientRevokedCertificates.size(); i++) {
            P2SVpnServerConfigVpnClientRevokedCertificate.validateJsonElement(jsonArrayp2SVpnServerConfigVpnClientRevokedCertificates.get(i));
          };
        }
      }
      if (jsonObj.get("p2SVpnServerConfigVpnClientRootCertificates") != null && !jsonObj.get("p2SVpnServerConfigVpnClientRootCertificates").isJsonNull()) {
        JsonArray jsonArrayp2SVpnServerConfigVpnClientRootCertificates = jsonObj.getAsJsonArray("p2SVpnServerConfigVpnClientRootCertificates");
        if (jsonArrayp2SVpnServerConfigVpnClientRootCertificates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("p2SVpnServerConfigVpnClientRootCertificates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `p2SVpnServerConfigVpnClientRootCertificates` to be an array in the JSON string but got `%s`", jsonObj.get("p2SVpnServerConfigVpnClientRootCertificates").toString()));
          }

          // validate the optional field `p2SVpnServerConfigVpnClientRootCertificates` (array)
          for (int i = 0; i < jsonArrayp2SVpnServerConfigVpnClientRootCertificates.size(); i++) {
            P2SVpnServerConfigVpnClientRootCertificate.validateJsonElement(jsonArrayp2SVpnServerConfigVpnClientRootCertificates.get(i));
          };
        }
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("radiusServerAddress") != null && !jsonObj.get("radiusServerAddress").isJsonNull()) && !jsonObj.get("radiusServerAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `radiusServerAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("radiusServerAddress").toString()));
      }
      if ((jsonObj.get("radiusServerSecret") != null && !jsonObj.get("radiusServerSecret").isJsonNull()) && !jsonObj.get("radiusServerSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `radiusServerSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("radiusServerSecret").toString()));
      }
      if (jsonObj.get("vpnClientIpsecPolicies") != null && !jsonObj.get("vpnClientIpsecPolicies").isJsonNull()) {
        JsonArray jsonArrayvpnClientIpsecPolicies = jsonObj.getAsJsonArray("vpnClientIpsecPolicies");
        if (jsonArrayvpnClientIpsecPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vpnClientIpsecPolicies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vpnClientIpsecPolicies` to be an array in the JSON string but got `%s`", jsonObj.get("vpnClientIpsecPolicies").toString()));
          }

          // validate the optional field `vpnClientIpsecPolicies` (array)
          for (int i = 0; i < jsonArrayvpnClientIpsecPolicies.size(); i++) {
            P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner.validateJsonElement(jsonArrayvpnClientIpsecPolicies.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("vpnProtocols") != null && !jsonObj.get("vpnProtocols").isJsonNull() && !jsonObj.get("vpnProtocols").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vpnProtocols` to be an array in the JSON string but got `%s`", jsonObj.get("vpnProtocols").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!P2SVpnServerConfigurationProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'P2SVpnServerConfigurationProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<P2SVpnServerConfigurationProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(P2SVpnServerConfigurationProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<P2SVpnServerConfigurationProperties>() {
           @Override
           public void write(JsonWriter out, P2SVpnServerConfigurationProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public P2SVpnServerConfigurationProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of P2SVpnServerConfigurationProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of P2SVpnServerConfigurationProperties
   * @throws IOException if the JSON string is invalid with respect to P2SVpnServerConfigurationProperties
   */
  public static P2SVpnServerConfigurationProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, P2SVpnServerConfigurationProperties.class);
  }

  /**
   * Convert an instance of P2SVpnServerConfigurationProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

