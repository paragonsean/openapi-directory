/*
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2018-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DeviceProperties;
import org.openapitools.client.model.HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork;
import org.openapitools.client.model.P2SVpnGatewayPropertiesVpnClientAddressPool;
import org.openapitools.client.model.ProvisioningState;
import org.openapitools.client.model.VpnGatewayPropertiesBgpSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters for VpnSite
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:59:31.328710-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VpnSiteProperties {
  public static final String SERIALIZED_NAME_ADDRESS_SPACE = "addressSpace";
  @SerializedName(SERIALIZED_NAME_ADDRESS_SPACE)
  private P2SVpnGatewayPropertiesVpnClientAddressPool addressSpace;

  public static final String SERIALIZED_NAME_BGP_PROPERTIES = "bgpProperties";
  @SerializedName(SERIALIZED_NAME_BGP_PROPERTIES)
  private VpnGatewayPropertiesBgpSettings bgpProperties;

  public static final String SERIALIZED_NAME_DEVICE_PROPERTIES = "deviceProperties";
  @SerializedName(SERIALIZED_NAME_DEVICE_PROPERTIES)
  private DeviceProperties deviceProperties;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_IS_SECURITY_SITE = "isSecuritySite";
  @SerializedName(SERIALIZED_NAME_IS_SECURITY_SITE)
  private Boolean isSecuritySite;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningState provisioningState;

  public static final String SERIALIZED_NAME_SITE_KEY = "siteKey";
  @SerializedName(SERIALIZED_NAME_SITE_KEY)
  private String siteKey;

  public static final String SERIALIZED_NAME_VIRTUAL_WAN = "virtualWan";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_WAN)
  private HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork virtualWan;

  public VpnSiteProperties() {
  }

  public VpnSiteProperties addressSpace(P2SVpnGatewayPropertiesVpnClientAddressPool addressSpace) {
    this.addressSpace = addressSpace;
    return this;
  }

  /**
   * Get addressSpace
   * @return addressSpace
   */
  @javax.annotation.Nullable
  public P2SVpnGatewayPropertiesVpnClientAddressPool getAddressSpace() {
    return addressSpace;
  }

  public void setAddressSpace(P2SVpnGatewayPropertiesVpnClientAddressPool addressSpace) {
    this.addressSpace = addressSpace;
  }


  public VpnSiteProperties bgpProperties(VpnGatewayPropertiesBgpSettings bgpProperties) {
    this.bgpProperties = bgpProperties;
    return this;
  }

  /**
   * Get bgpProperties
   * @return bgpProperties
   */
  @javax.annotation.Nullable
  public VpnGatewayPropertiesBgpSettings getBgpProperties() {
    return bgpProperties;
  }

  public void setBgpProperties(VpnGatewayPropertiesBgpSettings bgpProperties) {
    this.bgpProperties = bgpProperties;
  }


  public VpnSiteProperties deviceProperties(DeviceProperties deviceProperties) {
    this.deviceProperties = deviceProperties;
    return this;
  }

  /**
   * Get deviceProperties
   * @return deviceProperties
   */
  @javax.annotation.Nullable
  public DeviceProperties getDeviceProperties() {
    return deviceProperties;
  }

  public void setDeviceProperties(DeviceProperties deviceProperties) {
    this.deviceProperties = deviceProperties;
  }


  public VpnSiteProperties ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * The ip-address for the vpn-site.
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public VpnSiteProperties isSecuritySite(Boolean isSecuritySite) {
    this.isSecuritySite = isSecuritySite;
    return this;
  }

  /**
   * IsSecuritySite flag
   * @return isSecuritySite
   */
  @javax.annotation.Nullable
  public Boolean getIsSecuritySite() {
    return isSecuritySite;
  }

  public void setIsSecuritySite(Boolean isSecuritySite) {
    this.isSecuritySite = isSecuritySite;
  }


  public VpnSiteProperties provisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Get provisioningState
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningState getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
  }


  public VpnSiteProperties siteKey(String siteKey) {
    this.siteKey = siteKey;
    return this;
  }

  /**
   * The key for vpn-site that can be used for connections.
   * @return siteKey
   */
  @javax.annotation.Nullable
  public String getSiteKey() {
    return siteKey;
  }

  public void setSiteKey(String siteKey) {
    this.siteKey = siteKey;
  }


  public VpnSiteProperties virtualWan(HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork virtualWan) {
    this.virtualWan = virtualWan;
    return this;
  }

  /**
   * Get virtualWan
   * @return virtualWan
   */
  @javax.annotation.Nullable
  public HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork getVirtualWan() {
    return virtualWan;
  }

  public void setVirtualWan(HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork virtualWan) {
    this.virtualWan = virtualWan;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VpnSiteProperties vpnSiteProperties = (VpnSiteProperties) o;
    return Objects.equals(this.addressSpace, vpnSiteProperties.addressSpace) &&
        Objects.equals(this.bgpProperties, vpnSiteProperties.bgpProperties) &&
        Objects.equals(this.deviceProperties, vpnSiteProperties.deviceProperties) &&
        Objects.equals(this.ipAddress, vpnSiteProperties.ipAddress) &&
        Objects.equals(this.isSecuritySite, vpnSiteProperties.isSecuritySite) &&
        Objects.equals(this.provisioningState, vpnSiteProperties.provisioningState) &&
        Objects.equals(this.siteKey, vpnSiteProperties.siteKey) &&
        Objects.equals(this.virtualWan, vpnSiteProperties.virtualWan);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressSpace, bgpProperties, deviceProperties, ipAddress, isSecuritySite, provisioningState, siteKey, virtualWan);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VpnSiteProperties {\n");
    sb.append("    addressSpace: ").append(toIndentedString(addressSpace)).append("\n");
    sb.append("    bgpProperties: ").append(toIndentedString(bgpProperties)).append("\n");
    sb.append("    deviceProperties: ").append(toIndentedString(deviceProperties)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    isSecuritySite: ").append(toIndentedString(isSecuritySite)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    siteKey: ").append(toIndentedString(siteKey)).append("\n");
    sb.append("    virtualWan: ").append(toIndentedString(virtualWan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressSpace");
    openapiFields.add("bgpProperties");
    openapiFields.add("deviceProperties");
    openapiFields.add("ipAddress");
    openapiFields.add("isSecuritySite");
    openapiFields.add("provisioningState");
    openapiFields.add("siteKey");
    openapiFields.add("virtualWan");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VpnSiteProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VpnSiteProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VpnSiteProperties is not found in the empty JSON string", VpnSiteProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VpnSiteProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VpnSiteProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `addressSpace`
      if (jsonObj.get("addressSpace") != null && !jsonObj.get("addressSpace").isJsonNull()) {
        P2SVpnGatewayPropertiesVpnClientAddressPool.validateJsonElement(jsonObj.get("addressSpace"));
      }
      // validate the optional field `bgpProperties`
      if (jsonObj.get("bgpProperties") != null && !jsonObj.get("bgpProperties").isJsonNull()) {
        VpnGatewayPropertiesBgpSettings.validateJsonElement(jsonObj.get("bgpProperties"));
      }
      // validate the optional field `deviceProperties`
      if (jsonObj.get("deviceProperties") != null && !jsonObj.get("deviceProperties").isJsonNull()) {
        DeviceProperties.validateJsonElement(jsonObj.get("deviceProperties"));
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningState.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if ((jsonObj.get("siteKey") != null && !jsonObj.get("siteKey").isJsonNull()) && !jsonObj.get("siteKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("siteKey").toString()));
      }
      // validate the optional field `virtualWan`
      if (jsonObj.get("virtualWan") != null && !jsonObj.get("virtualWan").isJsonNull()) {
        HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork.validateJsonElement(jsonObj.get("virtualWan"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VpnSiteProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VpnSiteProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VpnSiteProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VpnSiteProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<VpnSiteProperties>() {
           @Override
           public void write(JsonWriter out, VpnSiteProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VpnSiteProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VpnSiteProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VpnSiteProperties
   * @throws IOException if the JSON string is invalid with respect to VpnSiteProperties
   */
  public static VpnSiteProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VpnSiteProperties.class);
  }

  /**
   * Convert an instance of VpnSiteProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

