# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_properties import DeviceProperties
from openapi_server.models.hub_virtual_network_connection_properties_remote_virtual_network import HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork
from openapi_server.models.p2_s_vpn_gateway_properties_custom_routes import P2SVpnGatewayPropertiesCustomRoutes
from openapi_server.models.vpn_gateway_properties_bgp_settings import VpnGatewayPropertiesBgpSettings
from openapi_server import util


class VpnSiteProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_space: P2SVpnGatewayPropertiesCustomRoutes=None, bgp_properties: VpnGatewayPropertiesBgpSettings=None, device_properties: DeviceProperties=None, ip_address: str=None, is_security_site: bool=None, provisioning_state: str=None, site_key: str=None, virtual_wan: HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork=None):
        """VpnSiteProperties - a model defined in OpenAPI

        :param address_space: The address_space of this VpnSiteProperties.
        :param bgp_properties: The bgp_properties of this VpnSiteProperties.
        :param device_properties: The device_properties of this VpnSiteProperties.
        :param ip_address: The ip_address of this VpnSiteProperties.
        :param is_security_site: The is_security_site of this VpnSiteProperties.
        :param provisioning_state: The provisioning_state of this VpnSiteProperties.
        :param site_key: The site_key of this VpnSiteProperties.
        :param virtual_wan: The virtual_wan of this VpnSiteProperties.
        """
        self.openapi_types = {
            'address_space': P2SVpnGatewayPropertiesCustomRoutes,
            'bgp_properties': VpnGatewayPropertiesBgpSettings,
            'device_properties': DeviceProperties,
            'ip_address': str,
            'is_security_site': bool,
            'provisioning_state': str,
            'site_key': str,
            'virtual_wan': HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork
        }

        self.attribute_map = {
            'address_space': 'addressSpace',
            'bgp_properties': 'bgpProperties',
            'device_properties': 'deviceProperties',
            'ip_address': 'ipAddress',
            'is_security_site': 'isSecuritySite',
            'provisioning_state': 'provisioningState',
            'site_key': 'siteKey',
            'virtual_wan': 'virtualWan'
        }

        self._address_space = address_space
        self._bgp_properties = bgp_properties
        self._device_properties = device_properties
        self._ip_address = ip_address
        self._is_security_site = is_security_site
        self._provisioning_state = provisioning_state
        self._site_key = site_key
        self._virtual_wan = virtual_wan

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VpnSiteProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VpnSiteProperties of this VpnSiteProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_space(self):
        """Gets the address_space of this VpnSiteProperties.


        :return: The address_space of this VpnSiteProperties.
        :rtype: P2SVpnGatewayPropertiesCustomRoutes
        """
        return self._address_space

    @address_space.setter
    def address_space(self, address_space):
        """Sets the address_space of this VpnSiteProperties.


        :param address_space: The address_space of this VpnSiteProperties.
        :type address_space: P2SVpnGatewayPropertiesCustomRoutes
        """

        self._address_space = address_space

    @property
    def bgp_properties(self):
        """Gets the bgp_properties of this VpnSiteProperties.


        :return: The bgp_properties of this VpnSiteProperties.
        :rtype: VpnGatewayPropertiesBgpSettings
        """
        return self._bgp_properties

    @bgp_properties.setter
    def bgp_properties(self, bgp_properties):
        """Sets the bgp_properties of this VpnSiteProperties.


        :param bgp_properties: The bgp_properties of this VpnSiteProperties.
        :type bgp_properties: VpnGatewayPropertiesBgpSettings
        """

        self._bgp_properties = bgp_properties

    @property
    def device_properties(self):
        """Gets the device_properties of this VpnSiteProperties.


        :return: The device_properties of this VpnSiteProperties.
        :rtype: DeviceProperties
        """
        return self._device_properties

    @device_properties.setter
    def device_properties(self, device_properties):
        """Sets the device_properties of this VpnSiteProperties.


        :param device_properties: The device_properties of this VpnSiteProperties.
        :type device_properties: DeviceProperties
        """

        self._device_properties = device_properties

    @property
    def ip_address(self):
        """Gets the ip_address of this VpnSiteProperties.

        The ip-address for the vpn-site.

        :return: The ip_address of this VpnSiteProperties.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this VpnSiteProperties.

        The ip-address for the vpn-site.

        :param ip_address: The ip_address of this VpnSiteProperties.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def is_security_site(self):
        """Gets the is_security_site of this VpnSiteProperties.

        IsSecuritySite flag.

        :return: The is_security_site of this VpnSiteProperties.
        :rtype: bool
        """
        return self._is_security_site

    @is_security_site.setter
    def is_security_site(self, is_security_site):
        """Sets the is_security_site of this VpnSiteProperties.

        IsSecuritySite flag.

        :param is_security_site: The is_security_site of this VpnSiteProperties.
        :type is_security_site: bool
        """

        self._is_security_site = is_security_site

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this VpnSiteProperties.

        The current provisioning state.

        :return: The provisioning_state of this VpnSiteProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this VpnSiteProperties.

        The current provisioning state.

        :param provisioning_state: The provisioning_state of this VpnSiteProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Updating", "Deleting", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def site_key(self):
        """Gets the site_key of this VpnSiteProperties.

        The key for vpn-site that can be used for connections.

        :return: The site_key of this VpnSiteProperties.
        :rtype: str
        """
        return self._site_key

    @site_key.setter
    def site_key(self, site_key):
        """Sets the site_key of this VpnSiteProperties.

        The key for vpn-site that can be used for connections.

        :param site_key: The site_key of this VpnSiteProperties.
        :type site_key: str
        """

        self._site_key = site_key

    @property
    def virtual_wan(self):
        """Gets the virtual_wan of this VpnSiteProperties.


        :return: The virtual_wan of this VpnSiteProperties.
        :rtype: HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork
        """
        return self._virtual_wan

    @virtual_wan.setter
    def virtual_wan(self, virtual_wan):
        """Sets the virtual_wan of this VpnSiteProperties.


        :param virtual_wan: The virtual_wan of this VpnSiteProperties.
        :type virtual_wan: HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork
        """

        self._virtual_wan = virtual_wan
