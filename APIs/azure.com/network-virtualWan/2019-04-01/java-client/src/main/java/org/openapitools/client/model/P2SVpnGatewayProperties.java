/*
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork;
import org.openapitools.client.model.P2SVpnGatewayPropertiesCustomRoutes;
import org.openapitools.client.model.VpnClientConnectionHealth;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters for P2SVpnGateway.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:59:39.814654-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class P2SVpnGatewayProperties {
  public static final String SERIALIZED_NAME_CUSTOM_ROUTES = "customRoutes";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ROUTES)
  private P2SVpnGatewayPropertiesCustomRoutes customRoutes;

  public static final String SERIALIZED_NAME_P2_S_VPN_SERVER_CONFIGURATION = "p2SVpnServerConfiguration";
  @SerializedName(SERIALIZED_NAME_P2_S_VPN_SERVER_CONFIGURATION)
  private HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork p2SVpnServerConfiguration;

  /**
   * The current provisioning state.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    SUCCEEDED("Succeeded"),
    
    UPDATING("Updating"),
    
    DELETING("Deleting"),
    
    FAILED("Failed");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_VIRTUAL_HUB = "virtualHub";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_HUB)
  private HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork virtualHub;

  public static final String SERIALIZED_NAME_VPN_CLIENT_ADDRESS_POOL = "vpnClientAddressPool";
  @SerializedName(SERIALIZED_NAME_VPN_CLIENT_ADDRESS_POOL)
  private P2SVpnGatewayPropertiesCustomRoutes vpnClientAddressPool;

  public static final String SERIALIZED_NAME_VPN_CLIENT_CONNECTION_HEALTH = "vpnClientConnectionHealth";
  @SerializedName(SERIALIZED_NAME_VPN_CLIENT_CONNECTION_HEALTH)
  private VpnClientConnectionHealth vpnClientConnectionHealth;

  public static final String SERIALIZED_NAME_VPN_GATEWAY_SCALE_UNIT = "vpnGatewayScaleUnit";
  @SerializedName(SERIALIZED_NAME_VPN_GATEWAY_SCALE_UNIT)
  private Integer vpnGatewayScaleUnit;

  public P2SVpnGatewayProperties() {
  }

  public P2SVpnGatewayProperties(
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.provisioningState = provisioningState;
  }

  public P2SVpnGatewayProperties customRoutes(P2SVpnGatewayPropertiesCustomRoutes customRoutes) {
    this.customRoutes = customRoutes;
    return this;
  }

  /**
   * Get customRoutes
   * @return customRoutes
   */
  @javax.annotation.Nullable
  public P2SVpnGatewayPropertiesCustomRoutes getCustomRoutes() {
    return customRoutes;
  }

  public void setCustomRoutes(P2SVpnGatewayPropertiesCustomRoutes customRoutes) {
    this.customRoutes = customRoutes;
  }


  public P2SVpnGatewayProperties p2SVpnServerConfiguration(HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork p2SVpnServerConfiguration) {
    this.p2SVpnServerConfiguration = p2SVpnServerConfiguration;
    return this;
  }

  /**
   * Get p2SVpnServerConfiguration
   * @return p2SVpnServerConfiguration
   */
  @javax.annotation.Nullable
  public HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork getP2SVpnServerConfiguration() {
    return p2SVpnServerConfiguration;
  }

  public void setP2SVpnServerConfiguration(HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork p2SVpnServerConfiguration) {
    this.p2SVpnServerConfiguration = p2SVpnServerConfiguration;
  }


  /**
   * The current provisioning state.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  public P2SVpnGatewayProperties virtualHub(HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork virtualHub) {
    this.virtualHub = virtualHub;
    return this;
  }

  /**
   * Get virtualHub
   * @return virtualHub
   */
  @javax.annotation.Nullable
  public HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork getVirtualHub() {
    return virtualHub;
  }

  public void setVirtualHub(HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork virtualHub) {
    this.virtualHub = virtualHub;
  }


  public P2SVpnGatewayProperties vpnClientAddressPool(P2SVpnGatewayPropertiesCustomRoutes vpnClientAddressPool) {
    this.vpnClientAddressPool = vpnClientAddressPool;
    return this;
  }

  /**
   * Get vpnClientAddressPool
   * @return vpnClientAddressPool
   */
  @javax.annotation.Nullable
  public P2SVpnGatewayPropertiesCustomRoutes getVpnClientAddressPool() {
    return vpnClientAddressPool;
  }

  public void setVpnClientAddressPool(P2SVpnGatewayPropertiesCustomRoutes vpnClientAddressPool) {
    this.vpnClientAddressPool = vpnClientAddressPool;
  }


  public P2SVpnGatewayProperties vpnClientConnectionHealth(VpnClientConnectionHealth vpnClientConnectionHealth) {
    this.vpnClientConnectionHealth = vpnClientConnectionHealth;
    return this;
  }

  /**
   * Get vpnClientConnectionHealth
   * @return vpnClientConnectionHealth
   */
  @javax.annotation.Nullable
  public VpnClientConnectionHealth getVpnClientConnectionHealth() {
    return vpnClientConnectionHealth;
  }

  public void setVpnClientConnectionHealth(VpnClientConnectionHealth vpnClientConnectionHealth) {
    this.vpnClientConnectionHealth = vpnClientConnectionHealth;
  }


  public P2SVpnGatewayProperties vpnGatewayScaleUnit(Integer vpnGatewayScaleUnit) {
    this.vpnGatewayScaleUnit = vpnGatewayScaleUnit;
    return this;
  }

  /**
   * The scale unit for this p2s vpn gateway.
   * @return vpnGatewayScaleUnit
   */
  @javax.annotation.Nullable
  public Integer getVpnGatewayScaleUnit() {
    return vpnGatewayScaleUnit;
  }

  public void setVpnGatewayScaleUnit(Integer vpnGatewayScaleUnit) {
    this.vpnGatewayScaleUnit = vpnGatewayScaleUnit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    P2SVpnGatewayProperties p2SVpnGatewayProperties = (P2SVpnGatewayProperties) o;
    return Objects.equals(this.customRoutes, p2SVpnGatewayProperties.customRoutes) &&
        Objects.equals(this.p2SVpnServerConfiguration, p2SVpnGatewayProperties.p2SVpnServerConfiguration) &&
        Objects.equals(this.provisioningState, p2SVpnGatewayProperties.provisioningState) &&
        Objects.equals(this.virtualHub, p2SVpnGatewayProperties.virtualHub) &&
        Objects.equals(this.vpnClientAddressPool, p2SVpnGatewayProperties.vpnClientAddressPool) &&
        Objects.equals(this.vpnClientConnectionHealth, p2SVpnGatewayProperties.vpnClientConnectionHealth) &&
        Objects.equals(this.vpnGatewayScaleUnit, p2SVpnGatewayProperties.vpnGatewayScaleUnit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customRoutes, p2SVpnServerConfiguration, provisioningState, virtualHub, vpnClientAddressPool, vpnClientConnectionHealth, vpnGatewayScaleUnit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class P2SVpnGatewayProperties {\n");
    sb.append("    customRoutes: ").append(toIndentedString(customRoutes)).append("\n");
    sb.append("    p2SVpnServerConfiguration: ").append(toIndentedString(p2SVpnServerConfiguration)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    virtualHub: ").append(toIndentedString(virtualHub)).append("\n");
    sb.append("    vpnClientAddressPool: ").append(toIndentedString(vpnClientAddressPool)).append("\n");
    sb.append("    vpnClientConnectionHealth: ").append(toIndentedString(vpnClientConnectionHealth)).append("\n");
    sb.append("    vpnGatewayScaleUnit: ").append(toIndentedString(vpnGatewayScaleUnit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customRoutes");
    openapiFields.add("p2SVpnServerConfiguration");
    openapiFields.add("provisioningState");
    openapiFields.add("virtualHub");
    openapiFields.add("vpnClientAddressPool");
    openapiFields.add("vpnClientConnectionHealth");
    openapiFields.add("vpnGatewayScaleUnit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to P2SVpnGatewayProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!P2SVpnGatewayProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in P2SVpnGatewayProperties is not found in the empty JSON string", P2SVpnGatewayProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!P2SVpnGatewayProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `P2SVpnGatewayProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `customRoutes`
      if (jsonObj.get("customRoutes") != null && !jsonObj.get("customRoutes").isJsonNull()) {
        P2SVpnGatewayPropertiesCustomRoutes.validateJsonElement(jsonObj.get("customRoutes"));
      }
      // validate the optional field `p2SVpnServerConfiguration`
      if (jsonObj.get("p2SVpnServerConfiguration") != null && !jsonObj.get("p2SVpnServerConfiguration").isJsonNull()) {
        HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork.validateJsonElement(jsonObj.get("p2SVpnServerConfiguration"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      // validate the optional field `virtualHub`
      if (jsonObj.get("virtualHub") != null && !jsonObj.get("virtualHub").isJsonNull()) {
        HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork.validateJsonElement(jsonObj.get("virtualHub"));
      }
      // validate the optional field `vpnClientAddressPool`
      if (jsonObj.get("vpnClientAddressPool") != null && !jsonObj.get("vpnClientAddressPool").isJsonNull()) {
        P2SVpnGatewayPropertiesCustomRoutes.validateJsonElement(jsonObj.get("vpnClientAddressPool"));
      }
      // validate the optional field `vpnClientConnectionHealth`
      if (jsonObj.get("vpnClientConnectionHealth") != null && !jsonObj.get("vpnClientConnectionHealth").isJsonNull()) {
        VpnClientConnectionHealth.validateJsonElement(jsonObj.get("vpnClientConnectionHealth"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!P2SVpnGatewayProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'P2SVpnGatewayProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<P2SVpnGatewayProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(P2SVpnGatewayProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<P2SVpnGatewayProperties>() {
           @Override
           public void write(JsonWriter out, P2SVpnGatewayProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public P2SVpnGatewayProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of P2SVpnGatewayProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of P2SVpnGatewayProperties
   * @throws IOException if the JSON string is invalid with respect to P2SVpnGatewayProperties
   */
  public static P2SVpnGatewayProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, P2SVpnGatewayProperties.class);
  }

  /**
   * Convert an instance of P2SVpnGatewayProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

