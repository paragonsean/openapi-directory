/**
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualWanProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualWanProperties::OAIVirtualWanProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualWanProperties::OAIVirtualWanProperties() {
    this->initializeModel();
}

OAIVirtualWanProperties::~OAIVirtualWanProperties() {}

void OAIVirtualWanProperties::initializeModel() {

    m_allow_branch_to_branch_traffic_isSet = false;
    m_allow_branch_to_branch_traffic_isValid = false;

    m_allow_vnet_to_vnet_traffic_isSet = false;
    m_allow_vnet_to_vnet_traffic_isValid = false;

    m_disable_vpn_encryption_isSet = false;
    m_disable_vpn_encryption_isValid = false;

    m_office365_local_breakout_category_isSet = false;
    m_office365_local_breakout_category_isValid = false;

    m_p2_s_vpn_server_configurations_isSet = false;
    m_p2_s_vpn_server_configurations_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_security_provider_name_isSet = false;
    m_security_provider_name_isValid = false;

    m_virtual_hubs_isSet = false;
    m_virtual_hubs_isValid = false;

    m_vpn_sites_isSet = false;
    m_vpn_sites_isValid = false;
}

void OAIVirtualWanProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualWanProperties::fromJsonObject(QJsonObject json) {

    m_allow_branch_to_branch_traffic_isValid = ::OpenAPI::fromJsonValue(m_allow_branch_to_branch_traffic, json[QString("allowBranchToBranchTraffic")]);
    m_allow_branch_to_branch_traffic_isSet = !json[QString("allowBranchToBranchTraffic")].isNull() && m_allow_branch_to_branch_traffic_isValid;

    m_allow_vnet_to_vnet_traffic_isValid = ::OpenAPI::fromJsonValue(m_allow_vnet_to_vnet_traffic, json[QString("allowVnetToVnetTraffic")]);
    m_allow_vnet_to_vnet_traffic_isSet = !json[QString("allowVnetToVnetTraffic")].isNull() && m_allow_vnet_to_vnet_traffic_isValid;

    m_disable_vpn_encryption_isValid = ::OpenAPI::fromJsonValue(m_disable_vpn_encryption, json[QString("disableVpnEncryption")]);
    m_disable_vpn_encryption_isSet = !json[QString("disableVpnEncryption")].isNull() && m_disable_vpn_encryption_isValid;

    m_office365_local_breakout_category_isValid = ::OpenAPI::fromJsonValue(m_office365_local_breakout_category, json[QString("office365LocalBreakoutCategory")]);
    m_office365_local_breakout_category_isSet = !json[QString("office365LocalBreakoutCategory")].isNull() && m_office365_local_breakout_category_isValid;

    m_p2_s_vpn_server_configurations_isValid = ::OpenAPI::fromJsonValue(m_p2_s_vpn_server_configurations, json[QString("p2SVpnServerConfigurations")]);
    m_p2_s_vpn_server_configurations_isSet = !json[QString("p2SVpnServerConfigurations")].isNull() && m_p2_s_vpn_server_configurations_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_security_provider_name_isValid = ::OpenAPI::fromJsonValue(m_security_provider_name, json[QString("securityProviderName")]);
    m_security_provider_name_isSet = !json[QString("securityProviderName")].isNull() && m_security_provider_name_isValid;

    m_virtual_hubs_isValid = ::OpenAPI::fromJsonValue(m_virtual_hubs, json[QString("virtualHubs")]);
    m_virtual_hubs_isSet = !json[QString("virtualHubs")].isNull() && m_virtual_hubs_isValid;

    m_vpn_sites_isValid = ::OpenAPI::fromJsonValue(m_vpn_sites, json[QString("vpnSites")]);
    m_vpn_sites_isSet = !json[QString("vpnSites")].isNull() && m_vpn_sites_isValid;
}

QString OAIVirtualWanProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualWanProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_branch_to_branch_traffic_isSet) {
        obj.insert(QString("allowBranchToBranchTraffic"), ::OpenAPI::toJsonValue(m_allow_branch_to_branch_traffic));
    }
    if (m_allow_vnet_to_vnet_traffic_isSet) {
        obj.insert(QString("allowVnetToVnetTraffic"), ::OpenAPI::toJsonValue(m_allow_vnet_to_vnet_traffic));
    }
    if (m_disable_vpn_encryption_isSet) {
        obj.insert(QString("disableVpnEncryption"), ::OpenAPI::toJsonValue(m_disable_vpn_encryption));
    }
    if (m_office365_local_breakout_category.isSet()) {
        obj.insert(QString("office365LocalBreakoutCategory"), ::OpenAPI::toJsonValue(m_office365_local_breakout_category));
    }
    if (m_p2_s_vpn_server_configurations.size() > 0) {
        obj.insert(QString("p2SVpnServerConfigurations"), ::OpenAPI::toJsonValue(m_p2_s_vpn_server_configurations));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_security_provider_name_isSet) {
        obj.insert(QString("securityProviderName"), ::OpenAPI::toJsonValue(m_security_provider_name));
    }
    if (m_virtual_hubs.size() > 0) {
        obj.insert(QString("virtualHubs"), ::OpenAPI::toJsonValue(m_virtual_hubs));
    }
    if (m_vpn_sites.size() > 0) {
        obj.insert(QString("vpnSites"), ::OpenAPI::toJsonValue(m_vpn_sites));
    }
    return obj;
}

bool OAIVirtualWanProperties::isAllowBranchToBranchTraffic() const {
    return m_allow_branch_to_branch_traffic;
}
void OAIVirtualWanProperties::setAllowBranchToBranchTraffic(const bool &allow_branch_to_branch_traffic) {
    m_allow_branch_to_branch_traffic = allow_branch_to_branch_traffic;
    m_allow_branch_to_branch_traffic_isSet = true;
}

bool OAIVirtualWanProperties::is_allow_branch_to_branch_traffic_Set() const{
    return m_allow_branch_to_branch_traffic_isSet;
}

bool OAIVirtualWanProperties::is_allow_branch_to_branch_traffic_Valid() const{
    return m_allow_branch_to_branch_traffic_isValid;
}

bool OAIVirtualWanProperties::isAllowVnetToVnetTraffic() const {
    return m_allow_vnet_to_vnet_traffic;
}
void OAIVirtualWanProperties::setAllowVnetToVnetTraffic(const bool &allow_vnet_to_vnet_traffic) {
    m_allow_vnet_to_vnet_traffic = allow_vnet_to_vnet_traffic;
    m_allow_vnet_to_vnet_traffic_isSet = true;
}

bool OAIVirtualWanProperties::is_allow_vnet_to_vnet_traffic_Set() const{
    return m_allow_vnet_to_vnet_traffic_isSet;
}

bool OAIVirtualWanProperties::is_allow_vnet_to_vnet_traffic_Valid() const{
    return m_allow_vnet_to_vnet_traffic_isValid;
}

bool OAIVirtualWanProperties::isDisableVpnEncryption() const {
    return m_disable_vpn_encryption;
}
void OAIVirtualWanProperties::setDisableVpnEncryption(const bool &disable_vpn_encryption) {
    m_disable_vpn_encryption = disable_vpn_encryption;
    m_disable_vpn_encryption_isSet = true;
}

bool OAIVirtualWanProperties::is_disable_vpn_encryption_Set() const{
    return m_disable_vpn_encryption_isSet;
}

bool OAIVirtualWanProperties::is_disable_vpn_encryption_Valid() const{
    return m_disable_vpn_encryption_isValid;
}

OAIOfficeTrafficCategory OAIVirtualWanProperties::getOffice365LocalBreakoutCategory() const {
    return m_office365_local_breakout_category;
}
void OAIVirtualWanProperties::setOffice365LocalBreakoutCategory(const OAIOfficeTrafficCategory &office365_local_breakout_category) {
    m_office365_local_breakout_category = office365_local_breakout_category;
    m_office365_local_breakout_category_isSet = true;
}

bool OAIVirtualWanProperties::is_office365_local_breakout_category_Set() const{
    return m_office365_local_breakout_category_isSet;
}

bool OAIVirtualWanProperties::is_office365_local_breakout_category_Valid() const{
    return m_office365_local_breakout_category_isValid;
}

QList<OAIP2SVpnServerConfiguration> OAIVirtualWanProperties::getP2SVpnServerConfigurations() const {
    return m_p2_s_vpn_server_configurations;
}
void OAIVirtualWanProperties::setP2SVpnServerConfigurations(const QList<OAIP2SVpnServerConfiguration> &p2_s_vpn_server_configurations) {
    m_p2_s_vpn_server_configurations = p2_s_vpn_server_configurations;
    m_p2_s_vpn_server_configurations_isSet = true;
}

bool OAIVirtualWanProperties::is_p2_s_vpn_server_configurations_Set() const{
    return m_p2_s_vpn_server_configurations_isSet;
}

bool OAIVirtualWanProperties::is_p2_s_vpn_server_configurations_Valid() const{
    return m_p2_s_vpn_server_configurations_isValid;
}

QString OAIVirtualWanProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIVirtualWanProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIVirtualWanProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIVirtualWanProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIVirtualWanProperties::getSecurityProviderName() const {
    return m_security_provider_name;
}
void OAIVirtualWanProperties::setSecurityProviderName(const QString &security_provider_name) {
    m_security_provider_name = security_provider_name;
    m_security_provider_name_isSet = true;
}

bool OAIVirtualWanProperties::is_security_provider_name_Set() const{
    return m_security_provider_name_isSet;
}

bool OAIVirtualWanProperties::is_security_provider_name_Valid() const{
    return m_security_provider_name_isValid;
}

QList<OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork> OAIVirtualWanProperties::getVirtualHubs() const {
    return m_virtual_hubs;
}
void OAIVirtualWanProperties::setVirtualHubs(const QList<OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork> &virtual_hubs) {
    m_virtual_hubs = virtual_hubs;
    m_virtual_hubs_isSet = true;
}

bool OAIVirtualWanProperties::is_virtual_hubs_Set() const{
    return m_virtual_hubs_isSet;
}

bool OAIVirtualWanProperties::is_virtual_hubs_Valid() const{
    return m_virtual_hubs_isValid;
}

QList<OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork> OAIVirtualWanProperties::getVpnSites() const {
    return m_vpn_sites;
}
void OAIVirtualWanProperties::setVpnSites(const QList<OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork> &vpn_sites) {
    m_vpn_sites = vpn_sites;
    m_vpn_sites_isSet = true;
}

bool OAIVirtualWanProperties::is_vpn_sites_Set() const{
    return m_vpn_sites_isSet;
}

bool OAIVirtualWanProperties::is_vpn_sites_Valid() const{
    return m_vpn_sites_isValid;
}

bool OAIVirtualWanProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_branch_to_branch_traffic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_vnet_to_vnet_traffic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_vpn_encryption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_office365_local_breakout_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_p2_s_vpn_server_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_hubs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_sites.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualWanProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
