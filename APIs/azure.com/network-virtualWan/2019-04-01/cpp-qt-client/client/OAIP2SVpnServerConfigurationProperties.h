/**
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIP2SVpnServerConfigurationProperties.h
 *
 * Parameters for P2SVpnServerConfiguration.
 */

#ifndef OAIP2SVpnServerConfigurationProperties_H
#define OAIP2SVpnServerConfigurationProperties_H

#include <QJsonObject>

#include "OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork.h"
#include "OAIP2SVpnServerConfigRadiusClientRootCertificate.h"
#include "OAIP2SVpnServerConfigRadiusServerRootCertificate.h"
#include "OAIP2SVpnServerConfigVpnClientRevokedCertificate.h"
#include "OAIP2SVpnServerConfigVpnClientRootCertificate.h"
#include "OAIP2SVpnServerConfigurationProperties_vpnClientIpsecPolicies_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork;
class OAIP2SVpnServerConfigRadiusClientRootCertificate;
class OAIP2SVpnServerConfigRadiusServerRootCertificate;
class OAIP2SVpnServerConfigVpnClientRevokedCertificate;
class OAIP2SVpnServerConfigVpnClientRootCertificate;
class OAIP2SVpnServerConfigurationProperties_vpnClientIpsecPolicies_inner;

class OAIP2SVpnServerConfigurationProperties : public OAIObject {
public:
    OAIP2SVpnServerConfigurationProperties();
    OAIP2SVpnServerConfigurationProperties(QString json);
    ~OAIP2SVpnServerConfigurationProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEtag() const;
    void setEtag(const QString &etag);
    bool is_etag_Set() const;
    bool is_etag_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork> getP2SVpnGateways() const;
    void setP2SVpnGateways(const QList<OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork> &p2_s_vpn_gateways);
    bool is_p2_s_vpn_gateways_Set() const;
    bool is_p2_s_vpn_gateways_Valid() const;

    QList<OAIP2SVpnServerConfigRadiusClientRootCertificate> getP2SVpnServerConfigRadiusClientRootCertificates() const;
    void setP2SVpnServerConfigRadiusClientRootCertificates(const QList<OAIP2SVpnServerConfigRadiusClientRootCertificate> &p2_s_vpn_server_config_radius_client_root_certificates);
    bool is_p2_s_vpn_server_config_radius_client_root_certificates_Set() const;
    bool is_p2_s_vpn_server_config_radius_client_root_certificates_Valid() const;

    QList<OAIP2SVpnServerConfigRadiusServerRootCertificate> getP2SVpnServerConfigRadiusServerRootCertificates() const;
    void setP2SVpnServerConfigRadiusServerRootCertificates(const QList<OAIP2SVpnServerConfigRadiusServerRootCertificate> &p2_s_vpn_server_config_radius_server_root_certificates);
    bool is_p2_s_vpn_server_config_radius_server_root_certificates_Set() const;
    bool is_p2_s_vpn_server_config_radius_server_root_certificates_Valid() const;

    QList<OAIP2SVpnServerConfigVpnClientRevokedCertificate> getP2SVpnServerConfigVpnClientRevokedCertificates() const;
    void setP2SVpnServerConfigVpnClientRevokedCertificates(const QList<OAIP2SVpnServerConfigVpnClientRevokedCertificate> &p2_s_vpn_server_config_vpn_client_revoked_certificates);
    bool is_p2_s_vpn_server_config_vpn_client_revoked_certificates_Set() const;
    bool is_p2_s_vpn_server_config_vpn_client_revoked_certificates_Valid() const;

    QList<OAIP2SVpnServerConfigVpnClientRootCertificate> getP2SVpnServerConfigVpnClientRootCertificates() const;
    void setP2SVpnServerConfigVpnClientRootCertificates(const QList<OAIP2SVpnServerConfigVpnClientRootCertificate> &p2_s_vpn_server_config_vpn_client_root_certificates);
    bool is_p2_s_vpn_server_config_vpn_client_root_certificates_Set() const;
    bool is_p2_s_vpn_server_config_vpn_client_root_certificates_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    QString getRadiusServerAddress() const;
    void setRadiusServerAddress(const QString &radius_server_address);
    bool is_radius_server_address_Set() const;
    bool is_radius_server_address_Valid() const;

    QString getRadiusServerSecret() const;
    void setRadiusServerSecret(const QString &radius_server_secret);
    bool is_radius_server_secret_Set() const;
    bool is_radius_server_secret_Valid() const;

    QList<OAIP2SVpnServerConfigurationProperties_vpnClientIpsecPolicies_inner> getVpnClientIpsecPolicies() const;
    void setVpnClientIpsecPolicies(const QList<OAIP2SVpnServerConfigurationProperties_vpnClientIpsecPolicies_inner> &vpn_client_ipsec_policies);
    bool is_vpn_client_ipsec_policies_Set() const;
    bool is_vpn_client_ipsec_policies_Valid() const;

    QList<QString> getVpnProtocols() const;
    void setVpnProtocols(const QList<QString> &vpn_protocols);
    bool is_vpn_protocols_Set() const;
    bool is_vpn_protocols_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_etag;
    bool m_etag_isSet;
    bool m_etag_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork> m_p2_s_vpn_gateways;
    bool m_p2_s_vpn_gateways_isSet;
    bool m_p2_s_vpn_gateways_isValid;

    QList<OAIP2SVpnServerConfigRadiusClientRootCertificate> m_p2_s_vpn_server_config_radius_client_root_certificates;
    bool m_p2_s_vpn_server_config_radius_client_root_certificates_isSet;
    bool m_p2_s_vpn_server_config_radius_client_root_certificates_isValid;

    QList<OAIP2SVpnServerConfigRadiusServerRootCertificate> m_p2_s_vpn_server_config_radius_server_root_certificates;
    bool m_p2_s_vpn_server_config_radius_server_root_certificates_isSet;
    bool m_p2_s_vpn_server_config_radius_server_root_certificates_isValid;

    QList<OAIP2SVpnServerConfigVpnClientRevokedCertificate> m_p2_s_vpn_server_config_vpn_client_revoked_certificates;
    bool m_p2_s_vpn_server_config_vpn_client_revoked_certificates_isSet;
    bool m_p2_s_vpn_server_config_vpn_client_revoked_certificates_isValid;

    QList<OAIP2SVpnServerConfigVpnClientRootCertificate> m_p2_s_vpn_server_config_vpn_client_root_certificates;
    bool m_p2_s_vpn_server_config_vpn_client_root_certificates_isSet;
    bool m_p2_s_vpn_server_config_vpn_client_root_certificates_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    QString m_radius_server_address;
    bool m_radius_server_address_isSet;
    bool m_radius_server_address_isValid;

    QString m_radius_server_secret;
    bool m_radius_server_secret_isSet;
    bool m_radius_server_secret_isValid;

    QList<OAIP2SVpnServerConfigurationProperties_vpnClientIpsecPolicies_inner> m_vpn_client_ipsec_policies;
    bool m_vpn_client_ipsec_policies_isSet;
    bool m_vpn_client_ipsec_policies_isValid;

    QList<QString> m_vpn_protocols;
    bool m_vpn_protocols_isSet;
    bool m_vpn_protocols_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIP2SVpnServerConfigurationProperties)

#endif // OAIP2SVpnServerConfigurationProperties_H
