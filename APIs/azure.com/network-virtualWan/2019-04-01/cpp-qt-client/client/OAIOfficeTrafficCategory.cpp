/**
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfficeTrafficCategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfficeTrafficCategory::OAIOfficeTrafficCategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfficeTrafficCategory::OAIOfficeTrafficCategory() {
    this->initializeModel();
}

OAIOfficeTrafficCategory::~OAIOfficeTrafficCategory() {}

void OAIOfficeTrafficCategory::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOfficeTrafficCategory::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOfficeTrafficCategory::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Optimize", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfficeTrafficCategory::OPTIMIZE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OptimizeAndAllow", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfficeTrafficCategory::OPTIMIZEANDALLOW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("All", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfficeTrafficCategory::ALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("None", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOfficeTrafficCategory::NONE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOfficeTrafficCategory::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOfficeTrafficCategory::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOfficeTrafficCategory::OPTIMIZE:
            val = "Optimize";
            break;
        case eOAIOfficeTrafficCategory::OPTIMIZEANDALLOW:
            val = "OptimizeAndAllow";
            break;
        case eOAIOfficeTrafficCategory::ALL:
            val = "All";
            break;
        case eOAIOfficeTrafficCategory::NONE:
            val = "None";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOfficeTrafficCategory::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOfficeTrafficCategory::eOAIOfficeTrafficCategory OAIOfficeTrafficCategory::getValue() const {
    return m_value;
}

void OAIOfficeTrafficCategory::setValue(const OAIOfficeTrafficCategory::eOAIOfficeTrafficCategory& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOfficeTrafficCategory::isSet() const {
    
    return m_value_isSet;
}

bool OAIOfficeTrafficCategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
