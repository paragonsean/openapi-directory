/**
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.VirtualWanasAServiceManagementClient);
  }
}(this, function(expect, VirtualWanasAServiceManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new VirtualWanasAServiceManagementClient.P2SVpnServerConfigurationProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('P2SVpnServerConfigurationProperties', function() {
    it('should create an instance of P2SVpnServerConfigurationProperties', function() {
      // uncomment below and update the code to test P2SVpnServerConfigurationProperties
      //var instance = new VirtualWanasAServiceManagementClient.P2SVpnServerConfigurationProperties();
      //expect(instance).to.be.a(VirtualWanasAServiceManagementClient.P2SVpnServerConfigurationProperties);
    });

    it('should have the property etag (base name: "etag")', function() {
      // uncomment below and update the code to test the property etag
      //var instance = new VirtualWanasAServiceManagementClient.P2SVpnServerConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new VirtualWanasAServiceManagementClient.P2SVpnServerConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property p2SVpnGateways (base name: "p2SVpnGateways")', function() {
      // uncomment below and update the code to test the property p2SVpnGateways
      //var instance = new VirtualWanasAServiceManagementClient.P2SVpnServerConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property p2SVpnServerConfigRadiusClientRootCertificates (base name: "p2SVpnServerConfigRadiusClientRootCertificates")', function() {
      // uncomment below and update the code to test the property p2SVpnServerConfigRadiusClientRootCertificates
      //var instance = new VirtualWanasAServiceManagementClient.P2SVpnServerConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property p2SVpnServerConfigRadiusServerRootCertificates (base name: "p2SVpnServerConfigRadiusServerRootCertificates")', function() {
      // uncomment below and update the code to test the property p2SVpnServerConfigRadiusServerRootCertificates
      //var instance = new VirtualWanasAServiceManagementClient.P2SVpnServerConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property p2SVpnServerConfigVpnClientRevokedCertificates (base name: "p2SVpnServerConfigVpnClientRevokedCertificates")', function() {
      // uncomment below and update the code to test the property p2SVpnServerConfigVpnClientRevokedCertificates
      //var instance = new VirtualWanasAServiceManagementClient.P2SVpnServerConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property p2SVpnServerConfigVpnClientRootCertificates (base name: "p2SVpnServerConfigVpnClientRootCertificates")', function() {
      // uncomment below and update the code to test the property p2SVpnServerConfigVpnClientRootCertificates
      //var instance = new VirtualWanasAServiceManagementClient.P2SVpnServerConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property provisioningState (base name: "provisioningState")', function() {
      // uncomment below and update the code to test the property provisioningState
      //var instance = new VirtualWanasAServiceManagementClient.P2SVpnServerConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property radiusServerAddress (base name: "radiusServerAddress")', function() {
      // uncomment below and update the code to test the property radiusServerAddress
      //var instance = new VirtualWanasAServiceManagementClient.P2SVpnServerConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property radiusServerSecret (base name: "radiusServerSecret")', function() {
      // uncomment below and update the code to test the property radiusServerSecret
      //var instance = new VirtualWanasAServiceManagementClient.P2SVpnServerConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property vpnClientIpsecPolicies (base name: "vpnClientIpsecPolicies")', function() {
      // uncomment below and update the code to test the property vpnClientIpsecPolicies
      //var instance = new VirtualWanasAServiceManagementClient.P2SVpnServerConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property vpnProtocols (base name: "vpnProtocols")', function() {
      // uncomment below and update the code to test the property vpnProtocols
      //var instance = new VirtualWanasAServiceManagementClient.P2SVpnServerConfigurationProperties();
      //expect(instance).to.be();
    });

  });

}));
