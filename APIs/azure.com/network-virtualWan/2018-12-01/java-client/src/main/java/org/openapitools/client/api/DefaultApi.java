/*
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2018-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetVpnSitesConfigurationRequest;
import org.openapitools.client.model.HubVirtualNetworkConnection;
import org.openapitools.client.model.ListHubVirtualNetworkConnectionsResult;
import org.openapitools.client.model.ListP2SVpnGatewaysResult;
import org.openapitools.client.model.ListP2SVpnServerConfigurationsResult;
import org.openapitools.client.model.ListVirtualHubsResult;
import org.openapitools.client.model.ListVirtualWANsResult;
import org.openapitools.client.model.ListVpnConnectionsResult;
import org.openapitools.client.model.ListVpnGatewaysResult;
import org.openapitools.client.model.ListVpnSitesResult;
import org.openapitools.client.model.P2SVpnGateway;
import org.openapitools.client.model.P2SVpnServerConfiguration;
import org.openapitools.client.model.P2sVpnGatewaysListDefaultResponse;
import org.openapitools.client.model.VirtualHub;
import org.openapitools.client.model.VirtualWAN;
import org.openapitools.client.model.VirtualWanSecurityProviders;
import org.openapitools.client.model.VpnConnection;
import org.openapitools.client.model.VpnGateway;
import org.openapitools.client.model.VpnSite;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for hubVirtualNetworkConnectionsGet
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualHub. (required)
     * @param virtualHubName The name of the VirtualHub. (required)
     * @param connectionName The name of the vpn connection. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the HubVirtualNetworkConnection retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hubVirtualNetworkConnectionsGetCall(String subscriptionId, String resourceGroupName, String virtualHubName, String connectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{virtualHubName}/hubVirtualNetworkConnections/{connectionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualHubName" + "}", localVarApiClient.escapeString(virtualHubName.toString()))
            .replace("{" + "connectionName" + "}", localVarApiClient.escapeString(connectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hubVirtualNetworkConnectionsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String virtualHubName, String connectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hubVirtualNetworkConnectionsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hubVirtualNetworkConnectionsGet(Async)");
        }

        // verify the required parameter 'virtualHubName' is set
        if (virtualHubName == null) {
            throw new ApiException("Missing the required parameter 'virtualHubName' when calling hubVirtualNetworkConnectionsGet(Async)");
        }

        // verify the required parameter 'connectionName' is set
        if (connectionName == null) {
            throw new ApiException("Missing the required parameter 'connectionName' when calling hubVirtualNetworkConnectionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hubVirtualNetworkConnectionsGet(Async)");
        }

        return hubVirtualNetworkConnectionsGetCall(subscriptionId, resourceGroupName, virtualHubName, connectionName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves the details of a HubVirtualNetworkConnection.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualHub. (required)
     * @param virtualHubName The name of the VirtualHub. (required)
     * @param connectionName The name of the vpn connection. (required)
     * @param apiVersion Client API version. (required)
     * @return HubVirtualNetworkConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the HubVirtualNetworkConnection retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public HubVirtualNetworkConnection hubVirtualNetworkConnectionsGet(String subscriptionId, String resourceGroupName, String virtualHubName, String connectionName, String apiVersion) throws ApiException {
        ApiResponse<HubVirtualNetworkConnection> localVarResp = hubVirtualNetworkConnectionsGetWithHttpInfo(subscriptionId, resourceGroupName, virtualHubName, connectionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the details of a HubVirtualNetworkConnection.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualHub. (required)
     * @param virtualHubName The name of the VirtualHub. (required)
     * @param connectionName The name of the vpn connection. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;HubVirtualNetworkConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the HubVirtualNetworkConnection retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HubVirtualNetworkConnection> hubVirtualNetworkConnectionsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String virtualHubName, String connectionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hubVirtualNetworkConnectionsGetValidateBeforeCall(subscriptionId, resourceGroupName, virtualHubName, connectionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<HubVirtualNetworkConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the details of a HubVirtualNetworkConnection.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualHub. (required)
     * @param virtualHubName The name of the VirtualHub. (required)
     * @param connectionName The name of the vpn connection. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the HubVirtualNetworkConnection retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hubVirtualNetworkConnectionsGetAsync(String subscriptionId, String resourceGroupName, String virtualHubName, String connectionName, String apiVersion, final ApiCallback<HubVirtualNetworkConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = hubVirtualNetworkConnectionsGetValidateBeforeCall(subscriptionId, resourceGroupName, virtualHubName, connectionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<HubVirtualNetworkConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hubVirtualNetworkConnectionsList
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualHub. (required)
     * @param virtualHubName The name of the VirtualHub. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the HubVirtualNetworkConnections for the VirtualHub. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hubVirtualNetworkConnectionsListCall(String subscriptionId, String resourceGroupName, String virtualHubName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{virtualHubName}/hubVirtualNetworkConnections"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualHubName" + "}", localVarApiClient.escapeString(virtualHubName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hubVirtualNetworkConnectionsListValidateBeforeCall(String subscriptionId, String resourceGroupName, String virtualHubName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hubVirtualNetworkConnectionsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hubVirtualNetworkConnectionsList(Async)");
        }

        // verify the required parameter 'virtualHubName' is set
        if (virtualHubName == null) {
            throw new ApiException("Missing the required parameter 'virtualHubName' when calling hubVirtualNetworkConnectionsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hubVirtualNetworkConnectionsList(Async)");
        }

        return hubVirtualNetworkConnectionsListCall(subscriptionId, resourceGroupName, virtualHubName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves the details of all HubVirtualNetworkConnections.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualHub. (required)
     * @param virtualHubName The name of the VirtualHub. (required)
     * @param apiVersion Client API version. (required)
     * @return ListHubVirtualNetworkConnectionsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the HubVirtualNetworkConnections for the VirtualHub. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListHubVirtualNetworkConnectionsResult hubVirtualNetworkConnectionsList(String subscriptionId, String resourceGroupName, String virtualHubName, String apiVersion) throws ApiException {
        ApiResponse<ListHubVirtualNetworkConnectionsResult> localVarResp = hubVirtualNetworkConnectionsListWithHttpInfo(subscriptionId, resourceGroupName, virtualHubName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the details of all HubVirtualNetworkConnections.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualHub. (required)
     * @param virtualHubName The name of the VirtualHub. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;ListHubVirtualNetworkConnectionsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the HubVirtualNetworkConnections for the VirtualHub. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListHubVirtualNetworkConnectionsResult> hubVirtualNetworkConnectionsListWithHttpInfo(String subscriptionId, String resourceGroupName, String virtualHubName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hubVirtualNetworkConnectionsListValidateBeforeCall(subscriptionId, resourceGroupName, virtualHubName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ListHubVirtualNetworkConnectionsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the details of all HubVirtualNetworkConnections.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualHub. (required)
     * @param virtualHubName The name of the VirtualHub. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the HubVirtualNetworkConnections for the VirtualHub. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hubVirtualNetworkConnectionsListAsync(String subscriptionId, String resourceGroupName, String virtualHubName, String apiVersion, final ApiCallback<ListHubVirtualNetworkConnectionsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = hubVirtualNetworkConnectionsListValidateBeforeCall(subscriptionId, resourceGroupName, virtualHubName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ListHubVirtualNetworkConnectionsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for p2sVpnGatewaysCreateOrUpdate
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the P2SVpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param p2SVpnGatewayParameters Parameters supplied to create or Update a virtual wan p2s vpn gateway. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the virtual wan p2s vpn Gateway created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request successful. Returns the details of the virtual wan p2s vpn gateway retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call p2sVpnGatewaysCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion, P2SVpnGateway p2SVpnGatewayParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = p2SVpnGatewayParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/p2svpnGateways/{gatewayName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "gatewayName" + "}", localVarApiClient.escapeString(gatewayName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call p2sVpnGatewaysCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion, P2SVpnGateway p2SVpnGatewayParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling p2sVpnGatewaysCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling p2sVpnGatewaysCreateOrUpdate(Async)");
        }

        // verify the required parameter 'gatewayName' is set
        if (gatewayName == null) {
            throw new ApiException("Missing the required parameter 'gatewayName' when calling p2sVpnGatewaysCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling p2sVpnGatewaysCreateOrUpdate(Async)");
        }

        // verify the required parameter 'p2SVpnGatewayParameters' is set
        if (p2SVpnGatewayParameters == null) {
            throw new ApiException("Missing the required parameter 'p2SVpnGatewayParameters' when calling p2sVpnGatewaysCreateOrUpdate(Async)");
        }

        return p2sVpnGatewaysCreateOrUpdateCall(subscriptionId, resourceGroupName, gatewayName, apiVersion, p2SVpnGatewayParameters, _callback);

    }

    /**
     * 
     * Creates a virtual wan p2s vpn gateway if it doesn&#39;t exist else updates the existing gateway.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the P2SVpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param p2SVpnGatewayParameters Parameters supplied to create or Update a virtual wan p2s vpn gateway. (required)
     * @return P2SVpnGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the virtual wan p2s vpn Gateway created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request successful. Returns the details of the virtual wan p2s vpn gateway retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public P2SVpnGateway p2sVpnGatewaysCreateOrUpdate(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion, P2SVpnGateway p2SVpnGatewayParameters) throws ApiException {
        ApiResponse<P2SVpnGateway> localVarResp = p2sVpnGatewaysCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, gatewayName, apiVersion, p2SVpnGatewayParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a virtual wan p2s vpn gateway if it doesn&#39;t exist else updates the existing gateway.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the P2SVpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param p2SVpnGatewayParameters Parameters supplied to create or Update a virtual wan p2s vpn gateway. (required)
     * @return ApiResponse&lt;P2SVpnGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the virtual wan p2s vpn Gateway created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request successful. Returns the details of the virtual wan p2s vpn gateway retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<P2SVpnGateway> p2sVpnGatewaysCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion, P2SVpnGateway p2SVpnGatewayParameters) throws ApiException {
        okhttp3.Call localVarCall = p2sVpnGatewaysCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, gatewayName, apiVersion, p2SVpnGatewayParameters, null);
        Type localVarReturnType = new TypeToken<P2SVpnGateway>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a virtual wan p2s vpn gateway if it doesn&#39;t exist else updates the existing gateway.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the P2SVpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param p2SVpnGatewayParameters Parameters supplied to create or Update a virtual wan p2s vpn gateway. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the virtual wan p2s vpn Gateway created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request successful. Returns the details of the virtual wan p2s vpn gateway retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call p2sVpnGatewaysCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion, P2SVpnGateway p2SVpnGatewayParameters, final ApiCallback<P2SVpnGateway> _callback) throws ApiException {

        okhttp3.Call localVarCall = p2sVpnGatewaysCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, gatewayName, apiVersion, p2SVpnGatewayParameters, _callback);
        Type localVarReturnType = new TypeToken<P2SVpnGateway>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for p2sVpnGatewaysDelete
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the P2SVpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. P2SVpnGateway deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request received successfully. P2SVpnGateway deletion is in progress; follow the Location header to poll for final outcome. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No p2s vpn gateways exist by the name provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call p2sVpnGatewaysDeleteCall(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/p2svpnGateways/{gatewayName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "gatewayName" + "}", localVarApiClient.escapeString(gatewayName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call p2sVpnGatewaysDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling p2sVpnGatewaysDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling p2sVpnGatewaysDelete(Async)");
        }

        // verify the required parameter 'gatewayName' is set
        if (gatewayName == null) {
            throw new ApiException("Missing the required parameter 'gatewayName' when calling p2sVpnGatewaysDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling p2sVpnGatewaysDelete(Async)");
        }

        return p2sVpnGatewaysDeleteCall(subscriptionId, resourceGroupName, gatewayName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a virtual wan p2s vpn gateway.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the P2SVpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. P2SVpnGateway deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request received successfully. P2SVpnGateway deletion is in progress; follow the Location header to poll for final outcome. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No p2s vpn gateways exist by the name provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void p2sVpnGatewaysDelete(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion) throws ApiException {
        p2sVpnGatewaysDeleteWithHttpInfo(subscriptionId, resourceGroupName, gatewayName, apiVersion);
    }

    /**
     * 
     * Deletes a virtual wan p2s vpn gateway.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the P2SVpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. P2SVpnGateway deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request received successfully. P2SVpnGateway deletion is in progress; follow the Location header to poll for final outcome. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No p2s vpn gateways exist by the name provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> p2sVpnGatewaysDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = p2sVpnGatewaysDeleteValidateBeforeCall(subscriptionId, resourceGroupName, gatewayName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a virtual wan p2s vpn gateway.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the P2SVpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. P2SVpnGateway deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request received successfully. P2SVpnGateway deletion is in progress; follow the Location header to poll for final outcome. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No p2s vpn gateways exist by the name provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call p2sVpnGatewaysDeleteAsync(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = p2sVpnGatewaysDeleteValidateBeforeCall(subscriptionId, resourceGroupName, gatewayName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for p2sVpnGatewaysGet
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the P2SVpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the virtual wan p2s vpn gateway retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call p2sVpnGatewaysGetCall(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/p2svpnGateways/{gatewayName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "gatewayName" + "}", localVarApiClient.escapeString(gatewayName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call p2sVpnGatewaysGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling p2sVpnGatewaysGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling p2sVpnGatewaysGet(Async)");
        }

        // verify the required parameter 'gatewayName' is set
        if (gatewayName == null) {
            throw new ApiException("Missing the required parameter 'gatewayName' when calling p2sVpnGatewaysGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling p2sVpnGatewaysGet(Async)");
        }

        return p2sVpnGatewaysGetCall(subscriptionId, resourceGroupName, gatewayName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves the details of a virtual wan p2s vpn gateway.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the P2SVpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param apiVersion Client API version. (required)
     * @return P2SVpnGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the virtual wan p2s vpn gateway retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public P2SVpnGateway p2sVpnGatewaysGet(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion) throws ApiException {
        ApiResponse<P2SVpnGateway> localVarResp = p2sVpnGatewaysGetWithHttpInfo(subscriptionId, resourceGroupName, gatewayName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the details of a virtual wan p2s vpn gateway.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the P2SVpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;P2SVpnGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the virtual wan p2s vpn gateway retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<P2SVpnGateway> p2sVpnGatewaysGetWithHttpInfo(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = p2sVpnGatewaysGetValidateBeforeCall(subscriptionId, resourceGroupName, gatewayName, apiVersion, null);
        Type localVarReturnType = new TypeToken<P2SVpnGateway>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the details of a virtual wan p2s vpn gateway.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the P2SVpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the virtual wan p2s vpn gateway retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call p2sVpnGatewaysGetAsync(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion, final ApiCallback<P2SVpnGateway> _callback) throws ApiException {

        okhttp3.Call localVarCall = p2sVpnGatewaysGetValidateBeforeCall(subscriptionId, resourceGroupName, gatewayName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<P2SVpnGateway>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for p2sVpnGatewaysList
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the P2SVpnGateways in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call p2sVpnGatewaysListCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Network/p2svpnGateways"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call p2sVpnGatewaysListValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling p2sVpnGatewaysList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling p2sVpnGatewaysList(Async)");
        }

        return p2sVpnGatewaysListCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Lists all the P2SVpnGateways in a subscription.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @return ListP2SVpnGatewaysResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the P2SVpnGateways in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListP2SVpnGatewaysResult p2sVpnGatewaysList(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ListP2SVpnGatewaysResult> localVarResp = p2sVpnGatewaysListWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the P2SVpnGateways in a subscription.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;ListP2SVpnGatewaysResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the P2SVpnGateways in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListP2SVpnGatewaysResult> p2sVpnGatewaysListWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = p2sVpnGatewaysListValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ListP2SVpnGatewaysResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the P2SVpnGateways in a subscription.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the P2SVpnGateways in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call p2sVpnGatewaysListAsync(String subscriptionId, String apiVersion, final ApiCallback<ListP2SVpnGatewaysResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = p2sVpnGatewaysListValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ListP2SVpnGatewaysResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for p2sVpnGatewaysListByResourceGroup
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the P2SVpnGateway. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the P2SVpnGateways in the resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call p2sVpnGatewaysListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/p2svpnGateways"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call p2sVpnGatewaysListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling p2sVpnGatewaysListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling p2sVpnGatewaysListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling p2sVpnGatewaysListByResourceGroup(Async)");
        }

        return p2sVpnGatewaysListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * 
     * Lists all the P2SVpnGateways in a resource group.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the P2SVpnGateway. (required)
     * @param apiVersion Client API version. (required)
     * @return ListP2SVpnGatewaysResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the P2SVpnGateways in the resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListP2SVpnGatewaysResult p2sVpnGatewaysListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<ListP2SVpnGatewaysResult> localVarResp = p2sVpnGatewaysListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the P2SVpnGateways in a resource group.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the P2SVpnGateway. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;ListP2SVpnGatewaysResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the P2SVpnGateways in the resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListP2SVpnGatewaysResult> p2sVpnGatewaysListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = p2sVpnGatewaysListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ListP2SVpnGatewaysResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the P2SVpnGateways in a resource group.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the P2SVpnGateway. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the P2SVpnGateways in the resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call p2sVpnGatewaysListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<ListP2SVpnGatewaysResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = p2sVpnGatewaysListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ListP2SVpnGatewaysResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for p2sVpnServerConfigurationsCreateOrUpdate
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualWan. (required)
     * @param virtualWanName The name of the VirtualWan. (required)
     * @param p2SVpnServerConfigurationName The name of the P2SVpnServerConfiguration. (required)
     * @param apiVersion Client API version. (required)
     * @param p2SVpnServerConfigurationParameters Parameters supplied to create or Update a P2SVpnServerConfiguration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the P2SVpnServerConfiguration created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request successful. Returns the details of the P2SVpnServerConfiguration created or updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call p2sVpnServerConfigurationsCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String virtualWanName, String p2SVpnServerConfigurationName, String apiVersion, P2SVpnServerConfiguration p2SVpnServerConfigurationParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = p2SVpnServerConfigurationParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWanName}/p2sVpnServerConfigurations/{p2SVpnServerConfigurationName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualWanName" + "}", localVarApiClient.escapeString(virtualWanName.toString()))
            .replace("{" + "p2SVpnServerConfigurationName" + "}", localVarApiClient.escapeString(p2SVpnServerConfigurationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call p2sVpnServerConfigurationsCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String virtualWanName, String p2SVpnServerConfigurationName, String apiVersion, P2SVpnServerConfiguration p2SVpnServerConfigurationParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling p2sVpnServerConfigurationsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling p2sVpnServerConfigurationsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'virtualWanName' is set
        if (virtualWanName == null) {
            throw new ApiException("Missing the required parameter 'virtualWanName' when calling p2sVpnServerConfigurationsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'p2SVpnServerConfigurationName' is set
        if (p2SVpnServerConfigurationName == null) {
            throw new ApiException("Missing the required parameter 'p2SVpnServerConfigurationName' when calling p2sVpnServerConfigurationsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling p2sVpnServerConfigurationsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'p2SVpnServerConfigurationParameters' is set
        if (p2SVpnServerConfigurationParameters == null) {
            throw new ApiException("Missing the required parameter 'p2SVpnServerConfigurationParameters' when calling p2sVpnServerConfigurationsCreateOrUpdate(Async)");
        }

        return p2sVpnServerConfigurationsCreateOrUpdateCall(subscriptionId, resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, apiVersion, p2SVpnServerConfigurationParameters, _callback);

    }

    /**
     * 
     * Creates a P2SVpnServerConfiguration to associate with a VirtualWan if it doesn&#39;t exist else updates the existing P2SVpnServerConfiguration.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualWan. (required)
     * @param virtualWanName The name of the VirtualWan. (required)
     * @param p2SVpnServerConfigurationName The name of the P2SVpnServerConfiguration. (required)
     * @param apiVersion Client API version. (required)
     * @param p2SVpnServerConfigurationParameters Parameters supplied to create or Update a P2SVpnServerConfiguration. (required)
     * @return P2SVpnServerConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the P2SVpnServerConfiguration created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request successful. Returns the details of the P2SVpnServerConfiguration created or updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public P2SVpnServerConfiguration p2sVpnServerConfigurationsCreateOrUpdate(String subscriptionId, String resourceGroupName, String virtualWanName, String p2SVpnServerConfigurationName, String apiVersion, P2SVpnServerConfiguration p2SVpnServerConfigurationParameters) throws ApiException {
        ApiResponse<P2SVpnServerConfiguration> localVarResp = p2sVpnServerConfigurationsCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, apiVersion, p2SVpnServerConfigurationParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a P2SVpnServerConfiguration to associate with a VirtualWan if it doesn&#39;t exist else updates the existing P2SVpnServerConfiguration.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualWan. (required)
     * @param virtualWanName The name of the VirtualWan. (required)
     * @param p2SVpnServerConfigurationName The name of the P2SVpnServerConfiguration. (required)
     * @param apiVersion Client API version. (required)
     * @param p2SVpnServerConfigurationParameters Parameters supplied to create or Update a P2SVpnServerConfiguration. (required)
     * @return ApiResponse&lt;P2SVpnServerConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the P2SVpnServerConfiguration created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request successful. Returns the details of the P2SVpnServerConfiguration created or updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<P2SVpnServerConfiguration> p2sVpnServerConfigurationsCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String virtualWanName, String p2SVpnServerConfigurationName, String apiVersion, P2SVpnServerConfiguration p2SVpnServerConfigurationParameters) throws ApiException {
        okhttp3.Call localVarCall = p2sVpnServerConfigurationsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, apiVersion, p2SVpnServerConfigurationParameters, null);
        Type localVarReturnType = new TypeToken<P2SVpnServerConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a P2SVpnServerConfiguration to associate with a VirtualWan if it doesn&#39;t exist else updates the existing P2SVpnServerConfiguration.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualWan. (required)
     * @param virtualWanName The name of the VirtualWan. (required)
     * @param p2SVpnServerConfigurationName The name of the P2SVpnServerConfiguration. (required)
     * @param apiVersion Client API version. (required)
     * @param p2SVpnServerConfigurationParameters Parameters supplied to create or Update a P2SVpnServerConfiguration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the P2SVpnServerConfiguration created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request successful. Returns the details of the P2SVpnServerConfiguration created or updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call p2sVpnServerConfigurationsCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String virtualWanName, String p2SVpnServerConfigurationName, String apiVersion, P2SVpnServerConfiguration p2SVpnServerConfigurationParameters, final ApiCallback<P2SVpnServerConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = p2sVpnServerConfigurationsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, apiVersion, p2SVpnServerConfigurationParameters, _callback);
        Type localVarReturnType = new TypeToken<P2SVpnServerConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for p2sVpnServerConfigurationsDelete
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the P2SVpnServerConfiguration. (required)
     * @param virtualWanName The name of the VirtualWan. (required)
     * @param p2SVpnServerConfigurationName The name of the P2SVpnServerConfiguration. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. P2SVpnServerConfiguration deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request received successfully. P2SVpnServerConfiguration deletion is in progress; follow the Location header to poll for final outcome. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No P2SVpnServerConfigurations exist by the name provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call p2sVpnServerConfigurationsDeleteCall(String subscriptionId, String resourceGroupName, String virtualWanName, String p2SVpnServerConfigurationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWanName}/p2sVpnServerConfigurations/{p2SVpnServerConfigurationName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualWanName" + "}", localVarApiClient.escapeString(virtualWanName.toString()))
            .replace("{" + "p2SVpnServerConfigurationName" + "}", localVarApiClient.escapeString(p2SVpnServerConfigurationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call p2sVpnServerConfigurationsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String virtualWanName, String p2SVpnServerConfigurationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling p2sVpnServerConfigurationsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling p2sVpnServerConfigurationsDelete(Async)");
        }

        // verify the required parameter 'virtualWanName' is set
        if (virtualWanName == null) {
            throw new ApiException("Missing the required parameter 'virtualWanName' when calling p2sVpnServerConfigurationsDelete(Async)");
        }

        // verify the required parameter 'p2SVpnServerConfigurationName' is set
        if (p2SVpnServerConfigurationName == null) {
            throw new ApiException("Missing the required parameter 'p2SVpnServerConfigurationName' when calling p2sVpnServerConfigurationsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling p2sVpnServerConfigurationsDelete(Async)");
        }

        return p2sVpnServerConfigurationsDeleteCall(subscriptionId, resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a P2SVpnServerConfiguration.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the P2SVpnServerConfiguration. (required)
     * @param virtualWanName The name of the VirtualWan. (required)
     * @param p2SVpnServerConfigurationName The name of the P2SVpnServerConfiguration. (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. P2SVpnServerConfiguration deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request received successfully. P2SVpnServerConfiguration deletion is in progress; follow the Location header to poll for final outcome. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No P2SVpnServerConfigurations exist by the name provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void p2sVpnServerConfigurationsDelete(String subscriptionId, String resourceGroupName, String virtualWanName, String p2SVpnServerConfigurationName, String apiVersion) throws ApiException {
        p2sVpnServerConfigurationsDeleteWithHttpInfo(subscriptionId, resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, apiVersion);
    }

    /**
     * 
     * Deletes a P2SVpnServerConfiguration.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the P2SVpnServerConfiguration. (required)
     * @param virtualWanName The name of the VirtualWan. (required)
     * @param p2SVpnServerConfigurationName The name of the P2SVpnServerConfiguration. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. P2SVpnServerConfiguration deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request received successfully. P2SVpnServerConfiguration deletion is in progress; follow the Location header to poll for final outcome. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No P2SVpnServerConfigurations exist by the name provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> p2sVpnServerConfigurationsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String virtualWanName, String p2SVpnServerConfigurationName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = p2sVpnServerConfigurationsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a P2SVpnServerConfiguration.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the P2SVpnServerConfiguration. (required)
     * @param virtualWanName The name of the VirtualWan. (required)
     * @param p2SVpnServerConfigurationName The name of the P2SVpnServerConfiguration. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. P2SVpnServerConfiguration deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request received successfully. P2SVpnServerConfiguration deletion is in progress; follow the Location header to poll for final outcome. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No P2SVpnServerConfigurations exist by the name provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call p2sVpnServerConfigurationsDeleteAsync(String subscriptionId, String resourceGroupName, String virtualWanName, String p2SVpnServerConfigurationName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = p2sVpnServerConfigurationsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for p2sVpnServerConfigurationsGet
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the P2SVpnServerConfiguration. (required)
     * @param virtualWanName The name of the VirtualWan. (required)
     * @param p2SVpnServerConfigurationName The name of the P2SVpnServerConfiguration. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the P2SVpnServerConfiguration. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call p2sVpnServerConfigurationsGetCall(String subscriptionId, String resourceGroupName, String virtualWanName, String p2SVpnServerConfigurationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWanName}/p2sVpnServerConfigurations/{p2SVpnServerConfigurationName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualWanName" + "}", localVarApiClient.escapeString(virtualWanName.toString()))
            .replace("{" + "p2SVpnServerConfigurationName" + "}", localVarApiClient.escapeString(p2SVpnServerConfigurationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call p2sVpnServerConfigurationsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String virtualWanName, String p2SVpnServerConfigurationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling p2sVpnServerConfigurationsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling p2sVpnServerConfigurationsGet(Async)");
        }

        // verify the required parameter 'virtualWanName' is set
        if (virtualWanName == null) {
            throw new ApiException("Missing the required parameter 'virtualWanName' when calling p2sVpnServerConfigurationsGet(Async)");
        }

        // verify the required parameter 'p2SVpnServerConfigurationName' is set
        if (p2SVpnServerConfigurationName == null) {
            throw new ApiException("Missing the required parameter 'p2SVpnServerConfigurationName' when calling p2sVpnServerConfigurationsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling p2sVpnServerConfigurationsGet(Async)");
        }

        return p2sVpnServerConfigurationsGetCall(subscriptionId, resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves the details of a P2SVpnServerConfiguration.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the P2SVpnServerConfiguration. (required)
     * @param virtualWanName The name of the VirtualWan. (required)
     * @param p2SVpnServerConfigurationName The name of the P2SVpnServerConfiguration. (required)
     * @param apiVersion Client API version. (required)
     * @return P2SVpnServerConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the P2SVpnServerConfiguration. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public P2SVpnServerConfiguration p2sVpnServerConfigurationsGet(String subscriptionId, String resourceGroupName, String virtualWanName, String p2SVpnServerConfigurationName, String apiVersion) throws ApiException {
        ApiResponse<P2SVpnServerConfiguration> localVarResp = p2sVpnServerConfigurationsGetWithHttpInfo(subscriptionId, resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the details of a P2SVpnServerConfiguration.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the P2SVpnServerConfiguration. (required)
     * @param virtualWanName The name of the VirtualWan. (required)
     * @param p2SVpnServerConfigurationName The name of the P2SVpnServerConfiguration. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;P2SVpnServerConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the P2SVpnServerConfiguration. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<P2SVpnServerConfiguration> p2sVpnServerConfigurationsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String virtualWanName, String p2SVpnServerConfigurationName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = p2sVpnServerConfigurationsGetValidateBeforeCall(subscriptionId, resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, apiVersion, null);
        Type localVarReturnType = new TypeToken<P2SVpnServerConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the details of a P2SVpnServerConfiguration.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the P2SVpnServerConfiguration. (required)
     * @param virtualWanName The name of the VirtualWan. (required)
     * @param p2SVpnServerConfigurationName The name of the P2SVpnServerConfiguration. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the P2SVpnServerConfiguration. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call p2sVpnServerConfigurationsGetAsync(String subscriptionId, String resourceGroupName, String virtualWanName, String p2SVpnServerConfigurationName, String apiVersion, final ApiCallback<P2SVpnServerConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = p2sVpnServerConfigurationsGetValidateBeforeCall(subscriptionId, resourceGroupName, virtualWanName, p2SVpnServerConfigurationName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<P2SVpnServerConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for p2sVpnServerConfigurationsListByVirtualWan
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualWan. (required)
     * @param virtualWanName The name of the VirtualWan. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns all P2SVpnServerConfigurations for a VirtualWan. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call p2sVpnServerConfigurationsListByVirtualWanCall(String subscriptionId, String resourceGroupName, String virtualWanName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWanName}/p2sVpnServerConfigurations"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualWanName" + "}", localVarApiClient.escapeString(virtualWanName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call p2sVpnServerConfigurationsListByVirtualWanValidateBeforeCall(String subscriptionId, String resourceGroupName, String virtualWanName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling p2sVpnServerConfigurationsListByVirtualWan(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling p2sVpnServerConfigurationsListByVirtualWan(Async)");
        }

        // verify the required parameter 'virtualWanName' is set
        if (virtualWanName == null) {
            throw new ApiException("Missing the required parameter 'virtualWanName' when calling p2sVpnServerConfigurationsListByVirtualWan(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling p2sVpnServerConfigurationsListByVirtualWan(Async)");
        }

        return p2sVpnServerConfigurationsListByVirtualWanCall(subscriptionId, resourceGroupName, virtualWanName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves all P2SVpnServerConfigurations for a particular VirtualWan.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualWan. (required)
     * @param virtualWanName The name of the VirtualWan. (required)
     * @param apiVersion Client API version. (required)
     * @return ListP2SVpnServerConfigurationsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns all P2SVpnServerConfigurations for a VirtualWan. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListP2SVpnServerConfigurationsResult p2sVpnServerConfigurationsListByVirtualWan(String subscriptionId, String resourceGroupName, String virtualWanName, String apiVersion) throws ApiException {
        ApiResponse<ListP2SVpnServerConfigurationsResult> localVarResp = p2sVpnServerConfigurationsListByVirtualWanWithHttpInfo(subscriptionId, resourceGroupName, virtualWanName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves all P2SVpnServerConfigurations for a particular VirtualWan.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualWan. (required)
     * @param virtualWanName The name of the VirtualWan. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;ListP2SVpnServerConfigurationsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns all P2SVpnServerConfigurations for a VirtualWan. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListP2SVpnServerConfigurationsResult> p2sVpnServerConfigurationsListByVirtualWanWithHttpInfo(String subscriptionId, String resourceGroupName, String virtualWanName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = p2sVpnServerConfigurationsListByVirtualWanValidateBeforeCall(subscriptionId, resourceGroupName, virtualWanName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ListP2SVpnServerConfigurationsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves all P2SVpnServerConfigurations for a particular VirtualWan.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualWan. (required)
     * @param virtualWanName The name of the VirtualWan. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns all P2SVpnServerConfigurations for a VirtualWan. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call p2sVpnServerConfigurationsListByVirtualWanAsync(String subscriptionId, String resourceGroupName, String virtualWanName, String apiVersion, final ApiCallback<ListP2SVpnServerConfigurationsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = p2sVpnServerConfigurationsListByVirtualWanValidateBeforeCall(subscriptionId, resourceGroupName, virtualWanName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ListP2SVpnServerConfigurationsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for supportedSecurityProviders
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param virtualWANName The name of the VirtualWAN for which supported security providers are needed. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the object containing supported security providers. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supportedSecurityProvidersCall(String subscriptionId, String resourceGroupName, String virtualWANName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWANName}/supportedSecurityProviders"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualWANName" + "}", localVarApiClient.escapeString(virtualWANName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call supportedSecurityProvidersValidateBeforeCall(String subscriptionId, String resourceGroupName, String virtualWANName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling supportedSecurityProviders(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling supportedSecurityProviders(Async)");
        }

        // verify the required parameter 'virtualWANName' is set
        if (virtualWANName == null) {
            throw new ApiException("Missing the required parameter 'virtualWANName' when calling supportedSecurityProviders(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling supportedSecurityProviders(Async)");
        }

        return supportedSecurityProvidersCall(subscriptionId, resourceGroupName, virtualWANName, apiVersion, _callback);

    }

    /**
     * 
     * Gives the supported security providers for the virtual wan.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param virtualWANName The name of the VirtualWAN for which supported security providers are needed. (required)
     * @param apiVersion Client API version. (required)
     * @return VirtualWanSecurityProviders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the object containing supported security providers. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public VirtualWanSecurityProviders supportedSecurityProviders(String subscriptionId, String resourceGroupName, String virtualWANName, String apiVersion) throws ApiException {
        ApiResponse<VirtualWanSecurityProviders> localVarResp = supportedSecurityProvidersWithHttpInfo(subscriptionId, resourceGroupName, virtualWANName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gives the supported security providers for the virtual wan.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param virtualWANName The name of the VirtualWAN for which supported security providers are needed. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;VirtualWanSecurityProviders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the object containing supported security providers. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualWanSecurityProviders> supportedSecurityProvidersWithHttpInfo(String subscriptionId, String resourceGroupName, String virtualWANName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = supportedSecurityProvidersValidateBeforeCall(subscriptionId, resourceGroupName, virtualWANName, apiVersion, null);
        Type localVarReturnType = new TypeToken<VirtualWanSecurityProviders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gives the supported security providers for the virtual wan.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param virtualWANName The name of the VirtualWAN for which supported security providers are needed. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the object containing supported security providers. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supportedSecurityProvidersAsync(String subscriptionId, String resourceGroupName, String virtualWANName, String apiVersion, final ApiCallback<VirtualWanSecurityProviders> _callback) throws ApiException {

        okhttp3.Call localVarCall = supportedSecurityProvidersValidateBeforeCall(subscriptionId, resourceGroupName, virtualWANName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<VirtualWanSecurityProviders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualHubsCreateOrUpdate
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualHub. (required)
     * @param virtualHubName The name of the VirtualHub. (required)
     * @param apiVersion Client API version. (required)
     * @param virtualHubParameters Parameters supplied to create or update VirtualHub. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the VirtualHub created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request received successfully. Returns the details of the VirtualHub created or updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualHubsCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String virtualHubName, String apiVersion, VirtualHub virtualHubParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = virtualHubParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{virtualHubName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualHubName" + "}", localVarApiClient.escapeString(virtualHubName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualHubsCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String virtualHubName, String apiVersion, VirtualHub virtualHubParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualHubsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualHubsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'virtualHubName' is set
        if (virtualHubName == null) {
            throw new ApiException("Missing the required parameter 'virtualHubName' when calling virtualHubsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualHubsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'virtualHubParameters' is set
        if (virtualHubParameters == null) {
            throw new ApiException("Missing the required parameter 'virtualHubParameters' when calling virtualHubsCreateOrUpdate(Async)");
        }

        return virtualHubsCreateOrUpdateCall(subscriptionId, resourceGroupName, virtualHubName, apiVersion, virtualHubParameters, _callback);

    }

    /**
     * 
     * Creates a VirtualHub resource if it doesn&#39;t exist else updates the existing VirtualHub.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualHub. (required)
     * @param virtualHubName The name of the VirtualHub. (required)
     * @param apiVersion Client API version. (required)
     * @param virtualHubParameters Parameters supplied to create or update VirtualHub. (required)
     * @return VirtualHub
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the VirtualHub created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request received successfully. Returns the details of the VirtualHub created or updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public VirtualHub virtualHubsCreateOrUpdate(String subscriptionId, String resourceGroupName, String virtualHubName, String apiVersion, VirtualHub virtualHubParameters) throws ApiException {
        ApiResponse<VirtualHub> localVarResp = virtualHubsCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, virtualHubName, apiVersion, virtualHubParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a VirtualHub resource if it doesn&#39;t exist else updates the existing VirtualHub.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualHub. (required)
     * @param virtualHubName The name of the VirtualHub. (required)
     * @param apiVersion Client API version. (required)
     * @param virtualHubParameters Parameters supplied to create or update VirtualHub. (required)
     * @return ApiResponse&lt;VirtualHub&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the VirtualHub created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request received successfully. Returns the details of the VirtualHub created or updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualHub> virtualHubsCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String virtualHubName, String apiVersion, VirtualHub virtualHubParameters) throws ApiException {
        okhttp3.Call localVarCall = virtualHubsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, virtualHubName, apiVersion, virtualHubParameters, null);
        Type localVarReturnType = new TypeToken<VirtualHub>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a VirtualHub resource if it doesn&#39;t exist else updates the existing VirtualHub.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualHub. (required)
     * @param virtualHubName The name of the VirtualHub. (required)
     * @param apiVersion Client API version. (required)
     * @param virtualHubParameters Parameters supplied to create or update VirtualHub. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the VirtualHub created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request received successfully. Returns the details of the VirtualHub created or updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualHubsCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String virtualHubName, String apiVersion, VirtualHub virtualHubParameters, final ApiCallback<VirtualHub> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualHubsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, virtualHubName, apiVersion, virtualHubParameters, _callback);
        Type localVarReturnType = new TypeToken<VirtualHub>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualHubsDelete
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualHub. (required)
     * @param virtualHubName The name of the VirtualHub. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. VirtualHub deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request received successfully. VirtualHub deletion is in progress; follow the Location header to poll for final outcome. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No VirtualHubs exist by the name provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualHubsDeleteCall(String subscriptionId, String resourceGroupName, String virtualHubName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{virtualHubName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualHubName" + "}", localVarApiClient.escapeString(virtualHubName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualHubsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String virtualHubName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualHubsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualHubsDelete(Async)");
        }

        // verify the required parameter 'virtualHubName' is set
        if (virtualHubName == null) {
            throw new ApiException("Missing the required parameter 'virtualHubName' when calling virtualHubsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualHubsDelete(Async)");
        }

        return virtualHubsDeleteCall(subscriptionId, resourceGroupName, virtualHubName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a VirtualHub.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualHub. (required)
     * @param virtualHubName The name of the VirtualHub. (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. VirtualHub deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request received successfully. VirtualHub deletion is in progress; follow the Location header to poll for final outcome. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No VirtualHubs exist by the name provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void virtualHubsDelete(String subscriptionId, String resourceGroupName, String virtualHubName, String apiVersion) throws ApiException {
        virtualHubsDeleteWithHttpInfo(subscriptionId, resourceGroupName, virtualHubName, apiVersion);
    }

    /**
     * 
     * Deletes a VirtualHub.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualHub. (required)
     * @param virtualHubName The name of the VirtualHub. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. VirtualHub deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request received successfully. VirtualHub deletion is in progress; follow the Location header to poll for final outcome. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No VirtualHubs exist by the name provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> virtualHubsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String virtualHubName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = virtualHubsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, virtualHubName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a VirtualHub.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualHub. (required)
     * @param virtualHubName The name of the VirtualHub. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. VirtualHub deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request received successfully. VirtualHub deletion is in progress; follow the Location header to poll for final outcome. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No VirtualHubs exist by the name provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualHubsDeleteAsync(String subscriptionId, String resourceGroupName, String virtualHubName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualHubsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, virtualHubName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualHubsGet
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualHub. (required)
     * @param virtualHubName The name of the VirtualHub. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the VirtualHub retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualHubsGetCall(String subscriptionId, String resourceGroupName, String virtualHubName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{virtualHubName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualHubName" + "}", localVarApiClient.escapeString(virtualHubName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualHubsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String virtualHubName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualHubsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualHubsGet(Async)");
        }

        // verify the required parameter 'virtualHubName' is set
        if (virtualHubName == null) {
            throw new ApiException("Missing the required parameter 'virtualHubName' when calling virtualHubsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualHubsGet(Async)");
        }

        return virtualHubsGetCall(subscriptionId, resourceGroupName, virtualHubName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves the details of a VirtualHub.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualHub. (required)
     * @param virtualHubName The name of the VirtualHub. (required)
     * @param apiVersion Client API version. (required)
     * @return VirtualHub
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the VirtualHub retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public VirtualHub virtualHubsGet(String subscriptionId, String resourceGroupName, String virtualHubName, String apiVersion) throws ApiException {
        ApiResponse<VirtualHub> localVarResp = virtualHubsGetWithHttpInfo(subscriptionId, resourceGroupName, virtualHubName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the details of a VirtualHub.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualHub. (required)
     * @param virtualHubName The name of the VirtualHub. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;VirtualHub&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the VirtualHub retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualHub> virtualHubsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String virtualHubName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = virtualHubsGetValidateBeforeCall(subscriptionId, resourceGroupName, virtualHubName, apiVersion, null);
        Type localVarReturnType = new TypeToken<VirtualHub>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the details of a VirtualHub.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualHub. (required)
     * @param virtualHubName The name of the VirtualHub. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the VirtualHub retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualHubsGetAsync(String subscriptionId, String resourceGroupName, String virtualHubName, String apiVersion, final ApiCallback<VirtualHub> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualHubsGetValidateBeforeCall(subscriptionId, resourceGroupName, virtualHubName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<VirtualHub>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualHubsList
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the VirtualHubs in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualHubsListCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Network/virtualHubs"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualHubsListValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualHubsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualHubsList(Async)");
        }

        return virtualHubsListCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Lists all the VirtualHubs in a subscription.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @return ListVirtualHubsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the VirtualHubs in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListVirtualHubsResult virtualHubsList(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ListVirtualHubsResult> localVarResp = virtualHubsListWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the VirtualHubs in a subscription.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;ListVirtualHubsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the VirtualHubs in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListVirtualHubsResult> virtualHubsListWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = virtualHubsListValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ListVirtualHubsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the VirtualHubs in a subscription.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the VirtualHubs in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualHubsListAsync(String subscriptionId, String apiVersion, final ApiCallback<ListVirtualHubsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualHubsListValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ListVirtualHubsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualHubsListByResourceGroup
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualHub. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the VirtualHubs in the resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualHubsListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualHubsListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualHubsListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualHubsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualHubsListByResourceGroup(Async)");
        }

        return virtualHubsListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * 
     * Lists all the VirtualHubs in a resource group.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualHub. (required)
     * @param apiVersion Client API version. (required)
     * @return ListVirtualHubsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the VirtualHubs in the resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListVirtualHubsResult virtualHubsListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<ListVirtualHubsResult> localVarResp = virtualHubsListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the VirtualHubs in a resource group.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualHub. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;ListVirtualHubsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the VirtualHubs in the resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListVirtualHubsResult> virtualHubsListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = virtualHubsListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ListVirtualHubsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the VirtualHubs in a resource group.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualHub. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the VirtualHubs in the resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualHubsListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<ListVirtualHubsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualHubsListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ListVirtualHubsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualWansCreateOrUpdate
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualWan. (required)
     * @param virtualWANName The name of the VirtualWAN being created or updated. (required)
     * @param apiVersion Client API version. (required)
     * @param waNParameters Parameters supplied to create or update VirtualWAN. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the VirtualWAN created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting VirtualWAN resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualWansCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String virtualWANName, String apiVersion, VirtualWAN waNParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = waNParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{VirtualWANName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "VirtualWANName" + "}", localVarApiClient.escapeString(virtualWANName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualWansCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String virtualWANName, String apiVersion, VirtualWAN waNParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualWansCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualWansCreateOrUpdate(Async)");
        }

        // verify the required parameter 'virtualWANName' is set
        if (virtualWANName == null) {
            throw new ApiException("Missing the required parameter 'virtualWANName' when calling virtualWansCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualWansCreateOrUpdate(Async)");
        }

        // verify the required parameter 'waNParameters' is set
        if (waNParameters == null) {
            throw new ApiException("Missing the required parameter 'waNParameters' when calling virtualWansCreateOrUpdate(Async)");
        }

        return virtualWansCreateOrUpdateCall(subscriptionId, resourceGroupName, virtualWANName, apiVersion, waNParameters, _callback);

    }

    /**
     * 
     * Creates a VirtualWAN resource if it doesn&#39;t exist else updates the existing VirtualWAN.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualWan. (required)
     * @param virtualWANName The name of the VirtualWAN being created or updated. (required)
     * @param apiVersion Client API version. (required)
     * @param waNParameters Parameters supplied to create or update VirtualWAN. (required)
     * @return VirtualWAN
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the VirtualWAN created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting VirtualWAN resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public VirtualWAN virtualWansCreateOrUpdate(String subscriptionId, String resourceGroupName, String virtualWANName, String apiVersion, VirtualWAN waNParameters) throws ApiException {
        ApiResponse<VirtualWAN> localVarResp = virtualWansCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, virtualWANName, apiVersion, waNParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a VirtualWAN resource if it doesn&#39;t exist else updates the existing VirtualWAN.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualWan. (required)
     * @param virtualWANName The name of the VirtualWAN being created or updated. (required)
     * @param apiVersion Client API version. (required)
     * @param waNParameters Parameters supplied to create or update VirtualWAN. (required)
     * @return ApiResponse&lt;VirtualWAN&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the VirtualWAN created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting VirtualWAN resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualWAN> virtualWansCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String virtualWANName, String apiVersion, VirtualWAN waNParameters) throws ApiException {
        okhttp3.Call localVarCall = virtualWansCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, virtualWANName, apiVersion, waNParameters, null);
        Type localVarReturnType = new TypeToken<VirtualWAN>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a VirtualWAN resource if it doesn&#39;t exist else updates the existing VirtualWAN.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualWan. (required)
     * @param virtualWANName The name of the VirtualWAN being created or updated. (required)
     * @param apiVersion Client API version. (required)
     * @param waNParameters Parameters supplied to create or update VirtualWAN. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the VirtualWAN created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting VirtualWAN resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualWansCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String virtualWANName, String apiVersion, VirtualWAN waNParameters, final ApiCallback<VirtualWAN> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualWansCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, virtualWANName, apiVersion, waNParameters, _callback);
        Type localVarReturnType = new TypeToken<VirtualWAN>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualWansDelete
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualWan. (required)
     * @param virtualWANName The name of the VirtualWAN being deleted. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. VirtualWAN deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request received successfully. VirtualWAN deletion is in progress; follow the Location header to poll for final outcome. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No VirtualWANs exist by the name provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualWansDeleteCall(String subscriptionId, String resourceGroupName, String virtualWANName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{VirtualWANName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "VirtualWANName" + "}", localVarApiClient.escapeString(virtualWANName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualWansDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String virtualWANName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualWansDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualWansDelete(Async)");
        }

        // verify the required parameter 'virtualWANName' is set
        if (virtualWANName == null) {
            throw new ApiException("Missing the required parameter 'virtualWANName' when calling virtualWansDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualWansDelete(Async)");
        }

        return virtualWansDeleteCall(subscriptionId, resourceGroupName, virtualWANName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a VirtualWAN.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualWan. (required)
     * @param virtualWANName The name of the VirtualWAN being deleted. (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. VirtualWAN deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request received successfully. VirtualWAN deletion is in progress; follow the Location header to poll for final outcome. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No VirtualWANs exist by the name provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void virtualWansDelete(String subscriptionId, String resourceGroupName, String virtualWANName, String apiVersion) throws ApiException {
        virtualWansDeleteWithHttpInfo(subscriptionId, resourceGroupName, virtualWANName, apiVersion);
    }

    /**
     * 
     * Deletes a VirtualWAN.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualWan. (required)
     * @param virtualWANName The name of the VirtualWAN being deleted. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. VirtualWAN deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request received successfully. VirtualWAN deletion is in progress; follow the Location header to poll for final outcome. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No VirtualWANs exist by the name provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> virtualWansDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String virtualWANName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = virtualWansDeleteValidateBeforeCall(subscriptionId, resourceGroupName, virtualWANName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a VirtualWAN.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualWan. (required)
     * @param virtualWANName The name of the VirtualWAN being deleted. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. VirtualWAN deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request received successfully. VirtualWAN deletion is in progress; follow the Location header to poll for final outcome. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No VirtualWANs exist by the name provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualWansDeleteAsync(String subscriptionId, String resourceGroupName, String virtualWANName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualWansDeleteValidateBeforeCall(subscriptionId, resourceGroupName, virtualWANName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualWansGet
     * @param resourceGroupName The resource group name of the VirtualWan. (required)
     * @param virtualWANName The name of the VirtualWAN being retrieved. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the VirtualWAN retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualWansGetCall(String resourceGroupName, String virtualWANName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{VirtualWANName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "VirtualWANName" + "}", localVarApiClient.escapeString(virtualWANName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualWansGetValidateBeforeCall(String resourceGroupName, String virtualWANName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualWansGet(Async)");
        }

        // verify the required parameter 'virtualWANName' is set
        if (virtualWANName == null) {
            throw new ApiException("Missing the required parameter 'virtualWANName' when calling virtualWansGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualWansGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualWansGet(Async)");
        }

        return virtualWansGetCall(resourceGroupName, virtualWANName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Retrieves the details of a VirtualWAN.
     * @param resourceGroupName The resource group name of the VirtualWan. (required)
     * @param virtualWANName The name of the VirtualWAN being retrieved. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return VirtualWAN
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the VirtualWAN retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public VirtualWAN virtualWansGet(String resourceGroupName, String virtualWANName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<VirtualWAN> localVarResp = virtualWansGetWithHttpInfo(resourceGroupName, virtualWANName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the details of a VirtualWAN.
     * @param resourceGroupName The resource group name of the VirtualWan. (required)
     * @param virtualWANName The name of the VirtualWAN being retrieved. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;VirtualWAN&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the VirtualWAN retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualWAN> virtualWansGetWithHttpInfo(String resourceGroupName, String virtualWANName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = virtualWansGetValidateBeforeCall(resourceGroupName, virtualWANName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<VirtualWAN>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the details of a VirtualWAN.
     * @param resourceGroupName The resource group name of the VirtualWan. (required)
     * @param virtualWANName The name of the VirtualWAN being retrieved. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the VirtualWAN retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualWansGetAsync(String resourceGroupName, String virtualWANName, String apiVersion, String subscriptionId, final ApiCallback<VirtualWAN> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualWansGetValidateBeforeCall(resourceGroupName, virtualWANName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<VirtualWAN>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualWansList
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the VirtualWANs in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualWansListCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Network/virtualWans"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualWansListValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualWansList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualWansList(Async)");
        }

        return virtualWansListCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Lists all the VirtualWANs in a subscription.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @return ListVirtualWANsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the VirtualWANs in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListVirtualWANsResult virtualWansList(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ListVirtualWANsResult> localVarResp = virtualWansListWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the VirtualWANs in a subscription.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;ListVirtualWANsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the VirtualWANs in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListVirtualWANsResult> virtualWansListWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = virtualWansListValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ListVirtualWANsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the VirtualWANs in a subscription.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the VirtualWANs in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualWansListAsync(String subscriptionId, String apiVersion, final ApiCallback<ListVirtualWANsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualWansListValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ListVirtualWANsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualWansListByResourceGroup
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualWan. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the VirtualWANs in the resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualWansListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualWansListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualWansListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualWansListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualWansListByResourceGroup(Async)");
        }

        return virtualWansListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * 
     * Lists all the VirtualWANs in a resource group.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualWan. (required)
     * @param apiVersion Client API version. (required)
     * @return ListVirtualWANsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the VirtualWANs in the resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListVirtualWANsResult virtualWansListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<ListVirtualWANsResult> localVarResp = virtualWansListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the VirtualWANs in a resource group.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualWan. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;ListVirtualWANsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the VirtualWANs in the resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListVirtualWANsResult> virtualWansListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = virtualWansListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ListVirtualWANsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the VirtualWANs in a resource group.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VirtualWan. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the VirtualWANs in the resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualWansListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<ListVirtualWANsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualWansListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ListVirtualWANsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vpnConnectionsCreateOrUpdate
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param connectionName The name of the connection. (required)
     * @param apiVersion Client API version. (required)
     * @param vpnConnectionParameters Parameters supplied to create or Update a VPN Connection. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the vpn connection created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request successful. Returns the details of the vpn connection created or updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnConnectionsCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String gatewayName, String connectionName, String apiVersion, VpnConnection vpnConnectionParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vpnConnectionParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/vpnConnections/{connectionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "gatewayName" + "}", localVarApiClient.escapeString(gatewayName.toString()))
            .replace("{" + "connectionName" + "}", localVarApiClient.escapeString(connectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vpnConnectionsCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String gatewayName, String connectionName, String apiVersion, VpnConnection vpnConnectionParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vpnConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling vpnConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'gatewayName' is set
        if (gatewayName == null) {
            throw new ApiException("Missing the required parameter 'gatewayName' when calling vpnConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'connectionName' is set
        if (connectionName == null) {
            throw new ApiException("Missing the required parameter 'connectionName' when calling vpnConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vpnConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'vpnConnectionParameters' is set
        if (vpnConnectionParameters == null) {
            throw new ApiException("Missing the required parameter 'vpnConnectionParameters' when calling vpnConnectionsCreateOrUpdate(Async)");
        }

        return vpnConnectionsCreateOrUpdateCall(subscriptionId, resourceGroupName, gatewayName, connectionName, apiVersion, vpnConnectionParameters, _callback);

    }

    /**
     * 
     * Creates a vpn connection to a scalable vpn gateway if it doesn&#39;t exist else updates the existing connection.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param connectionName The name of the connection. (required)
     * @param apiVersion Client API version. (required)
     * @param vpnConnectionParameters Parameters supplied to create or Update a VPN Connection. (required)
     * @return VpnConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the vpn connection created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request successful. Returns the details of the vpn connection created or updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public VpnConnection vpnConnectionsCreateOrUpdate(String subscriptionId, String resourceGroupName, String gatewayName, String connectionName, String apiVersion, VpnConnection vpnConnectionParameters) throws ApiException {
        ApiResponse<VpnConnection> localVarResp = vpnConnectionsCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, gatewayName, connectionName, apiVersion, vpnConnectionParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a vpn connection to a scalable vpn gateway if it doesn&#39;t exist else updates the existing connection.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param connectionName The name of the connection. (required)
     * @param apiVersion Client API version. (required)
     * @param vpnConnectionParameters Parameters supplied to create or Update a VPN Connection. (required)
     * @return ApiResponse&lt;VpnConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the vpn connection created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request successful. Returns the details of the vpn connection created or updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VpnConnection> vpnConnectionsCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String gatewayName, String connectionName, String apiVersion, VpnConnection vpnConnectionParameters) throws ApiException {
        okhttp3.Call localVarCall = vpnConnectionsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, gatewayName, connectionName, apiVersion, vpnConnectionParameters, null);
        Type localVarReturnType = new TypeToken<VpnConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a vpn connection to a scalable vpn gateway if it doesn&#39;t exist else updates the existing connection.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param connectionName The name of the connection. (required)
     * @param apiVersion Client API version. (required)
     * @param vpnConnectionParameters Parameters supplied to create or Update a VPN Connection. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the vpn connection created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request successful. Returns the details of the vpn connection created or updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnConnectionsCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String gatewayName, String connectionName, String apiVersion, VpnConnection vpnConnectionParameters, final ApiCallback<VpnConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = vpnConnectionsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, gatewayName, connectionName, apiVersion, vpnConnectionParameters, _callback);
        Type localVarReturnType = new TypeToken<VpnConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vpnConnectionsDelete
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param connectionName The name of the connection. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Vpn Connection deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request received successfully. Vpn Connection deletion is in progress; follow the Location header to poll for final outcome. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No vpn connections exist by the name provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnConnectionsDeleteCall(String subscriptionId, String resourceGroupName, String gatewayName, String connectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/vpnConnections/{connectionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "gatewayName" + "}", localVarApiClient.escapeString(gatewayName.toString()))
            .replace("{" + "connectionName" + "}", localVarApiClient.escapeString(connectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vpnConnectionsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String gatewayName, String connectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vpnConnectionsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling vpnConnectionsDelete(Async)");
        }

        // verify the required parameter 'gatewayName' is set
        if (gatewayName == null) {
            throw new ApiException("Missing the required parameter 'gatewayName' when calling vpnConnectionsDelete(Async)");
        }

        // verify the required parameter 'connectionName' is set
        if (connectionName == null) {
            throw new ApiException("Missing the required parameter 'connectionName' when calling vpnConnectionsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vpnConnectionsDelete(Async)");
        }

        return vpnConnectionsDeleteCall(subscriptionId, resourceGroupName, gatewayName, connectionName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a vpn connection.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param connectionName The name of the connection. (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Vpn Connection deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request received successfully. Vpn Connection deletion is in progress; follow the Location header to poll for final outcome. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No vpn connections exist by the name provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void vpnConnectionsDelete(String subscriptionId, String resourceGroupName, String gatewayName, String connectionName, String apiVersion) throws ApiException {
        vpnConnectionsDeleteWithHttpInfo(subscriptionId, resourceGroupName, gatewayName, connectionName, apiVersion);
    }

    /**
     * 
     * Deletes a vpn connection.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param connectionName The name of the connection. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Vpn Connection deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request received successfully. Vpn Connection deletion is in progress; follow the Location header to poll for final outcome. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No vpn connections exist by the name provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vpnConnectionsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String gatewayName, String connectionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = vpnConnectionsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, gatewayName, connectionName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a vpn connection.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param connectionName The name of the connection. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Vpn Connection deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request received successfully. Vpn Connection deletion is in progress; follow the Location header to poll for final outcome. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No vpn connections exist by the name provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnConnectionsDeleteAsync(String subscriptionId, String resourceGroupName, String gatewayName, String connectionName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vpnConnectionsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, gatewayName, connectionName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vpnConnectionsGet
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param connectionName The name of the vpn connection. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the vpn connection. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnConnectionsGetCall(String subscriptionId, String resourceGroupName, String gatewayName, String connectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/vpnConnections/{connectionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "gatewayName" + "}", localVarApiClient.escapeString(gatewayName.toString()))
            .replace("{" + "connectionName" + "}", localVarApiClient.escapeString(connectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vpnConnectionsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String gatewayName, String connectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vpnConnectionsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling vpnConnectionsGet(Async)");
        }

        // verify the required parameter 'gatewayName' is set
        if (gatewayName == null) {
            throw new ApiException("Missing the required parameter 'gatewayName' when calling vpnConnectionsGet(Async)");
        }

        // verify the required parameter 'connectionName' is set
        if (connectionName == null) {
            throw new ApiException("Missing the required parameter 'connectionName' when calling vpnConnectionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vpnConnectionsGet(Async)");
        }

        return vpnConnectionsGetCall(subscriptionId, resourceGroupName, gatewayName, connectionName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves the details of a vpn connection.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param connectionName The name of the vpn connection. (required)
     * @param apiVersion Client API version. (required)
     * @return VpnConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the vpn connection. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public VpnConnection vpnConnectionsGet(String subscriptionId, String resourceGroupName, String gatewayName, String connectionName, String apiVersion) throws ApiException {
        ApiResponse<VpnConnection> localVarResp = vpnConnectionsGetWithHttpInfo(subscriptionId, resourceGroupName, gatewayName, connectionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the details of a vpn connection.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param connectionName The name of the vpn connection. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;VpnConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the vpn connection. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VpnConnection> vpnConnectionsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String gatewayName, String connectionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = vpnConnectionsGetValidateBeforeCall(subscriptionId, resourceGroupName, gatewayName, connectionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<VpnConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the details of a vpn connection.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param connectionName The name of the vpn connection. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the vpn connection. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnConnectionsGetAsync(String subscriptionId, String resourceGroupName, String gatewayName, String connectionName, String apiVersion, final ApiCallback<VpnConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = vpnConnectionsGetValidateBeforeCall(subscriptionId, resourceGroupName, gatewayName, connectionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<VpnConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vpnConnectionsListByVpnGateway
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns all Vpn connections for a virtual wan vpn gateway. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnConnectionsListByVpnGatewayCall(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/vpnConnections"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "gatewayName" + "}", localVarApiClient.escapeString(gatewayName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vpnConnectionsListByVpnGatewayValidateBeforeCall(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vpnConnectionsListByVpnGateway(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling vpnConnectionsListByVpnGateway(Async)");
        }

        // verify the required parameter 'gatewayName' is set
        if (gatewayName == null) {
            throw new ApiException("Missing the required parameter 'gatewayName' when calling vpnConnectionsListByVpnGateway(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vpnConnectionsListByVpnGateway(Async)");
        }

        return vpnConnectionsListByVpnGatewayCall(subscriptionId, resourceGroupName, gatewayName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves all vpn connections for a particular virtual wan vpn gateway.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param apiVersion Client API version. (required)
     * @return ListVpnConnectionsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns all Vpn connections for a virtual wan vpn gateway. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListVpnConnectionsResult vpnConnectionsListByVpnGateway(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion) throws ApiException {
        ApiResponse<ListVpnConnectionsResult> localVarResp = vpnConnectionsListByVpnGatewayWithHttpInfo(subscriptionId, resourceGroupName, gatewayName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves all vpn connections for a particular virtual wan vpn gateway.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;ListVpnConnectionsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns all Vpn connections for a virtual wan vpn gateway. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListVpnConnectionsResult> vpnConnectionsListByVpnGatewayWithHttpInfo(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = vpnConnectionsListByVpnGatewayValidateBeforeCall(subscriptionId, resourceGroupName, gatewayName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ListVpnConnectionsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves all vpn connections for a particular virtual wan vpn gateway.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns all Vpn connections for a virtual wan vpn gateway. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnConnectionsListByVpnGatewayAsync(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion, final ApiCallback<ListVpnConnectionsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = vpnConnectionsListByVpnGatewayValidateBeforeCall(subscriptionId, resourceGroupName, gatewayName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ListVpnConnectionsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vpnGatewaysCreateOrUpdate
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param vpnGatewayParameters Parameters supplied to create or Update a virtual wan vpn gateway. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the virtual wan vpn Gateway created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request successful. Returns the details of the virtual wan vpn gateway retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnGatewaysCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion, VpnGateway vpnGatewayParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vpnGatewayParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "gatewayName" + "}", localVarApiClient.escapeString(gatewayName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vpnGatewaysCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion, VpnGateway vpnGatewayParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vpnGatewaysCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling vpnGatewaysCreateOrUpdate(Async)");
        }

        // verify the required parameter 'gatewayName' is set
        if (gatewayName == null) {
            throw new ApiException("Missing the required parameter 'gatewayName' when calling vpnGatewaysCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vpnGatewaysCreateOrUpdate(Async)");
        }

        // verify the required parameter 'vpnGatewayParameters' is set
        if (vpnGatewayParameters == null) {
            throw new ApiException("Missing the required parameter 'vpnGatewayParameters' when calling vpnGatewaysCreateOrUpdate(Async)");
        }

        return vpnGatewaysCreateOrUpdateCall(subscriptionId, resourceGroupName, gatewayName, apiVersion, vpnGatewayParameters, _callback);

    }

    /**
     * 
     * Creates a virtual wan vpn gateway if it doesn&#39;t exist else updates the existing gateway.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param vpnGatewayParameters Parameters supplied to create or Update a virtual wan vpn gateway. (required)
     * @return VpnGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the virtual wan vpn Gateway created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request successful. Returns the details of the virtual wan vpn gateway retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public VpnGateway vpnGatewaysCreateOrUpdate(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion, VpnGateway vpnGatewayParameters) throws ApiException {
        ApiResponse<VpnGateway> localVarResp = vpnGatewaysCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, gatewayName, apiVersion, vpnGatewayParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a virtual wan vpn gateway if it doesn&#39;t exist else updates the existing gateway.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param vpnGatewayParameters Parameters supplied to create or Update a virtual wan vpn gateway. (required)
     * @return ApiResponse&lt;VpnGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the virtual wan vpn Gateway created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request successful. Returns the details of the virtual wan vpn gateway retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VpnGateway> vpnGatewaysCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion, VpnGateway vpnGatewayParameters) throws ApiException {
        okhttp3.Call localVarCall = vpnGatewaysCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, gatewayName, apiVersion, vpnGatewayParameters, null);
        Type localVarReturnType = new TypeToken<VpnGateway>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a virtual wan vpn gateway if it doesn&#39;t exist else updates the existing gateway.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param vpnGatewayParameters Parameters supplied to create or Update a virtual wan vpn gateway. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the virtual wan vpn Gateway created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request successful. Returns the details of the virtual wan vpn gateway retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnGatewaysCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion, VpnGateway vpnGatewayParameters, final ApiCallback<VpnGateway> _callback) throws ApiException {

        okhttp3.Call localVarCall = vpnGatewaysCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, gatewayName, apiVersion, vpnGatewayParameters, _callback);
        Type localVarReturnType = new TypeToken<VpnGateway>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vpnGatewaysDelete
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Vpn Gateway deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request received successfully. Vpn Gateway deletion is in progress; follow the Location header to poll for final outcome. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No vpn gateways exist by the name provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnGatewaysDeleteCall(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "gatewayName" + "}", localVarApiClient.escapeString(gatewayName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vpnGatewaysDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vpnGatewaysDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling vpnGatewaysDelete(Async)");
        }

        // verify the required parameter 'gatewayName' is set
        if (gatewayName == null) {
            throw new ApiException("Missing the required parameter 'gatewayName' when calling vpnGatewaysDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vpnGatewaysDelete(Async)");
        }

        return vpnGatewaysDeleteCall(subscriptionId, resourceGroupName, gatewayName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a virtual wan vpn gateway.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Vpn Gateway deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request received successfully. Vpn Gateway deletion is in progress; follow the Location header to poll for final outcome. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No vpn gateways exist by the name provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void vpnGatewaysDelete(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion) throws ApiException {
        vpnGatewaysDeleteWithHttpInfo(subscriptionId, resourceGroupName, gatewayName, apiVersion);
    }

    /**
     * 
     * Deletes a virtual wan vpn gateway.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Vpn Gateway deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request received successfully. Vpn Gateway deletion is in progress; follow the Location header to poll for final outcome. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No vpn gateways exist by the name provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vpnGatewaysDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = vpnGatewaysDeleteValidateBeforeCall(subscriptionId, resourceGroupName, gatewayName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a virtual wan vpn gateway.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Vpn Gateway deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request received successfully. Vpn Gateway deletion is in progress; follow the Location header to poll for final outcome. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No vpn gateways exist by the name provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnGatewaysDeleteAsync(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vpnGatewaysDeleteValidateBeforeCall(subscriptionId, resourceGroupName, gatewayName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vpnGatewaysGet
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the virtual wan vpn gateway retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnGatewaysGetCall(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "gatewayName" + "}", localVarApiClient.escapeString(gatewayName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vpnGatewaysGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vpnGatewaysGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling vpnGatewaysGet(Async)");
        }

        // verify the required parameter 'gatewayName' is set
        if (gatewayName == null) {
            throw new ApiException("Missing the required parameter 'gatewayName' when calling vpnGatewaysGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vpnGatewaysGet(Async)");
        }

        return vpnGatewaysGetCall(subscriptionId, resourceGroupName, gatewayName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves the details of a virtual wan vpn gateway.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param apiVersion Client API version. (required)
     * @return VpnGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the virtual wan vpn gateway retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public VpnGateway vpnGatewaysGet(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion) throws ApiException {
        ApiResponse<VpnGateway> localVarResp = vpnGatewaysGetWithHttpInfo(subscriptionId, resourceGroupName, gatewayName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the details of a virtual wan vpn gateway.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;VpnGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the virtual wan vpn gateway retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VpnGateway> vpnGatewaysGetWithHttpInfo(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = vpnGatewaysGetValidateBeforeCall(subscriptionId, resourceGroupName, gatewayName, apiVersion, null);
        Type localVarReturnType = new TypeToken<VpnGateway>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the details of a virtual wan vpn gateway.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param gatewayName The name of the gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the virtual wan vpn gateway retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnGatewaysGetAsync(String subscriptionId, String resourceGroupName, String gatewayName, String apiVersion, final ApiCallback<VpnGateway> _callback) throws ApiException {

        okhttp3.Call localVarCall = vpnGatewaysGetValidateBeforeCall(subscriptionId, resourceGroupName, gatewayName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<VpnGateway>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vpnGatewaysList
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the VpnGateways in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnGatewaysListCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Network/vpnGateways"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vpnGatewaysListValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vpnGatewaysList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vpnGatewaysList(Async)");
        }

        return vpnGatewaysListCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Lists all the VpnGateways in a subscription.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @return ListVpnGatewaysResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the VpnGateways in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListVpnGatewaysResult vpnGatewaysList(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ListVpnGatewaysResult> localVarResp = vpnGatewaysListWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the VpnGateways in a subscription.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;ListVpnGatewaysResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the VpnGateways in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListVpnGatewaysResult> vpnGatewaysListWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = vpnGatewaysListValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ListVpnGatewaysResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the VpnGateways in a subscription.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the VpnGateways in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnGatewaysListAsync(String subscriptionId, String apiVersion, final ApiCallback<ListVpnGatewaysResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = vpnGatewaysListValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ListVpnGatewaysResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vpnGatewaysListByResourceGroup
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the VpnGateways in the resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnGatewaysListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vpnGatewaysListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vpnGatewaysListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling vpnGatewaysListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vpnGatewaysListByResourceGroup(Async)");
        }

        return vpnGatewaysListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * 
     * Lists all the VpnGateways in a resource group.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param apiVersion Client API version. (required)
     * @return ListVpnGatewaysResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the VpnGateways in the resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListVpnGatewaysResult vpnGatewaysListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<ListVpnGatewaysResult> localVarResp = vpnGatewaysListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the VpnGateways in a resource group.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;ListVpnGatewaysResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the VpnGateways in the resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListVpnGatewaysResult> vpnGatewaysListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = vpnGatewaysListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ListVpnGatewaysResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the VpnGateways in a resource group.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnGateway. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the VpnGateways in the resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnGatewaysListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<ListVpnGatewaysResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = vpnGatewaysListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ListVpnGatewaysResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vpnSitesConfigurationDownload
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param virtualWANName The name of the VirtualWAN for which configuration of all vpn-sites is needed. (required)
     * @param apiVersion Client API version. (required)
     * @param request Parameters supplied to download vpn-sites configuration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Follow the location header for sas-url to output blob. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. Follow the location header for sas-url to output blob. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnSitesConfigurationDownloadCall(String subscriptionId, String resourceGroupName, String virtualWANName, String apiVersion, GetVpnSitesConfigurationRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWANName}/vpnConfiguration"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualWANName" + "}", localVarApiClient.escapeString(virtualWANName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vpnSitesConfigurationDownloadValidateBeforeCall(String subscriptionId, String resourceGroupName, String virtualWANName, String apiVersion, GetVpnSitesConfigurationRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vpnSitesConfigurationDownload(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling vpnSitesConfigurationDownload(Async)");
        }

        // verify the required parameter 'virtualWANName' is set
        if (virtualWANName == null) {
            throw new ApiException("Missing the required parameter 'virtualWANName' when calling vpnSitesConfigurationDownload(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vpnSitesConfigurationDownload(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling vpnSitesConfigurationDownload(Async)");
        }

        return vpnSitesConfigurationDownloadCall(subscriptionId, resourceGroupName, virtualWANName, apiVersion, request, _callback);

    }

    /**
     * 
     * Gives the sas-url to download the configurations for vpn-sites in a resource group.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param virtualWANName The name of the VirtualWAN for which configuration of all vpn-sites is needed. (required)
     * @param apiVersion Client API version. (required)
     * @param request Parameters supplied to download vpn-sites configuration. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Follow the location header for sas-url to output blob. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. Follow the location header for sas-url to output blob. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void vpnSitesConfigurationDownload(String subscriptionId, String resourceGroupName, String virtualWANName, String apiVersion, GetVpnSitesConfigurationRequest request) throws ApiException {
        vpnSitesConfigurationDownloadWithHttpInfo(subscriptionId, resourceGroupName, virtualWANName, apiVersion, request);
    }

    /**
     * 
     * Gives the sas-url to download the configurations for vpn-sites in a resource group.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param virtualWANName The name of the VirtualWAN for which configuration of all vpn-sites is needed. (required)
     * @param apiVersion Client API version. (required)
     * @param request Parameters supplied to download vpn-sites configuration. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Follow the location header for sas-url to output blob. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. Follow the location header for sas-url to output blob. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vpnSitesConfigurationDownloadWithHttpInfo(String subscriptionId, String resourceGroupName, String virtualWANName, String apiVersion, GetVpnSitesConfigurationRequest request) throws ApiException {
        okhttp3.Call localVarCall = vpnSitesConfigurationDownloadValidateBeforeCall(subscriptionId, resourceGroupName, virtualWANName, apiVersion, request, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Gives the sas-url to download the configurations for vpn-sites in a resource group.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param virtualWANName The name of the VirtualWAN for which configuration of all vpn-sites is needed. (required)
     * @param apiVersion Client API version. (required)
     * @param request Parameters supplied to download vpn-sites configuration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Follow the location header for sas-url to output blob. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. Follow the location header for sas-url to output blob. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnSitesConfigurationDownloadAsync(String subscriptionId, String resourceGroupName, String virtualWANName, String apiVersion, GetVpnSitesConfigurationRequest request, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vpnSitesConfigurationDownloadValidateBeforeCall(subscriptionId, resourceGroupName, virtualWANName, apiVersion, request, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vpnSitesCreateOrUpdate
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnSite. (required)
     * @param vpnSiteName The name of the VpnSite being created or updated. (required)
     * @param apiVersion Client API version. (required)
     * @param vpnSiteParameters Parameters supplied to create or update VpnSite. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the VpnSite created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request received successfully. Returns the details of the VpnSite created or updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnSitesCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String vpnSiteName, String apiVersion, VpnSite vpnSiteParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vpnSiteParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnSites/{vpnSiteName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "vpnSiteName" + "}", localVarApiClient.escapeString(vpnSiteName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vpnSitesCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String vpnSiteName, String apiVersion, VpnSite vpnSiteParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vpnSitesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling vpnSitesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'vpnSiteName' is set
        if (vpnSiteName == null) {
            throw new ApiException("Missing the required parameter 'vpnSiteName' when calling vpnSitesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vpnSitesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'vpnSiteParameters' is set
        if (vpnSiteParameters == null) {
            throw new ApiException("Missing the required parameter 'vpnSiteParameters' when calling vpnSitesCreateOrUpdate(Async)");
        }

        return vpnSitesCreateOrUpdateCall(subscriptionId, resourceGroupName, vpnSiteName, apiVersion, vpnSiteParameters, _callback);

    }

    /**
     * 
     * Creates a VpnSite resource if it doesn&#39;t exist else updates the existing VpnSite.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnSite. (required)
     * @param vpnSiteName The name of the VpnSite being created or updated. (required)
     * @param apiVersion Client API version. (required)
     * @param vpnSiteParameters Parameters supplied to create or update VpnSite. (required)
     * @return VpnSite
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the VpnSite created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request received successfully. Returns the details of the VpnSite created or updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public VpnSite vpnSitesCreateOrUpdate(String subscriptionId, String resourceGroupName, String vpnSiteName, String apiVersion, VpnSite vpnSiteParameters) throws ApiException {
        ApiResponse<VpnSite> localVarResp = vpnSitesCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, vpnSiteName, apiVersion, vpnSiteParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a VpnSite resource if it doesn&#39;t exist else updates the existing VpnSite.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnSite. (required)
     * @param vpnSiteName The name of the VpnSite being created or updated. (required)
     * @param apiVersion Client API version. (required)
     * @param vpnSiteParameters Parameters supplied to create or update VpnSite. (required)
     * @return ApiResponse&lt;VpnSite&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the VpnSite created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request received successfully. Returns the details of the VpnSite created or updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VpnSite> vpnSitesCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String vpnSiteName, String apiVersion, VpnSite vpnSiteParameters) throws ApiException {
        okhttp3.Call localVarCall = vpnSitesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, vpnSiteName, apiVersion, vpnSiteParameters, null);
        Type localVarReturnType = new TypeToken<VpnSite>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a VpnSite resource if it doesn&#39;t exist else updates the existing VpnSite.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnSite. (required)
     * @param vpnSiteName The name of the VpnSite being created or updated. (required)
     * @param apiVersion Client API version. (required)
     * @param vpnSiteParameters Parameters supplied to create or update VpnSite. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the VpnSite created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request received successfully. Returns the details of the VpnSite created or updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnSitesCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String vpnSiteName, String apiVersion, VpnSite vpnSiteParameters, final ApiCallback<VpnSite> _callback) throws ApiException {

        okhttp3.Call localVarCall = vpnSitesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, vpnSiteName, apiVersion, vpnSiteParameters, _callback);
        Type localVarReturnType = new TypeToken<VpnSite>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vpnSitesDelete
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnSite. (required)
     * @param vpnSiteName The name of the VpnSite being deleted. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. VpnSite deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request received successfully. VpnSite deletion is in progress </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No VpnSites exist by the name provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnSitesDeleteCall(String subscriptionId, String resourceGroupName, String vpnSiteName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnSites/{vpnSiteName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "vpnSiteName" + "}", localVarApiClient.escapeString(vpnSiteName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vpnSitesDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String vpnSiteName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vpnSitesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling vpnSitesDelete(Async)");
        }

        // verify the required parameter 'vpnSiteName' is set
        if (vpnSiteName == null) {
            throw new ApiException("Missing the required parameter 'vpnSiteName' when calling vpnSitesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vpnSitesDelete(Async)");
        }

        return vpnSitesDeleteCall(subscriptionId, resourceGroupName, vpnSiteName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a VpnSite.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnSite. (required)
     * @param vpnSiteName The name of the VpnSite being deleted. (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. VpnSite deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request received successfully. VpnSite deletion is in progress </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No VpnSites exist by the name provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void vpnSitesDelete(String subscriptionId, String resourceGroupName, String vpnSiteName, String apiVersion) throws ApiException {
        vpnSitesDeleteWithHttpInfo(subscriptionId, resourceGroupName, vpnSiteName, apiVersion);
    }

    /**
     * 
     * Deletes a VpnSite.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnSite. (required)
     * @param vpnSiteName The name of the VpnSite being deleted. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. VpnSite deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request received successfully. VpnSite deletion is in progress </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No VpnSites exist by the name provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vpnSitesDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String vpnSiteName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = vpnSitesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, vpnSiteName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a VpnSite.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnSite. (required)
     * @param vpnSiteName The name of the VpnSite being deleted. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. VpnSite deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request received successfully. VpnSite deletion is in progress </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No VpnSites exist by the name provided. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnSitesDeleteAsync(String subscriptionId, String resourceGroupName, String vpnSiteName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vpnSitesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, vpnSiteName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vpnSitesGet
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnSite. (required)
     * @param vpnSiteName The name of the VpnSite being retrieved. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the VpnSite retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnSitesGetCall(String subscriptionId, String resourceGroupName, String vpnSiteName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnSites/{vpnSiteName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "vpnSiteName" + "}", localVarApiClient.escapeString(vpnSiteName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vpnSitesGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String vpnSiteName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vpnSitesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling vpnSitesGet(Async)");
        }

        // verify the required parameter 'vpnSiteName' is set
        if (vpnSiteName == null) {
            throw new ApiException("Missing the required parameter 'vpnSiteName' when calling vpnSitesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vpnSitesGet(Async)");
        }

        return vpnSitesGetCall(subscriptionId, resourceGroupName, vpnSiteName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves the details of a VPN site.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnSite. (required)
     * @param vpnSiteName The name of the VpnSite being retrieved. (required)
     * @param apiVersion Client API version. (required)
     * @return VpnSite
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the VpnSite retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public VpnSite vpnSitesGet(String subscriptionId, String resourceGroupName, String vpnSiteName, String apiVersion) throws ApiException {
        ApiResponse<VpnSite> localVarResp = vpnSitesGetWithHttpInfo(subscriptionId, resourceGroupName, vpnSiteName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the details of a VPN site.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnSite. (required)
     * @param vpnSiteName The name of the VpnSite being retrieved. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;VpnSite&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the VpnSite retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VpnSite> vpnSitesGetWithHttpInfo(String subscriptionId, String resourceGroupName, String vpnSiteName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = vpnSitesGetValidateBeforeCall(subscriptionId, resourceGroupName, vpnSiteName, apiVersion, null);
        Type localVarReturnType = new TypeToken<VpnSite>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the details of a VPN site.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnSite. (required)
     * @param vpnSiteName The name of the VpnSite being retrieved. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the VpnSite retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnSitesGetAsync(String subscriptionId, String resourceGroupName, String vpnSiteName, String apiVersion, final ApiCallback<VpnSite> _callback) throws ApiException {

        okhttp3.Call localVarCall = vpnSitesGetValidateBeforeCall(subscriptionId, resourceGroupName, vpnSiteName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<VpnSite>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vpnSitesList
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the VpnSites in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnSitesListCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Network/vpnSites"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vpnSitesListValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vpnSitesList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vpnSitesList(Async)");
        }

        return vpnSitesListCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Lists all the VpnSites in a subscription.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @return ListVpnSitesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the VpnSites in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListVpnSitesResult vpnSitesList(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ListVpnSitesResult> localVarResp = vpnSitesListWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the VpnSites in a subscription.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;ListVpnSitesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the VpnSites in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListVpnSitesResult> vpnSitesListWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = vpnSitesListValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ListVpnSitesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the VpnSites in a subscription.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the VpnSites in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnSitesListAsync(String subscriptionId, String apiVersion, final ApiCallback<ListVpnSitesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = vpnSitesListValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ListVpnSitesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vpnSitesListByResourceGroup
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnSite. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the vpnSites in the resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnSitesListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnSites"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vpnSitesListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vpnSitesListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling vpnSitesListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vpnSitesListByResourceGroup(Async)");
        }

        return vpnSitesListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * 
     * Lists all the vpnSites in a resource group.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnSite. (required)
     * @param apiVersion Client API version. (required)
     * @return ListVpnSitesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the vpnSites in the resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ListVpnSitesResult vpnSitesListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<ListVpnSitesResult> localVarResp = vpnSitesListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the vpnSites in a resource group.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnSite. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;ListVpnSitesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the vpnSites in the resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListVpnSitesResult> vpnSitesListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = vpnSitesListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ListVpnSitesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the vpnSites in a resource group.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the VpnSite. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of all the vpnSites in the resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vpnSitesListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<ListVpnSitesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = vpnSitesListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ListVpnSitesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
