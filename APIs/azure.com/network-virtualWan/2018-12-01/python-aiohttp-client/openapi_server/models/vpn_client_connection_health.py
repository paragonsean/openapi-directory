# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VpnClientConnectionHealth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allocated_ip_addresses: List[str]=None, total_egress_bytes_transferred: int=None, total_ingress_bytes_transferred: int=None, vpn_client_connections_count: int=None):
        """VpnClientConnectionHealth - a model defined in OpenAPI

        :param allocated_ip_addresses: The allocated_ip_addresses of this VpnClientConnectionHealth.
        :param total_egress_bytes_transferred: The total_egress_bytes_transferred of this VpnClientConnectionHealth.
        :param total_ingress_bytes_transferred: The total_ingress_bytes_transferred of this VpnClientConnectionHealth.
        :param vpn_client_connections_count: The vpn_client_connections_count of this VpnClientConnectionHealth.
        """
        self.openapi_types = {
            'allocated_ip_addresses': List[str],
            'total_egress_bytes_transferred': int,
            'total_ingress_bytes_transferred': int,
            'vpn_client_connections_count': int
        }

        self.attribute_map = {
            'allocated_ip_addresses': 'allocatedIpAddresses',
            'total_egress_bytes_transferred': 'totalEgressBytesTransferred',
            'total_ingress_bytes_transferred': 'totalIngressBytesTransferred',
            'vpn_client_connections_count': 'vpnClientConnectionsCount'
        }

        self._allocated_ip_addresses = allocated_ip_addresses
        self._total_egress_bytes_transferred = total_egress_bytes_transferred
        self._total_ingress_bytes_transferred = total_ingress_bytes_transferred
        self._vpn_client_connections_count = vpn_client_connections_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VpnClientConnectionHealth':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VpnClientConnectionHealth of this VpnClientConnectionHealth.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allocated_ip_addresses(self):
        """Gets the allocated_ip_addresses of this VpnClientConnectionHealth.

        List of allocated ip addresses to the connected p2s vpn clients.

        :return: The allocated_ip_addresses of this VpnClientConnectionHealth.
        :rtype: List[str]
        """
        return self._allocated_ip_addresses

    @allocated_ip_addresses.setter
    def allocated_ip_addresses(self, allocated_ip_addresses):
        """Sets the allocated_ip_addresses of this VpnClientConnectionHealth.

        List of allocated ip addresses to the connected p2s vpn clients.

        :param allocated_ip_addresses: The allocated_ip_addresses of this VpnClientConnectionHealth.
        :type allocated_ip_addresses: List[str]
        """

        self._allocated_ip_addresses = allocated_ip_addresses

    @property
    def total_egress_bytes_transferred(self):
        """Gets the total_egress_bytes_transferred of this VpnClientConnectionHealth.

        Total of the Egress Bytes Transferred in this connection

        :return: The total_egress_bytes_transferred of this VpnClientConnectionHealth.
        :rtype: int
        """
        return self._total_egress_bytes_transferred

    @total_egress_bytes_transferred.setter
    def total_egress_bytes_transferred(self, total_egress_bytes_transferred):
        """Sets the total_egress_bytes_transferred of this VpnClientConnectionHealth.

        Total of the Egress Bytes Transferred in this connection

        :param total_egress_bytes_transferred: The total_egress_bytes_transferred of this VpnClientConnectionHealth.
        :type total_egress_bytes_transferred: int
        """

        self._total_egress_bytes_transferred = total_egress_bytes_transferred

    @property
    def total_ingress_bytes_transferred(self):
        """Gets the total_ingress_bytes_transferred of this VpnClientConnectionHealth.

        Total of the Ingress Bytes Transferred in this P2S Vpn connection

        :return: The total_ingress_bytes_transferred of this VpnClientConnectionHealth.
        :rtype: int
        """
        return self._total_ingress_bytes_transferred

    @total_ingress_bytes_transferred.setter
    def total_ingress_bytes_transferred(self, total_ingress_bytes_transferred):
        """Sets the total_ingress_bytes_transferred of this VpnClientConnectionHealth.

        Total of the Ingress Bytes Transferred in this P2S Vpn connection

        :param total_ingress_bytes_transferred: The total_ingress_bytes_transferred of this VpnClientConnectionHealth.
        :type total_ingress_bytes_transferred: int
        """

        self._total_ingress_bytes_transferred = total_ingress_bytes_transferred

    @property
    def vpn_client_connections_count(self):
        """Gets the vpn_client_connections_count of this VpnClientConnectionHealth.

        The total of p2s vpn clients connected at this time to this P2SVpnGateway.

        :return: The vpn_client_connections_count of this VpnClientConnectionHealth.
        :rtype: int
        """
        return self._vpn_client_connections_count

    @vpn_client_connections_count.setter
    def vpn_client_connections_count(self, vpn_client_connections_count):
        """Sets the vpn_client_connections_count of this VpnClientConnectionHealth.

        The total of p2s vpn clients connected at this time to this P2SVpnGateway.

        :param vpn_client_connections_count: The vpn_client_connections_count of this VpnClientConnectionHealth.
        :type vpn_client_connections_count: int
        """

        self._vpn_client_connections_count = vpn_client_connections_count
