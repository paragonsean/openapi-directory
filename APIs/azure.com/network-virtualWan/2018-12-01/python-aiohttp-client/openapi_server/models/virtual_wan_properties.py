# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hub_virtual_network_connection_properties_remote_virtual_network import HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork
from openapi_server.models.office_traffic_category import OfficeTrafficCategory
from openapi_server.models.p2_s_vpn_server_configuration import P2SVpnServerConfiguration
from openapi_server import util


class VirtualWanProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_branch_to_branch_traffic: bool=None, allow_vnet_to_vnet_traffic: bool=None, disable_vpn_encryption: bool=None, office365_local_breakout_category: OfficeTrafficCategory=None, p2_s_vpn_server_configurations: List[P2SVpnServerConfiguration]=None, provisioning_state: str=None, security_provider_name: str=None, virtual_hubs: List[HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork]=None, vpn_sites: List[HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork]=None):
        """VirtualWanProperties - a model defined in OpenAPI

        :param allow_branch_to_branch_traffic: The allow_branch_to_branch_traffic of this VirtualWanProperties.
        :param allow_vnet_to_vnet_traffic: The allow_vnet_to_vnet_traffic of this VirtualWanProperties.
        :param disable_vpn_encryption: The disable_vpn_encryption of this VirtualWanProperties.
        :param office365_local_breakout_category: The office365_local_breakout_category of this VirtualWanProperties.
        :param p2_s_vpn_server_configurations: The p2_s_vpn_server_configurations of this VirtualWanProperties.
        :param provisioning_state: The provisioning_state of this VirtualWanProperties.
        :param security_provider_name: The security_provider_name of this VirtualWanProperties.
        :param virtual_hubs: The virtual_hubs of this VirtualWanProperties.
        :param vpn_sites: The vpn_sites of this VirtualWanProperties.
        """
        self.openapi_types = {
            'allow_branch_to_branch_traffic': bool,
            'allow_vnet_to_vnet_traffic': bool,
            'disable_vpn_encryption': bool,
            'office365_local_breakout_category': OfficeTrafficCategory,
            'p2_s_vpn_server_configurations': List[P2SVpnServerConfiguration],
            'provisioning_state': str,
            'security_provider_name': str,
            'virtual_hubs': List[HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork],
            'vpn_sites': List[HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork]
        }

        self.attribute_map = {
            'allow_branch_to_branch_traffic': 'allowBranchToBranchTraffic',
            'allow_vnet_to_vnet_traffic': 'allowVnetToVnetTraffic',
            'disable_vpn_encryption': 'disableVpnEncryption',
            'office365_local_breakout_category': 'office365LocalBreakoutCategory',
            'p2_s_vpn_server_configurations': 'p2SVpnServerConfigurations',
            'provisioning_state': 'provisioningState',
            'security_provider_name': 'securityProviderName',
            'virtual_hubs': 'virtualHubs',
            'vpn_sites': 'vpnSites'
        }

        self._allow_branch_to_branch_traffic = allow_branch_to_branch_traffic
        self._allow_vnet_to_vnet_traffic = allow_vnet_to_vnet_traffic
        self._disable_vpn_encryption = disable_vpn_encryption
        self._office365_local_breakout_category = office365_local_breakout_category
        self._p2_s_vpn_server_configurations = p2_s_vpn_server_configurations
        self._provisioning_state = provisioning_state
        self._security_provider_name = security_provider_name
        self._virtual_hubs = virtual_hubs
        self._vpn_sites = vpn_sites

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualWanProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualWanProperties of this VirtualWanProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_branch_to_branch_traffic(self):
        """Gets the allow_branch_to_branch_traffic of this VirtualWanProperties.

        True if branch to branch traffic is allowed.

        :return: The allow_branch_to_branch_traffic of this VirtualWanProperties.
        :rtype: bool
        """
        return self._allow_branch_to_branch_traffic

    @allow_branch_to_branch_traffic.setter
    def allow_branch_to_branch_traffic(self, allow_branch_to_branch_traffic):
        """Sets the allow_branch_to_branch_traffic of this VirtualWanProperties.

        True if branch to branch traffic is allowed.

        :param allow_branch_to_branch_traffic: The allow_branch_to_branch_traffic of this VirtualWanProperties.
        :type allow_branch_to_branch_traffic: bool
        """

        self._allow_branch_to_branch_traffic = allow_branch_to_branch_traffic

    @property
    def allow_vnet_to_vnet_traffic(self):
        """Gets the allow_vnet_to_vnet_traffic of this VirtualWanProperties.

        True if Vnet to Vnet traffic is allowed.

        :return: The allow_vnet_to_vnet_traffic of this VirtualWanProperties.
        :rtype: bool
        """
        return self._allow_vnet_to_vnet_traffic

    @allow_vnet_to_vnet_traffic.setter
    def allow_vnet_to_vnet_traffic(self, allow_vnet_to_vnet_traffic):
        """Sets the allow_vnet_to_vnet_traffic of this VirtualWanProperties.

        True if Vnet to Vnet traffic is allowed.

        :param allow_vnet_to_vnet_traffic: The allow_vnet_to_vnet_traffic of this VirtualWanProperties.
        :type allow_vnet_to_vnet_traffic: bool
        """

        self._allow_vnet_to_vnet_traffic = allow_vnet_to_vnet_traffic

    @property
    def disable_vpn_encryption(self):
        """Gets the disable_vpn_encryption of this VirtualWanProperties.

        Vpn encryption to be disabled or not.

        :return: The disable_vpn_encryption of this VirtualWanProperties.
        :rtype: bool
        """
        return self._disable_vpn_encryption

    @disable_vpn_encryption.setter
    def disable_vpn_encryption(self, disable_vpn_encryption):
        """Sets the disable_vpn_encryption of this VirtualWanProperties.

        Vpn encryption to be disabled or not.

        :param disable_vpn_encryption: The disable_vpn_encryption of this VirtualWanProperties.
        :type disable_vpn_encryption: bool
        """

        self._disable_vpn_encryption = disable_vpn_encryption

    @property
    def office365_local_breakout_category(self):
        """Gets the office365_local_breakout_category of this VirtualWanProperties.


        :return: The office365_local_breakout_category of this VirtualWanProperties.
        :rtype: OfficeTrafficCategory
        """
        return self._office365_local_breakout_category

    @office365_local_breakout_category.setter
    def office365_local_breakout_category(self, office365_local_breakout_category):
        """Sets the office365_local_breakout_category of this VirtualWanProperties.


        :param office365_local_breakout_category: The office365_local_breakout_category of this VirtualWanProperties.
        :type office365_local_breakout_category: OfficeTrafficCategory
        """

        self._office365_local_breakout_category = office365_local_breakout_category

    @property
    def p2_s_vpn_server_configurations(self):
        """Gets the p2_s_vpn_server_configurations of this VirtualWanProperties.

        List of all P2SVpnServerConfigurations associated with the virtual wan.

        :return: The p2_s_vpn_server_configurations of this VirtualWanProperties.
        :rtype: List[P2SVpnServerConfiguration]
        """
        return self._p2_s_vpn_server_configurations

    @p2_s_vpn_server_configurations.setter
    def p2_s_vpn_server_configurations(self, p2_s_vpn_server_configurations):
        """Sets the p2_s_vpn_server_configurations of this VirtualWanProperties.

        List of all P2SVpnServerConfigurations associated with the virtual wan.

        :param p2_s_vpn_server_configurations: The p2_s_vpn_server_configurations of this VirtualWanProperties.
        :type p2_s_vpn_server_configurations: List[P2SVpnServerConfiguration]
        """

        self._p2_s_vpn_server_configurations = p2_s_vpn_server_configurations

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this VirtualWanProperties.

        The current provisioning state.

        :return: The provisioning_state of this VirtualWanProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this VirtualWanProperties.

        The current provisioning state.

        :param provisioning_state: The provisioning_state of this VirtualWanProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Updating", "Deleting", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def security_provider_name(self):
        """Gets the security_provider_name of this VirtualWanProperties.

        The Security Provider name.

        :return: The security_provider_name of this VirtualWanProperties.
        :rtype: str
        """
        return self._security_provider_name

    @security_provider_name.setter
    def security_provider_name(self, security_provider_name):
        """Sets the security_provider_name of this VirtualWanProperties.

        The Security Provider name.

        :param security_provider_name: The security_provider_name of this VirtualWanProperties.
        :type security_provider_name: str
        """

        self._security_provider_name = security_provider_name

    @property
    def virtual_hubs(self):
        """Gets the virtual_hubs of this VirtualWanProperties.

        List of VirtualHubs in the VirtualWAN.

        :return: The virtual_hubs of this VirtualWanProperties.
        :rtype: List[HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork]
        """
        return self._virtual_hubs

    @virtual_hubs.setter
    def virtual_hubs(self, virtual_hubs):
        """Sets the virtual_hubs of this VirtualWanProperties.

        List of VirtualHubs in the VirtualWAN.

        :param virtual_hubs: The virtual_hubs of this VirtualWanProperties.
        :type virtual_hubs: List[HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork]
        """

        self._virtual_hubs = virtual_hubs

    @property
    def vpn_sites(self):
        """Gets the vpn_sites of this VirtualWanProperties.


        :return: The vpn_sites of this VirtualWanProperties.
        :rtype: List[HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork]
        """
        return self._vpn_sites

    @vpn_sites.setter
    def vpn_sites(self, vpn_sites):
        """Sets the vpn_sites of this VirtualWanProperties.


        :param vpn_sites: The vpn_sites of this VirtualWanProperties.
        :type vpn_sites: List[HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork]
        """

        self._vpn_sites = vpn_sites
