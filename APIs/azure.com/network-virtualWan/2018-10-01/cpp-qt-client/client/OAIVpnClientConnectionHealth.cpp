/**
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVpnClientConnectionHealth.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVpnClientConnectionHealth::OAIVpnClientConnectionHealth(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVpnClientConnectionHealth::OAIVpnClientConnectionHealth() {
    this->initializeModel();
}

OAIVpnClientConnectionHealth::~OAIVpnClientConnectionHealth() {}

void OAIVpnClientConnectionHealth::initializeModel() {

    m_allocated_ip_addresses_isSet = false;
    m_allocated_ip_addresses_isValid = false;

    m_total_egress_bytes_transferred_isSet = false;
    m_total_egress_bytes_transferred_isValid = false;

    m_total_ingress_bytes_transferred_isSet = false;
    m_total_ingress_bytes_transferred_isValid = false;

    m_vpn_client_connections_count_isSet = false;
    m_vpn_client_connections_count_isValid = false;
}

void OAIVpnClientConnectionHealth::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVpnClientConnectionHealth::fromJsonObject(QJsonObject json) {

    m_allocated_ip_addresses_isValid = ::OpenAPI::fromJsonValue(m_allocated_ip_addresses, json[QString("allocatedIpAddresses")]);
    m_allocated_ip_addresses_isSet = !json[QString("allocatedIpAddresses")].isNull() && m_allocated_ip_addresses_isValid;

    m_total_egress_bytes_transferred_isValid = ::OpenAPI::fromJsonValue(m_total_egress_bytes_transferred, json[QString("totalEgressBytesTransferred")]);
    m_total_egress_bytes_transferred_isSet = !json[QString("totalEgressBytesTransferred")].isNull() && m_total_egress_bytes_transferred_isValid;

    m_total_ingress_bytes_transferred_isValid = ::OpenAPI::fromJsonValue(m_total_ingress_bytes_transferred, json[QString("totalIngressBytesTransferred")]);
    m_total_ingress_bytes_transferred_isSet = !json[QString("totalIngressBytesTransferred")].isNull() && m_total_ingress_bytes_transferred_isValid;

    m_vpn_client_connections_count_isValid = ::OpenAPI::fromJsonValue(m_vpn_client_connections_count, json[QString("vpnClientConnectionsCount")]);
    m_vpn_client_connections_count_isSet = !json[QString("vpnClientConnectionsCount")].isNull() && m_vpn_client_connections_count_isValid;
}

QString OAIVpnClientConnectionHealth::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVpnClientConnectionHealth::asJsonObject() const {
    QJsonObject obj;
    if (m_allocated_ip_addresses.size() > 0) {
        obj.insert(QString("allocatedIpAddresses"), ::OpenAPI::toJsonValue(m_allocated_ip_addresses));
    }
    if (m_total_egress_bytes_transferred_isSet) {
        obj.insert(QString("totalEgressBytesTransferred"), ::OpenAPI::toJsonValue(m_total_egress_bytes_transferred));
    }
    if (m_total_ingress_bytes_transferred_isSet) {
        obj.insert(QString("totalIngressBytesTransferred"), ::OpenAPI::toJsonValue(m_total_ingress_bytes_transferred));
    }
    if (m_vpn_client_connections_count_isSet) {
        obj.insert(QString("vpnClientConnectionsCount"), ::OpenAPI::toJsonValue(m_vpn_client_connections_count));
    }
    return obj;
}

QList<QString> OAIVpnClientConnectionHealth::getAllocatedIpAddresses() const {
    return m_allocated_ip_addresses;
}
void OAIVpnClientConnectionHealth::setAllocatedIpAddresses(const QList<QString> &allocated_ip_addresses) {
    m_allocated_ip_addresses = allocated_ip_addresses;
    m_allocated_ip_addresses_isSet = true;
}

bool OAIVpnClientConnectionHealth::is_allocated_ip_addresses_Set() const{
    return m_allocated_ip_addresses_isSet;
}

bool OAIVpnClientConnectionHealth::is_allocated_ip_addresses_Valid() const{
    return m_allocated_ip_addresses_isValid;
}

qint64 OAIVpnClientConnectionHealth::getTotalEgressBytesTransferred() const {
    return m_total_egress_bytes_transferred;
}
void OAIVpnClientConnectionHealth::setTotalEgressBytesTransferred(const qint64 &total_egress_bytes_transferred) {
    m_total_egress_bytes_transferred = total_egress_bytes_transferred;
    m_total_egress_bytes_transferred_isSet = true;
}

bool OAIVpnClientConnectionHealth::is_total_egress_bytes_transferred_Set() const{
    return m_total_egress_bytes_transferred_isSet;
}

bool OAIVpnClientConnectionHealth::is_total_egress_bytes_transferred_Valid() const{
    return m_total_egress_bytes_transferred_isValid;
}

qint64 OAIVpnClientConnectionHealth::getTotalIngressBytesTransferred() const {
    return m_total_ingress_bytes_transferred;
}
void OAIVpnClientConnectionHealth::setTotalIngressBytesTransferred(const qint64 &total_ingress_bytes_transferred) {
    m_total_ingress_bytes_transferred = total_ingress_bytes_transferred;
    m_total_ingress_bytes_transferred_isSet = true;
}

bool OAIVpnClientConnectionHealth::is_total_ingress_bytes_transferred_Set() const{
    return m_total_ingress_bytes_transferred_isSet;
}

bool OAIVpnClientConnectionHealth::is_total_ingress_bytes_transferred_Valid() const{
    return m_total_ingress_bytes_transferred_isValid;
}

qint32 OAIVpnClientConnectionHealth::getVpnClientConnectionsCount() const {
    return m_vpn_client_connections_count;
}
void OAIVpnClientConnectionHealth::setVpnClientConnectionsCount(const qint32 &vpn_client_connections_count) {
    m_vpn_client_connections_count = vpn_client_connections_count;
    m_vpn_client_connections_count_isSet = true;
}

bool OAIVpnClientConnectionHealth::is_vpn_client_connections_count_Set() const{
    return m_vpn_client_connections_count_isSet;
}

bool OAIVpnClientConnectionHealth::is_vpn_client_connections_count_Valid() const{
    return m_vpn_client_connections_count_isValid;
}

bool OAIVpnClientConnectionHealth::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocated_ip_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_egress_bytes_transferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_ingress_bytes_transferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_client_connections_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVpnClientConnectionHealth::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
