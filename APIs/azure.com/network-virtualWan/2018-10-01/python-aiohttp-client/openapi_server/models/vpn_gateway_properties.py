# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hub_virtual_network_connection_properties_remote_virtual_network import HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork
from openapi_server.models.provisioning_state import ProvisioningState
from openapi_server.models.vpn_connection import VpnConnection
from openapi_server.models.vpn_gateway_properties_bgp_settings import VpnGatewayPropertiesBgpSettings
from openapi_server import util


class VpnGatewayProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bgp_settings: VpnGatewayPropertiesBgpSettings=None, connections: List[VpnConnection]=None, provisioning_state: ProvisioningState=None, virtual_hub: HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork=None, vpn_gateway_scale_unit: int=None):
        """VpnGatewayProperties - a model defined in OpenAPI

        :param bgp_settings: The bgp_settings of this VpnGatewayProperties.
        :param connections: The connections of this VpnGatewayProperties.
        :param provisioning_state: The provisioning_state of this VpnGatewayProperties.
        :param virtual_hub: The virtual_hub of this VpnGatewayProperties.
        :param vpn_gateway_scale_unit: The vpn_gateway_scale_unit of this VpnGatewayProperties.
        """
        self.openapi_types = {
            'bgp_settings': VpnGatewayPropertiesBgpSettings,
            'connections': List[VpnConnection],
            'provisioning_state': ProvisioningState,
            'virtual_hub': HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork,
            'vpn_gateway_scale_unit': int
        }

        self.attribute_map = {
            'bgp_settings': 'bgpSettings',
            'connections': 'connections',
            'provisioning_state': 'provisioningState',
            'virtual_hub': 'virtualHub',
            'vpn_gateway_scale_unit': 'vpnGatewayScaleUnit'
        }

        self._bgp_settings = bgp_settings
        self._connections = connections
        self._provisioning_state = provisioning_state
        self._virtual_hub = virtual_hub
        self._vpn_gateway_scale_unit = vpn_gateway_scale_unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VpnGatewayProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VpnGatewayProperties of this VpnGatewayProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bgp_settings(self):
        """Gets the bgp_settings of this VpnGatewayProperties.


        :return: The bgp_settings of this VpnGatewayProperties.
        :rtype: VpnGatewayPropertiesBgpSettings
        """
        return self._bgp_settings

    @bgp_settings.setter
    def bgp_settings(self, bgp_settings):
        """Sets the bgp_settings of this VpnGatewayProperties.


        :param bgp_settings: The bgp_settings of this VpnGatewayProperties.
        :type bgp_settings: VpnGatewayPropertiesBgpSettings
        """

        self._bgp_settings = bgp_settings

    @property
    def connections(self):
        """Gets the connections of this VpnGatewayProperties.

        list of all vpn connections to the gateway.

        :return: The connections of this VpnGatewayProperties.
        :rtype: List[VpnConnection]
        """
        return self._connections

    @connections.setter
    def connections(self, connections):
        """Sets the connections of this VpnGatewayProperties.

        list of all vpn connections to the gateway.

        :param connections: The connections of this VpnGatewayProperties.
        :type connections: List[VpnConnection]
        """

        self._connections = connections

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this VpnGatewayProperties.


        :return: The provisioning_state of this VpnGatewayProperties.
        :rtype: ProvisioningState
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this VpnGatewayProperties.


        :param provisioning_state: The provisioning_state of this VpnGatewayProperties.
        :type provisioning_state: ProvisioningState
        """

        self._provisioning_state = provisioning_state

    @property
    def virtual_hub(self):
        """Gets the virtual_hub of this VpnGatewayProperties.


        :return: The virtual_hub of this VpnGatewayProperties.
        :rtype: HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork
        """
        return self._virtual_hub

    @virtual_hub.setter
    def virtual_hub(self, virtual_hub):
        """Sets the virtual_hub of this VpnGatewayProperties.


        :param virtual_hub: The virtual_hub of this VpnGatewayProperties.
        :type virtual_hub: HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork
        """

        self._virtual_hub = virtual_hub

    @property
    def vpn_gateway_scale_unit(self):
        """Gets the vpn_gateway_scale_unit of this VpnGatewayProperties.

        The scale unit for this vpn gateway.

        :return: The vpn_gateway_scale_unit of this VpnGatewayProperties.
        :rtype: int
        """
        return self._vpn_gateway_scale_unit

    @vpn_gateway_scale_unit.setter
    def vpn_gateway_scale_unit(self, vpn_gateway_scale_unit):
        """Sets the vpn_gateway_scale_unit of this VpnGatewayProperties.

        The scale unit for this vpn gateway.

        :param vpn_gateway_scale_unit: The vpn_gateway_scale_unit of this VpnGatewayProperties.
        :type vpn_gateway_scale_unit: int
        """

        self._vpn_gateway_scale_unit = vpn_gateway_scale_unit
