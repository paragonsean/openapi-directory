/**
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork from './HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork';
import P2SVpnServerConfigRadiusClientRootCertificate from './P2SVpnServerConfigRadiusClientRootCertificate';
import P2SVpnServerConfigRadiusServerRootCertificate from './P2SVpnServerConfigRadiusServerRootCertificate';
import P2SVpnServerConfigVpnClientRevokedCertificate from './P2SVpnServerConfigVpnClientRevokedCertificate';
import P2SVpnServerConfigVpnClientRootCertificate from './P2SVpnServerConfigVpnClientRootCertificate';
import P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner from './P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner';

/**
 * The P2SVpnServerConfigurationProperties model module.
 * @module model/P2SVpnServerConfigurationProperties
 * @version 2018-10-01
 */
class P2SVpnServerConfigurationProperties {
    /**
     * Constructs a new <code>P2SVpnServerConfigurationProperties</code>.
     * Parameters for P2SVpnServerConfiguration
     * @alias module:model/P2SVpnServerConfigurationProperties
     */
    constructor() { 
        
        P2SVpnServerConfigurationProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>P2SVpnServerConfigurationProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/P2SVpnServerConfigurationProperties} obj Optional instance to populate.
     * @return {module:model/P2SVpnServerConfigurationProperties} The populated <code>P2SVpnServerConfigurationProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new P2SVpnServerConfigurationProperties();

            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('p2SVpnGateways')) {
                obj['p2SVpnGateways'] = ApiClient.convertToType(data['p2SVpnGateways'], [HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork]);
            }
            if (data.hasOwnProperty('p2SVpnServerConfigRadiusClientRootCertificates')) {
                obj['p2SVpnServerConfigRadiusClientRootCertificates'] = ApiClient.convertToType(data['p2SVpnServerConfigRadiusClientRootCertificates'], [P2SVpnServerConfigRadiusClientRootCertificate]);
            }
            if (data.hasOwnProperty('p2SVpnServerConfigRadiusServerRootCertificates')) {
                obj['p2SVpnServerConfigRadiusServerRootCertificates'] = ApiClient.convertToType(data['p2SVpnServerConfigRadiusServerRootCertificates'], [P2SVpnServerConfigRadiusServerRootCertificate]);
            }
            if (data.hasOwnProperty('p2SVpnServerConfigVpnClientRevokedCertificates')) {
                obj['p2SVpnServerConfigVpnClientRevokedCertificates'] = ApiClient.convertToType(data['p2SVpnServerConfigVpnClientRevokedCertificates'], [P2SVpnServerConfigVpnClientRevokedCertificate]);
            }
            if (data.hasOwnProperty('p2SVpnServerConfigVpnClientRootCertificates')) {
                obj['p2SVpnServerConfigVpnClientRootCertificates'] = ApiClient.convertToType(data['p2SVpnServerConfigVpnClientRootCertificates'], [P2SVpnServerConfigVpnClientRootCertificate]);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('radiusServerAddress')) {
                obj['radiusServerAddress'] = ApiClient.convertToType(data['radiusServerAddress'], 'String');
            }
            if (data.hasOwnProperty('radiusServerSecret')) {
                obj['radiusServerSecret'] = ApiClient.convertToType(data['radiusServerSecret'], 'String');
            }
            if (data.hasOwnProperty('vpnClientIpsecPolicies')) {
                obj['vpnClientIpsecPolicies'] = ApiClient.convertToType(data['vpnClientIpsecPolicies'], [P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner]);
            }
            if (data.hasOwnProperty('vpnProtocols')) {
                obj['vpnProtocols'] = ApiClient.convertToType(data['vpnProtocols'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>P2SVpnServerConfigurationProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>P2SVpnServerConfigurationProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['p2SVpnGateways']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['p2SVpnGateways'])) {
                throw new Error("Expected the field `p2SVpnGateways` to be an array in the JSON data but got " + data['p2SVpnGateways']);
            }
            // validate the optional field `p2SVpnGateways` (array)
            for (const item of data['p2SVpnGateways']) {
                HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork.validateJSON(item);
            };
        }
        if (data['p2SVpnServerConfigRadiusClientRootCertificates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['p2SVpnServerConfigRadiusClientRootCertificates'])) {
                throw new Error("Expected the field `p2SVpnServerConfigRadiusClientRootCertificates` to be an array in the JSON data but got " + data['p2SVpnServerConfigRadiusClientRootCertificates']);
            }
            // validate the optional field `p2SVpnServerConfigRadiusClientRootCertificates` (array)
            for (const item of data['p2SVpnServerConfigRadiusClientRootCertificates']) {
                P2SVpnServerConfigRadiusClientRootCertificate.validateJSON(item);
            };
        }
        if (data['p2SVpnServerConfigRadiusServerRootCertificates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['p2SVpnServerConfigRadiusServerRootCertificates'])) {
                throw new Error("Expected the field `p2SVpnServerConfigRadiusServerRootCertificates` to be an array in the JSON data but got " + data['p2SVpnServerConfigRadiusServerRootCertificates']);
            }
            // validate the optional field `p2SVpnServerConfigRadiusServerRootCertificates` (array)
            for (const item of data['p2SVpnServerConfigRadiusServerRootCertificates']) {
                P2SVpnServerConfigRadiusServerRootCertificate.validateJSON(item);
            };
        }
        if (data['p2SVpnServerConfigVpnClientRevokedCertificates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['p2SVpnServerConfigVpnClientRevokedCertificates'])) {
                throw new Error("Expected the field `p2SVpnServerConfigVpnClientRevokedCertificates` to be an array in the JSON data but got " + data['p2SVpnServerConfigVpnClientRevokedCertificates']);
            }
            // validate the optional field `p2SVpnServerConfigVpnClientRevokedCertificates` (array)
            for (const item of data['p2SVpnServerConfigVpnClientRevokedCertificates']) {
                P2SVpnServerConfigVpnClientRevokedCertificate.validateJSON(item);
            };
        }
        if (data['p2SVpnServerConfigVpnClientRootCertificates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['p2SVpnServerConfigVpnClientRootCertificates'])) {
                throw new Error("Expected the field `p2SVpnServerConfigVpnClientRootCertificates` to be an array in the JSON data but got " + data['p2SVpnServerConfigVpnClientRootCertificates']);
            }
            // validate the optional field `p2SVpnServerConfigVpnClientRootCertificates` (array)
            for (const item of data['p2SVpnServerConfigVpnClientRootCertificates']) {
                P2SVpnServerConfigVpnClientRootCertificate.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['radiusServerAddress'] && !(typeof data['radiusServerAddress'] === 'string' || data['radiusServerAddress'] instanceof String)) {
            throw new Error("Expected the field `radiusServerAddress` to be a primitive type in the JSON string but got " + data['radiusServerAddress']);
        }
        // ensure the json data is a string
        if (data['radiusServerSecret'] && !(typeof data['radiusServerSecret'] === 'string' || data['radiusServerSecret'] instanceof String)) {
            throw new Error("Expected the field `radiusServerSecret` to be a primitive type in the JSON string but got " + data['radiusServerSecret']);
        }
        if (data['vpnClientIpsecPolicies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['vpnClientIpsecPolicies'])) {
                throw new Error("Expected the field `vpnClientIpsecPolicies` to be an array in the JSON data but got " + data['vpnClientIpsecPolicies']);
            }
            // validate the optional field `vpnClientIpsecPolicies` (array)
            for (const item of data['vpnClientIpsecPolicies']) {
                P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['vpnProtocols'])) {
            throw new Error("Expected the field `vpnProtocols` to be an array in the JSON data but got " + data['vpnProtocols']);
        }

        return true;
    }


}



/**
 * A unique read-only string that changes whenever the resource is updated.
 * @member {String} etag
 */
P2SVpnServerConfigurationProperties.prototype['etag'] = undefined;

/**
 * The name of the P2SVpnServerConfiguration that is unique within a VirtualWan in a resource group. This name can be used to access the resource along with Parent VirtualWan resource name.
 * @member {String} name
 */
P2SVpnServerConfigurationProperties.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork>} p2SVpnGateways
 */
P2SVpnServerConfigurationProperties.prototype['p2SVpnGateways'] = undefined;

/**
 * Radius client root certificate of P2SVpnServerConfiguration.
 * @member {Array.<module:model/P2SVpnServerConfigRadiusClientRootCertificate>} p2SVpnServerConfigRadiusClientRootCertificates
 */
P2SVpnServerConfigurationProperties.prototype['p2SVpnServerConfigRadiusClientRootCertificates'] = undefined;

/**
 * Radius Server root certificate of P2SVpnServerConfiguration.
 * @member {Array.<module:model/P2SVpnServerConfigRadiusServerRootCertificate>} p2SVpnServerConfigRadiusServerRootCertificates
 */
P2SVpnServerConfigurationProperties.prototype['p2SVpnServerConfigRadiusServerRootCertificates'] = undefined;

/**
 * VPN client revoked certificate of P2SVpnServerConfiguration.
 * @member {Array.<module:model/P2SVpnServerConfigVpnClientRevokedCertificate>} p2SVpnServerConfigVpnClientRevokedCertificates
 */
P2SVpnServerConfigurationProperties.prototype['p2SVpnServerConfigVpnClientRevokedCertificates'] = undefined;

/**
 * VPN client root certificate of P2SVpnServerConfiguration.
 * @member {Array.<module:model/P2SVpnServerConfigVpnClientRootCertificate>} p2SVpnServerConfigVpnClientRootCertificates
 */
P2SVpnServerConfigurationProperties.prototype['p2SVpnServerConfigVpnClientRootCertificates'] = undefined;

/**
 * The provisioning state of the P2SVpnServerConfiguration resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
 * @member {String} provisioningState
 */
P2SVpnServerConfigurationProperties.prototype['provisioningState'] = undefined;

/**
 * The radius server address property of the P2SVpnServerConfiguration resource for point to site client connection.
 * @member {String} radiusServerAddress
 */
P2SVpnServerConfigurationProperties.prototype['radiusServerAddress'] = undefined;

/**
 * The radius secret property of the P2SVpnServerConfiguration resource for point to site client connection.
 * @member {String} radiusServerSecret
 */
P2SVpnServerConfigurationProperties.prototype['radiusServerSecret'] = undefined;

/**
 * VpnClientIpsecPolicies for P2SVpnServerConfiguration.
 * @member {Array.<module:model/P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner>} vpnClientIpsecPolicies
 */
P2SVpnServerConfigurationProperties.prototype['vpnClientIpsecPolicies'] = undefined;

/**
 * vpnProtocols for the P2SVpnServerConfiguration.
 * @member {Array.<module:model/P2SVpnServerConfigurationProperties.VpnProtocolsEnum>} vpnProtocols
 */
P2SVpnServerConfigurationProperties.prototype['vpnProtocols'] = undefined;





/**
 * Allowed values for the <code>vpnProtocols</code> property.
 * @enum {String}
 * @readonly
 */
P2SVpnServerConfigurationProperties['VpnProtocolsEnum'] = {

    /**
     * value: "IkeV2"
     * @const
     */
    "IkeV2": "IkeV2",

    /**
     * value: "OpenVPN"
     * @const
     */
    "OpenVPN": "OpenVPN"
};



export default P2SVpnServerConfigurationProperties;

