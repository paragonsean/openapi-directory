/*
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VpnClientConnectionHealth properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:59:46.819029-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VpnClientConnectionHealth {
  public static final String SERIALIZED_NAME_ALLOCATED_IP_ADDRESSES = "allocatedIpAddresses";
  @SerializedName(SERIALIZED_NAME_ALLOCATED_IP_ADDRESSES)
  private List<String> allocatedIpAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_EGRESS_BYTES_TRANSFERRED = "totalEgressBytesTransferred";
  @SerializedName(SERIALIZED_NAME_TOTAL_EGRESS_BYTES_TRANSFERRED)
  private Long totalEgressBytesTransferred;

  public static final String SERIALIZED_NAME_TOTAL_INGRESS_BYTES_TRANSFERRED = "totalIngressBytesTransferred";
  @SerializedName(SERIALIZED_NAME_TOTAL_INGRESS_BYTES_TRANSFERRED)
  private Long totalIngressBytesTransferred;

  public static final String SERIALIZED_NAME_VPN_CLIENT_CONNECTIONS_COUNT = "vpnClientConnectionsCount";
  @SerializedName(SERIALIZED_NAME_VPN_CLIENT_CONNECTIONS_COUNT)
  private Integer vpnClientConnectionsCount;

  public VpnClientConnectionHealth() {
  }

  public VpnClientConnectionHealth(
     Long totalEgressBytesTransferred, 
     Long totalIngressBytesTransferred
  ) {
    this();
    this.totalEgressBytesTransferred = totalEgressBytesTransferred;
    this.totalIngressBytesTransferred = totalIngressBytesTransferred;
  }

  public VpnClientConnectionHealth allocatedIpAddresses(List<String> allocatedIpAddresses) {
    this.allocatedIpAddresses = allocatedIpAddresses;
    return this;
  }

  public VpnClientConnectionHealth addAllocatedIpAddressesItem(String allocatedIpAddressesItem) {
    if (this.allocatedIpAddresses == null) {
      this.allocatedIpAddresses = new ArrayList<>();
    }
    this.allocatedIpAddresses.add(allocatedIpAddressesItem);
    return this;
  }

  /**
   * List of allocated ip addresses to the connected p2s vpn clients.
   * @return allocatedIpAddresses
   */
  @javax.annotation.Nullable
  public List<String> getAllocatedIpAddresses() {
    return allocatedIpAddresses;
  }

  public void setAllocatedIpAddresses(List<String> allocatedIpAddresses) {
    this.allocatedIpAddresses = allocatedIpAddresses;
  }


  /**
   * Total of the Egress Bytes Transferred in this connection
   * @return totalEgressBytesTransferred
   */
  @javax.annotation.Nullable
  public Long getTotalEgressBytesTransferred() {
    return totalEgressBytesTransferred;
  }



  /**
   * Total of the Ingress Bytes Transferred in this P2S Vpn connection
   * @return totalIngressBytesTransferred
   */
  @javax.annotation.Nullable
  public Long getTotalIngressBytesTransferred() {
    return totalIngressBytesTransferred;
  }



  public VpnClientConnectionHealth vpnClientConnectionsCount(Integer vpnClientConnectionsCount) {
    this.vpnClientConnectionsCount = vpnClientConnectionsCount;
    return this;
  }

  /**
   * The total of p2s vpn clients connected at this time to this P2SVpnGateway.
   * @return vpnClientConnectionsCount
   */
  @javax.annotation.Nullable
  public Integer getVpnClientConnectionsCount() {
    return vpnClientConnectionsCount;
  }

  public void setVpnClientConnectionsCount(Integer vpnClientConnectionsCount) {
    this.vpnClientConnectionsCount = vpnClientConnectionsCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VpnClientConnectionHealth vpnClientConnectionHealth = (VpnClientConnectionHealth) o;
    return Objects.equals(this.allocatedIpAddresses, vpnClientConnectionHealth.allocatedIpAddresses) &&
        Objects.equals(this.totalEgressBytesTransferred, vpnClientConnectionHealth.totalEgressBytesTransferred) &&
        Objects.equals(this.totalIngressBytesTransferred, vpnClientConnectionHealth.totalIngressBytesTransferred) &&
        Objects.equals(this.vpnClientConnectionsCount, vpnClientConnectionHealth.vpnClientConnectionsCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allocatedIpAddresses, totalEgressBytesTransferred, totalIngressBytesTransferred, vpnClientConnectionsCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VpnClientConnectionHealth {\n");
    sb.append("    allocatedIpAddresses: ").append(toIndentedString(allocatedIpAddresses)).append("\n");
    sb.append("    totalEgressBytesTransferred: ").append(toIndentedString(totalEgressBytesTransferred)).append("\n");
    sb.append("    totalIngressBytesTransferred: ").append(toIndentedString(totalIngressBytesTransferred)).append("\n");
    sb.append("    vpnClientConnectionsCount: ").append(toIndentedString(vpnClientConnectionsCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allocatedIpAddresses");
    openapiFields.add("totalEgressBytesTransferred");
    openapiFields.add("totalIngressBytesTransferred");
    openapiFields.add("vpnClientConnectionsCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VpnClientConnectionHealth
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VpnClientConnectionHealth.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VpnClientConnectionHealth is not found in the empty JSON string", VpnClientConnectionHealth.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VpnClientConnectionHealth.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VpnClientConnectionHealth` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allocatedIpAddresses") != null && !jsonObj.get("allocatedIpAddresses").isJsonNull() && !jsonObj.get("allocatedIpAddresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allocatedIpAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("allocatedIpAddresses").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VpnClientConnectionHealth.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VpnClientConnectionHealth' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VpnClientConnectionHealth> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VpnClientConnectionHealth.class));

       return (TypeAdapter<T>) new TypeAdapter<VpnClientConnectionHealth>() {
           @Override
           public void write(JsonWriter out, VpnClientConnectionHealth value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VpnClientConnectionHealth read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VpnClientConnectionHealth given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VpnClientConnectionHealth
   * @throws IOException if the JSON string is invalid with respect to VpnClientConnectionHealth
   */
  public static VpnClientConnectionHealth fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VpnClientConnectionHealth.class);
  }

  /**
   * Convert an instance of VpnClientConnectionHealth to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

