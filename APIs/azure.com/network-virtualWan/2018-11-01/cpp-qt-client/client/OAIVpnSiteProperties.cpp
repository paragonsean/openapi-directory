/**
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2018-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVpnSiteProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVpnSiteProperties::OAIVpnSiteProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVpnSiteProperties::OAIVpnSiteProperties() {
    this->initializeModel();
}

OAIVpnSiteProperties::~OAIVpnSiteProperties() {}

void OAIVpnSiteProperties::initializeModel() {

    m_address_space_isSet = false;
    m_address_space_isValid = false;

    m_bgp_properties_isSet = false;
    m_bgp_properties_isValid = false;

    m_device_properties_isSet = false;
    m_device_properties_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_is_security_site_isSet = false;
    m_is_security_site_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_site_key_isSet = false;
    m_site_key_isValid = false;

    m_virtual_wan_isSet = false;
    m_virtual_wan_isValid = false;
}

void OAIVpnSiteProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVpnSiteProperties::fromJsonObject(QJsonObject json) {

    m_address_space_isValid = ::OpenAPI::fromJsonValue(m_address_space, json[QString("addressSpace")]);
    m_address_space_isSet = !json[QString("addressSpace")].isNull() && m_address_space_isValid;

    m_bgp_properties_isValid = ::OpenAPI::fromJsonValue(m_bgp_properties, json[QString("bgpProperties")]);
    m_bgp_properties_isSet = !json[QString("bgpProperties")].isNull() && m_bgp_properties_isValid;

    m_device_properties_isValid = ::OpenAPI::fromJsonValue(m_device_properties, json[QString("deviceProperties")]);
    m_device_properties_isSet = !json[QString("deviceProperties")].isNull() && m_device_properties_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_is_security_site_isValid = ::OpenAPI::fromJsonValue(m_is_security_site, json[QString("isSecuritySite")]);
    m_is_security_site_isSet = !json[QString("isSecuritySite")].isNull() && m_is_security_site_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_site_key_isValid = ::OpenAPI::fromJsonValue(m_site_key, json[QString("siteKey")]);
    m_site_key_isSet = !json[QString("siteKey")].isNull() && m_site_key_isValid;

    m_virtual_wan_isValid = ::OpenAPI::fromJsonValue(m_virtual_wan, json[QString("virtualWan")]);
    m_virtual_wan_isSet = !json[QString("virtualWan")].isNull() && m_virtual_wan_isValid;
}

QString OAIVpnSiteProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVpnSiteProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_address_space.isSet()) {
        obj.insert(QString("addressSpace"), ::OpenAPI::toJsonValue(m_address_space));
    }
    if (m_bgp_properties.isSet()) {
        obj.insert(QString("bgpProperties"), ::OpenAPI::toJsonValue(m_bgp_properties));
    }
    if (m_device_properties.isSet()) {
        obj.insert(QString("deviceProperties"), ::OpenAPI::toJsonValue(m_device_properties));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_is_security_site_isSet) {
        obj.insert(QString("isSecuritySite"), ::OpenAPI::toJsonValue(m_is_security_site));
    }
    if (m_provisioning_state.isSet()) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_site_key_isSet) {
        obj.insert(QString("siteKey"), ::OpenAPI::toJsonValue(m_site_key));
    }
    if (m_virtual_wan.isSet()) {
        obj.insert(QString("virtualWan"), ::OpenAPI::toJsonValue(m_virtual_wan));
    }
    return obj;
}

OAIP2SVpnGatewayProperties_vpnClientAddressPool OAIVpnSiteProperties::getAddressSpace() const {
    return m_address_space;
}
void OAIVpnSiteProperties::setAddressSpace(const OAIP2SVpnGatewayProperties_vpnClientAddressPool &address_space) {
    m_address_space = address_space;
    m_address_space_isSet = true;
}

bool OAIVpnSiteProperties::is_address_space_Set() const{
    return m_address_space_isSet;
}

bool OAIVpnSiteProperties::is_address_space_Valid() const{
    return m_address_space_isValid;
}

OAIVpnGatewayProperties_bgpSettings OAIVpnSiteProperties::getBgpProperties() const {
    return m_bgp_properties;
}
void OAIVpnSiteProperties::setBgpProperties(const OAIVpnGatewayProperties_bgpSettings &bgp_properties) {
    m_bgp_properties = bgp_properties;
    m_bgp_properties_isSet = true;
}

bool OAIVpnSiteProperties::is_bgp_properties_Set() const{
    return m_bgp_properties_isSet;
}

bool OAIVpnSiteProperties::is_bgp_properties_Valid() const{
    return m_bgp_properties_isValid;
}

OAIDeviceProperties OAIVpnSiteProperties::getDeviceProperties() const {
    return m_device_properties;
}
void OAIVpnSiteProperties::setDeviceProperties(const OAIDeviceProperties &device_properties) {
    m_device_properties = device_properties;
    m_device_properties_isSet = true;
}

bool OAIVpnSiteProperties::is_device_properties_Set() const{
    return m_device_properties_isSet;
}

bool OAIVpnSiteProperties::is_device_properties_Valid() const{
    return m_device_properties_isValid;
}

QString OAIVpnSiteProperties::getIpAddress() const {
    return m_ip_address;
}
void OAIVpnSiteProperties::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIVpnSiteProperties::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIVpnSiteProperties::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

bool OAIVpnSiteProperties::isIsSecuritySite() const {
    return m_is_security_site;
}
void OAIVpnSiteProperties::setIsSecuritySite(const bool &is_security_site) {
    m_is_security_site = is_security_site;
    m_is_security_site_isSet = true;
}

bool OAIVpnSiteProperties::is_is_security_site_Set() const{
    return m_is_security_site_isSet;
}

bool OAIVpnSiteProperties::is_is_security_site_Valid() const{
    return m_is_security_site_isValid;
}

OAIProvisioningState OAIVpnSiteProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIVpnSiteProperties::setProvisioningState(const OAIProvisioningState &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIVpnSiteProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIVpnSiteProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIVpnSiteProperties::getSiteKey() const {
    return m_site_key;
}
void OAIVpnSiteProperties::setSiteKey(const QString &site_key) {
    m_site_key = site_key;
    m_site_key_isSet = true;
}

bool OAIVpnSiteProperties::is_site_key_Set() const{
    return m_site_key_isSet;
}

bool OAIVpnSiteProperties::is_site_key_Valid() const{
    return m_site_key_isValid;
}

OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork OAIVpnSiteProperties::getVirtualWan() const {
    return m_virtual_wan;
}
void OAIVpnSiteProperties::setVirtualWan(const OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork &virtual_wan) {
    m_virtual_wan = virtual_wan;
    m_virtual_wan_isSet = true;
}

bool OAIVpnSiteProperties::is_virtual_wan_Set() const{
    return m_virtual_wan_isSet;
}

bool OAIVpnSiteProperties::is_virtual_wan_Valid() const{
    return m_virtual_wan_isValid;
}

bool OAIVpnSiteProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_space.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bgp_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_security_site_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_wan.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVpnSiteProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
