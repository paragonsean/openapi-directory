/**
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2018-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIP2SVpnGatewayProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIP2SVpnGatewayProperties::OAIP2SVpnGatewayProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIP2SVpnGatewayProperties::OAIP2SVpnGatewayProperties() {
    this->initializeModel();
}

OAIP2SVpnGatewayProperties::~OAIP2SVpnGatewayProperties() {}

void OAIP2SVpnGatewayProperties::initializeModel() {

    m_p2_s_vpn_server_configuration_isSet = false;
    m_p2_s_vpn_server_configuration_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_virtual_hub_isSet = false;
    m_virtual_hub_isValid = false;

    m_vpn_client_address_pool_isSet = false;
    m_vpn_client_address_pool_isValid = false;

    m_vpn_client_connection_health_isSet = false;
    m_vpn_client_connection_health_isValid = false;

    m_vpn_gateway_scale_unit_isSet = false;
    m_vpn_gateway_scale_unit_isValid = false;
}

void OAIP2SVpnGatewayProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIP2SVpnGatewayProperties::fromJsonObject(QJsonObject json) {

    m_p2_s_vpn_server_configuration_isValid = ::OpenAPI::fromJsonValue(m_p2_s_vpn_server_configuration, json[QString("p2SVpnServerConfiguration")]);
    m_p2_s_vpn_server_configuration_isSet = !json[QString("p2SVpnServerConfiguration")].isNull() && m_p2_s_vpn_server_configuration_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_virtual_hub_isValid = ::OpenAPI::fromJsonValue(m_virtual_hub, json[QString("virtualHub")]);
    m_virtual_hub_isSet = !json[QString("virtualHub")].isNull() && m_virtual_hub_isValid;

    m_vpn_client_address_pool_isValid = ::OpenAPI::fromJsonValue(m_vpn_client_address_pool, json[QString("vpnClientAddressPool")]);
    m_vpn_client_address_pool_isSet = !json[QString("vpnClientAddressPool")].isNull() && m_vpn_client_address_pool_isValid;

    m_vpn_client_connection_health_isValid = ::OpenAPI::fromJsonValue(m_vpn_client_connection_health, json[QString("vpnClientConnectionHealth")]);
    m_vpn_client_connection_health_isSet = !json[QString("vpnClientConnectionHealth")].isNull() && m_vpn_client_connection_health_isValid;

    m_vpn_gateway_scale_unit_isValid = ::OpenAPI::fromJsonValue(m_vpn_gateway_scale_unit, json[QString("vpnGatewayScaleUnit")]);
    m_vpn_gateway_scale_unit_isSet = !json[QString("vpnGatewayScaleUnit")].isNull() && m_vpn_gateway_scale_unit_isValid;
}

QString OAIP2SVpnGatewayProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIP2SVpnGatewayProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_p2_s_vpn_server_configuration.isSet()) {
        obj.insert(QString("p2SVpnServerConfiguration"), ::OpenAPI::toJsonValue(m_p2_s_vpn_server_configuration));
    }
    if (m_provisioning_state.isSet()) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_virtual_hub.isSet()) {
        obj.insert(QString("virtualHub"), ::OpenAPI::toJsonValue(m_virtual_hub));
    }
    if (m_vpn_client_address_pool.isSet()) {
        obj.insert(QString("vpnClientAddressPool"), ::OpenAPI::toJsonValue(m_vpn_client_address_pool));
    }
    if (m_vpn_client_connection_health.isSet()) {
        obj.insert(QString("vpnClientConnectionHealth"), ::OpenAPI::toJsonValue(m_vpn_client_connection_health));
    }
    if (m_vpn_gateway_scale_unit_isSet) {
        obj.insert(QString("vpnGatewayScaleUnit"), ::OpenAPI::toJsonValue(m_vpn_gateway_scale_unit));
    }
    return obj;
}

OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork OAIP2SVpnGatewayProperties::getP2SVpnServerConfiguration() const {
    return m_p2_s_vpn_server_configuration;
}
void OAIP2SVpnGatewayProperties::setP2SVpnServerConfiguration(const OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork &p2_s_vpn_server_configuration) {
    m_p2_s_vpn_server_configuration = p2_s_vpn_server_configuration;
    m_p2_s_vpn_server_configuration_isSet = true;
}

bool OAIP2SVpnGatewayProperties::is_p2_s_vpn_server_configuration_Set() const{
    return m_p2_s_vpn_server_configuration_isSet;
}

bool OAIP2SVpnGatewayProperties::is_p2_s_vpn_server_configuration_Valid() const{
    return m_p2_s_vpn_server_configuration_isValid;
}

OAIProvisioningState OAIP2SVpnGatewayProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIP2SVpnGatewayProperties::setProvisioningState(const OAIProvisioningState &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIP2SVpnGatewayProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIP2SVpnGatewayProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork OAIP2SVpnGatewayProperties::getVirtualHub() const {
    return m_virtual_hub;
}
void OAIP2SVpnGatewayProperties::setVirtualHub(const OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork &virtual_hub) {
    m_virtual_hub = virtual_hub;
    m_virtual_hub_isSet = true;
}

bool OAIP2SVpnGatewayProperties::is_virtual_hub_Set() const{
    return m_virtual_hub_isSet;
}

bool OAIP2SVpnGatewayProperties::is_virtual_hub_Valid() const{
    return m_virtual_hub_isValid;
}

OAIP2SVpnGatewayProperties_vpnClientAddressPool OAIP2SVpnGatewayProperties::getVpnClientAddressPool() const {
    return m_vpn_client_address_pool;
}
void OAIP2SVpnGatewayProperties::setVpnClientAddressPool(const OAIP2SVpnGatewayProperties_vpnClientAddressPool &vpn_client_address_pool) {
    m_vpn_client_address_pool = vpn_client_address_pool;
    m_vpn_client_address_pool_isSet = true;
}

bool OAIP2SVpnGatewayProperties::is_vpn_client_address_pool_Set() const{
    return m_vpn_client_address_pool_isSet;
}

bool OAIP2SVpnGatewayProperties::is_vpn_client_address_pool_Valid() const{
    return m_vpn_client_address_pool_isValid;
}

OAIVpnClientConnectionHealth OAIP2SVpnGatewayProperties::getVpnClientConnectionHealth() const {
    return m_vpn_client_connection_health;
}
void OAIP2SVpnGatewayProperties::setVpnClientConnectionHealth(const OAIVpnClientConnectionHealth &vpn_client_connection_health) {
    m_vpn_client_connection_health = vpn_client_connection_health;
    m_vpn_client_connection_health_isSet = true;
}

bool OAIP2SVpnGatewayProperties::is_vpn_client_connection_health_Set() const{
    return m_vpn_client_connection_health_isSet;
}

bool OAIP2SVpnGatewayProperties::is_vpn_client_connection_health_Valid() const{
    return m_vpn_client_connection_health_isValid;
}

qint32 OAIP2SVpnGatewayProperties::getVpnGatewayScaleUnit() const {
    return m_vpn_gateway_scale_unit;
}
void OAIP2SVpnGatewayProperties::setVpnGatewayScaleUnit(const qint32 &vpn_gateway_scale_unit) {
    m_vpn_gateway_scale_unit = vpn_gateway_scale_unit;
    m_vpn_gateway_scale_unit_isSet = true;
}

bool OAIP2SVpnGatewayProperties::is_vpn_gateway_scale_unit_Set() const{
    return m_vpn_gateway_scale_unit_isSet;
}

bool OAIP2SVpnGatewayProperties::is_vpn_gateway_scale_unit_Valid() const{
    return m_vpn_gateway_scale_unit_isValid;
}

bool OAIP2SVpnGatewayProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_p2_s_vpn_server_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_hub.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_client_address_pool.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_client_connection_health.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_gateway_scale_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIP2SVpnGatewayProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
