# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Policies(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_branch_to_branch_traffic: bool=None, allow_vnet_to_vnet_traffic: bool=None):
        """Policies - a model defined in OpenAPI

        :param allow_branch_to_branch_traffic: The allow_branch_to_branch_traffic of this Policies.
        :param allow_vnet_to_vnet_traffic: The allow_vnet_to_vnet_traffic of this Policies.
        """
        self.openapi_types = {
            'allow_branch_to_branch_traffic': bool,
            'allow_vnet_to_vnet_traffic': bool
        }

        self.attribute_map = {
            'allow_branch_to_branch_traffic': 'allowBranchToBranchTraffic',
            'allow_vnet_to_vnet_traffic': 'allowVnetToVnetTraffic'
        }

        self._allow_branch_to_branch_traffic = allow_branch_to_branch_traffic
        self._allow_vnet_to_vnet_traffic = allow_vnet_to_vnet_traffic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Policies':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Policies of this Policies.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_branch_to_branch_traffic(self):
        """Gets the allow_branch_to_branch_traffic of this Policies.

        True if branch to branch traffic is allowed.

        :return: The allow_branch_to_branch_traffic of this Policies.
        :rtype: bool
        """
        return self._allow_branch_to_branch_traffic

    @allow_branch_to_branch_traffic.setter
    def allow_branch_to_branch_traffic(self, allow_branch_to_branch_traffic):
        """Sets the allow_branch_to_branch_traffic of this Policies.

        True if branch to branch traffic is allowed.

        :param allow_branch_to_branch_traffic: The allow_branch_to_branch_traffic of this Policies.
        :type allow_branch_to_branch_traffic: bool
        """

        self._allow_branch_to_branch_traffic = allow_branch_to_branch_traffic

    @property
    def allow_vnet_to_vnet_traffic(self):
        """Gets the allow_vnet_to_vnet_traffic of this Policies.

        True if Vnet to Vnet traffic is allowed.

        :return: The allow_vnet_to_vnet_traffic of this Policies.
        :rtype: bool
        """
        return self._allow_vnet_to_vnet_traffic

    @allow_vnet_to_vnet_traffic.setter
    def allow_vnet_to_vnet_traffic(self, allow_vnet_to_vnet_traffic):
        """Sets the allow_vnet_to_vnet_traffic of this Policies.

        True if Vnet to Vnet traffic is allowed.

        :param allow_vnet_to_vnet_traffic: The allow_vnet_to_vnet_traffic of this Policies.
        :type allow_vnet_to_vnet_traffic: bool
        """

        self._allow_vnet_to_vnet_traffic = allow_vnet_to_vnet_traffic
