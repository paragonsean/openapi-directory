# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_vpn_sites_configuration_request_vpn_sites_inner import GetVpnSitesConfigurationRequestVpnSitesInner
from openapi_server.models.provisioning_state import ProvisioningState
from openapi_server import util


class HubVirtualNetworkConnectionProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_hub_to_remote_vnet_transit: bool=None, allow_remote_vnet_to_use_hub_vnet_gateways: bool=None, provisioning_state: ProvisioningState=None, remote_virtual_network: GetVpnSitesConfigurationRequestVpnSitesInner=None):
        """HubVirtualNetworkConnectionProperties - a model defined in OpenAPI

        :param allow_hub_to_remote_vnet_transit: The allow_hub_to_remote_vnet_transit of this HubVirtualNetworkConnectionProperties.
        :param allow_remote_vnet_to_use_hub_vnet_gateways: The allow_remote_vnet_to_use_hub_vnet_gateways of this HubVirtualNetworkConnectionProperties.
        :param provisioning_state: The provisioning_state of this HubVirtualNetworkConnectionProperties.
        :param remote_virtual_network: The remote_virtual_network of this HubVirtualNetworkConnectionProperties.
        """
        self.openapi_types = {
            'allow_hub_to_remote_vnet_transit': bool,
            'allow_remote_vnet_to_use_hub_vnet_gateways': bool,
            'provisioning_state': ProvisioningState,
            'remote_virtual_network': GetVpnSitesConfigurationRequestVpnSitesInner
        }

        self.attribute_map = {
            'allow_hub_to_remote_vnet_transit': 'allowHubToRemoteVnetTransit',
            'allow_remote_vnet_to_use_hub_vnet_gateways': 'allowRemoteVnetToUseHubVnetGateways',
            'provisioning_state': 'provisioningState',
            'remote_virtual_network': 'remoteVirtualNetwork'
        }

        self._allow_hub_to_remote_vnet_transit = allow_hub_to_remote_vnet_transit
        self._allow_remote_vnet_to_use_hub_vnet_gateways = allow_remote_vnet_to_use_hub_vnet_gateways
        self._provisioning_state = provisioning_state
        self._remote_virtual_network = remote_virtual_network

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HubVirtualNetworkConnectionProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HubVirtualNetworkConnectionProperties of this HubVirtualNetworkConnectionProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_hub_to_remote_vnet_transit(self):
        """Gets the allow_hub_to_remote_vnet_transit of this HubVirtualNetworkConnectionProperties.

        VirtualHub to RemoteVnet transit to enabled or not.

        :return: The allow_hub_to_remote_vnet_transit of this HubVirtualNetworkConnectionProperties.
        :rtype: bool
        """
        return self._allow_hub_to_remote_vnet_transit

    @allow_hub_to_remote_vnet_transit.setter
    def allow_hub_to_remote_vnet_transit(self, allow_hub_to_remote_vnet_transit):
        """Sets the allow_hub_to_remote_vnet_transit of this HubVirtualNetworkConnectionProperties.

        VirtualHub to RemoteVnet transit to enabled or not.

        :param allow_hub_to_remote_vnet_transit: The allow_hub_to_remote_vnet_transit of this HubVirtualNetworkConnectionProperties.
        :type allow_hub_to_remote_vnet_transit: bool
        """

        self._allow_hub_to_remote_vnet_transit = allow_hub_to_remote_vnet_transit

    @property
    def allow_remote_vnet_to_use_hub_vnet_gateways(self):
        """Gets the allow_remote_vnet_to_use_hub_vnet_gateways of this HubVirtualNetworkConnectionProperties.

        Allow RemoteVnet to use Virtual Hub's gateways.

        :return: The allow_remote_vnet_to_use_hub_vnet_gateways of this HubVirtualNetworkConnectionProperties.
        :rtype: bool
        """
        return self._allow_remote_vnet_to_use_hub_vnet_gateways

    @allow_remote_vnet_to_use_hub_vnet_gateways.setter
    def allow_remote_vnet_to_use_hub_vnet_gateways(self, allow_remote_vnet_to_use_hub_vnet_gateways):
        """Sets the allow_remote_vnet_to_use_hub_vnet_gateways of this HubVirtualNetworkConnectionProperties.

        Allow RemoteVnet to use Virtual Hub's gateways.

        :param allow_remote_vnet_to_use_hub_vnet_gateways: The allow_remote_vnet_to_use_hub_vnet_gateways of this HubVirtualNetworkConnectionProperties.
        :type allow_remote_vnet_to_use_hub_vnet_gateways: bool
        """

        self._allow_remote_vnet_to_use_hub_vnet_gateways = allow_remote_vnet_to_use_hub_vnet_gateways

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this HubVirtualNetworkConnectionProperties.


        :return: The provisioning_state of this HubVirtualNetworkConnectionProperties.
        :rtype: ProvisioningState
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this HubVirtualNetworkConnectionProperties.


        :param provisioning_state: The provisioning_state of this HubVirtualNetworkConnectionProperties.
        :type provisioning_state: ProvisioningState
        """

        self._provisioning_state = provisioning_state

    @property
    def remote_virtual_network(self):
        """Gets the remote_virtual_network of this HubVirtualNetworkConnectionProperties.


        :return: The remote_virtual_network of this HubVirtualNetworkConnectionProperties.
        :rtype: GetVpnSitesConfigurationRequestVpnSitesInner
        """
        return self._remote_virtual_network

    @remote_virtual_network.setter
    def remote_virtual_network(self, remote_virtual_network):
        """Sets the remote_virtual_network of this HubVirtualNetworkConnectionProperties.


        :param remote_virtual_network: The remote_virtual_network of this HubVirtualNetworkConnectionProperties.
        :type remote_virtual_network: GetVpnSitesConfigurationRequestVpnSitesInner
        """

        self._remote_virtual_network = remote_virtual_network
