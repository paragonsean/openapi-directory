/**
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualHubProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualHubProperties::OAIVirtualHubProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualHubProperties::OAIVirtualHubProperties() {
    this->initializeModel();
}

OAIVirtualHubProperties::~OAIVirtualHubProperties() {}

void OAIVirtualHubProperties::initializeModel() {

    m_address_prefix_isSet = false;
    m_address_prefix_isValid = false;

    m_hub_virtual_network_connections_isSet = false;
    m_hub_virtual_network_connections_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_virtual_wan_isSet = false;
    m_virtual_wan_isValid = false;
}

void OAIVirtualHubProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualHubProperties::fromJsonObject(QJsonObject json) {

    m_address_prefix_isValid = ::OpenAPI::fromJsonValue(m_address_prefix, json[QString("addressPrefix")]);
    m_address_prefix_isSet = !json[QString("addressPrefix")].isNull() && m_address_prefix_isValid;

    m_hub_virtual_network_connections_isValid = ::OpenAPI::fromJsonValue(m_hub_virtual_network_connections, json[QString("hubVirtualNetworkConnections")]);
    m_hub_virtual_network_connections_isSet = !json[QString("hubVirtualNetworkConnections")].isNull() && m_hub_virtual_network_connections_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_virtual_wan_isValid = ::OpenAPI::fromJsonValue(m_virtual_wan, json[QString("virtualWan")]);
    m_virtual_wan_isSet = !json[QString("virtualWan")].isNull() && m_virtual_wan_isValid;
}

QString OAIVirtualHubProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualHubProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_address_prefix_isSet) {
        obj.insert(QString("addressPrefix"), ::OpenAPI::toJsonValue(m_address_prefix));
    }
    if (m_hub_virtual_network_connections.size() > 0) {
        obj.insert(QString("hubVirtualNetworkConnections"), ::OpenAPI::toJsonValue(m_hub_virtual_network_connections));
    }
    if (m_provisioning_state.isSet()) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_virtual_wan.isSet()) {
        obj.insert(QString("virtualWan"), ::OpenAPI::toJsonValue(m_virtual_wan));
    }
    return obj;
}

QString OAIVirtualHubProperties::getAddressPrefix() const {
    return m_address_prefix;
}
void OAIVirtualHubProperties::setAddressPrefix(const QString &address_prefix) {
    m_address_prefix = address_prefix;
    m_address_prefix_isSet = true;
}

bool OAIVirtualHubProperties::is_address_prefix_Set() const{
    return m_address_prefix_isSet;
}

bool OAIVirtualHubProperties::is_address_prefix_Valid() const{
    return m_address_prefix_isValid;
}

QList<OAIHubVirtualNetworkConnection> OAIVirtualHubProperties::getHubVirtualNetworkConnections() const {
    return m_hub_virtual_network_connections;
}
void OAIVirtualHubProperties::setHubVirtualNetworkConnections(const QList<OAIHubVirtualNetworkConnection> &hub_virtual_network_connections) {
    m_hub_virtual_network_connections = hub_virtual_network_connections;
    m_hub_virtual_network_connections_isSet = true;
}

bool OAIVirtualHubProperties::is_hub_virtual_network_connections_Set() const{
    return m_hub_virtual_network_connections_isSet;
}

bool OAIVirtualHubProperties::is_hub_virtual_network_connections_Valid() const{
    return m_hub_virtual_network_connections_isValid;
}

OAIProvisioningState OAIVirtualHubProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIVirtualHubProperties::setProvisioningState(const OAIProvisioningState &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIVirtualHubProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIVirtualHubProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIGetVpnSitesConfigurationRequest_vpnSites_inner OAIVirtualHubProperties::getVirtualWan() const {
    return m_virtual_wan;
}
void OAIVirtualHubProperties::setVirtualWan(const OAIGetVpnSitesConfigurationRequest_vpnSites_inner &virtual_wan) {
    m_virtual_wan = virtual_wan;
    m_virtual_wan_isSet = true;
}

bool OAIVirtualHubProperties::is_virtual_wan_Set() const{
    return m_virtual_wan_isSet;
}

bool OAIVirtualHubProperties::is_virtual_wan_Valid() const{
    return m_virtual_wan_isValid;
}

bool OAIVirtualHubProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hub_virtual_network_connections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_wan.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualHubProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
