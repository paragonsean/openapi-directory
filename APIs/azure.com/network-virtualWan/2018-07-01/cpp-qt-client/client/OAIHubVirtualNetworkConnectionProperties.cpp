/**
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHubVirtualNetworkConnectionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHubVirtualNetworkConnectionProperties::OAIHubVirtualNetworkConnectionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHubVirtualNetworkConnectionProperties::OAIHubVirtualNetworkConnectionProperties() {
    this->initializeModel();
}

OAIHubVirtualNetworkConnectionProperties::~OAIHubVirtualNetworkConnectionProperties() {}

void OAIHubVirtualNetworkConnectionProperties::initializeModel() {

    m_allow_hub_to_remote_vnet_transit_isSet = false;
    m_allow_hub_to_remote_vnet_transit_isValid = false;

    m_allow_remote_vnet_to_use_hub_vnet_gateways_isSet = false;
    m_allow_remote_vnet_to_use_hub_vnet_gateways_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_remote_virtual_network_isSet = false;
    m_remote_virtual_network_isValid = false;
}

void OAIHubVirtualNetworkConnectionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHubVirtualNetworkConnectionProperties::fromJsonObject(QJsonObject json) {

    m_allow_hub_to_remote_vnet_transit_isValid = ::OpenAPI::fromJsonValue(m_allow_hub_to_remote_vnet_transit, json[QString("allowHubToRemoteVnetTransit")]);
    m_allow_hub_to_remote_vnet_transit_isSet = !json[QString("allowHubToRemoteVnetTransit")].isNull() && m_allow_hub_to_remote_vnet_transit_isValid;

    m_allow_remote_vnet_to_use_hub_vnet_gateways_isValid = ::OpenAPI::fromJsonValue(m_allow_remote_vnet_to_use_hub_vnet_gateways, json[QString("allowRemoteVnetToUseHubVnetGateways")]);
    m_allow_remote_vnet_to_use_hub_vnet_gateways_isSet = !json[QString("allowRemoteVnetToUseHubVnetGateways")].isNull() && m_allow_remote_vnet_to_use_hub_vnet_gateways_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_remote_virtual_network_isValid = ::OpenAPI::fromJsonValue(m_remote_virtual_network, json[QString("remoteVirtualNetwork")]);
    m_remote_virtual_network_isSet = !json[QString("remoteVirtualNetwork")].isNull() && m_remote_virtual_network_isValid;
}

QString OAIHubVirtualNetworkConnectionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHubVirtualNetworkConnectionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_hub_to_remote_vnet_transit_isSet) {
        obj.insert(QString("allowHubToRemoteVnetTransit"), ::OpenAPI::toJsonValue(m_allow_hub_to_remote_vnet_transit));
    }
    if (m_allow_remote_vnet_to_use_hub_vnet_gateways_isSet) {
        obj.insert(QString("allowRemoteVnetToUseHubVnetGateways"), ::OpenAPI::toJsonValue(m_allow_remote_vnet_to_use_hub_vnet_gateways));
    }
    if (m_provisioning_state.isSet()) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_remote_virtual_network.isSet()) {
        obj.insert(QString("remoteVirtualNetwork"), ::OpenAPI::toJsonValue(m_remote_virtual_network));
    }
    return obj;
}

bool OAIHubVirtualNetworkConnectionProperties::isAllowHubToRemoteVnetTransit() const {
    return m_allow_hub_to_remote_vnet_transit;
}
void OAIHubVirtualNetworkConnectionProperties::setAllowHubToRemoteVnetTransit(const bool &allow_hub_to_remote_vnet_transit) {
    m_allow_hub_to_remote_vnet_transit = allow_hub_to_remote_vnet_transit;
    m_allow_hub_to_remote_vnet_transit_isSet = true;
}

bool OAIHubVirtualNetworkConnectionProperties::is_allow_hub_to_remote_vnet_transit_Set() const{
    return m_allow_hub_to_remote_vnet_transit_isSet;
}

bool OAIHubVirtualNetworkConnectionProperties::is_allow_hub_to_remote_vnet_transit_Valid() const{
    return m_allow_hub_to_remote_vnet_transit_isValid;
}

bool OAIHubVirtualNetworkConnectionProperties::isAllowRemoteVnetToUseHubVnetGateways() const {
    return m_allow_remote_vnet_to_use_hub_vnet_gateways;
}
void OAIHubVirtualNetworkConnectionProperties::setAllowRemoteVnetToUseHubVnetGateways(const bool &allow_remote_vnet_to_use_hub_vnet_gateways) {
    m_allow_remote_vnet_to_use_hub_vnet_gateways = allow_remote_vnet_to_use_hub_vnet_gateways;
    m_allow_remote_vnet_to_use_hub_vnet_gateways_isSet = true;
}

bool OAIHubVirtualNetworkConnectionProperties::is_allow_remote_vnet_to_use_hub_vnet_gateways_Set() const{
    return m_allow_remote_vnet_to_use_hub_vnet_gateways_isSet;
}

bool OAIHubVirtualNetworkConnectionProperties::is_allow_remote_vnet_to_use_hub_vnet_gateways_Valid() const{
    return m_allow_remote_vnet_to_use_hub_vnet_gateways_isValid;
}

OAIProvisioningState OAIHubVirtualNetworkConnectionProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIHubVirtualNetworkConnectionProperties::setProvisioningState(const OAIProvisioningState &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIHubVirtualNetworkConnectionProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIHubVirtualNetworkConnectionProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIGetVpnSitesConfigurationRequest_vpnSites_inner OAIHubVirtualNetworkConnectionProperties::getRemoteVirtualNetwork() const {
    return m_remote_virtual_network;
}
void OAIHubVirtualNetworkConnectionProperties::setRemoteVirtualNetwork(const OAIGetVpnSitesConfigurationRequest_vpnSites_inner &remote_virtual_network) {
    m_remote_virtual_network = remote_virtual_network;
    m_remote_virtual_network_isSet = true;
}

bool OAIHubVirtualNetworkConnectionProperties::is_remote_virtual_network_Set() const{
    return m_remote_virtual_network_isSet;
}

bool OAIHubVirtualNetworkConnectionProperties::is_remote_virtual_network_Valid() const{
    return m_remote_virtual_network_isValid;
}

bool OAIHubVirtualNetworkConnectionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_hub_to_remote_vnet_transit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_remote_vnet_to_use_hub_vnet_gateways_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_virtual_network.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHubVirtualNetworkConnectionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
