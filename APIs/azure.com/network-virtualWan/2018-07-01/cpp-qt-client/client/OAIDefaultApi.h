/**
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetVpnSitesConfigurationRequest.h"
#include "OAIHubVirtualNetworkConnection.h"
#include "OAIListHubVirtualNetworkConnectionsResult.h"
#include "OAIListVirtualHubsResult.h"
#include "OAIListVirtualWANsResult.h"
#include "OAIListVpnConnectionsResult.h"
#include "OAIListVpnGatewaysResult.h"
#include "OAIListVpnSitesResult.h"
#include "OAIVirtualHub.h"
#include "OAIVirtualHubs_List_default_response.h"
#include "OAIVirtualWAN.h"
#include "OAIVpnConnection.h"
#include "OAIVpnGateway.h"
#include "OAIVpnSite.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_hub_name QString [required]
    * @param[in]  connection_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hubVirtualNetworkConnectionsGet(const QString &subscription_id, const QString &resource_group_name, const QString &virtual_hub_name, const QString &connection_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_hub_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hubVirtualNetworkConnectionsList(const QString &subscription_id, const QString &resource_group_name, const QString &virtual_hub_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_hub_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  virtual_hub_parameters OAIVirtualHub [required]
    */
    virtual void virtualHubsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &virtual_hub_name, const QString &api_version, const OAIVirtualHub &virtual_hub_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_hub_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualHubsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &virtual_hub_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_hub_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualHubsGet(const QString &subscription_id, const QString &resource_group_name, const QString &virtual_hub_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualHubsList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualHubsListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_wan_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  wan_parameters OAIVirtualWAN [required]
    */
    virtual void virtualWANsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &virtual_wan_name, const QString &api_version, const OAIVirtualWAN &wan_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_wan_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualWANsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &virtual_wan_name, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_wan_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualWANsGet(const QString &resource_group_name, const QString &virtual_wan_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualWANsList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualWANsListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  gateway_name QString [required]
    * @param[in]  connection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  vpn_connection_parameters OAIVpnConnection [required]
    */
    virtual void vpnConnectionsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &gateway_name, const QString &connection_name, const QString &api_version, const OAIVpnConnection &vpn_connection_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  gateway_name QString [required]
    * @param[in]  connection_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void vpnConnectionsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &gateway_name, const QString &connection_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  gateway_name QString [required]
    * @param[in]  connection_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void vpnConnectionsGet(const QString &subscription_id, const QString &resource_group_name, const QString &gateway_name, const QString &connection_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  gateway_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void vpnConnectionsListByVpnGateway(const QString &subscription_id, const QString &resource_group_name, const QString &gateway_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  vpn_gateway_parameters OAIVpnGateway [required]
    */
    virtual void vpnGatewaysCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &gateway_name, const QString &api_version, const OAIVpnGateway &vpn_gateway_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  gateway_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void vpnGatewaysDelete(const QString &subscription_id, const QString &resource_group_name, const QString &gateway_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  gateway_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void vpnGatewaysGet(const QString &subscription_id, const QString &resource_group_name, const QString &gateway_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void vpnGatewaysList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void vpnGatewaysListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_wan_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAIGetVpnSitesConfigurationRequest [required]
    */
    virtual void vpnSitesConfigurationDownload(const QString &subscription_id, const QString &resource_group_name, const QString &virtual_wan_name, const QString &api_version, const OAIGetVpnSitesConfigurationRequest &request);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vpn_site_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  vpn_site_parameters OAIVpnSite [required]
    */
    virtual void vpnSitesCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &vpn_site_name, const QString &api_version, const OAIVpnSite &vpn_site_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vpn_site_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void vpnSitesDelete(const QString &subscription_id, const QString &resource_group_name, const QString &vpn_site_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vpn_site_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void vpnSitesGet(const QString &subscription_id, const QString &resource_group_name, const QString &vpn_site_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void vpnSitesList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void vpnSitesListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void hubVirtualNetworkConnectionsGetCallback(OAIHttpRequestWorker *worker);
    void hubVirtualNetworkConnectionsListCallback(OAIHttpRequestWorker *worker);
    void virtualHubsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualHubsDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualHubsGetCallback(OAIHttpRequestWorker *worker);
    void virtualHubsListCallback(OAIHttpRequestWorker *worker);
    void virtualHubsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void virtualWANsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualWANsDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualWANsGetCallback(OAIHttpRequestWorker *worker);
    void virtualWANsListCallback(OAIHttpRequestWorker *worker);
    void virtualWANsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void vpnConnectionsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void vpnConnectionsDeleteCallback(OAIHttpRequestWorker *worker);
    void vpnConnectionsGetCallback(OAIHttpRequestWorker *worker);
    void vpnConnectionsListByVpnGatewayCallback(OAIHttpRequestWorker *worker);
    void vpnGatewaysCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void vpnGatewaysDeleteCallback(OAIHttpRequestWorker *worker);
    void vpnGatewaysGetCallback(OAIHttpRequestWorker *worker);
    void vpnGatewaysListCallback(OAIHttpRequestWorker *worker);
    void vpnGatewaysListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void vpnSitesConfigurationDownloadCallback(OAIHttpRequestWorker *worker);
    void vpnSitesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void vpnSitesDeleteCallback(OAIHttpRequestWorker *worker);
    void vpnSitesGetCallback(OAIHttpRequestWorker *worker);
    void vpnSitesListCallback(OAIHttpRequestWorker *worker);
    void vpnSitesListByResourceGroupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void hubVirtualNetworkConnectionsGetSignal(OAIHubVirtualNetworkConnection summary);
    void hubVirtualNetworkConnectionsListSignal(OAIListHubVirtualNetworkConnectionsResult summary);
    void virtualHubsCreateOrUpdateSignal(OAIVirtualHub summary);
    void virtualHubsDeleteSignal();
    void virtualHubsGetSignal(OAIVirtualHub summary);
    void virtualHubsListSignal(OAIListVirtualHubsResult summary);
    void virtualHubsListByResourceGroupSignal(OAIListVirtualHubsResult summary);
    void virtualWANsCreateOrUpdateSignal(OAIVirtualWAN summary);
    void virtualWANsDeleteSignal();
    void virtualWANsGetSignal(OAIVirtualWAN summary);
    void virtualWANsListSignal(OAIListVirtualWANsResult summary);
    void virtualWANsListByResourceGroupSignal(OAIListVirtualWANsResult summary);
    void vpnConnectionsCreateOrUpdateSignal(OAIVpnConnection summary);
    void vpnConnectionsDeleteSignal();
    void vpnConnectionsGetSignal(OAIVpnConnection summary);
    void vpnConnectionsListByVpnGatewaySignal(OAIListVpnConnectionsResult summary);
    void vpnGatewaysCreateOrUpdateSignal(OAIVpnGateway summary);
    void vpnGatewaysDeleteSignal();
    void vpnGatewaysGetSignal(OAIVpnGateway summary);
    void vpnGatewaysListSignal(OAIListVpnGatewaysResult summary);
    void vpnGatewaysListByResourceGroupSignal(OAIListVpnGatewaysResult summary);
    void vpnSitesConfigurationDownloadSignal();
    void vpnSitesCreateOrUpdateSignal(OAIVpnSite summary);
    void vpnSitesDeleteSignal();
    void vpnSitesGetSignal(OAIVpnSite summary);
    void vpnSitesListSignal(OAIListVpnSitesResult summary);
    void vpnSitesListByResourceGroupSignal(OAIListVpnSitesResult summary);


    void hubVirtualNetworkConnectionsGetSignalFull(OAIHttpRequestWorker *worker, OAIHubVirtualNetworkConnection summary);
    void hubVirtualNetworkConnectionsListSignalFull(OAIHttpRequestWorker *worker, OAIListHubVirtualNetworkConnectionsResult summary);
    void virtualHubsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualHub summary);
    void virtualHubsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualHubsGetSignalFull(OAIHttpRequestWorker *worker, OAIVirtualHub summary);
    void virtualHubsListSignalFull(OAIHttpRequestWorker *worker, OAIListVirtualHubsResult summary);
    void virtualHubsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIListVirtualHubsResult summary);
    void virtualWANsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualWAN summary);
    void virtualWANsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualWANsGetSignalFull(OAIHttpRequestWorker *worker, OAIVirtualWAN summary);
    void virtualWANsListSignalFull(OAIHttpRequestWorker *worker, OAIListVirtualWANsResult summary);
    void virtualWANsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIListVirtualWANsResult summary);
    void vpnConnectionsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVpnConnection summary);
    void vpnConnectionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void vpnConnectionsGetSignalFull(OAIHttpRequestWorker *worker, OAIVpnConnection summary);
    void vpnConnectionsListByVpnGatewaySignalFull(OAIHttpRequestWorker *worker, OAIListVpnConnectionsResult summary);
    void vpnGatewaysCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVpnGateway summary);
    void vpnGatewaysDeleteSignalFull(OAIHttpRequestWorker *worker);
    void vpnGatewaysGetSignalFull(OAIHttpRequestWorker *worker, OAIVpnGateway summary);
    void vpnGatewaysListSignalFull(OAIHttpRequestWorker *worker, OAIListVpnGatewaysResult summary);
    void vpnGatewaysListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIListVpnGatewaysResult summary);
    void vpnSitesConfigurationDownloadSignalFull(OAIHttpRequestWorker *worker);
    void vpnSitesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVpnSite summary);
    void vpnSitesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void vpnSitesGetSignalFull(OAIHttpRequestWorker *worker, OAIVpnSite summary);
    void vpnSitesListSignalFull(OAIHttpRequestWorker *worker, OAIListVpnSitesResult summary);
    void vpnSitesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIListVpnSitesResult summary);

    Q_DECL_DEPRECATED_X("Use hubVirtualNetworkConnectionsGetSignalError() instead")
    void hubVirtualNetworkConnectionsGetSignalE(OAIHubVirtualNetworkConnection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hubVirtualNetworkConnectionsGetSignalError(OAIHubVirtualNetworkConnection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hubVirtualNetworkConnectionsListSignalError() instead")
    void hubVirtualNetworkConnectionsListSignalE(OAIListHubVirtualNetworkConnectionsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hubVirtualNetworkConnectionsListSignalError(OAIListHubVirtualNetworkConnectionsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualHubsCreateOrUpdateSignalError() instead")
    void virtualHubsCreateOrUpdateSignalE(OAIVirtualHub summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualHubsCreateOrUpdateSignalError(OAIVirtualHub summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualHubsDeleteSignalError() instead")
    void virtualHubsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualHubsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualHubsGetSignalError() instead")
    void virtualHubsGetSignalE(OAIVirtualHub summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualHubsGetSignalError(OAIVirtualHub summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualHubsListSignalError() instead")
    void virtualHubsListSignalE(OAIListVirtualHubsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualHubsListSignalError(OAIListVirtualHubsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualHubsListByResourceGroupSignalError() instead")
    void virtualHubsListByResourceGroupSignalE(OAIListVirtualHubsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualHubsListByResourceGroupSignalError(OAIListVirtualHubsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualWANsCreateOrUpdateSignalError() instead")
    void virtualWANsCreateOrUpdateSignalE(OAIVirtualWAN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualWANsCreateOrUpdateSignalError(OAIVirtualWAN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualWANsDeleteSignalError() instead")
    void virtualWANsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualWANsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualWANsGetSignalError() instead")
    void virtualWANsGetSignalE(OAIVirtualWAN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualWANsGetSignalError(OAIVirtualWAN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualWANsListSignalError() instead")
    void virtualWANsListSignalE(OAIListVirtualWANsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualWANsListSignalError(OAIListVirtualWANsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualWANsListByResourceGroupSignalError() instead")
    void virtualWANsListByResourceGroupSignalE(OAIListVirtualWANsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualWANsListByResourceGroupSignalError(OAIListVirtualWANsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnConnectionsCreateOrUpdateSignalError() instead")
    void vpnConnectionsCreateOrUpdateSignalE(OAIVpnConnection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vpnConnectionsCreateOrUpdateSignalError(OAIVpnConnection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnConnectionsDeleteSignalError() instead")
    void vpnConnectionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vpnConnectionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnConnectionsGetSignalError() instead")
    void vpnConnectionsGetSignalE(OAIVpnConnection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vpnConnectionsGetSignalError(OAIVpnConnection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnConnectionsListByVpnGatewaySignalError() instead")
    void vpnConnectionsListByVpnGatewaySignalE(OAIListVpnConnectionsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vpnConnectionsListByVpnGatewaySignalError(OAIListVpnConnectionsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnGatewaysCreateOrUpdateSignalError() instead")
    void vpnGatewaysCreateOrUpdateSignalE(OAIVpnGateway summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vpnGatewaysCreateOrUpdateSignalError(OAIVpnGateway summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnGatewaysDeleteSignalError() instead")
    void vpnGatewaysDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vpnGatewaysDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnGatewaysGetSignalError() instead")
    void vpnGatewaysGetSignalE(OAIVpnGateway summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vpnGatewaysGetSignalError(OAIVpnGateway summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnGatewaysListSignalError() instead")
    void vpnGatewaysListSignalE(OAIListVpnGatewaysResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vpnGatewaysListSignalError(OAIListVpnGatewaysResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnGatewaysListByResourceGroupSignalError() instead")
    void vpnGatewaysListByResourceGroupSignalE(OAIListVpnGatewaysResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vpnGatewaysListByResourceGroupSignalError(OAIListVpnGatewaysResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnSitesConfigurationDownloadSignalError() instead")
    void vpnSitesConfigurationDownloadSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vpnSitesConfigurationDownloadSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnSitesCreateOrUpdateSignalError() instead")
    void vpnSitesCreateOrUpdateSignalE(OAIVpnSite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vpnSitesCreateOrUpdateSignalError(OAIVpnSite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnSitesDeleteSignalError() instead")
    void vpnSitesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vpnSitesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnSitesGetSignalError() instead")
    void vpnSitesGetSignalE(OAIVpnSite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vpnSitesGetSignalError(OAIVpnSite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnSitesListSignalError() instead")
    void vpnSitesListSignalE(OAIListVpnSitesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vpnSitesListSignalError(OAIListVpnSitesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnSitesListByResourceGroupSignalError() instead")
    void vpnSitesListByResourceGroupSignalE(OAIListVpnSitesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vpnSitesListByResourceGroupSignalError(OAIListVpnSitesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use hubVirtualNetworkConnectionsGetSignalErrorFull() instead")
    void hubVirtualNetworkConnectionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hubVirtualNetworkConnectionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hubVirtualNetworkConnectionsListSignalErrorFull() instead")
    void hubVirtualNetworkConnectionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hubVirtualNetworkConnectionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualHubsCreateOrUpdateSignalErrorFull() instead")
    void virtualHubsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualHubsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualHubsDeleteSignalErrorFull() instead")
    void virtualHubsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualHubsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualHubsGetSignalErrorFull() instead")
    void virtualHubsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualHubsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualHubsListSignalErrorFull() instead")
    void virtualHubsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualHubsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualHubsListByResourceGroupSignalErrorFull() instead")
    void virtualHubsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualHubsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualWANsCreateOrUpdateSignalErrorFull() instead")
    void virtualWANsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualWANsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualWANsDeleteSignalErrorFull() instead")
    void virtualWANsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualWANsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualWANsGetSignalErrorFull() instead")
    void virtualWANsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualWANsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualWANsListSignalErrorFull() instead")
    void virtualWANsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualWANsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualWANsListByResourceGroupSignalErrorFull() instead")
    void virtualWANsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualWANsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnConnectionsCreateOrUpdateSignalErrorFull() instead")
    void vpnConnectionsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vpnConnectionsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnConnectionsDeleteSignalErrorFull() instead")
    void vpnConnectionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vpnConnectionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnConnectionsGetSignalErrorFull() instead")
    void vpnConnectionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vpnConnectionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnConnectionsListByVpnGatewaySignalErrorFull() instead")
    void vpnConnectionsListByVpnGatewaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vpnConnectionsListByVpnGatewaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnGatewaysCreateOrUpdateSignalErrorFull() instead")
    void vpnGatewaysCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vpnGatewaysCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnGatewaysDeleteSignalErrorFull() instead")
    void vpnGatewaysDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vpnGatewaysDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnGatewaysGetSignalErrorFull() instead")
    void vpnGatewaysGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vpnGatewaysGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnGatewaysListSignalErrorFull() instead")
    void vpnGatewaysListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vpnGatewaysListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnGatewaysListByResourceGroupSignalErrorFull() instead")
    void vpnGatewaysListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vpnGatewaysListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnSitesConfigurationDownloadSignalErrorFull() instead")
    void vpnSitesConfigurationDownloadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vpnSitesConfigurationDownloadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnSitesCreateOrUpdateSignalErrorFull() instead")
    void vpnSitesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vpnSitesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnSitesDeleteSignalErrorFull() instead")
    void vpnSitesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vpnSitesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnSitesGetSignalErrorFull() instead")
    void vpnSitesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vpnSitesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnSitesListSignalErrorFull() instead")
    void vpnSitesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vpnSitesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vpnSitesListByResourceGroupSignalErrorFull() instead")
    void vpnSitesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vpnSitesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
