/**
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetVpnSitesConfigurationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetVpnSitesConfigurationRequest::OAIGetVpnSitesConfigurationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetVpnSitesConfigurationRequest::OAIGetVpnSitesConfigurationRequest() {
    this->initializeModel();
}

OAIGetVpnSitesConfigurationRequest::~OAIGetVpnSitesConfigurationRequest() {}

void OAIGetVpnSitesConfigurationRequest::initializeModel() {

    m_output_blob_sas_url_isSet = false;
    m_output_blob_sas_url_isValid = false;

    m_vpn_sites_isSet = false;
    m_vpn_sites_isValid = false;
}

void OAIGetVpnSitesConfigurationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetVpnSitesConfigurationRequest::fromJsonObject(QJsonObject json) {

    m_output_blob_sas_url_isValid = ::OpenAPI::fromJsonValue(m_output_blob_sas_url, json[QString("outputBlobSasUrl")]);
    m_output_blob_sas_url_isSet = !json[QString("outputBlobSasUrl")].isNull() && m_output_blob_sas_url_isValid;

    m_vpn_sites_isValid = ::OpenAPI::fromJsonValue(m_vpn_sites, json[QString("vpnSites")]);
    m_vpn_sites_isSet = !json[QString("vpnSites")].isNull() && m_vpn_sites_isValid;
}

QString OAIGetVpnSitesConfigurationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetVpnSitesConfigurationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_output_blob_sas_url_isSet) {
        obj.insert(QString("outputBlobSasUrl"), ::OpenAPI::toJsonValue(m_output_blob_sas_url));
    }
    if (m_vpn_sites.size() > 0) {
        obj.insert(QString("vpnSites"), ::OpenAPI::toJsonValue(m_vpn_sites));
    }
    return obj;
}

QString OAIGetVpnSitesConfigurationRequest::getOutputBlobSasUrl() const {
    return m_output_blob_sas_url;
}
void OAIGetVpnSitesConfigurationRequest::setOutputBlobSasUrl(const QString &output_blob_sas_url) {
    m_output_blob_sas_url = output_blob_sas_url;
    m_output_blob_sas_url_isSet = true;
}

bool OAIGetVpnSitesConfigurationRequest::is_output_blob_sas_url_Set() const{
    return m_output_blob_sas_url_isSet;
}

bool OAIGetVpnSitesConfigurationRequest::is_output_blob_sas_url_Valid() const{
    return m_output_blob_sas_url_isValid;
}

QList<OAIGetVpnSitesConfigurationRequest_vpnSites_inner> OAIGetVpnSitesConfigurationRequest::getVpnSites() const {
    return m_vpn_sites;
}
void OAIGetVpnSitesConfigurationRequest::setVpnSites(const QList<OAIGetVpnSitesConfigurationRequest_vpnSites_inner> &vpn_sites) {
    m_vpn_sites = vpn_sites;
    m_vpn_sites_isSet = true;
}

bool OAIGetVpnSitesConfigurationRequest::is_vpn_sites_Set() const{
    return m_vpn_sites_isSet;
}

bool OAIGetVpnSitesConfigurationRequest::is_vpn_sites_Valid() const{
    return m_vpn_sites_isValid;
}

bool OAIGetVpnSitesConfigurationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_output_blob_sas_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_sites.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetVpnSitesConfigurationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
