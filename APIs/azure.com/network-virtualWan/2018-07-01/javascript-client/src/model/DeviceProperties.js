/**
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeviceProperties model module.
 * @module model/DeviceProperties
 * @version 2018-07-01
 */
class DeviceProperties {
    /**
     * Constructs a new <code>DeviceProperties</code>.
     * List of properties of the device.
     * @alias module:model/DeviceProperties
     */
    constructor() { 
        
        DeviceProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceProperties} obj Optional instance to populate.
     * @return {module:model/DeviceProperties} The populated <code>DeviceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceProperties();

            if (data.hasOwnProperty('deviceModel')) {
                obj['deviceModel'] = ApiClient.convertToType(data['deviceModel'], 'String');
            }
            if (data.hasOwnProperty('deviceVendor')) {
                obj['deviceVendor'] = ApiClient.convertToType(data['deviceVendor'], 'String');
            }
            if (data.hasOwnProperty('linkSpeedInMbps')) {
                obj['linkSpeedInMbps'] = ApiClient.convertToType(data['linkSpeedInMbps'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['deviceModel'] && !(typeof data['deviceModel'] === 'string' || data['deviceModel'] instanceof String)) {
            throw new Error("Expected the field `deviceModel` to be a primitive type in the JSON string but got " + data['deviceModel']);
        }
        // ensure the json data is a string
        if (data['deviceVendor'] && !(typeof data['deviceVendor'] === 'string' || data['deviceVendor'] instanceof String)) {
            throw new Error("Expected the field `deviceVendor` to be a primitive type in the JSON string but got " + data['deviceVendor']);
        }

        return true;
    }


}



/**
 * Model of the device.
 * @member {String} deviceModel
 */
DeviceProperties.prototype['deviceModel'] = undefined;

/**
 * Name of the device Vendor.
 * @member {String} deviceVendor
 */
DeviceProperties.prototype['deviceVendor'] = undefined;

/**
 * Link speed.
 * @member {Number} linkSpeedInMbps
 */
DeviceProperties.prototype['linkSpeedInMbps'] = undefined;






export default DeviceProperties;

