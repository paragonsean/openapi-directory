/**
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2018-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.VirtualWanasAServiceManagementClient);
  }
}(this, function(expect, VirtualWanasAServiceManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new VirtualWanasAServiceManagementClient.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('hubVirtualNetworkConnectionsGet', function() {
      it('should call hubVirtualNetworkConnectionsGet successfully', function(done) {
        //uncomment below and update the code to test hubVirtualNetworkConnectionsGet
        //instance.hubVirtualNetworkConnectionsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('hubVirtualNetworkConnectionsList', function() {
      it('should call hubVirtualNetworkConnectionsList successfully', function(done) {
        //uncomment below and update the code to test hubVirtualNetworkConnectionsList
        //instance.hubVirtualNetworkConnectionsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualHubsCreateOrUpdate', function() {
      it('should call virtualHubsCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test virtualHubsCreateOrUpdate
        //instance.virtualHubsCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualHubsDelete', function() {
      it('should call virtualHubsDelete successfully', function(done) {
        //uncomment below and update the code to test virtualHubsDelete
        //instance.virtualHubsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualHubsGet', function() {
      it('should call virtualHubsGet successfully', function(done) {
        //uncomment below and update the code to test virtualHubsGet
        //instance.virtualHubsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualHubsList', function() {
      it('should call virtualHubsList successfully', function(done) {
        //uncomment below and update the code to test virtualHubsList
        //instance.virtualHubsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualHubsListByResourceGroup', function() {
      it('should call virtualHubsListByResourceGroup successfully', function(done) {
        //uncomment below and update the code to test virtualHubsListByResourceGroup
        //instance.virtualHubsListByResourceGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualWANsCreateOrUpdate', function() {
      it('should call virtualWANsCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test virtualWANsCreateOrUpdate
        //instance.virtualWANsCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualWANsDelete', function() {
      it('should call virtualWANsDelete successfully', function(done) {
        //uncomment below and update the code to test virtualWANsDelete
        //instance.virtualWANsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualWANsGet', function() {
      it('should call virtualWANsGet successfully', function(done) {
        //uncomment below and update the code to test virtualWANsGet
        //instance.virtualWANsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualWANsList', function() {
      it('should call virtualWANsList successfully', function(done) {
        //uncomment below and update the code to test virtualWANsList
        //instance.virtualWANsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualWANsListByResourceGroup', function() {
      it('should call virtualWANsListByResourceGroup successfully', function(done) {
        //uncomment below and update the code to test virtualWANsListByResourceGroup
        //instance.virtualWANsListByResourceGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vpnConnectionsCreateOrUpdate', function() {
      it('should call vpnConnectionsCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test vpnConnectionsCreateOrUpdate
        //instance.vpnConnectionsCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vpnConnectionsDelete', function() {
      it('should call vpnConnectionsDelete successfully', function(done) {
        //uncomment below and update the code to test vpnConnectionsDelete
        //instance.vpnConnectionsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vpnConnectionsGet', function() {
      it('should call vpnConnectionsGet successfully', function(done) {
        //uncomment below and update the code to test vpnConnectionsGet
        //instance.vpnConnectionsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vpnConnectionsListByVpnGateway', function() {
      it('should call vpnConnectionsListByVpnGateway successfully', function(done) {
        //uncomment below and update the code to test vpnConnectionsListByVpnGateway
        //instance.vpnConnectionsListByVpnGateway(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vpnGatewaysCreateOrUpdate', function() {
      it('should call vpnGatewaysCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test vpnGatewaysCreateOrUpdate
        //instance.vpnGatewaysCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vpnGatewaysDelete', function() {
      it('should call vpnGatewaysDelete successfully', function(done) {
        //uncomment below and update the code to test vpnGatewaysDelete
        //instance.vpnGatewaysDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vpnGatewaysGet', function() {
      it('should call vpnGatewaysGet successfully', function(done) {
        //uncomment below and update the code to test vpnGatewaysGet
        //instance.vpnGatewaysGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vpnGatewaysList', function() {
      it('should call vpnGatewaysList successfully', function(done) {
        //uncomment below and update the code to test vpnGatewaysList
        //instance.vpnGatewaysList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vpnGatewaysListByResourceGroup', function() {
      it('should call vpnGatewaysListByResourceGroup successfully', function(done) {
        //uncomment below and update the code to test vpnGatewaysListByResourceGroup
        //instance.vpnGatewaysListByResourceGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vpnSitesConfigurationDownload', function() {
      it('should call vpnSitesConfigurationDownload successfully', function(done) {
        //uncomment below and update the code to test vpnSitesConfigurationDownload
        //instance.vpnSitesConfigurationDownload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vpnSitesCreateOrUpdate', function() {
      it('should call vpnSitesCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test vpnSitesCreateOrUpdate
        //instance.vpnSitesCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vpnSitesDelete', function() {
      it('should call vpnSitesDelete successfully', function(done) {
        //uncomment below and update the code to test vpnSitesDelete
        //instance.vpnSitesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vpnSitesGet', function() {
      it('should call vpnSitesGet successfully', function(done) {
        //uncomment below and update the code to test vpnSitesGet
        //instance.vpnSitesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vpnSitesList', function() {
      it('should call vpnSitesList successfully', function(done) {
        //uncomment below and update the code to test vpnSitesList
        //instance.vpnSitesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vpnSitesListByResourceGroup', function() {
      it('should call vpnSitesListByResourceGroup successfully', function(done) {
        //uncomment below and update the code to test vpnSitesListByResourceGroup
        //instance.vpnSitesListByResourceGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
