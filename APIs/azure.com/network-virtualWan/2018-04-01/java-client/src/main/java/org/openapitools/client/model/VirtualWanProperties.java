/*
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2018-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetVpnSitesConfigurationRequestVpnSitesInner;
import org.openapitools.client.model.ProvisioningState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters for VirtualWAN
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:59:55.023072-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualWanProperties {
  public static final String SERIALIZED_NAME_DISABLE_VPN_ENCRYPTION = "disableVpnEncryption";
  @SerializedName(SERIALIZED_NAME_DISABLE_VPN_ENCRYPTION)
  private Boolean disableVpnEncryption;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningState provisioningState;

  public static final String SERIALIZED_NAME_VIRTUAL_HUBS = "virtualHubs";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_HUBS)
  private List<GetVpnSitesConfigurationRequestVpnSitesInner> virtualHubs = new ArrayList<>();

  public static final String SERIALIZED_NAME_VPN_SITES = "vpnSites";
  @SerializedName(SERIALIZED_NAME_VPN_SITES)
  private List<GetVpnSitesConfigurationRequestVpnSitesInner> vpnSites = new ArrayList<>();

  public VirtualWanProperties() {
  }

  public VirtualWanProperties(
     List<GetVpnSitesConfigurationRequestVpnSitesInner> virtualHubs, 
     List<GetVpnSitesConfigurationRequestVpnSitesInner> vpnSites
  ) {
    this();
    this.virtualHubs = virtualHubs;
    this.vpnSites = vpnSites;
  }

  public VirtualWanProperties disableVpnEncryption(Boolean disableVpnEncryption) {
    this.disableVpnEncryption = disableVpnEncryption;
    return this;
  }

  /**
   * Vpn encryption to be disabled or not.
   * @return disableVpnEncryption
   */
  @javax.annotation.Nullable
  public Boolean getDisableVpnEncryption() {
    return disableVpnEncryption;
  }

  public void setDisableVpnEncryption(Boolean disableVpnEncryption) {
    this.disableVpnEncryption = disableVpnEncryption;
  }


  public VirtualWanProperties provisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Get provisioningState
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningState getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
  }


  /**
   * List of VirtualHubs in the VirtualWAN.
   * @return virtualHubs
   */
  @javax.annotation.Nullable
  public List<GetVpnSitesConfigurationRequestVpnSitesInner> getVirtualHubs() {
    return virtualHubs;
  }



  /**
   * Get vpnSites
   * @return vpnSites
   */
  @javax.annotation.Nullable
  public List<GetVpnSitesConfigurationRequestVpnSitesInner> getVpnSites() {
    return vpnSites;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualWanProperties virtualWanProperties = (VirtualWanProperties) o;
    return Objects.equals(this.disableVpnEncryption, virtualWanProperties.disableVpnEncryption) &&
        Objects.equals(this.provisioningState, virtualWanProperties.provisioningState) &&
        Objects.equals(this.virtualHubs, virtualWanProperties.virtualHubs) &&
        Objects.equals(this.vpnSites, virtualWanProperties.vpnSites);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disableVpnEncryption, provisioningState, virtualHubs, vpnSites);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualWanProperties {\n");
    sb.append("    disableVpnEncryption: ").append(toIndentedString(disableVpnEncryption)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    virtualHubs: ").append(toIndentedString(virtualHubs)).append("\n");
    sb.append("    vpnSites: ").append(toIndentedString(vpnSites)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("disableVpnEncryption");
    openapiFields.add("provisioningState");
    openapiFields.add("virtualHubs");
    openapiFields.add("vpnSites");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualWanProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualWanProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualWanProperties is not found in the empty JSON string", VirtualWanProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualWanProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualWanProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningState.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if (jsonObj.get("virtualHubs") != null && !jsonObj.get("virtualHubs").isJsonNull()) {
        JsonArray jsonArrayvirtualHubs = jsonObj.getAsJsonArray("virtualHubs");
        if (jsonArrayvirtualHubs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("virtualHubs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `virtualHubs` to be an array in the JSON string but got `%s`", jsonObj.get("virtualHubs").toString()));
          }

          // validate the optional field `virtualHubs` (array)
          for (int i = 0; i < jsonArrayvirtualHubs.size(); i++) {
            GetVpnSitesConfigurationRequestVpnSitesInner.validateJsonElement(jsonArrayvirtualHubs.get(i));
          };
        }
      }
      if (jsonObj.get("vpnSites") != null && !jsonObj.get("vpnSites").isJsonNull()) {
        JsonArray jsonArrayvpnSites = jsonObj.getAsJsonArray("vpnSites");
        if (jsonArrayvpnSites != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vpnSites").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vpnSites` to be an array in the JSON string but got `%s`", jsonObj.get("vpnSites").toString()));
          }

          // validate the optional field `vpnSites` (array)
          for (int i = 0; i < jsonArrayvpnSites.size(); i++) {
            GetVpnSitesConfigurationRequestVpnSitesInner.validateJsonElement(jsonArrayvpnSites.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualWanProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualWanProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualWanProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualWanProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualWanProperties>() {
           @Override
           public void write(JsonWriter out, VirtualWanProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualWanProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualWanProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualWanProperties
   * @throws IOException if the JSON string is invalid with respect to VirtualWanProperties
   */
  public static VirtualWanProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualWanProperties.class);
  }

  /**
   * Convert an instance of VirtualWanProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

