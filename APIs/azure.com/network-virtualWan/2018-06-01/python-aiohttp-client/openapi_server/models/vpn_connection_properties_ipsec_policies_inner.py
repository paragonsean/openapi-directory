# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VpnConnectionPropertiesIpsecPoliciesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dh_group: str=None, ike_encryption: str=None, ike_integrity: str=None, ipsec_encryption: str=None, ipsec_integrity: str=None, pfs_group: str=None, sa_data_size_kilobytes: int=None, sa_life_time_seconds: int=None):
        """VpnConnectionPropertiesIpsecPoliciesInner - a model defined in OpenAPI

        :param dh_group: The dh_group of this VpnConnectionPropertiesIpsecPoliciesInner.
        :param ike_encryption: The ike_encryption of this VpnConnectionPropertiesIpsecPoliciesInner.
        :param ike_integrity: The ike_integrity of this VpnConnectionPropertiesIpsecPoliciesInner.
        :param ipsec_encryption: The ipsec_encryption of this VpnConnectionPropertiesIpsecPoliciesInner.
        :param ipsec_integrity: The ipsec_integrity of this VpnConnectionPropertiesIpsecPoliciesInner.
        :param pfs_group: The pfs_group of this VpnConnectionPropertiesIpsecPoliciesInner.
        :param sa_data_size_kilobytes: The sa_data_size_kilobytes of this VpnConnectionPropertiesIpsecPoliciesInner.
        :param sa_life_time_seconds: The sa_life_time_seconds of this VpnConnectionPropertiesIpsecPoliciesInner.
        """
        self.openapi_types = {
            'dh_group': str,
            'ike_encryption': str,
            'ike_integrity': str,
            'ipsec_encryption': str,
            'ipsec_integrity': str,
            'pfs_group': str,
            'sa_data_size_kilobytes': int,
            'sa_life_time_seconds': int
        }

        self.attribute_map = {
            'dh_group': 'dhGroup',
            'ike_encryption': 'ikeEncryption',
            'ike_integrity': 'ikeIntegrity',
            'ipsec_encryption': 'ipsecEncryption',
            'ipsec_integrity': 'ipsecIntegrity',
            'pfs_group': 'pfsGroup',
            'sa_data_size_kilobytes': 'saDataSizeKilobytes',
            'sa_life_time_seconds': 'saLifeTimeSeconds'
        }

        self._dh_group = dh_group
        self._ike_encryption = ike_encryption
        self._ike_integrity = ike_integrity
        self._ipsec_encryption = ipsec_encryption
        self._ipsec_integrity = ipsec_integrity
        self._pfs_group = pfs_group
        self._sa_data_size_kilobytes = sa_data_size_kilobytes
        self._sa_life_time_seconds = sa_life_time_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VpnConnectionPropertiesIpsecPoliciesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VpnConnectionProperties_ipsecPolicies_inner of this VpnConnectionPropertiesIpsecPoliciesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dh_group(self):
        """Gets the dh_group of this VpnConnectionPropertiesIpsecPoliciesInner.

        The DH Groups used in IKE Phase 1 for initial SA.

        :return: The dh_group of this VpnConnectionPropertiesIpsecPoliciesInner.
        :rtype: str
        """
        return self._dh_group

    @dh_group.setter
    def dh_group(self, dh_group):
        """Sets the dh_group of this VpnConnectionPropertiesIpsecPoliciesInner.

        The DH Groups used in IKE Phase 1 for initial SA.

        :param dh_group: The dh_group of this VpnConnectionPropertiesIpsecPoliciesInner.
        :type dh_group: str
        """
        allowed_values = ["None", "DHGroup1", "DHGroup2", "DHGroup14", "DHGroup2048", "ECP256", "ECP384", "DHGroup24"]  # noqa: E501
        if dh_group not in allowed_values:
            raise ValueError(
                "Invalid value for `dh_group` ({0}), must be one of {1}"
                .format(dh_group, allowed_values)
            )

        self._dh_group = dh_group

    @property
    def ike_encryption(self):
        """Gets the ike_encryption of this VpnConnectionPropertiesIpsecPoliciesInner.

        The IKE encryption algorithm (IKE phase 2).

        :return: The ike_encryption of this VpnConnectionPropertiesIpsecPoliciesInner.
        :rtype: str
        """
        return self._ike_encryption

    @ike_encryption.setter
    def ike_encryption(self, ike_encryption):
        """Sets the ike_encryption of this VpnConnectionPropertiesIpsecPoliciesInner.

        The IKE encryption algorithm (IKE phase 2).

        :param ike_encryption: The ike_encryption of this VpnConnectionPropertiesIpsecPoliciesInner.
        :type ike_encryption: str
        """
        allowed_values = ["DES", "DES3", "AES128", "AES192", "AES256", "GCMAES256", "GCMAES128"]  # noqa: E501
        if ike_encryption not in allowed_values:
            raise ValueError(
                "Invalid value for `ike_encryption` ({0}), must be one of {1}"
                .format(ike_encryption, allowed_values)
            )

        self._ike_encryption = ike_encryption

    @property
    def ike_integrity(self):
        """Gets the ike_integrity of this VpnConnectionPropertiesIpsecPoliciesInner.

        The IKE integrity algorithm (IKE phase 2).

        :return: The ike_integrity of this VpnConnectionPropertiesIpsecPoliciesInner.
        :rtype: str
        """
        return self._ike_integrity

    @ike_integrity.setter
    def ike_integrity(self, ike_integrity):
        """Sets the ike_integrity of this VpnConnectionPropertiesIpsecPoliciesInner.

        The IKE integrity algorithm (IKE phase 2).

        :param ike_integrity: The ike_integrity of this VpnConnectionPropertiesIpsecPoliciesInner.
        :type ike_integrity: str
        """
        allowed_values = ["MD5", "SHA1", "SHA256", "SHA384", "GCMAES256", "GCMAES128"]  # noqa: E501
        if ike_integrity not in allowed_values:
            raise ValueError(
                "Invalid value for `ike_integrity` ({0}), must be one of {1}"
                .format(ike_integrity, allowed_values)
            )

        self._ike_integrity = ike_integrity

    @property
    def ipsec_encryption(self):
        """Gets the ipsec_encryption of this VpnConnectionPropertiesIpsecPoliciesInner.

        The IPSec encryption algorithm (IKE phase 1).

        :return: The ipsec_encryption of this VpnConnectionPropertiesIpsecPoliciesInner.
        :rtype: str
        """
        return self._ipsec_encryption

    @ipsec_encryption.setter
    def ipsec_encryption(self, ipsec_encryption):
        """Sets the ipsec_encryption of this VpnConnectionPropertiesIpsecPoliciesInner.

        The IPSec encryption algorithm (IKE phase 1).

        :param ipsec_encryption: The ipsec_encryption of this VpnConnectionPropertiesIpsecPoliciesInner.
        :type ipsec_encryption: str
        """
        allowed_values = ["None", "DES", "DES3", "AES128", "AES192", "AES256", "GCMAES128", "GCMAES192", "GCMAES256"]  # noqa: E501
        if ipsec_encryption not in allowed_values:
            raise ValueError(
                "Invalid value for `ipsec_encryption` ({0}), must be one of {1}"
                .format(ipsec_encryption, allowed_values)
            )

        self._ipsec_encryption = ipsec_encryption

    @property
    def ipsec_integrity(self):
        """Gets the ipsec_integrity of this VpnConnectionPropertiesIpsecPoliciesInner.

        The IPSec integrity algorithm (IKE phase 1).

        :return: The ipsec_integrity of this VpnConnectionPropertiesIpsecPoliciesInner.
        :rtype: str
        """
        return self._ipsec_integrity

    @ipsec_integrity.setter
    def ipsec_integrity(self, ipsec_integrity):
        """Sets the ipsec_integrity of this VpnConnectionPropertiesIpsecPoliciesInner.

        The IPSec integrity algorithm (IKE phase 1).

        :param ipsec_integrity: The ipsec_integrity of this VpnConnectionPropertiesIpsecPoliciesInner.
        :type ipsec_integrity: str
        """
        allowed_values = ["MD5", "SHA1", "SHA256", "GCMAES128", "GCMAES192", "GCMAES256"]  # noqa: E501
        if ipsec_integrity not in allowed_values:
            raise ValueError(
                "Invalid value for `ipsec_integrity` ({0}), must be one of {1}"
                .format(ipsec_integrity, allowed_values)
            )

        self._ipsec_integrity = ipsec_integrity

    @property
    def pfs_group(self):
        """Gets the pfs_group of this VpnConnectionPropertiesIpsecPoliciesInner.

        The Pfs Groups used in IKE Phase 2 for new child SA.

        :return: The pfs_group of this VpnConnectionPropertiesIpsecPoliciesInner.
        :rtype: str
        """
        return self._pfs_group

    @pfs_group.setter
    def pfs_group(self, pfs_group):
        """Sets the pfs_group of this VpnConnectionPropertiesIpsecPoliciesInner.

        The Pfs Groups used in IKE Phase 2 for new child SA.

        :param pfs_group: The pfs_group of this VpnConnectionPropertiesIpsecPoliciesInner.
        :type pfs_group: str
        """
        allowed_values = ["None", "PFS1", "PFS2", "PFS2048", "ECP256", "ECP384", "PFS24", "PFS14", "PFSMM"]  # noqa: E501
        if pfs_group not in allowed_values:
            raise ValueError(
                "Invalid value for `pfs_group` ({0}), must be one of {1}"
                .format(pfs_group, allowed_values)
            )

        self._pfs_group = pfs_group

    @property
    def sa_data_size_kilobytes(self):
        """Gets the sa_data_size_kilobytes of this VpnConnectionPropertiesIpsecPoliciesInner.

        The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for a site to site VPN tunnel.

        :return: The sa_data_size_kilobytes of this VpnConnectionPropertiesIpsecPoliciesInner.
        :rtype: int
        """
        return self._sa_data_size_kilobytes

    @sa_data_size_kilobytes.setter
    def sa_data_size_kilobytes(self, sa_data_size_kilobytes):
        """Sets the sa_data_size_kilobytes of this VpnConnectionPropertiesIpsecPoliciesInner.

        The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for a site to site VPN tunnel.

        :param sa_data_size_kilobytes: The sa_data_size_kilobytes of this VpnConnectionPropertiesIpsecPoliciesInner.
        :type sa_data_size_kilobytes: int
        """
        if sa_data_size_kilobytes is None:
            raise ValueError("Invalid value for `sa_data_size_kilobytes`, must not be `None`")

        self._sa_data_size_kilobytes = sa_data_size_kilobytes

    @property
    def sa_life_time_seconds(self):
        """Gets the sa_life_time_seconds of this VpnConnectionPropertiesIpsecPoliciesInner.

        The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.

        :return: The sa_life_time_seconds of this VpnConnectionPropertiesIpsecPoliciesInner.
        :rtype: int
        """
        return self._sa_life_time_seconds

    @sa_life_time_seconds.setter
    def sa_life_time_seconds(self, sa_life_time_seconds):
        """Sets the sa_life_time_seconds of this VpnConnectionPropertiesIpsecPoliciesInner.

        The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.

        :param sa_life_time_seconds: The sa_life_time_seconds of this VpnConnectionPropertiesIpsecPoliciesInner.
        :type sa_life_time_seconds: int
        """
        if sa_life_time_seconds is None:
            raise ValueError("Invalid value for `sa_life_time_seconds`, must not be `None`")

        self._sa_life_time_seconds = sa_life_time_seconds
