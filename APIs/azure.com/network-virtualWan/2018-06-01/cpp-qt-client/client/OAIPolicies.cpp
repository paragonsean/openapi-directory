/**
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicies.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicies::OAIPolicies(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicies::OAIPolicies() {
    this->initializeModel();
}

OAIPolicies::~OAIPolicies() {}

void OAIPolicies::initializeModel() {

    m_allow_branch_to_branch_traffic_isSet = false;
    m_allow_branch_to_branch_traffic_isValid = false;

    m_allow_vnet_to_vnet_traffic_isSet = false;
    m_allow_vnet_to_vnet_traffic_isValid = false;
}

void OAIPolicies::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicies::fromJsonObject(QJsonObject json) {

    m_allow_branch_to_branch_traffic_isValid = ::OpenAPI::fromJsonValue(m_allow_branch_to_branch_traffic, json[QString("allowBranchToBranchTraffic")]);
    m_allow_branch_to_branch_traffic_isSet = !json[QString("allowBranchToBranchTraffic")].isNull() && m_allow_branch_to_branch_traffic_isValid;

    m_allow_vnet_to_vnet_traffic_isValid = ::OpenAPI::fromJsonValue(m_allow_vnet_to_vnet_traffic, json[QString("allowVnetToVnetTraffic")]);
    m_allow_vnet_to_vnet_traffic_isSet = !json[QString("allowVnetToVnetTraffic")].isNull() && m_allow_vnet_to_vnet_traffic_isValid;
}

QString OAIPolicies::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicies::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_branch_to_branch_traffic_isSet) {
        obj.insert(QString("allowBranchToBranchTraffic"), ::OpenAPI::toJsonValue(m_allow_branch_to_branch_traffic));
    }
    if (m_allow_vnet_to_vnet_traffic_isSet) {
        obj.insert(QString("allowVnetToVnetTraffic"), ::OpenAPI::toJsonValue(m_allow_vnet_to_vnet_traffic));
    }
    return obj;
}

bool OAIPolicies::isAllowBranchToBranchTraffic() const {
    return m_allow_branch_to_branch_traffic;
}
void OAIPolicies::setAllowBranchToBranchTraffic(const bool &allow_branch_to_branch_traffic) {
    m_allow_branch_to_branch_traffic = allow_branch_to_branch_traffic;
    m_allow_branch_to_branch_traffic_isSet = true;
}

bool OAIPolicies::is_allow_branch_to_branch_traffic_Set() const{
    return m_allow_branch_to_branch_traffic_isSet;
}

bool OAIPolicies::is_allow_branch_to_branch_traffic_Valid() const{
    return m_allow_branch_to_branch_traffic_isValid;
}

bool OAIPolicies::isAllowVnetToVnetTraffic() const {
    return m_allow_vnet_to_vnet_traffic;
}
void OAIPolicies::setAllowVnetToVnetTraffic(const bool &allow_vnet_to_vnet_traffic) {
    m_allow_vnet_to_vnet_traffic = allow_vnet_to_vnet_traffic;
    m_allow_vnet_to_vnet_traffic_isSet = true;
}

bool OAIPolicies::is_allow_vnet_to_vnet_traffic_Set() const{
    return m_allow_vnet_to_vnet_traffic_isSet;
}

bool OAIPolicies::is_allow_vnet_to_vnet_traffic_Valid() const{
    return m_allow_vnet_to_vnet_traffic_isValid;
}

bool OAIPolicies::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_branch_to_branch_traffic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_vnet_to_vnet_traffic_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicies::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
