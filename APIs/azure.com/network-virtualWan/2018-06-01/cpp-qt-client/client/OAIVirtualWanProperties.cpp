/**
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualWanProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualWanProperties::OAIVirtualWanProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualWanProperties::OAIVirtualWanProperties() {
    this->initializeModel();
}

OAIVirtualWanProperties::~OAIVirtualWanProperties() {}

void OAIVirtualWanProperties::initializeModel() {

    m_disable_vpn_encryption_isSet = false;
    m_disable_vpn_encryption_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_virtual_hubs_isSet = false;
    m_virtual_hubs_isValid = false;

    m_vpn_sites_isSet = false;
    m_vpn_sites_isValid = false;
}

void OAIVirtualWanProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualWanProperties::fromJsonObject(QJsonObject json) {

    m_disable_vpn_encryption_isValid = ::OpenAPI::fromJsonValue(m_disable_vpn_encryption, json[QString("disableVpnEncryption")]);
    m_disable_vpn_encryption_isSet = !json[QString("disableVpnEncryption")].isNull() && m_disable_vpn_encryption_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_virtual_hubs_isValid = ::OpenAPI::fromJsonValue(m_virtual_hubs, json[QString("virtualHubs")]);
    m_virtual_hubs_isSet = !json[QString("virtualHubs")].isNull() && m_virtual_hubs_isValid;

    m_vpn_sites_isValid = ::OpenAPI::fromJsonValue(m_vpn_sites, json[QString("vpnSites")]);
    m_vpn_sites_isSet = !json[QString("vpnSites")].isNull() && m_vpn_sites_isValid;
}

QString OAIVirtualWanProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualWanProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_disable_vpn_encryption_isSet) {
        obj.insert(QString("disableVpnEncryption"), ::OpenAPI::toJsonValue(m_disable_vpn_encryption));
    }
    if (m_provisioning_state.isSet()) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_virtual_hubs.size() > 0) {
        obj.insert(QString("virtualHubs"), ::OpenAPI::toJsonValue(m_virtual_hubs));
    }
    if (m_vpn_sites.size() > 0) {
        obj.insert(QString("vpnSites"), ::OpenAPI::toJsonValue(m_vpn_sites));
    }
    return obj;
}

bool OAIVirtualWanProperties::isDisableVpnEncryption() const {
    return m_disable_vpn_encryption;
}
void OAIVirtualWanProperties::setDisableVpnEncryption(const bool &disable_vpn_encryption) {
    m_disable_vpn_encryption = disable_vpn_encryption;
    m_disable_vpn_encryption_isSet = true;
}

bool OAIVirtualWanProperties::is_disable_vpn_encryption_Set() const{
    return m_disable_vpn_encryption_isSet;
}

bool OAIVirtualWanProperties::is_disable_vpn_encryption_Valid() const{
    return m_disable_vpn_encryption_isValid;
}

OAIProvisioningState OAIVirtualWanProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIVirtualWanProperties::setProvisioningState(const OAIProvisioningState &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIVirtualWanProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIVirtualWanProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QList<OAIGetVpnSitesConfigurationRequest_vpnSites_inner> OAIVirtualWanProperties::getVirtualHubs() const {
    return m_virtual_hubs;
}
void OAIVirtualWanProperties::setVirtualHubs(const QList<OAIGetVpnSitesConfigurationRequest_vpnSites_inner> &virtual_hubs) {
    m_virtual_hubs = virtual_hubs;
    m_virtual_hubs_isSet = true;
}

bool OAIVirtualWanProperties::is_virtual_hubs_Set() const{
    return m_virtual_hubs_isSet;
}

bool OAIVirtualWanProperties::is_virtual_hubs_Valid() const{
    return m_virtual_hubs_isValid;
}

QList<OAIGetVpnSitesConfigurationRequest_vpnSites_inner> OAIVirtualWanProperties::getVpnSites() const {
    return m_vpn_sites;
}
void OAIVirtualWanProperties::setVpnSites(const QList<OAIGetVpnSitesConfigurationRequest_vpnSites_inner> &vpn_sites) {
    m_vpn_sites = vpn_sites;
    m_vpn_sites_isSet = true;
}

bool OAIVirtualWanProperties::is_vpn_sites_Set() const{
    return m_vpn_sites_isSet;
}

bool OAIVirtualWanProperties::is_vpn_sites_Valid() const{
    return m_vpn_sites_isValid;
}

bool OAIVirtualWanProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disable_vpn_encryption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_hubs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_sites.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualWanProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
