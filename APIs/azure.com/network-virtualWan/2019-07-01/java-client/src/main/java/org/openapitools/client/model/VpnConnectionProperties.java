/*
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork;
import org.openapitools.client.model.P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner;
import org.openapitools.client.model.VpnConnectionStatus;
import org.openapitools.client.model.VpnSiteLinkConnection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters for VpnConnection.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:59:59.058349-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VpnConnectionProperties {
  public static final String SERIALIZED_NAME_CONNECTION_BANDWIDTH = "connectionBandwidth";
  @SerializedName(SERIALIZED_NAME_CONNECTION_BANDWIDTH)
  private Integer connectionBandwidth;

  public static final String SERIALIZED_NAME_CONNECTION_STATUS = "connectionStatus";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STATUS)
  private VpnConnectionStatus connectionStatus;

  public static final String SERIALIZED_NAME_EGRESS_BYTES_TRANSFERRED = "egressBytesTransferred";
  @SerializedName(SERIALIZED_NAME_EGRESS_BYTES_TRANSFERRED)
  private Long egressBytesTransferred;

  public static final String SERIALIZED_NAME_ENABLE_BGP = "enableBgp";
  @SerializedName(SERIALIZED_NAME_ENABLE_BGP)
  private Boolean enableBgp;

  public static final String SERIALIZED_NAME_ENABLE_INTERNET_SECURITY = "enableInternetSecurity";
  @SerializedName(SERIALIZED_NAME_ENABLE_INTERNET_SECURITY)
  private Boolean enableInternetSecurity;

  public static final String SERIALIZED_NAME_ENABLE_RATE_LIMITING = "enableRateLimiting";
  @SerializedName(SERIALIZED_NAME_ENABLE_RATE_LIMITING)
  private Boolean enableRateLimiting;

  public static final String SERIALIZED_NAME_INGRESS_BYTES_TRANSFERRED = "ingressBytesTransferred";
  @SerializedName(SERIALIZED_NAME_INGRESS_BYTES_TRANSFERRED)
  private Long ingressBytesTransferred;

  public static final String SERIALIZED_NAME_IPSEC_POLICIES = "ipsecPolicies";
  @SerializedName(SERIALIZED_NAME_IPSEC_POLICIES)
  private List<P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner> ipsecPolicies = new ArrayList<>();

  /**
   * The current provisioning state.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    SUCCEEDED("Succeeded"),
    
    UPDATING("Updating"),
    
    DELETING("Deleting"),
    
    FAILED("Failed");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_REMOTE_VPN_SITE = "remoteVpnSite";
  @SerializedName(SERIALIZED_NAME_REMOTE_VPN_SITE)
  private HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork remoteVpnSite;

  public static final String SERIALIZED_NAME_ROUTING_WEIGHT = "routingWeight";
  @SerializedName(SERIALIZED_NAME_ROUTING_WEIGHT)
  private Integer routingWeight;

  public static final String SERIALIZED_NAME_SHARED_KEY = "sharedKey";
  @SerializedName(SERIALIZED_NAME_SHARED_KEY)
  private String sharedKey;

  public static final String SERIALIZED_NAME_USE_LOCAL_AZURE_IP_ADDRESS = "useLocalAzureIpAddress";
  @SerializedName(SERIALIZED_NAME_USE_LOCAL_AZURE_IP_ADDRESS)
  private Boolean useLocalAzureIpAddress;

  public static final String SERIALIZED_NAME_USE_POLICY_BASED_TRAFFIC_SELECTORS = "usePolicyBasedTrafficSelectors";
  @SerializedName(SERIALIZED_NAME_USE_POLICY_BASED_TRAFFIC_SELECTORS)
  private Boolean usePolicyBasedTrafficSelectors;

  /**
   * Gateway connection protocol.
   */
  @JsonAdapter(VpnConnectionProtocolTypeEnum.Adapter.class)
  public enum VpnConnectionProtocolTypeEnum {
    IKEV2("IKEv2"),
    
    IKEV1("IKEv1");

    private String value;

    VpnConnectionProtocolTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VpnConnectionProtocolTypeEnum fromValue(String value) {
      for (VpnConnectionProtocolTypeEnum b : VpnConnectionProtocolTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VpnConnectionProtocolTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VpnConnectionProtocolTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VpnConnectionProtocolTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VpnConnectionProtocolTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VpnConnectionProtocolTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VPN_CONNECTION_PROTOCOL_TYPE = "vpnConnectionProtocolType";
  @SerializedName(SERIALIZED_NAME_VPN_CONNECTION_PROTOCOL_TYPE)
  private VpnConnectionProtocolTypeEnum vpnConnectionProtocolType;

  public static final String SERIALIZED_NAME_VPN_LINK_CONNECTIONS = "vpnLinkConnections";
  @SerializedName(SERIALIZED_NAME_VPN_LINK_CONNECTIONS)
  private List<VpnSiteLinkConnection> vpnLinkConnections = new ArrayList<>();

  public VpnConnectionProperties() {
  }

  public VpnConnectionProperties(
     Long egressBytesTransferred, 
     Long ingressBytesTransferred, 
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.egressBytesTransferred = egressBytesTransferred;
    this.ingressBytesTransferred = ingressBytesTransferred;
    this.provisioningState = provisioningState;
  }

  public VpnConnectionProperties connectionBandwidth(Integer connectionBandwidth) {
    this.connectionBandwidth = connectionBandwidth;
    return this;
  }

  /**
   * Expected bandwidth in MBPS.
   * @return connectionBandwidth
   */
  @javax.annotation.Nullable
  public Integer getConnectionBandwidth() {
    return connectionBandwidth;
  }

  public void setConnectionBandwidth(Integer connectionBandwidth) {
    this.connectionBandwidth = connectionBandwidth;
  }


  public VpnConnectionProperties connectionStatus(VpnConnectionStatus connectionStatus) {
    this.connectionStatus = connectionStatus;
    return this;
  }

  /**
   * Get connectionStatus
   * @return connectionStatus
   */
  @javax.annotation.Nullable
  public VpnConnectionStatus getConnectionStatus() {
    return connectionStatus;
  }

  public void setConnectionStatus(VpnConnectionStatus connectionStatus) {
    this.connectionStatus = connectionStatus;
  }


  /**
   * Egress bytes transferred.
   * @return egressBytesTransferred
   */
  @javax.annotation.Nullable
  public Long getEgressBytesTransferred() {
    return egressBytesTransferred;
  }



  public VpnConnectionProperties enableBgp(Boolean enableBgp) {
    this.enableBgp = enableBgp;
    return this;
  }

  /**
   * EnableBgp flag.
   * @return enableBgp
   */
  @javax.annotation.Nullable
  public Boolean getEnableBgp() {
    return enableBgp;
  }

  public void setEnableBgp(Boolean enableBgp) {
    this.enableBgp = enableBgp;
  }


  public VpnConnectionProperties enableInternetSecurity(Boolean enableInternetSecurity) {
    this.enableInternetSecurity = enableInternetSecurity;
    return this;
  }

  /**
   * Enable internet security.
   * @return enableInternetSecurity
   */
  @javax.annotation.Nullable
  public Boolean getEnableInternetSecurity() {
    return enableInternetSecurity;
  }

  public void setEnableInternetSecurity(Boolean enableInternetSecurity) {
    this.enableInternetSecurity = enableInternetSecurity;
  }


  public VpnConnectionProperties enableRateLimiting(Boolean enableRateLimiting) {
    this.enableRateLimiting = enableRateLimiting;
    return this;
  }

  /**
   * EnableBgp flag.
   * @return enableRateLimiting
   */
  @javax.annotation.Nullable
  public Boolean getEnableRateLimiting() {
    return enableRateLimiting;
  }

  public void setEnableRateLimiting(Boolean enableRateLimiting) {
    this.enableRateLimiting = enableRateLimiting;
  }


  /**
   * Ingress bytes transferred.
   * @return ingressBytesTransferred
   */
  @javax.annotation.Nullable
  public Long getIngressBytesTransferred() {
    return ingressBytesTransferred;
  }



  public VpnConnectionProperties ipsecPolicies(List<P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner> ipsecPolicies) {
    this.ipsecPolicies = ipsecPolicies;
    return this;
  }

  public VpnConnectionProperties addIpsecPoliciesItem(P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner ipsecPoliciesItem) {
    if (this.ipsecPolicies == null) {
      this.ipsecPolicies = new ArrayList<>();
    }
    this.ipsecPolicies.add(ipsecPoliciesItem);
    return this;
  }

  /**
   * The IPSec Policies to be considered by this connection.
   * @return ipsecPolicies
   */
  @javax.annotation.Nullable
  public List<P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner> getIpsecPolicies() {
    return ipsecPolicies;
  }

  public void setIpsecPolicies(List<P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner> ipsecPolicies) {
    this.ipsecPolicies = ipsecPolicies;
  }


  /**
   * The current provisioning state.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  public VpnConnectionProperties remoteVpnSite(HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork remoteVpnSite) {
    this.remoteVpnSite = remoteVpnSite;
    return this;
  }

  /**
   * Get remoteVpnSite
   * @return remoteVpnSite
   */
  @javax.annotation.Nullable
  public HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork getRemoteVpnSite() {
    return remoteVpnSite;
  }

  public void setRemoteVpnSite(HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork remoteVpnSite) {
    this.remoteVpnSite = remoteVpnSite;
  }


  public VpnConnectionProperties routingWeight(Integer routingWeight) {
    this.routingWeight = routingWeight;
    return this;
  }

  /**
   * Routing weight for vpn connection.
   * @return routingWeight
   */
  @javax.annotation.Nullable
  public Integer getRoutingWeight() {
    return routingWeight;
  }

  public void setRoutingWeight(Integer routingWeight) {
    this.routingWeight = routingWeight;
  }


  public VpnConnectionProperties sharedKey(String sharedKey) {
    this.sharedKey = sharedKey;
    return this;
  }

  /**
   * SharedKey for the vpn connection.
   * @return sharedKey
   */
  @javax.annotation.Nullable
  public String getSharedKey() {
    return sharedKey;
  }

  public void setSharedKey(String sharedKey) {
    this.sharedKey = sharedKey;
  }


  public VpnConnectionProperties useLocalAzureIpAddress(Boolean useLocalAzureIpAddress) {
    this.useLocalAzureIpAddress = useLocalAzureIpAddress;
    return this;
  }

  /**
   * Use local azure ip to initiate connection.
   * @return useLocalAzureIpAddress
   */
  @javax.annotation.Nullable
  public Boolean getUseLocalAzureIpAddress() {
    return useLocalAzureIpAddress;
  }

  public void setUseLocalAzureIpAddress(Boolean useLocalAzureIpAddress) {
    this.useLocalAzureIpAddress = useLocalAzureIpAddress;
  }


  public VpnConnectionProperties usePolicyBasedTrafficSelectors(Boolean usePolicyBasedTrafficSelectors) {
    this.usePolicyBasedTrafficSelectors = usePolicyBasedTrafficSelectors;
    return this;
  }

  /**
   * Enable policy-based traffic selectors.
   * @return usePolicyBasedTrafficSelectors
   */
  @javax.annotation.Nullable
  public Boolean getUsePolicyBasedTrafficSelectors() {
    return usePolicyBasedTrafficSelectors;
  }

  public void setUsePolicyBasedTrafficSelectors(Boolean usePolicyBasedTrafficSelectors) {
    this.usePolicyBasedTrafficSelectors = usePolicyBasedTrafficSelectors;
  }


  public VpnConnectionProperties vpnConnectionProtocolType(VpnConnectionProtocolTypeEnum vpnConnectionProtocolType) {
    this.vpnConnectionProtocolType = vpnConnectionProtocolType;
    return this;
  }

  /**
   * Gateway connection protocol.
   * @return vpnConnectionProtocolType
   */
  @javax.annotation.Nullable
  public VpnConnectionProtocolTypeEnum getVpnConnectionProtocolType() {
    return vpnConnectionProtocolType;
  }

  public void setVpnConnectionProtocolType(VpnConnectionProtocolTypeEnum vpnConnectionProtocolType) {
    this.vpnConnectionProtocolType = vpnConnectionProtocolType;
  }


  public VpnConnectionProperties vpnLinkConnections(List<VpnSiteLinkConnection> vpnLinkConnections) {
    this.vpnLinkConnections = vpnLinkConnections;
    return this;
  }

  public VpnConnectionProperties addVpnLinkConnectionsItem(VpnSiteLinkConnection vpnLinkConnectionsItem) {
    if (this.vpnLinkConnections == null) {
      this.vpnLinkConnections = new ArrayList<>();
    }
    this.vpnLinkConnections.add(vpnLinkConnectionsItem);
    return this;
  }

  /**
   * List of all vpn site link connections to the gateway.
   * @return vpnLinkConnections
   */
  @javax.annotation.Nullable
  public List<VpnSiteLinkConnection> getVpnLinkConnections() {
    return vpnLinkConnections;
  }

  public void setVpnLinkConnections(List<VpnSiteLinkConnection> vpnLinkConnections) {
    this.vpnLinkConnections = vpnLinkConnections;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VpnConnectionProperties vpnConnectionProperties = (VpnConnectionProperties) o;
    return Objects.equals(this.connectionBandwidth, vpnConnectionProperties.connectionBandwidth) &&
        Objects.equals(this.connectionStatus, vpnConnectionProperties.connectionStatus) &&
        Objects.equals(this.egressBytesTransferred, vpnConnectionProperties.egressBytesTransferred) &&
        Objects.equals(this.enableBgp, vpnConnectionProperties.enableBgp) &&
        Objects.equals(this.enableInternetSecurity, vpnConnectionProperties.enableInternetSecurity) &&
        Objects.equals(this.enableRateLimiting, vpnConnectionProperties.enableRateLimiting) &&
        Objects.equals(this.ingressBytesTransferred, vpnConnectionProperties.ingressBytesTransferred) &&
        Objects.equals(this.ipsecPolicies, vpnConnectionProperties.ipsecPolicies) &&
        Objects.equals(this.provisioningState, vpnConnectionProperties.provisioningState) &&
        Objects.equals(this.remoteVpnSite, vpnConnectionProperties.remoteVpnSite) &&
        Objects.equals(this.routingWeight, vpnConnectionProperties.routingWeight) &&
        Objects.equals(this.sharedKey, vpnConnectionProperties.sharedKey) &&
        Objects.equals(this.useLocalAzureIpAddress, vpnConnectionProperties.useLocalAzureIpAddress) &&
        Objects.equals(this.usePolicyBasedTrafficSelectors, vpnConnectionProperties.usePolicyBasedTrafficSelectors) &&
        Objects.equals(this.vpnConnectionProtocolType, vpnConnectionProperties.vpnConnectionProtocolType) &&
        Objects.equals(this.vpnLinkConnections, vpnConnectionProperties.vpnLinkConnections);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionBandwidth, connectionStatus, egressBytesTransferred, enableBgp, enableInternetSecurity, enableRateLimiting, ingressBytesTransferred, ipsecPolicies, provisioningState, remoteVpnSite, routingWeight, sharedKey, useLocalAzureIpAddress, usePolicyBasedTrafficSelectors, vpnConnectionProtocolType, vpnLinkConnections);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VpnConnectionProperties {\n");
    sb.append("    connectionBandwidth: ").append(toIndentedString(connectionBandwidth)).append("\n");
    sb.append("    connectionStatus: ").append(toIndentedString(connectionStatus)).append("\n");
    sb.append("    egressBytesTransferred: ").append(toIndentedString(egressBytesTransferred)).append("\n");
    sb.append("    enableBgp: ").append(toIndentedString(enableBgp)).append("\n");
    sb.append("    enableInternetSecurity: ").append(toIndentedString(enableInternetSecurity)).append("\n");
    sb.append("    enableRateLimiting: ").append(toIndentedString(enableRateLimiting)).append("\n");
    sb.append("    ingressBytesTransferred: ").append(toIndentedString(ingressBytesTransferred)).append("\n");
    sb.append("    ipsecPolicies: ").append(toIndentedString(ipsecPolicies)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    remoteVpnSite: ").append(toIndentedString(remoteVpnSite)).append("\n");
    sb.append("    routingWeight: ").append(toIndentedString(routingWeight)).append("\n");
    sb.append("    sharedKey: ").append(toIndentedString(sharedKey)).append("\n");
    sb.append("    useLocalAzureIpAddress: ").append(toIndentedString(useLocalAzureIpAddress)).append("\n");
    sb.append("    usePolicyBasedTrafficSelectors: ").append(toIndentedString(usePolicyBasedTrafficSelectors)).append("\n");
    sb.append("    vpnConnectionProtocolType: ").append(toIndentedString(vpnConnectionProtocolType)).append("\n");
    sb.append("    vpnLinkConnections: ").append(toIndentedString(vpnLinkConnections)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectionBandwidth");
    openapiFields.add("connectionStatus");
    openapiFields.add("egressBytesTransferred");
    openapiFields.add("enableBgp");
    openapiFields.add("enableInternetSecurity");
    openapiFields.add("enableRateLimiting");
    openapiFields.add("ingressBytesTransferred");
    openapiFields.add("ipsecPolicies");
    openapiFields.add("provisioningState");
    openapiFields.add("remoteVpnSite");
    openapiFields.add("routingWeight");
    openapiFields.add("sharedKey");
    openapiFields.add("useLocalAzureIpAddress");
    openapiFields.add("usePolicyBasedTrafficSelectors");
    openapiFields.add("vpnConnectionProtocolType");
    openapiFields.add("vpnLinkConnections");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VpnConnectionProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VpnConnectionProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VpnConnectionProperties is not found in the empty JSON string", VpnConnectionProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VpnConnectionProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VpnConnectionProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `connectionStatus`
      if (jsonObj.get("connectionStatus") != null && !jsonObj.get("connectionStatus").isJsonNull()) {
        VpnConnectionStatus.validateJsonElement(jsonObj.get("connectionStatus"));
      }
      if (jsonObj.get("ipsecPolicies") != null && !jsonObj.get("ipsecPolicies").isJsonNull()) {
        JsonArray jsonArrayipsecPolicies = jsonObj.getAsJsonArray("ipsecPolicies");
        if (jsonArrayipsecPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ipsecPolicies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ipsecPolicies` to be an array in the JSON string but got `%s`", jsonObj.get("ipsecPolicies").toString()));
          }

          // validate the optional field `ipsecPolicies` (array)
          for (int i = 0; i < jsonArrayipsecPolicies.size(); i++) {
            P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner.validateJsonElement(jsonArrayipsecPolicies.get(i));
          };
        }
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      // validate the optional field `remoteVpnSite`
      if (jsonObj.get("remoteVpnSite") != null && !jsonObj.get("remoteVpnSite").isJsonNull()) {
        HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork.validateJsonElement(jsonObj.get("remoteVpnSite"));
      }
      if ((jsonObj.get("sharedKey") != null && !jsonObj.get("sharedKey").isJsonNull()) && !jsonObj.get("sharedKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharedKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharedKey").toString()));
      }
      if ((jsonObj.get("vpnConnectionProtocolType") != null && !jsonObj.get("vpnConnectionProtocolType").isJsonNull()) && !jsonObj.get("vpnConnectionProtocolType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vpnConnectionProtocolType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vpnConnectionProtocolType").toString()));
      }
      // validate the optional field `vpnConnectionProtocolType`
      if (jsonObj.get("vpnConnectionProtocolType") != null && !jsonObj.get("vpnConnectionProtocolType").isJsonNull()) {
        VpnConnectionProtocolTypeEnum.validateJsonElement(jsonObj.get("vpnConnectionProtocolType"));
      }
      if (jsonObj.get("vpnLinkConnections") != null && !jsonObj.get("vpnLinkConnections").isJsonNull()) {
        JsonArray jsonArrayvpnLinkConnections = jsonObj.getAsJsonArray("vpnLinkConnections");
        if (jsonArrayvpnLinkConnections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vpnLinkConnections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vpnLinkConnections` to be an array in the JSON string but got `%s`", jsonObj.get("vpnLinkConnections").toString()));
          }

          // validate the optional field `vpnLinkConnections` (array)
          for (int i = 0; i < jsonArrayvpnLinkConnections.size(); i++) {
            VpnSiteLinkConnection.validateJsonElement(jsonArrayvpnLinkConnections.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VpnConnectionProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VpnConnectionProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VpnConnectionProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VpnConnectionProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<VpnConnectionProperties>() {
           @Override
           public void write(JsonWriter out, VpnConnectionProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VpnConnectionProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VpnConnectionProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VpnConnectionProperties
   * @throws IOException if the JSON string is invalid with respect to VpnConnectionProperties
   */
  public static VpnConnectionProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VpnConnectionProperties.class);
  }

  /**
   * Convert an instance of VpnConnectionProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

