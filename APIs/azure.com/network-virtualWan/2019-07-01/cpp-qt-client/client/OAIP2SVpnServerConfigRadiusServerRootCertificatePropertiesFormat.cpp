/**
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIP2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIP2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat::OAIP2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIP2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat::OAIP2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat() {
    this->initializeModel();
}

OAIP2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat::~OAIP2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat() {}

void OAIP2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat::initializeModel() {

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_public_cert_data_isSet = false;
    m_public_cert_data_isValid = false;
}

void OAIP2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIP2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat::fromJsonObject(QJsonObject json) {

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_public_cert_data_isValid = ::OpenAPI::fromJsonValue(m_public_cert_data, json[QString("publicCertData")]);
    m_public_cert_data_isSet = !json[QString("publicCertData")].isNull() && m_public_cert_data_isValid;
}

QString OAIP2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIP2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_public_cert_data_isSet) {
        obj.insert(QString("publicCertData"), ::OpenAPI::toJsonValue(m_public_cert_data));
    }
    return obj;
}

QString OAIP2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIP2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIP2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIP2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIP2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat::getPublicCertData() const {
    return m_public_cert_data;
}
void OAIP2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat::setPublicCertData(const QString &public_cert_data) {
    m_public_cert_data = public_cert_data;
    m_public_cert_data_isSet = true;
}

bool OAIP2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat::is_public_cert_data_Set() const{
    return m_public_cert_data_isSet;
}

bool OAIP2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat::is_public_cert_data_Valid() const{
    return m_public_cert_data_isValid;
}

bool OAIP2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_cert_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIP2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_public_cert_data_isValid && true;
}

} // namespace OpenAPI
