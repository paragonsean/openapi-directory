/**
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVpnGatewayProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVpnGatewayProperties::OAIVpnGatewayProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVpnGatewayProperties::OAIVpnGatewayProperties() {
    this->initializeModel();
}

OAIVpnGatewayProperties::~OAIVpnGatewayProperties() {}

void OAIVpnGatewayProperties::initializeModel() {

    m_bgp_settings_isSet = false;
    m_bgp_settings_isValid = false;

    m_connections_isSet = false;
    m_connections_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_virtual_hub_isSet = false;
    m_virtual_hub_isValid = false;

    m_vpn_gateway_scale_unit_isSet = false;
    m_vpn_gateway_scale_unit_isValid = false;
}

void OAIVpnGatewayProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVpnGatewayProperties::fromJsonObject(QJsonObject json) {

    m_bgp_settings_isValid = ::OpenAPI::fromJsonValue(m_bgp_settings, json[QString("bgpSettings")]);
    m_bgp_settings_isSet = !json[QString("bgpSettings")].isNull() && m_bgp_settings_isValid;

    m_connections_isValid = ::OpenAPI::fromJsonValue(m_connections, json[QString("connections")]);
    m_connections_isSet = !json[QString("connections")].isNull() && m_connections_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_virtual_hub_isValid = ::OpenAPI::fromJsonValue(m_virtual_hub, json[QString("virtualHub")]);
    m_virtual_hub_isSet = !json[QString("virtualHub")].isNull() && m_virtual_hub_isValid;

    m_vpn_gateway_scale_unit_isValid = ::OpenAPI::fromJsonValue(m_vpn_gateway_scale_unit, json[QString("vpnGatewayScaleUnit")]);
    m_vpn_gateway_scale_unit_isSet = !json[QString("vpnGatewayScaleUnit")].isNull() && m_vpn_gateway_scale_unit_isValid;
}

QString OAIVpnGatewayProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVpnGatewayProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_bgp_settings.isSet()) {
        obj.insert(QString("bgpSettings"), ::OpenAPI::toJsonValue(m_bgp_settings));
    }
    if (m_connections.size() > 0) {
        obj.insert(QString("connections"), ::OpenAPI::toJsonValue(m_connections));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_virtual_hub.isSet()) {
        obj.insert(QString("virtualHub"), ::OpenAPI::toJsonValue(m_virtual_hub));
    }
    if (m_vpn_gateway_scale_unit_isSet) {
        obj.insert(QString("vpnGatewayScaleUnit"), ::OpenAPI::toJsonValue(m_vpn_gateway_scale_unit));
    }
    return obj;
}

OAIVpnGatewayProperties_bgpSettings OAIVpnGatewayProperties::getBgpSettings() const {
    return m_bgp_settings;
}
void OAIVpnGatewayProperties::setBgpSettings(const OAIVpnGatewayProperties_bgpSettings &bgp_settings) {
    m_bgp_settings = bgp_settings;
    m_bgp_settings_isSet = true;
}

bool OAIVpnGatewayProperties::is_bgp_settings_Set() const{
    return m_bgp_settings_isSet;
}

bool OAIVpnGatewayProperties::is_bgp_settings_Valid() const{
    return m_bgp_settings_isValid;
}

QList<OAIVpnConnection> OAIVpnGatewayProperties::getConnections() const {
    return m_connections;
}
void OAIVpnGatewayProperties::setConnections(const QList<OAIVpnConnection> &connections) {
    m_connections = connections;
    m_connections_isSet = true;
}

bool OAIVpnGatewayProperties::is_connections_Set() const{
    return m_connections_isSet;
}

bool OAIVpnGatewayProperties::is_connections_Valid() const{
    return m_connections_isValid;
}

QString OAIVpnGatewayProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIVpnGatewayProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIVpnGatewayProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIVpnGatewayProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork OAIVpnGatewayProperties::getVirtualHub() const {
    return m_virtual_hub;
}
void OAIVpnGatewayProperties::setVirtualHub(const OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork &virtual_hub) {
    m_virtual_hub = virtual_hub;
    m_virtual_hub_isSet = true;
}

bool OAIVpnGatewayProperties::is_virtual_hub_Set() const{
    return m_virtual_hub_isSet;
}

bool OAIVpnGatewayProperties::is_virtual_hub_Valid() const{
    return m_virtual_hub_isValid;
}

qint32 OAIVpnGatewayProperties::getVpnGatewayScaleUnit() const {
    return m_vpn_gateway_scale_unit;
}
void OAIVpnGatewayProperties::setVpnGatewayScaleUnit(const qint32 &vpn_gateway_scale_unit) {
    m_vpn_gateway_scale_unit = vpn_gateway_scale_unit;
    m_vpn_gateway_scale_unit_isSet = true;
}

bool OAIVpnGatewayProperties::is_vpn_gateway_scale_unit_Set() const{
    return m_vpn_gateway_scale_unit_isSet;
}

bool OAIVpnGatewayProperties::is_vpn_gateway_scale_unit_Valid() const{
    return m_vpn_gateway_scale_unit_isValid;
}

bool OAIVpnGatewayProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bgp_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_hub.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_gateway_scale_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVpnGatewayProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
