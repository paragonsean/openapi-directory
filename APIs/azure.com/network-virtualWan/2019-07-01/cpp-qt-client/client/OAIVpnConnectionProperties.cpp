/**
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVpnConnectionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVpnConnectionProperties::OAIVpnConnectionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVpnConnectionProperties::OAIVpnConnectionProperties() {
    this->initializeModel();
}

OAIVpnConnectionProperties::~OAIVpnConnectionProperties() {}

void OAIVpnConnectionProperties::initializeModel() {

    m_connection_bandwidth_isSet = false;
    m_connection_bandwidth_isValid = false;

    m_connection_status_isSet = false;
    m_connection_status_isValid = false;

    m_egress_bytes_transferred_isSet = false;
    m_egress_bytes_transferred_isValid = false;

    m_enable_bgp_isSet = false;
    m_enable_bgp_isValid = false;

    m_enable_internet_security_isSet = false;
    m_enable_internet_security_isValid = false;

    m_enable_rate_limiting_isSet = false;
    m_enable_rate_limiting_isValid = false;

    m_ingress_bytes_transferred_isSet = false;
    m_ingress_bytes_transferred_isValid = false;

    m_ipsec_policies_isSet = false;
    m_ipsec_policies_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_remote_vpn_site_isSet = false;
    m_remote_vpn_site_isValid = false;

    m_routing_weight_isSet = false;
    m_routing_weight_isValid = false;

    m_shared_key_isSet = false;
    m_shared_key_isValid = false;

    m_use_local_azure_ip_address_isSet = false;
    m_use_local_azure_ip_address_isValid = false;

    m_use_policy_based_traffic_selectors_isSet = false;
    m_use_policy_based_traffic_selectors_isValid = false;

    m_vpn_connection_protocol_type_isSet = false;
    m_vpn_connection_protocol_type_isValid = false;

    m_vpn_link_connections_isSet = false;
    m_vpn_link_connections_isValid = false;
}

void OAIVpnConnectionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVpnConnectionProperties::fromJsonObject(QJsonObject json) {

    m_connection_bandwidth_isValid = ::OpenAPI::fromJsonValue(m_connection_bandwidth, json[QString("connectionBandwidth")]);
    m_connection_bandwidth_isSet = !json[QString("connectionBandwidth")].isNull() && m_connection_bandwidth_isValid;

    m_connection_status_isValid = ::OpenAPI::fromJsonValue(m_connection_status, json[QString("connectionStatus")]);
    m_connection_status_isSet = !json[QString("connectionStatus")].isNull() && m_connection_status_isValid;

    m_egress_bytes_transferred_isValid = ::OpenAPI::fromJsonValue(m_egress_bytes_transferred, json[QString("egressBytesTransferred")]);
    m_egress_bytes_transferred_isSet = !json[QString("egressBytesTransferred")].isNull() && m_egress_bytes_transferred_isValid;

    m_enable_bgp_isValid = ::OpenAPI::fromJsonValue(m_enable_bgp, json[QString("enableBgp")]);
    m_enable_bgp_isSet = !json[QString("enableBgp")].isNull() && m_enable_bgp_isValid;

    m_enable_internet_security_isValid = ::OpenAPI::fromJsonValue(m_enable_internet_security, json[QString("enableInternetSecurity")]);
    m_enable_internet_security_isSet = !json[QString("enableInternetSecurity")].isNull() && m_enable_internet_security_isValid;

    m_enable_rate_limiting_isValid = ::OpenAPI::fromJsonValue(m_enable_rate_limiting, json[QString("enableRateLimiting")]);
    m_enable_rate_limiting_isSet = !json[QString("enableRateLimiting")].isNull() && m_enable_rate_limiting_isValid;

    m_ingress_bytes_transferred_isValid = ::OpenAPI::fromJsonValue(m_ingress_bytes_transferred, json[QString("ingressBytesTransferred")]);
    m_ingress_bytes_transferred_isSet = !json[QString("ingressBytesTransferred")].isNull() && m_ingress_bytes_transferred_isValid;

    m_ipsec_policies_isValid = ::OpenAPI::fromJsonValue(m_ipsec_policies, json[QString("ipsecPolicies")]);
    m_ipsec_policies_isSet = !json[QString("ipsecPolicies")].isNull() && m_ipsec_policies_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_remote_vpn_site_isValid = ::OpenAPI::fromJsonValue(m_remote_vpn_site, json[QString("remoteVpnSite")]);
    m_remote_vpn_site_isSet = !json[QString("remoteVpnSite")].isNull() && m_remote_vpn_site_isValid;

    m_routing_weight_isValid = ::OpenAPI::fromJsonValue(m_routing_weight, json[QString("routingWeight")]);
    m_routing_weight_isSet = !json[QString("routingWeight")].isNull() && m_routing_weight_isValid;

    m_shared_key_isValid = ::OpenAPI::fromJsonValue(m_shared_key, json[QString("sharedKey")]);
    m_shared_key_isSet = !json[QString("sharedKey")].isNull() && m_shared_key_isValid;

    m_use_local_azure_ip_address_isValid = ::OpenAPI::fromJsonValue(m_use_local_azure_ip_address, json[QString("useLocalAzureIpAddress")]);
    m_use_local_azure_ip_address_isSet = !json[QString("useLocalAzureIpAddress")].isNull() && m_use_local_azure_ip_address_isValid;

    m_use_policy_based_traffic_selectors_isValid = ::OpenAPI::fromJsonValue(m_use_policy_based_traffic_selectors, json[QString("usePolicyBasedTrafficSelectors")]);
    m_use_policy_based_traffic_selectors_isSet = !json[QString("usePolicyBasedTrafficSelectors")].isNull() && m_use_policy_based_traffic_selectors_isValid;

    m_vpn_connection_protocol_type_isValid = ::OpenAPI::fromJsonValue(m_vpn_connection_protocol_type, json[QString("vpnConnectionProtocolType")]);
    m_vpn_connection_protocol_type_isSet = !json[QString("vpnConnectionProtocolType")].isNull() && m_vpn_connection_protocol_type_isValid;

    m_vpn_link_connections_isValid = ::OpenAPI::fromJsonValue(m_vpn_link_connections, json[QString("vpnLinkConnections")]);
    m_vpn_link_connections_isSet = !json[QString("vpnLinkConnections")].isNull() && m_vpn_link_connections_isValid;
}

QString OAIVpnConnectionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVpnConnectionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_bandwidth_isSet) {
        obj.insert(QString("connectionBandwidth"), ::OpenAPI::toJsonValue(m_connection_bandwidth));
    }
    if (m_connection_status.isSet()) {
        obj.insert(QString("connectionStatus"), ::OpenAPI::toJsonValue(m_connection_status));
    }
    if (m_egress_bytes_transferred_isSet) {
        obj.insert(QString("egressBytesTransferred"), ::OpenAPI::toJsonValue(m_egress_bytes_transferred));
    }
    if (m_enable_bgp_isSet) {
        obj.insert(QString("enableBgp"), ::OpenAPI::toJsonValue(m_enable_bgp));
    }
    if (m_enable_internet_security_isSet) {
        obj.insert(QString("enableInternetSecurity"), ::OpenAPI::toJsonValue(m_enable_internet_security));
    }
    if (m_enable_rate_limiting_isSet) {
        obj.insert(QString("enableRateLimiting"), ::OpenAPI::toJsonValue(m_enable_rate_limiting));
    }
    if (m_ingress_bytes_transferred_isSet) {
        obj.insert(QString("ingressBytesTransferred"), ::OpenAPI::toJsonValue(m_ingress_bytes_transferred));
    }
    if (m_ipsec_policies.size() > 0) {
        obj.insert(QString("ipsecPolicies"), ::OpenAPI::toJsonValue(m_ipsec_policies));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_remote_vpn_site.isSet()) {
        obj.insert(QString("remoteVpnSite"), ::OpenAPI::toJsonValue(m_remote_vpn_site));
    }
    if (m_routing_weight_isSet) {
        obj.insert(QString("routingWeight"), ::OpenAPI::toJsonValue(m_routing_weight));
    }
    if (m_shared_key_isSet) {
        obj.insert(QString("sharedKey"), ::OpenAPI::toJsonValue(m_shared_key));
    }
    if (m_use_local_azure_ip_address_isSet) {
        obj.insert(QString("useLocalAzureIpAddress"), ::OpenAPI::toJsonValue(m_use_local_azure_ip_address));
    }
    if (m_use_policy_based_traffic_selectors_isSet) {
        obj.insert(QString("usePolicyBasedTrafficSelectors"), ::OpenAPI::toJsonValue(m_use_policy_based_traffic_selectors));
    }
    if (m_vpn_connection_protocol_type_isSet) {
        obj.insert(QString("vpnConnectionProtocolType"), ::OpenAPI::toJsonValue(m_vpn_connection_protocol_type));
    }
    if (m_vpn_link_connections.size() > 0) {
        obj.insert(QString("vpnLinkConnections"), ::OpenAPI::toJsonValue(m_vpn_link_connections));
    }
    return obj;
}

qint32 OAIVpnConnectionProperties::getConnectionBandwidth() const {
    return m_connection_bandwidth;
}
void OAIVpnConnectionProperties::setConnectionBandwidth(const qint32 &connection_bandwidth) {
    m_connection_bandwidth = connection_bandwidth;
    m_connection_bandwidth_isSet = true;
}

bool OAIVpnConnectionProperties::is_connection_bandwidth_Set() const{
    return m_connection_bandwidth_isSet;
}

bool OAIVpnConnectionProperties::is_connection_bandwidth_Valid() const{
    return m_connection_bandwidth_isValid;
}

OAIVpnConnectionStatus OAIVpnConnectionProperties::getConnectionStatus() const {
    return m_connection_status;
}
void OAIVpnConnectionProperties::setConnectionStatus(const OAIVpnConnectionStatus &connection_status) {
    m_connection_status = connection_status;
    m_connection_status_isSet = true;
}

bool OAIVpnConnectionProperties::is_connection_status_Set() const{
    return m_connection_status_isSet;
}

bool OAIVpnConnectionProperties::is_connection_status_Valid() const{
    return m_connection_status_isValid;
}

qint64 OAIVpnConnectionProperties::getEgressBytesTransferred() const {
    return m_egress_bytes_transferred;
}
void OAIVpnConnectionProperties::setEgressBytesTransferred(const qint64 &egress_bytes_transferred) {
    m_egress_bytes_transferred = egress_bytes_transferred;
    m_egress_bytes_transferred_isSet = true;
}

bool OAIVpnConnectionProperties::is_egress_bytes_transferred_Set() const{
    return m_egress_bytes_transferred_isSet;
}

bool OAIVpnConnectionProperties::is_egress_bytes_transferred_Valid() const{
    return m_egress_bytes_transferred_isValid;
}

bool OAIVpnConnectionProperties::isEnableBgp() const {
    return m_enable_bgp;
}
void OAIVpnConnectionProperties::setEnableBgp(const bool &enable_bgp) {
    m_enable_bgp = enable_bgp;
    m_enable_bgp_isSet = true;
}

bool OAIVpnConnectionProperties::is_enable_bgp_Set() const{
    return m_enable_bgp_isSet;
}

bool OAIVpnConnectionProperties::is_enable_bgp_Valid() const{
    return m_enable_bgp_isValid;
}

bool OAIVpnConnectionProperties::isEnableInternetSecurity() const {
    return m_enable_internet_security;
}
void OAIVpnConnectionProperties::setEnableInternetSecurity(const bool &enable_internet_security) {
    m_enable_internet_security = enable_internet_security;
    m_enable_internet_security_isSet = true;
}

bool OAIVpnConnectionProperties::is_enable_internet_security_Set() const{
    return m_enable_internet_security_isSet;
}

bool OAIVpnConnectionProperties::is_enable_internet_security_Valid() const{
    return m_enable_internet_security_isValid;
}

bool OAIVpnConnectionProperties::isEnableRateLimiting() const {
    return m_enable_rate_limiting;
}
void OAIVpnConnectionProperties::setEnableRateLimiting(const bool &enable_rate_limiting) {
    m_enable_rate_limiting = enable_rate_limiting;
    m_enable_rate_limiting_isSet = true;
}

bool OAIVpnConnectionProperties::is_enable_rate_limiting_Set() const{
    return m_enable_rate_limiting_isSet;
}

bool OAIVpnConnectionProperties::is_enable_rate_limiting_Valid() const{
    return m_enable_rate_limiting_isValid;
}

qint64 OAIVpnConnectionProperties::getIngressBytesTransferred() const {
    return m_ingress_bytes_transferred;
}
void OAIVpnConnectionProperties::setIngressBytesTransferred(const qint64 &ingress_bytes_transferred) {
    m_ingress_bytes_transferred = ingress_bytes_transferred;
    m_ingress_bytes_transferred_isSet = true;
}

bool OAIVpnConnectionProperties::is_ingress_bytes_transferred_Set() const{
    return m_ingress_bytes_transferred_isSet;
}

bool OAIVpnConnectionProperties::is_ingress_bytes_transferred_Valid() const{
    return m_ingress_bytes_transferred_isValid;
}

QList<OAIP2SVpnServerConfigurationProperties_vpnClientIpsecPolicies_inner> OAIVpnConnectionProperties::getIpsecPolicies() const {
    return m_ipsec_policies;
}
void OAIVpnConnectionProperties::setIpsecPolicies(const QList<OAIP2SVpnServerConfigurationProperties_vpnClientIpsecPolicies_inner> &ipsec_policies) {
    m_ipsec_policies = ipsec_policies;
    m_ipsec_policies_isSet = true;
}

bool OAIVpnConnectionProperties::is_ipsec_policies_Set() const{
    return m_ipsec_policies_isSet;
}

bool OAIVpnConnectionProperties::is_ipsec_policies_Valid() const{
    return m_ipsec_policies_isValid;
}

QString OAIVpnConnectionProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIVpnConnectionProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIVpnConnectionProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIVpnConnectionProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork OAIVpnConnectionProperties::getRemoteVpnSite() const {
    return m_remote_vpn_site;
}
void OAIVpnConnectionProperties::setRemoteVpnSite(const OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork &remote_vpn_site) {
    m_remote_vpn_site = remote_vpn_site;
    m_remote_vpn_site_isSet = true;
}

bool OAIVpnConnectionProperties::is_remote_vpn_site_Set() const{
    return m_remote_vpn_site_isSet;
}

bool OAIVpnConnectionProperties::is_remote_vpn_site_Valid() const{
    return m_remote_vpn_site_isValid;
}

qint32 OAIVpnConnectionProperties::getRoutingWeight() const {
    return m_routing_weight;
}
void OAIVpnConnectionProperties::setRoutingWeight(const qint32 &routing_weight) {
    m_routing_weight = routing_weight;
    m_routing_weight_isSet = true;
}

bool OAIVpnConnectionProperties::is_routing_weight_Set() const{
    return m_routing_weight_isSet;
}

bool OAIVpnConnectionProperties::is_routing_weight_Valid() const{
    return m_routing_weight_isValid;
}

QString OAIVpnConnectionProperties::getSharedKey() const {
    return m_shared_key;
}
void OAIVpnConnectionProperties::setSharedKey(const QString &shared_key) {
    m_shared_key = shared_key;
    m_shared_key_isSet = true;
}

bool OAIVpnConnectionProperties::is_shared_key_Set() const{
    return m_shared_key_isSet;
}

bool OAIVpnConnectionProperties::is_shared_key_Valid() const{
    return m_shared_key_isValid;
}

bool OAIVpnConnectionProperties::isUseLocalAzureIpAddress() const {
    return m_use_local_azure_ip_address;
}
void OAIVpnConnectionProperties::setUseLocalAzureIpAddress(const bool &use_local_azure_ip_address) {
    m_use_local_azure_ip_address = use_local_azure_ip_address;
    m_use_local_azure_ip_address_isSet = true;
}

bool OAIVpnConnectionProperties::is_use_local_azure_ip_address_Set() const{
    return m_use_local_azure_ip_address_isSet;
}

bool OAIVpnConnectionProperties::is_use_local_azure_ip_address_Valid() const{
    return m_use_local_azure_ip_address_isValid;
}

bool OAIVpnConnectionProperties::isUsePolicyBasedTrafficSelectors() const {
    return m_use_policy_based_traffic_selectors;
}
void OAIVpnConnectionProperties::setUsePolicyBasedTrafficSelectors(const bool &use_policy_based_traffic_selectors) {
    m_use_policy_based_traffic_selectors = use_policy_based_traffic_selectors;
    m_use_policy_based_traffic_selectors_isSet = true;
}

bool OAIVpnConnectionProperties::is_use_policy_based_traffic_selectors_Set() const{
    return m_use_policy_based_traffic_selectors_isSet;
}

bool OAIVpnConnectionProperties::is_use_policy_based_traffic_selectors_Valid() const{
    return m_use_policy_based_traffic_selectors_isValid;
}

QString OAIVpnConnectionProperties::getVpnConnectionProtocolType() const {
    return m_vpn_connection_protocol_type;
}
void OAIVpnConnectionProperties::setVpnConnectionProtocolType(const QString &vpn_connection_protocol_type) {
    m_vpn_connection_protocol_type = vpn_connection_protocol_type;
    m_vpn_connection_protocol_type_isSet = true;
}

bool OAIVpnConnectionProperties::is_vpn_connection_protocol_type_Set() const{
    return m_vpn_connection_protocol_type_isSet;
}

bool OAIVpnConnectionProperties::is_vpn_connection_protocol_type_Valid() const{
    return m_vpn_connection_protocol_type_isValid;
}

QList<OAIVpnSiteLinkConnection> OAIVpnConnectionProperties::getVpnLinkConnections() const {
    return m_vpn_link_connections;
}
void OAIVpnConnectionProperties::setVpnLinkConnections(const QList<OAIVpnSiteLinkConnection> &vpn_link_connections) {
    m_vpn_link_connections = vpn_link_connections;
    m_vpn_link_connections_isSet = true;
}

bool OAIVpnConnectionProperties::is_vpn_link_connections_Set() const{
    return m_vpn_link_connections_isSet;
}

bool OAIVpnConnectionProperties::is_vpn_link_connections_Valid() const{
    return m_vpn_link_connections_isValid;
}

bool OAIVpnConnectionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_bandwidth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_egress_bytes_transferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_bgp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_internet_security_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_rate_limiting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingress_bytes_transferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipsec_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_vpn_site.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_local_azure_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_policy_based_traffic_selectors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_connection_protocol_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_link_connections.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVpnConnectionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
