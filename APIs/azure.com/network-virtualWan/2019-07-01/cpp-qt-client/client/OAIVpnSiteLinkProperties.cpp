/**
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVpnSiteLinkProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVpnSiteLinkProperties::OAIVpnSiteLinkProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVpnSiteLinkProperties::OAIVpnSiteLinkProperties() {
    this->initializeModel();
}

OAIVpnSiteLinkProperties::~OAIVpnSiteLinkProperties() {}

void OAIVpnSiteLinkProperties::initializeModel() {

    m_bgp_properties_isSet = false;
    m_bgp_properties_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_link_properties_isSet = false;
    m_link_properties_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIVpnSiteLinkProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVpnSiteLinkProperties::fromJsonObject(QJsonObject json) {

    m_bgp_properties_isValid = ::OpenAPI::fromJsonValue(m_bgp_properties, json[QString("bgpProperties")]);
    m_bgp_properties_isSet = !json[QString("bgpProperties")].isNull() && m_bgp_properties_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_link_properties_isValid = ::OpenAPI::fromJsonValue(m_link_properties, json[QString("linkProperties")]);
    m_link_properties_isSet = !json[QString("linkProperties")].isNull() && m_link_properties_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIVpnSiteLinkProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVpnSiteLinkProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_bgp_properties.isSet()) {
        obj.insert(QString("bgpProperties"), ::OpenAPI::toJsonValue(m_bgp_properties));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_link_properties.isSet()) {
        obj.insert(QString("linkProperties"), ::OpenAPI::toJsonValue(m_link_properties));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

OAIVpnLinkBgpSettings OAIVpnSiteLinkProperties::getBgpProperties() const {
    return m_bgp_properties;
}
void OAIVpnSiteLinkProperties::setBgpProperties(const OAIVpnLinkBgpSettings &bgp_properties) {
    m_bgp_properties = bgp_properties;
    m_bgp_properties_isSet = true;
}

bool OAIVpnSiteLinkProperties::is_bgp_properties_Set() const{
    return m_bgp_properties_isSet;
}

bool OAIVpnSiteLinkProperties::is_bgp_properties_Valid() const{
    return m_bgp_properties_isValid;
}

QString OAIVpnSiteLinkProperties::getIpAddress() const {
    return m_ip_address;
}
void OAIVpnSiteLinkProperties::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIVpnSiteLinkProperties::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIVpnSiteLinkProperties::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

OAIVpnLinkProviderProperties OAIVpnSiteLinkProperties::getLinkProperties() const {
    return m_link_properties;
}
void OAIVpnSiteLinkProperties::setLinkProperties(const OAIVpnLinkProviderProperties &link_properties) {
    m_link_properties = link_properties;
    m_link_properties_isSet = true;
}

bool OAIVpnSiteLinkProperties::is_link_properties_Set() const{
    return m_link_properties_isSet;
}

bool OAIVpnSiteLinkProperties::is_link_properties_Valid() const{
    return m_link_properties_isValid;
}

QString OAIVpnSiteLinkProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIVpnSiteLinkProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIVpnSiteLinkProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIVpnSiteLinkProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIVpnSiteLinkProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bgp_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVpnSiteLinkProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
