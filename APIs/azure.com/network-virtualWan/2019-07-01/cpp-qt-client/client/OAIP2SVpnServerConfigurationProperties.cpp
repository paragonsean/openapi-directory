/**
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIP2SVpnServerConfigurationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIP2SVpnServerConfigurationProperties::OAIP2SVpnServerConfigurationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIP2SVpnServerConfigurationProperties::OAIP2SVpnServerConfigurationProperties() {
    this->initializeModel();
}

OAIP2SVpnServerConfigurationProperties::~OAIP2SVpnServerConfigurationProperties() {}

void OAIP2SVpnServerConfigurationProperties::initializeModel() {

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_p2_s_vpn_gateways_isSet = false;
    m_p2_s_vpn_gateways_isValid = false;

    m_p2_s_vpn_server_config_radius_client_root_certificates_isSet = false;
    m_p2_s_vpn_server_config_radius_client_root_certificates_isValid = false;

    m_p2_s_vpn_server_config_radius_server_root_certificates_isSet = false;
    m_p2_s_vpn_server_config_radius_server_root_certificates_isValid = false;

    m_p2_s_vpn_server_config_vpn_client_revoked_certificates_isSet = false;
    m_p2_s_vpn_server_config_vpn_client_revoked_certificates_isValid = false;

    m_p2_s_vpn_server_config_vpn_client_root_certificates_isSet = false;
    m_p2_s_vpn_server_config_vpn_client_root_certificates_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_radius_server_address_isSet = false;
    m_radius_server_address_isValid = false;

    m_radius_server_secret_isSet = false;
    m_radius_server_secret_isValid = false;

    m_vpn_client_ipsec_policies_isSet = false;
    m_vpn_client_ipsec_policies_isValid = false;

    m_vpn_protocols_isSet = false;
    m_vpn_protocols_isValid = false;
}

void OAIP2SVpnServerConfigurationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIP2SVpnServerConfigurationProperties::fromJsonObject(QJsonObject json) {

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_p2_s_vpn_gateways_isValid = ::OpenAPI::fromJsonValue(m_p2_s_vpn_gateways, json[QString("p2SVpnGateways")]);
    m_p2_s_vpn_gateways_isSet = !json[QString("p2SVpnGateways")].isNull() && m_p2_s_vpn_gateways_isValid;

    m_p2_s_vpn_server_config_radius_client_root_certificates_isValid = ::OpenAPI::fromJsonValue(m_p2_s_vpn_server_config_radius_client_root_certificates, json[QString("p2SVpnServerConfigRadiusClientRootCertificates")]);
    m_p2_s_vpn_server_config_radius_client_root_certificates_isSet = !json[QString("p2SVpnServerConfigRadiusClientRootCertificates")].isNull() && m_p2_s_vpn_server_config_radius_client_root_certificates_isValid;

    m_p2_s_vpn_server_config_radius_server_root_certificates_isValid = ::OpenAPI::fromJsonValue(m_p2_s_vpn_server_config_radius_server_root_certificates, json[QString("p2SVpnServerConfigRadiusServerRootCertificates")]);
    m_p2_s_vpn_server_config_radius_server_root_certificates_isSet = !json[QString("p2SVpnServerConfigRadiusServerRootCertificates")].isNull() && m_p2_s_vpn_server_config_radius_server_root_certificates_isValid;

    m_p2_s_vpn_server_config_vpn_client_revoked_certificates_isValid = ::OpenAPI::fromJsonValue(m_p2_s_vpn_server_config_vpn_client_revoked_certificates, json[QString("p2SVpnServerConfigVpnClientRevokedCertificates")]);
    m_p2_s_vpn_server_config_vpn_client_revoked_certificates_isSet = !json[QString("p2SVpnServerConfigVpnClientRevokedCertificates")].isNull() && m_p2_s_vpn_server_config_vpn_client_revoked_certificates_isValid;

    m_p2_s_vpn_server_config_vpn_client_root_certificates_isValid = ::OpenAPI::fromJsonValue(m_p2_s_vpn_server_config_vpn_client_root_certificates, json[QString("p2SVpnServerConfigVpnClientRootCertificates")]);
    m_p2_s_vpn_server_config_vpn_client_root_certificates_isSet = !json[QString("p2SVpnServerConfigVpnClientRootCertificates")].isNull() && m_p2_s_vpn_server_config_vpn_client_root_certificates_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_radius_server_address_isValid = ::OpenAPI::fromJsonValue(m_radius_server_address, json[QString("radiusServerAddress")]);
    m_radius_server_address_isSet = !json[QString("radiusServerAddress")].isNull() && m_radius_server_address_isValid;

    m_radius_server_secret_isValid = ::OpenAPI::fromJsonValue(m_radius_server_secret, json[QString("radiusServerSecret")]);
    m_radius_server_secret_isSet = !json[QString("radiusServerSecret")].isNull() && m_radius_server_secret_isValid;

    m_vpn_client_ipsec_policies_isValid = ::OpenAPI::fromJsonValue(m_vpn_client_ipsec_policies, json[QString("vpnClientIpsecPolicies")]);
    m_vpn_client_ipsec_policies_isSet = !json[QString("vpnClientIpsecPolicies")].isNull() && m_vpn_client_ipsec_policies_isValid;

    m_vpn_protocols_isValid = ::OpenAPI::fromJsonValue(m_vpn_protocols, json[QString("vpnProtocols")]);
    m_vpn_protocols_isSet = !json[QString("vpnProtocols")].isNull() && m_vpn_protocols_isValid;
}

QString OAIP2SVpnServerConfigurationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIP2SVpnServerConfigurationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_p2_s_vpn_gateways.size() > 0) {
        obj.insert(QString("p2SVpnGateways"), ::OpenAPI::toJsonValue(m_p2_s_vpn_gateways));
    }
    if (m_p2_s_vpn_server_config_radius_client_root_certificates.size() > 0) {
        obj.insert(QString("p2SVpnServerConfigRadiusClientRootCertificates"), ::OpenAPI::toJsonValue(m_p2_s_vpn_server_config_radius_client_root_certificates));
    }
    if (m_p2_s_vpn_server_config_radius_server_root_certificates.size() > 0) {
        obj.insert(QString("p2SVpnServerConfigRadiusServerRootCertificates"), ::OpenAPI::toJsonValue(m_p2_s_vpn_server_config_radius_server_root_certificates));
    }
    if (m_p2_s_vpn_server_config_vpn_client_revoked_certificates.size() > 0) {
        obj.insert(QString("p2SVpnServerConfigVpnClientRevokedCertificates"), ::OpenAPI::toJsonValue(m_p2_s_vpn_server_config_vpn_client_revoked_certificates));
    }
    if (m_p2_s_vpn_server_config_vpn_client_root_certificates.size() > 0) {
        obj.insert(QString("p2SVpnServerConfigVpnClientRootCertificates"), ::OpenAPI::toJsonValue(m_p2_s_vpn_server_config_vpn_client_root_certificates));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_radius_server_address_isSet) {
        obj.insert(QString("radiusServerAddress"), ::OpenAPI::toJsonValue(m_radius_server_address));
    }
    if (m_radius_server_secret_isSet) {
        obj.insert(QString("radiusServerSecret"), ::OpenAPI::toJsonValue(m_radius_server_secret));
    }
    if (m_vpn_client_ipsec_policies.size() > 0) {
        obj.insert(QString("vpnClientIpsecPolicies"), ::OpenAPI::toJsonValue(m_vpn_client_ipsec_policies));
    }
    if (m_vpn_protocols.size() > 0) {
        obj.insert(QString("vpnProtocols"), ::OpenAPI::toJsonValue(m_vpn_protocols));
    }
    return obj;
}

QString OAIP2SVpnServerConfigurationProperties::getEtag() const {
    return m_etag;
}
void OAIP2SVpnServerConfigurationProperties::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIP2SVpnServerConfigurationProperties::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIP2SVpnServerConfigurationProperties::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIP2SVpnServerConfigurationProperties::getName() const {
    return m_name;
}
void OAIP2SVpnServerConfigurationProperties::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIP2SVpnServerConfigurationProperties::is_name_Set() const{
    return m_name_isSet;
}

bool OAIP2SVpnServerConfigurationProperties::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork> OAIP2SVpnServerConfigurationProperties::getP2SVpnGateways() const {
    return m_p2_s_vpn_gateways;
}
void OAIP2SVpnServerConfigurationProperties::setP2SVpnGateways(const QList<OAIHubVirtualNetworkConnectionProperties_remoteVirtualNetwork> &p2_s_vpn_gateways) {
    m_p2_s_vpn_gateways = p2_s_vpn_gateways;
    m_p2_s_vpn_gateways_isSet = true;
}

bool OAIP2SVpnServerConfigurationProperties::is_p2_s_vpn_gateways_Set() const{
    return m_p2_s_vpn_gateways_isSet;
}

bool OAIP2SVpnServerConfigurationProperties::is_p2_s_vpn_gateways_Valid() const{
    return m_p2_s_vpn_gateways_isValid;
}

QList<OAIP2SVpnServerConfigRadiusClientRootCertificate> OAIP2SVpnServerConfigurationProperties::getP2SVpnServerConfigRadiusClientRootCertificates() const {
    return m_p2_s_vpn_server_config_radius_client_root_certificates;
}
void OAIP2SVpnServerConfigurationProperties::setP2SVpnServerConfigRadiusClientRootCertificates(const QList<OAIP2SVpnServerConfigRadiusClientRootCertificate> &p2_s_vpn_server_config_radius_client_root_certificates) {
    m_p2_s_vpn_server_config_radius_client_root_certificates = p2_s_vpn_server_config_radius_client_root_certificates;
    m_p2_s_vpn_server_config_radius_client_root_certificates_isSet = true;
}

bool OAIP2SVpnServerConfigurationProperties::is_p2_s_vpn_server_config_radius_client_root_certificates_Set() const{
    return m_p2_s_vpn_server_config_radius_client_root_certificates_isSet;
}

bool OAIP2SVpnServerConfigurationProperties::is_p2_s_vpn_server_config_radius_client_root_certificates_Valid() const{
    return m_p2_s_vpn_server_config_radius_client_root_certificates_isValid;
}

QList<OAIP2SVpnServerConfigRadiusServerRootCertificate> OAIP2SVpnServerConfigurationProperties::getP2SVpnServerConfigRadiusServerRootCertificates() const {
    return m_p2_s_vpn_server_config_radius_server_root_certificates;
}
void OAIP2SVpnServerConfigurationProperties::setP2SVpnServerConfigRadiusServerRootCertificates(const QList<OAIP2SVpnServerConfigRadiusServerRootCertificate> &p2_s_vpn_server_config_radius_server_root_certificates) {
    m_p2_s_vpn_server_config_radius_server_root_certificates = p2_s_vpn_server_config_radius_server_root_certificates;
    m_p2_s_vpn_server_config_radius_server_root_certificates_isSet = true;
}

bool OAIP2SVpnServerConfigurationProperties::is_p2_s_vpn_server_config_radius_server_root_certificates_Set() const{
    return m_p2_s_vpn_server_config_radius_server_root_certificates_isSet;
}

bool OAIP2SVpnServerConfigurationProperties::is_p2_s_vpn_server_config_radius_server_root_certificates_Valid() const{
    return m_p2_s_vpn_server_config_radius_server_root_certificates_isValid;
}

QList<OAIP2SVpnServerConfigVpnClientRevokedCertificate> OAIP2SVpnServerConfigurationProperties::getP2SVpnServerConfigVpnClientRevokedCertificates() const {
    return m_p2_s_vpn_server_config_vpn_client_revoked_certificates;
}
void OAIP2SVpnServerConfigurationProperties::setP2SVpnServerConfigVpnClientRevokedCertificates(const QList<OAIP2SVpnServerConfigVpnClientRevokedCertificate> &p2_s_vpn_server_config_vpn_client_revoked_certificates) {
    m_p2_s_vpn_server_config_vpn_client_revoked_certificates = p2_s_vpn_server_config_vpn_client_revoked_certificates;
    m_p2_s_vpn_server_config_vpn_client_revoked_certificates_isSet = true;
}

bool OAIP2SVpnServerConfigurationProperties::is_p2_s_vpn_server_config_vpn_client_revoked_certificates_Set() const{
    return m_p2_s_vpn_server_config_vpn_client_revoked_certificates_isSet;
}

bool OAIP2SVpnServerConfigurationProperties::is_p2_s_vpn_server_config_vpn_client_revoked_certificates_Valid() const{
    return m_p2_s_vpn_server_config_vpn_client_revoked_certificates_isValid;
}

QList<OAIP2SVpnServerConfigVpnClientRootCertificate> OAIP2SVpnServerConfigurationProperties::getP2SVpnServerConfigVpnClientRootCertificates() const {
    return m_p2_s_vpn_server_config_vpn_client_root_certificates;
}
void OAIP2SVpnServerConfigurationProperties::setP2SVpnServerConfigVpnClientRootCertificates(const QList<OAIP2SVpnServerConfigVpnClientRootCertificate> &p2_s_vpn_server_config_vpn_client_root_certificates) {
    m_p2_s_vpn_server_config_vpn_client_root_certificates = p2_s_vpn_server_config_vpn_client_root_certificates;
    m_p2_s_vpn_server_config_vpn_client_root_certificates_isSet = true;
}

bool OAIP2SVpnServerConfigurationProperties::is_p2_s_vpn_server_config_vpn_client_root_certificates_Set() const{
    return m_p2_s_vpn_server_config_vpn_client_root_certificates_isSet;
}

bool OAIP2SVpnServerConfigurationProperties::is_p2_s_vpn_server_config_vpn_client_root_certificates_Valid() const{
    return m_p2_s_vpn_server_config_vpn_client_root_certificates_isValid;
}

QString OAIP2SVpnServerConfigurationProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIP2SVpnServerConfigurationProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIP2SVpnServerConfigurationProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIP2SVpnServerConfigurationProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIP2SVpnServerConfigurationProperties::getRadiusServerAddress() const {
    return m_radius_server_address;
}
void OAIP2SVpnServerConfigurationProperties::setRadiusServerAddress(const QString &radius_server_address) {
    m_radius_server_address = radius_server_address;
    m_radius_server_address_isSet = true;
}

bool OAIP2SVpnServerConfigurationProperties::is_radius_server_address_Set() const{
    return m_radius_server_address_isSet;
}

bool OAIP2SVpnServerConfigurationProperties::is_radius_server_address_Valid() const{
    return m_radius_server_address_isValid;
}

QString OAIP2SVpnServerConfigurationProperties::getRadiusServerSecret() const {
    return m_radius_server_secret;
}
void OAIP2SVpnServerConfigurationProperties::setRadiusServerSecret(const QString &radius_server_secret) {
    m_radius_server_secret = radius_server_secret;
    m_radius_server_secret_isSet = true;
}

bool OAIP2SVpnServerConfigurationProperties::is_radius_server_secret_Set() const{
    return m_radius_server_secret_isSet;
}

bool OAIP2SVpnServerConfigurationProperties::is_radius_server_secret_Valid() const{
    return m_radius_server_secret_isValid;
}

QList<OAIP2SVpnServerConfigurationProperties_vpnClientIpsecPolicies_inner> OAIP2SVpnServerConfigurationProperties::getVpnClientIpsecPolicies() const {
    return m_vpn_client_ipsec_policies;
}
void OAIP2SVpnServerConfigurationProperties::setVpnClientIpsecPolicies(const QList<OAIP2SVpnServerConfigurationProperties_vpnClientIpsecPolicies_inner> &vpn_client_ipsec_policies) {
    m_vpn_client_ipsec_policies = vpn_client_ipsec_policies;
    m_vpn_client_ipsec_policies_isSet = true;
}

bool OAIP2SVpnServerConfigurationProperties::is_vpn_client_ipsec_policies_Set() const{
    return m_vpn_client_ipsec_policies_isSet;
}

bool OAIP2SVpnServerConfigurationProperties::is_vpn_client_ipsec_policies_Valid() const{
    return m_vpn_client_ipsec_policies_isValid;
}

QList<QString> OAIP2SVpnServerConfigurationProperties::getVpnProtocols() const {
    return m_vpn_protocols;
}
void OAIP2SVpnServerConfigurationProperties::setVpnProtocols(const QList<QString> &vpn_protocols) {
    m_vpn_protocols = vpn_protocols;
    m_vpn_protocols_isSet = true;
}

bool OAIP2SVpnServerConfigurationProperties::is_vpn_protocols_Set() const{
    return m_vpn_protocols_isSet;
}

bool OAIP2SVpnServerConfigurationProperties::is_vpn_protocols_Valid() const{
    return m_vpn_protocols_isValid;
}

bool OAIP2SVpnServerConfigurationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p2_s_vpn_gateways.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_p2_s_vpn_server_config_radius_client_root_certificates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_p2_s_vpn_server_config_radius_server_root_certificates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_p2_s_vpn_server_config_vpn_client_revoked_certificates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_p2_s_vpn_server_config_vpn_client_root_certificates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_server_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_server_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_client_ipsec_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_protocols.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIP2SVpnServerConfigurationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
