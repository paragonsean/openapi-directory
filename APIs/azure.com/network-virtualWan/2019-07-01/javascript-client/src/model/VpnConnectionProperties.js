/**
 * VirtualWANAsAServiceManagementClient
 * REST API for Azure VirtualWAN As a Service.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork from './HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork';
import P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner from './P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner';
import VpnConnectionStatus from './VpnConnectionStatus';
import VpnSiteLinkConnection from './VpnSiteLinkConnection';

/**
 * The VpnConnectionProperties model module.
 * @module model/VpnConnectionProperties
 * @version 2019-07-01
 */
class VpnConnectionProperties {
    /**
     * Constructs a new <code>VpnConnectionProperties</code>.
     * Parameters for VpnConnection.
     * @alias module:model/VpnConnectionProperties
     */
    constructor() { 
        
        VpnConnectionProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VpnConnectionProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VpnConnectionProperties} obj Optional instance to populate.
     * @return {module:model/VpnConnectionProperties} The populated <code>VpnConnectionProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VpnConnectionProperties();

            if (data.hasOwnProperty('connectionBandwidth')) {
                obj['connectionBandwidth'] = ApiClient.convertToType(data['connectionBandwidth'], 'Number');
            }
            if (data.hasOwnProperty('connectionStatus')) {
                obj['connectionStatus'] = VpnConnectionStatus.constructFromObject(data['connectionStatus']);
            }
            if (data.hasOwnProperty('egressBytesTransferred')) {
                obj['egressBytesTransferred'] = ApiClient.convertToType(data['egressBytesTransferred'], 'Number');
            }
            if (data.hasOwnProperty('enableBgp')) {
                obj['enableBgp'] = ApiClient.convertToType(data['enableBgp'], 'Boolean');
            }
            if (data.hasOwnProperty('enableInternetSecurity')) {
                obj['enableInternetSecurity'] = ApiClient.convertToType(data['enableInternetSecurity'], 'Boolean');
            }
            if (data.hasOwnProperty('enableRateLimiting')) {
                obj['enableRateLimiting'] = ApiClient.convertToType(data['enableRateLimiting'], 'Boolean');
            }
            if (data.hasOwnProperty('ingressBytesTransferred')) {
                obj['ingressBytesTransferred'] = ApiClient.convertToType(data['ingressBytesTransferred'], 'Number');
            }
            if (data.hasOwnProperty('ipsecPolicies')) {
                obj['ipsecPolicies'] = ApiClient.convertToType(data['ipsecPolicies'], [P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner]);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('remoteVpnSite')) {
                obj['remoteVpnSite'] = HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork.constructFromObject(data['remoteVpnSite']);
            }
            if (data.hasOwnProperty('routingWeight')) {
                obj['routingWeight'] = ApiClient.convertToType(data['routingWeight'], 'Number');
            }
            if (data.hasOwnProperty('sharedKey')) {
                obj['sharedKey'] = ApiClient.convertToType(data['sharedKey'], 'String');
            }
            if (data.hasOwnProperty('useLocalAzureIpAddress')) {
                obj['useLocalAzureIpAddress'] = ApiClient.convertToType(data['useLocalAzureIpAddress'], 'Boolean');
            }
            if (data.hasOwnProperty('usePolicyBasedTrafficSelectors')) {
                obj['usePolicyBasedTrafficSelectors'] = ApiClient.convertToType(data['usePolicyBasedTrafficSelectors'], 'Boolean');
            }
            if (data.hasOwnProperty('vpnConnectionProtocolType')) {
                obj['vpnConnectionProtocolType'] = ApiClient.convertToType(data['vpnConnectionProtocolType'], 'String');
            }
            if (data.hasOwnProperty('vpnLinkConnections')) {
                obj['vpnLinkConnections'] = ApiClient.convertToType(data['vpnLinkConnections'], [VpnSiteLinkConnection]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VpnConnectionProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VpnConnectionProperties</code>.
     */
    static validateJSON(data) {
        if (data['ipsecPolicies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ipsecPolicies'])) {
                throw new Error("Expected the field `ipsecPolicies` to be an array in the JSON data but got " + data['ipsecPolicies']);
            }
            // validate the optional field `ipsecPolicies` (array)
            for (const item of data['ipsecPolicies']) {
                P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // validate the optional field `remoteVpnSite`
        if (data['remoteVpnSite']) { // data not null
          HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork.validateJSON(data['remoteVpnSite']);
        }
        // ensure the json data is a string
        if (data['sharedKey'] && !(typeof data['sharedKey'] === 'string' || data['sharedKey'] instanceof String)) {
            throw new Error("Expected the field `sharedKey` to be a primitive type in the JSON string but got " + data['sharedKey']);
        }
        // ensure the json data is a string
        if (data['vpnConnectionProtocolType'] && !(typeof data['vpnConnectionProtocolType'] === 'string' || data['vpnConnectionProtocolType'] instanceof String)) {
            throw new Error("Expected the field `vpnConnectionProtocolType` to be a primitive type in the JSON string but got " + data['vpnConnectionProtocolType']);
        }
        if (data['vpnLinkConnections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['vpnLinkConnections'])) {
                throw new Error("Expected the field `vpnLinkConnections` to be an array in the JSON data but got " + data['vpnLinkConnections']);
            }
            // validate the optional field `vpnLinkConnections` (array)
            for (const item of data['vpnLinkConnections']) {
                VpnSiteLinkConnection.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Expected bandwidth in MBPS.
 * @member {Number} connectionBandwidth
 */
VpnConnectionProperties.prototype['connectionBandwidth'] = undefined;

/**
 * @member {module:model/VpnConnectionStatus} connectionStatus
 */
VpnConnectionProperties.prototype['connectionStatus'] = undefined;

/**
 * Egress bytes transferred.
 * @member {Number} egressBytesTransferred
 */
VpnConnectionProperties.prototype['egressBytesTransferred'] = undefined;

/**
 * EnableBgp flag.
 * @member {Boolean} enableBgp
 */
VpnConnectionProperties.prototype['enableBgp'] = undefined;

/**
 * Enable internet security.
 * @member {Boolean} enableInternetSecurity
 */
VpnConnectionProperties.prototype['enableInternetSecurity'] = undefined;

/**
 * EnableBgp flag.
 * @member {Boolean} enableRateLimiting
 */
VpnConnectionProperties.prototype['enableRateLimiting'] = undefined;

/**
 * Ingress bytes transferred.
 * @member {Number} ingressBytesTransferred
 */
VpnConnectionProperties.prototype['ingressBytesTransferred'] = undefined;

/**
 * The IPSec Policies to be considered by this connection.
 * @member {Array.<module:model/P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner>} ipsecPolicies
 */
VpnConnectionProperties.prototype['ipsecPolicies'] = undefined;

/**
 * The current provisioning state.
 * @member {module:model/VpnConnectionProperties.ProvisioningStateEnum} provisioningState
 */
VpnConnectionProperties.prototype['provisioningState'] = undefined;

/**
 * @member {module:model/HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork} remoteVpnSite
 */
VpnConnectionProperties.prototype['remoteVpnSite'] = undefined;

/**
 * Routing weight for vpn connection.
 * @member {Number} routingWeight
 */
VpnConnectionProperties.prototype['routingWeight'] = undefined;

/**
 * SharedKey for the vpn connection.
 * @member {String} sharedKey
 */
VpnConnectionProperties.prototype['sharedKey'] = undefined;

/**
 * Use local azure ip to initiate connection.
 * @member {Boolean} useLocalAzureIpAddress
 */
VpnConnectionProperties.prototype['useLocalAzureIpAddress'] = undefined;

/**
 * Enable policy-based traffic selectors.
 * @member {Boolean} usePolicyBasedTrafficSelectors
 */
VpnConnectionProperties.prototype['usePolicyBasedTrafficSelectors'] = undefined;

/**
 * Gateway connection protocol.
 * @member {module:model/VpnConnectionProperties.VpnConnectionProtocolTypeEnum} vpnConnectionProtocolType
 */
VpnConnectionProperties.prototype['vpnConnectionProtocolType'] = undefined;

/**
 * List of all vpn site link connections to the gateway.
 * @member {Array.<module:model/VpnSiteLinkConnection>} vpnLinkConnections
 */
VpnConnectionProperties.prototype['vpnLinkConnections'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
VpnConnectionProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};


/**
 * Allowed values for the <code>vpnConnectionProtocolType</code> property.
 * @enum {String}
 * @readonly
 */
VpnConnectionProperties['VpnConnectionProtocolTypeEnum'] = {

    /**
     * value: "IKEv2"
     * @const
     */
    "IKEv2": "IKEv2",

    /**
     * value: "IKEv1"
     * @const
     */
    "IKEv1": "IKEv1"
};



export default VpnConnectionProperties;

