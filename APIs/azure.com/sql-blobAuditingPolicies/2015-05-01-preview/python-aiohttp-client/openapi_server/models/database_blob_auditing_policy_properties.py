# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatabaseBlobAuditingPolicyProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audit_actions_and_groups: List[str]=None, is_storage_secondary_key_in_use: bool=None, retention_days: int=None, state: str=None, storage_account_access_key: str=None, storage_account_subscription_id: str=None, storage_endpoint: str=None):
        """DatabaseBlobAuditingPolicyProperties - a model defined in OpenAPI

        :param audit_actions_and_groups: The audit_actions_and_groups of this DatabaseBlobAuditingPolicyProperties.
        :param is_storage_secondary_key_in_use: The is_storage_secondary_key_in_use of this DatabaseBlobAuditingPolicyProperties.
        :param retention_days: The retention_days of this DatabaseBlobAuditingPolicyProperties.
        :param state: The state of this DatabaseBlobAuditingPolicyProperties.
        :param storage_account_access_key: The storage_account_access_key of this DatabaseBlobAuditingPolicyProperties.
        :param storage_account_subscription_id: The storage_account_subscription_id of this DatabaseBlobAuditingPolicyProperties.
        :param storage_endpoint: The storage_endpoint of this DatabaseBlobAuditingPolicyProperties.
        """
        self.openapi_types = {
            'audit_actions_and_groups': List[str],
            'is_storage_secondary_key_in_use': bool,
            'retention_days': int,
            'state': str,
            'storage_account_access_key': str,
            'storage_account_subscription_id': str,
            'storage_endpoint': str
        }

        self.attribute_map = {
            'audit_actions_and_groups': 'auditActionsAndGroups',
            'is_storage_secondary_key_in_use': 'isStorageSecondaryKeyInUse',
            'retention_days': 'retentionDays',
            'state': 'state',
            'storage_account_access_key': 'storageAccountAccessKey',
            'storage_account_subscription_id': 'storageAccountSubscriptionId',
            'storage_endpoint': 'storageEndpoint'
        }

        self._audit_actions_and_groups = audit_actions_and_groups
        self._is_storage_secondary_key_in_use = is_storage_secondary_key_in_use
        self._retention_days = retention_days
        self._state = state
        self._storage_account_access_key = storage_account_access_key
        self._storage_account_subscription_id = storage_account_subscription_id
        self._storage_endpoint = storage_endpoint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseBlobAuditingPolicyProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseBlobAuditingPolicyProperties of this DatabaseBlobAuditingPolicyProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audit_actions_and_groups(self):
        """Gets the audit_actions_and_groups of this DatabaseBlobAuditingPolicyProperties.

        Specifies the Actions and Actions-Groups to audit.

        :return: The audit_actions_and_groups of this DatabaseBlobAuditingPolicyProperties.
        :rtype: List[str]
        """
        return self._audit_actions_and_groups

    @audit_actions_and_groups.setter
    def audit_actions_and_groups(self, audit_actions_and_groups):
        """Sets the audit_actions_and_groups of this DatabaseBlobAuditingPolicyProperties.

        Specifies the Actions and Actions-Groups to audit.

        :param audit_actions_and_groups: The audit_actions_and_groups of this DatabaseBlobAuditingPolicyProperties.
        :type audit_actions_and_groups: List[str]
        """

        self._audit_actions_and_groups = audit_actions_and_groups

    @property
    def is_storage_secondary_key_in_use(self):
        """Gets the is_storage_secondary_key_in_use of this DatabaseBlobAuditingPolicyProperties.

        Specifies whether storageAccountAccessKey value is the storage’s secondary key.

        :return: The is_storage_secondary_key_in_use of this DatabaseBlobAuditingPolicyProperties.
        :rtype: bool
        """
        return self._is_storage_secondary_key_in_use

    @is_storage_secondary_key_in_use.setter
    def is_storage_secondary_key_in_use(self, is_storage_secondary_key_in_use):
        """Sets the is_storage_secondary_key_in_use of this DatabaseBlobAuditingPolicyProperties.

        Specifies whether storageAccountAccessKey value is the storage’s secondary key.

        :param is_storage_secondary_key_in_use: The is_storage_secondary_key_in_use of this DatabaseBlobAuditingPolicyProperties.
        :type is_storage_secondary_key_in_use: bool
        """

        self._is_storage_secondary_key_in_use = is_storage_secondary_key_in_use

    @property
    def retention_days(self):
        """Gets the retention_days of this DatabaseBlobAuditingPolicyProperties.

        Specifies the number of days to keep in the audit logs.

        :return: The retention_days of this DatabaseBlobAuditingPolicyProperties.
        :rtype: int
        """
        return self._retention_days

    @retention_days.setter
    def retention_days(self, retention_days):
        """Sets the retention_days of this DatabaseBlobAuditingPolicyProperties.

        Specifies the number of days to keep in the audit logs.

        :param retention_days: The retention_days of this DatabaseBlobAuditingPolicyProperties.
        :type retention_days: int
        """

        self._retention_days = retention_days

    @property
    def state(self):
        """Gets the state of this DatabaseBlobAuditingPolicyProperties.

        Specifies the state of the policy. If state is Enabled, storageEndpoint and storageAccountAccessKey are required.

        :return: The state of this DatabaseBlobAuditingPolicyProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DatabaseBlobAuditingPolicyProperties.

        Specifies the state of the policy. If state is Enabled, storageEndpoint and storageAccountAccessKey are required.

        :param state: The state of this DatabaseBlobAuditingPolicyProperties.
        :type state: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def storage_account_access_key(self):
        """Gets the storage_account_access_key of this DatabaseBlobAuditingPolicyProperties.

        Specifies the identifier key of the auditing storage account. If state is Enabled, storageAccountAccessKey is required.

        :return: The storage_account_access_key of this DatabaseBlobAuditingPolicyProperties.
        :rtype: str
        """
        return self._storage_account_access_key

    @storage_account_access_key.setter
    def storage_account_access_key(self, storage_account_access_key):
        """Sets the storage_account_access_key of this DatabaseBlobAuditingPolicyProperties.

        Specifies the identifier key of the auditing storage account. If state is Enabled, storageAccountAccessKey is required.

        :param storage_account_access_key: The storage_account_access_key of this DatabaseBlobAuditingPolicyProperties.
        :type storage_account_access_key: str
        """

        self._storage_account_access_key = storage_account_access_key

    @property
    def storage_account_subscription_id(self):
        """Gets the storage_account_subscription_id of this DatabaseBlobAuditingPolicyProperties.

        Specifies the blob storage subscription Id.

        :return: The storage_account_subscription_id of this DatabaseBlobAuditingPolicyProperties.
        :rtype: str
        """
        return self._storage_account_subscription_id

    @storage_account_subscription_id.setter
    def storage_account_subscription_id(self, storage_account_subscription_id):
        """Sets the storage_account_subscription_id of this DatabaseBlobAuditingPolicyProperties.

        Specifies the blob storage subscription Id.

        :param storage_account_subscription_id: The storage_account_subscription_id of this DatabaseBlobAuditingPolicyProperties.
        :type storage_account_subscription_id: str
        """

        self._storage_account_subscription_id = storage_account_subscription_id

    @property
    def storage_endpoint(self):
        """Gets the storage_endpoint of this DatabaseBlobAuditingPolicyProperties.

        Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint is required.

        :return: The storage_endpoint of this DatabaseBlobAuditingPolicyProperties.
        :rtype: str
        """
        return self._storage_endpoint

    @storage_endpoint.setter
    def storage_endpoint(self, storage_endpoint):
        """Sets the storage_endpoint of this DatabaseBlobAuditingPolicyProperties.

        Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint is required.

        :param storage_endpoint: The storage_endpoint of this DatabaseBlobAuditingPolicyProperties.
        :type storage_endpoint: str
        """

        self._storage_endpoint = storage_endpoint
