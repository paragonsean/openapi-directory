/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a database blob auditing policy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:30:18.053050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatabaseBlobAuditingPolicyProperties {
  public static final String SERIALIZED_NAME_AUDIT_ACTIONS_AND_GROUPS = "auditActionsAndGroups";
  @SerializedName(SERIALIZED_NAME_AUDIT_ACTIONS_AND_GROUPS)
  private List<String> auditActionsAndGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_STORAGE_SECONDARY_KEY_IN_USE = "isStorageSecondaryKeyInUse";
  @SerializedName(SERIALIZED_NAME_IS_STORAGE_SECONDARY_KEY_IN_USE)
  private Boolean isStorageSecondaryKeyInUse;

  public static final String SERIALIZED_NAME_RETENTION_DAYS = "retentionDays";
  @SerializedName(SERIALIZED_NAME_RETENTION_DAYS)
  private Integer retentionDays;

  /**
   * Specifies the state of the policy. If state is Enabled, storageEndpoint and storageAccountAccessKey are required.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNT_ACCESS_KEY = "storageAccountAccessKey";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNT_ACCESS_KEY)
  private String storageAccountAccessKey;

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNT_SUBSCRIPTION_ID = "storageAccountSubscriptionId";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNT_SUBSCRIPTION_ID)
  private UUID storageAccountSubscriptionId;

  public static final String SERIALIZED_NAME_STORAGE_ENDPOINT = "storageEndpoint";
  @SerializedName(SERIALIZED_NAME_STORAGE_ENDPOINT)
  private String storageEndpoint;

  public DatabaseBlobAuditingPolicyProperties() {
  }

  public DatabaseBlobAuditingPolicyProperties auditActionsAndGroups(List<String> auditActionsAndGroups) {
    this.auditActionsAndGroups = auditActionsAndGroups;
    return this;
  }

  public DatabaseBlobAuditingPolicyProperties addAuditActionsAndGroupsItem(String auditActionsAndGroupsItem) {
    if (this.auditActionsAndGroups == null) {
      this.auditActionsAndGroups = new ArrayList<>();
    }
    this.auditActionsAndGroups.add(auditActionsAndGroupsItem);
    return this;
  }

  /**
   * Specifies the Actions and Actions-Groups to audit.
   * @return auditActionsAndGroups
   */
  @javax.annotation.Nullable
  public List<String> getAuditActionsAndGroups() {
    return auditActionsAndGroups;
  }

  public void setAuditActionsAndGroups(List<String> auditActionsAndGroups) {
    this.auditActionsAndGroups = auditActionsAndGroups;
  }


  public DatabaseBlobAuditingPolicyProperties isStorageSecondaryKeyInUse(Boolean isStorageSecondaryKeyInUse) {
    this.isStorageSecondaryKeyInUse = isStorageSecondaryKeyInUse;
    return this;
  }

  /**
   * Specifies whether storageAccountAccessKey value is the storageâ€™s secondary key.
   * @return isStorageSecondaryKeyInUse
   */
  @javax.annotation.Nullable
  public Boolean getIsStorageSecondaryKeyInUse() {
    return isStorageSecondaryKeyInUse;
  }

  public void setIsStorageSecondaryKeyInUse(Boolean isStorageSecondaryKeyInUse) {
    this.isStorageSecondaryKeyInUse = isStorageSecondaryKeyInUse;
  }


  public DatabaseBlobAuditingPolicyProperties retentionDays(Integer retentionDays) {
    this.retentionDays = retentionDays;
    return this;
  }

  /**
   * Specifies the number of days to keep in the audit logs.
   * @return retentionDays
   */
  @javax.annotation.Nullable
  public Integer getRetentionDays() {
    return retentionDays;
  }

  public void setRetentionDays(Integer retentionDays) {
    this.retentionDays = retentionDays;
  }


  public DatabaseBlobAuditingPolicyProperties state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Specifies the state of the policy. If state is Enabled, storageEndpoint and storageAccountAccessKey are required.
   * @return state
   */
  @javax.annotation.Nonnull
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public DatabaseBlobAuditingPolicyProperties storageAccountAccessKey(String storageAccountAccessKey) {
    this.storageAccountAccessKey = storageAccountAccessKey;
    return this;
  }

  /**
   * Specifies the identifier key of the auditing storage account. If state is Enabled, storageAccountAccessKey is required.
   * @return storageAccountAccessKey
   */
  @javax.annotation.Nullable
  public String getStorageAccountAccessKey() {
    return storageAccountAccessKey;
  }

  public void setStorageAccountAccessKey(String storageAccountAccessKey) {
    this.storageAccountAccessKey = storageAccountAccessKey;
  }


  public DatabaseBlobAuditingPolicyProperties storageAccountSubscriptionId(UUID storageAccountSubscriptionId) {
    this.storageAccountSubscriptionId = storageAccountSubscriptionId;
    return this;
  }

  /**
   * Specifies the blob storage subscription Id.
   * @return storageAccountSubscriptionId
   */
  @javax.annotation.Nullable
  public UUID getStorageAccountSubscriptionId() {
    return storageAccountSubscriptionId;
  }

  public void setStorageAccountSubscriptionId(UUID storageAccountSubscriptionId) {
    this.storageAccountSubscriptionId = storageAccountSubscriptionId;
  }


  public DatabaseBlobAuditingPolicyProperties storageEndpoint(String storageEndpoint) {
    this.storageEndpoint = storageEndpoint;
    return this;
  }

  /**
   * Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint is required.
   * @return storageEndpoint
   */
  @javax.annotation.Nullable
  public String getStorageEndpoint() {
    return storageEndpoint;
  }

  public void setStorageEndpoint(String storageEndpoint) {
    this.storageEndpoint = storageEndpoint;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseBlobAuditingPolicyProperties databaseBlobAuditingPolicyProperties = (DatabaseBlobAuditingPolicyProperties) o;
    return Objects.equals(this.auditActionsAndGroups, databaseBlobAuditingPolicyProperties.auditActionsAndGroups) &&
        Objects.equals(this.isStorageSecondaryKeyInUse, databaseBlobAuditingPolicyProperties.isStorageSecondaryKeyInUse) &&
        Objects.equals(this.retentionDays, databaseBlobAuditingPolicyProperties.retentionDays) &&
        Objects.equals(this.state, databaseBlobAuditingPolicyProperties.state) &&
        Objects.equals(this.storageAccountAccessKey, databaseBlobAuditingPolicyProperties.storageAccountAccessKey) &&
        Objects.equals(this.storageAccountSubscriptionId, databaseBlobAuditingPolicyProperties.storageAccountSubscriptionId) &&
        Objects.equals(this.storageEndpoint, databaseBlobAuditingPolicyProperties.storageEndpoint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(auditActionsAndGroups, isStorageSecondaryKeyInUse, retentionDays, state, storageAccountAccessKey, storageAccountSubscriptionId, storageEndpoint);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseBlobAuditingPolicyProperties {\n");
    sb.append("    auditActionsAndGroups: ").append(toIndentedString(auditActionsAndGroups)).append("\n");
    sb.append("    isStorageSecondaryKeyInUse: ").append(toIndentedString(isStorageSecondaryKeyInUse)).append("\n");
    sb.append("    retentionDays: ").append(toIndentedString(retentionDays)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    storageAccountAccessKey: ").append(toIndentedString(storageAccountAccessKey)).append("\n");
    sb.append("    storageAccountSubscriptionId: ").append(toIndentedString(storageAccountSubscriptionId)).append("\n");
    sb.append("    storageEndpoint: ").append(toIndentedString(storageEndpoint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auditActionsAndGroups");
    openapiFields.add("isStorageSecondaryKeyInUse");
    openapiFields.add("retentionDays");
    openapiFields.add("state");
    openapiFields.add("storageAccountAccessKey");
    openapiFields.add("storageAccountSubscriptionId");
    openapiFields.add("storageEndpoint");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("state");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatabaseBlobAuditingPolicyProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatabaseBlobAuditingPolicyProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatabaseBlobAuditingPolicyProperties is not found in the empty JSON string", DatabaseBlobAuditingPolicyProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatabaseBlobAuditingPolicyProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatabaseBlobAuditingPolicyProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DatabaseBlobAuditingPolicyProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("auditActionsAndGroups") != null && !jsonObj.get("auditActionsAndGroups").isJsonNull() && !jsonObj.get("auditActionsAndGroups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `auditActionsAndGroups` to be an array in the JSON string but got `%s`", jsonObj.get("auditActionsAndGroups").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the required field `state`
      StateEnum.validateJsonElement(jsonObj.get("state"));
      if ((jsonObj.get("storageAccountAccessKey") != null && !jsonObj.get("storageAccountAccessKey").isJsonNull()) && !jsonObj.get("storageAccountAccessKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageAccountAccessKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageAccountAccessKey").toString()));
      }
      if ((jsonObj.get("storageAccountSubscriptionId") != null && !jsonObj.get("storageAccountSubscriptionId").isJsonNull()) && !jsonObj.get("storageAccountSubscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageAccountSubscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageAccountSubscriptionId").toString()));
      }
      if ((jsonObj.get("storageEndpoint") != null && !jsonObj.get("storageEndpoint").isJsonNull()) && !jsonObj.get("storageEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageEndpoint").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatabaseBlobAuditingPolicyProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatabaseBlobAuditingPolicyProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatabaseBlobAuditingPolicyProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatabaseBlobAuditingPolicyProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DatabaseBlobAuditingPolicyProperties>() {
           @Override
           public void write(JsonWriter out, DatabaseBlobAuditingPolicyProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatabaseBlobAuditingPolicyProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatabaseBlobAuditingPolicyProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatabaseBlobAuditingPolicyProperties
   * @throws IOException if the JSON string is invalid with respect to DatabaseBlobAuditingPolicyProperties
   */
  public static DatabaseBlobAuditingPolicyProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatabaseBlobAuditingPolicyProperties.class);
  }

  /**
   * Convert an instance of DatabaseBlobAuditingPolicyProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

