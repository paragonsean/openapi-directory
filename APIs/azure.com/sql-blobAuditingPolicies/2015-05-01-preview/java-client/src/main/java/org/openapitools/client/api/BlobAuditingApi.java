/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DatabaseBlobAuditingPolicy;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BlobAuditingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BlobAuditingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BlobAuditingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for databaseBlobAuditingPoliciesCreateOrUpdate
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database for which the blob auditing policy will be defined. (required)
     * @param blobAuditingPolicyName The name of the blob auditing policy. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The database blob auditing policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the database blob auditing policy. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the database blob auditing policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 BlobAuditingIsNotSupportedOnResourceType - Blob Auditing is currently not supported for this resource type.   * 400 InvalidDatabaseBlobAuditingPolicyCreateRequest - The create database blob auditing policy request does not exist or has no properties object.   * 400 InvalidBlobAuditActionsAndGroups - Invalid audit actions or action groups.   * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 500 DatabaseIsUnavailable - Loading failed. Please try again later.   * 500 UpsertBlobAuditingPolicyFailed - An error has occurred while saving Auditing settings, please try again later </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseBlobAuditingPoliciesCreateOrUpdateCall(String resourceGroupName, String serverName, String databaseName, String blobAuditingPolicyName, String subscriptionId, String apiVersion, DatabaseBlobAuditingPolicy parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/auditingSettings/{blobAuditingPolicyName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "blobAuditingPolicyName" + "}", localVarApiClient.escapeString(blobAuditingPolicyName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseBlobAuditingPoliciesCreateOrUpdateValidateBeforeCall(String resourceGroupName, String serverName, String databaseName, String blobAuditingPolicyName, String subscriptionId, String apiVersion, DatabaseBlobAuditingPolicy parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseBlobAuditingPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling databaseBlobAuditingPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseBlobAuditingPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'blobAuditingPolicyName' is set
        if (blobAuditingPolicyName == null) {
            throw new ApiException("Missing the required parameter 'blobAuditingPolicyName' when calling databaseBlobAuditingPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseBlobAuditingPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseBlobAuditingPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling databaseBlobAuditingPoliciesCreateOrUpdate(Async)");
        }

        return databaseBlobAuditingPoliciesCreateOrUpdateCall(resourceGroupName, serverName, databaseName, blobAuditingPolicyName, subscriptionId, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates or updates a database&#39;s blob auditing policy.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database for which the blob auditing policy will be defined. (required)
     * @param blobAuditingPolicyName The name of the blob auditing policy. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The database blob auditing policy. (required)
     * @return DatabaseBlobAuditingPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the database blob auditing policy. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the database blob auditing policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 BlobAuditingIsNotSupportedOnResourceType - Blob Auditing is currently not supported for this resource type.   * 400 InvalidDatabaseBlobAuditingPolicyCreateRequest - The create database blob auditing policy request does not exist or has no properties object.   * 400 InvalidBlobAuditActionsAndGroups - Invalid audit actions or action groups.   * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 500 DatabaseIsUnavailable - Loading failed. Please try again later.   * 500 UpsertBlobAuditingPolicyFailed - An error has occurred while saving Auditing settings, please try again later </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseBlobAuditingPolicy databaseBlobAuditingPoliciesCreateOrUpdate(String resourceGroupName, String serverName, String databaseName, String blobAuditingPolicyName, String subscriptionId, String apiVersion, DatabaseBlobAuditingPolicy parameters) throws ApiException {
        ApiResponse<DatabaseBlobAuditingPolicy> localVarResp = databaseBlobAuditingPoliciesCreateOrUpdateWithHttpInfo(resourceGroupName, serverName, databaseName, blobAuditingPolicyName, subscriptionId, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a database&#39;s blob auditing policy.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database for which the blob auditing policy will be defined. (required)
     * @param blobAuditingPolicyName The name of the blob auditing policy. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The database blob auditing policy. (required)
     * @return ApiResponse&lt;DatabaseBlobAuditingPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the database blob auditing policy. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the database blob auditing policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 BlobAuditingIsNotSupportedOnResourceType - Blob Auditing is currently not supported for this resource type.   * 400 InvalidDatabaseBlobAuditingPolicyCreateRequest - The create database blob auditing policy request does not exist or has no properties object.   * 400 InvalidBlobAuditActionsAndGroups - Invalid audit actions or action groups.   * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 500 DatabaseIsUnavailable - Loading failed. Please try again later.   * 500 UpsertBlobAuditingPolicyFailed - An error has occurred while saving Auditing settings, please try again later </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseBlobAuditingPolicy> databaseBlobAuditingPoliciesCreateOrUpdateWithHttpInfo(String resourceGroupName, String serverName, String databaseName, String blobAuditingPolicyName, String subscriptionId, String apiVersion, DatabaseBlobAuditingPolicy parameters) throws ApiException {
        okhttp3.Call localVarCall = databaseBlobAuditingPoliciesCreateOrUpdateValidateBeforeCall(resourceGroupName, serverName, databaseName, blobAuditingPolicyName, subscriptionId, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<DatabaseBlobAuditingPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a database&#39;s blob auditing policy.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database for which the blob auditing policy will be defined. (required)
     * @param blobAuditingPolicyName The name of the blob auditing policy. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The database blob auditing policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the database blob auditing policy. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the database blob auditing policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 BlobAuditingIsNotSupportedOnResourceType - Blob Auditing is currently not supported for this resource type.   * 400 InvalidDatabaseBlobAuditingPolicyCreateRequest - The create database blob auditing policy request does not exist or has no properties object.   * 400 InvalidBlobAuditActionsAndGroups - Invalid audit actions or action groups.   * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 500 DatabaseIsUnavailable - Loading failed. Please try again later.   * 500 UpsertBlobAuditingPolicyFailed - An error has occurred while saving Auditing settings, please try again later </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseBlobAuditingPoliciesCreateOrUpdateAsync(String resourceGroupName, String serverName, String databaseName, String blobAuditingPolicyName, String subscriptionId, String apiVersion, DatabaseBlobAuditingPolicy parameters, final ApiCallback<DatabaseBlobAuditingPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseBlobAuditingPoliciesCreateOrUpdateValidateBeforeCall(resourceGroupName, serverName, databaseName, blobAuditingPolicyName, subscriptionId, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<DatabaseBlobAuditingPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseBlobAuditingPoliciesGet
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database for which the blob audit policy is defined. (required)
     * @param blobAuditingPolicyName The name of the blob auditing policy. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the database blob auditing policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 BlobAuditingIsNotSupportedOnResourceType - Blob Auditing is currently not supported for this resource type.   * 400 InvalidDatabaseBlobAuditingPolicyCreateRequest - The create database blob auditing policy request does not exist or has no properties object.   * 400 InvalidBlobAuditActionsAndGroups - Invalid audit actions or action groups.   * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 500 DatabaseIsUnavailable - Loading failed. Please try again later.   * 500 GetBlobAuditingPolicyFailed - Failed to get Auditing settings </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseBlobAuditingPoliciesGetCall(String resourceGroupName, String serverName, String databaseName, String blobAuditingPolicyName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/auditingSettings/{blobAuditingPolicyName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "blobAuditingPolicyName" + "}", localVarApiClient.escapeString(blobAuditingPolicyName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseBlobAuditingPoliciesGetValidateBeforeCall(String resourceGroupName, String serverName, String databaseName, String blobAuditingPolicyName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseBlobAuditingPoliciesGet(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling databaseBlobAuditingPoliciesGet(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseBlobAuditingPoliciesGet(Async)");
        }

        // verify the required parameter 'blobAuditingPolicyName' is set
        if (blobAuditingPolicyName == null) {
            throw new ApiException("Missing the required parameter 'blobAuditingPolicyName' when calling databaseBlobAuditingPoliciesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseBlobAuditingPoliciesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseBlobAuditingPoliciesGet(Async)");
        }

        return databaseBlobAuditingPoliciesGetCall(resourceGroupName, serverName, databaseName, blobAuditingPolicyName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets a database&#39;s blob auditing policy.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database for which the blob audit policy is defined. (required)
     * @param blobAuditingPolicyName The name of the blob auditing policy. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return DatabaseBlobAuditingPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the database blob auditing policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 BlobAuditingIsNotSupportedOnResourceType - Blob Auditing is currently not supported for this resource type.   * 400 InvalidDatabaseBlobAuditingPolicyCreateRequest - The create database blob auditing policy request does not exist or has no properties object.   * 400 InvalidBlobAuditActionsAndGroups - Invalid audit actions or action groups.   * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 500 DatabaseIsUnavailable - Loading failed. Please try again later.   * 500 GetBlobAuditingPolicyFailed - Failed to get Auditing settings </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseBlobAuditingPolicy databaseBlobAuditingPoliciesGet(String resourceGroupName, String serverName, String databaseName, String blobAuditingPolicyName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DatabaseBlobAuditingPolicy> localVarResp = databaseBlobAuditingPoliciesGetWithHttpInfo(resourceGroupName, serverName, databaseName, blobAuditingPolicyName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a database&#39;s blob auditing policy.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database for which the blob audit policy is defined. (required)
     * @param blobAuditingPolicyName The name of the blob auditing policy. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;DatabaseBlobAuditingPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the database blob auditing policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 BlobAuditingIsNotSupportedOnResourceType - Blob Auditing is currently not supported for this resource type.   * 400 InvalidDatabaseBlobAuditingPolicyCreateRequest - The create database blob auditing policy request does not exist or has no properties object.   * 400 InvalidBlobAuditActionsAndGroups - Invalid audit actions or action groups.   * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 500 DatabaseIsUnavailable - Loading failed. Please try again later.   * 500 GetBlobAuditingPolicyFailed - Failed to get Auditing settings </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseBlobAuditingPolicy> databaseBlobAuditingPoliciesGetWithHttpInfo(String resourceGroupName, String serverName, String databaseName, String blobAuditingPolicyName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseBlobAuditingPoliciesGetValidateBeforeCall(resourceGroupName, serverName, databaseName, blobAuditingPolicyName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DatabaseBlobAuditingPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a database&#39;s blob auditing policy.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database for which the blob audit policy is defined. (required)
     * @param blobAuditingPolicyName The name of the blob auditing policy. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the database blob auditing policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 BlobAuditingIsNotSupportedOnResourceType - Blob Auditing is currently not supported for this resource type.   * 400 InvalidDatabaseBlobAuditingPolicyCreateRequest - The create database blob auditing policy request does not exist or has no properties object.   * 400 InvalidBlobAuditActionsAndGroups - Invalid audit actions or action groups.   * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 500 DatabaseIsUnavailable - Loading failed. Please try again later.   * 500 GetBlobAuditingPolicyFailed - Failed to get Auditing settings </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseBlobAuditingPoliciesGetAsync(String resourceGroupName, String serverName, String databaseName, String blobAuditingPolicyName, String subscriptionId, String apiVersion, final ApiCallback<DatabaseBlobAuditingPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseBlobAuditingPoliciesGetValidateBeforeCall(resourceGroupName, serverName, databaseName, blobAuditingPolicyName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DatabaseBlobAuditingPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
