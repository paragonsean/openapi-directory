/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JobErrorDetail from './JobErrorDetail';

/**
 * The JobError model module.
 * @module model/JobError
 * @version 2018-07-01
 */
class JobError {
    /**
     * Constructs a new <code>JobError</code>.
     * Details of JobOutput errors.
     * @alias module:model/JobError
     */
    constructor() { 
        
        JobError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JobError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobError} obj Optional instance to populate.
     * @return {module:model/JobError} The populated <code>JobError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobError();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], [JobErrorDetail]);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('retry')) {
                obj['retry'] = ApiClient.convertToType(data['retry'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        if (data['details']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['details'])) {
                throw new Error("Expected the field `details` to be an array in the JSON data but got " + data['details']);
            }
            // validate the optional field `details` (array)
            for (const item of data['details']) {
                JobErrorDetail.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['retry'] && !(typeof data['retry'] === 'string' || data['retry'] instanceof String)) {
            throw new Error("Expected the field `retry` to be a primitive type in the JSON string but got " + data['retry']);
        }

        return true;
    }


}



/**
 * Helps with categorization of errors.
 * @member {module:model/JobError.CategoryEnum} category
 */
JobError.prototype['category'] = undefined;

/**
 * Error code describing the error.
 * @member {module:model/JobError.CodeEnum} code
 */
JobError.prototype['code'] = undefined;

/**
 * An array of details about specific errors that led to this reported error.
 * @member {Array.<module:model/JobErrorDetail>} details
 */
JobError.prototype['details'] = undefined;

/**
 * A human-readable language-dependent representation of the error.
 * @member {String} message
 */
JobError.prototype['message'] = undefined;

/**
 * Indicates that it may be possible to retry the Job. If retry is unsuccessful, please contact Azure support via Azure Portal.
 * @member {module:model/JobError.RetryEnum} retry
 */
JobError.prototype['retry'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
JobError['CategoryEnum'] = {

    /**
     * value: "Service"
     * @const
     */
    "Service": "Service",

    /**
     * value: "Download"
     * @const
     */
    "Download": "Download",

    /**
     * value: "Upload"
     * @const
     */
    "Upload": "Upload",

    /**
     * value: "Configuration"
     * @const
     */
    "Configuration": "Configuration",

    /**
     * value: "Content"
     * @const
     */
    "Content": "Content"
};


/**
 * Allowed values for the <code>code</code> property.
 * @enum {String}
 * @readonly
 */
JobError['CodeEnum'] = {

    /**
     * value: "ServiceError"
     * @const
     */
    "ServiceError": "ServiceError",

    /**
     * value: "ServiceTransientError"
     * @const
     */
    "ServiceTransientError": "ServiceTransientError",

    /**
     * value: "DownloadNotAccessible"
     * @const
     */
    "DownloadNotAccessible": "DownloadNotAccessible",

    /**
     * value: "DownloadTransientError"
     * @const
     */
    "DownloadTransientError": "DownloadTransientError",

    /**
     * value: "UploadNotAccessible"
     * @const
     */
    "UploadNotAccessible": "UploadNotAccessible",

    /**
     * value: "UploadTransientError"
     * @const
     */
    "UploadTransientError": "UploadTransientError",

    /**
     * value: "ConfigurationUnsupported"
     * @const
     */
    "ConfigurationUnsupported": "ConfigurationUnsupported",

    /**
     * value: "ContentMalformed"
     * @const
     */
    "ContentMalformed": "ContentMalformed",

    /**
     * value: "ContentUnsupported"
     * @const
     */
    "ContentUnsupported": "ContentUnsupported"
};


/**
 * Allowed values for the <code>retry</code> property.
 * @enum {String}
 * @readonly
 */
JobError['RetryEnum'] = {

    /**
     * value: "DoNotRetry"
     * @const
     */
    "DoNotRetry": "DoNotRetry",

    /**
     * value: "MayRetry"
     * @const
     */
    "MayRetry": "MayRetry"
};



export default JobError;

