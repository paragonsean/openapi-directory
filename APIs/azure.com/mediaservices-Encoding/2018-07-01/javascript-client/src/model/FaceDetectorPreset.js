/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Preset from './Preset';

/**
 * The FaceDetectorPreset model module.
 * @module model/FaceDetectorPreset
 * @version 2018-07-01
 */
class FaceDetectorPreset {
    /**
     * Constructs a new <code>FaceDetectorPreset</code>.
     * Describes all the settings to be used when analyzing a video in order to detect all the faces present.
     * @alias module:model/FaceDetectorPreset
     * @extends module:model/Preset
     * @implements module:model/Preset
     * @param odataType {String} The discriminator for derived types.
     */
    constructor(odataType) { 
        Preset.initialize(this, odataType);
        FaceDetectorPreset.initialize(this, odataType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, odataType) { 
    }

    /**
     * Constructs a <code>FaceDetectorPreset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FaceDetectorPreset} obj Optional instance to populate.
     * @return {module:model/FaceDetectorPreset} The populated <code>FaceDetectorPreset</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FaceDetectorPreset();
            Preset.constructFromObject(data, obj);
            Preset.constructFromObject(data, obj);

            if (data.hasOwnProperty('resolution')) {
                obj['resolution'] = ApiClient.convertToType(data['resolution'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FaceDetectorPreset</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FaceDetectorPreset</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FaceDetectorPreset.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['resolution'] && !(typeof data['resolution'] === 'string' || data['resolution'] instanceof String)) {
            throw new Error("Expected the field `resolution` to be a primitive type in the JSON string but got " + data['resolution']);
        }

        return true;
    }


}

FaceDetectorPreset.RequiredProperties = ["@odata.type"];

/**
 * Specifies the maximum resolution at which your video is analyzed. The default behavior is \"SourceResolution,\" which will keep the input video at its original resolution when analyzed. Using \"StandardDefinition\" will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to \"StandardDefinition\" will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics for details). However, faces that end up being too small in the resized video may not be detected.
 * @member {module:model/FaceDetectorPreset.ResolutionEnum} resolution
 */
FaceDetectorPreset.prototype['resolution'] = undefined;


// Implement Preset interface:
/**
 * The discriminator for derived types.
 * @member {String} @odata.type
 */
Preset.prototype['@odata.type'] = undefined;



/**
 * Allowed values for the <code>resolution</code> property.
 * @enum {String}
 * @readonly
 */
FaceDetectorPreset['ResolutionEnum'] = {

    /**
     * value: "SourceResolution"
     * @const
     */
    "SourceResolution": "SourceResolution",

    /**
     * value: "StandardDefinition"
     * @const
     */
    "StandardDefinition": "StandardDefinition"
};



export default FaceDetectorPreset;

