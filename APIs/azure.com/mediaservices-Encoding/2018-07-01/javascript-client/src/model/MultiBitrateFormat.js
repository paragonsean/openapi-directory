/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Format from './Format';
import OutputFile from './OutputFile';

/**
 * The MultiBitrateFormat model module.
 * @module model/MultiBitrateFormat
 * @version 2018-07-01
 */
class MultiBitrateFormat {
    /**
     * Constructs a new <code>MultiBitrateFormat</code>.
     * Describes the properties for producing a collection of GOP aligned multi-bitrate files. The default behavior is to produce one output file for each video layer which is muxed together with all the audios. The exact output files produced can be controlled by specifying the outputFiles collection.
     * @alias module:model/MultiBitrateFormat
     * @extends module:model/Format
     * @implements module:model/Format
     * @param odataType {String} The discriminator for derived types.
     * @param filenamePattern {String} The pattern of the file names for the generated output files. The following macros are supported in the file name: {Basename} - The base name of the input video {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {Bitrate} - The audio/video bitrate. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. Any unsubstituted macros will be collapsed and removed from the filename.
     */
    constructor(odataType, filenamePattern) { 
        Format.initialize(this, odataType, filenamePattern);
        MultiBitrateFormat.initialize(this, odataType, filenamePattern);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, odataType, filenamePattern) { 
    }

    /**
     * Constructs a <code>MultiBitrateFormat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MultiBitrateFormat} obj Optional instance to populate.
     * @return {module:model/MultiBitrateFormat} The populated <code>MultiBitrateFormat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MultiBitrateFormat();
            Format.constructFromObject(data, obj);
            Format.constructFromObject(data, obj);

            if (data.hasOwnProperty('outputFiles')) {
                obj['outputFiles'] = ApiClient.convertToType(data['outputFiles'], [OutputFile]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MultiBitrateFormat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MultiBitrateFormat</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MultiBitrateFormat.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['outputFiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['outputFiles'])) {
                throw new Error("Expected the field `outputFiles` to be an array in the JSON data but got " + data['outputFiles']);
            }
            // validate the optional field `outputFiles` (array)
            for (const item of data['outputFiles']) {
                OutputFile.validateJSON(item);
            };
        }

        return true;
    }


}

MultiBitrateFormat.RequiredProperties = ["@odata.type", "filenamePattern"];

/**
 * The list of output files to produce.  Each entry in the list is a set of audio and video layer labels to be muxed together .
 * @member {Array.<module:model/OutputFile>} outputFiles
 */
MultiBitrateFormat.prototype['outputFiles'] = undefined;


// Implement Format interface:
/**
 * The discriminator for derived types.
 * @member {String} @odata.type
 */
Format.prototype['@odata.type'] = undefined;
/**
 * The pattern of the file names for the generated output files. The following macros are supported in the file name: {Basename} - The base name of the input video {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {Bitrate} - The audio/video bitrate. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. Any unsubstituted macros will be collapsed and removed from the filename.
 * @member {String} filenamePattern
 */
Format.prototype['filenamePattern'] = undefined;




export default MultiBitrateFormat;

