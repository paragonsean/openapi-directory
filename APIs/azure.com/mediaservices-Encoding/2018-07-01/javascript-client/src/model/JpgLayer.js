/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Layer from './Layer';

/**
 * The JpgLayer model module.
 * @module model/JpgLayer
 * @version 2018-07-01
 */
class JpgLayer {
    /**
     * Constructs a new <code>JpgLayer</code>.
     * Describes the settings to produce a JPEG image from the input video.
     * @alias module:model/JpgLayer
     * @extends module:model/Layer
     * @implements module:model/Layer
     * @param odataType {String} The discriminator for derived types.
     */
    constructor(odataType) { 
        Layer.initialize(this, odataType);
        JpgLayer.initialize(this, odataType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, odataType) { 
    }

    /**
     * Constructs a <code>JpgLayer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JpgLayer} obj Optional instance to populate.
     * @return {module:model/JpgLayer} The populated <code>JpgLayer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JpgLayer();
            Layer.constructFromObject(data, obj);
            Layer.constructFromObject(data, obj);

            if (data.hasOwnProperty('quality')) {
                obj['quality'] = ApiClient.convertToType(data['quality'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JpgLayer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JpgLayer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of JpgLayer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

JpgLayer.RequiredProperties = ["@odata.type"];

/**
 * The compression quality of the JPEG output. Range is from 0-100 and the default is 70.
 * @member {Number} quality
 */
JpgLayer.prototype['quality'] = undefined;


// Implement Layer interface:
/**
 * The discriminator for derived types.
 * @member {String} @odata.type
 */
Layer.prototype['@odata.type'] = undefined;
/**
 * The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example 50% means the output video has half as many pixels in height as the input.
 * @member {String} height
 */
Layer.prototype['height'] = undefined;
/**
 * The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming the output file.
 * @member {String} label
 */
Layer.prototype['label'] = undefined;
/**
 * The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example 50% means the output video has half as many pixels in width as the input.
 * @member {String} width
 */
Layer.prototype['width'] = undefined;




export default JpgLayer;

