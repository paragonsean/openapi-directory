/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Codec from './Codec';
import Filters from './Filters';
import Format from './Format';
import Preset from './Preset';

/**
 * The StandardEncoderPreset model module.
 * @module model/StandardEncoderPreset
 * @version 2018-07-01
 */
class StandardEncoderPreset {
    /**
     * Constructs a new <code>StandardEncoderPreset</code>.
     * Describes all the settings to be used when encoding the input video with the Standard Encoder.
     * @alias module:model/StandardEncoderPreset
     * @extends module:model/Preset
     * @implements module:model/Preset
     * @param odataType {String} The discriminator for derived types.
     */
    constructor(odataType) { 
        Preset.initialize(this, odataType);
        StandardEncoderPreset.initialize(this, odataType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, odataType) { 
        obj['codecs'] = codecs;
        obj['formats'] = formats;
    }

    /**
     * Constructs a <code>StandardEncoderPreset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StandardEncoderPreset} obj Optional instance to populate.
     * @return {module:model/StandardEncoderPreset} The populated <code>StandardEncoderPreset</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StandardEncoderPreset();
            Preset.constructFromObject(data, obj);
            Preset.constructFromObject(data, obj);

            if (data.hasOwnProperty('codecs')) {
                obj['codecs'] = ApiClient.convertToType(data['codecs'], [Codec]);
            }
            if (data.hasOwnProperty('filters')) {
                obj['filters'] = Filters.constructFromObject(data['filters']);
            }
            if (data.hasOwnProperty('formats')) {
                obj['formats'] = ApiClient.convertToType(data['formats'], [Format]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StandardEncoderPreset</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StandardEncoderPreset</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StandardEncoderPreset.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['codecs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['codecs'])) {
                throw new Error("Expected the field `codecs` to be an array in the JSON data but got " + data['codecs']);
            }
            // validate the optional field `codecs` (array)
            for (const item of data['codecs']) {
                Codec.validateJSON(item);
            };
        }
        // validate the optional field `filters`
        if (data['filters']) { // data not null
          Filters.validateJSON(data['filters']);
        }
        if (data['formats']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['formats'])) {
                throw new Error("Expected the field `formats` to be an array in the JSON data but got " + data['formats']);
            }
            // validate the optional field `formats` (array)
            for (const item of data['formats']) {
                Format.validateJSON(item);
            };
        }

        return true;
    }


}

StandardEncoderPreset.RequiredProperties = ["codecs", "formats", "@odata.type"];

/**
 * The list of codecs to be used when encoding the input video.
 * @member {Array.<module:model/Codec>} codecs
 */
StandardEncoderPreset.prototype['codecs'] = undefined;

/**
 * @member {module:model/Filters} filters
 */
StandardEncoderPreset.prototype['filters'] = undefined;

/**
 * The list of outputs to be produced by the encoder.
 * @member {Array.<module:model/Format>} formats
 */
StandardEncoderPreset.prototype['formats'] = undefined;


// Implement Preset interface:
/**
 * The discriminator for derived types.
 * @member {String} @odata.type
 */
Preset.prototype['@odata.type'] = undefined;




export default StandardEncoderPreset;

