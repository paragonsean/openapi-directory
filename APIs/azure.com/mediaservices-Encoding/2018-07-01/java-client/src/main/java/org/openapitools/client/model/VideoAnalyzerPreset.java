/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AudioAnalyzerPreset;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A video analyzer preset that extracts insights (rich metadata) from both audio and video, and outputs a JSON format file.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:53:53.302734-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoAnalyzerPreset extends AudioAnalyzerPreset {
  /**
   * Defines the type of insights that you want the service to generate. The allowed values are &#39;AudioInsightsOnly&#39;, &#39;VideoInsightsOnly&#39;, and &#39;AllInsights&#39;. The default is AllInsights. If you set this to AllInsights and the input is audio only, then only audio insights are generated. Similarly if the input is video only, then only video insights are generated. It is recommended that you not use AudioInsightsOnly if you expect some of your inputs to be video only; or use VideoInsightsOnly if you expect some of your inputs to be audio only. Your Jobs in such conditions would error out.
   */
  @JsonAdapter(InsightsToExtractEnum.Adapter.class)
  public enum InsightsToExtractEnum {
    AUDIO_INSIGHTS_ONLY("AudioInsightsOnly"),
    
    VIDEO_INSIGHTS_ONLY("VideoInsightsOnly"),
    
    ALL_INSIGHTS("AllInsights");

    private String value;

    InsightsToExtractEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InsightsToExtractEnum fromValue(String value) {
      for (InsightsToExtractEnum b : InsightsToExtractEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InsightsToExtractEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InsightsToExtractEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InsightsToExtractEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InsightsToExtractEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InsightsToExtractEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INSIGHTS_TO_EXTRACT = "insightsToExtract";
  @SerializedName(SERIALIZED_NAME_INSIGHTS_TO_EXTRACT)
  private InsightsToExtractEnum insightsToExtract;

  public VideoAnalyzerPreset() {
    this.atOdataType = this.getClass().getSimpleName();
  }

  public VideoAnalyzerPreset insightsToExtract(InsightsToExtractEnum insightsToExtract) {
    this.insightsToExtract = insightsToExtract;
    return this;
  }

  /**
   * Defines the type of insights that you want the service to generate. The allowed values are &#39;AudioInsightsOnly&#39;, &#39;VideoInsightsOnly&#39;, and &#39;AllInsights&#39;. The default is AllInsights. If you set this to AllInsights and the input is audio only, then only audio insights are generated. Similarly if the input is video only, then only video insights are generated. It is recommended that you not use AudioInsightsOnly if you expect some of your inputs to be video only; or use VideoInsightsOnly if you expect some of your inputs to be audio only. Your Jobs in such conditions would error out.
   * @return insightsToExtract
   */
  @javax.annotation.Nullable
  public InsightsToExtractEnum getInsightsToExtract() {
    return insightsToExtract;
  }

  public void setInsightsToExtract(InsightsToExtractEnum insightsToExtract) {
    this.insightsToExtract = insightsToExtract;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoAnalyzerPreset videoAnalyzerPreset = (VideoAnalyzerPreset) o;
    return Objects.equals(this.insightsToExtract, videoAnalyzerPreset.insightsToExtract) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(insightsToExtract, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoAnalyzerPreset {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    insightsToExtract: ").append(toIndentedString(insightsToExtract)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audioLanguage");
    openapiFields.add("@odata.type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("@odata.type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoAnalyzerPreset
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoAnalyzerPreset.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoAnalyzerPreset is not found in the empty JSON string", VideoAnalyzerPreset.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoAnalyzerPreset.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoAnalyzerPreset` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VideoAnalyzerPreset.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoAnalyzerPreset.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoAnalyzerPreset' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoAnalyzerPreset> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoAnalyzerPreset.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoAnalyzerPreset>() {
           @Override
           public void write(JsonWriter out, VideoAnalyzerPreset value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoAnalyzerPreset read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoAnalyzerPreset given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoAnalyzerPreset
   * @throws IOException if the JSON string is invalid with respect to VideoAnalyzerPreset
   */
  public static VideoAnalyzerPreset fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoAnalyzerPreset.class);
  }

  /**
   * Convert an instance of VideoAnalyzerPreset to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

