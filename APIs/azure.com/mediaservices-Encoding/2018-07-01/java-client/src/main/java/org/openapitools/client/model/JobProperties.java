/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.JobInput;
import org.openapitools.client.model.JobOutput;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the Job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:53:53.302734-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobProperties {
  public static final String SERIALIZED_NAME_CORRELATION_DATA = "correlationData";
  @SerializedName(SERIALIZED_NAME_CORRELATION_DATA)
  private Map<String, String> correlationData = new HashMap<>();

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private JobInput input;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private OffsetDateTime lastModified;

  public static final String SERIALIZED_NAME_OUTPUTS = "outputs";
  @SerializedName(SERIALIZED_NAME_OUTPUTS)
  private List<JobOutput> outputs = new ArrayList<>();

  /**
   * Priority with which the job should be processed. Higher priority jobs are processed before lower priority jobs. If not set, the default is normal.
   */
  @JsonAdapter(PriorityEnum.Adapter.class)
  public enum PriorityEnum {
    LOW("Low"),
    
    NORMAL("Normal"),
    
    HIGH("High");

    private String value;

    PriorityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PriorityEnum fromValue(String value) {
      for (PriorityEnum b : PriorityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PriorityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PriorityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PriorityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PriorityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PriorityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private PriorityEnum priority;

  /**
   * The current state of the job.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    CANCELED("Canceled"),
    
    CANCELING("Canceling"),
    
    ERROR("Error"),
    
    FINISHED("Finished"),
    
    PROCESSING("Processing"),
    
    QUEUED("Queued"),
    
    SCHEDULED("Scheduled");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public JobProperties() {
  }

  public JobProperties(
     OffsetDateTime created, 
     OffsetDateTime lastModified, 
     StateEnum state
  ) {
    this();
    this.created = created;
    this.lastModified = lastModified;
    this.state = state;
  }

  public JobProperties correlationData(Map<String, String> correlationData) {
    this.correlationData = correlationData;
    return this;
  }

  public JobProperties putCorrelationDataItem(String key, String correlationDataItem) {
    if (this.correlationData == null) {
      this.correlationData = new HashMap<>();
    }
    this.correlationData.put(key, correlationDataItem);
    return this;
  }

  /**
   * Customer provided key, value pairs that will be returned in Job and JobOutput state events.
   * @return correlationData
   */
  @javax.annotation.Nullable
  public Map<String, String> getCorrelationData() {
    return correlationData;
  }

  public void setCorrelationData(Map<String, String> correlationData) {
    this.correlationData = correlationData;
  }


  /**
   * The UTC date and time when the Job was created, in &#39;YYYY-MM-DDThh:mm:ssZ&#39; format.
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  public JobProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional customer supplied description of the Job.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public JobProperties input(JobInput input) {
    this.input = input;
    return this;
  }

  /**
   * Get input
   * @return input
   */
  @javax.annotation.Nonnull
  public JobInput getInput() {
    return input;
  }

  public void setInput(JobInput input) {
    this.input = input;
  }


  /**
   * The UTC date and time when the Job was last updated, in &#39;YYYY-MM-DDThh:mm:ssZ&#39; format.
   * @return lastModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModified() {
    return lastModified;
  }



  public JobProperties outputs(List<JobOutput> outputs) {
    this.outputs = outputs;
    return this;
  }

  public JobProperties addOutputsItem(JobOutput outputsItem) {
    if (this.outputs == null) {
      this.outputs = new ArrayList<>();
    }
    this.outputs.add(outputsItem);
    return this;
  }

  /**
   * The outputs for the Job.
   * @return outputs
   */
  @javax.annotation.Nonnull
  public List<JobOutput> getOutputs() {
    return outputs;
  }

  public void setOutputs(List<JobOutput> outputs) {
    this.outputs = outputs;
  }


  public JobProperties priority(PriorityEnum priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Priority with which the job should be processed. Higher priority jobs are processed before lower priority jobs. If not set, the default is normal.
   * @return priority
   */
  @javax.annotation.Nullable
  public PriorityEnum getPriority() {
    return priority;
  }

  public void setPriority(PriorityEnum priority) {
    this.priority = priority;
  }


  /**
   * The current state of the job.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobProperties jobProperties = (JobProperties) o;
    return Objects.equals(this.correlationData, jobProperties.correlationData) &&
        Objects.equals(this.created, jobProperties.created) &&
        Objects.equals(this.description, jobProperties.description) &&
        Objects.equals(this.input, jobProperties.input) &&
        Objects.equals(this.lastModified, jobProperties.lastModified) &&
        Objects.equals(this.outputs, jobProperties.outputs) &&
        Objects.equals(this.priority, jobProperties.priority) &&
        Objects.equals(this.state, jobProperties.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(correlationData, created, description, input, lastModified, outputs, priority, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobProperties {\n");
    sb.append("    correlationData: ").append(toIndentedString(correlationData)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("correlationData");
    openapiFields.add("created");
    openapiFields.add("description");
    openapiFields.add("input");
    openapiFields.add("lastModified");
    openapiFields.add("outputs");
    openapiFields.add("priority");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("input");
    openapiRequiredFields.add("outputs");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobProperties is not found in the empty JSON string", JobProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JobProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `input`
      JobInput.validateJsonElement(jsonObj.get("input"));
      // ensure the json data is an array
      if (!jsonObj.get("outputs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputs` to be an array in the JSON string but got `%s`", jsonObj.get("outputs").toString()));
      }

      JsonArray jsonArrayoutputs = jsonObj.getAsJsonArray("outputs");
      // validate the required field `outputs` (array)
      for (int i = 0; i < jsonArrayoutputs.size(); i++) {
        JobOutput.validateJsonElement(jsonArrayoutputs.get(i));
      };
      if ((jsonObj.get("priority") != null && !jsonObj.get("priority").isJsonNull()) && !jsonObj.get("priority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priority").toString()));
      }
      // validate the optional field `priority`
      if (jsonObj.get("priority") != null && !jsonObj.get("priority").isJsonNull()) {
        PriorityEnum.validateJsonElement(jsonObj.get("priority"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<JobProperties>() {
           @Override
           public void write(JsonWriter out, JobProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobProperties
   * @throws IOException if the JSON string is invalid with respect to JobProperties
   */
  public static JobProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobProperties.class);
  }

  /**
   * Convert an instance of JobProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

