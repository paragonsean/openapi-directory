/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Codec;
import org.openapitools.client.model.Filters;
import org.openapitools.client.model.Format;
import org.openapitools.client.model.Preset;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes all the settings to be used when encoding the input video with the Standard Encoder.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:53:53.302734-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StandardEncoderPreset extends Preset {
  public static final String SERIALIZED_NAME_CODECS = "codecs";
  @SerializedName(SERIALIZED_NAME_CODECS)
  private List<Codec> codecs = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private Filters filters;

  public static final String SERIALIZED_NAME_FORMATS = "formats";
  @SerializedName(SERIALIZED_NAME_FORMATS)
  private List<Format> formats = new ArrayList<>();

  public StandardEncoderPreset() {
    this.atOdataType = this.getClass().getSimpleName();
  }

  public StandardEncoderPreset codecs(List<Codec> codecs) {
    this.codecs = codecs;
    return this;
  }

  public StandardEncoderPreset addCodecsItem(Codec codecsItem) {
    if (this.codecs == null) {
      this.codecs = new ArrayList<>();
    }
    this.codecs.add(codecsItem);
    return this;
  }

  /**
   * The list of codecs to be used when encoding the input video.
   * @return codecs
   */
  @javax.annotation.Nonnull
  public List<Codec> getCodecs() {
    return codecs;
  }

  public void setCodecs(List<Codec> codecs) {
    this.codecs = codecs;
  }


  public StandardEncoderPreset filters(Filters filters) {
    this.filters = filters;
    return this;
  }

  /**
   * Get filters
   * @return filters
   */
  @javax.annotation.Nullable
  public Filters getFilters() {
    return filters;
  }

  public void setFilters(Filters filters) {
    this.filters = filters;
  }


  public StandardEncoderPreset formats(List<Format> formats) {
    this.formats = formats;
    return this;
  }

  public StandardEncoderPreset addFormatsItem(Format formatsItem) {
    if (this.formats == null) {
      this.formats = new ArrayList<>();
    }
    this.formats.add(formatsItem);
    return this;
  }

  /**
   * The list of outputs to be produced by the encoder.
   * @return formats
   */
  @javax.annotation.Nonnull
  public List<Format> getFormats() {
    return formats;
  }

  public void setFormats(List<Format> formats) {
    this.formats = formats;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StandardEncoderPreset standardEncoderPreset = (StandardEncoderPreset) o;
    return Objects.equals(this.codecs, standardEncoderPreset.codecs) &&
        Objects.equals(this.filters, standardEncoderPreset.filters) &&
        Objects.equals(this.formats, standardEncoderPreset.formats) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codecs, filters, formats, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StandardEncoderPreset {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    codecs: ").append(toIndentedString(codecs)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    formats: ").append(toIndentedString(formats)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("@odata.type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("codecs");
    openapiRequiredFields.add("formats");
    openapiRequiredFields.add("@odata.type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StandardEncoderPreset
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StandardEncoderPreset.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StandardEncoderPreset is not found in the empty JSON string", StandardEncoderPreset.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StandardEncoderPreset.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StandardEncoderPreset` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StandardEncoderPreset.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StandardEncoderPreset.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StandardEncoderPreset' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StandardEncoderPreset> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StandardEncoderPreset.class));

       return (TypeAdapter<T>) new TypeAdapter<StandardEncoderPreset>() {
           @Override
           public void write(JsonWriter out, StandardEncoderPreset value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StandardEncoderPreset read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StandardEncoderPreset given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StandardEncoderPreset
   * @throws IOException if the JSON string is invalid with respect to StandardEncoderPreset
   */
  public static StandardEncoderPreset fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StandardEncoderPreset.class);
  }

  /**
   * Convert an instance of StandardEncoderPreset to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

