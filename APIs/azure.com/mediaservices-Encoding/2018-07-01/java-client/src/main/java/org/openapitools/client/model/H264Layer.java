/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.VideoLayer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the settings to be used when encoding the input video into a desired output bitrate layer with the H.264 video codec.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:53:53.302734-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class H264Layer extends VideoLayer {
  public static final String SERIALIZED_NAME_BUFFER_WINDOW = "bufferWindow";
  @SerializedName(SERIALIZED_NAME_BUFFER_WINDOW)
  private String bufferWindow;

  /**
   * The entropy mode to be used for this layer. If not specified, the encoder chooses the mode that is appropriate for the profile and level.
   */
  @JsonAdapter(EntropyModeEnum.Adapter.class)
  public enum EntropyModeEnum {
    CABAC("Cabac"),
    
    CAVLC("Cavlc");

    private String value;

    EntropyModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntropyModeEnum fromValue(String value) {
      for (EntropyModeEnum b : EntropyModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntropyModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntropyModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntropyModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntropyModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EntropyModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTROPY_MODE = "entropyMode";
  @SerializedName(SERIALIZED_NAME_ENTROPY_MODE)
  private EntropyModeEnum entropyMode;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private String level;

  /**
   * We currently support Baseline, Main, High, High422, High444. Default is Auto.
   */
  @JsonAdapter(ProfileEnum.Adapter.class)
  public enum ProfileEnum {
    AUTO("Auto"),
    
    BASELINE("Baseline"),
    
    MAIN("Main"),
    
    HIGH("High"),
    
    HIGH422("High422"),
    
    HIGH444("High444");

    private String value;

    ProfileEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProfileEnum fromValue(String value) {
      for (ProfileEnum b : ProfileEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProfileEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProfileEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProfileEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProfileEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProfileEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROFILE = "profile";
  @SerializedName(SERIALIZED_NAME_PROFILE)
  private ProfileEnum profile;

  public static final String SERIALIZED_NAME_REFERENCE_FRAMES = "referenceFrames";
  @SerializedName(SERIALIZED_NAME_REFERENCE_FRAMES)
  private Integer referenceFrames;

  public H264Layer() {
    this.atOdataType = this.getClass().getSimpleName();
  }

  public H264Layer bufferWindow(String bufferWindow) {
    this.bufferWindow = bufferWindow;
    return this;
  }

  /**
   * The VBV buffer window length. The value should be in ISO 8601 format. The value should be in the range [0.1-100] seconds. The default is 5 seconds (for example, PT5S).
   * @return bufferWindow
   */
  @javax.annotation.Nullable
  public String getBufferWindow() {
    return bufferWindow;
  }

  public void setBufferWindow(String bufferWindow) {
    this.bufferWindow = bufferWindow;
  }


  public H264Layer entropyMode(EntropyModeEnum entropyMode) {
    this.entropyMode = entropyMode;
    return this;
  }

  /**
   * The entropy mode to be used for this layer. If not specified, the encoder chooses the mode that is appropriate for the profile and level.
   * @return entropyMode
   */
  @javax.annotation.Nullable
  public EntropyModeEnum getEntropyMode() {
    return entropyMode;
  }

  public void setEntropyMode(EntropyModeEnum entropyMode) {
    this.entropyMode = entropyMode;
  }


  public H264Layer level(String level) {
    this.level = level;
    return this;
  }

  /**
   * We currently support Level up to 6.2. The value can be Auto, or a number that matches the H.264 profile. If not specified, the default is Auto, which lets the encoder choose the Level that is appropriate for this layer.
   * @return level
   */
  @javax.annotation.Nullable
  public String getLevel() {
    return level;
  }

  public void setLevel(String level) {
    this.level = level;
  }


  public H264Layer profile(ProfileEnum profile) {
    this.profile = profile;
    return this;
  }

  /**
   * We currently support Baseline, Main, High, High422, High444. Default is Auto.
   * @return profile
   */
  @javax.annotation.Nullable
  public ProfileEnum getProfile() {
    return profile;
  }

  public void setProfile(ProfileEnum profile) {
    this.profile = profile;
  }


  public H264Layer referenceFrames(Integer referenceFrames) {
    this.referenceFrames = referenceFrames;
    return this;
  }

  /**
   * The number of reference frames to be used when encoding this layer. If not specified, the encoder determines an appropriate number based on the encoder complexity setting.
   * @return referenceFrames
   */
  @javax.annotation.Nullable
  public Integer getReferenceFrames() {
    return referenceFrames;
  }

  public void setReferenceFrames(Integer referenceFrames) {
    this.referenceFrames = referenceFrames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    H264Layer h264Layer = (H264Layer) o;
    return Objects.equals(this.bufferWindow, h264Layer.bufferWindow) &&
        Objects.equals(this.entropyMode, h264Layer.entropyMode) &&
        Objects.equals(this.level, h264Layer.level) &&
        Objects.equals(this.profile, h264Layer.profile) &&
        Objects.equals(this.referenceFrames, h264Layer.referenceFrames) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bufferWindow, entropyMode, level, profile, referenceFrames, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class H264Layer {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    bufferWindow: ").append(toIndentedString(bufferWindow)).append("\n");
    sb.append("    entropyMode: ").append(toIndentedString(entropyMode)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("    referenceFrames: ").append(toIndentedString(referenceFrames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adaptiveBFrame");
    openapiFields.add("bFrames");
    openapiFields.add("bitrate");
    openapiFields.add("frameRate");
    openapiFields.add("maxBitrate");
    openapiFields.add("slices");
    openapiFields.add("@odata.type");
    openapiFields.add("height");
    openapiFields.add("label");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("bitrate");
    openapiRequiredFields.add("@odata.type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to H264Layer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!H264Layer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in H264Layer is not found in the empty JSON string", H264Layer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!H264Layer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `H264Layer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : H264Layer.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!H264Layer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'H264Layer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<H264Layer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(H264Layer.class));

       return (TypeAdapter<T>) new TypeAdapter<H264Layer>() {
           @Override
           public void write(JsonWriter out, H264Layer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public H264Layer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of H264Layer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of H264Layer
   * @throws IOException if the JSON string is invalid with respect to H264Layer
   */
  public static H264Layer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, H264Layer.class);
  }

  /**
   * Convert an instance of H264Layer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

