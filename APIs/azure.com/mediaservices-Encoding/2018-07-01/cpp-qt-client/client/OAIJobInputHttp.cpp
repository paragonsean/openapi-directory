/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobInputHttp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobInputHttp::OAIJobInputHttp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobInputHttp::OAIJobInputHttp() {
    this->initializeModel();
}

OAIJobInputHttp::~OAIJobInputHttp() {}

void OAIJobInputHttp::initializeModel() {

    m_base_uri_isSet = false;
    m_base_uri_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_files_isSet = false;
    m_files_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_odata_type_isSet = false;
    m_odata_type_isValid = false;
}

void OAIJobInputHttp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobInputHttp::fromJsonObject(QJsonObject json) {

    m_base_uri_isValid = ::OpenAPI::fromJsonValue(m_base_uri, json[QString("baseUri")]);
    m_base_uri_isSet = !json[QString("baseUri")].isNull() && m_base_uri_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_odata_type_isValid = ::OpenAPI::fromJsonValue(m_odata_type, json[QString("@odata.type")]);
    m_odata_type_isSet = !json[QString("@odata.type")].isNull() && m_odata_type_isValid;
}

QString OAIJobInputHttp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobInputHttp::asJsonObject() const {
    QJsonObject obj;
    if (m_base_uri_isSet) {
        obj.insert(QString("baseUri"), ::OpenAPI::toJsonValue(m_base_uri));
    }
    if (m_end.isSet()) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_files.size() > 0) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_start.isSet()) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_odata_type_isSet) {
        obj.insert(QString("@odata.type"), ::OpenAPI::toJsonValue(m_odata_type));
    }
    return obj;
}

QString OAIJobInputHttp::getBaseUri() const {
    return m_base_uri;
}
void OAIJobInputHttp::setBaseUri(const QString &base_uri) {
    m_base_uri = base_uri;
    m_base_uri_isSet = true;
}

bool OAIJobInputHttp::is_base_uri_Set() const{
    return m_base_uri_isSet;
}

bool OAIJobInputHttp::is_base_uri_Valid() const{
    return m_base_uri_isValid;
}

OAIClipTime OAIJobInputHttp::getEnd() const {
    return m_end;
}
void OAIJobInputHttp::setEnd(const OAIClipTime &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIJobInputHttp::is_end_Set() const{
    return m_end_isSet;
}

bool OAIJobInputHttp::is_end_Valid() const{
    return m_end_isValid;
}

QList<QString> OAIJobInputHttp::getFiles() const {
    return m_files;
}
void OAIJobInputHttp::setFiles(const QList<QString> &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAIJobInputHttp::is_files_Set() const{
    return m_files_isSet;
}

bool OAIJobInputHttp::is_files_Valid() const{
    return m_files_isValid;
}

QString OAIJobInputHttp::getLabel() const {
    return m_label;
}
void OAIJobInputHttp::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIJobInputHttp::is_label_Set() const{
    return m_label_isSet;
}

bool OAIJobInputHttp::is_label_Valid() const{
    return m_label_isValid;
}

OAIClipTime OAIJobInputHttp::getStart() const {
    return m_start;
}
void OAIJobInputHttp::setStart(const OAIClipTime &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIJobInputHttp::is_start_Set() const{
    return m_start_isSet;
}

bool OAIJobInputHttp::is_start_Valid() const{
    return m_start_isValid;
}

QString OAIJobInputHttp::getOdataType() const {
    return m_odata_type;
}
void OAIJobInputHttp::setOdataType(const QString &odata_type) {
    m_odata_type = odata_type;
    m_odata_type_isSet = true;
}

bool OAIJobInputHttp::is_odata_type_Set() const{
    return m_odata_type_isSet;
}

bool OAIJobInputHttp::is_odata_type_Valid() const{
    return m_odata_type_isValid;
}

bool OAIJobInputHttp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_odata_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobInputHttp::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_odata_type_isValid && true;
}

} // namespace OpenAPI
