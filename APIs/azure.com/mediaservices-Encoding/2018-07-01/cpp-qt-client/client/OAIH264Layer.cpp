/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIH264Layer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIH264Layer::OAIH264Layer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIH264Layer::OAIH264Layer() {
    this->initializeModel();
}

OAIH264Layer::~OAIH264Layer() {}

void OAIH264Layer::initializeModel() {

    m_buffer_window_isSet = false;
    m_buffer_window_isValid = false;

    m_entropy_mode_isSet = false;
    m_entropy_mode_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_profile_isSet = false;
    m_profile_isValid = false;

    m_reference_frames_isSet = false;
    m_reference_frames_isValid = false;

    m_adaptive_b_frame_isSet = false;
    m_adaptive_b_frame_isValid = false;

    m_b_frames_isSet = false;
    m_b_frames_isValid = false;

    m_bitrate_isSet = false;
    m_bitrate_isValid = false;

    m_frame_rate_isSet = false;
    m_frame_rate_isValid = false;

    m_max_bitrate_isSet = false;
    m_max_bitrate_isValid = false;

    m_slices_isSet = false;
    m_slices_isValid = false;

    m_odata_type_isSet = false;
    m_odata_type_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIH264Layer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIH264Layer::fromJsonObject(QJsonObject json) {

    m_buffer_window_isValid = ::OpenAPI::fromJsonValue(m_buffer_window, json[QString("bufferWindow")]);
    m_buffer_window_isSet = !json[QString("bufferWindow")].isNull() && m_buffer_window_isValid;

    m_entropy_mode_isValid = ::OpenAPI::fromJsonValue(m_entropy_mode, json[QString("entropyMode")]);
    m_entropy_mode_isSet = !json[QString("entropyMode")].isNull() && m_entropy_mode_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_profile_isValid = ::OpenAPI::fromJsonValue(m_profile, json[QString("profile")]);
    m_profile_isSet = !json[QString("profile")].isNull() && m_profile_isValid;

    m_reference_frames_isValid = ::OpenAPI::fromJsonValue(m_reference_frames, json[QString("referenceFrames")]);
    m_reference_frames_isSet = !json[QString("referenceFrames")].isNull() && m_reference_frames_isValid;

    m_adaptive_b_frame_isValid = ::OpenAPI::fromJsonValue(m_adaptive_b_frame, json[QString("adaptiveBFrame")]);
    m_adaptive_b_frame_isSet = !json[QString("adaptiveBFrame")].isNull() && m_adaptive_b_frame_isValid;

    m_b_frames_isValid = ::OpenAPI::fromJsonValue(m_b_frames, json[QString("bFrames")]);
    m_b_frames_isSet = !json[QString("bFrames")].isNull() && m_b_frames_isValid;

    m_bitrate_isValid = ::OpenAPI::fromJsonValue(m_bitrate, json[QString("bitrate")]);
    m_bitrate_isSet = !json[QString("bitrate")].isNull() && m_bitrate_isValid;

    m_frame_rate_isValid = ::OpenAPI::fromJsonValue(m_frame_rate, json[QString("frameRate")]);
    m_frame_rate_isSet = !json[QString("frameRate")].isNull() && m_frame_rate_isValid;

    m_max_bitrate_isValid = ::OpenAPI::fromJsonValue(m_max_bitrate, json[QString("maxBitrate")]);
    m_max_bitrate_isSet = !json[QString("maxBitrate")].isNull() && m_max_bitrate_isValid;

    m_slices_isValid = ::OpenAPI::fromJsonValue(m_slices, json[QString("slices")]);
    m_slices_isSet = !json[QString("slices")].isNull() && m_slices_isValid;

    m_odata_type_isValid = ::OpenAPI::fromJsonValue(m_odata_type, json[QString("@odata.type")]);
    m_odata_type_isSet = !json[QString("@odata.type")].isNull() && m_odata_type_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIH264Layer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIH264Layer::asJsonObject() const {
    QJsonObject obj;
    if (m_buffer_window_isSet) {
        obj.insert(QString("bufferWindow"), ::OpenAPI::toJsonValue(m_buffer_window));
    }
    if (m_entropy_mode_isSet) {
        obj.insert(QString("entropyMode"), ::OpenAPI::toJsonValue(m_entropy_mode));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_profile_isSet) {
        obj.insert(QString("profile"), ::OpenAPI::toJsonValue(m_profile));
    }
    if (m_reference_frames_isSet) {
        obj.insert(QString("referenceFrames"), ::OpenAPI::toJsonValue(m_reference_frames));
    }
    if (m_adaptive_b_frame_isSet) {
        obj.insert(QString("adaptiveBFrame"), ::OpenAPI::toJsonValue(m_adaptive_b_frame));
    }
    if (m_b_frames_isSet) {
        obj.insert(QString("bFrames"), ::OpenAPI::toJsonValue(m_b_frames));
    }
    if (m_bitrate_isSet) {
        obj.insert(QString("bitrate"), ::OpenAPI::toJsonValue(m_bitrate));
    }
    if (m_frame_rate_isSet) {
        obj.insert(QString("frameRate"), ::OpenAPI::toJsonValue(m_frame_rate));
    }
    if (m_max_bitrate_isSet) {
        obj.insert(QString("maxBitrate"), ::OpenAPI::toJsonValue(m_max_bitrate));
    }
    if (m_slices_isSet) {
        obj.insert(QString("slices"), ::OpenAPI::toJsonValue(m_slices));
    }
    if (m_odata_type_isSet) {
        obj.insert(QString("@odata.type"), ::OpenAPI::toJsonValue(m_odata_type));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAIH264Layer::getBufferWindow() const {
    return m_buffer_window;
}
void OAIH264Layer::setBufferWindow(const QString &buffer_window) {
    m_buffer_window = buffer_window;
    m_buffer_window_isSet = true;
}

bool OAIH264Layer::is_buffer_window_Set() const{
    return m_buffer_window_isSet;
}

bool OAIH264Layer::is_buffer_window_Valid() const{
    return m_buffer_window_isValid;
}

QString OAIH264Layer::getEntropyMode() const {
    return m_entropy_mode;
}
void OAIH264Layer::setEntropyMode(const QString &entropy_mode) {
    m_entropy_mode = entropy_mode;
    m_entropy_mode_isSet = true;
}

bool OAIH264Layer::is_entropy_mode_Set() const{
    return m_entropy_mode_isSet;
}

bool OAIH264Layer::is_entropy_mode_Valid() const{
    return m_entropy_mode_isValid;
}

QString OAIH264Layer::getLevel() const {
    return m_level;
}
void OAIH264Layer::setLevel(const QString &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIH264Layer::is_level_Set() const{
    return m_level_isSet;
}

bool OAIH264Layer::is_level_Valid() const{
    return m_level_isValid;
}

QString OAIH264Layer::getProfile() const {
    return m_profile;
}
void OAIH264Layer::setProfile(const QString &profile) {
    m_profile = profile;
    m_profile_isSet = true;
}

bool OAIH264Layer::is_profile_Set() const{
    return m_profile_isSet;
}

bool OAIH264Layer::is_profile_Valid() const{
    return m_profile_isValid;
}

qint32 OAIH264Layer::getReferenceFrames() const {
    return m_reference_frames;
}
void OAIH264Layer::setReferenceFrames(const qint32 &reference_frames) {
    m_reference_frames = reference_frames;
    m_reference_frames_isSet = true;
}

bool OAIH264Layer::is_reference_frames_Set() const{
    return m_reference_frames_isSet;
}

bool OAIH264Layer::is_reference_frames_Valid() const{
    return m_reference_frames_isValid;
}

bool OAIH264Layer::isAdaptiveBFrame() const {
    return m_adaptive_b_frame;
}
void OAIH264Layer::setAdaptiveBFrame(const bool &adaptive_b_frame) {
    m_adaptive_b_frame = adaptive_b_frame;
    m_adaptive_b_frame_isSet = true;
}

bool OAIH264Layer::is_adaptive_b_frame_Set() const{
    return m_adaptive_b_frame_isSet;
}

bool OAIH264Layer::is_adaptive_b_frame_Valid() const{
    return m_adaptive_b_frame_isValid;
}

qint32 OAIH264Layer::getBFrames() const {
    return m_b_frames;
}
void OAIH264Layer::setBFrames(const qint32 &b_frames) {
    m_b_frames = b_frames;
    m_b_frames_isSet = true;
}

bool OAIH264Layer::is_b_frames_Set() const{
    return m_b_frames_isSet;
}

bool OAIH264Layer::is_b_frames_Valid() const{
    return m_b_frames_isValid;
}

qint32 OAIH264Layer::getBitrate() const {
    return m_bitrate;
}
void OAIH264Layer::setBitrate(const qint32 &bitrate) {
    m_bitrate = bitrate;
    m_bitrate_isSet = true;
}

bool OAIH264Layer::is_bitrate_Set() const{
    return m_bitrate_isSet;
}

bool OAIH264Layer::is_bitrate_Valid() const{
    return m_bitrate_isValid;
}

QString OAIH264Layer::getFrameRate() const {
    return m_frame_rate;
}
void OAIH264Layer::setFrameRate(const QString &frame_rate) {
    m_frame_rate = frame_rate;
    m_frame_rate_isSet = true;
}

bool OAIH264Layer::is_frame_rate_Set() const{
    return m_frame_rate_isSet;
}

bool OAIH264Layer::is_frame_rate_Valid() const{
    return m_frame_rate_isValid;
}

qint32 OAIH264Layer::getMaxBitrate() const {
    return m_max_bitrate;
}
void OAIH264Layer::setMaxBitrate(const qint32 &max_bitrate) {
    m_max_bitrate = max_bitrate;
    m_max_bitrate_isSet = true;
}

bool OAIH264Layer::is_max_bitrate_Set() const{
    return m_max_bitrate_isSet;
}

bool OAIH264Layer::is_max_bitrate_Valid() const{
    return m_max_bitrate_isValid;
}

qint32 OAIH264Layer::getSlices() const {
    return m_slices;
}
void OAIH264Layer::setSlices(const qint32 &slices) {
    m_slices = slices;
    m_slices_isSet = true;
}

bool OAIH264Layer::is_slices_Set() const{
    return m_slices_isSet;
}

bool OAIH264Layer::is_slices_Valid() const{
    return m_slices_isValid;
}

QString OAIH264Layer::getOdataType() const {
    return m_odata_type;
}
void OAIH264Layer::setOdataType(const QString &odata_type) {
    m_odata_type = odata_type;
    m_odata_type_isSet = true;
}

bool OAIH264Layer::is_odata_type_Set() const{
    return m_odata_type_isSet;
}

bool OAIH264Layer::is_odata_type_Valid() const{
    return m_odata_type_isValid;
}

QString OAIH264Layer::getHeight() const {
    return m_height;
}
void OAIH264Layer::setHeight(const QString &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIH264Layer::is_height_Set() const{
    return m_height_isSet;
}

bool OAIH264Layer::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIH264Layer::getLabel() const {
    return m_label;
}
void OAIH264Layer::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIH264Layer::is_label_Set() const{
    return m_label_isSet;
}

bool OAIH264Layer::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIH264Layer::getWidth() const {
    return m_width;
}
void OAIH264Layer::setWidth(const QString &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIH264Layer::is_width_Set() const{
    return m_width_isSet;
}

bool OAIH264Layer::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIH264Layer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_buffer_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entropy_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_frames_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adaptive_b_frame_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_frames_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frame_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slices_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_odata_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIH264Layer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bitrate_isValid && m_odata_type_isValid && true;
}

} // namespace OpenAPI
