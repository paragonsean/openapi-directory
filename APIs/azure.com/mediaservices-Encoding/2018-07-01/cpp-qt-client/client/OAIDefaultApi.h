/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiError.h"
#include "OAIJob.h"
#include "OAIJobCollection.h"
#include "OAITransform.h"
#include "OAITransformCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  transform_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobsCancelJob(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &transform_name, const QString &job_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  transform_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIJob [required]
    */
    virtual void jobsCreate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &transform_name, const QString &job_name, const QString &api_version, const OAIJob &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  transform_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &transform_name, const QString &job_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  transform_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobsGet(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &transform_name, const QString &job_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  transform_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  orderby QString [optional]
    */
    virtual void jobsList(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &transform_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  transform_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIJob [required]
    */
    virtual void jobsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &transform_name, const QString &job_name, const QString &api_version, const OAIJob &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  transform_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAITransform [required]
    */
    virtual void transformsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &transform_name, const QString &api_version, const OAITransform &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  transform_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void transformsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &transform_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  transform_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void transformsGet(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &transform_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  orderby QString [optional]
    */
    virtual void transformsList(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  transform_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAITransform [required]
    */
    virtual void transformsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &transform_name, const QString &api_version, const OAITransform &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void jobsCancelJobCallback(OAIHttpRequestWorker *worker);
    void jobsCreateCallback(OAIHttpRequestWorker *worker);
    void jobsDeleteCallback(OAIHttpRequestWorker *worker);
    void jobsGetCallback(OAIHttpRequestWorker *worker);
    void jobsListCallback(OAIHttpRequestWorker *worker);
    void jobsUpdateCallback(OAIHttpRequestWorker *worker);
    void transformsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void transformsDeleteCallback(OAIHttpRequestWorker *worker);
    void transformsGetCallback(OAIHttpRequestWorker *worker);
    void transformsListCallback(OAIHttpRequestWorker *worker);
    void transformsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void jobsCancelJobSignal();
    void jobsCreateSignal(OAIJob summary);
    void jobsDeleteSignal();
    void jobsGetSignal(OAIJob summary);
    void jobsListSignal(OAIJobCollection summary);
    void jobsUpdateSignal(OAIJob summary);
    void transformsCreateOrUpdateSignal(OAITransform summary);
    void transformsDeleteSignal();
    void transformsGetSignal(OAITransform summary);
    void transformsListSignal(OAITransformCollection summary);
    void transformsUpdateSignal(OAITransform summary);


    void jobsCancelJobSignalFull(OAIHttpRequestWorker *worker);
    void jobsCreateSignalFull(OAIHttpRequestWorker *worker, OAIJob summary);
    void jobsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void jobsGetSignalFull(OAIHttpRequestWorker *worker, OAIJob summary);
    void jobsListSignalFull(OAIHttpRequestWorker *worker, OAIJobCollection summary);
    void jobsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIJob summary);
    void transformsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAITransform summary);
    void transformsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void transformsGetSignalFull(OAIHttpRequestWorker *worker, OAITransform summary);
    void transformsListSignalFull(OAIHttpRequestWorker *worker, OAITransformCollection summary);
    void transformsUpdateSignalFull(OAIHttpRequestWorker *worker, OAITransform summary);

    Q_DECL_DEPRECATED_X("Use jobsCancelJobSignalError() instead")
    void jobsCancelJobSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobsCancelJobSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsCreateSignalError() instead")
    void jobsCreateSignalE(OAIJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsCreateSignalError(OAIJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsDeleteSignalError() instead")
    void jobsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsGetSignalError() instead")
    void jobsGetSignalE(OAIJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsGetSignalError(OAIJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsListSignalError() instead")
    void jobsListSignalE(OAIJobCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsListSignalError(OAIJobCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsUpdateSignalError() instead")
    void jobsUpdateSignalE(OAIJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsUpdateSignalError(OAIJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformsCreateOrUpdateSignalError() instead")
    void transformsCreateOrUpdateSignalE(OAITransform summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transformsCreateOrUpdateSignalError(OAITransform summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformsDeleteSignalError() instead")
    void transformsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void transformsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformsGetSignalError() instead")
    void transformsGetSignalE(OAITransform summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transformsGetSignalError(OAITransform summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformsListSignalError() instead")
    void transformsListSignalE(OAITransformCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transformsListSignalError(OAITransformCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformsUpdateSignalError() instead")
    void transformsUpdateSignalE(OAITransform summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transformsUpdateSignalError(OAITransform summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use jobsCancelJobSignalErrorFull() instead")
    void jobsCancelJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsCancelJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsCreateSignalErrorFull() instead")
    void jobsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsDeleteSignalErrorFull() instead")
    void jobsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsGetSignalErrorFull() instead")
    void jobsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsListSignalErrorFull() instead")
    void jobsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsUpdateSignalErrorFull() instead")
    void jobsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformsCreateOrUpdateSignalErrorFull() instead")
    void transformsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transformsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformsDeleteSignalErrorFull() instead")
    void transformsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transformsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformsGetSignalErrorFull() instead")
    void transformsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transformsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformsListSignalErrorFull() instead")
    void transformsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transformsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transformsUpdateSignalErrorFull() instead")
    void transformsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transformsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
