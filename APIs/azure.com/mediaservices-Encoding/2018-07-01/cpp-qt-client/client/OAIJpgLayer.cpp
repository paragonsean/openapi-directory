/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJpgLayer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJpgLayer::OAIJpgLayer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJpgLayer::OAIJpgLayer() {
    this->initializeModel();
}

OAIJpgLayer::~OAIJpgLayer() {}

void OAIJpgLayer::initializeModel() {

    m_quality_isSet = false;
    m_quality_isValid = false;

    m_odata_type_isSet = false;
    m_odata_type_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIJpgLayer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJpgLayer::fromJsonObject(QJsonObject json) {

    m_quality_isValid = ::OpenAPI::fromJsonValue(m_quality, json[QString("quality")]);
    m_quality_isSet = !json[QString("quality")].isNull() && m_quality_isValid;

    m_odata_type_isValid = ::OpenAPI::fromJsonValue(m_odata_type, json[QString("@odata.type")]);
    m_odata_type_isSet = !json[QString("@odata.type")].isNull() && m_odata_type_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIJpgLayer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJpgLayer::asJsonObject() const {
    QJsonObject obj;
    if (m_quality_isSet) {
        obj.insert(QString("quality"), ::OpenAPI::toJsonValue(m_quality));
    }
    if (m_odata_type_isSet) {
        obj.insert(QString("@odata.type"), ::OpenAPI::toJsonValue(m_odata_type));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

qint32 OAIJpgLayer::getQuality() const {
    return m_quality;
}
void OAIJpgLayer::setQuality(const qint32 &quality) {
    m_quality = quality;
    m_quality_isSet = true;
}

bool OAIJpgLayer::is_quality_Set() const{
    return m_quality_isSet;
}

bool OAIJpgLayer::is_quality_Valid() const{
    return m_quality_isValid;
}

QString OAIJpgLayer::getOdataType() const {
    return m_odata_type;
}
void OAIJpgLayer::setOdataType(const QString &odata_type) {
    m_odata_type = odata_type;
    m_odata_type_isSet = true;
}

bool OAIJpgLayer::is_odata_type_Set() const{
    return m_odata_type_isSet;
}

bool OAIJpgLayer::is_odata_type_Valid() const{
    return m_odata_type_isValid;
}

QString OAIJpgLayer::getHeight() const {
    return m_height;
}
void OAIJpgLayer::setHeight(const QString &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIJpgLayer::is_height_Set() const{
    return m_height_isSet;
}

bool OAIJpgLayer::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIJpgLayer::getLabel() const {
    return m_label;
}
void OAIJpgLayer::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIJpgLayer::is_label_Set() const{
    return m_label_isSet;
}

bool OAIJpgLayer::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIJpgLayer::getWidth() const {
    return m_width;
}
void OAIJpgLayer::setWidth(const QString &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIJpgLayer::is_width_Set() const{
    return m_width_isSet;
}

bool OAIJpgLayer::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIJpgLayer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_quality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_odata_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJpgLayer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_odata_type_isValid && true;
}

} // namespace OpenAPI
