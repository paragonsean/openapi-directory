/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilters::OAIFilters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilters::OAIFilters() {
    this->initializeModel();
}

OAIFilters::~OAIFilters() {}

void OAIFilters::initializeModel() {

    m_crop_isSet = false;
    m_crop_isValid = false;

    m_deinterlace_isSet = false;
    m_deinterlace_isValid = false;

    m_overlays_isSet = false;
    m_overlays_isValid = false;

    m_rotation_isSet = false;
    m_rotation_isValid = false;
}

void OAIFilters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilters::fromJsonObject(QJsonObject json) {

    m_crop_isValid = ::OpenAPI::fromJsonValue(m_crop, json[QString("crop")]);
    m_crop_isSet = !json[QString("crop")].isNull() && m_crop_isValid;

    m_deinterlace_isValid = ::OpenAPI::fromJsonValue(m_deinterlace, json[QString("deinterlace")]);
    m_deinterlace_isSet = !json[QString("deinterlace")].isNull() && m_deinterlace_isValid;

    m_overlays_isValid = ::OpenAPI::fromJsonValue(m_overlays, json[QString("overlays")]);
    m_overlays_isSet = !json[QString("overlays")].isNull() && m_overlays_isValid;

    m_rotation_isValid = ::OpenAPI::fromJsonValue(m_rotation, json[QString("rotation")]);
    m_rotation_isSet = !json[QString("rotation")].isNull() && m_rotation_isValid;
}

QString OAIFilters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilters::asJsonObject() const {
    QJsonObject obj;
    if (m_crop.isSet()) {
        obj.insert(QString("crop"), ::OpenAPI::toJsonValue(m_crop));
    }
    if (m_deinterlace.isSet()) {
        obj.insert(QString("deinterlace"), ::OpenAPI::toJsonValue(m_deinterlace));
    }
    if (m_overlays.size() > 0) {
        obj.insert(QString("overlays"), ::OpenAPI::toJsonValue(m_overlays));
    }
    if (m_rotation_isSet) {
        obj.insert(QString("rotation"), ::OpenAPI::toJsonValue(m_rotation));
    }
    return obj;
}

OAIRectangle OAIFilters::getCrop() const {
    return m_crop;
}
void OAIFilters::setCrop(const OAIRectangle &crop) {
    m_crop = crop;
    m_crop_isSet = true;
}

bool OAIFilters::is_crop_Set() const{
    return m_crop_isSet;
}

bool OAIFilters::is_crop_Valid() const{
    return m_crop_isValid;
}

OAIDeinterlace OAIFilters::getDeinterlace() const {
    return m_deinterlace;
}
void OAIFilters::setDeinterlace(const OAIDeinterlace &deinterlace) {
    m_deinterlace = deinterlace;
    m_deinterlace_isSet = true;
}

bool OAIFilters::is_deinterlace_Set() const{
    return m_deinterlace_isSet;
}

bool OAIFilters::is_deinterlace_Valid() const{
    return m_deinterlace_isValid;
}

QList<OAIOverlay> OAIFilters::getOverlays() const {
    return m_overlays;
}
void OAIFilters::setOverlays(const QList<OAIOverlay> &overlays) {
    m_overlays = overlays;
    m_overlays_isSet = true;
}

bool OAIFilters::is_overlays_Set() const{
    return m_overlays_isSet;
}

bool OAIFilters::is_overlays_Valid() const{
    return m_overlays_isValid;
}

QString OAIFilters::getRotation() const {
    return m_rotation;
}
void OAIFilters::setRotation(const QString &rotation) {
    m_rotation = rotation;
    m_rotation_isSet = true;
}

bool OAIFilters::is_rotation_Set() const{
    return m_rotation_isSet;
}

bool OAIFilters::is_rotation_Valid() const{
    return m_rotation_isValid;
}

bool OAIFilters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_crop.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deinterlace.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_overlays.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
