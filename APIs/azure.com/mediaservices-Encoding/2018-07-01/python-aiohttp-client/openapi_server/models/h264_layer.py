# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.video_layer import VideoLayer
from openapi_server import util


class H264Layer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, buffer_window: str=None, entropy_mode: str=None, level: str=None, profile: str=None, reference_frames: int=None, adaptive_b_frame: bool=None, b_frames: int=None, bitrate: int=None, frame_rate: str=None, max_bitrate: int=None, slices: int=None, odata_type: str=None, height: str=None, label: str=None, width: str=None):
        """H264Layer - a model defined in OpenAPI

        :param buffer_window: The buffer_window of this H264Layer.
        :param entropy_mode: The entropy_mode of this H264Layer.
        :param level: The level of this H264Layer.
        :param profile: The profile of this H264Layer.
        :param reference_frames: The reference_frames of this H264Layer.
        :param adaptive_b_frame: The adaptive_b_frame of this H264Layer.
        :param b_frames: The b_frames of this H264Layer.
        :param bitrate: The bitrate of this H264Layer.
        :param frame_rate: The frame_rate of this H264Layer.
        :param max_bitrate: The max_bitrate of this H264Layer.
        :param slices: The slices of this H264Layer.
        :param odata_type: The odata_type of this H264Layer.
        :param height: The height of this H264Layer.
        :param label: The label of this H264Layer.
        :param width: The width of this H264Layer.
        """
        self.openapi_types = {
            'buffer_window': str,
            'entropy_mode': str,
            'level': str,
            'profile': str,
            'reference_frames': int,
            'adaptive_b_frame': bool,
            'b_frames': int,
            'bitrate': int,
            'frame_rate': str,
            'max_bitrate': int,
            'slices': int,
            'odata_type': str,
            'height': str,
            'label': str,
            'width': str
        }

        self.attribute_map = {
            'buffer_window': 'bufferWindow',
            'entropy_mode': 'entropyMode',
            'level': 'level',
            'profile': 'profile',
            'reference_frames': 'referenceFrames',
            'adaptive_b_frame': 'adaptiveBFrame',
            'b_frames': 'bFrames',
            'bitrate': 'bitrate',
            'frame_rate': 'frameRate',
            'max_bitrate': 'maxBitrate',
            'slices': 'slices',
            'odata_type': '@odata.type',
            'height': 'height',
            'label': 'label',
            'width': 'width'
        }

        self._buffer_window = buffer_window
        self._entropy_mode = entropy_mode
        self._level = level
        self._profile = profile
        self._reference_frames = reference_frames
        self._adaptive_b_frame = adaptive_b_frame
        self._b_frames = b_frames
        self._bitrate = bitrate
        self._frame_rate = frame_rate
        self._max_bitrate = max_bitrate
        self._slices = slices
        self._odata_type = odata_type
        self._height = height
        self._label = label
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'H264Layer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The H264Layer of this H264Layer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def buffer_window(self):
        """Gets the buffer_window of this H264Layer.

        The VBV buffer window length. The value should be in ISO 8601 format. The value should be in the range [0.1-100] seconds. The default is 5 seconds (for example, PT5S).

        :return: The buffer_window of this H264Layer.
        :rtype: str
        """
        return self._buffer_window

    @buffer_window.setter
    def buffer_window(self, buffer_window):
        """Sets the buffer_window of this H264Layer.

        The VBV buffer window length. The value should be in ISO 8601 format. The value should be in the range [0.1-100] seconds. The default is 5 seconds (for example, PT5S).

        :param buffer_window: The buffer_window of this H264Layer.
        :type buffer_window: str
        """

        self._buffer_window = buffer_window

    @property
    def entropy_mode(self):
        """Gets the entropy_mode of this H264Layer.

        The entropy mode to be used for this layer. If not specified, the encoder chooses the mode that is appropriate for the profile and level.

        :return: The entropy_mode of this H264Layer.
        :rtype: str
        """
        return self._entropy_mode

    @entropy_mode.setter
    def entropy_mode(self, entropy_mode):
        """Sets the entropy_mode of this H264Layer.

        The entropy mode to be used for this layer. If not specified, the encoder chooses the mode that is appropriate for the profile and level.

        :param entropy_mode: The entropy_mode of this H264Layer.
        :type entropy_mode: str
        """
        allowed_values = ["Cabac", "Cavlc"]  # noqa: E501
        if entropy_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `entropy_mode` ({0}), must be one of {1}"
                .format(entropy_mode, allowed_values)
            )

        self._entropy_mode = entropy_mode

    @property
    def level(self):
        """Gets the level of this H264Layer.

        We currently support Level up to 6.2. The value can be Auto, or a number that matches the H.264 profile. If not specified, the default is Auto, which lets the encoder choose the Level that is appropriate for this layer.

        :return: The level of this H264Layer.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this H264Layer.

        We currently support Level up to 6.2. The value can be Auto, or a number that matches the H.264 profile. If not specified, the default is Auto, which lets the encoder choose the Level that is appropriate for this layer.

        :param level: The level of this H264Layer.
        :type level: str
        """

        self._level = level

    @property
    def profile(self):
        """Gets the profile of this H264Layer.

        We currently support Baseline, Main, High, High422, High444. Default is Auto.

        :return: The profile of this H264Layer.
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this H264Layer.

        We currently support Baseline, Main, High, High422, High444. Default is Auto.

        :param profile: The profile of this H264Layer.
        :type profile: str
        """
        allowed_values = ["Auto", "Baseline", "Main", "High", "High422", "High444"]  # noqa: E501
        if profile not in allowed_values:
            raise ValueError(
                "Invalid value for `profile` ({0}), must be one of {1}"
                .format(profile, allowed_values)
            )

        self._profile = profile

    @property
    def reference_frames(self):
        """Gets the reference_frames of this H264Layer.

        The number of reference frames to be used when encoding this layer. If not specified, the encoder determines an appropriate number based on the encoder complexity setting.

        :return: The reference_frames of this H264Layer.
        :rtype: int
        """
        return self._reference_frames

    @reference_frames.setter
    def reference_frames(self, reference_frames):
        """Sets the reference_frames of this H264Layer.

        The number of reference frames to be used when encoding this layer. If not specified, the encoder determines an appropriate number based on the encoder complexity setting.

        :param reference_frames: The reference_frames of this H264Layer.
        :type reference_frames: int
        """

        self._reference_frames = reference_frames

    @property
    def adaptive_b_frame(self):
        """Gets the adaptive_b_frame of this H264Layer.

        Whether or not adaptive B-frames are to be used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use.

        :return: The adaptive_b_frame of this H264Layer.
        :rtype: bool
        """
        return self._adaptive_b_frame

    @adaptive_b_frame.setter
    def adaptive_b_frame(self, adaptive_b_frame):
        """Sets the adaptive_b_frame of this H264Layer.

        Whether or not adaptive B-frames are to be used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use.

        :param adaptive_b_frame: The adaptive_b_frame of this H264Layer.
        :type adaptive_b_frame: bool
        """

        self._adaptive_b_frame = adaptive_b_frame

    @property
    def b_frames(self):
        """Gets the b_frames of this H264Layer.

        The number of B-frames to be used when encoding this layer.  If not specified, the encoder chooses an appropriate number based on the video profile and level.

        :return: The b_frames of this H264Layer.
        :rtype: int
        """
        return self._b_frames

    @b_frames.setter
    def b_frames(self, b_frames):
        """Sets the b_frames of this H264Layer.

        The number of B-frames to be used when encoding this layer.  If not specified, the encoder chooses an appropriate number based on the video profile and level.

        :param b_frames: The b_frames of this H264Layer.
        :type b_frames: int
        """

        self._b_frames = b_frames

    @property
    def bitrate(self):
        """Gets the bitrate of this H264Layer.

        The average bitrate in bits per second at which to encode the input video when generating this layer. This is a required field.

        :return: The bitrate of this H264Layer.
        :rtype: int
        """
        return self._bitrate

    @bitrate.setter
    def bitrate(self, bitrate):
        """Sets the bitrate of this H264Layer.

        The average bitrate in bits per second at which to encode the input video when generating this layer. This is a required field.

        :param bitrate: The bitrate of this H264Layer.
        :type bitrate: int
        """
        if bitrate is None:
            raise ValueError("Invalid value for `bitrate`, must not be `None`")

        self._bitrate = bitrate

    @property
    def frame_rate(self):
        """Gets the frame_rate of this H264Layer.

        The frame rate (in frames per second) at which to encode this layer. The value can be in the form of M/N where M and N are integers (For example, 30000/1001), or in the form of a number (For example, 30, or 29.97). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video.

        :return: The frame_rate of this H264Layer.
        :rtype: str
        """
        return self._frame_rate

    @frame_rate.setter
    def frame_rate(self, frame_rate):
        """Sets the frame_rate of this H264Layer.

        The frame rate (in frames per second) at which to encode this layer. The value can be in the form of M/N where M and N are integers (For example, 30000/1001), or in the form of a number (For example, 30, or 29.97). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video.

        :param frame_rate: The frame_rate of this H264Layer.
        :type frame_rate: str
        """

        self._frame_rate = frame_rate

    @property
    def max_bitrate(self):
        """Gets the max_bitrate of this H264Layer.

        The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate.

        :return: The max_bitrate of this H264Layer.
        :rtype: int
        """
        return self._max_bitrate

    @max_bitrate.setter
    def max_bitrate(self, max_bitrate):
        """Sets the max_bitrate of this H264Layer.

        The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate.

        :param max_bitrate: The max_bitrate of this H264Layer.
        :type max_bitrate: int
        """

        self._max_bitrate = max_bitrate

    @property
    def slices(self):
        """Gets the slices of this H264Layer.

        The number of slices to be used when encoding this layer. If not specified, default is zero, which means that encoder will use a single slice for each frame.

        :return: The slices of this H264Layer.
        :rtype: int
        """
        return self._slices

    @slices.setter
    def slices(self, slices):
        """Sets the slices of this H264Layer.

        The number of slices to be used when encoding this layer. If not specified, default is zero, which means that encoder will use a single slice for each frame.

        :param slices: The slices of this H264Layer.
        :type slices: int
        """

        self._slices = slices

    @property
    def odata_type(self):
        """Gets the odata_type of this H264Layer.

        The discriminator for derived types.

        :return: The odata_type of this H264Layer.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this H264Layer.

        The discriminator for derived types.

        :param odata_type: The odata_type of this H264Layer.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type

    @property
    def height(self):
        """Gets the height of this H264Layer.

        The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example 50% means the output video has half as many pixels in height as the input.

        :return: The height of this H264Layer.
        :rtype: str
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this H264Layer.

        The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example 50% means the output video has half as many pixels in height as the input.

        :param height: The height of this H264Layer.
        :type height: str
        """

        self._height = height

    @property
    def label(self):
        """Gets the label of this H264Layer.

        The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming the output file.

        :return: The label of this H264Layer.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this H264Layer.

        The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming the output file.

        :param label: The label of this H264Layer.
        :type label: str
        """

        self._label = label

    @property
    def width(self):
        """Gets the width of this H264Layer.

        The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example 50% means the output video has half as many pixels in width as the input.

        :return: The width of this H264Layer.
        :rtype: str
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this H264Layer.

        The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example 50% means the output video has half as many pixels in width as the input.

        :param width: The width of this H264Layer.
        :type width: str
        """

        self._width = width
