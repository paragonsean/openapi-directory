# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.h264_layer import H264Layer
from openapi_server.models.video import Video
from openapi_server import util


class H264Video(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, complexity: str=None, layers: List[H264Layer]=None, scene_change_detection: bool=None, key_frame_interval: str=None, stretch_mode: str=None, odata_type: str=None, label: str=None):
        """H264Video - a model defined in OpenAPI

        :param complexity: The complexity of this H264Video.
        :param layers: The layers of this H264Video.
        :param scene_change_detection: The scene_change_detection of this H264Video.
        :param key_frame_interval: The key_frame_interval of this H264Video.
        :param stretch_mode: The stretch_mode of this H264Video.
        :param odata_type: The odata_type of this H264Video.
        :param label: The label of this H264Video.
        """
        self.openapi_types = {
            'complexity': str,
            'layers': List[H264Layer],
            'scene_change_detection': bool,
            'key_frame_interval': str,
            'stretch_mode': str,
            'odata_type': str,
            'label': str
        }

        self.attribute_map = {
            'complexity': 'complexity',
            'layers': 'layers',
            'scene_change_detection': 'sceneChangeDetection',
            'key_frame_interval': 'keyFrameInterval',
            'stretch_mode': 'stretchMode',
            'odata_type': '@odata.type',
            'label': 'label'
        }

        self._complexity = complexity
        self._layers = layers
        self._scene_change_detection = scene_change_detection
        self._key_frame_interval = key_frame_interval
        self._stretch_mode = stretch_mode
        self._odata_type = odata_type
        self._label = label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'H264Video':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The H264Video of this H264Video.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def complexity(self):
        """Gets the complexity of this H264Video.

        Tells the encoder how to choose its encoding settings. The default value is Balanced.

        :return: The complexity of this H264Video.
        :rtype: str
        """
        return self._complexity

    @complexity.setter
    def complexity(self, complexity):
        """Sets the complexity of this H264Video.

        Tells the encoder how to choose its encoding settings. The default value is Balanced.

        :param complexity: The complexity of this H264Video.
        :type complexity: str
        """
        allowed_values = ["Speed", "Balanced", "Quality"]  # noqa: E501
        if complexity not in allowed_values:
            raise ValueError(
                "Invalid value for `complexity` ({0}), must be one of {1}"
                .format(complexity, allowed_values)
            )

        self._complexity = complexity

    @property
    def layers(self):
        """Gets the layers of this H264Video.

        The collection of output H.264 layers to be produced by the encoder.

        :return: The layers of this H264Video.
        :rtype: List[H264Layer]
        """
        return self._layers

    @layers.setter
    def layers(self, layers):
        """Sets the layers of this H264Video.

        The collection of output H.264 layers to be produced by the encoder.

        :param layers: The layers of this H264Video.
        :type layers: List[H264Layer]
        """

        self._layers = layers

    @property
    def scene_change_detection(self):
        """Gets the scene_change_detection of this H264Video.

        Whether or not the encoder should insert key frames at scene changes. If not specified, the default is false. This flag should be set to true only when the encoder is being configured to produce a single output video.

        :return: The scene_change_detection of this H264Video.
        :rtype: bool
        """
        return self._scene_change_detection

    @scene_change_detection.setter
    def scene_change_detection(self, scene_change_detection):
        """Sets the scene_change_detection of this H264Video.

        Whether or not the encoder should insert key frames at scene changes. If not specified, the default is false. This flag should be set to true only when the encoder is being configured to produce a single output video.

        :param scene_change_detection: The scene_change_detection of this H264Video.
        :type scene_change_detection: bool
        """

        self._scene_change_detection = scene_change_detection

    @property
    def key_frame_interval(self):
        """Gets the key_frame_interval of this H264Video.

        The distance between two key frames, thereby defining a group of pictures (GOP). The value should be a non-zero integer in the range [1, 30] seconds, specified in ISO 8601 format. The default is 2 seconds (PT2S).

        :return: The key_frame_interval of this H264Video.
        :rtype: str
        """
        return self._key_frame_interval

    @key_frame_interval.setter
    def key_frame_interval(self, key_frame_interval):
        """Sets the key_frame_interval of this H264Video.

        The distance between two key frames, thereby defining a group of pictures (GOP). The value should be a non-zero integer in the range [1, 30] seconds, specified in ISO 8601 format. The default is 2 seconds (PT2S).

        :param key_frame_interval: The key_frame_interval of this H264Video.
        :type key_frame_interval: str
        """

        self._key_frame_interval = key_frame_interval

    @property
    def stretch_mode(self):
        """Gets the stretch_mode of this H264Video.

        The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize

        :return: The stretch_mode of this H264Video.
        :rtype: str
        """
        return self._stretch_mode

    @stretch_mode.setter
    def stretch_mode(self, stretch_mode):
        """Sets the stretch_mode of this H264Video.

        The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize

        :param stretch_mode: The stretch_mode of this H264Video.
        :type stretch_mode: str
        """
        allowed_values = ["None", "AutoSize", "AutoFit"]  # noqa: E501
        if stretch_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `stretch_mode` ({0}), must be one of {1}"
                .format(stretch_mode, allowed_values)
            )

        self._stretch_mode = stretch_mode

    @property
    def odata_type(self):
        """Gets the odata_type of this H264Video.

        The discriminator for derived types.

        :return: The odata_type of this H264Video.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this H264Video.

        The discriminator for derived types.

        :param odata_type: The odata_type of this H264Video.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type

    @property
    def label(self):
        """Gets the label of this H264Video.

        An optional label for the codec. The label can be used to control muxing behavior.

        :return: The label of this H264Video.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this H264Video.

        An optional label for the codec. The label can be used to control muxing behavior.

        :param label: The label of this H264Video.
        :type label: str
        """

        self._label = label
