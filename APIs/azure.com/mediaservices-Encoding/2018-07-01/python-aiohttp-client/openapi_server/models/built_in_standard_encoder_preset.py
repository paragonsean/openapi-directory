# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.preset import Preset
from openapi_server import util


class BuiltInStandardEncoderPreset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, preset_name: str=None, odata_type: str=None):
        """BuiltInStandardEncoderPreset - a model defined in OpenAPI

        :param preset_name: The preset_name of this BuiltInStandardEncoderPreset.
        :param odata_type: The odata_type of this BuiltInStandardEncoderPreset.
        """
        self.openapi_types = {
            'preset_name': str,
            'odata_type': str
        }

        self.attribute_map = {
            'preset_name': 'presetName',
            'odata_type': '@odata.type'
        }

        self._preset_name = preset_name
        self._odata_type = odata_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuiltInStandardEncoderPreset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuiltInStandardEncoderPreset of this BuiltInStandardEncoderPreset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def preset_name(self):
        """Gets the preset_name of this BuiltInStandardEncoderPreset.

        The built-in preset to be used for encoding videos.

        :return: The preset_name of this BuiltInStandardEncoderPreset.
        :rtype: str
        """
        return self._preset_name

    @preset_name.setter
    def preset_name(self, preset_name):
        """Sets the preset_name of this BuiltInStandardEncoderPreset.

        The built-in preset to be used for encoding videos.

        :param preset_name: The preset_name of this BuiltInStandardEncoderPreset.
        :type preset_name: str
        """
        allowed_values = ["H264SingleBitrateSD", "H264SingleBitrate720p", "H264SingleBitrate1080p", "AdaptiveStreaming", "AACGoodQualityAudio", "ContentAwareEncodingExperimental", "H264MultipleBitrate1080p", "H264MultipleBitrate720p", "H264MultipleBitrateSD"]  # noqa: E501
        if preset_name not in allowed_values:
            raise ValueError(
                "Invalid value for `preset_name` ({0}), must be one of {1}"
                .format(preset_name, allowed_values)
            )

        self._preset_name = preset_name

    @property
    def odata_type(self):
        """Gets the odata_type of this BuiltInStandardEncoderPreset.

        The discriminator for derived types.

        :return: The odata_type of this BuiltInStandardEncoderPreset.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this BuiltInStandardEncoderPreset.

        The discriminator for derived types.

        :param odata_type: The odata_type of this BuiltInStandardEncoderPreset.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type
