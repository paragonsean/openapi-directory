# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.multi_bitrate_format import MultiBitrateFormat
from openapi_server.models.output_file import OutputFile
from openapi_server import util


class Mp4Format(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, output_files: List[OutputFile]=None, odata_type: str=None, filename_pattern: str=None):
        """Mp4Format - a model defined in OpenAPI

        :param output_files: The output_files of this Mp4Format.
        :param odata_type: The odata_type of this Mp4Format.
        :param filename_pattern: The filename_pattern of this Mp4Format.
        """
        self.openapi_types = {
            'output_files': List[OutputFile],
            'odata_type': str,
            'filename_pattern': str
        }

        self.attribute_map = {
            'output_files': 'outputFiles',
            'odata_type': '@odata.type',
            'filename_pattern': 'filenamePattern'
        }

        self._output_files = output_files
        self._odata_type = odata_type
        self._filename_pattern = filename_pattern

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Mp4Format':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Mp4Format of this Mp4Format.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def output_files(self):
        """Gets the output_files of this Mp4Format.

        The list of output files to produce.  Each entry in the list is a set of audio and video layer labels to be muxed together .

        :return: The output_files of this Mp4Format.
        :rtype: List[OutputFile]
        """
        return self._output_files

    @output_files.setter
    def output_files(self, output_files):
        """Sets the output_files of this Mp4Format.

        The list of output files to produce.  Each entry in the list is a set of audio and video layer labels to be muxed together .

        :param output_files: The output_files of this Mp4Format.
        :type output_files: List[OutputFile]
        """

        self._output_files = output_files

    @property
    def odata_type(self):
        """Gets the odata_type of this Mp4Format.

        The discriminator for derived types.

        :return: The odata_type of this Mp4Format.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this Mp4Format.

        The discriminator for derived types.

        :param odata_type: The odata_type of this Mp4Format.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type

    @property
    def filename_pattern(self):
        """Gets the filename_pattern of this Mp4Format.

        The pattern of the file names for the generated output files. The following macros are supported in the file name: {Basename} - The base name of the input video {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {Bitrate} - The audio/video bitrate. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. Any unsubstituted macros will be collapsed and removed from the filename.

        :return: The filename_pattern of this Mp4Format.
        :rtype: str
        """
        return self._filename_pattern

    @filename_pattern.setter
    def filename_pattern(self, filename_pattern):
        """Sets the filename_pattern of this Mp4Format.

        The pattern of the file names for the generated output files. The following macros are supported in the file name: {Basename} - The base name of the input video {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {Bitrate} - The audio/video bitrate. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. Any unsubstituted macros will be collapsed and removed from the filename.

        :param filename_pattern: The filename_pattern of this Mp4Format.
        :type filename_pattern: str
        """
        if filename_pattern is None:
            raise ValueError("Invalid value for `filename_pattern`, must not be `None`")

        self._filename_pattern = filename_pattern
