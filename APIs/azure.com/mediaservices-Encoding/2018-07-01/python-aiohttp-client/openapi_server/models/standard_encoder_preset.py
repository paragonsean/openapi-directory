# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.codec import Codec
from openapi_server.models.filters import Filters
from openapi_server.models.format import Format
from openapi_server.models.preset import Preset
from openapi_server import util


class StandardEncoderPreset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, codecs: List[Codec]=None, filters: Filters=None, formats: List[Format]=None, odata_type: str=None):
        """StandardEncoderPreset - a model defined in OpenAPI

        :param codecs: The codecs of this StandardEncoderPreset.
        :param filters: The filters of this StandardEncoderPreset.
        :param formats: The formats of this StandardEncoderPreset.
        :param odata_type: The odata_type of this StandardEncoderPreset.
        """
        self.openapi_types = {
            'codecs': List[Codec],
            'filters': Filters,
            'formats': List[Format],
            'odata_type': str
        }

        self.attribute_map = {
            'codecs': 'codecs',
            'filters': 'filters',
            'formats': 'formats',
            'odata_type': '@odata.type'
        }

        self._codecs = codecs
        self._filters = filters
        self._formats = formats
        self._odata_type = odata_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StandardEncoderPreset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StandardEncoderPreset of this StandardEncoderPreset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def codecs(self):
        """Gets the codecs of this StandardEncoderPreset.

        The list of codecs to be used when encoding the input video.

        :return: The codecs of this StandardEncoderPreset.
        :rtype: List[Codec]
        """
        return self._codecs

    @codecs.setter
    def codecs(self, codecs):
        """Sets the codecs of this StandardEncoderPreset.

        The list of codecs to be used when encoding the input video.

        :param codecs: The codecs of this StandardEncoderPreset.
        :type codecs: List[Codec]
        """
        if codecs is None:
            raise ValueError("Invalid value for `codecs`, must not be `None`")

        self._codecs = codecs

    @property
    def filters(self):
        """Gets the filters of this StandardEncoderPreset.


        :return: The filters of this StandardEncoderPreset.
        :rtype: Filters
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this StandardEncoderPreset.


        :param filters: The filters of this StandardEncoderPreset.
        :type filters: Filters
        """

        self._filters = filters

    @property
    def formats(self):
        """Gets the formats of this StandardEncoderPreset.

        The list of outputs to be produced by the encoder.

        :return: The formats of this StandardEncoderPreset.
        :rtype: List[Format]
        """
        return self._formats

    @formats.setter
    def formats(self, formats):
        """Sets the formats of this StandardEncoderPreset.

        The list of outputs to be produced by the encoder.

        :param formats: The formats of this StandardEncoderPreset.
        :type formats: List[Format]
        """
        if formats is None:
            raise ValueError("Invalid value for `formats`, must not be `None`")

        self._formats = formats

    @property
    def odata_type(self):
        """Gets the odata_type of this StandardEncoderPreset.

        The discriminator for derived types.

        :return: The odata_type of this StandardEncoderPreset.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this StandardEncoderPreset.

        The discriminator for derived types.

        :param odata_type: The odata_type of this StandardEncoderPreset.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type
