# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.preset import Preset
from openapi_server import util


class TransformOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, on_error: str=None, preset: Preset=None, relative_priority: str=None):
        """TransformOutput - a model defined in OpenAPI

        :param on_error: The on_error of this TransformOutput.
        :param preset: The preset of this TransformOutput.
        :param relative_priority: The relative_priority of this TransformOutput.
        """
        self.openapi_types = {
            'on_error': str,
            'preset': Preset,
            'relative_priority': str
        }

        self.attribute_map = {
            'on_error': 'onError',
            'preset': 'preset',
            'relative_priority': 'relativePriority'
        }

        self._on_error = on_error
        self._preset = preset
        self._relative_priority = relative_priority

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransformOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransformOutput of this TransformOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def on_error(self):
        """Gets the on_error of this TransformOutput.

        A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with 'ContinueJob'. The default is 'StopProcessingJob'.

        :return: The on_error of this TransformOutput.
        :rtype: str
        """
        return self._on_error

    @on_error.setter
    def on_error(self, on_error):
        """Sets the on_error of this TransformOutput.

        A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with 'ContinueJob'. The default is 'StopProcessingJob'.

        :param on_error: The on_error of this TransformOutput.
        :type on_error: str
        """
        allowed_values = ["StopProcessingJob", "ContinueJob"]  # noqa: E501
        if on_error not in allowed_values:
            raise ValueError(
                "Invalid value for `on_error` ({0}), must be one of {1}"
                .format(on_error, allowed_values)
            )

        self._on_error = on_error

    @property
    def preset(self):
        """Gets the preset of this TransformOutput.


        :return: The preset of this TransformOutput.
        :rtype: Preset
        """
        return self._preset

    @preset.setter
    def preset(self, preset):
        """Sets the preset of this TransformOutput.


        :param preset: The preset of this TransformOutput.
        :type preset: Preset
        """
        if preset is None:
            raise ValueError("Invalid value for `preset`, must not be `None`")

        self._preset = preset

    @property
    def relative_priority(self):
        """Gets the relative_priority of this TransformOutput.

        Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.

        :return: The relative_priority of this TransformOutput.
        :rtype: str
        """
        return self._relative_priority

    @relative_priority.setter
    def relative_priority(self, relative_priority):
        """Sets the relative_priority of this TransformOutput.

        Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.

        :param relative_priority: The relative_priority of this TransformOutput.
        :type relative_priority: str
        """
        allowed_values = ["Low", "Normal", "High"]  # noqa: E501
        if relative_priority not in allowed_values:
            raise ValueError(
                "Invalid value for `relative_priority` ({0}), must be one of {1}"
                .format(relative_priority, allowed_values)
            )

        self._relative_priority = relative_priority
