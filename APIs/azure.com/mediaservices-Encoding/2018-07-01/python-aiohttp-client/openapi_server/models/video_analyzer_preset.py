# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audio_analyzer_preset import AudioAnalyzerPreset
from openapi_server import util


class VideoAnalyzerPreset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, insights_to_extract: str=None, audio_language: str=None, odata_type: str=None):
        """VideoAnalyzerPreset - a model defined in OpenAPI

        :param insights_to_extract: The insights_to_extract of this VideoAnalyzerPreset.
        :param audio_language: The audio_language of this VideoAnalyzerPreset.
        :param odata_type: The odata_type of this VideoAnalyzerPreset.
        """
        self.openapi_types = {
            'insights_to_extract': str,
            'audio_language': str,
            'odata_type': str
        }

        self.attribute_map = {
            'insights_to_extract': 'insightsToExtract',
            'audio_language': 'audioLanguage',
            'odata_type': '@odata.type'
        }

        self._insights_to_extract = insights_to_extract
        self._audio_language = audio_language
        self._odata_type = odata_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoAnalyzerPreset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoAnalyzerPreset of this VideoAnalyzerPreset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def insights_to_extract(self):
        """Gets the insights_to_extract of this VideoAnalyzerPreset.

        Defines the type of insights that you want the service to generate. The allowed values are 'AudioInsightsOnly', 'VideoInsightsOnly', and 'AllInsights'. The default is AllInsights. If you set this to AllInsights and the input is audio only, then only audio insights are generated. Similarly if the input is video only, then only video insights are generated. It is recommended that you not use AudioInsightsOnly if you expect some of your inputs to be video only; or use VideoInsightsOnly if you expect some of your inputs to be audio only. Your Jobs in such conditions would error out.

        :return: The insights_to_extract of this VideoAnalyzerPreset.
        :rtype: str
        """
        return self._insights_to_extract

    @insights_to_extract.setter
    def insights_to_extract(self, insights_to_extract):
        """Sets the insights_to_extract of this VideoAnalyzerPreset.

        Defines the type of insights that you want the service to generate. The allowed values are 'AudioInsightsOnly', 'VideoInsightsOnly', and 'AllInsights'. The default is AllInsights. If you set this to AllInsights and the input is audio only, then only audio insights are generated. Similarly if the input is video only, then only video insights are generated. It is recommended that you not use AudioInsightsOnly if you expect some of your inputs to be video only; or use VideoInsightsOnly if you expect some of your inputs to be audio only. Your Jobs in such conditions would error out.

        :param insights_to_extract: The insights_to_extract of this VideoAnalyzerPreset.
        :type insights_to_extract: str
        """
        allowed_values = ["AudioInsightsOnly", "VideoInsightsOnly", "AllInsights"]  # noqa: E501
        if insights_to_extract not in allowed_values:
            raise ValueError(
                "Invalid value for `insights_to_extract` ({0}), must be one of {1}"
                .format(insights_to_extract, allowed_values)
            )

        self._insights_to_extract = insights_to_extract

    @property
    def audio_language(self):
        """Gets the audio_language of this VideoAnalyzerPreset.

        The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US').  The list of supported languages are English ('en-US' and 'en-GB'), Spanish ('es-ES' and 'es-MX'), French ('fr-FR'), Italian ('it-IT'), Japanese ('ja-JP'), Portuguese ('pt-BR'), Chinese ('zh-CN'), German ('de-DE'), Arabic ('ar-EG' and 'ar-SY'), Russian ('ru-RU'), Hindi ('hi-IN'), and Korean ('ko-KR'). If you know the language of your content, it is recommended that you specify it. If the language isn't specified or set to null, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. This language detection feature currently supports English, Chinese, French, German, Italian, Japanese, Spanish, Russian, and Portuguese. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernable speech. If automatic detection fails to find the language, transcription would fallback to 'en-US'.\"

        :return: The audio_language of this VideoAnalyzerPreset.
        :rtype: str
        """
        return self._audio_language

    @audio_language.setter
    def audio_language(self, audio_language):
        """Sets the audio_language of this VideoAnalyzerPreset.

        The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US').  The list of supported languages are English ('en-US' and 'en-GB'), Spanish ('es-ES' and 'es-MX'), French ('fr-FR'), Italian ('it-IT'), Japanese ('ja-JP'), Portuguese ('pt-BR'), Chinese ('zh-CN'), German ('de-DE'), Arabic ('ar-EG' and 'ar-SY'), Russian ('ru-RU'), Hindi ('hi-IN'), and Korean ('ko-KR'). If you know the language of your content, it is recommended that you specify it. If the language isn't specified or set to null, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. This language detection feature currently supports English, Chinese, French, German, Italian, Japanese, Spanish, Russian, and Portuguese. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernable speech. If automatic detection fails to find the language, transcription would fallback to 'en-US'.\"

        :param audio_language: The audio_language of this VideoAnalyzerPreset.
        :type audio_language: str
        """

        self._audio_language = audio_language

    @property
    def odata_type(self):
        """Gets the odata_type of this VideoAnalyzerPreset.

        The discriminator for derived types.

        :return: The odata_type of this VideoAnalyzerPreset.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this VideoAnalyzerPreset.

        The discriminator for derived types.

        :param odata_type: The odata_type of this VideoAnalyzerPreset.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type
