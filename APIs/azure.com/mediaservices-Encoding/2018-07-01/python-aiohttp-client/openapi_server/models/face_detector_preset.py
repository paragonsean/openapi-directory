# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.preset import Preset
from openapi_server import util


class FaceDetectorPreset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resolution: str=None, odata_type: str=None):
        """FaceDetectorPreset - a model defined in OpenAPI

        :param resolution: The resolution of this FaceDetectorPreset.
        :param odata_type: The odata_type of this FaceDetectorPreset.
        """
        self.openapi_types = {
            'resolution': str,
            'odata_type': str
        }

        self.attribute_map = {
            'resolution': 'resolution',
            'odata_type': '@odata.type'
        }

        self._resolution = resolution
        self._odata_type = odata_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FaceDetectorPreset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FaceDetectorPreset of this FaceDetectorPreset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resolution(self):
        """Gets the resolution of this FaceDetectorPreset.

        Specifies the maximum resolution at which your video is analyzed. The default behavior is \"SourceResolution,\" which will keep the input video at its original resolution when analyzed. Using \"StandardDefinition\" will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to \"StandardDefinition\" will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics for details). However, faces that end up being too small in the resized video may not be detected.

        :return: The resolution of this FaceDetectorPreset.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this FaceDetectorPreset.

        Specifies the maximum resolution at which your video is analyzed. The default behavior is \"SourceResolution,\" which will keep the input video at its original resolution when analyzed. Using \"StandardDefinition\" will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to \"StandardDefinition\" will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics for details). However, faces that end up being too small in the resized video may not be detected.

        :param resolution: The resolution of this FaceDetectorPreset.
        :type resolution: str
        """
        allowed_values = ["SourceResolution", "StandardDefinition"]  # noqa: E501
        if resolution not in allowed_values:
            raise ValueError(
                "Invalid value for `resolution` ({0}), must be one of {1}"
                .format(resolution, allowed_values)
            )

        self._resolution = resolution

    @property
    def odata_type(self):
        """Gets the odata_type of this FaceDetectorPreset.

        The discriminator for derived types.

        :return: The odata_type of this FaceDetectorPreset.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this FaceDetectorPreset.

        The discriminator for derived types.

        :param odata_type: The odata_type of this FaceDetectorPreset.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type
