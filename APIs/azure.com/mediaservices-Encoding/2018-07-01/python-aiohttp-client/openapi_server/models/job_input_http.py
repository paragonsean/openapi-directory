# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.clip_time import ClipTime
from openapi_server.models.job_input_clip import JobInputClip
from openapi_server import util


class JobInputHttp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_uri: str=None, end: ClipTime=None, files: List[str]=None, label: str=None, start: ClipTime=None, odata_type: str=None):
        """JobInputHttp - a model defined in OpenAPI

        :param base_uri: The base_uri of this JobInputHttp.
        :param end: The end of this JobInputHttp.
        :param files: The files of this JobInputHttp.
        :param label: The label of this JobInputHttp.
        :param start: The start of this JobInputHttp.
        :param odata_type: The odata_type of this JobInputHttp.
        """
        self.openapi_types = {
            'base_uri': str,
            'end': ClipTime,
            'files': List[str],
            'label': str,
            'start': ClipTime,
            'odata_type': str
        }

        self.attribute_map = {
            'base_uri': 'baseUri',
            'end': 'end',
            'files': 'files',
            'label': 'label',
            'start': 'start',
            'odata_type': '@odata.type'
        }

        self._base_uri = base_uri
        self._end = end
        self._files = files
        self._label = label
        self._start = start
        self._odata_type = odata_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobInputHttp':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobInputHttp of this JobInputHttp.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_uri(self):
        """Gets the base_uri of this JobInputHttp.

        Base URI for HTTPS job input. It will be concatenated with provided file names. If no base uri is given, then the provided file list is assumed to be fully qualified uris. Maximum length of 4000 characters.

        :return: The base_uri of this JobInputHttp.
        :rtype: str
        """
        return self._base_uri

    @base_uri.setter
    def base_uri(self, base_uri):
        """Sets the base_uri of this JobInputHttp.

        Base URI for HTTPS job input. It will be concatenated with provided file names. If no base uri is given, then the provided file list is assumed to be fully qualified uris. Maximum length of 4000 characters.

        :param base_uri: The base_uri of this JobInputHttp.
        :type base_uri: str
        """

        self._base_uri = base_uri

    @property
    def end(self):
        """Gets the end of this JobInputHttp.


        :return: The end of this JobInputHttp.
        :rtype: ClipTime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this JobInputHttp.


        :param end: The end of this JobInputHttp.
        :type end: ClipTime
        """

        self._end = end

    @property
    def files(self):
        """Gets the files of this JobInputHttp.

        List of files. Required for JobInputHttp. Maximum of 4000 characters each.

        :return: The files of this JobInputHttp.
        :rtype: List[str]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this JobInputHttp.

        List of files. Required for JobInputHttp. Maximum of 4000 characters each.

        :param files: The files of this JobInputHttp.
        :type files: List[str]
        """

        self._files = files

    @property
    def label(self):
        """Gets the label of this JobInputHttp.

        A label that is assigned to a JobInputClip, that is used to satisfy a reference used in the Transform. For example, a Transform can be authored so as to take an image file with the label 'xyz' and apply it as an overlay onto the input video before it is encoded. When submitting a Job, exactly one of the JobInputs should be the image file, and it should have the label 'xyz'.

        :return: The label of this JobInputHttp.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this JobInputHttp.

        A label that is assigned to a JobInputClip, that is used to satisfy a reference used in the Transform. For example, a Transform can be authored so as to take an image file with the label 'xyz' and apply it as an overlay onto the input video before it is encoded. When submitting a Job, exactly one of the JobInputs should be the image file, and it should have the label 'xyz'.

        :param label: The label of this JobInputHttp.
        :type label: str
        """

        self._label = label

    @property
    def start(self):
        """Gets the start of this JobInputHttp.


        :return: The start of this JobInputHttp.
        :rtype: ClipTime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this JobInputHttp.


        :param start: The start of this JobInputHttp.
        :type start: ClipTime
        """

        self._start = start

    @property
    def odata_type(self):
        """Gets the odata_type of this JobInputHttp.

        The discriminator for derived types.

        :return: The odata_type of this JobInputHttp.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this JobInputHttp.

        The discriminator for derived types.

        :param odata_type: The odata_type of this JobInputHttp.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type
