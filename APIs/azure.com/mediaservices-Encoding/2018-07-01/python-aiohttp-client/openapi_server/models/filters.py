# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deinterlace import Deinterlace
from openapi_server.models.overlay import Overlay
from openapi_server.models.rectangle import Rectangle
from openapi_server import util


class Filters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, crop: Rectangle=None, deinterlace: Deinterlace=None, overlays: List[Overlay]=None, rotation: str=None):
        """Filters - a model defined in OpenAPI

        :param crop: The crop of this Filters.
        :param deinterlace: The deinterlace of this Filters.
        :param overlays: The overlays of this Filters.
        :param rotation: The rotation of this Filters.
        """
        self.openapi_types = {
            'crop': Rectangle,
            'deinterlace': Deinterlace,
            'overlays': List[Overlay],
            'rotation': str
        }

        self.attribute_map = {
            'crop': 'crop',
            'deinterlace': 'deinterlace',
            'overlays': 'overlays',
            'rotation': 'rotation'
        }

        self._crop = crop
        self._deinterlace = deinterlace
        self._overlays = overlays
        self._rotation = rotation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Filters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Filters of this Filters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def crop(self):
        """Gets the crop of this Filters.


        :return: The crop of this Filters.
        :rtype: Rectangle
        """
        return self._crop

    @crop.setter
    def crop(self, crop):
        """Sets the crop of this Filters.


        :param crop: The crop of this Filters.
        :type crop: Rectangle
        """

        self._crop = crop

    @property
    def deinterlace(self):
        """Gets the deinterlace of this Filters.


        :return: The deinterlace of this Filters.
        :rtype: Deinterlace
        """
        return self._deinterlace

    @deinterlace.setter
    def deinterlace(self, deinterlace):
        """Sets the deinterlace of this Filters.


        :param deinterlace: The deinterlace of this Filters.
        :type deinterlace: Deinterlace
        """

        self._deinterlace = deinterlace

    @property
    def overlays(self):
        """Gets the overlays of this Filters.

        The properties of overlays to be applied to the input video. These could be audio, image or video overlays.

        :return: The overlays of this Filters.
        :rtype: List[Overlay]
        """
        return self._overlays

    @overlays.setter
    def overlays(self, overlays):
        """Sets the overlays of this Filters.

        The properties of overlays to be applied to the input video. These could be audio, image or video overlays.

        :param overlays: The overlays of this Filters.
        :type overlays: List[Overlay]
        """

        self._overlays = overlays

    @property
    def rotation(self):
        """Gets the rotation of this Filters.

        The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto

        :return: The rotation of this Filters.
        :rtype: str
        """
        return self._rotation

    @rotation.setter
    def rotation(self, rotation):
        """Sets the rotation of this Filters.

        The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto

        :param rotation: The rotation of this Filters.
        :type rotation: str
        """
        allowed_values = ["Auto", "None", "Rotate0", "Rotate90", "Rotate180", "Rotate270"]  # noqa: E501
        if rotation not in allowed_values:
            raise ValueError(
                "Invalid value for `rotation` ({0}), must be one of {1}"
                .format(rotation, allowed_values)
            )

        self._rotation = rotation
