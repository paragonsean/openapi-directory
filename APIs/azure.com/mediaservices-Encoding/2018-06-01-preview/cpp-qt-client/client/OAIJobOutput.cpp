/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobOutput::OAIJobOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobOutput::OAIJobOutput() {
    this->initializeModel();
}

OAIJobOutput::~OAIJobOutput() {}

void OAIJobOutput::initializeModel() {

    m_odata_type_isSet = false;
    m_odata_type_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_progress_isSet = false;
    m_progress_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIJobOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobOutput::fromJsonObject(QJsonObject json) {

    m_odata_type_isValid = ::OpenAPI::fromJsonValue(m_odata_type, json[QString("@odata.type")]);
    m_odata_type_isSet = !json[QString("@odata.type")].isNull() && m_odata_type_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_progress_isValid = ::OpenAPI::fromJsonValue(m_progress, json[QString("progress")]);
    m_progress_isSet = !json[QString("progress")].isNull() && m_progress_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIJobOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_odata_type_isSet) {
        obj.insert(QString("@odata.type"), ::OpenAPI::toJsonValue(m_odata_type));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_progress_isSet) {
        obj.insert(QString("progress"), ::OpenAPI::toJsonValue(m_progress));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIJobOutput::getOdataType() const {
    return m_odata_type;
}
void OAIJobOutput::setOdataType(const QString &odata_type) {
    m_odata_type = odata_type;
    m_odata_type_isSet = true;
}

bool OAIJobOutput::is_odata_type_Set() const{
    return m_odata_type_isSet;
}

bool OAIJobOutput::is_odata_type_Valid() const{
    return m_odata_type_isValid;
}

OAIJobError OAIJobOutput::getError() const {
    return m_error;
}
void OAIJobOutput::setError(const OAIJobError &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIJobOutput::is_error_Set() const{
    return m_error_isSet;
}

bool OAIJobOutput::is_error_Valid() const{
    return m_error_isValid;
}

qint32 OAIJobOutput::getProgress() const {
    return m_progress;
}
void OAIJobOutput::setProgress(const qint32 &progress) {
    m_progress = progress;
    m_progress_isSet = true;
}

bool OAIJobOutput::is_progress_Set() const{
    return m_progress_isSet;
}

bool OAIJobOutput::is_progress_Valid() const{
    return m_progress_isValid;
}

QString OAIJobOutput::getState() const {
    return m_state;
}
void OAIJobOutput::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIJobOutput::is_state_Set() const{
    return m_state_isSet;
}

bool OAIJobOutput::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIJobOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_odata_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_odata_type_isValid && true;
}

} // namespace OpenAPI
