/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImage::OAIImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImage::OAIImage() {
    this->initializeModel();
}

OAIImage::~OAIImage() {}

void OAIImage::initializeModel() {

    m_range_isSet = false;
    m_range_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_step_isSet = false;
    m_step_isValid = false;

    m_key_frame_interval_isSet = false;
    m_key_frame_interval_isValid = false;

    m_stretch_mode_isSet = false;
    m_stretch_mode_isValid = false;

    m_odata_type_isSet = false;
    m_odata_type_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;
}

void OAIImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImage::fromJsonObject(QJsonObject json) {

    m_range_isValid = ::OpenAPI::fromJsonValue(m_range, json[QString("range")]);
    m_range_isSet = !json[QString("range")].isNull() && m_range_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_step_isValid = ::OpenAPI::fromJsonValue(m_step, json[QString("step")]);
    m_step_isSet = !json[QString("step")].isNull() && m_step_isValid;

    m_key_frame_interval_isValid = ::OpenAPI::fromJsonValue(m_key_frame_interval, json[QString("keyFrameInterval")]);
    m_key_frame_interval_isSet = !json[QString("keyFrameInterval")].isNull() && m_key_frame_interval_isValid;

    m_stretch_mode_isValid = ::OpenAPI::fromJsonValue(m_stretch_mode, json[QString("stretchMode")]);
    m_stretch_mode_isSet = !json[QString("stretchMode")].isNull() && m_stretch_mode_isValid;

    m_odata_type_isValid = ::OpenAPI::fromJsonValue(m_odata_type, json[QString("@odata.type")]);
    m_odata_type_isSet = !json[QString("@odata.type")].isNull() && m_odata_type_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;
}

QString OAIImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImage::asJsonObject() const {
    QJsonObject obj;
    if (m_range_isSet) {
        obj.insert(QString("range"), ::OpenAPI::toJsonValue(m_range));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_step_isSet) {
        obj.insert(QString("step"), ::OpenAPI::toJsonValue(m_step));
    }
    if (m_key_frame_interval_isSet) {
        obj.insert(QString("keyFrameInterval"), ::OpenAPI::toJsonValue(m_key_frame_interval));
    }
    if (m_stretch_mode_isSet) {
        obj.insert(QString("stretchMode"), ::OpenAPI::toJsonValue(m_stretch_mode));
    }
    if (m_odata_type_isSet) {
        obj.insert(QString("@odata.type"), ::OpenAPI::toJsonValue(m_odata_type));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    return obj;
}

QString OAIImage::getRange() const {
    return m_range;
}
void OAIImage::setRange(const QString &range) {
    m_range = range;
    m_range_isSet = true;
}

bool OAIImage::is_range_Set() const{
    return m_range_isSet;
}

bool OAIImage::is_range_Valid() const{
    return m_range_isValid;
}

QString OAIImage::getStart() const {
    return m_start;
}
void OAIImage::setStart(const QString &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIImage::is_start_Set() const{
    return m_start_isSet;
}

bool OAIImage::is_start_Valid() const{
    return m_start_isValid;
}

QString OAIImage::getStep() const {
    return m_step;
}
void OAIImage::setStep(const QString &step) {
    m_step = step;
    m_step_isSet = true;
}

bool OAIImage::is_step_Set() const{
    return m_step_isSet;
}

bool OAIImage::is_step_Valid() const{
    return m_step_isValid;
}

QString OAIImage::getKeyFrameInterval() const {
    return m_key_frame_interval;
}
void OAIImage::setKeyFrameInterval(const QString &key_frame_interval) {
    m_key_frame_interval = key_frame_interval;
    m_key_frame_interval_isSet = true;
}

bool OAIImage::is_key_frame_interval_Set() const{
    return m_key_frame_interval_isSet;
}

bool OAIImage::is_key_frame_interval_Valid() const{
    return m_key_frame_interval_isValid;
}

QString OAIImage::getStretchMode() const {
    return m_stretch_mode;
}
void OAIImage::setStretchMode(const QString &stretch_mode) {
    m_stretch_mode = stretch_mode;
    m_stretch_mode_isSet = true;
}

bool OAIImage::is_stretch_mode_Set() const{
    return m_stretch_mode_isSet;
}

bool OAIImage::is_stretch_mode_Valid() const{
    return m_stretch_mode_isValid;
}

QString OAIImage::getOdataType() const {
    return m_odata_type;
}
void OAIImage::setOdataType(const QString &odata_type) {
    m_odata_type = odata_type;
    m_odata_type_isSet = true;
}

bool OAIImage::is_odata_type_Set() const{
    return m_odata_type_isSet;
}

bool OAIImage::is_odata_type_Valid() const{
    return m_odata_type_isValid;
}

QString OAIImage::getLabel() const {
    return m_label;
}
void OAIImage::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIImage::is_label_Set() const{
    return m_label_isSet;
}

bool OAIImage::is_label_Valid() const{
    return m_label_isValid;
}

bool OAIImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_frame_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stretch_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_odata_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_odata_type_isValid && true;
}

} // namespace OpenAPI
