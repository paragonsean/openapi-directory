/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStandardEncoderPreset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStandardEncoderPreset::OAIStandardEncoderPreset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStandardEncoderPreset::OAIStandardEncoderPreset() {
    this->initializeModel();
}

OAIStandardEncoderPreset::~OAIStandardEncoderPreset() {}

void OAIStandardEncoderPreset::initializeModel() {

    m_codecs_isSet = false;
    m_codecs_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_formats_isSet = false;
    m_formats_isValid = false;

    m_odata_type_isSet = false;
    m_odata_type_isValid = false;
}

void OAIStandardEncoderPreset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStandardEncoderPreset::fromJsonObject(QJsonObject json) {

    m_codecs_isValid = ::OpenAPI::fromJsonValue(m_codecs, json[QString("codecs")]);
    m_codecs_isSet = !json[QString("codecs")].isNull() && m_codecs_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_formats_isValid = ::OpenAPI::fromJsonValue(m_formats, json[QString("formats")]);
    m_formats_isSet = !json[QString("formats")].isNull() && m_formats_isValid;

    m_odata_type_isValid = ::OpenAPI::fromJsonValue(m_odata_type, json[QString("@odata.type")]);
    m_odata_type_isSet = !json[QString("@odata.type")].isNull() && m_odata_type_isValid;
}

QString OAIStandardEncoderPreset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStandardEncoderPreset::asJsonObject() const {
    QJsonObject obj;
    if (m_codecs.size() > 0) {
        obj.insert(QString("codecs"), ::OpenAPI::toJsonValue(m_codecs));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_formats.size() > 0) {
        obj.insert(QString("formats"), ::OpenAPI::toJsonValue(m_formats));
    }
    if (m_odata_type_isSet) {
        obj.insert(QString("@odata.type"), ::OpenAPI::toJsonValue(m_odata_type));
    }
    return obj;
}

QList<OAICodec> OAIStandardEncoderPreset::getCodecs() const {
    return m_codecs;
}
void OAIStandardEncoderPreset::setCodecs(const QList<OAICodec> &codecs) {
    m_codecs = codecs;
    m_codecs_isSet = true;
}

bool OAIStandardEncoderPreset::is_codecs_Set() const{
    return m_codecs_isSet;
}

bool OAIStandardEncoderPreset::is_codecs_Valid() const{
    return m_codecs_isValid;
}

OAIFilters OAIStandardEncoderPreset::getFilters() const {
    return m_filters;
}
void OAIStandardEncoderPreset::setFilters(const OAIFilters &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIStandardEncoderPreset::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIStandardEncoderPreset::is_filters_Valid() const{
    return m_filters_isValid;
}

QList<OAIFormat> OAIStandardEncoderPreset::getFormats() const {
    return m_formats;
}
void OAIStandardEncoderPreset::setFormats(const QList<OAIFormat> &formats) {
    m_formats = formats;
    m_formats_isSet = true;
}

bool OAIStandardEncoderPreset::is_formats_Set() const{
    return m_formats_isSet;
}

bool OAIStandardEncoderPreset::is_formats_Valid() const{
    return m_formats_isValid;
}

QString OAIStandardEncoderPreset::getOdataType() const {
    return m_odata_type;
}
void OAIStandardEncoderPreset::setOdataType(const QString &odata_type) {
    m_odata_type = odata_type;
    m_odata_type_isSet = true;
}

bool OAIStandardEncoderPreset::is_odata_type_Set() const{
    return m_odata_type_isSet;
}

bool OAIStandardEncoderPreset::is_odata_type_Valid() const{
    return m_odata_type_isValid;
}

bool OAIStandardEncoderPreset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_codecs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_formats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_odata_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStandardEncoderPreset::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_odata_type_isValid && true;
}

} // namespace OpenAPI
