/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobInputClip.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobInputClip::OAIJobInputClip(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobInputClip::OAIJobInputClip() {
    this->initializeModel();
}

OAIJobInputClip::~OAIJobInputClip() {}

void OAIJobInputClip::initializeModel() {

    m_files_isSet = false;
    m_files_isValid = false;

    m_odata_type_isSet = false;
    m_odata_type_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;
}

void OAIJobInputClip::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobInputClip::fromJsonObject(QJsonObject json) {

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;

    m_odata_type_isValid = ::OpenAPI::fromJsonValue(m_odata_type, json[QString("@odata.type")]);
    m_odata_type_isSet = !json[QString("@odata.type")].isNull() && m_odata_type_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;
}

QString OAIJobInputClip::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobInputClip::asJsonObject() const {
    QJsonObject obj;
    if (m_files.size() > 0) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_odata_type_isSet) {
        obj.insert(QString("@odata.type"), ::OpenAPI::toJsonValue(m_odata_type));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    return obj;
}

QList<QString> OAIJobInputClip::getFiles() const {
    return m_files;
}
void OAIJobInputClip::setFiles(const QList<QString> &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAIJobInputClip::is_files_Set() const{
    return m_files_isSet;
}

bool OAIJobInputClip::is_files_Valid() const{
    return m_files_isValid;
}

QString OAIJobInputClip::getOdataType() const {
    return m_odata_type;
}
void OAIJobInputClip::setOdataType(const QString &odata_type) {
    m_odata_type = odata_type;
    m_odata_type_isSet = true;
}

bool OAIJobInputClip::is_odata_type_Set() const{
    return m_odata_type_isSet;
}

bool OAIJobInputClip::is_odata_type_Valid() const{
    return m_odata_type_isValid;
}

QString OAIJobInputClip::getLabel() const {
    return m_label;
}
void OAIJobInputClip::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIJobInputClip::is_label_Set() const{
    return m_label_isSet;
}

bool OAIJobInputClip::is_label_Valid() const{
    return m_label_isValid;
}

bool OAIJobInputClip::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_odata_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobInputClip::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_odata_type_isValid && true;
}

} // namespace OpenAPI
