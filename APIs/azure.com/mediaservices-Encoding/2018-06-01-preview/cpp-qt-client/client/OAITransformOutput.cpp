/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransformOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransformOutput::OAITransformOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransformOutput::OAITransformOutput() {
    this->initializeModel();
}

OAITransformOutput::~OAITransformOutput() {}

void OAITransformOutput::initializeModel() {

    m_on_error_isSet = false;
    m_on_error_isValid = false;

    m_preset_isSet = false;
    m_preset_isValid = false;

    m_relative_priority_isSet = false;
    m_relative_priority_isValid = false;
}

void OAITransformOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransformOutput::fromJsonObject(QJsonObject json) {

    m_on_error_isValid = ::OpenAPI::fromJsonValue(m_on_error, json[QString("onError")]);
    m_on_error_isSet = !json[QString("onError")].isNull() && m_on_error_isValid;

    m_preset_isValid = ::OpenAPI::fromJsonValue(m_preset, json[QString("preset")]);
    m_preset_isSet = !json[QString("preset")].isNull() && m_preset_isValid;

    m_relative_priority_isValid = ::OpenAPI::fromJsonValue(m_relative_priority, json[QString("relativePriority")]);
    m_relative_priority_isSet = !json[QString("relativePriority")].isNull() && m_relative_priority_isValid;
}

QString OAITransformOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransformOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_on_error_isSet) {
        obj.insert(QString("onError"), ::OpenAPI::toJsonValue(m_on_error));
    }
    if (m_preset.isSet()) {
        obj.insert(QString("preset"), ::OpenAPI::toJsonValue(m_preset));
    }
    if (m_relative_priority_isSet) {
        obj.insert(QString("relativePriority"), ::OpenAPI::toJsonValue(m_relative_priority));
    }
    return obj;
}

QString OAITransformOutput::getOnError() const {
    return m_on_error;
}
void OAITransformOutput::setOnError(const QString &on_error) {
    m_on_error = on_error;
    m_on_error_isSet = true;
}

bool OAITransformOutput::is_on_error_Set() const{
    return m_on_error_isSet;
}

bool OAITransformOutput::is_on_error_Valid() const{
    return m_on_error_isValid;
}

OAIPreset OAITransformOutput::getPreset() const {
    return m_preset;
}
void OAITransformOutput::setPreset(const OAIPreset &preset) {
    m_preset = preset;
    m_preset_isSet = true;
}

bool OAITransformOutput::is_preset_Set() const{
    return m_preset_isSet;
}

bool OAITransformOutput::is_preset_Valid() const{
    return m_preset_isValid;
}

QString OAITransformOutput::getRelativePriority() const {
    return m_relative_priority;
}
void OAITransformOutput::setRelativePriority(const QString &relative_priority) {
    m_relative_priority = relative_priority;
    m_relative_priority_isSet = true;
}

bool OAITransformOutput::is_relative_priority_Set() const{
    return m_relative_priority_isSet;
}

bool OAITransformOutput::is_relative_priority_Valid() const{
    return m_relative_priority_isValid;
}

bool OAITransformOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_on_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_priority_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransformOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_preset_isValid && true;
}

} // namespace OpenAPI
