/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Deinterlace from './Deinterlace';
import Overlay from './Overlay';
import Rectangle from './Rectangle';

/**
 * The Filters model module.
 * @module model/Filters
 * @version 2018-06-01-preview
 */
class Filters {
    /**
     * Constructs a new <code>Filters</code>.
     * Describes all the filtering operations, such as de-interlacing, rotation etc. that are to be applied to the input media before encoding.
     * @alias module:model/Filters
     */
    constructor() { 
        
        Filters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Filters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Filters} obj Optional instance to populate.
     * @return {module:model/Filters} The populated <code>Filters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Filters();

            if (data.hasOwnProperty('crop')) {
                obj['crop'] = Rectangle.constructFromObject(data['crop']);
            }
            if (data.hasOwnProperty('deinterlace')) {
                obj['deinterlace'] = Deinterlace.constructFromObject(data['deinterlace']);
            }
            if (data.hasOwnProperty('overlays')) {
                obj['overlays'] = ApiClient.convertToType(data['overlays'], [Overlay]);
            }
            if (data.hasOwnProperty('rotation')) {
                obj['rotation'] = ApiClient.convertToType(data['rotation'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Filters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Filters</code>.
     */
    static validateJSON(data) {
        // validate the optional field `crop`
        if (data['crop']) { // data not null
          Rectangle.validateJSON(data['crop']);
        }
        // validate the optional field `deinterlace`
        if (data['deinterlace']) { // data not null
          Deinterlace.validateJSON(data['deinterlace']);
        }
        if (data['overlays']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['overlays'])) {
                throw new Error("Expected the field `overlays` to be an array in the JSON data but got " + data['overlays']);
            }
            // validate the optional field `overlays` (array)
            for (const item of data['overlays']) {
                Overlay.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['rotation'] && !(typeof data['rotation'] === 'string' || data['rotation'] instanceof String)) {
            throw new Error("Expected the field `rotation` to be a primitive type in the JSON string but got " + data['rotation']);
        }

        return true;
    }


}



/**
 * @member {module:model/Rectangle} crop
 */
Filters.prototype['crop'] = undefined;

/**
 * @member {module:model/Deinterlace} deinterlace
 */
Filters.prototype['deinterlace'] = undefined;

/**
 * The properties of overlays to be applied to the input video. These could be audio, image or video overlays.
 * @member {Array.<module:model/Overlay>} overlays
 */
Filters.prototype['overlays'] = undefined;

/**
 * The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto
 * @member {module:model/Filters.RotationEnum} rotation
 */
Filters.prototype['rotation'] = undefined;





/**
 * Allowed values for the <code>rotation</code> property.
 * @enum {String}
 * @readonly
 */
Filters['RotationEnum'] = {

    /**
     * value: "Auto"
     * @const
     */
    "Auto": "Auto",

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Rotate0"
     * @const
     */
    "Rotate0": "Rotate0",

    /**
     * value: "Rotate90"
     * @const
     */
    "Rotate90": "Rotate90",

    /**
     * value: "Rotate180"
     * @const
     */
    "Rotate180": "Rotate180",

    /**
     * value: "Rotate270"
     * @const
     */
    "Rotate270": "Rotate270"
};



export default Filters;

