/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Layer from './Layer';

/**
 * The VideoLayer model module.
 * @module model/VideoLayer
 * @version 2018-06-01-preview
 */
class VideoLayer {
    /**
     * Constructs a new <code>VideoLayer</code>.
     * Describes the settings to be used when encoding the input video into a desired output bitrate layer.
     * @alias module:model/VideoLayer
     * @extends module:model/Layer
     * @implements module:model/Layer
     * @param odataType {String} The discriminator for derived types.
     */
    constructor(odataType) { 
        Layer.initialize(this, odataType);
        VideoLayer.initialize(this, odataType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, odataType) { 
    }

    /**
     * Constructs a <code>VideoLayer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoLayer} obj Optional instance to populate.
     * @return {module:model/VideoLayer} The populated <code>VideoLayer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoLayer();
            Layer.constructFromObject(data, obj);
            Layer.constructFromObject(data, obj);

            if (data.hasOwnProperty('adaptiveBFrame')) {
                obj['adaptiveBFrame'] = ApiClient.convertToType(data['adaptiveBFrame'], 'Boolean');
            }
            if (data.hasOwnProperty('bFrames')) {
                obj['bFrames'] = ApiClient.convertToType(data['bFrames'], 'Number');
            }
            if (data.hasOwnProperty('bitrate')) {
                obj['bitrate'] = ApiClient.convertToType(data['bitrate'], 'Number');
            }
            if (data.hasOwnProperty('frameRate')) {
                obj['frameRate'] = ApiClient.convertToType(data['frameRate'], 'String');
            }
            if (data.hasOwnProperty('maxBitrate')) {
                obj['maxBitrate'] = ApiClient.convertToType(data['maxBitrate'], 'Number');
            }
            if (data.hasOwnProperty('slices')) {
                obj['slices'] = ApiClient.convertToType(data['slices'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoLayer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoLayer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VideoLayer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['frameRate'] && !(typeof data['frameRate'] === 'string' || data['frameRate'] instanceof String)) {
            throw new Error("Expected the field `frameRate` to be a primitive type in the JSON string but got " + data['frameRate']);
        }

        return true;
    }


}

VideoLayer.RequiredProperties = ["@odata.type"];

/**
 * Whether or not adaptive B-frames are to be used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use.
 * @member {Boolean} adaptiveBFrame
 */
VideoLayer.prototype['adaptiveBFrame'] = undefined;

/**
 * The number of B-frames to be used when encoding this layer.  If not specified, the encoder chooses an appropriate number based on the video profile and level.
 * @member {Number} bFrames
 */
VideoLayer.prototype['bFrames'] = undefined;

/**
 * The average bitrate in bits per second at which to encode the input video when generating this layer. This is a required field.
 * @member {Number} bitrate
 */
VideoLayer.prototype['bitrate'] = undefined;

/**
 * The frame rate (in frames per second) at which to encode this layer. The value can be in the form of M/N where M and N are integers (For example, 30000/1001), or in the form of a number (For example, 30, or 29.97). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video.
 * @member {String} frameRate
 */
VideoLayer.prototype['frameRate'] = undefined;

/**
 * The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate.
 * @member {Number} maxBitrate
 */
VideoLayer.prototype['maxBitrate'] = undefined;

/**
 * The number of slices to be used when encoding this layer. If not specified, default is zero, which means that encoder will use a single slice for each frame.
 * @member {Number} slices
 */
VideoLayer.prototype['slices'] = undefined;


// Implement Layer interface:
/**
 * The discriminator for derived types.
 * @member {String} @odata.type
 */
Layer.prototype['@odata.type'] = undefined;
/**
 * The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example 50% means the output video has half as many pixels in height as the input.
 * @member {String} height
 */
Layer.prototype['height'] = undefined;
/**
 * The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming the output file.
 * @member {String} label
 */
Layer.prototype['label'] = undefined;
/**
 * The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example 50% means the output video has half as many pixels in width as the input.
 * @member {String} width
 */
Layer.prototype['width'] = undefined;




export default VideoLayer;

