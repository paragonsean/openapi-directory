/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import H264Layer from './H264Layer';
import Video from './Video';

/**
 * The H264Video model module.
 * @module model/H264Video
 * @version 2018-06-01-preview
 */
class H264Video {
    /**
     * Constructs a new <code>H264Video</code>.
     * Describes all the properties for encoding a video with the H.264 codec.
     * @alias module:model/H264Video
     * @extends module:model/Video
     * @implements module:model/Video
     * @param odataType {String} The discriminator for derived types.
     */
    constructor(odataType) { 
        Video.initialize(this, odataType);
        H264Video.initialize(this, odataType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, odataType) { 
    }

    /**
     * Constructs a <code>H264Video</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/H264Video} obj Optional instance to populate.
     * @return {module:model/H264Video} The populated <code>H264Video</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new H264Video();
            Video.constructFromObject(data, obj);
            Video.constructFromObject(data, obj);

            if (data.hasOwnProperty('complexity')) {
                obj['complexity'] = ApiClient.convertToType(data['complexity'], 'String');
            }
            if (data.hasOwnProperty('layers')) {
                obj['layers'] = ApiClient.convertToType(data['layers'], [H264Layer]);
            }
            if (data.hasOwnProperty('sceneChangeDetection')) {
                obj['sceneChangeDetection'] = ApiClient.convertToType(data['sceneChangeDetection'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>H264Video</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>H264Video</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of H264Video.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['complexity'] && !(typeof data['complexity'] === 'string' || data['complexity'] instanceof String)) {
            throw new Error("Expected the field `complexity` to be a primitive type in the JSON string but got " + data['complexity']);
        }
        if (data['layers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['layers'])) {
                throw new Error("Expected the field `layers` to be an array in the JSON data but got " + data['layers']);
            }
            // validate the optional field `layers` (array)
            for (const item of data['layers']) {
                H264Layer.validateJSON(item);
            };
        }

        return true;
    }


}

H264Video.RequiredProperties = ["@odata.type"];

/**
 * Tells the encoder how to choose its encoding settings. The default value is Balanced.
 * @member {module:model/H264Video.ComplexityEnum} complexity
 */
H264Video.prototype['complexity'] = undefined;

/**
 * The collection of output H.264 layers to be produced by the encoder.
 * @member {Array.<module:model/H264Layer>} layers
 */
H264Video.prototype['layers'] = undefined;

/**
 * Whether or not the encoder should insert key frames at scene changes. If not specified, the default is false. This flag should be set to true only when the encoder is being configured to produce a single output video.
 * @member {Boolean} sceneChangeDetection
 */
H264Video.prototype['sceneChangeDetection'] = undefined;


// Implement Video interface:
/**
 * The discriminator for derived types.
 * @member {String} @odata.type
 */
Video.prototype['@odata.type'] = undefined;
/**
 * An optional label for the codec. The label can be used to control muxing behavior.
 * @member {String} label
 */
Video.prototype['label'] = undefined;



/**
 * Allowed values for the <code>complexity</code> property.
 * @enum {String}
 * @readonly
 */
H264Video['ComplexityEnum'] = {

    /**
     * value: "Speed"
     * @const
     */
    "Speed": "Speed",

    /**
     * value: "Balanced"
     * @const
     */
    "Balanced": "Balanced",

    /**
     * value: "Quality"
     * @const
     */
    "Quality": "Quality"
};



export default H264Video;

