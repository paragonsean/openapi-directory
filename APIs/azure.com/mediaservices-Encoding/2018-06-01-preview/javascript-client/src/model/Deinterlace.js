/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Deinterlace model module.
 * @module model/Deinterlace
 * @version 2018-06-01-preview
 */
class Deinterlace {
    /**
     * Constructs a new <code>Deinterlace</code>.
     * Describes the de-interlacing settings.
     * @alias module:model/Deinterlace
     */
    constructor() { 
        
        Deinterlace.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Deinterlace</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Deinterlace} obj Optional instance to populate.
     * @return {module:model/Deinterlace} The populated <code>Deinterlace</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Deinterlace();

            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('parity')) {
                obj['parity'] = ApiClient.convertToType(data['parity'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Deinterlace</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Deinterlace</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        // ensure the json data is a string
        if (data['parity'] && !(typeof data['parity'] === 'string' || data['parity'] instanceof String)) {
            throw new Error("Expected the field `parity` to be a primitive type in the JSON string but got " + data['parity']);
        }

        return true;
    }


}



/**
 * The deinterlacing mode. Defaults to AutoPixelAdaptive.
 * @member {module:model/Deinterlace.ModeEnum} mode
 */
Deinterlace.prototype['mode'] = undefined;

/**
 * The field parity for de-interlacing, defaults to Auto.
 * @member {module:model/Deinterlace.ParityEnum} parity
 */
Deinterlace.prototype['parity'] = undefined;





/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
Deinterlace['ModeEnum'] = {

    /**
     * value: "Off"
     * @const
     */
    "Off": "Off",

    /**
     * value: "AutoPixelAdaptive"
     * @const
     */
    "AutoPixelAdaptive": "AutoPixelAdaptive"
};


/**
 * Allowed values for the <code>parity</code> property.
 * @enum {String}
 * @readonly
 */
Deinterlace['ParityEnum'] = {

    /**
     * value: "Auto"
     * @const
     */
    "Auto": "Auto",

    /**
     * value: "TopFieldFirst"
     * @const
     */
    "TopFieldFirst": "TopFieldFirst",

    /**
     * value: "BottomFieldFirst"
     * @const
     */
    "BottomFieldFirst": "BottomFieldFirst"
};



export default Deinterlace;

