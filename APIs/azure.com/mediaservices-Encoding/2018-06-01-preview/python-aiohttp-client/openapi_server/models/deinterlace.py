# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Deinterlace(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mode: str=None, parity: str=None):
        """Deinterlace - a model defined in OpenAPI

        :param mode: The mode of this Deinterlace.
        :param parity: The parity of this Deinterlace.
        """
        self.openapi_types = {
            'mode': str,
            'parity': str
        }

        self.attribute_map = {
            'mode': 'mode',
            'parity': 'parity'
        }

        self._mode = mode
        self._parity = parity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Deinterlace':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Deinterlace of this Deinterlace.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mode(self):
        """Gets the mode of this Deinterlace.

        The deinterlacing mode. Defaults to AutoPixelAdaptive.

        :return: The mode of this Deinterlace.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Deinterlace.

        The deinterlacing mode. Defaults to AutoPixelAdaptive.

        :param mode: The mode of this Deinterlace.
        :type mode: str
        """
        allowed_values = ["Off", "AutoPixelAdaptive"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def parity(self):
        """Gets the parity of this Deinterlace.

        The field parity for de-interlacing, defaults to Auto.

        :return: The parity of this Deinterlace.
        :rtype: str
        """
        return self._parity

    @parity.setter
    def parity(self, parity):
        """Sets the parity of this Deinterlace.

        The field parity for de-interlacing, defaults to Auto.

        :param parity: The parity of this Deinterlace.
        :type parity: str
        """
        allowed_values = ["Auto", "TopFieldFirst", "BottomFieldFirst"]  # noqa: E501
        if parity not in allowed_values:
            raise ValueError(
                "Invalid value for `parity` ({0}), must be one of {1}"
                .format(parity, allowed_values)
            )

        self._parity = parity
