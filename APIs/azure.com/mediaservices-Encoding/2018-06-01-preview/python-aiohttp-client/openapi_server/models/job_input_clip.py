# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_input import JobInput
from openapi_server import util


class JobInputClip(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, files: List[str]=None, odata_type: str=None, label: str=None):
        """JobInputClip - a model defined in OpenAPI

        :param files: The files of this JobInputClip.
        :param odata_type: The odata_type of this JobInputClip.
        :param label: The label of this JobInputClip.
        """
        self.openapi_types = {
            'files': List[str],
            'odata_type': str,
            'label': str
        }

        self.attribute_map = {
            'files': 'files',
            'odata_type': '@odata.type',
            'label': 'label'
        }

        self._files = files
        self._odata_type = odata_type
        self._label = label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobInputClip':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobInputClip of this JobInputClip.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def files(self):
        """Gets the files of this JobInputClip.

        List of files. Required for JobInputHttp.

        :return: The files of this JobInputClip.
        :rtype: List[str]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this JobInputClip.

        List of files. Required for JobInputHttp.

        :param files: The files of this JobInputClip.
        :type files: List[str]
        """

        self._files = files

    @property
    def odata_type(self):
        """Gets the odata_type of this JobInputClip.

        The discriminator for derived types.

        :return: The odata_type of this JobInputClip.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this JobInputClip.

        The discriminator for derived types.

        :param odata_type: The odata_type of this JobInputClip.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type

    @property
    def label(self):
        """Gets the label of this JobInputClip.

        A label that is assigned to a JobInput, that is used to satisfy a reference used in the Transform. For example, a Transform can be authored so as to take an image file with the label 'xyz' and apply it as an overlay onto the input video before it is encoded. When submitting a Job, exactly one of the JobInputs should be the image file, and it should have the label 'xyz'.

        :return: The label of this JobInputClip.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this JobInputClip.

        A label that is assigned to a JobInput, that is used to satisfy a reference used in the Transform. For example, a Transform can be authored so as to take an image file with the label 'xyz' and apply it as an overlay onto the input video before it is encoded. When submitting a Job, exactly one of the JobInputs should be the image file, and it should have the label 'xyz'.

        :param label: The label of this JobInputClip.
        :type label: str
        """

        self._label = label
