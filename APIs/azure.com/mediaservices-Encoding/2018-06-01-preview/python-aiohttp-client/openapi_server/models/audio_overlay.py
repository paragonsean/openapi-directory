# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.overlay import Overlay
from openapi_server import util


class AudioOverlay(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, odata_type: str=None, audio_gain_level: float=None, end: str=None, fade_in_duration: str=None, fade_out_duration: str=None, input_label: str=None, start: str=None):
        """AudioOverlay - a model defined in OpenAPI

        :param odata_type: The odata_type of this AudioOverlay.
        :param audio_gain_level: The audio_gain_level of this AudioOverlay.
        :param end: The end of this AudioOverlay.
        :param fade_in_duration: The fade_in_duration of this AudioOverlay.
        :param fade_out_duration: The fade_out_duration of this AudioOverlay.
        :param input_label: The input_label of this AudioOverlay.
        :param start: The start of this AudioOverlay.
        """
        self.openapi_types = {
            'odata_type': str,
            'audio_gain_level': float,
            'end': str,
            'fade_in_duration': str,
            'fade_out_duration': str,
            'input_label': str,
            'start': str
        }

        self.attribute_map = {
            'odata_type': '@odata.type',
            'audio_gain_level': 'audioGainLevel',
            'end': 'end',
            'fade_in_duration': 'fadeInDuration',
            'fade_out_duration': 'fadeOutDuration',
            'input_label': 'inputLabel',
            'start': 'start'
        }

        self._odata_type = odata_type
        self._audio_gain_level = audio_gain_level
        self._end = end
        self._fade_in_duration = fade_in_duration
        self._fade_out_duration = fade_out_duration
        self._input_label = input_label
        self._start = start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioOverlay':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioOverlay of this AudioOverlay.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def odata_type(self):
        """Gets the odata_type of this AudioOverlay.

        The discriminator for derived types.

        :return: The odata_type of this AudioOverlay.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this AudioOverlay.

        The discriminator for derived types.

        :param odata_type: The odata_type of this AudioOverlay.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type

    @property
    def audio_gain_level(self):
        """Gets the audio_gain_level of this AudioOverlay.

        The gain level of audio in the overlay. The value should be in the range [0, 1.0]. The default is 1.0.

        :return: The audio_gain_level of this AudioOverlay.
        :rtype: float
        """
        return self._audio_gain_level

    @audio_gain_level.setter
    def audio_gain_level(self, audio_gain_level):
        """Sets the audio_gain_level of this AudioOverlay.

        The gain level of audio in the overlay. The value should be in the range [0, 1.0]. The default is 1.0.

        :param audio_gain_level: The audio_gain_level of this AudioOverlay.
        :type audio_gain_level: float
        """

        self._audio_gain_level = audio_gain_level

    @property
    def end(self):
        """Gets the end of this AudioOverlay.

        The position in the input video at which the overlay ends. The value should be in ISO 8601 duration format. For example, PT30S to end the overlay at 30 seconds in to the input video. If not specified the overlay will be applied until the end of the input video if inputLoop is true. Else, if inputLoop is false, then overlay will last as long as the duration of the overlay media.

        :return: The end of this AudioOverlay.
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this AudioOverlay.

        The position in the input video at which the overlay ends. The value should be in ISO 8601 duration format. For example, PT30S to end the overlay at 30 seconds in to the input video. If not specified the overlay will be applied until the end of the input video if inputLoop is true. Else, if inputLoop is false, then overlay will last as long as the duration of the overlay media.

        :param end: The end of this AudioOverlay.
        :type end: str
        """

        self._end = end

    @property
    def fade_in_duration(self):
        """Gets the fade_in_duration of this AudioOverlay.

        The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as PT0S).

        :return: The fade_in_duration of this AudioOverlay.
        :rtype: str
        """
        return self._fade_in_duration

    @fade_in_duration.setter
    def fade_in_duration(self, fade_in_duration):
        """Sets the fade_in_duration of this AudioOverlay.

        The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as PT0S).

        :param fade_in_duration: The fade_in_duration of this AudioOverlay.
        :type fade_in_duration: str
        """

        self._fade_in_duration = fade_in_duration

    @property
    def fade_out_duration(self):
        """Gets the fade_out_duration of this AudioOverlay.

        The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as PT0S).

        :return: The fade_out_duration of this AudioOverlay.
        :rtype: str
        """
        return self._fade_out_duration

    @fade_out_duration.setter
    def fade_out_duration(self, fade_out_duration):
        """Sets the fade_out_duration of this AudioOverlay.

        The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as PT0S).

        :param fade_out_duration: The fade_out_duration of this AudioOverlay.
        :type fade_out_duration: str
        """

        self._fade_out_duration = fade_out_duration

    @property
    def input_label(self):
        """Gets the input_label of this AudioOverlay.

        The label of the job input which is to be used as an overlay. The Input must specify exactly one file. You can specify an image file in JPG or PNG formats, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file. See https://aka.ms/mesformats for the complete list of supported audio and video file formats.

        :return: The input_label of this AudioOverlay.
        :rtype: str
        """
        return self._input_label

    @input_label.setter
    def input_label(self, input_label):
        """Sets the input_label of this AudioOverlay.

        The label of the job input which is to be used as an overlay. The Input must specify exactly one file. You can specify an image file in JPG or PNG formats, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file. See https://aka.ms/mesformats for the complete list of supported audio and video file formats.

        :param input_label: The input_label of this AudioOverlay.
        :type input_label: str
        """

        self._input_label = input_label

    @property
    def start(self):
        """Gets the start of this AudioOverlay.

        The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds in to the input video. If not specified the overlay starts from the beginning of the input video.

        :return: The start of this AudioOverlay.
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this AudioOverlay.

        The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds in to the input video. If not specified the overlay starts from the beginning of the input video.

        :param start: The start of this AudioOverlay.
        :type start: str
        """

        self._start = start
