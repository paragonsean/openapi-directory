# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.layer import Layer
from openapi_server import util


class PngLayer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, odata_type: str=None, height: str=None, label: str=None, width: str=None):
        """PngLayer - a model defined in OpenAPI

        :param odata_type: The odata_type of this PngLayer.
        :param height: The height of this PngLayer.
        :param label: The label of this PngLayer.
        :param width: The width of this PngLayer.
        """
        self.openapi_types = {
            'odata_type': str,
            'height': str,
            'label': str,
            'width': str
        }

        self.attribute_map = {
            'odata_type': '@odata.type',
            'height': 'height',
            'label': 'label',
            'width': 'width'
        }

        self._odata_type = odata_type
        self._height = height
        self._label = label
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PngLayer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PngLayer of this PngLayer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def odata_type(self):
        """Gets the odata_type of this PngLayer.

        The discriminator for derived types.

        :return: The odata_type of this PngLayer.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this PngLayer.

        The discriminator for derived types.

        :param odata_type: The odata_type of this PngLayer.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type

    @property
    def height(self):
        """Gets the height of this PngLayer.

        The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example 50% means the output video has half as many pixels in height as the input.

        :return: The height of this PngLayer.
        :rtype: str
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this PngLayer.

        The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example 50% means the output video has half as many pixels in height as the input.

        :param height: The height of this PngLayer.
        :type height: str
        """

        self._height = height

    @property
    def label(self):
        """Gets the label of this PngLayer.

        The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming the output file.

        :return: The label of this PngLayer.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this PngLayer.

        The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming the output file.

        :param label: The label of this PngLayer.
        :type label: str
        """

        self._label = label

    @property
    def width(self):
        """Gets the width of this PngLayer.

        The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example 50% means the output video has half as many pixels in width as the input.

        :return: The width of this PngLayer.
        :rtype: str
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this PngLayer.

        The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example 50% means the output video has half as many pixels in width as the input.

        :param width: The width of this PngLayer.
        :type width: str
        """

        self._width = width
