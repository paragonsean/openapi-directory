# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Rectangle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, height: str=None, left: str=None, top: str=None, width: str=None):
        """Rectangle - a model defined in OpenAPI

        :param height: The height of this Rectangle.
        :param left: The left of this Rectangle.
        :param top: The top of this Rectangle.
        :param width: The width of this Rectangle.
        """
        self.openapi_types = {
            'height': str,
            'left': str,
            'top': str,
            'width': str
        }

        self.attribute_map = {
            'height': 'height',
            'left': 'left',
            'top': 'top',
            'width': 'width'
        }

        self._height = height
        self._left = left
        self._top = top
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rectangle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rectangle of this Rectangle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def height(self):
        """Gets the height of this Rectangle.

        The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).

        :return: The height of this Rectangle.
        :rtype: str
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Rectangle.

        The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).

        :param height: The height of this Rectangle.
        :type height: str
        """

        self._height = height

    @property
    def left(self):
        """Gets the left of this Rectangle.

        The number of pixels from the left-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).

        :return: The left of this Rectangle.
        :rtype: str
        """
        return self._left

    @left.setter
    def left(self, left):
        """Sets the left of this Rectangle.

        The number of pixels from the left-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).

        :param left: The left of this Rectangle.
        :type left: str
        """

        self._left = left

    @property
    def top(self):
        """Gets the top of this Rectangle.

        The number of pixels from the top-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).

        :return: The top of this Rectangle.
        :rtype: str
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this Rectangle.

        The number of pixels from the top-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).

        :param top: The top of this Rectangle.
        :type top: str
        """

        self._top = top

    @property
    def width(self):
        """Gets the width of this Rectangle.

        The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).

        :return: The width of this Rectangle.
        :rtype: str
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Rectangle.

        The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).

        :param width: The width of this Rectangle.
        :type width: str
        """

        self._width = width
