# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audio import Audio
from openapi_server import util


class AacAudio(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, profile: str=None, bitrate: int=None, channels: int=None, sampling_rate: int=None, odata_type: str=None, label: str=None):
        """AacAudio - a model defined in OpenAPI

        :param profile: The profile of this AacAudio.
        :param bitrate: The bitrate of this AacAudio.
        :param channels: The channels of this AacAudio.
        :param sampling_rate: The sampling_rate of this AacAudio.
        :param odata_type: The odata_type of this AacAudio.
        :param label: The label of this AacAudio.
        """
        self.openapi_types = {
            'profile': str,
            'bitrate': int,
            'channels': int,
            'sampling_rate': int,
            'odata_type': str,
            'label': str
        }

        self.attribute_map = {
            'profile': 'profile',
            'bitrate': 'bitrate',
            'channels': 'channels',
            'sampling_rate': 'samplingRate',
            'odata_type': '@odata.type',
            'label': 'label'
        }

        self._profile = profile
        self._bitrate = bitrate
        self._channels = channels
        self._sampling_rate = sampling_rate
        self._odata_type = odata_type
        self._label = label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AacAudio':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AacAudio of this AacAudio.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def profile(self):
        """Gets the profile of this AacAudio.

        The encoding profile to be used when encoding audio with AAC.

        :return: The profile of this AacAudio.
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this AacAudio.

        The encoding profile to be used when encoding audio with AAC.

        :param profile: The profile of this AacAudio.
        :type profile: str
        """
        allowed_values = ["AacLc", "HeAacV1", "HeAacV2"]  # noqa: E501
        if profile not in allowed_values:
            raise ValueError(
                "Invalid value for `profile` ({0}), must be one of {1}"
                .format(profile, allowed_values)
            )

        self._profile = profile

    @property
    def bitrate(self):
        """Gets the bitrate of this AacAudio.

        The bitrate, in bits per second, of the output encoded audio.

        :return: The bitrate of this AacAudio.
        :rtype: int
        """
        return self._bitrate

    @bitrate.setter
    def bitrate(self, bitrate):
        """Sets the bitrate of this AacAudio.

        The bitrate, in bits per second, of the output encoded audio.

        :param bitrate: The bitrate of this AacAudio.
        :type bitrate: int
        """

        self._bitrate = bitrate

    @property
    def channels(self):
        """Gets the channels of this AacAudio.

        The number of channels in the audio.

        :return: The channels of this AacAudio.
        :rtype: int
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this AacAudio.

        The number of channels in the audio.

        :param channels: The channels of this AacAudio.
        :type channels: int
        """

        self._channels = channels

    @property
    def sampling_rate(self):
        """Gets the sampling_rate of this AacAudio.

        The sampling rate to use for encoding in hertz.

        :return: The sampling_rate of this AacAudio.
        :rtype: int
        """
        return self._sampling_rate

    @sampling_rate.setter
    def sampling_rate(self, sampling_rate):
        """Sets the sampling_rate of this AacAudio.

        The sampling rate to use for encoding in hertz.

        :param sampling_rate: The sampling_rate of this AacAudio.
        :type sampling_rate: int
        """

        self._sampling_rate = sampling_rate

    @property
    def odata_type(self):
        """Gets the odata_type of this AacAudio.

        The discriminator for derived types.

        :return: The odata_type of this AacAudio.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this AacAudio.

        The discriminator for derived types.

        :param odata_type: The odata_type of this AacAudio.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type

    @property
    def label(self):
        """Gets the label of this AacAudio.

        An optional label for the codec. The label can be used to control muxing behavior.

        :return: The label of this AacAudio.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this AacAudio.

        An optional label for the codec. The label can be used to control muxing behavior.

        :param label: The label of this AacAudio.
        :type label: str
        """

        self._label = label
