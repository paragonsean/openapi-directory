# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_error import JobError
from openapi_server.models.job_output import JobOutput
from openapi_server import util


class JobOutputAsset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_name: str=None, odata_type: str=None, error: JobError=None, progress: int=None, state: str=None):
        """JobOutputAsset - a model defined in OpenAPI

        :param asset_name: The asset_name of this JobOutputAsset.
        :param odata_type: The odata_type of this JobOutputAsset.
        :param error: The error of this JobOutputAsset.
        :param progress: The progress of this JobOutputAsset.
        :param state: The state of this JobOutputAsset.
        """
        self.openapi_types = {
            'asset_name': str,
            'odata_type': str,
            'error': JobError,
            'progress': int,
            'state': str
        }

        self.attribute_map = {
            'asset_name': 'assetName',
            'odata_type': '@odata.type',
            'error': 'error',
            'progress': 'progress',
            'state': 'state'
        }

        self._asset_name = asset_name
        self._odata_type = odata_type
        self._error = error
        self._progress = progress
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobOutputAsset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobOutputAsset of this JobOutputAsset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_name(self):
        """Gets the asset_name of this JobOutputAsset.

        The name of the output Asset.

        :return: The asset_name of this JobOutputAsset.
        :rtype: str
        """
        return self._asset_name

    @asset_name.setter
    def asset_name(self, asset_name):
        """Sets the asset_name of this JobOutputAsset.

        The name of the output Asset.

        :param asset_name: The asset_name of this JobOutputAsset.
        :type asset_name: str
        """
        if asset_name is None:
            raise ValueError("Invalid value for `asset_name`, must not be `None`")

        self._asset_name = asset_name

    @property
    def odata_type(self):
        """Gets the odata_type of this JobOutputAsset.

        The discriminator for derived types.

        :return: The odata_type of this JobOutputAsset.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this JobOutputAsset.

        The discriminator for derived types.

        :param odata_type: The odata_type of this JobOutputAsset.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type

    @property
    def error(self):
        """Gets the error of this JobOutputAsset.


        :return: The error of this JobOutputAsset.
        :rtype: JobError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this JobOutputAsset.


        :param error: The error of this JobOutputAsset.
        :type error: JobError
        """

        self._error = error

    @property
    def progress(self):
        """Gets the progress of this JobOutputAsset.

        If the JobOutput is in a Processing state, this contains the job completion percentage.  The value is an estimate and not intended to be used to predict job completion times. To determine if the JobOutput is complete, use the State property.

        :return: The progress of this JobOutputAsset.
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this JobOutputAsset.

        If the JobOutput is in a Processing state, this contains the job completion percentage.  The value is an estimate and not intended to be used to predict job completion times. To determine if the JobOutput is complete, use the State property.

        :param progress: The progress of this JobOutputAsset.
        :type progress: int
        """

        self._progress = progress

    @property
    def state(self):
        """Gets the state of this JobOutputAsset.

        Describes the state of the JobOutput.

        :return: The state of this JobOutputAsset.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this JobOutputAsset.

        Describes the state of the JobOutput.

        :param state: The state of this JobOutputAsset.
        :type state: str
        """
        allowed_values = ["Canceled", "Canceling", "Error", "Finished", "Processing", "Queued", "Scheduled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
