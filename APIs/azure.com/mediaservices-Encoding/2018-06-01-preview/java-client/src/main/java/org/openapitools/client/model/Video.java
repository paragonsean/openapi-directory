/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Codec;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the basic properties for encoding the input video.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:53:50.796901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Video extends Codec {
  public static final String SERIALIZED_NAME_KEY_FRAME_INTERVAL = "keyFrameInterval";
  @SerializedName(SERIALIZED_NAME_KEY_FRAME_INTERVAL)
  private String keyFrameInterval;

  /**
   * The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize
   */
  @JsonAdapter(StretchModeEnum.Adapter.class)
  public enum StretchModeEnum {
    NONE("None"),
    
    AUTO_SIZE("AutoSize"),
    
    AUTO_FIT("AutoFit");

    private String value;

    StretchModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StretchModeEnum fromValue(String value) {
      for (StretchModeEnum b : StretchModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StretchModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StretchModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StretchModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StretchModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StretchModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STRETCH_MODE = "stretchMode";
  @SerializedName(SERIALIZED_NAME_STRETCH_MODE)
  private StretchModeEnum stretchMode;

  public Video() {
    this.atOdataType = this.getClass().getSimpleName();
  }

  public Video keyFrameInterval(String keyFrameInterval) {
    this.keyFrameInterval = keyFrameInterval;
    return this;
  }

  /**
   * The distance between two key frames, thereby defining a group of pictures (GOP). The value should be a non-zero integer in the range [1, 30] seconds, specified in ISO 8601 format. The default is 2 seconds (PT2S).
   * @return keyFrameInterval
   */
  @javax.annotation.Nullable
  public String getKeyFrameInterval() {
    return keyFrameInterval;
  }

  public void setKeyFrameInterval(String keyFrameInterval) {
    this.keyFrameInterval = keyFrameInterval;
  }


  public Video stretchMode(StretchModeEnum stretchMode) {
    this.stretchMode = stretchMode;
    return this;
  }

  /**
   * The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize
   * @return stretchMode
   */
  @javax.annotation.Nullable
  public StretchModeEnum getStretchMode() {
    return stretchMode;
  }

  public void setStretchMode(StretchModeEnum stretchMode) {
    this.stretchMode = stretchMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Video video = (Video) o;
    return Objects.equals(this.keyFrameInterval, video.keyFrameInterval) &&
        Objects.equals(this.stretchMode, video.stretchMode) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keyFrameInterval, stretchMode, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Video {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    keyFrameInterval: ").append(toIndentedString(keyFrameInterval)).append("\n");
    sb.append("    stretchMode: ").append(toIndentedString(stretchMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("@odata.type");
    openapiFields.add("label");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("@odata.type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Video
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Video.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Video is not found in the empty JSON string", Video.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("@odata.type").getAsString();
      switch (discriminatorValue) {
        case "H264Video":
          H264Video.validateJsonElement(jsonElement);
          break;
        case "Image":
          Image.validateJsonElement(jsonElement);
          break;
        case "JpgImage":
          JpgImage.validateJsonElement(jsonElement);
          break;
        case "PngImage":
          PngImage.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `@odata.type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of Video given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Video
   * @throws IOException if the JSON string is invalid with respect to Video
   */
  public static Video fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Video.class);
  }

  /**
   * Convert an instance of Video to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

