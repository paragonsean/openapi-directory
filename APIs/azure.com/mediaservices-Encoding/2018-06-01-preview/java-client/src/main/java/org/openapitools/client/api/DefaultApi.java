/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.Job;
import org.openapitools.client.model.JobCollection;
import org.openapitools.client.model.Transform;
import org.openapitools.client.model.TransformCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for jobsCancelJob
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param jobName The Job name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsCancelJobCall(String subscriptionId, String resourceGroupName, String accountName, String transformName, String jobName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}/jobs/{jobName}/cancelJob"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "transformName" + "}", localVarApiClient.escapeString(transformName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsCancelJobValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String transformName, String jobName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsCancelJob(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsCancelJob(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling jobsCancelJob(Async)");
        }

        // verify the required parameter 'transformName' is set
        if (transformName == null) {
            throw new ApiException("Missing the required parameter 'transformName' when calling jobsCancelJob(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling jobsCancelJob(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsCancelJob(Async)");
        }

        return jobsCancelJobCall(subscriptionId, resourceGroupName, accountName, transformName, jobName, apiVersion, _callback);

    }

    /**
     * Cancel Job
     * Cancel a Job.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param jobName The Job name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public void jobsCancelJob(String subscriptionId, String resourceGroupName, String accountName, String transformName, String jobName, String apiVersion) throws ApiException {
        jobsCancelJobWithHttpInfo(subscriptionId, resourceGroupName, accountName, transformName, jobName, apiVersion);
    }

    /**
     * Cancel Job
     * Cancel a Job.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param jobName The Job name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> jobsCancelJobWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String transformName, String jobName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = jobsCancelJobValidateBeforeCall(subscriptionId, resourceGroupName, accountName, transformName, jobName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel Job (asynchronously)
     * Cancel a Job.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param jobName The Job name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsCancelJobAsync(String subscriptionId, String resourceGroupName, String accountName, String transformName, String jobName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsCancelJobValidateBeforeCall(subscriptionId, resourceGroupName, accountName, transformName, jobName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsCreate
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param jobName The Job name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters The request parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsCreateCall(String subscriptionId, String resourceGroupName, String accountName, String transformName, String jobName, String apiVersion, Job parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}/jobs/{jobName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "transformName" + "}", localVarApiClient.escapeString(transformName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String transformName, String jobName, String apiVersion, Job parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsCreate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling jobsCreate(Async)");
        }

        // verify the required parameter 'transformName' is set
        if (transformName == null) {
            throw new ApiException("Missing the required parameter 'transformName' when calling jobsCreate(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling jobsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsCreate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling jobsCreate(Async)");
        }

        return jobsCreateCall(subscriptionId, resourceGroupName, accountName, transformName, jobName, apiVersion, parameters, _callback);

    }

    /**
     * Create Job
     * Creates a Job.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param jobName The Job name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters The request parameters (required)
     * @return Job
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public Job jobsCreate(String subscriptionId, String resourceGroupName, String accountName, String transformName, String jobName, String apiVersion, Job parameters) throws ApiException {
        ApiResponse<Job> localVarResp = jobsCreateWithHttpInfo(subscriptionId, resourceGroupName, accountName, transformName, jobName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * Create Job
     * Creates a Job.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param jobName The Job name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters The request parameters (required)
     * @return ApiResponse&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Job> jobsCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String transformName, String jobName, String apiVersion, Job parameters) throws ApiException {
        okhttp3.Call localVarCall = jobsCreateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, transformName, jobName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Job (asynchronously)
     * Creates a Job.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param jobName The Job name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters The request parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsCreateAsync(String subscriptionId, String resourceGroupName, String accountName, String transformName, String jobName, String apiVersion, Job parameters, final ApiCallback<Job> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsCreateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, transformName, jobName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsDelete
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param jobName The Job name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsDeleteCall(String subscriptionId, String resourceGroupName, String accountName, String transformName, String jobName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}/jobs/{jobName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "transformName" + "}", localVarApiClient.escapeString(transformName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String transformName, String jobName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsDelete(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling jobsDelete(Async)");
        }

        // verify the required parameter 'transformName' is set
        if (transformName == null) {
            throw new ApiException("Missing the required parameter 'transformName' when calling jobsDelete(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling jobsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsDelete(Async)");
        }

        return jobsDeleteCall(subscriptionId, resourceGroupName, accountName, transformName, jobName, apiVersion, _callback);

    }

    /**
     * Delete Job
     * Deletes a Job.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param jobName The Job name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public void jobsDelete(String subscriptionId, String resourceGroupName, String accountName, String transformName, String jobName, String apiVersion) throws ApiException {
        jobsDeleteWithHttpInfo(subscriptionId, resourceGroupName, accountName, transformName, jobName, apiVersion);
    }

    /**
     * Delete Job
     * Deletes a Job.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param jobName The Job name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> jobsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String transformName, String jobName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = jobsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, transformName, jobName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Job (asynchronously)
     * Deletes a Job.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param jobName The Job name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsDeleteAsync(String subscriptionId, String resourceGroupName, String accountName, String transformName, String jobName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, transformName, jobName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsGet
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param jobName The Job name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsGetCall(String subscriptionId, String resourceGroupName, String accountName, String transformName, String jobName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}/jobs/{jobName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "transformName" + "}", localVarApiClient.escapeString(transformName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String transformName, String jobName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsGet(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling jobsGet(Async)");
        }

        // verify the required parameter 'transformName' is set
        if (transformName == null) {
            throw new ApiException("Missing the required parameter 'transformName' when calling jobsGet(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling jobsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsGet(Async)");
        }

        return jobsGetCall(subscriptionId, resourceGroupName, accountName, transformName, jobName, apiVersion, _callback);

    }

    /**
     * Get Job
     * Gets a Job.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param jobName The Job name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return Job
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public Job jobsGet(String subscriptionId, String resourceGroupName, String accountName, String transformName, String jobName, String apiVersion) throws ApiException {
        ApiResponse<Job> localVarResp = jobsGetWithHttpInfo(subscriptionId, resourceGroupName, accountName, transformName, jobName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get Job
     * Gets a Job.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param jobName The Job name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Job> jobsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String transformName, String jobName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = jobsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, transformName, jobName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Job (asynchronously)
     * Gets a Job.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param jobName The Job name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsGetAsync(String subscriptionId, String resourceGroupName, String accountName, String transformName, String jobName, String apiVersion, final ApiCallback<Job> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, transformName, jobName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsList
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param $filter Restricts the set of items returned. (optional)
     * @param $top Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. (optional)
     * @param $skip Specifies a non-negative integer n that excludes the first n items of the queried collection from the result. The service returns items starting at position n+1. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsListCall(String subscriptionId, String resourceGroupName, String accountName, String transformName, String apiVersion, String $filter, Integer $top, Integer $skip, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}/jobs"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "transformName" + "}", localVarApiClient.escapeString(transformName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsListValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String transformName, String apiVersion, String $filter, Integer $top, Integer $skip, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsList(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling jobsList(Async)");
        }

        // verify the required parameter 'transformName' is set
        if (transformName == null) {
            throw new ApiException("Missing the required parameter 'transformName' when calling jobsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsList(Async)");
        }

        return jobsListCall(subscriptionId, resourceGroupName, accountName, transformName, apiVersion, $filter, $top, $skip, _callback);

    }

    /**
     * List Jobs
     * Lists all of the Jobs for the Transform.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param $filter Restricts the set of items returned. (optional)
     * @param $top Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. (optional)
     * @param $skip Specifies a non-negative integer n that excludes the first n items of the queried collection from the result. The service returns items starting at position n+1. (optional)
     * @return JobCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public JobCollection jobsList(String subscriptionId, String resourceGroupName, String accountName, String transformName, String apiVersion, String $filter, Integer $top, Integer $skip) throws ApiException {
        ApiResponse<JobCollection> localVarResp = jobsListWithHttpInfo(subscriptionId, resourceGroupName, accountName, transformName, apiVersion, $filter, $top, $skip);
        return localVarResp.getData();
    }

    /**
     * List Jobs
     * Lists all of the Jobs for the Transform.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param $filter Restricts the set of items returned. (optional)
     * @param $top Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. (optional)
     * @param $skip Specifies a non-negative integer n that excludes the first n items of the queried collection from the result. The service returns items starting at position n+1. (optional)
     * @return ApiResponse&lt;JobCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobCollection> jobsListWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String transformName, String apiVersion, String $filter, Integer $top, Integer $skip) throws ApiException {
        okhttp3.Call localVarCall = jobsListValidateBeforeCall(subscriptionId, resourceGroupName, accountName, transformName, apiVersion, $filter, $top, $skip, null);
        Type localVarReturnType = new TypeToken<JobCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Jobs (asynchronously)
     * Lists all of the Jobs for the Transform.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param $filter Restricts the set of items returned. (optional)
     * @param $top Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. (optional)
     * @param $skip Specifies a non-negative integer n that excludes the first n items of the queried collection from the result. The service returns items starting at position n+1. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsListAsync(String subscriptionId, String resourceGroupName, String accountName, String transformName, String apiVersion, String $filter, Integer $top, Integer $skip, final ApiCallback<JobCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsListValidateBeforeCall(subscriptionId, resourceGroupName, accountName, transformName, apiVersion, $filter, $top, $skip, _callback);
        Type localVarReturnType = new TypeToken<JobCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transformsCreateOrUpdate
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters The request parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformsCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String accountName, String transformName, String apiVersion, Transform parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "transformName" + "}", localVarApiClient.escapeString(transformName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformsCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String transformName, String apiVersion, Transform parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling transformsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling transformsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling transformsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'transformName' is set
        if (transformName == null) {
            throw new ApiException("Missing the required parameter 'transformName' when calling transformsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling transformsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling transformsCreateOrUpdate(Async)");
        }

        return transformsCreateOrUpdateCall(subscriptionId, resourceGroupName, accountName, transformName, apiVersion, parameters, _callback);

    }

    /**
     * Create or Update Transform
     * Creates or updates a new Transform.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters The request parameters (required)
     * @return Transform
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public Transform transformsCreateOrUpdate(String subscriptionId, String resourceGroupName, String accountName, String transformName, String apiVersion, Transform parameters) throws ApiException {
        ApiResponse<Transform> localVarResp = transformsCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, accountName, transformName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * Create or Update Transform
     * Creates or updates a new Transform.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters The request parameters (required)
     * @return ApiResponse&lt;Transform&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Transform> transformsCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String transformName, String apiVersion, Transform parameters) throws ApiException {
        okhttp3.Call localVarCall = transformsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, transformName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<Transform>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or Update Transform (asynchronously)
     * Creates or updates a new Transform.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters The request parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformsCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String accountName, String transformName, String apiVersion, Transform parameters, final ApiCallback<Transform> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, transformName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<Transform>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transformsDelete
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformsDeleteCall(String subscriptionId, String resourceGroupName, String accountName, String transformName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "transformName" + "}", localVarApiClient.escapeString(transformName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String transformName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling transformsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling transformsDelete(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling transformsDelete(Async)");
        }

        // verify the required parameter 'transformName' is set
        if (transformName == null) {
            throw new ApiException("Missing the required parameter 'transformName' when calling transformsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling transformsDelete(Async)");
        }

        return transformsDeleteCall(subscriptionId, resourceGroupName, accountName, transformName, apiVersion, _callback);

    }

    /**
     * Delete Transform
     * Deletes a Transform.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public void transformsDelete(String subscriptionId, String resourceGroupName, String accountName, String transformName, String apiVersion) throws ApiException {
        transformsDeleteWithHttpInfo(subscriptionId, resourceGroupName, accountName, transformName, apiVersion);
    }

    /**
     * Delete Transform
     * Deletes a Transform.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> transformsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String transformName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = transformsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, transformName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Transform (asynchronously)
     * Deletes a Transform.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformsDeleteAsync(String subscriptionId, String resourceGroupName, String accountName, String transformName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, transformName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for transformsGet
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformsGetCall(String subscriptionId, String resourceGroupName, String accountName, String transformName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "transformName" + "}", localVarApiClient.escapeString(transformName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String transformName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling transformsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling transformsGet(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling transformsGet(Async)");
        }

        // verify the required parameter 'transformName' is set
        if (transformName == null) {
            throw new ApiException("Missing the required parameter 'transformName' when calling transformsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling transformsGet(Async)");
        }

        return transformsGetCall(subscriptionId, resourceGroupName, accountName, transformName, apiVersion, _callback);

    }

    /**
     * Get Transform
     * Gets a Transform.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return Transform
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public Transform transformsGet(String subscriptionId, String resourceGroupName, String accountName, String transformName, String apiVersion) throws ApiException {
        ApiResponse<Transform> localVarResp = transformsGetWithHttpInfo(subscriptionId, resourceGroupName, accountName, transformName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get Transform
     * Gets a Transform.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Transform&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Transform> transformsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String transformName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = transformsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, transformName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Transform>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transform (asynchronously)
     * Gets a Transform.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformsGetAsync(String subscriptionId, String resourceGroupName, String accountName, String transformName, String apiVersion, final ApiCallback<Transform> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, transformName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Transform>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transformsList
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param $filter Restricts the set of items returned. (optional)
     * @param $top Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. (optional)
     * @param $skip Specifies a non-negative integer n that excludes the first n items of the queried collection from the result. The service returns items starting at position n+1. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformsListCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter, Integer $top, Integer $skip, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformsListValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter, Integer $top, Integer $skip, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling transformsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling transformsList(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling transformsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling transformsList(Async)");
        }

        return transformsListCall(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, $top, $skip, _callback);

    }

    /**
     * List Transforms
     * Lists the Transforms in the account.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param $filter Restricts the set of items returned. (optional)
     * @param $top Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. (optional)
     * @param $skip Specifies a non-negative integer n that excludes the first n items of the queried collection from the result. The service returns items starting at position n+1. (optional)
     * @return TransformCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public TransformCollection transformsList(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter, Integer $top, Integer $skip) throws ApiException {
        ApiResponse<TransformCollection> localVarResp = transformsListWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, $top, $skip);
        return localVarResp.getData();
    }

    /**
     * List Transforms
     * Lists the Transforms in the account.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param $filter Restricts the set of items returned. (optional)
     * @param $top Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. (optional)
     * @param $skip Specifies a non-negative integer n that excludes the first n items of the queried collection from the result. The service returns items starting at position n+1. (optional)
     * @return ApiResponse&lt;TransformCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransformCollection> transformsListWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter, Integer $top, Integer $skip) throws ApiException {
        okhttp3.Call localVarCall = transformsListValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, $top, $skip, null);
        Type localVarReturnType = new TypeToken<TransformCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Transforms (asynchronously)
     * Lists the Transforms in the account.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param $filter Restricts the set of items returned. (optional)
     * @param $top Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. (optional)
     * @param $skip Specifies a non-negative integer n that excludes the first n items of the queried collection from the result. The service returns items starting at position n+1. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformsListAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter, Integer $top, Integer $skip, final ApiCallback<TransformCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformsListValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, $top, $skip, _callback);
        Type localVarReturnType = new TypeToken<TransformCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transformsUpdate
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters The request parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformsUpdateCall(String subscriptionId, String resourceGroupName, String accountName, String transformName, String apiVersion, Transform parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "transformName" + "}", localVarApiClient.escapeString(transformName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformsUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String transformName, String apiVersion, Transform parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling transformsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling transformsUpdate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling transformsUpdate(Async)");
        }

        // verify the required parameter 'transformName' is set
        if (transformName == null) {
            throw new ApiException("Missing the required parameter 'transformName' when calling transformsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling transformsUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling transformsUpdate(Async)");
        }

        return transformsUpdateCall(subscriptionId, resourceGroupName, accountName, transformName, apiVersion, parameters, _callback);

    }

    /**
     * Update Transform
     * Updates a Transform.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters The request parameters (required)
     * @return Transform
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public Transform transformsUpdate(String subscriptionId, String resourceGroupName, String accountName, String transformName, String apiVersion, Transform parameters) throws ApiException {
        ApiResponse<Transform> localVarResp = transformsUpdateWithHttpInfo(subscriptionId, resourceGroupName, accountName, transformName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * Update Transform
     * Updates a Transform.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters The request parameters (required)
     * @return ApiResponse&lt;Transform&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Transform> transformsUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String transformName, String apiVersion, Transform parameters) throws ApiException {
        okhttp3.Call localVarCall = transformsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, transformName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<Transform>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Transform (asynchronously)
     * Updates a Transform.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param transformName The Transform name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters The request parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformsUpdateAsync(String subscriptionId, String resourceGroupName, String accountName, String transformName, String apiVersion, Transform parameters, final ApiCallback<Transform> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, transformName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<Transform>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
