/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Base type for all overlays - image, audio or video.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:53:50.796901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Overlay {
  public static final String SERIALIZED_NAME_AT_ODATA_TYPE = "@odata.type";
  @SerializedName(SERIALIZED_NAME_AT_ODATA_TYPE)
  protected String atOdataType;

  public static final String SERIALIZED_NAME_AUDIO_GAIN_LEVEL = "audioGainLevel";
  @SerializedName(SERIALIZED_NAME_AUDIO_GAIN_LEVEL)
  private Double audioGainLevel;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private String end;

  public static final String SERIALIZED_NAME_FADE_IN_DURATION = "fadeInDuration";
  @SerializedName(SERIALIZED_NAME_FADE_IN_DURATION)
  private String fadeInDuration;

  public static final String SERIALIZED_NAME_FADE_OUT_DURATION = "fadeOutDuration";
  @SerializedName(SERIALIZED_NAME_FADE_OUT_DURATION)
  private String fadeOutDuration;

  public static final String SERIALIZED_NAME_INPUT_LABEL = "inputLabel";
  @SerializedName(SERIALIZED_NAME_INPUT_LABEL)
  private String inputLabel;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private String start;

  public Overlay() {
    this.atOdataType = this.getClass().getSimpleName();
  }

  public Overlay atOdataType(String atOdataType) {
    this.atOdataType = atOdataType;
    return this;
  }

  /**
   * The discriminator for derived types.
   * @return atOdataType
   */
  @javax.annotation.Nonnull
  public String getAtOdataType() {
    return atOdataType;
  }

  public void setAtOdataType(String atOdataType) {
    this.atOdataType = atOdataType;
  }


  public Overlay audioGainLevel(Double audioGainLevel) {
    this.audioGainLevel = audioGainLevel;
    return this;
  }

  /**
   * The gain level of audio in the overlay. The value should be in the range [0, 1.0]. The default is 1.0.
   * @return audioGainLevel
   */
  @javax.annotation.Nullable
  public Double getAudioGainLevel() {
    return audioGainLevel;
  }

  public void setAudioGainLevel(Double audioGainLevel) {
    this.audioGainLevel = audioGainLevel;
  }


  public Overlay end(String end) {
    this.end = end;
    return this;
  }

  /**
   * The position in the input video at which the overlay ends. The value should be in ISO 8601 duration format. For example, PT30S to end the overlay at 30 seconds in to the input video. If not specified the overlay will be applied until the end of the input video if inputLoop is true. Else, if inputLoop is false, then overlay will last as long as the duration of the overlay media.
   * @return end
   */
  @javax.annotation.Nullable
  public String getEnd() {
    return end;
  }

  public void setEnd(String end) {
    this.end = end;
  }


  public Overlay fadeInDuration(String fadeInDuration) {
    this.fadeInDuration = fadeInDuration;
    return this;
  }

  /**
   * The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as PT0S).
   * @return fadeInDuration
   */
  @javax.annotation.Nullable
  public String getFadeInDuration() {
    return fadeInDuration;
  }

  public void setFadeInDuration(String fadeInDuration) {
    this.fadeInDuration = fadeInDuration;
  }


  public Overlay fadeOutDuration(String fadeOutDuration) {
    this.fadeOutDuration = fadeOutDuration;
    return this;
  }

  /**
   * The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as PT0S).
   * @return fadeOutDuration
   */
  @javax.annotation.Nullable
  public String getFadeOutDuration() {
    return fadeOutDuration;
  }

  public void setFadeOutDuration(String fadeOutDuration) {
    this.fadeOutDuration = fadeOutDuration;
  }


  public Overlay inputLabel(String inputLabel) {
    this.inputLabel = inputLabel;
    return this;
  }

  /**
   * The label of the job input which is to be used as an overlay. The Input must specify exactly one file. You can specify an image file in JPG or PNG formats, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file. See https://aka.ms/mesformats for the complete list of supported audio and video file formats.
   * @return inputLabel
   */
  @javax.annotation.Nullable
  public String getInputLabel() {
    return inputLabel;
  }

  public void setInputLabel(String inputLabel) {
    this.inputLabel = inputLabel;
  }


  public Overlay start(String start) {
    this.start = start;
    return this;
  }

  /**
   * The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds in to the input video. If not specified the overlay starts from the beginning of the input video.
   * @return start
   */
  @javax.annotation.Nullable
  public String getStart() {
    return start;
  }

  public void setStart(String start) {
    this.start = start;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Overlay overlay = (Overlay) o;
    return Objects.equals(this.atOdataType, overlay.atOdataType) &&
        Objects.equals(this.audioGainLevel, overlay.audioGainLevel) &&
        Objects.equals(this.end, overlay.end) &&
        Objects.equals(this.fadeInDuration, overlay.fadeInDuration) &&
        Objects.equals(this.fadeOutDuration, overlay.fadeOutDuration) &&
        Objects.equals(this.inputLabel, overlay.inputLabel) &&
        Objects.equals(this.start, overlay.start);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atOdataType, audioGainLevel, end, fadeInDuration, fadeOutDuration, inputLabel, start);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Overlay {\n");
    sb.append("    atOdataType: ").append(toIndentedString(atOdataType)).append("\n");
    sb.append("    audioGainLevel: ").append(toIndentedString(audioGainLevel)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    fadeInDuration: ").append(toIndentedString(fadeInDuration)).append("\n");
    sb.append("    fadeOutDuration: ").append(toIndentedString(fadeOutDuration)).append("\n");
    sb.append("    inputLabel: ").append(toIndentedString(inputLabel)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("@odata.type");
    openapiFields.add("audioGainLevel");
    openapiFields.add("end");
    openapiFields.add("fadeInDuration");
    openapiFields.add("fadeOutDuration");
    openapiFields.add("inputLabel");
    openapiFields.add("start");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("@odata.type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Overlay
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Overlay.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Overlay is not found in the empty JSON string", Overlay.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("@odata.type").getAsString();
      switch (discriminatorValue) {
        case "AudioOverlay":
          AudioOverlay.validateJsonElement(jsonElement);
          break;
        case "VideoOverlay":
          VideoOverlay.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `@odata.type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of Overlay given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Overlay
   * @throws IOException if the JSON string is invalid with respect to Overlay
   */
  public static Overlay fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Overlay.class);
  }

  /**
   * Convert an instance of Overlay to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

