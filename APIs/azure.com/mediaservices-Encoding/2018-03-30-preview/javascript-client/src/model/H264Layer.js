/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VideoLayer from './VideoLayer';

/**
 * The H264Layer model module.
 * @module model/H264Layer
 * @version 2018-03-30-preview
 */
class H264Layer {
    /**
     * Constructs a new <code>H264Layer</code>.
     * Describes the settings to be used when encoding the input video into a desired output bitrate layer with the H.264 video codec.
     * @alias module:model/H264Layer
     * @extends module:model/VideoLayer
     * @implements module:model/VideoLayer
     * @param odataType {String} The discriminator for derived types.
     */
    constructor(odataType) { 
        VideoLayer.initialize(this, odataType);
        H264Layer.initialize(this, odataType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, odataType) { 
    }

    /**
     * Constructs a <code>H264Layer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/H264Layer} obj Optional instance to populate.
     * @return {module:model/H264Layer} The populated <code>H264Layer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new H264Layer();
            VideoLayer.constructFromObject(data, obj);
            VideoLayer.constructFromObject(data, obj);

            if (data.hasOwnProperty('bufferWindow')) {
                obj['bufferWindow'] = ApiClient.convertToType(data['bufferWindow'], 'String');
            }
            if (data.hasOwnProperty('entropyMode')) {
                obj['entropyMode'] = ApiClient.convertToType(data['entropyMode'], 'String');
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], 'String');
            }
            if (data.hasOwnProperty('profile')) {
                obj['profile'] = ApiClient.convertToType(data['profile'], 'String');
            }
            if (data.hasOwnProperty('referenceFrames')) {
                obj['referenceFrames'] = ApiClient.convertToType(data['referenceFrames'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>H264Layer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>H264Layer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of H264Layer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['bufferWindow'] && !(typeof data['bufferWindow'] === 'string' || data['bufferWindow'] instanceof String)) {
            throw new Error("Expected the field `bufferWindow` to be a primitive type in the JSON string but got " + data['bufferWindow']);
        }
        // ensure the json data is a string
        if (data['entropyMode'] && !(typeof data['entropyMode'] === 'string' || data['entropyMode'] instanceof String)) {
            throw new Error("Expected the field `entropyMode` to be a primitive type in the JSON string but got " + data['entropyMode']);
        }
        // ensure the json data is a string
        if (data['level'] && !(typeof data['level'] === 'string' || data['level'] instanceof String)) {
            throw new Error("Expected the field `level` to be a primitive type in the JSON string but got " + data['level']);
        }
        // ensure the json data is a string
        if (data['profile'] && !(typeof data['profile'] === 'string' || data['profile'] instanceof String)) {
            throw new Error("Expected the field `profile` to be a primitive type in the JSON string but got " + data['profile']);
        }

        return true;
    }


}

H264Layer.RequiredProperties = ["@odata.type"];

/**
 * The VBV buffer window length. The value should be in ISO 8601 format. The value should be in the range [0.1-100] seconds. The default is 5 seconds (for example, PT5S).
 * @member {String} bufferWindow
 */
H264Layer.prototype['bufferWindow'] = undefined;

/**
 * The entropy mode to be used for this layer. If not specified, the encoder chooses the mode that is appropriate for the profile and level.
 * @member {module:model/H264Layer.EntropyModeEnum} entropyMode
 */
H264Layer.prototype['entropyMode'] = undefined;

/**
 * Which level of the H.264 standard should be used when encoding this layer. The value can be Auto, or a number that matches the H.264 profile. If not specified, the default is Auto, which lets the encoder choose the Level that is appropriate for this layer.
 * @member {String} level
 */
H264Layer.prototype['level'] = undefined;

/**
 * Which profile of the H.264 standard should be used when encoding this layer. Default is Auto.
 * @member {module:model/H264Layer.ProfileEnum} profile
 */
H264Layer.prototype['profile'] = undefined;

/**
 * The number of reference frames to be used when encoding this layer. If not specified, the encoder determines an appropriate number based on the encoder complexity setting.
 * @member {Number} referenceFrames
 */
H264Layer.prototype['referenceFrames'] = undefined;


// Implement VideoLayer interface:
/**
 * The discriminator for derived types.
 * @member {String} @odata.type
 */
VideoLayer.prototype['@odata.type'] = undefined;
/**
 * The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example 50% means the output video has half as many pixels in height as the input.
 * @member {String} height
 */
VideoLayer.prototype['height'] = undefined;
/**
 * The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming the output file.
 * @member {String} label
 */
VideoLayer.prototype['label'] = undefined;
/**
 * The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example 50% means the output video has half as many pixels in width as the input.
 * @member {String} width
 */
VideoLayer.prototype['width'] = undefined;



/**
 * Allowed values for the <code>entropyMode</code> property.
 * @enum {String}
 * @readonly
 */
H264Layer['EntropyModeEnum'] = {

    /**
     * value: "Cabac"
     * @const
     */
    "Cabac": "Cabac",

    /**
     * value: "Cavlc"
     * @const
     */
    "Cavlc": "Cavlc"
};


/**
 * Allowed values for the <code>profile</code> property.
 * @enum {String}
 * @readonly
 */
H264Layer['ProfileEnum'] = {

    /**
     * value: "Auto"
     * @const
     */
    "Auto": "Auto",

    /**
     * value: "Baseline"
     * @const
     */
    "Baseline": "Baseline",

    /**
     * value: "Main"
     * @const
     */
    "Main": "Main",

    /**
     * value: "High"
     * @const
     */
    "High": "High",

    /**
     * value: "High422"
     * @const
     */
    "High422": "High422",

    /**
     * value: "High444"
     * @const
     */
    "High444": "High444"
};



export default H264Layer;

