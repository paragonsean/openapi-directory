/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Preset from './Preset';

/**
 * The BuiltInStandardEncoderPreset model module.
 * @module model/BuiltInStandardEncoderPreset
 * @version 2018-03-30-preview
 */
class BuiltInStandardEncoderPreset {
    /**
     * Constructs a new <code>BuiltInStandardEncoderPreset</code>.
     * Describes a built-in preset for encoding the input video with the Standard Encoder.
     * @alias module:model/BuiltInStandardEncoderPreset
     * @extends module:model/Preset
     * @implements module:model/Preset
     * @param odataType {String} The discriminator for derived types.
     */
    constructor(odataType) { 
        Preset.initialize(this, odataType);
        BuiltInStandardEncoderPreset.initialize(this, odataType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, odataType) { 
        obj['presetName'] = presetName;
    }

    /**
     * Constructs a <code>BuiltInStandardEncoderPreset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BuiltInStandardEncoderPreset} obj Optional instance to populate.
     * @return {module:model/BuiltInStandardEncoderPreset} The populated <code>BuiltInStandardEncoderPreset</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BuiltInStandardEncoderPreset();
            Preset.constructFromObject(data, obj);
            Preset.constructFromObject(data, obj);

            if (data.hasOwnProperty('presetName')) {
                obj['presetName'] = ApiClient.convertToType(data['presetName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BuiltInStandardEncoderPreset</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BuiltInStandardEncoderPreset</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BuiltInStandardEncoderPreset.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['presetName'] && !(typeof data['presetName'] === 'string' || data['presetName'] instanceof String)) {
            throw new Error("Expected the field `presetName` to be a primitive type in the JSON string but got " + data['presetName']);
        }

        return true;
    }


}

BuiltInStandardEncoderPreset.RequiredProperties = ["presetName", "@odata.type"];

/**
 * The built-in preset to be used for encoding videos.
 * @member {module:model/BuiltInStandardEncoderPreset.PresetNameEnum} presetName
 */
BuiltInStandardEncoderPreset.prototype['presetName'] = undefined;


// Implement Preset interface:
/**
 * The discriminator for derived types.
 * @member {String} @odata.type
 */
Preset.prototype['@odata.type'] = undefined;



/**
 * Allowed values for the <code>presetName</code> property.
 * @enum {String}
 * @readonly
 */
BuiltInStandardEncoderPreset['PresetNameEnum'] = {

    /**
     * value: "AdaptiveStreaming"
     * @const
     */
    "AdaptiveStreaming": "AdaptiveStreaming",

    /**
     * value: "AACGoodQualityAudio"
     * @const
     */
    "AACGoodQualityAudio": "AACGoodQualityAudio",

    /**
     * value: "H264MultipleBitrate1080p"
     * @const
     */
    "H264MultipleBitrate1080p": "H264MultipleBitrate1080p",

    /**
     * value: "H264MultipleBitrate720p"
     * @const
     */
    "H264MultipleBitrate720p": "H264MultipleBitrate720p",

    /**
     * value: "H264MultipleBitrateSD"
     * @const
     */
    "H264MultipleBitrateSD": "H264MultipleBitrateSD"
};



export default BuiltInStandardEncoderPreset;

