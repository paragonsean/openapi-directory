/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Overlay from './Overlay';

/**
 * The AudioOverlay model module.
 * @module model/AudioOverlay
 * @version 2018-03-30-preview
 */
class AudioOverlay {
    /**
     * Constructs a new <code>AudioOverlay</code>.
     * Describes the properties of an audio overlay.
     * @alias module:model/AudioOverlay
     * @extends module:model/Overlay
     * @implements module:model/Overlay
     * @param odataType {String} The discriminator for derived types.
     */
    constructor(odataType) { 
        Overlay.initialize(this, odataType);
        AudioOverlay.initialize(this, odataType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, odataType) { 
    }

    /**
     * Constructs a <code>AudioOverlay</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AudioOverlay} obj Optional instance to populate.
     * @return {module:model/AudioOverlay} The populated <code>AudioOverlay</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AudioOverlay();
            Overlay.constructFromObject(data, obj);
            Overlay.constructFromObject(data, obj);

        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AudioOverlay</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AudioOverlay</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AudioOverlay.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

AudioOverlay.RequiredProperties = ["@odata.type"];


// Implement Overlay interface:
/**
 * The discriminator for derived types.
 * @member {String} @odata.type
 */
Overlay.prototype['@odata.type'] = undefined;
/**
 * The gain level of audio in the overlay. The value should be in the range [0, 1.0]. The default is 1.0.
 * @member {Number} audioGainLevel
 */
Overlay.prototype['audioGainLevel'] = undefined;
/**
 * The position in the input video at which the overlay ends. The value should be in ISO 8601 duration format. For example, PT30S to end the overlay at 30 seconds in to the input video. If not specified the overlay will be applied until the end of the input video if inputLoop is true. Else, if inputLoop is false, then overlay will last as long as the duration of the overlay media.
 * @member {String} end
 */
Overlay.prototype['end'] = undefined;
/**
 * The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as PT0S).
 * @member {String} fadeInDuration
 */
Overlay.prototype['fadeInDuration'] = undefined;
/**
 * The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as PT0S).
 * @member {String} fadeOutDuration
 */
Overlay.prototype['fadeOutDuration'] = undefined;
/**
 * The label of the job input which is to be used as an overlay. The Input must specify exactly one file. You can specify an image file in JPG or PNG formats, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file. See https://aka.ms/mesformats for the complete list of supported audio and video file formats.
 * @member {String} inputLabel
 */
Overlay.prototype['inputLabel'] = undefined;
/**
 * The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds in to the input video. If not specified the overlay starts from the beginning of the input video.
 * @member {String} start
 */
Overlay.prototype['start'] = undefined;




export default AudioOverlay;

