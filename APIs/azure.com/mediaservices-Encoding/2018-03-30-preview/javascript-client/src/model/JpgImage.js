/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Image from './Image';
import JpgLayer from './JpgLayer';

/**
 * The JpgImage model module.
 * @module model/JpgImage
 * @version 2018-03-30-preview
 */
class JpgImage {
    /**
     * Constructs a new <code>JpgImage</code>.
     * Describes the properties for producing a series of JPEG images from the input video.
     * @alias module:model/JpgImage
     * @extends module:model/Image
     * @implements module:model/Image
     * @param odataType {String} The discriminator for derived types.
     */
    constructor(odataType) { 
        Image.initialize(this, odataType);
        JpgImage.initialize(this, odataType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, odataType) { 
    }

    /**
     * Constructs a <code>JpgImage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JpgImage} obj Optional instance to populate.
     * @return {module:model/JpgImage} The populated <code>JpgImage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JpgImage();
            Image.constructFromObject(data, obj);
            Image.constructFromObject(data, obj);

            if (data.hasOwnProperty('layers')) {
                obj['layers'] = ApiClient.convertToType(data['layers'], [JpgLayer]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JpgImage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JpgImage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of JpgImage.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['layers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['layers'])) {
                throw new Error("Expected the field `layers` to be an array in the JSON data but got " + data['layers']);
            }
            // validate the optional field `layers` (array)
            for (const item of data['layers']) {
                JpgLayer.validateJSON(item);
            };
        }

        return true;
    }


}

JpgImage.RequiredProperties = ["@odata.type"];

/**
 * A collection of output JPEG image layers to be produced by the encoder.
 * @member {Array.<module:model/JpgLayer>} layers
 */
JpgImage.prototype['layers'] = undefined;


// Implement Image interface:
/**
 * The distance between two key frames, thereby defining a group of pictures (GOP). The value should be a non-zero integer in the range [1, 30] seconds, specified in ISO 8601 format. The default is 2 seconds (PT2S).
 * @member {String} keyFrameInterval
 */
Image.prototype['keyFrameInterval'] = undefined;
/**
 * The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize
 * @member {module:model/Image.StretchModeEnum} stretchMode
 */
Image.prototype['stretchMode'] = undefined;
/**
 * The discriminator for derived types.
 * @member {String} @odata.type
 */
Image.prototype['@odata.type'] = undefined;
/**
 * An optional label for the codec. The label can be used to control muxing behavior.
 * @member {String} label
 */
Image.prototype['label'] = undefined;




export default JpgImage;

