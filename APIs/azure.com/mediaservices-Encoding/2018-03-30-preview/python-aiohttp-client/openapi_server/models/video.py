# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.codec import Codec
from openapi_server import util


class Video(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_frame_interval: str=None, stretch_mode: str=None, odata_type: str=None, label: str=None):
        """Video - a model defined in OpenAPI

        :param key_frame_interval: The key_frame_interval of this Video.
        :param stretch_mode: The stretch_mode of this Video.
        :param odata_type: The odata_type of this Video.
        :param label: The label of this Video.
        """
        self.openapi_types = {
            'key_frame_interval': str,
            'stretch_mode': str,
            'odata_type': str,
            'label': str
        }

        self.attribute_map = {
            'key_frame_interval': 'keyFrameInterval',
            'stretch_mode': 'stretchMode',
            'odata_type': '@odata.type',
            'label': 'label'
        }

        self._key_frame_interval = key_frame_interval
        self._stretch_mode = stretch_mode
        self._odata_type = odata_type
        self._label = label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Video':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Video of this Video.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_frame_interval(self):
        """Gets the key_frame_interval of this Video.

        The distance between two key frames, thereby defining a group of pictures (GOP). The value should be a non-zero integer in the range [1, 30] seconds, specified in ISO 8601 format. The default is 2 seconds (PT2S).

        :return: The key_frame_interval of this Video.
        :rtype: str
        """
        return self._key_frame_interval

    @key_frame_interval.setter
    def key_frame_interval(self, key_frame_interval):
        """Sets the key_frame_interval of this Video.

        The distance between two key frames, thereby defining a group of pictures (GOP). The value should be a non-zero integer in the range [1, 30] seconds, specified in ISO 8601 format. The default is 2 seconds (PT2S).

        :param key_frame_interval: The key_frame_interval of this Video.
        :type key_frame_interval: str
        """

        self._key_frame_interval = key_frame_interval

    @property
    def stretch_mode(self):
        """Gets the stretch_mode of this Video.

        The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize

        :return: The stretch_mode of this Video.
        :rtype: str
        """
        return self._stretch_mode

    @stretch_mode.setter
    def stretch_mode(self, stretch_mode):
        """Sets the stretch_mode of this Video.

        The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize

        :param stretch_mode: The stretch_mode of this Video.
        :type stretch_mode: str
        """
        allowed_values = ["None", "AutoSize", "AutoFit"]  # noqa: E501
        if stretch_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `stretch_mode` ({0}), must be one of {1}"
                .format(stretch_mode, allowed_values)
            )

        self._stretch_mode = stretch_mode

    @property
    def odata_type(self):
        """Gets the odata_type of this Video.

        The discriminator for derived types.

        :return: The odata_type of this Video.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this Video.

        The discriminator for derived types.

        :param odata_type: The odata_type of this Video.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type

    @property
    def label(self):
        """Gets the label of this Video.

        An optional label for the codec. The label can be used to control muxing behavior.

        :return: The label of this Video.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Video.

        An optional label for the codec. The label can be used to control muxing behavior.

        :param label: The label of this Video.
        :type label: str
        """

        self._label = label
