# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_input import JobInput
from openapi_server.models.job_output import JobOutput
from openapi_server import util


class JobProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, description: str=None, input: JobInput=None, last_modified: datetime=None, outputs: List[JobOutput]=None, priority: str=None, state: str=None):
        """JobProperties - a model defined in OpenAPI

        :param created: The created of this JobProperties.
        :param description: The description of this JobProperties.
        :param input: The input of this JobProperties.
        :param last_modified: The last_modified of this JobProperties.
        :param outputs: The outputs of this JobProperties.
        :param priority: The priority of this JobProperties.
        :param state: The state of this JobProperties.
        """
        self.openapi_types = {
            'created': datetime,
            'description': str,
            'input': JobInput,
            'last_modified': datetime,
            'outputs': List[JobOutput],
            'priority': str,
            'state': str
        }

        self.attribute_map = {
            'created': 'created',
            'description': 'description',
            'input': 'input',
            'last_modified': 'lastModified',
            'outputs': 'outputs',
            'priority': 'priority',
            'state': 'state'
        }

        self._created = created
        self._description = description
        self._input = input
        self._last_modified = last_modified
        self._outputs = outputs
        self._priority = priority
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobProperties of this JobProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this JobProperties.

        The UTC date and time when the Job was created, in 'YYYY-MM-DDThh:mm:ssZ' format.

        :return: The created of this JobProperties.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this JobProperties.

        The UTC date and time when the Job was created, in 'YYYY-MM-DDThh:mm:ssZ' format.

        :param created: The created of this JobProperties.
        :type created: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this JobProperties.

        Optional customer supplied description of the Job.

        :return: The description of this JobProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this JobProperties.

        Optional customer supplied description of the Job.

        :param description: The description of this JobProperties.
        :type description: str
        """

        self._description = description

    @property
    def input(self):
        """Gets the input of this JobProperties.


        :return: The input of this JobProperties.
        :rtype: JobInput
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this JobProperties.


        :param input: The input of this JobProperties.
        :type input: JobInput
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")

        self._input = input

    @property
    def last_modified(self):
        """Gets the last_modified of this JobProperties.

        The UTC date and time when the Job was last updated, in 'YYYY-MM-DDThh:mm:ssZ' format.

        :return: The last_modified of this JobProperties.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this JobProperties.

        The UTC date and time when the Job was last updated, in 'YYYY-MM-DDThh:mm:ssZ' format.

        :param last_modified: The last_modified of this JobProperties.
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def outputs(self):
        """Gets the outputs of this JobProperties.

        The outputs for the Job.

        :return: The outputs of this JobProperties.
        :rtype: List[JobOutput]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this JobProperties.

        The outputs for the Job.

        :param outputs: The outputs of this JobProperties.
        :type outputs: List[JobOutput]
        """
        if outputs is None:
            raise ValueError("Invalid value for `outputs`, must not be `None`")

        self._outputs = outputs

    @property
    def priority(self):
        """Gets the priority of this JobProperties.

        Priority with which the job should be processed. Higher priority jobs are processed before lower priority jobs. If not set, the default is normal.

        :return: The priority of this JobProperties.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this JobProperties.

        Priority with which the job should be processed. Higher priority jobs are processed before lower priority jobs. If not set, the default is normal.

        :param priority: The priority of this JobProperties.
        :type priority: str
        """
        allowed_values = ["Low", "Normal", "High"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def state(self):
        """Gets the state of this JobProperties.

        The current state of the job.

        :return: The state of this JobProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this JobProperties.

        The current state of the job.

        :param state: The state of this JobProperties.
        :type state: str
        """
        allowed_values = ["Canceled", "Canceling", "Error", "Finished", "Processing", "Queued", "Scheduled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
