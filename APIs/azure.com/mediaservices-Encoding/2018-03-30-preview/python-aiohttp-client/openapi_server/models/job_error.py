# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_error_detail import JobErrorDetail
from openapi_server import util


class JobError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, code: str=None, details: List[JobErrorDetail]=None, message: str=None, retry: str=None):
        """JobError - a model defined in OpenAPI

        :param category: The category of this JobError.
        :param code: The code of this JobError.
        :param details: The details of this JobError.
        :param message: The message of this JobError.
        :param retry: The retry of this JobError.
        """
        self.openapi_types = {
            'category': str,
            'code': str,
            'details': List[JobErrorDetail],
            'message': str,
            'retry': str
        }

        self.attribute_map = {
            'category': 'category',
            'code': 'code',
            'details': 'details',
            'message': 'message',
            'retry': 'retry'
        }

        self._category = category
        self._code = code
        self._details = details
        self._message = message
        self._retry = retry

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobError of this JobError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this JobError.

        Helps with categorization of errors.

        :return: The category of this JobError.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this JobError.

        Helps with categorization of errors.

        :param category: The category of this JobError.
        :type category: str
        """
        allowed_values = ["Service", "Download", "Upload", "Configuration", "Content"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def code(self):
        """Gets the code of this JobError.

        Error code describing the error.

        :return: The code of this JobError.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this JobError.

        Error code describing the error.

        :param code: The code of this JobError.
        :type code: str
        """
        allowed_values = ["ServiceError", "ServiceTransientError", "DownloadNotAccessible", "DownloadTransientError", "UploadNotAccessible", "UploadTransientError", "ConfigurationUnsupported", "ContentMalformed", "ContentUnsupported"]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def details(self):
        """Gets the details of this JobError.

        An array of details about specific errors that led to this reported error.

        :return: The details of this JobError.
        :rtype: List[JobErrorDetail]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this JobError.

        An array of details about specific errors that led to this reported error.

        :param details: The details of this JobError.
        :type details: List[JobErrorDetail]
        """

        self._details = details

    @property
    def message(self):
        """Gets the message of this JobError.

        A human-readable language-dependent representation of the error.

        :return: The message of this JobError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this JobError.

        A human-readable language-dependent representation of the error.

        :param message: The message of this JobError.
        :type message: str
        """

        self._message = message

    @property
    def retry(self):
        """Gets the retry of this JobError.

        Indicates that it may be possible to retry the Job. If retry is unsuccessful, please contact Azure support via Azure Portal.

        :return: The retry of this JobError.
        :rtype: str
        """
        return self._retry

    @retry.setter
    def retry(self, retry):
        """Sets the retry of this JobError.

        Indicates that it may be possible to retry the Job. If retry is unsuccessful, please contact Azure support via Azure Portal.

        :param retry: The retry of this JobError.
        :type retry: str
        """
        allowed_values = ["DoNotRetry", "MayRetry"]  # noqa: E501
        if retry not in allowed_values:
            raise ValueError(
                "Invalid value for `retry` ({0}), must be one of {1}"
                .format(retry, allowed_values)
            )

        self._retry = retry
