# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_input import JobInput
from openapi_server import util


class JobInputs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, inputs: List[JobInput]=None, odata_type: str=None, label: str=None):
        """JobInputs - a model defined in OpenAPI

        :param inputs: The inputs of this JobInputs.
        :param odata_type: The odata_type of this JobInputs.
        :param label: The label of this JobInputs.
        """
        self.openapi_types = {
            'inputs': List[JobInput],
            'odata_type': str,
            'label': str
        }

        self.attribute_map = {
            'inputs': 'inputs',
            'odata_type': '@odata.type',
            'label': 'label'
        }

        self._inputs = inputs
        self._odata_type = odata_type
        self._label = label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobInputs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobInputs of this JobInputs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def inputs(self):
        """Gets the inputs of this JobInputs.

        List of inputs to a Job.

        :return: The inputs of this JobInputs.
        :rtype: List[JobInput]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this JobInputs.

        List of inputs to a Job.

        :param inputs: The inputs of this JobInputs.
        :type inputs: List[JobInput]
        """

        self._inputs = inputs

    @property
    def odata_type(self):
        """Gets the odata_type of this JobInputs.

        The discriminator for derived types.

        :return: The odata_type of this JobInputs.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this JobInputs.

        The discriminator for derived types.

        :param odata_type: The odata_type of this JobInputs.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type

    @property
    def label(self):
        """Gets the label of this JobInputs.

        A label that is assigned to a JobInput, that is used to satisfy a reference used in the Transform. For example, a Transform can be authored so as to take an image file with the label 'xyz' and apply it as an overlay onto the input video before it is encoded. When submitting a Job, exactly one of the JobInputs should be the image file, and it should have the label 'xyz'.

        :return: The label of this JobInputs.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this JobInputs.

        A label that is assigned to a JobInput, that is used to satisfy a reference used in the Transform. For example, a Transform can be authored so as to take an image file with the label 'xyz' and apply it as an overlay onto the input video before it is encoded. When submitting a Job, exactly one of the JobInputs should be the image file, and it should have the label 'xyz'.

        :param label: The label of this JobInputs.
        :type label: str
        """

        self._label = label
