# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.preset import Preset
from openapi_server import util


class AudioAnalyzerPreset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_language: str=None, odata_type: str=None):
        """AudioAnalyzerPreset - a model defined in OpenAPI

        :param audio_language: The audio_language of this AudioAnalyzerPreset.
        :param odata_type: The odata_type of this AudioAnalyzerPreset.
        """
        self.openapi_types = {
            'audio_language': str,
            'odata_type': str
        }

        self.attribute_map = {
            'audio_language': 'audioLanguage',
            'odata_type': '@odata.type'
        }

        self._audio_language = audio_language
        self._odata_type = odata_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioAnalyzerPreset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioAnalyzerPreset of this AudioAnalyzerPreset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_language(self):
        """Gets the audio_language of this AudioAnalyzerPreset.

        The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US'). The list of supported languages are, 'en-US', 'en-GB', 'es-ES', 'es-MX', 'fr-FR', 'it-IT', 'ja-JP', 'pt-BR', 'zh-CN'.

        :return: The audio_language of this AudioAnalyzerPreset.
        :rtype: str
        """
        return self._audio_language

    @audio_language.setter
    def audio_language(self, audio_language):
        """Sets the audio_language of this AudioAnalyzerPreset.

        The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US'). The list of supported languages are, 'en-US', 'en-GB', 'es-ES', 'es-MX', 'fr-FR', 'it-IT', 'ja-JP', 'pt-BR', 'zh-CN'.

        :param audio_language: The audio_language of this AudioAnalyzerPreset.
        :type audio_language: str
        """

        self._audio_language = audio_language

    @property
    def odata_type(self):
        """Gets the odata_type of this AudioAnalyzerPreset.

        The discriminator for derived types.

        :return: The odata_type of this AudioAnalyzerPreset.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this AudioAnalyzerPreset.

        The discriminator for derived types.

        :param odata_type: The odata_type of this AudioAnalyzerPreset.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type
