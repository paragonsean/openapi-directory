# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transform_output import TransformOutput
from openapi_server import util


class TransformProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, description: str=None, last_modified: datetime=None, outputs: List[TransformOutput]=None):
        """TransformProperties - a model defined in OpenAPI

        :param created: The created of this TransformProperties.
        :param description: The description of this TransformProperties.
        :param last_modified: The last_modified of this TransformProperties.
        :param outputs: The outputs of this TransformProperties.
        """
        self.openapi_types = {
            'created': datetime,
            'description': str,
            'last_modified': datetime,
            'outputs': List[TransformOutput]
        }

        self.attribute_map = {
            'created': 'created',
            'description': 'description',
            'last_modified': 'lastModified',
            'outputs': 'outputs'
        }

        self._created = created
        self._description = description
        self._last_modified = last_modified
        self._outputs = outputs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransformProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransformProperties of this TransformProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this TransformProperties.

        The UTC date and time when the Transform was created, in 'YYYY-MM-DDThh:mm:ssZ' format.

        :return: The created of this TransformProperties.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this TransformProperties.

        The UTC date and time when the Transform was created, in 'YYYY-MM-DDThh:mm:ssZ' format.

        :param created: The created of this TransformProperties.
        :type created: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this TransformProperties.

        An optional verbose description of the Transform.

        :return: The description of this TransformProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TransformProperties.

        An optional verbose description of the Transform.

        :param description: The description of this TransformProperties.
        :type description: str
        """

        self._description = description

    @property
    def last_modified(self):
        """Gets the last_modified of this TransformProperties.

        The UTC date and time when the Transform was last updated, in 'YYYY-MM-DDThh:mm:ssZ' format.

        :return: The last_modified of this TransformProperties.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this TransformProperties.

        The UTC date and time when the Transform was last updated, in 'YYYY-MM-DDThh:mm:ssZ' format.

        :param last_modified: The last_modified of this TransformProperties.
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def outputs(self):
        """Gets the outputs of this TransformProperties.

        An array of one or more TransformOutputs that the Transform should generate.

        :return: The outputs of this TransformProperties.
        :rtype: List[TransformOutput]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this TransformProperties.

        An array of one or more TransformOutputs that the Transform should generate.

        :param outputs: The outputs of this TransformProperties.
        :type outputs: List[TransformOutput]
        """
        if outputs is None:
            raise ValueError("Invalid value for `outputs`, must not be `None`")

        self._outputs = outputs
