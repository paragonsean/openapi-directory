# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.layer import Layer
from openapi_server import util


class VideoLayer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adaptive_b_frame: bool=None, b_frames: int=None, bitrate: int=None, frame_rate: str=None, max_bitrate: int=None, slices: int=None, odata_type: str=None, height: str=None, label: str=None, width: str=None):
        """VideoLayer - a model defined in OpenAPI

        :param adaptive_b_frame: The adaptive_b_frame of this VideoLayer.
        :param b_frames: The b_frames of this VideoLayer.
        :param bitrate: The bitrate of this VideoLayer.
        :param frame_rate: The frame_rate of this VideoLayer.
        :param max_bitrate: The max_bitrate of this VideoLayer.
        :param slices: The slices of this VideoLayer.
        :param odata_type: The odata_type of this VideoLayer.
        :param height: The height of this VideoLayer.
        :param label: The label of this VideoLayer.
        :param width: The width of this VideoLayer.
        """
        self.openapi_types = {
            'adaptive_b_frame': bool,
            'b_frames': int,
            'bitrate': int,
            'frame_rate': str,
            'max_bitrate': int,
            'slices': int,
            'odata_type': str,
            'height': str,
            'label': str,
            'width': str
        }

        self.attribute_map = {
            'adaptive_b_frame': 'adaptiveBFrame',
            'b_frames': 'bFrames',
            'bitrate': 'bitrate',
            'frame_rate': 'frameRate',
            'max_bitrate': 'maxBitrate',
            'slices': 'slices',
            'odata_type': '@odata.type',
            'height': 'height',
            'label': 'label',
            'width': 'width'
        }

        self._adaptive_b_frame = adaptive_b_frame
        self._b_frames = b_frames
        self._bitrate = bitrate
        self._frame_rate = frame_rate
        self._max_bitrate = max_bitrate
        self._slices = slices
        self._odata_type = odata_type
        self._height = height
        self._label = label
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoLayer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoLayer of this VideoLayer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adaptive_b_frame(self):
        """Gets the adaptive_b_frame of this VideoLayer.

        Whether or not adaptive B-frames are to be used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use.

        :return: The adaptive_b_frame of this VideoLayer.
        :rtype: bool
        """
        return self._adaptive_b_frame

    @adaptive_b_frame.setter
    def adaptive_b_frame(self, adaptive_b_frame):
        """Sets the adaptive_b_frame of this VideoLayer.

        Whether or not adaptive B-frames are to be used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use.

        :param adaptive_b_frame: The adaptive_b_frame of this VideoLayer.
        :type adaptive_b_frame: bool
        """

        self._adaptive_b_frame = adaptive_b_frame

    @property
    def b_frames(self):
        """Gets the b_frames of this VideoLayer.

        The number of B-frames to be used when encoding this layer.  If not specified, the encoder chooses an appropriate number based on the video profile and level.

        :return: The b_frames of this VideoLayer.
        :rtype: int
        """
        return self._b_frames

    @b_frames.setter
    def b_frames(self, b_frames):
        """Sets the b_frames of this VideoLayer.

        The number of B-frames to be used when encoding this layer.  If not specified, the encoder chooses an appropriate number based on the video profile and level.

        :param b_frames: The b_frames of this VideoLayer.
        :type b_frames: int
        """

        self._b_frames = b_frames

    @property
    def bitrate(self):
        """Gets the bitrate of this VideoLayer.

        The average bitrate in bits per second at which to encode the input video when generating this layer. This is a required field.

        :return: The bitrate of this VideoLayer.
        :rtype: int
        """
        return self._bitrate

    @bitrate.setter
    def bitrate(self, bitrate):
        """Sets the bitrate of this VideoLayer.

        The average bitrate in bits per second at which to encode the input video when generating this layer. This is a required field.

        :param bitrate: The bitrate of this VideoLayer.
        :type bitrate: int
        """

        self._bitrate = bitrate

    @property
    def frame_rate(self):
        """Gets the frame_rate of this VideoLayer.

        The frame rate (in frames per second) at which to encode this layer. The value can be in the form of M/N where M and N are integers (For example, 30000/1001), or in the form of a number (For example, 30, or 29.97). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video.

        :return: The frame_rate of this VideoLayer.
        :rtype: str
        """
        return self._frame_rate

    @frame_rate.setter
    def frame_rate(self, frame_rate):
        """Sets the frame_rate of this VideoLayer.

        The frame rate (in frames per second) at which to encode this layer. The value can be in the form of M/N where M and N are integers (For example, 30000/1001), or in the form of a number (For example, 30, or 29.97). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video.

        :param frame_rate: The frame_rate of this VideoLayer.
        :type frame_rate: str
        """

        self._frame_rate = frame_rate

    @property
    def max_bitrate(self):
        """Gets the max_bitrate of this VideoLayer.

        The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate.

        :return: The max_bitrate of this VideoLayer.
        :rtype: int
        """
        return self._max_bitrate

    @max_bitrate.setter
    def max_bitrate(self, max_bitrate):
        """Sets the max_bitrate of this VideoLayer.

        The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate.

        :param max_bitrate: The max_bitrate of this VideoLayer.
        :type max_bitrate: int
        """

        self._max_bitrate = max_bitrate

    @property
    def slices(self):
        """Gets the slices of this VideoLayer.

        The number of slices to be used when encoding this layer. If not specified, default is zero, which means that encoder will use a single slice for each frame.

        :return: The slices of this VideoLayer.
        :rtype: int
        """
        return self._slices

    @slices.setter
    def slices(self, slices):
        """Sets the slices of this VideoLayer.

        The number of slices to be used when encoding this layer. If not specified, default is zero, which means that encoder will use a single slice for each frame.

        :param slices: The slices of this VideoLayer.
        :type slices: int
        """

        self._slices = slices

    @property
    def odata_type(self):
        """Gets the odata_type of this VideoLayer.

        The discriminator for derived types.

        :return: The odata_type of this VideoLayer.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this VideoLayer.

        The discriminator for derived types.

        :param odata_type: The odata_type of this VideoLayer.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type

    @property
    def height(self):
        """Gets the height of this VideoLayer.

        The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example 50% means the output video has half as many pixels in height as the input.

        :return: The height of this VideoLayer.
        :rtype: str
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this VideoLayer.

        The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example 50% means the output video has half as many pixels in height as the input.

        :param height: The height of this VideoLayer.
        :type height: str
        """

        self._height = height

    @property
    def label(self):
        """Gets the label of this VideoLayer.

        The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming the output file.

        :return: The label of this VideoLayer.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this VideoLayer.

        The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming the output file.

        :param label: The label of this VideoLayer.
        :type label: str
        """

        self._label = label

    @property
    def width(self):
        """Gets the width of this VideoLayer.

        The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example 50% means the output video has half as many pixels in width as the input.

        :return: The width of this VideoLayer.
        :rtype: str
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this VideoLayer.

        The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example 50% means the output video has half as many pixels in width as the input.

        :param width: The width of this VideoLayer.
        :type width: str
        """

        self._width = width
