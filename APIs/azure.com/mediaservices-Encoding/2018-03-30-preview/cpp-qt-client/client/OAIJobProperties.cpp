/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobProperties::OAIJobProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobProperties::OAIJobProperties() {
    this->initializeModel();
}

OAIJobProperties::~OAIJobProperties() {}

void OAIJobProperties::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_outputs_isSet = false;
    m_outputs_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIJobProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobProperties::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_outputs_isValid = ::OpenAPI::fromJsonValue(m_outputs, json[QString("outputs")]);
    m_outputs_isSet = !json[QString("outputs")].isNull() && m_outputs_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIJobProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_input.isSet()) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_outputs.size() > 0) {
        obj.insert(QString("outputs"), ::OpenAPI::toJsonValue(m_outputs));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QDateTime OAIJobProperties::getCreated() const {
    return m_created;
}
void OAIJobProperties::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIJobProperties::is_created_Set() const{
    return m_created_isSet;
}

bool OAIJobProperties::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIJobProperties::getDescription() const {
    return m_description;
}
void OAIJobProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIJobProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIJobProperties::is_description_Valid() const{
    return m_description_isValid;
}

OAIJobInput OAIJobProperties::getInput() const {
    return m_input;
}
void OAIJobProperties::setInput(const OAIJobInput &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIJobProperties::is_input_Set() const{
    return m_input_isSet;
}

bool OAIJobProperties::is_input_Valid() const{
    return m_input_isValid;
}

QDateTime OAIJobProperties::getLastModified() const {
    return m_last_modified;
}
void OAIJobProperties::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIJobProperties::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIJobProperties::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QList<OAIJobOutput> OAIJobProperties::getOutputs() const {
    return m_outputs;
}
void OAIJobProperties::setOutputs(const QList<OAIJobOutput> &outputs) {
    m_outputs = outputs;
    m_outputs_isSet = true;
}

bool OAIJobProperties::is_outputs_Set() const{
    return m_outputs_isSet;
}

bool OAIJobProperties::is_outputs_Valid() const{
    return m_outputs_isValid;
}

QString OAIJobProperties::getPriority() const {
    return m_priority;
}
void OAIJobProperties::setPriority(const QString &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIJobProperties::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIJobProperties::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIJobProperties::getState() const {
    return m_state;
}
void OAIJobProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIJobProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIJobProperties::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIJobProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outputs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_isValid && m_outputs_isValid && true;
}

} // namespace OpenAPI
