/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoOverlay.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoOverlay::OAIVideoOverlay(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoOverlay::OAIVideoOverlay() {
    this->initializeModel();
}

OAIVideoOverlay::~OAIVideoOverlay() {}

void OAIVideoOverlay::initializeModel() {

    m_crop_rectangle_isSet = false;
    m_crop_rectangle_isValid = false;

    m_opacity_isSet = false;
    m_opacity_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_odata_type_isSet = false;
    m_odata_type_isValid = false;

    m_audio_gain_level_isSet = false;
    m_audio_gain_level_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_fade_in_duration_isSet = false;
    m_fade_in_duration_isValid = false;

    m_fade_out_duration_isSet = false;
    m_fade_out_duration_isValid = false;

    m_input_label_isSet = false;
    m_input_label_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;
}

void OAIVideoOverlay::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoOverlay::fromJsonObject(QJsonObject json) {

    m_crop_rectangle_isValid = ::OpenAPI::fromJsonValue(m_crop_rectangle, json[QString("cropRectangle")]);
    m_crop_rectangle_isSet = !json[QString("cropRectangle")].isNull() && m_crop_rectangle_isValid;

    m_opacity_isValid = ::OpenAPI::fromJsonValue(m_opacity, json[QString("opacity")]);
    m_opacity_isSet = !json[QString("opacity")].isNull() && m_opacity_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_odata_type_isValid = ::OpenAPI::fromJsonValue(m_odata_type, json[QString("@odata.type")]);
    m_odata_type_isSet = !json[QString("@odata.type")].isNull() && m_odata_type_isValid;

    m_audio_gain_level_isValid = ::OpenAPI::fromJsonValue(m_audio_gain_level, json[QString("audioGainLevel")]);
    m_audio_gain_level_isSet = !json[QString("audioGainLevel")].isNull() && m_audio_gain_level_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_fade_in_duration_isValid = ::OpenAPI::fromJsonValue(m_fade_in_duration, json[QString("fadeInDuration")]);
    m_fade_in_duration_isSet = !json[QString("fadeInDuration")].isNull() && m_fade_in_duration_isValid;

    m_fade_out_duration_isValid = ::OpenAPI::fromJsonValue(m_fade_out_duration, json[QString("fadeOutDuration")]);
    m_fade_out_duration_isSet = !json[QString("fadeOutDuration")].isNull() && m_fade_out_duration_isValid;

    m_input_label_isValid = ::OpenAPI::fromJsonValue(m_input_label, json[QString("inputLabel")]);
    m_input_label_isSet = !json[QString("inputLabel")].isNull() && m_input_label_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;
}

QString OAIVideoOverlay::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoOverlay::asJsonObject() const {
    QJsonObject obj;
    if (m_crop_rectangle.isSet()) {
        obj.insert(QString("cropRectangle"), ::OpenAPI::toJsonValue(m_crop_rectangle));
    }
    if (m_opacity_isSet) {
        obj.insert(QString("opacity"), ::OpenAPI::toJsonValue(m_opacity));
    }
    if (m_position.isSet()) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_odata_type_isSet) {
        obj.insert(QString("@odata.type"), ::OpenAPI::toJsonValue(m_odata_type));
    }
    if (m_audio_gain_level_isSet) {
        obj.insert(QString("audioGainLevel"), ::OpenAPI::toJsonValue(m_audio_gain_level));
    }
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_fade_in_duration_isSet) {
        obj.insert(QString("fadeInDuration"), ::OpenAPI::toJsonValue(m_fade_in_duration));
    }
    if (m_fade_out_duration_isSet) {
        obj.insert(QString("fadeOutDuration"), ::OpenAPI::toJsonValue(m_fade_out_duration));
    }
    if (m_input_label_isSet) {
        obj.insert(QString("inputLabel"), ::OpenAPI::toJsonValue(m_input_label));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    return obj;
}

OAIRectangle OAIVideoOverlay::getCropRectangle() const {
    return m_crop_rectangle;
}
void OAIVideoOverlay::setCropRectangle(const OAIRectangle &crop_rectangle) {
    m_crop_rectangle = crop_rectangle;
    m_crop_rectangle_isSet = true;
}

bool OAIVideoOverlay::is_crop_rectangle_Set() const{
    return m_crop_rectangle_isSet;
}

bool OAIVideoOverlay::is_crop_rectangle_Valid() const{
    return m_crop_rectangle_isValid;
}

double OAIVideoOverlay::getOpacity() const {
    return m_opacity;
}
void OAIVideoOverlay::setOpacity(const double &opacity) {
    m_opacity = opacity;
    m_opacity_isSet = true;
}

bool OAIVideoOverlay::is_opacity_Set() const{
    return m_opacity_isSet;
}

bool OAIVideoOverlay::is_opacity_Valid() const{
    return m_opacity_isValid;
}

OAIRectangle OAIVideoOverlay::getPosition() const {
    return m_position;
}
void OAIVideoOverlay::setPosition(const OAIRectangle &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIVideoOverlay::is_position_Set() const{
    return m_position_isSet;
}

bool OAIVideoOverlay::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIVideoOverlay::getOdataType() const {
    return m_odata_type;
}
void OAIVideoOverlay::setOdataType(const QString &odata_type) {
    m_odata_type = odata_type;
    m_odata_type_isSet = true;
}

bool OAIVideoOverlay::is_odata_type_Set() const{
    return m_odata_type_isSet;
}

bool OAIVideoOverlay::is_odata_type_Valid() const{
    return m_odata_type_isValid;
}

double OAIVideoOverlay::getAudioGainLevel() const {
    return m_audio_gain_level;
}
void OAIVideoOverlay::setAudioGainLevel(const double &audio_gain_level) {
    m_audio_gain_level = audio_gain_level;
    m_audio_gain_level_isSet = true;
}

bool OAIVideoOverlay::is_audio_gain_level_Set() const{
    return m_audio_gain_level_isSet;
}

bool OAIVideoOverlay::is_audio_gain_level_Valid() const{
    return m_audio_gain_level_isValid;
}

QString OAIVideoOverlay::getEnd() const {
    return m_end;
}
void OAIVideoOverlay::setEnd(const QString &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIVideoOverlay::is_end_Set() const{
    return m_end_isSet;
}

bool OAIVideoOverlay::is_end_Valid() const{
    return m_end_isValid;
}

QString OAIVideoOverlay::getFadeInDuration() const {
    return m_fade_in_duration;
}
void OAIVideoOverlay::setFadeInDuration(const QString &fade_in_duration) {
    m_fade_in_duration = fade_in_duration;
    m_fade_in_duration_isSet = true;
}

bool OAIVideoOverlay::is_fade_in_duration_Set() const{
    return m_fade_in_duration_isSet;
}

bool OAIVideoOverlay::is_fade_in_duration_Valid() const{
    return m_fade_in_duration_isValid;
}

QString OAIVideoOverlay::getFadeOutDuration() const {
    return m_fade_out_duration;
}
void OAIVideoOverlay::setFadeOutDuration(const QString &fade_out_duration) {
    m_fade_out_duration = fade_out_duration;
    m_fade_out_duration_isSet = true;
}

bool OAIVideoOverlay::is_fade_out_duration_Set() const{
    return m_fade_out_duration_isSet;
}

bool OAIVideoOverlay::is_fade_out_duration_Valid() const{
    return m_fade_out_duration_isValid;
}

QString OAIVideoOverlay::getInputLabel() const {
    return m_input_label;
}
void OAIVideoOverlay::setInputLabel(const QString &input_label) {
    m_input_label = input_label;
    m_input_label_isSet = true;
}

bool OAIVideoOverlay::is_input_label_Set() const{
    return m_input_label_isSet;
}

bool OAIVideoOverlay::is_input_label_Valid() const{
    return m_input_label_isValid;
}

QString OAIVideoOverlay::getStart() const {
    return m_start;
}
void OAIVideoOverlay::setStart(const QString &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIVideoOverlay::is_start_Set() const{
    return m_start_isSet;
}

bool OAIVideoOverlay::is_start_Valid() const{
    return m_start_isValid;
}

bool OAIVideoOverlay::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_crop_rectangle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_opacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_odata_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_gain_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fade_in_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fade_out_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoOverlay::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_odata_type_isValid && true;
}

} // namespace OpenAPI
