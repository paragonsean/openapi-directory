/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoLayer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoLayer::OAIVideoLayer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoLayer::OAIVideoLayer() {
    this->initializeModel();
}

OAIVideoLayer::~OAIVideoLayer() {}

void OAIVideoLayer::initializeModel() {

    m_adaptive_b_frame_isSet = false;
    m_adaptive_b_frame_isValid = false;

    m_b_frames_isSet = false;
    m_b_frames_isValid = false;

    m_bitrate_isSet = false;
    m_bitrate_isValid = false;

    m_frame_rate_isSet = false;
    m_frame_rate_isValid = false;

    m_max_bitrate_isSet = false;
    m_max_bitrate_isValid = false;

    m_slices_isSet = false;
    m_slices_isValid = false;

    m_odata_type_isSet = false;
    m_odata_type_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIVideoLayer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoLayer::fromJsonObject(QJsonObject json) {

    m_adaptive_b_frame_isValid = ::OpenAPI::fromJsonValue(m_adaptive_b_frame, json[QString("adaptiveBFrame")]);
    m_adaptive_b_frame_isSet = !json[QString("adaptiveBFrame")].isNull() && m_adaptive_b_frame_isValid;

    m_b_frames_isValid = ::OpenAPI::fromJsonValue(m_b_frames, json[QString("bFrames")]);
    m_b_frames_isSet = !json[QString("bFrames")].isNull() && m_b_frames_isValid;

    m_bitrate_isValid = ::OpenAPI::fromJsonValue(m_bitrate, json[QString("bitrate")]);
    m_bitrate_isSet = !json[QString("bitrate")].isNull() && m_bitrate_isValid;

    m_frame_rate_isValid = ::OpenAPI::fromJsonValue(m_frame_rate, json[QString("frameRate")]);
    m_frame_rate_isSet = !json[QString("frameRate")].isNull() && m_frame_rate_isValid;

    m_max_bitrate_isValid = ::OpenAPI::fromJsonValue(m_max_bitrate, json[QString("maxBitrate")]);
    m_max_bitrate_isSet = !json[QString("maxBitrate")].isNull() && m_max_bitrate_isValid;

    m_slices_isValid = ::OpenAPI::fromJsonValue(m_slices, json[QString("slices")]);
    m_slices_isSet = !json[QString("slices")].isNull() && m_slices_isValid;

    m_odata_type_isValid = ::OpenAPI::fromJsonValue(m_odata_type, json[QString("@odata.type")]);
    m_odata_type_isSet = !json[QString("@odata.type")].isNull() && m_odata_type_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIVideoLayer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoLayer::asJsonObject() const {
    QJsonObject obj;
    if (m_adaptive_b_frame_isSet) {
        obj.insert(QString("adaptiveBFrame"), ::OpenAPI::toJsonValue(m_adaptive_b_frame));
    }
    if (m_b_frames_isSet) {
        obj.insert(QString("bFrames"), ::OpenAPI::toJsonValue(m_b_frames));
    }
    if (m_bitrate_isSet) {
        obj.insert(QString("bitrate"), ::OpenAPI::toJsonValue(m_bitrate));
    }
    if (m_frame_rate_isSet) {
        obj.insert(QString("frameRate"), ::OpenAPI::toJsonValue(m_frame_rate));
    }
    if (m_max_bitrate_isSet) {
        obj.insert(QString("maxBitrate"), ::OpenAPI::toJsonValue(m_max_bitrate));
    }
    if (m_slices_isSet) {
        obj.insert(QString("slices"), ::OpenAPI::toJsonValue(m_slices));
    }
    if (m_odata_type_isSet) {
        obj.insert(QString("@odata.type"), ::OpenAPI::toJsonValue(m_odata_type));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

bool OAIVideoLayer::isAdaptiveBFrame() const {
    return m_adaptive_b_frame;
}
void OAIVideoLayer::setAdaptiveBFrame(const bool &adaptive_b_frame) {
    m_adaptive_b_frame = adaptive_b_frame;
    m_adaptive_b_frame_isSet = true;
}

bool OAIVideoLayer::is_adaptive_b_frame_Set() const{
    return m_adaptive_b_frame_isSet;
}

bool OAIVideoLayer::is_adaptive_b_frame_Valid() const{
    return m_adaptive_b_frame_isValid;
}

qint32 OAIVideoLayer::getBFrames() const {
    return m_b_frames;
}
void OAIVideoLayer::setBFrames(const qint32 &b_frames) {
    m_b_frames = b_frames;
    m_b_frames_isSet = true;
}

bool OAIVideoLayer::is_b_frames_Set() const{
    return m_b_frames_isSet;
}

bool OAIVideoLayer::is_b_frames_Valid() const{
    return m_b_frames_isValid;
}

qint32 OAIVideoLayer::getBitrate() const {
    return m_bitrate;
}
void OAIVideoLayer::setBitrate(const qint32 &bitrate) {
    m_bitrate = bitrate;
    m_bitrate_isSet = true;
}

bool OAIVideoLayer::is_bitrate_Set() const{
    return m_bitrate_isSet;
}

bool OAIVideoLayer::is_bitrate_Valid() const{
    return m_bitrate_isValid;
}

QString OAIVideoLayer::getFrameRate() const {
    return m_frame_rate;
}
void OAIVideoLayer::setFrameRate(const QString &frame_rate) {
    m_frame_rate = frame_rate;
    m_frame_rate_isSet = true;
}

bool OAIVideoLayer::is_frame_rate_Set() const{
    return m_frame_rate_isSet;
}

bool OAIVideoLayer::is_frame_rate_Valid() const{
    return m_frame_rate_isValid;
}

qint32 OAIVideoLayer::getMaxBitrate() const {
    return m_max_bitrate;
}
void OAIVideoLayer::setMaxBitrate(const qint32 &max_bitrate) {
    m_max_bitrate = max_bitrate;
    m_max_bitrate_isSet = true;
}

bool OAIVideoLayer::is_max_bitrate_Set() const{
    return m_max_bitrate_isSet;
}

bool OAIVideoLayer::is_max_bitrate_Valid() const{
    return m_max_bitrate_isValid;
}

qint32 OAIVideoLayer::getSlices() const {
    return m_slices;
}
void OAIVideoLayer::setSlices(const qint32 &slices) {
    m_slices = slices;
    m_slices_isSet = true;
}

bool OAIVideoLayer::is_slices_Set() const{
    return m_slices_isSet;
}

bool OAIVideoLayer::is_slices_Valid() const{
    return m_slices_isValid;
}

QString OAIVideoLayer::getOdataType() const {
    return m_odata_type;
}
void OAIVideoLayer::setOdataType(const QString &odata_type) {
    m_odata_type = odata_type;
    m_odata_type_isSet = true;
}

bool OAIVideoLayer::is_odata_type_Set() const{
    return m_odata_type_isSet;
}

bool OAIVideoLayer::is_odata_type_Valid() const{
    return m_odata_type_isValid;
}

QString OAIVideoLayer::getHeight() const {
    return m_height;
}
void OAIVideoLayer::setHeight(const QString &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIVideoLayer::is_height_Set() const{
    return m_height_isSet;
}

bool OAIVideoLayer::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIVideoLayer::getLabel() const {
    return m_label;
}
void OAIVideoLayer::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIVideoLayer::is_label_Set() const{
    return m_label_isSet;
}

bool OAIVideoLayer::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIVideoLayer::getWidth() const {
    return m_width;
}
void OAIVideoLayer::setWidth(const QString &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIVideoLayer::is_width_Set() const{
    return m_width_isSet;
}

bool OAIVideoLayer::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIVideoLayer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adaptive_b_frame_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_frames_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frame_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slices_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_odata_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoLayer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_odata_type_isValid && true;
}

} // namespace OpenAPI
