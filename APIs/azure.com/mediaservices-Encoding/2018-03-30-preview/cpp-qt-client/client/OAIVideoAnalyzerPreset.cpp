/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoAnalyzerPreset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoAnalyzerPreset::OAIVideoAnalyzerPreset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoAnalyzerPreset::OAIVideoAnalyzerPreset() {
    this->initializeModel();
}

OAIVideoAnalyzerPreset::~OAIVideoAnalyzerPreset() {}

void OAIVideoAnalyzerPreset::initializeModel() {

    m_audio_insights_only_isSet = false;
    m_audio_insights_only_isValid = false;

    m_audio_language_isSet = false;
    m_audio_language_isValid = false;

    m_odata_type_isSet = false;
    m_odata_type_isValid = false;
}

void OAIVideoAnalyzerPreset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoAnalyzerPreset::fromJsonObject(QJsonObject json) {

    m_audio_insights_only_isValid = ::OpenAPI::fromJsonValue(m_audio_insights_only, json[QString("audioInsightsOnly")]);
    m_audio_insights_only_isSet = !json[QString("audioInsightsOnly")].isNull() && m_audio_insights_only_isValid;

    m_audio_language_isValid = ::OpenAPI::fromJsonValue(m_audio_language, json[QString("audioLanguage")]);
    m_audio_language_isSet = !json[QString("audioLanguage")].isNull() && m_audio_language_isValid;

    m_odata_type_isValid = ::OpenAPI::fromJsonValue(m_odata_type, json[QString("@odata.type")]);
    m_odata_type_isSet = !json[QString("@odata.type")].isNull() && m_odata_type_isValid;
}

QString OAIVideoAnalyzerPreset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoAnalyzerPreset::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_insights_only_isSet) {
        obj.insert(QString("audioInsightsOnly"), ::OpenAPI::toJsonValue(m_audio_insights_only));
    }
    if (m_audio_language_isSet) {
        obj.insert(QString("audioLanguage"), ::OpenAPI::toJsonValue(m_audio_language));
    }
    if (m_odata_type_isSet) {
        obj.insert(QString("@odata.type"), ::OpenAPI::toJsonValue(m_odata_type));
    }
    return obj;
}

bool OAIVideoAnalyzerPreset::isAudioInsightsOnly() const {
    return m_audio_insights_only;
}
void OAIVideoAnalyzerPreset::setAudioInsightsOnly(const bool &audio_insights_only) {
    m_audio_insights_only = audio_insights_only;
    m_audio_insights_only_isSet = true;
}

bool OAIVideoAnalyzerPreset::is_audio_insights_only_Set() const{
    return m_audio_insights_only_isSet;
}

bool OAIVideoAnalyzerPreset::is_audio_insights_only_Valid() const{
    return m_audio_insights_only_isValid;
}

QString OAIVideoAnalyzerPreset::getAudioLanguage() const {
    return m_audio_language;
}
void OAIVideoAnalyzerPreset::setAudioLanguage(const QString &audio_language) {
    m_audio_language = audio_language;
    m_audio_language_isSet = true;
}

bool OAIVideoAnalyzerPreset::is_audio_language_Set() const{
    return m_audio_language_isSet;
}

bool OAIVideoAnalyzerPreset::is_audio_language_Valid() const{
    return m_audio_language_isValid;
}

QString OAIVideoAnalyzerPreset::getOdataType() const {
    return m_odata_type;
}
void OAIVideoAnalyzerPreset::setOdataType(const QString &odata_type) {
    m_odata_type = odata_type;
    m_odata_type_isSet = true;
}

bool OAIVideoAnalyzerPreset::is_odata_type_Set() const{
    return m_odata_type_isSet;
}

bool OAIVideoAnalyzerPreset::is_odata_type_Valid() const{
    return m_odata_type_isValid;
}

bool OAIVideoAnalyzerPreset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_insights_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_odata_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoAnalyzerPreset::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_odata_type_isValid && true;
}

} // namespace OpenAPI
