/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudio.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudio::OAIAudio(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudio::OAIAudio() {
    this->initializeModel();
}

OAIAudio::~OAIAudio() {}

void OAIAudio::initializeModel() {

    m_bitrate_isSet = false;
    m_bitrate_isValid = false;

    m_channels_isSet = false;
    m_channels_isValid = false;

    m_sampling_rate_isSet = false;
    m_sampling_rate_isValid = false;

    m_odata_type_isSet = false;
    m_odata_type_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;
}

void OAIAudio::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudio::fromJsonObject(QJsonObject json) {

    m_bitrate_isValid = ::OpenAPI::fromJsonValue(m_bitrate, json[QString("bitrate")]);
    m_bitrate_isSet = !json[QString("bitrate")].isNull() && m_bitrate_isValid;

    m_channels_isValid = ::OpenAPI::fromJsonValue(m_channels, json[QString("channels")]);
    m_channels_isSet = !json[QString("channels")].isNull() && m_channels_isValid;

    m_sampling_rate_isValid = ::OpenAPI::fromJsonValue(m_sampling_rate, json[QString("samplingRate")]);
    m_sampling_rate_isSet = !json[QString("samplingRate")].isNull() && m_sampling_rate_isValid;

    m_odata_type_isValid = ::OpenAPI::fromJsonValue(m_odata_type, json[QString("@odata.type")]);
    m_odata_type_isSet = !json[QString("@odata.type")].isNull() && m_odata_type_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;
}

QString OAIAudio::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudio::asJsonObject() const {
    QJsonObject obj;
    if (m_bitrate_isSet) {
        obj.insert(QString("bitrate"), ::OpenAPI::toJsonValue(m_bitrate));
    }
    if (m_channels_isSet) {
        obj.insert(QString("channels"), ::OpenAPI::toJsonValue(m_channels));
    }
    if (m_sampling_rate_isSet) {
        obj.insert(QString("samplingRate"), ::OpenAPI::toJsonValue(m_sampling_rate));
    }
    if (m_odata_type_isSet) {
        obj.insert(QString("@odata.type"), ::OpenAPI::toJsonValue(m_odata_type));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    return obj;
}

qint32 OAIAudio::getBitrate() const {
    return m_bitrate;
}
void OAIAudio::setBitrate(const qint32 &bitrate) {
    m_bitrate = bitrate;
    m_bitrate_isSet = true;
}

bool OAIAudio::is_bitrate_Set() const{
    return m_bitrate_isSet;
}

bool OAIAudio::is_bitrate_Valid() const{
    return m_bitrate_isValid;
}

qint32 OAIAudio::getChannels() const {
    return m_channels;
}
void OAIAudio::setChannels(const qint32 &channels) {
    m_channels = channels;
    m_channels_isSet = true;
}

bool OAIAudio::is_channels_Set() const{
    return m_channels_isSet;
}

bool OAIAudio::is_channels_Valid() const{
    return m_channels_isValid;
}

qint32 OAIAudio::getSamplingRate() const {
    return m_sampling_rate;
}
void OAIAudio::setSamplingRate(const qint32 &sampling_rate) {
    m_sampling_rate = sampling_rate;
    m_sampling_rate_isSet = true;
}

bool OAIAudio::is_sampling_rate_Set() const{
    return m_sampling_rate_isSet;
}

bool OAIAudio::is_sampling_rate_Valid() const{
    return m_sampling_rate_isValid;
}

QString OAIAudio::getOdataType() const {
    return m_odata_type;
}
void OAIAudio::setOdataType(const QString &odata_type) {
    m_odata_type = odata_type;
    m_odata_type_isSet = true;
}

bool OAIAudio::is_odata_type_Set() const{
    return m_odata_type_isSet;
}

bool OAIAudio::is_odata_type_Valid() const{
    return m_odata_type_isValid;
}

QString OAIAudio::getLabel() const {
    return m_label;
}
void OAIAudio::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIAudio::is_label_Set() const{
    return m_label_isSet;
}

bool OAIAudio::is_label_Valid() const{
    return m_label_isValid;
}

bool OAIAudio::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sampling_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_odata_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudio::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_odata_type_isValid && true;
}

} // namespace OpenAPI
