/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Format;
import org.openapitools.client.model.OutputFile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the properties for producing a collection of GOP aligned multi-bitrate files. The default behavior is to produce one output file for each video layer which is muxed together with all the audios. The exact output files produced can be controlled by specifying the outputFiles collection.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:53:54.202035-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MultiBitrateFormat extends Format {
  public static final String SERIALIZED_NAME_OUTPUT_FILES = "outputFiles";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FILES)
  private List<OutputFile> outputFiles = new ArrayList<>();

  public MultiBitrateFormat() {
    this.atOdataType = this.getClass().getSimpleName();
  }

  public MultiBitrateFormat outputFiles(List<OutputFile> outputFiles) {
    this.outputFiles = outputFiles;
    return this;
  }

  public MultiBitrateFormat addOutputFilesItem(OutputFile outputFilesItem) {
    if (this.outputFiles == null) {
      this.outputFiles = new ArrayList<>();
    }
    this.outputFiles.add(outputFilesItem);
    return this;
  }

  /**
   * The list of output files to produce.  Each entry in the list is a set of audio and video layer labels to be muxed together .
   * @return outputFiles
   */
  @javax.annotation.Nullable
  public List<OutputFile> getOutputFiles() {
    return outputFiles;
  }

  public void setOutputFiles(List<OutputFile> outputFiles) {
    this.outputFiles = outputFiles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MultiBitrateFormat multiBitrateFormat = (MultiBitrateFormat) o;
    return Objects.equals(this.outputFiles, multiBitrateFormat.outputFiles) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(outputFiles, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MultiBitrateFormat {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    outputFiles: ").append(toIndentedString(outputFiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("@odata.type");
    openapiFields.add("filenamePattern");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("@odata.type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MultiBitrateFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MultiBitrateFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MultiBitrateFormat is not found in the empty JSON string", MultiBitrateFormat.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("@odata.type").getAsString();
      switch (discriminatorValue) {
        case "Mp4Format":
          Mp4Format.validateJsonElement(jsonElement);
          break;
        case "TransportStreamFormat":
          TransportStreamFormat.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `@odata.type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of MultiBitrateFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MultiBitrateFormat
   * @throws IOException if the JSON string is invalid with respect to MultiBitrateFormat
   */
  public static MultiBitrateFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MultiBitrateFormat.class);
  }

  /**
   * Convert an instance of MultiBitrateFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

