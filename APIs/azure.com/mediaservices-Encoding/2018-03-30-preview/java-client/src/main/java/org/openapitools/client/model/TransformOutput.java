/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Preset;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the properties of a TransformOutput, which are the rules to be applied while generating the desired output.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:53:54.202035-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransformOutput {
  /**
   * A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The default is stop.
   */
  @JsonAdapter(OnErrorEnum.Adapter.class)
  public enum OnErrorEnum {
    STOP_PROCESSING_JOB("StopProcessingJob"),
    
    CONTINUE_JOB("ContinueJob");

    private String value;

    OnErrorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OnErrorEnum fromValue(String value) {
      for (OnErrorEnum b : OnErrorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OnErrorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OnErrorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OnErrorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OnErrorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OnErrorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ON_ERROR = "onError";
  @SerializedName(SERIALIZED_NAME_ON_ERROR)
  private OnErrorEnum onError;

  public static final String SERIALIZED_NAME_PRESET = "preset";
  @SerializedName(SERIALIZED_NAME_PRESET)
  private Preset preset;

  /**
   * Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.
   */
  @JsonAdapter(RelativePriorityEnum.Adapter.class)
  public enum RelativePriorityEnum {
    LOW("Low"),
    
    NORMAL("Normal"),
    
    HIGH("High");

    private String value;

    RelativePriorityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RelativePriorityEnum fromValue(String value) {
      for (RelativePriorityEnum b : RelativePriorityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RelativePriorityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RelativePriorityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RelativePriorityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RelativePriorityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RelativePriorityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RELATIVE_PRIORITY = "relativePriority";
  @SerializedName(SERIALIZED_NAME_RELATIVE_PRIORITY)
  private RelativePriorityEnum relativePriority;

  public TransformOutput() {
  }

  public TransformOutput onError(OnErrorEnum onError) {
    this.onError = onError;
    return this;
  }

  /**
   * A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The default is stop.
   * @return onError
   */
  @javax.annotation.Nullable
  public OnErrorEnum getOnError() {
    return onError;
  }

  public void setOnError(OnErrorEnum onError) {
    this.onError = onError;
  }


  public TransformOutput preset(Preset preset) {
    this.preset = preset;
    return this;
  }

  /**
   * Get preset
   * @return preset
   */
  @javax.annotation.Nonnull
  public Preset getPreset() {
    return preset;
  }

  public void setPreset(Preset preset) {
    this.preset = preset;
  }


  public TransformOutput relativePriority(RelativePriorityEnum relativePriority) {
    this.relativePriority = relativePriority;
    return this;
  }

  /**
   * Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.
   * @return relativePriority
   */
  @javax.annotation.Nullable
  public RelativePriorityEnum getRelativePriority() {
    return relativePriority;
  }

  public void setRelativePriority(RelativePriorityEnum relativePriority) {
    this.relativePriority = relativePriority;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransformOutput transformOutput = (TransformOutput) o;
    return Objects.equals(this.onError, transformOutput.onError) &&
        Objects.equals(this.preset, transformOutput.preset) &&
        Objects.equals(this.relativePriority, transformOutput.relativePriority);
  }

  @Override
  public int hashCode() {
    return Objects.hash(onError, preset, relativePriority);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransformOutput {\n");
    sb.append("    onError: ").append(toIndentedString(onError)).append("\n");
    sb.append("    preset: ").append(toIndentedString(preset)).append("\n");
    sb.append("    relativePriority: ").append(toIndentedString(relativePriority)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("onError");
    openapiFields.add("preset");
    openapiFields.add("relativePriority");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("preset");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransformOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransformOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransformOutput is not found in the empty JSON string", TransformOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransformOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransformOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransformOutput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("onError") != null && !jsonObj.get("onError").isJsonNull()) && !jsonObj.get("onError").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `onError` to be a primitive type in the JSON string but got `%s`", jsonObj.get("onError").toString()));
      }
      // validate the optional field `onError`
      if (jsonObj.get("onError") != null && !jsonObj.get("onError").isJsonNull()) {
        OnErrorEnum.validateJsonElement(jsonObj.get("onError"));
      }
      // validate the required field `preset`
      Preset.validateJsonElement(jsonObj.get("preset"));
      if ((jsonObj.get("relativePriority") != null && !jsonObj.get("relativePriority").isJsonNull()) && !jsonObj.get("relativePriority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relativePriority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relativePriority").toString()));
      }
      // validate the optional field `relativePriority`
      if (jsonObj.get("relativePriority") != null && !jsonObj.get("relativePriority").isJsonNull()) {
        RelativePriorityEnum.validateJsonElement(jsonObj.get("relativePriority"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransformOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransformOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransformOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransformOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<TransformOutput>() {
           @Override
           public void write(JsonWriter out, TransformOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransformOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransformOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransformOutput
   * @throws IOException if the JSON string is invalid with respect to TransformOutput
   */
  public static TransformOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransformOutput.class);
  }

  /**
   * Convert an instance of TransformOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

