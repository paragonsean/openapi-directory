/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Base class for output.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:53:54.202035-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Format {
  public static final String SERIALIZED_NAME_AT_ODATA_TYPE = "@odata.type";
  @SerializedName(SERIALIZED_NAME_AT_ODATA_TYPE)
  protected String atOdataType;

  public static final String SERIALIZED_NAME_FILENAME_PATTERN = "filenamePattern";
  @SerializedName(SERIALIZED_NAME_FILENAME_PATTERN)
  private String filenamePattern;

  public Format() {
    this.atOdataType = this.getClass().getSimpleName();
  }

  public Format atOdataType(String atOdataType) {
    this.atOdataType = atOdataType;
    return this;
  }

  /**
   * The discriminator for derived types.
   * @return atOdataType
   */
  @javax.annotation.Nonnull
  public String getAtOdataType() {
    return atOdataType;
  }

  public void setAtOdataType(String atOdataType) {
    this.atOdataType = atOdataType;
  }


  public Format filenamePattern(String filenamePattern) {
    this.filenamePattern = filenamePattern;
    return this;
  }

  /**
   * The pattern of the file names for the generated output files. The following macros are supported in the file name: {Basename} - The base name of the input video {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {Bitrate} - The audio/video bitrate. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. Any unsubstituted macros will be collapsed and removed from the filename.
   * @return filenamePattern
   */
  @javax.annotation.Nullable
  public String getFilenamePattern() {
    return filenamePattern;
  }

  public void setFilenamePattern(String filenamePattern) {
    this.filenamePattern = filenamePattern;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Format format = (Format) o;
    return Objects.equals(this.atOdataType, format.atOdataType) &&
        Objects.equals(this.filenamePattern, format.filenamePattern);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atOdataType, filenamePattern);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Format {\n");
    sb.append("    atOdataType: ").append(toIndentedString(atOdataType)).append("\n");
    sb.append("    filenamePattern: ").append(toIndentedString(filenamePattern)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("@odata.type");
    openapiFields.add("filenamePattern");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("@odata.type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Format
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Format.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Format is not found in the empty JSON string", Format.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("@odata.type").getAsString();
      switch (discriminatorValue) {
        case "ImageFormat":
          ImageFormat.validateJsonElement(jsonElement);
          break;
        case "JpgFormat":
          JpgFormat.validateJsonElement(jsonElement);
          break;
        case "Mp4Format":
          Mp4Format.validateJsonElement(jsonElement);
          break;
        case "MultiBitrateFormat":
          MultiBitrateFormat.validateJsonElement(jsonElement);
          break;
        case "PngFormat":
          PngFormat.validateJsonElement(jsonElement);
          break;
        case "TransportStreamFormat":
          TransportStreamFormat.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `@odata.type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of Format given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Format
   * @throws IOException if the JSON string is invalid with respect to Format
   */
  public static Format fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Format.class);
  }

  /**
   * Convert an instance of Format to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

