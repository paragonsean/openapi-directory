/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Deinterlace;
import org.openapitools.client.model.Overlay;
import org.openapitools.client.model.Rectangle;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes all the filtering operations, such as de-interlacing, rotation etc. that are to be applied to the input media before encoding.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:53:54.202035-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Filters {
  public static final String SERIALIZED_NAME_CROP = "crop";
  @SerializedName(SERIALIZED_NAME_CROP)
  private Rectangle crop;

  public static final String SERIALIZED_NAME_DEINTERLACE = "deinterlace";
  @SerializedName(SERIALIZED_NAME_DEINTERLACE)
  private Deinterlace deinterlace;

  public static final String SERIALIZED_NAME_OVERLAYS = "overlays";
  @SerializedName(SERIALIZED_NAME_OVERLAYS)
  private List<Overlay> overlays = new ArrayList<>();

  /**
   * The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto
   */
  @JsonAdapter(RotationEnum.Adapter.class)
  public enum RotationEnum {
    AUTO("Auto"),
    
    NONE("None"),
    
    ROTATE0("Rotate0"),
    
    ROTATE90("Rotate90"),
    
    ROTATE180("Rotate180"),
    
    ROTATE270("Rotate270");

    private String value;

    RotationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RotationEnum fromValue(String value) {
      for (RotationEnum b : RotationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RotationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RotationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RotationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RotationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RotationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROTATION = "rotation";
  @SerializedName(SERIALIZED_NAME_ROTATION)
  private RotationEnum rotation;

  public Filters() {
  }

  public Filters crop(Rectangle crop) {
    this.crop = crop;
    return this;
  }

  /**
   * Get crop
   * @return crop
   */
  @javax.annotation.Nullable
  public Rectangle getCrop() {
    return crop;
  }

  public void setCrop(Rectangle crop) {
    this.crop = crop;
  }


  public Filters deinterlace(Deinterlace deinterlace) {
    this.deinterlace = deinterlace;
    return this;
  }

  /**
   * Get deinterlace
   * @return deinterlace
   */
  @javax.annotation.Nullable
  public Deinterlace getDeinterlace() {
    return deinterlace;
  }

  public void setDeinterlace(Deinterlace deinterlace) {
    this.deinterlace = deinterlace;
  }


  public Filters overlays(List<Overlay> overlays) {
    this.overlays = overlays;
    return this;
  }

  public Filters addOverlaysItem(Overlay overlaysItem) {
    if (this.overlays == null) {
      this.overlays = new ArrayList<>();
    }
    this.overlays.add(overlaysItem);
    return this;
  }

  /**
   * The properties of overlays to be applied to the input video. These could be audio, image or video overlays.
   * @return overlays
   */
  @javax.annotation.Nullable
  public List<Overlay> getOverlays() {
    return overlays;
  }

  public void setOverlays(List<Overlay> overlays) {
    this.overlays = overlays;
  }


  public Filters rotation(RotationEnum rotation) {
    this.rotation = rotation;
    return this;
  }

  /**
   * The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto
   * @return rotation
   */
  @javax.annotation.Nullable
  public RotationEnum getRotation() {
    return rotation;
  }

  public void setRotation(RotationEnum rotation) {
    this.rotation = rotation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Filters filters = (Filters) o;
    return Objects.equals(this.crop, filters.crop) &&
        Objects.equals(this.deinterlace, filters.deinterlace) &&
        Objects.equals(this.overlays, filters.overlays) &&
        Objects.equals(this.rotation, filters.rotation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(crop, deinterlace, overlays, rotation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Filters {\n");
    sb.append("    crop: ").append(toIndentedString(crop)).append("\n");
    sb.append("    deinterlace: ").append(toIndentedString(deinterlace)).append("\n");
    sb.append("    overlays: ").append(toIndentedString(overlays)).append("\n");
    sb.append("    rotation: ").append(toIndentedString(rotation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("crop");
    openapiFields.add("deinterlace");
    openapiFields.add("overlays");
    openapiFields.add("rotation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Filters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Filters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Filters is not found in the empty JSON string", Filters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Filters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Filters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `crop`
      if (jsonObj.get("crop") != null && !jsonObj.get("crop").isJsonNull()) {
        Rectangle.validateJsonElement(jsonObj.get("crop"));
      }
      // validate the optional field `deinterlace`
      if (jsonObj.get("deinterlace") != null && !jsonObj.get("deinterlace").isJsonNull()) {
        Deinterlace.validateJsonElement(jsonObj.get("deinterlace"));
      }
      if (jsonObj.get("overlays") != null && !jsonObj.get("overlays").isJsonNull()) {
        JsonArray jsonArrayoverlays = jsonObj.getAsJsonArray("overlays");
        if (jsonArrayoverlays != null) {
          // ensure the json data is an array
          if (!jsonObj.get("overlays").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `overlays` to be an array in the JSON string but got `%s`", jsonObj.get("overlays").toString()));
          }

          // validate the optional field `overlays` (array)
          for (int i = 0; i < jsonArrayoverlays.size(); i++) {
            Overlay.validateJsonElement(jsonArrayoverlays.get(i));
          };
        }
      }
      if ((jsonObj.get("rotation") != null && !jsonObj.get("rotation").isJsonNull()) && !jsonObj.get("rotation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rotation").toString()));
      }
      // validate the optional field `rotation`
      if (jsonObj.get("rotation") != null && !jsonObj.get("rotation").isJsonNull()) {
        RotationEnum.validateJsonElement(jsonObj.get("rotation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Filters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Filters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Filters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Filters.class));

       return (TypeAdapter<T>) new TypeAdapter<Filters>() {
           @Override
           public void write(JsonWriter out, Filters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Filters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Filters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Filters
   * @throws IOException if the JSON string is invalid with respect to Filters
   */
  public static Filters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Filters.class);
  }

  /**
   * Convert an instance of Filters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

