/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.H264Layer;
import org.openapitools.client.model.Video;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes all the properties for encoding a video with the H.264 codec.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:53:54.202035-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class H264Video extends Video {
  /**
   * Tells the encoder how to choose its encoding settings. The default value is Balanced.
   */
  @JsonAdapter(ComplexityEnum.Adapter.class)
  public enum ComplexityEnum {
    SPEED("Speed"),
    
    BALANCED("Balanced"),
    
    QUALITY("Quality");

    private String value;

    ComplexityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ComplexityEnum fromValue(String value) {
      for (ComplexityEnum b : ComplexityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ComplexityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ComplexityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ComplexityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ComplexityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ComplexityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPLEXITY = "complexity";
  @SerializedName(SERIALIZED_NAME_COMPLEXITY)
  private ComplexityEnum complexity;

  public static final String SERIALIZED_NAME_LAYERS = "layers";
  @SerializedName(SERIALIZED_NAME_LAYERS)
  private List<H264Layer> layers = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCENE_CHANGE_DETECTION = "sceneChangeDetection";
  @SerializedName(SERIALIZED_NAME_SCENE_CHANGE_DETECTION)
  private Boolean sceneChangeDetection;

  public H264Video() {
    this.atOdataType = this.getClass().getSimpleName();
  }

  public H264Video complexity(ComplexityEnum complexity) {
    this.complexity = complexity;
    return this;
  }

  /**
   * Tells the encoder how to choose its encoding settings. The default value is Balanced.
   * @return complexity
   */
  @javax.annotation.Nullable
  public ComplexityEnum getComplexity() {
    return complexity;
  }

  public void setComplexity(ComplexityEnum complexity) {
    this.complexity = complexity;
  }


  public H264Video layers(List<H264Layer> layers) {
    this.layers = layers;
    return this;
  }

  public H264Video addLayersItem(H264Layer layersItem) {
    if (this.layers == null) {
      this.layers = new ArrayList<>();
    }
    this.layers.add(layersItem);
    return this;
  }

  /**
   * The collection of output H.264 layers to be produced by the encoder.
   * @return layers
   */
  @javax.annotation.Nullable
  public List<H264Layer> getLayers() {
    return layers;
  }

  public void setLayers(List<H264Layer> layers) {
    this.layers = layers;
  }


  public H264Video sceneChangeDetection(Boolean sceneChangeDetection) {
    this.sceneChangeDetection = sceneChangeDetection;
    return this;
  }

  /**
   * Whether or not the encoder should insert key frames at scene changes. If not specified, the default is false. This flag should be set to true only when the encoder is being configured to produce a single output video.
   * @return sceneChangeDetection
   */
  @javax.annotation.Nullable
  public Boolean getSceneChangeDetection() {
    return sceneChangeDetection;
  }

  public void setSceneChangeDetection(Boolean sceneChangeDetection) {
    this.sceneChangeDetection = sceneChangeDetection;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    H264Video h264Video = (H264Video) o;
    return Objects.equals(this.complexity, h264Video.complexity) &&
        Objects.equals(this.layers, h264Video.layers) &&
        Objects.equals(this.sceneChangeDetection, h264Video.sceneChangeDetection) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(complexity, layers, sceneChangeDetection, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class H264Video {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    complexity: ").append(toIndentedString(complexity)).append("\n");
    sb.append("    layers: ").append(toIndentedString(layers)).append("\n");
    sb.append("    sceneChangeDetection: ").append(toIndentedString(sceneChangeDetection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("keyFrameInterval");
    openapiFields.add("stretchMode");
    openapiFields.add("@odata.type");
    openapiFields.add("label");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("@odata.type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to H264Video
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!H264Video.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in H264Video is not found in the empty JSON string", H264Video.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!H264Video.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `H264Video` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : H264Video.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!H264Video.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'H264Video' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<H264Video> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(H264Video.class));

       return (TypeAdapter<T>) new TypeAdapter<H264Video>() {
           @Override
           public void write(JsonWriter out, H264Video value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public H264Video read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of H264Video given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of H264Video
   * @throws IOException if the JSON string is invalid with respect to H264Video
   */
  public static H264Video fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, H264Video.class);
  }

  /**
   * Convert an instance of H264Video to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

