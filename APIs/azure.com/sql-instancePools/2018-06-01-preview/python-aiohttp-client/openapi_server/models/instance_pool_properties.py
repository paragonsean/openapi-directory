# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InstancePoolProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, license_type: str=None, subnet_id: str=None, v_cores: int=None):
        """InstancePoolProperties - a model defined in OpenAPI

        :param license_type: The license_type of this InstancePoolProperties.
        :param subnet_id: The subnet_id of this InstancePoolProperties.
        :param v_cores: The v_cores of this InstancePoolProperties.
        """
        self.openapi_types = {
            'license_type': str,
            'subnet_id': str,
            'v_cores': int
        }

        self.attribute_map = {
            'license_type': 'licenseType',
            'subnet_id': 'subnetId',
            'v_cores': 'vCores'
        }

        self._license_type = license_type
        self._subnet_id = subnet_id
        self._v_cores = v_cores

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstancePoolProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstancePoolProperties of this InstancePoolProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def license_type(self):
        """Gets the license_type of this InstancePoolProperties.

        The license type. Possible values are 'LicenseIncluded' (price for SQL license is included) and 'BasePrice' (without SQL license price).

        :return: The license_type of this InstancePoolProperties.
        :rtype: str
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type):
        """Sets the license_type of this InstancePoolProperties.

        The license type. Possible values are 'LicenseIncluded' (price for SQL license is included) and 'BasePrice' (without SQL license price).

        :param license_type: The license_type of this InstancePoolProperties.
        :type license_type: str
        """
        allowed_values = ["LicenseIncluded", "BasePrice"]  # noqa: E501
        if license_type not in allowed_values:
            raise ValueError(
                "Invalid value for `license_type` ({0}), must be one of {1}"
                .format(license_type, allowed_values)
            )

        self._license_type = license_type

    @property
    def subnet_id(self):
        """Gets the subnet_id of this InstancePoolProperties.

        Resource ID of the subnet to place this instance pool in.

        :return: The subnet_id of this InstancePoolProperties.
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this InstancePoolProperties.

        Resource ID of the subnet to place this instance pool in.

        :param subnet_id: The subnet_id of this InstancePoolProperties.
        :type subnet_id: str
        """
        if subnet_id is None:
            raise ValueError("Invalid value for `subnet_id`, must not be `None`")

        self._subnet_id = subnet_id

    @property
    def v_cores(self):
        """Gets the v_cores of this InstancePoolProperties.

        Count of vCores belonging to this instance pool.

        :return: The v_cores of this InstancePoolProperties.
        :rtype: int
        """
        return self._v_cores

    @v_cores.setter
    def v_cores(self, v_cores):
        """Sets the v_cores of this InstancePoolProperties.

        Count of vCores belonging to this instance pool.

        :param v_cores: The v_cores of this InstancePoolProperties.
        :type v_cores: int
        """
        if v_cores is None:
            raise ValueError("Invalid value for `v_cores`, must not be `None`")

        self._v_cores = v_cores
