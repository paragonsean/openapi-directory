/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstancePoolProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstancePoolProperties::OAIInstancePoolProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstancePoolProperties::OAIInstancePoolProperties() {
    this->initializeModel();
}

OAIInstancePoolProperties::~OAIInstancePoolProperties() {}

void OAIInstancePoolProperties::initializeModel() {

    m_license_type_isSet = false;
    m_license_type_isValid = false;

    m_subnet_id_isSet = false;
    m_subnet_id_isValid = false;

    m_v_cores_isSet = false;
    m_v_cores_isValid = false;
}

void OAIInstancePoolProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstancePoolProperties::fromJsonObject(QJsonObject json) {

    m_license_type_isValid = ::OpenAPI::fromJsonValue(m_license_type, json[QString("licenseType")]);
    m_license_type_isSet = !json[QString("licenseType")].isNull() && m_license_type_isValid;

    m_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_subnet_id, json[QString("subnetId")]);
    m_subnet_id_isSet = !json[QString("subnetId")].isNull() && m_subnet_id_isValid;

    m_v_cores_isValid = ::OpenAPI::fromJsonValue(m_v_cores, json[QString("vCores")]);
    m_v_cores_isSet = !json[QString("vCores")].isNull() && m_v_cores_isValid;
}

QString OAIInstancePoolProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstancePoolProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_license_type_isSet) {
        obj.insert(QString("licenseType"), ::OpenAPI::toJsonValue(m_license_type));
    }
    if (m_subnet_id_isSet) {
        obj.insert(QString("subnetId"), ::OpenAPI::toJsonValue(m_subnet_id));
    }
    if (m_v_cores_isSet) {
        obj.insert(QString("vCores"), ::OpenAPI::toJsonValue(m_v_cores));
    }
    return obj;
}

QString OAIInstancePoolProperties::getLicenseType() const {
    return m_license_type;
}
void OAIInstancePoolProperties::setLicenseType(const QString &license_type) {
    m_license_type = license_type;
    m_license_type_isSet = true;
}

bool OAIInstancePoolProperties::is_license_type_Set() const{
    return m_license_type_isSet;
}

bool OAIInstancePoolProperties::is_license_type_Valid() const{
    return m_license_type_isValid;
}

QString OAIInstancePoolProperties::getSubnetId() const {
    return m_subnet_id;
}
void OAIInstancePoolProperties::setSubnetId(const QString &subnet_id) {
    m_subnet_id = subnet_id;
    m_subnet_id_isSet = true;
}

bool OAIInstancePoolProperties::is_subnet_id_Set() const{
    return m_subnet_id_isSet;
}

bool OAIInstancePoolProperties::is_subnet_id_Valid() const{
    return m_subnet_id_isValid;
}

qint32 OAIInstancePoolProperties::getVCores() const {
    return m_v_cores;
}
void OAIInstancePoolProperties::setVCores(const qint32 &v_cores) {
    m_v_cores = v_cores;
    m_v_cores_isSet = true;
}

bool OAIInstancePoolProperties::is_v_cores_Set() const{
    return m_v_cores_isSet;
}

bool OAIInstancePoolProperties::is_v_cores_Valid() const{
    return m_v_cores_isValid;
}

bool OAIInstancePoolProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_license_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v_cores_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstancePoolProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_license_type_isValid && m_subnet_id_isValid && m_v_cores_isValid && true;
}

} // namespace OpenAPI
