/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInstancePoolsApi_H
#define OAI_OAIInstancePoolsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIInstancePool.h"
#include "OAIInstancePoolListResult.h"
#include "OAIInstancePoolUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInstancePoolsApi : public QObject {
    Q_OBJECT

public:
    OAIInstancePoolsApi(const int timeOut = 0);
    ~OAIInstancePoolsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  instance_pool_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIInstancePool [required]
    */
    virtual void instancePoolsCreateOrUpdate(const QString &resource_group_name, const QString &instance_pool_name, const QString &subscription_id, const QString &api_version, const OAIInstancePool &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  instance_pool_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void instancePoolsDelete(const QString &resource_group_name, const QString &instance_pool_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  instance_pool_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void instancePoolsGet(const QString &resource_group_name, const QString &instance_pool_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void instancePoolsList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void instancePoolsListByResourceGroup(const QString &resource_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  instance_pool_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIInstancePoolUpdate [required]
    */
    virtual void instancePoolsUpdate(const QString &resource_group_name, const QString &instance_pool_name, const QString &subscription_id, const QString &api_version, const OAIInstancePoolUpdate &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void instancePoolsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void instancePoolsDeleteCallback(OAIHttpRequestWorker *worker);
    void instancePoolsGetCallback(OAIHttpRequestWorker *worker);
    void instancePoolsListCallback(OAIHttpRequestWorker *worker);
    void instancePoolsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void instancePoolsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void instancePoolsCreateOrUpdateSignal(OAIInstancePool summary);
    void instancePoolsDeleteSignal();
    void instancePoolsGetSignal(OAIInstancePool summary);
    void instancePoolsListSignal(OAIInstancePoolListResult summary);
    void instancePoolsListByResourceGroupSignal(OAIInstancePoolListResult summary);
    void instancePoolsUpdateSignal(OAIInstancePool summary);


    void instancePoolsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInstancePool summary);
    void instancePoolsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void instancePoolsGetSignalFull(OAIHttpRequestWorker *worker, OAIInstancePool summary);
    void instancePoolsListSignalFull(OAIHttpRequestWorker *worker, OAIInstancePoolListResult summary);
    void instancePoolsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIInstancePoolListResult summary);
    void instancePoolsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInstancePool summary);

    Q_DECL_DEPRECATED_X("Use instancePoolsCreateOrUpdateSignalError() instead")
    void instancePoolsCreateOrUpdateSignalE(OAIInstancePool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void instancePoolsCreateOrUpdateSignalError(OAIInstancePool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use instancePoolsDeleteSignalError() instead")
    void instancePoolsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void instancePoolsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use instancePoolsGetSignalError() instead")
    void instancePoolsGetSignalE(OAIInstancePool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void instancePoolsGetSignalError(OAIInstancePool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use instancePoolsListSignalError() instead")
    void instancePoolsListSignalE(OAIInstancePoolListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void instancePoolsListSignalError(OAIInstancePoolListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use instancePoolsListByResourceGroupSignalError() instead")
    void instancePoolsListByResourceGroupSignalE(OAIInstancePoolListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void instancePoolsListByResourceGroupSignalError(OAIInstancePoolListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use instancePoolsUpdateSignalError() instead")
    void instancePoolsUpdateSignalE(OAIInstancePool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void instancePoolsUpdateSignalError(OAIInstancePool summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use instancePoolsCreateOrUpdateSignalErrorFull() instead")
    void instancePoolsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void instancePoolsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use instancePoolsDeleteSignalErrorFull() instead")
    void instancePoolsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void instancePoolsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use instancePoolsGetSignalErrorFull() instead")
    void instancePoolsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void instancePoolsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use instancePoolsListSignalErrorFull() instead")
    void instancePoolsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void instancePoolsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use instancePoolsListByResourceGroupSignalErrorFull() instead")
    void instancePoolsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void instancePoolsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use instancePoolsUpdateSignalErrorFull() instead")
    void instancePoolsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void instancePoolsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
