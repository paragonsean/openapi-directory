/**
 * DataLakeStoreAccountManagementClient
 * Creates an Azure Data Lake Store account management client.
 *
 * The version of the OpenAPI document: 2015-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountApi_H
#define OAI_OAIAccountApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDataLakeStoreAccount.h"
#include "OAIDataLakeStoreAccountListResult.h"
#include "OAIDataLakeStoreFirewallRuleListResult.h"
#include "OAIFirewallRule.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountApi : public QObject {
    Q_OBJECT

public:
    OAIAccountApi(const int timeOut = 0);
    ~OAIAccountApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIDataLakeStoreAccount [required]
    */
    virtual void accountCreate(const QString &resource_group_name, const QString &name, const QString &api_version, const QString &subscription_id, const OAIDataLakeStoreAccount &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIFirewallRule [required]
    */
    virtual void accountCreateOrUpdateFirewallRule(const QString &resource_group_name, const QString &account_name, const QString &name, const QString &api_version, const QString &subscription_id, const OAIFirewallRule &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void accountDelete(const QString &resource_group_name, const QString &account_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  firewall_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void accountDeleteFirewallRule(const QString &resource_group_name, const QString &account_name, const QString &firewall_rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void accountEnableKeyVault(const QString &resource_group_name, const QString &account_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void accountGet(const QString &resource_group_name, const QString &account_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  firewall_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void accountGetFirewallRule(const QString &resource_group_name, const QString &account_name, const QString &firewall_rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  count bool [optional]
    * @param[in]  search QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void accountList(const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  count bool [optional]
    * @param[in]  search QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void accountListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void accountListFirewallRules(const QString &resource_group_name, const QString &account_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIDataLakeStoreAccount [required]
    */
    virtual void accountUpdate(const QString &resource_group_name, const QString &name, const QString &api_version, const QString &subscription_id, const OAIDataLakeStoreAccount &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void accountCreateCallback(OAIHttpRequestWorker *worker);
    void accountCreateOrUpdateFirewallRuleCallback(OAIHttpRequestWorker *worker);
    void accountDeleteCallback(OAIHttpRequestWorker *worker);
    void accountDeleteFirewallRuleCallback(OAIHttpRequestWorker *worker);
    void accountEnableKeyVaultCallback(OAIHttpRequestWorker *worker);
    void accountGetCallback(OAIHttpRequestWorker *worker);
    void accountGetFirewallRuleCallback(OAIHttpRequestWorker *worker);
    void accountListCallback(OAIHttpRequestWorker *worker);
    void accountListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void accountListFirewallRulesCallback(OAIHttpRequestWorker *worker);
    void accountUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void accountCreateSignal(OAIDataLakeStoreAccount summary);
    void accountCreateOrUpdateFirewallRuleSignal(OAIFirewallRule summary);
    void accountDeleteSignal();
    void accountDeleteFirewallRuleSignal();
    void accountEnableKeyVaultSignal();
    void accountGetSignal(OAIDataLakeStoreAccount summary);
    void accountGetFirewallRuleSignal(OAIFirewallRule summary);
    void accountListSignal(OAIDataLakeStoreAccountListResult summary);
    void accountListByResourceGroupSignal(OAIDataLakeStoreAccountListResult summary);
    void accountListFirewallRulesSignal(OAIDataLakeStoreFirewallRuleListResult summary);
    void accountUpdateSignal(OAIDataLakeStoreAccount summary);


    void accountCreateSignalFull(OAIHttpRequestWorker *worker, OAIDataLakeStoreAccount summary);
    void accountCreateOrUpdateFirewallRuleSignalFull(OAIHttpRequestWorker *worker, OAIFirewallRule summary);
    void accountDeleteSignalFull(OAIHttpRequestWorker *worker);
    void accountDeleteFirewallRuleSignalFull(OAIHttpRequestWorker *worker);
    void accountEnableKeyVaultSignalFull(OAIHttpRequestWorker *worker);
    void accountGetSignalFull(OAIHttpRequestWorker *worker, OAIDataLakeStoreAccount summary);
    void accountGetFirewallRuleSignalFull(OAIHttpRequestWorker *worker, OAIFirewallRule summary);
    void accountListSignalFull(OAIHttpRequestWorker *worker, OAIDataLakeStoreAccountListResult summary);
    void accountListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIDataLakeStoreAccountListResult summary);
    void accountListFirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIDataLakeStoreFirewallRuleListResult summary);
    void accountUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDataLakeStoreAccount summary);

    Q_DECL_DEPRECATED_X("Use accountCreateSignalError() instead")
    void accountCreateSignalE(OAIDataLakeStoreAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateSignalError(OAIDataLakeStoreAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountCreateOrUpdateFirewallRuleSignalError() instead")
    void accountCreateOrUpdateFirewallRuleSignalE(OAIFirewallRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateOrUpdateFirewallRuleSignalError(OAIFirewallRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountDeleteSignalError() instead")
    void accountDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void accountDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountDeleteFirewallRuleSignalError() instead")
    void accountDeleteFirewallRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void accountDeleteFirewallRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountEnableKeyVaultSignalError() instead")
    void accountEnableKeyVaultSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void accountEnableKeyVaultSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetSignalError() instead")
    void accountGetSignalE(OAIDataLakeStoreAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetSignalError(OAIDataLakeStoreAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetFirewallRuleSignalError() instead")
    void accountGetFirewallRuleSignalE(OAIFirewallRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetFirewallRuleSignalError(OAIFirewallRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountListSignalError() instead")
    void accountListSignalE(OAIDataLakeStoreAccountListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountListSignalError(OAIDataLakeStoreAccountListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountListByResourceGroupSignalError() instead")
    void accountListByResourceGroupSignalE(OAIDataLakeStoreAccountListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountListByResourceGroupSignalError(OAIDataLakeStoreAccountListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountListFirewallRulesSignalError() instead")
    void accountListFirewallRulesSignalE(OAIDataLakeStoreFirewallRuleListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountListFirewallRulesSignalError(OAIDataLakeStoreFirewallRuleListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountUpdateSignalError() instead")
    void accountUpdateSignalE(OAIDataLakeStoreAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdateSignalError(OAIDataLakeStoreAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use accountCreateSignalErrorFull() instead")
    void accountCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountCreateOrUpdateFirewallRuleSignalErrorFull() instead")
    void accountCreateOrUpdateFirewallRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateOrUpdateFirewallRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountDeleteSignalErrorFull() instead")
    void accountDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountDeleteFirewallRuleSignalErrorFull() instead")
    void accountDeleteFirewallRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountDeleteFirewallRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountEnableKeyVaultSignalErrorFull() instead")
    void accountEnableKeyVaultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountEnableKeyVaultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetSignalErrorFull() instead")
    void accountGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetFirewallRuleSignalErrorFull() instead")
    void accountGetFirewallRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetFirewallRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountListSignalErrorFull() instead")
    void accountListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountListByResourceGroupSignalErrorFull() instead")
    void accountListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountListFirewallRulesSignalErrorFull() instead")
    void accountListFirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountListFirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountUpdateSignalErrorFull() instead")
    void accountUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
