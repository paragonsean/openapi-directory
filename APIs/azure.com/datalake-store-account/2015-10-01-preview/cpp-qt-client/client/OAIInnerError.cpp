/**
 * DataLakeStoreAccountManagementClient
 * Creates an Azure Data Lake Store account management client.
 *
 * The version of the OpenAPI document: 2015-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInnerError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInnerError::OAIInnerError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInnerError::OAIInnerError() {
    this->initializeModel();
}

OAIInnerError::~OAIInnerError() {}

void OAIInnerError::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_trace_isSet = false;
    m_trace_isValid = false;
}

void OAIInnerError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInnerError::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_trace_isValid = ::OpenAPI::fromJsonValue(m_trace, json[QString("trace")]);
    m_trace_isSet = !json[QString("trace")].isNull() && m_trace_isValid;
}

QString OAIInnerError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInnerError::asJsonObject() const {
    QJsonObject obj;
    if (m_context_isSet) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_trace_isSet) {
        obj.insert(QString("trace"), ::OpenAPI::toJsonValue(m_trace));
    }
    return obj;
}

QString OAIInnerError::getContext() const {
    return m_context;
}
void OAIInnerError::setContext(const QString &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIInnerError::is_context_Set() const{
    return m_context_isSet;
}

bool OAIInnerError::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIInnerError::getTrace() const {
    return m_trace;
}
void OAIInnerError::setTrace(const QString &trace) {
    m_trace = trace;
    m_trace_isSet = true;
}

bool OAIInnerError::is_trace_Set() const{
    return m_trace_isSet;
}

bool OAIInnerError::is_trace_Valid() const{
    return m_trace_isValid;
}

bool OAIInnerError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trace_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInnerError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
