/**
 * DataLakeStoreAccountManagementClient
 * Creates an Azure Data Lake Store account management client.
 *
 * The version of the OpenAPI document: 2015-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyVaultMetaInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyVaultMetaInfo::OAIKeyVaultMetaInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyVaultMetaInfo::OAIKeyVaultMetaInfo() {
    this->initializeModel();
}

OAIKeyVaultMetaInfo::~OAIKeyVaultMetaInfo() {}

void OAIKeyVaultMetaInfo::initializeModel() {

    m_encryption_key_name_isSet = false;
    m_encryption_key_name_isValid = false;

    m_encryption_key_version_isSet = false;
    m_encryption_key_version_isValid = false;

    m_key_vault_resource_id_isSet = false;
    m_key_vault_resource_id_isValid = false;
}

void OAIKeyVaultMetaInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyVaultMetaInfo::fromJsonObject(QJsonObject json) {

    m_encryption_key_name_isValid = ::OpenAPI::fromJsonValue(m_encryption_key_name, json[QString("encryptionKeyName")]);
    m_encryption_key_name_isSet = !json[QString("encryptionKeyName")].isNull() && m_encryption_key_name_isValid;

    m_encryption_key_version_isValid = ::OpenAPI::fromJsonValue(m_encryption_key_version, json[QString("encryptionKeyVersion")]);
    m_encryption_key_version_isSet = !json[QString("encryptionKeyVersion")].isNull() && m_encryption_key_version_isValid;

    m_key_vault_resource_id_isValid = ::OpenAPI::fromJsonValue(m_key_vault_resource_id, json[QString("keyVaultResourceId")]);
    m_key_vault_resource_id_isSet = !json[QString("keyVaultResourceId")].isNull() && m_key_vault_resource_id_isValid;
}

QString OAIKeyVaultMetaInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyVaultMetaInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_encryption_key_name_isSet) {
        obj.insert(QString("encryptionKeyName"), ::OpenAPI::toJsonValue(m_encryption_key_name));
    }
    if (m_encryption_key_version_isSet) {
        obj.insert(QString("encryptionKeyVersion"), ::OpenAPI::toJsonValue(m_encryption_key_version));
    }
    if (m_key_vault_resource_id_isSet) {
        obj.insert(QString("keyVaultResourceId"), ::OpenAPI::toJsonValue(m_key_vault_resource_id));
    }
    return obj;
}

QString OAIKeyVaultMetaInfo::getEncryptionKeyName() const {
    return m_encryption_key_name;
}
void OAIKeyVaultMetaInfo::setEncryptionKeyName(const QString &encryption_key_name) {
    m_encryption_key_name = encryption_key_name;
    m_encryption_key_name_isSet = true;
}

bool OAIKeyVaultMetaInfo::is_encryption_key_name_Set() const{
    return m_encryption_key_name_isSet;
}

bool OAIKeyVaultMetaInfo::is_encryption_key_name_Valid() const{
    return m_encryption_key_name_isValid;
}

QString OAIKeyVaultMetaInfo::getEncryptionKeyVersion() const {
    return m_encryption_key_version;
}
void OAIKeyVaultMetaInfo::setEncryptionKeyVersion(const QString &encryption_key_version) {
    m_encryption_key_version = encryption_key_version;
    m_encryption_key_version_isSet = true;
}

bool OAIKeyVaultMetaInfo::is_encryption_key_version_Set() const{
    return m_encryption_key_version_isSet;
}

bool OAIKeyVaultMetaInfo::is_encryption_key_version_Valid() const{
    return m_encryption_key_version_isValid;
}

QString OAIKeyVaultMetaInfo::getKeyVaultResourceId() const {
    return m_key_vault_resource_id;
}
void OAIKeyVaultMetaInfo::setKeyVaultResourceId(const QString &key_vault_resource_id) {
    m_key_vault_resource_id = key_vault_resource_id;
    m_key_vault_resource_id_isSet = true;
}

bool OAIKeyVaultMetaInfo::is_key_vault_resource_id_Set() const{
    return m_key_vault_resource_id_isSet;
}

bool OAIKeyVaultMetaInfo::is_key_vault_resource_id_Valid() const{
    return m_key_vault_resource_id_isValid;
}

bool OAIKeyVaultMetaInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encryption_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_key_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_vault_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyVaultMetaInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
