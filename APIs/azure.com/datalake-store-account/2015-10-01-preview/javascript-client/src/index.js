/**
 * DataLakeStoreAccountManagementClient
 * Creates an Azure Data Lake Store account management client.
 *
 * The version of the OpenAPI document: 2015-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AzureAsyncOperationResult from './model/AzureAsyncOperationResult';
import DataLakeStoreAccount from './model/DataLakeStoreAccount';
import DataLakeStoreAccountListResult from './model/DataLakeStoreAccountListResult';
import DataLakeStoreAccountProperties from './model/DataLakeStoreAccountProperties';
import DataLakeStoreFirewallRuleListResult from './model/DataLakeStoreFirewallRuleListResult';
import EncryptionConfig from './model/EncryptionConfig';
import EncryptionIdentity from './model/EncryptionIdentity';
import Error from './model/Error';
import ErrorDetails from './model/ErrorDetails';
import FirewallRule from './model/FirewallRule';
import FirewallRuleProperties from './model/FirewallRuleProperties';
import InnerError from './model/InnerError';
import KeyVaultMetaInfo from './model/KeyVaultMetaInfo';
import AccountApi from './api/AccountApi';


/**
* Creates an Azure Data Lake Store account management client..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var DataLakeStoreAccountManagementClient = require('index'); // See note below*.
* var xxxSvc = new DataLakeStoreAccountManagementClient.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new DataLakeStoreAccountManagementClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new DataLakeStoreAccountManagementClient.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new DataLakeStoreAccountManagementClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2015-10-01-preview
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AzureAsyncOperationResult model constructor.
     * @property {module:model/AzureAsyncOperationResult}
     */
    AzureAsyncOperationResult,

    /**
     * The DataLakeStoreAccount model constructor.
     * @property {module:model/DataLakeStoreAccount}
     */
    DataLakeStoreAccount,

    /**
     * The DataLakeStoreAccountListResult model constructor.
     * @property {module:model/DataLakeStoreAccountListResult}
     */
    DataLakeStoreAccountListResult,

    /**
     * The DataLakeStoreAccountProperties model constructor.
     * @property {module:model/DataLakeStoreAccountProperties}
     */
    DataLakeStoreAccountProperties,

    /**
     * The DataLakeStoreFirewallRuleListResult model constructor.
     * @property {module:model/DataLakeStoreFirewallRuleListResult}
     */
    DataLakeStoreFirewallRuleListResult,

    /**
     * The EncryptionConfig model constructor.
     * @property {module:model/EncryptionConfig}
     */
    EncryptionConfig,

    /**
     * The EncryptionIdentity model constructor.
     * @property {module:model/EncryptionIdentity}
     */
    EncryptionIdentity,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The ErrorDetails model constructor.
     * @property {module:model/ErrorDetails}
     */
    ErrorDetails,

    /**
     * The FirewallRule model constructor.
     * @property {module:model/FirewallRule}
     */
    FirewallRule,

    /**
     * The FirewallRuleProperties model constructor.
     * @property {module:model/FirewallRuleProperties}
     */
    FirewallRuleProperties,

    /**
     * The InnerError model constructor.
     * @property {module:model/InnerError}
     */
    InnerError,

    /**
     * The KeyVaultMetaInfo model constructor.
     * @property {module:model/KeyVaultMetaInfo}
     */
    KeyVaultMetaInfo,

    /**
    * The AccountApi service constructor.
    * @property {module:api/AccountApi}
    */
    AccountApi
};
