/**
 * DataLakeStoreAccountManagementClient
 * Creates an Azure Data Lake Store account management client.
 *
 * The version of the OpenAPI document: 2015-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EncryptionConfig from './EncryptionConfig';

/**
 * The DataLakeStoreAccountProperties model module.
 * @module model/DataLakeStoreAccountProperties
 * @version 2015-10-01-preview
 */
class DataLakeStoreAccountProperties {
    /**
     * Constructs a new <code>DataLakeStoreAccountProperties</code>.
     * Data Lake Store account properties information
     * @alias module:model/DataLakeStoreAccountProperties
     */
    constructor() { 
        
        DataLakeStoreAccountProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataLakeStoreAccountProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataLakeStoreAccountProperties} obj Optional instance to populate.
     * @return {module:model/DataLakeStoreAccountProperties} The populated <code>DataLakeStoreAccountProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataLakeStoreAccountProperties();

            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Date');
            }
            if (data.hasOwnProperty('defaultGroup')) {
                obj['defaultGroup'] = ApiClient.convertToType(data['defaultGroup'], 'String');
            }
            if (data.hasOwnProperty('encryptionConfig')) {
                obj['encryptionConfig'] = EncryptionConfig.constructFromObject(data['encryptionConfig']);
            }
            if (data.hasOwnProperty('encryptionProvisioningState')) {
                obj['encryptionProvisioningState'] = ApiClient.convertToType(data['encryptionProvisioningState'], 'String');
            }
            if (data.hasOwnProperty('encryptionState')) {
                obj['encryptionState'] = ApiClient.convertToType(data['encryptionState'], 'String');
            }
            if (data.hasOwnProperty('endpoint')) {
                obj['endpoint'] = ApiClient.convertToType(data['endpoint'], 'String');
            }
            if (data.hasOwnProperty('lastModifiedTime')) {
                obj['lastModifiedTime'] = ApiClient.convertToType(data['lastModifiedTime'], 'Date');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataLakeStoreAccountProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataLakeStoreAccountProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['defaultGroup'] && !(typeof data['defaultGroup'] === 'string' || data['defaultGroup'] instanceof String)) {
            throw new Error("Expected the field `defaultGroup` to be a primitive type in the JSON string but got " + data['defaultGroup']);
        }
        // validate the optional field `encryptionConfig`
        if (data['encryptionConfig']) { // data not null
          EncryptionConfig.validateJSON(data['encryptionConfig']);
        }
        // ensure the json data is a string
        if (data['encryptionProvisioningState'] && !(typeof data['encryptionProvisioningState'] === 'string' || data['encryptionProvisioningState'] instanceof String)) {
            throw new Error("Expected the field `encryptionProvisioningState` to be a primitive type in the JSON string but got " + data['encryptionProvisioningState']);
        }
        // ensure the json data is a string
        if (data['encryptionState'] && !(typeof data['encryptionState'] === 'string' || data['encryptionState'] instanceof String)) {
            throw new Error("Expected the field `encryptionState` to be a primitive type in the JSON string but got " + data['encryptionState']);
        }
        // ensure the json data is a string
        if (data['endpoint'] && !(typeof data['endpoint'] === 'string' || data['endpoint'] instanceof String)) {
            throw new Error("Expected the field `endpoint` to be a primitive type in the JSON string but got " + data['endpoint']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * the account creation time.
 * @member {Date} creationTime
 */
DataLakeStoreAccountProperties.prototype['creationTime'] = undefined;

/**
 * the default owner group for all new folders and files created in the Data Lake Store account.
 * @member {String} defaultGroup
 */
DataLakeStoreAccountProperties.prototype['defaultGroup'] = undefined;

/**
 * @member {module:model/EncryptionConfig} encryptionConfig
 */
DataLakeStoreAccountProperties.prototype['encryptionConfig'] = undefined;

/**
 * The current state of encryption provisioning for this Data Lake store account.
 * @member {module:model/DataLakeStoreAccountProperties.EncryptionProvisioningStateEnum} encryptionProvisioningState
 */
DataLakeStoreAccountProperties.prototype['encryptionProvisioningState'] = undefined;

/**
 * The current state of encryption for this Data Lake store account.
 * @member {module:model/DataLakeStoreAccountProperties.EncryptionStateEnum} encryptionState
 */
DataLakeStoreAccountProperties.prototype['encryptionState'] = undefined;

/**
 * the gateway host.
 * @member {String} endpoint
 */
DataLakeStoreAccountProperties.prototype['endpoint'] = undefined;

/**
 * the account last modified time.
 * @member {Date} lastModifiedTime
 */
DataLakeStoreAccountProperties.prototype['lastModifiedTime'] = undefined;

/**
 * the status of the Data Lake Store account while being provisioned.
 * @member {module:model/DataLakeStoreAccountProperties.ProvisioningStateEnum} provisioningState
 */
DataLakeStoreAccountProperties.prototype['provisioningState'] = undefined;

/**
 * the status of the Data Lake Store account after provisioning has completed.
 * @member {module:model/DataLakeStoreAccountProperties.StateEnum} state
 */
DataLakeStoreAccountProperties.prototype['state'] = undefined;





/**
 * Allowed values for the <code>encryptionProvisioningState</code> property.
 * @enum {String}
 * @readonly
 */
DataLakeStoreAccountProperties['EncryptionProvisioningStateEnum'] = {

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded"
};


/**
 * Allowed values for the <code>encryptionState</code> property.
 * @enum {String}
 * @readonly
 */
DataLakeStoreAccountProperties['EncryptionStateEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};


/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
DataLakeStoreAccountProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Running"
     * @const
     */
    "Running": "Running",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Patching"
     * @const
     */
    "Patching": "Patching",

    /**
     * value: "Suspending"
     * @const
     */
    "Suspending": "Suspending",

    /**
     * value: "Resuming"
     * @const
     */
    "Resuming": "Resuming",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Deleted"
     * @const
     */
    "Deleted": "Deleted"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
DataLakeStoreAccountProperties['StateEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "suspended"
     * @const
     */
    "suspended": "suspended"
};



export default DataLakeStoreAccountProperties;

