# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_vault_meta_info import KeyVaultMetaInfo
from openapi_server import util


class EncryptionConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_vault_meta_info: KeyVaultMetaInfo=None, type: str=None):
        """EncryptionConfig - a model defined in OpenAPI

        :param key_vault_meta_info: The key_vault_meta_info of this EncryptionConfig.
        :param type: The type of this EncryptionConfig.
        """
        self.openapi_types = {
            'key_vault_meta_info': KeyVaultMetaInfo,
            'type': str
        }

        self.attribute_map = {
            'key_vault_meta_info': 'keyVaultMetaInfo',
            'type': 'type'
        }

        self._key_vault_meta_info = key_vault_meta_info
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EncryptionConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EncryptionConfig of this EncryptionConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_vault_meta_info(self):
        """Gets the key_vault_meta_info of this EncryptionConfig.


        :return: The key_vault_meta_info of this EncryptionConfig.
        :rtype: KeyVaultMetaInfo
        """
        return self._key_vault_meta_info

    @key_vault_meta_info.setter
    def key_vault_meta_info(self, key_vault_meta_info):
        """Sets the key_vault_meta_info of this EncryptionConfig.


        :param key_vault_meta_info: The key_vault_meta_info of this EncryptionConfig.
        :type key_vault_meta_info: KeyVaultMetaInfo
        """

        self._key_vault_meta_info = key_vault_meta_info

    @property
    def type(self):
        """Gets the type of this EncryptionConfig.

        The type of encryption configuration being used. Currently the only supported types are 'UserManaged' and 'ServiceManaged'.

        :return: The type of this EncryptionConfig.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EncryptionConfig.

        The type of encryption configuration being used. Currently the only supported types are 'UserManaged' and 'ServiceManaged'.

        :param type: The type of this EncryptionConfig.
        :type type: str
        """
        allowed_values = ["UserManaged", "ServiceManaged"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
