# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_config import EncryptionConfig
from openapi_server import util


class DataLakeStoreAccountProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_time: datetime=None, default_group: str=None, encryption_config: EncryptionConfig=None, encryption_provisioning_state: str=None, encryption_state: str=None, endpoint: str=None, last_modified_time: datetime=None, provisioning_state: str=None, state: str=None):
        """DataLakeStoreAccountProperties - a model defined in OpenAPI

        :param creation_time: The creation_time of this DataLakeStoreAccountProperties.
        :param default_group: The default_group of this DataLakeStoreAccountProperties.
        :param encryption_config: The encryption_config of this DataLakeStoreAccountProperties.
        :param encryption_provisioning_state: The encryption_provisioning_state of this DataLakeStoreAccountProperties.
        :param encryption_state: The encryption_state of this DataLakeStoreAccountProperties.
        :param endpoint: The endpoint of this DataLakeStoreAccountProperties.
        :param last_modified_time: The last_modified_time of this DataLakeStoreAccountProperties.
        :param provisioning_state: The provisioning_state of this DataLakeStoreAccountProperties.
        :param state: The state of this DataLakeStoreAccountProperties.
        """
        self.openapi_types = {
            'creation_time': datetime,
            'default_group': str,
            'encryption_config': EncryptionConfig,
            'encryption_provisioning_state': str,
            'encryption_state': str,
            'endpoint': str,
            'last_modified_time': datetime,
            'provisioning_state': str,
            'state': str
        }

        self.attribute_map = {
            'creation_time': 'creationTime',
            'default_group': 'defaultGroup',
            'encryption_config': 'encryptionConfig',
            'encryption_provisioning_state': 'encryptionProvisioningState',
            'encryption_state': 'encryptionState',
            'endpoint': 'endpoint',
            'last_modified_time': 'lastModifiedTime',
            'provisioning_state': 'provisioningState',
            'state': 'state'
        }

        self._creation_time = creation_time
        self._default_group = default_group
        self._encryption_config = encryption_config
        self._encryption_provisioning_state = encryption_provisioning_state
        self._encryption_state = encryption_state
        self._endpoint = endpoint
        self._last_modified_time = last_modified_time
        self._provisioning_state = provisioning_state
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataLakeStoreAccountProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataLakeStoreAccountProperties of this DataLakeStoreAccountProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_time(self):
        """Gets the creation_time of this DataLakeStoreAccountProperties.

        the account creation time.

        :return: The creation_time of this DataLakeStoreAccountProperties.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this DataLakeStoreAccountProperties.

        the account creation time.

        :param creation_time: The creation_time of this DataLakeStoreAccountProperties.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def default_group(self):
        """Gets the default_group of this DataLakeStoreAccountProperties.

        the default owner group for all new folders and files created in the Data Lake Store account.

        :return: The default_group of this DataLakeStoreAccountProperties.
        :rtype: str
        """
        return self._default_group

    @default_group.setter
    def default_group(self, default_group):
        """Sets the default_group of this DataLakeStoreAccountProperties.

        the default owner group for all new folders and files created in the Data Lake Store account.

        :param default_group: The default_group of this DataLakeStoreAccountProperties.
        :type default_group: str
        """

        self._default_group = default_group

    @property
    def encryption_config(self):
        """Gets the encryption_config of this DataLakeStoreAccountProperties.


        :return: The encryption_config of this DataLakeStoreAccountProperties.
        :rtype: EncryptionConfig
        """
        return self._encryption_config

    @encryption_config.setter
    def encryption_config(self, encryption_config):
        """Sets the encryption_config of this DataLakeStoreAccountProperties.


        :param encryption_config: The encryption_config of this DataLakeStoreAccountProperties.
        :type encryption_config: EncryptionConfig
        """

        self._encryption_config = encryption_config

    @property
    def encryption_provisioning_state(self):
        """Gets the encryption_provisioning_state of this DataLakeStoreAccountProperties.

        The current state of encryption provisioning for this Data Lake store account.

        :return: The encryption_provisioning_state of this DataLakeStoreAccountProperties.
        :rtype: str
        """
        return self._encryption_provisioning_state

    @encryption_provisioning_state.setter
    def encryption_provisioning_state(self, encryption_provisioning_state):
        """Sets the encryption_provisioning_state of this DataLakeStoreAccountProperties.

        The current state of encryption provisioning for this Data Lake store account.

        :param encryption_provisioning_state: The encryption_provisioning_state of this DataLakeStoreAccountProperties.
        :type encryption_provisioning_state: str
        """
        allowed_values = ["Creating", "Succeeded"]  # noqa: E501
        if encryption_provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `encryption_provisioning_state` ({0}), must be one of {1}"
                .format(encryption_provisioning_state, allowed_values)
            )

        self._encryption_provisioning_state = encryption_provisioning_state

    @property
    def encryption_state(self):
        """Gets the encryption_state of this DataLakeStoreAccountProperties.

        The current state of encryption for this Data Lake store account.

        :return: The encryption_state of this DataLakeStoreAccountProperties.
        :rtype: str
        """
        return self._encryption_state

    @encryption_state.setter
    def encryption_state(self, encryption_state):
        """Sets the encryption_state of this DataLakeStoreAccountProperties.

        The current state of encryption for this Data Lake store account.

        :param encryption_state: The encryption_state of this DataLakeStoreAccountProperties.
        :type encryption_state: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if encryption_state not in allowed_values:
            raise ValueError(
                "Invalid value for `encryption_state` ({0}), must be one of {1}"
                .format(encryption_state, allowed_values)
            )

        self._encryption_state = encryption_state

    @property
    def endpoint(self):
        """Gets the endpoint of this DataLakeStoreAccountProperties.

        the gateway host.

        :return: The endpoint of this DataLakeStoreAccountProperties.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this DataLakeStoreAccountProperties.

        the gateway host.

        :param endpoint: The endpoint of this DataLakeStoreAccountProperties.
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this DataLakeStoreAccountProperties.

        the account last modified time.

        :return: The last_modified_time of this DataLakeStoreAccountProperties.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this DataLakeStoreAccountProperties.

        the account last modified time.

        :param last_modified_time: The last_modified_time of this DataLakeStoreAccountProperties.
        :type last_modified_time: datetime
        """

        self._last_modified_time = last_modified_time

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this DataLakeStoreAccountProperties.

        the status of the Data Lake Store account while being provisioned.

        :return: The provisioning_state of this DataLakeStoreAccountProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this DataLakeStoreAccountProperties.

        the status of the Data Lake Store account while being provisioned.

        :param provisioning_state: The provisioning_state of this DataLakeStoreAccountProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Failed", "Creating", "Running", "Succeeded", "Patching", "Suspending", "Resuming", "Deleting", "Deleted"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def state(self):
        """Gets the state of this DataLakeStoreAccountProperties.

        the status of the Data Lake Store account after provisioning has completed.

        :return: The state of this DataLakeStoreAccountProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DataLakeStoreAccountProperties.

        the status of the Data Lake Store account after provisioning has completed.

        :param state: The state of this DataLakeStoreAccountProperties.
        :type state: str
        """
        allowed_values = ["active", "suspended"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
