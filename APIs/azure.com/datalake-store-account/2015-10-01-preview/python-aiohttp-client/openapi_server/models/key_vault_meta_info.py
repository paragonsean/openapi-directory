# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KeyVaultMetaInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encryption_key_name: str=None, encryption_key_version: str=None, key_vault_resource_id: str=None):
        """KeyVaultMetaInfo - a model defined in OpenAPI

        :param encryption_key_name: The encryption_key_name of this KeyVaultMetaInfo.
        :param encryption_key_version: The encryption_key_version of this KeyVaultMetaInfo.
        :param key_vault_resource_id: The key_vault_resource_id of this KeyVaultMetaInfo.
        """
        self.openapi_types = {
            'encryption_key_name': str,
            'encryption_key_version': str,
            'key_vault_resource_id': str
        }

        self.attribute_map = {
            'encryption_key_name': 'encryptionKeyName',
            'encryption_key_version': 'encryptionKeyVersion',
            'key_vault_resource_id': 'keyVaultResourceId'
        }

        self._encryption_key_name = encryption_key_name
        self._encryption_key_version = encryption_key_version
        self._key_vault_resource_id = key_vault_resource_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyVaultMetaInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeyVaultMetaInfo of this KeyVaultMetaInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encryption_key_name(self):
        """Gets the encryption_key_name of this KeyVaultMetaInfo.

        The name of the user managed encryption key.

        :return: The encryption_key_name of this KeyVaultMetaInfo.
        :rtype: str
        """
        return self._encryption_key_name

    @encryption_key_name.setter
    def encryption_key_name(self, encryption_key_name):
        """Sets the encryption_key_name of this KeyVaultMetaInfo.

        The name of the user managed encryption key.

        :param encryption_key_name: The encryption_key_name of this KeyVaultMetaInfo.
        :type encryption_key_name: str
        """

        self._encryption_key_name = encryption_key_name

    @property
    def encryption_key_version(self):
        """Gets the encryption_key_version of this KeyVaultMetaInfo.

        The version of the user managed encryption key.

        :return: The encryption_key_version of this KeyVaultMetaInfo.
        :rtype: str
        """
        return self._encryption_key_version

    @encryption_key_version.setter
    def encryption_key_version(self, encryption_key_version):
        """Sets the encryption_key_version of this KeyVaultMetaInfo.

        The version of the user managed encryption key.

        :param encryption_key_version: The encryption_key_version of this KeyVaultMetaInfo.
        :type encryption_key_version: str
        """

        self._encryption_key_version = encryption_key_version

    @property
    def key_vault_resource_id(self):
        """Gets the key_vault_resource_id of this KeyVaultMetaInfo.

        The resource identifier for the user managed Key Vault being used to encrypt.

        :return: The key_vault_resource_id of this KeyVaultMetaInfo.
        :rtype: str
        """
        return self._key_vault_resource_id

    @key_vault_resource_id.setter
    def key_vault_resource_id(self, key_vault_resource_id):
        """Sets the key_vault_resource_id of this KeyVaultMetaInfo.

        The resource identifier for the user managed Key Vault being used to encrypt.

        :param key_vault_resource_id: The key_vault_resource_id of this KeyVaultMetaInfo.
        :type key_vault_resource_id: str
        """

        self._key_vault_resource_id = key_vault_resource_id
