/*
 * DataLakeStoreAccountManagementClient
 * Creates an Azure Data Lake Store account management client.
 *
 * The version of the OpenAPI document: 2015-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.EncryptionConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Data Lake Store account properties information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:00.201306-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataLakeStoreAccountProperties {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_DEFAULT_GROUP = "defaultGroup";
  @SerializedName(SERIALIZED_NAME_DEFAULT_GROUP)
  private String defaultGroup;

  public static final String SERIALIZED_NAME_ENCRYPTION_CONFIG = "encryptionConfig";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_CONFIG)
  private EncryptionConfig encryptionConfig;

  /**
   * The current state of encryption provisioning for this Data Lake store account.
   */
  @JsonAdapter(EncryptionProvisioningStateEnum.Adapter.class)
  public enum EncryptionProvisioningStateEnum {
    CREATING("Creating"),
    
    SUCCEEDED("Succeeded");

    private String value;

    EncryptionProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncryptionProvisioningStateEnum fromValue(String value) {
      for (EncryptionProvisioningStateEnum b : EncryptionProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EncryptionProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncryptionProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncryptionProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EncryptionProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EncryptionProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENCRYPTION_PROVISIONING_STATE = "encryptionProvisioningState";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_PROVISIONING_STATE)
  private EncryptionProvisioningStateEnum encryptionProvisioningState;

  /**
   * The current state of encryption for this Data Lake store account.
   */
  @JsonAdapter(EncryptionStateEnum.Adapter.class)
  public enum EncryptionStateEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    EncryptionStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncryptionStateEnum fromValue(String value) {
      for (EncryptionStateEnum b : EncryptionStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EncryptionStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncryptionStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncryptionStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EncryptionStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EncryptionStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENCRYPTION_STATE = "encryptionState";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_STATE)
  private EncryptionStateEnum encryptionState;

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private String endpoint;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "lastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  /**
   * the status of the Data Lake Store account while being provisioned.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    FAILED("Failed"),
    
    CREATING("Creating"),
    
    RUNNING("Running"),
    
    SUCCEEDED("Succeeded"),
    
    PATCHING("Patching"),
    
    SUSPENDING("Suspending"),
    
    RESUMING("Resuming"),
    
    DELETING("Deleting"),
    
    DELETED("Deleted");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  /**
   * the status of the Data Lake Store account after provisioning has completed.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ACTIVE("active"),
    
    SUSPENDED("suspended");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public DataLakeStoreAccountProperties() {
  }

  public DataLakeStoreAccountProperties(
     OffsetDateTime creationTime, 
     EncryptionProvisioningStateEnum encryptionProvisioningState, 
     OffsetDateTime lastModifiedTime, 
     ProvisioningStateEnum provisioningState, 
     StateEnum state
  ) {
    this();
    this.creationTime = creationTime;
    this.encryptionProvisioningState = encryptionProvisioningState;
    this.lastModifiedTime = lastModifiedTime;
    this.provisioningState = provisioningState;
    this.state = state;
  }

  /**
   * the account creation time.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }



  public DataLakeStoreAccountProperties defaultGroup(String defaultGroup) {
    this.defaultGroup = defaultGroup;
    return this;
  }

  /**
   * the default owner group for all new folders and files created in the Data Lake Store account.
   * @return defaultGroup
   */
  @javax.annotation.Nullable
  public String getDefaultGroup() {
    return defaultGroup;
  }

  public void setDefaultGroup(String defaultGroup) {
    this.defaultGroup = defaultGroup;
  }


  public DataLakeStoreAccountProperties encryptionConfig(EncryptionConfig encryptionConfig) {
    this.encryptionConfig = encryptionConfig;
    return this;
  }

  /**
   * Get encryptionConfig
   * @return encryptionConfig
   */
  @javax.annotation.Nullable
  public EncryptionConfig getEncryptionConfig() {
    return encryptionConfig;
  }

  public void setEncryptionConfig(EncryptionConfig encryptionConfig) {
    this.encryptionConfig = encryptionConfig;
  }


  /**
   * The current state of encryption provisioning for this Data Lake store account.
   * @return encryptionProvisioningState
   */
  @javax.annotation.Nullable
  public EncryptionProvisioningStateEnum getEncryptionProvisioningState() {
    return encryptionProvisioningState;
  }



  public DataLakeStoreAccountProperties encryptionState(EncryptionStateEnum encryptionState) {
    this.encryptionState = encryptionState;
    return this;
  }

  /**
   * The current state of encryption for this Data Lake store account.
   * @return encryptionState
   */
  @javax.annotation.Nullable
  public EncryptionStateEnum getEncryptionState() {
    return encryptionState;
  }

  public void setEncryptionState(EncryptionStateEnum encryptionState) {
    this.encryptionState = encryptionState;
  }


  public DataLakeStoreAccountProperties endpoint(String endpoint) {
    this.endpoint = endpoint;
    return this;
  }

  /**
   * the gateway host.
   * @return endpoint
   */
  @javax.annotation.Nullable
  public String getEndpoint() {
    return endpoint;
  }

  public void setEndpoint(String endpoint) {
    this.endpoint = endpoint;
  }


  /**
   * the account last modified time.
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }



  /**
   * the status of the Data Lake Store account while being provisioned.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  /**
   * the status of the Data Lake Store account after provisioning has completed.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataLakeStoreAccountProperties dataLakeStoreAccountProperties = (DataLakeStoreAccountProperties) o;
    return Objects.equals(this.creationTime, dataLakeStoreAccountProperties.creationTime) &&
        Objects.equals(this.defaultGroup, dataLakeStoreAccountProperties.defaultGroup) &&
        Objects.equals(this.encryptionConfig, dataLakeStoreAccountProperties.encryptionConfig) &&
        Objects.equals(this.encryptionProvisioningState, dataLakeStoreAccountProperties.encryptionProvisioningState) &&
        Objects.equals(this.encryptionState, dataLakeStoreAccountProperties.encryptionState) &&
        Objects.equals(this.endpoint, dataLakeStoreAccountProperties.endpoint) &&
        Objects.equals(this.lastModifiedTime, dataLakeStoreAccountProperties.lastModifiedTime) &&
        Objects.equals(this.provisioningState, dataLakeStoreAccountProperties.provisioningState) &&
        Objects.equals(this.state, dataLakeStoreAccountProperties.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, defaultGroup, encryptionConfig, encryptionProvisioningState, encryptionState, endpoint, lastModifiedTime, provisioningState, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataLakeStoreAccountProperties {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    defaultGroup: ").append(toIndentedString(defaultGroup)).append("\n");
    sb.append("    encryptionConfig: ").append(toIndentedString(encryptionConfig)).append("\n");
    sb.append("    encryptionProvisioningState: ").append(toIndentedString(encryptionProvisioningState)).append("\n");
    sb.append("    encryptionState: ").append(toIndentedString(encryptionState)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationTime");
    openapiFields.add("defaultGroup");
    openapiFields.add("encryptionConfig");
    openapiFields.add("encryptionProvisioningState");
    openapiFields.add("encryptionState");
    openapiFields.add("endpoint");
    openapiFields.add("lastModifiedTime");
    openapiFields.add("provisioningState");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataLakeStoreAccountProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataLakeStoreAccountProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataLakeStoreAccountProperties is not found in the empty JSON string", DataLakeStoreAccountProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataLakeStoreAccountProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataLakeStoreAccountProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("defaultGroup") != null && !jsonObj.get("defaultGroup").isJsonNull()) && !jsonObj.get("defaultGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultGroup").toString()));
      }
      // validate the optional field `encryptionConfig`
      if (jsonObj.get("encryptionConfig") != null && !jsonObj.get("encryptionConfig").isJsonNull()) {
        EncryptionConfig.validateJsonElement(jsonObj.get("encryptionConfig"));
      }
      if ((jsonObj.get("encryptionProvisioningState") != null && !jsonObj.get("encryptionProvisioningState").isJsonNull()) && !jsonObj.get("encryptionProvisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionProvisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionProvisioningState").toString()));
      }
      // validate the optional field `encryptionProvisioningState`
      if (jsonObj.get("encryptionProvisioningState") != null && !jsonObj.get("encryptionProvisioningState").isJsonNull()) {
        EncryptionProvisioningStateEnum.validateJsonElement(jsonObj.get("encryptionProvisioningState"));
      }
      if ((jsonObj.get("encryptionState") != null && !jsonObj.get("encryptionState").isJsonNull()) && !jsonObj.get("encryptionState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionState").toString()));
      }
      // validate the optional field `encryptionState`
      if (jsonObj.get("encryptionState") != null && !jsonObj.get("encryptionState").isJsonNull()) {
        EncryptionStateEnum.validateJsonElement(jsonObj.get("encryptionState"));
      }
      if ((jsonObj.get("endpoint") != null && !jsonObj.get("endpoint").isJsonNull()) && !jsonObj.get("endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataLakeStoreAccountProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataLakeStoreAccountProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataLakeStoreAccountProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataLakeStoreAccountProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DataLakeStoreAccountProperties>() {
           @Override
           public void write(JsonWriter out, DataLakeStoreAccountProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataLakeStoreAccountProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataLakeStoreAccountProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataLakeStoreAccountProperties
   * @throws IOException if the JSON string is invalid with respect to DataLakeStoreAccountProperties
   */
  public static DataLakeStoreAccountProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataLakeStoreAccountProperties.class);
  }

  /**
   * Convert an instance of DataLakeStoreAccountProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

