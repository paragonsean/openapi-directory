/*
 * DataLakeStoreAccountManagementClient
 * Creates an Azure Data Lake Store account management client.
 *
 * The version of the OpenAPI document: 2015-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DataLakeStoreAccount;
import org.openapitools.client.model.DataLakeStoreAccountListResult;
import org.openapitools.client.model.DataLakeStoreFirewallRuleListResult;
import org.openapitools.client.model.FirewallRule;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accountCreate
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param name The name of the Data Lake Store account to create. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create the Data Lake Store account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountCreateCall(String resourceGroupName, String name, String apiVersion, String subscriptionId, DataLakeStoreAccount parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountCreateValidateBeforeCall(String resourceGroupName, String name, String apiVersion, String subscriptionId, DataLakeStoreAccount parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accountCreate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling accountCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountCreate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling accountCreate(Async)");
        }

        return accountCreateCall(resourceGroupName, name, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates the specified Data Lake Store account.
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param name The name of the Data Lake Store account to create. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create the Data Lake Store account. (required)
     * @return DataLakeStoreAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DataLakeStoreAccount accountCreate(String resourceGroupName, String name, String apiVersion, String subscriptionId, DataLakeStoreAccount parameters) throws ApiException {
        ApiResponse<DataLakeStoreAccount> localVarResp = accountCreateWithHttpInfo(resourceGroupName, name, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates the specified Data Lake Store account.
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param name The name of the Data Lake Store account to create. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create the Data Lake Store account. (required)
     * @return ApiResponse&lt;DataLakeStoreAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataLakeStoreAccount> accountCreateWithHttpInfo(String resourceGroupName, String name, String apiVersion, String subscriptionId, DataLakeStoreAccount parameters) throws ApiException {
        okhttp3.Call localVarCall = accountCreateValidateBeforeCall(resourceGroupName, name, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<DataLakeStoreAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates the specified Data Lake Store account.
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param name The name of the Data Lake Store account to create. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create the Data Lake Store account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountCreateAsync(String resourceGroupName, String name, String apiVersion, String subscriptionId, DataLakeStoreAccount parameters, final ApiCallback<DataLakeStoreAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountCreateValidateBeforeCall(resourceGroupName, name, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<DataLakeStoreAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountCreateOrUpdateFirewallRule
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param accountName The name of the Data Lake Store account to which to add the firewall rule. (required)
     * @param name The name of the firewall rule to create or update. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create the create firewall rule. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountCreateOrUpdateFirewallRuleCall(String resourceGroupName, String accountName, String name, String apiVersion, String subscriptionId, FirewallRule parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/firewallRules/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountCreateOrUpdateFirewallRuleValidateBeforeCall(String resourceGroupName, String accountName, String name, String apiVersion, String subscriptionId, FirewallRule parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accountCreateOrUpdateFirewallRule(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling accountCreateOrUpdateFirewallRule(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling accountCreateOrUpdateFirewallRule(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountCreateOrUpdateFirewallRule(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountCreateOrUpdateFirewallRule(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling accountCreateOrUpdateFirewallRule(Async)");
        }

        return accountCreateOrUpdateFirewallRuleCall(resourceGroupName, accountName, name, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates or updates the specified firewall rule.
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param accountName The name of the Data Lake Store account to which to add the firewall rule. (required)
     * @param name The name of the firewall rule to create or update. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create the create firewall rule. (required)
     * @return FirewallRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FirewallRule accountCreateOrUpdateFirewallRule(String resourceGroupName, String accountName, String name, String apiVersion, String subscriptionId, FirewallRule parameters) throws ApiException {
        ApiResponse<FirewallRule> localVarResp = accountCreateOrUpdateFirewallRuleWithHttpInfo(resourceGroupName, accountName, name, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates the specified firewall rule.
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param accountName The name of the Data Lake Store account to which to add the firewall rule. (required)
     * @param name The name of the firewall rule to create or update. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create the create firewall rule. (required)
     * @return ApiResponse&lt;FirewallRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallRule> accountCreateOrUpdateFirewallRuleWithHttpInfo(String resourceGroupName, String accountName, String name, String apiVersion, String subscriptionId, FirewallRule parameters) throws ApiException {
        okhttp3.Call localVarCall = accountCreateOrUpdateFirewallRuleValidateBeforeCall(resourceGroupName, accountName, name, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<FirewallRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates the specified firewall rule.
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param accountName The name of the Data Lake Store account to which to add the firewall rule. (required)
     * @param name The name of the firewall rule to create or update. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create the create firewall rule. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountCreateOrUpdateFirewallRuleAsync(String resourceGroupName, String accountName, String name, String apiVersion, String subscriptionId, FirewallRule parameters, final ApiCallback<FirewallRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountCreateOrUpdateFirewallRuleValidateBeforeCall(resourceGroupName, accountName, name, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<FirewallRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountDelete
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param accountName The name of the Data Lake Store account to delete. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountDeleteCall(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountDeleteValidateBeforeCall(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accountDelete(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling accountDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountDelete(Async)");
        }

        return accountDeleteCall(resourceGroupName, accountName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes the specified Data Lake Store account.
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param accountName The name of the Data Lake Store account to delete. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void accountDelete(String resourceGroupName, String accountName, String apiVersion, String subscriptionId) throws ApiException {
        accountDeleteWithHttpInfo(resourceGroupName, accountName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes the specified Data Lake Store account.
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param accountName The name of the Data Lake Store account to delete. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> accountDeleteWithHttpInfo(String resourceGroupName, String accountName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = accountDeleteValidateBeforeCall(resourceGroupName, accountName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified Data Lake Store account.
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param accountName The name of the Data Lake Store account to delete. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountDeleteAsync(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountDeleteValidateBeforeCall(resourceGroupName, accountName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountDeleteFirewallRule
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param accountName The name of the Data Lake Store account from which to delete the firewall rule. (required)
     * @param firewallRuleName The name of the firewall rule to delete. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountDeleteFirewallRuleCall(String resourceGroupName, String accountName, String firewallRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/firewallRules/{firewallRuleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "firewallRuleName" + "}", localVarApiClient.escapeString(firewallRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountDeleteFirewallRuleValidateBeforeCall(String resourceGroupName, String accountName, String firewallRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accountDeleteFirewallRule(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling accountDeleteFirewallRule(Async)");
        }

        // verify the required parameter 'firewallRuleName' is set
        if (firewallRuleName == null) {
            throw new ApiException("Missing the required parameter 'firewallRuleName' when calling accountDeleteFirewallRule(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountDeleteFirewallRule(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountDeleteFirewallRule(Async)");
        }

        return accountDeleteFirewallRuleCall(resourceGroupName, accountName, firewallRuleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes the specified firewall rule from the specified Data Lake Store account
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param accountName The name of the Data Lake Store account from which to delete the firewall rule. (required)
     * @param firewallRuleName The name of the firewall rule to delete. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void accountDeleteFirewallRule(String resourceGroupName, String accountName, String firewallRuleName, String apiVersion, String subscriptionId) throws ApiException {
        accountDeleteFirewallRuleWithHttpInfo(resourceGroupName, accountName, firewallRuleName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes the specified firewall rule from the specified Data Lake Store account
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param accountName The name of the Data Lake Store account from which to delete the firewall rule. (required)
     * @param firewallRuleName The name of the firewall rule to delete. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> accountDeleteFirewallRuleWithHttpInfo(String resourceGroupName, String accountName, String firewallRuleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = accountDeleteFirewallRuleValidateBeforeCall(resourceGroupName, accountName, firewallRuleName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified firewall rule from the specified Data Lake Store account
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param accountName The name of the Data Lake Store account from which to delete the firewall rule. (required)
     * @param firewallRuleName The name of the firewall rule to delete. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountDeleteFirewallRuleAsync(String resourceGroupName, String accountName, String firewallRuleName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountDeleteFirewallRuleValidateBeforeCall(resourceGroupName, accountName, firewallRuleName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountEnableKeyVault
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param accountName The name of the Data Lake Store account to attempt to enable the Key Vault for. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully enabled the user managed Key Vault for use encrypting this Data Lake Store account. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountEnableKeyVaultCall(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/enableKeyVault"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountEnableKeyVaultValidateBeforeCall(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accountEnableKeyVault(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling accountEnableKeyVault(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountEnableKeyVault(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountEnableKeyVault(Async)");
        }

        return accountEnableKeyVaultCall(resourceGroupName, accountName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Attempts to enable a user managed key vault for encryption of the specified Data Lake Store account.
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param accountName The name of the Data Lake Store account to attempt to enable the Key Vault for. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully enabled the user managed Key Vault for use encrypting this Data Lake Store account. </td><td>  -  </td></tr>
     </table>
     */
    public void accountEnableKeyVault(String resourceGroupName, String accountName, String apiVersion, String subscriptionId) throws ApiException {
        accountEnableKeyVaultWithHttpInfo(resourceGroupName, accountName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Attempts to enable a user managed key vault for encryption of the specified Data Lake Store account.
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param accountName The name of the Data Lake Store account to attempt to enable the Key Vault for. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully enabled the user managed Key Vault for use encrypting this Data Lake Store account. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> accountEnableKeyVaultWithHttpInfo(String resourceGroupName, String accountName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = accountEnableKeyVaultValidateBeforeCall(resourceGroupName, accountName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Attempts to enable a user managed key vault for encryption of the specified Data Lake Store account.
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param accountName The name of the Data Lake Store account to attempt to enable the Key Vault for. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully enabled the user managed Key Vault for use encrypting this Data Lake Store account. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountEnableKeyVaultAsync(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountEnableKeyVaultValidateBeforeCall(resourceGroupName, accountName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountGet
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param accountName The name of the Data Lake Store account to retrieve. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetCall(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountGetValidateBeforeCall(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accountGet(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling accountGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountGet(Async)");
        }

        return accountGetCall(resourceGroupName, accountName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the specified Data Lake Store account.
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param accountName The name of the Data Lake Store account to retrieve. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return DataLakeStoreAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DataLakeStoreAccount accountGet(String resourceGroupName, String accountName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<DataLakeStoreAccount> localVarResp = accountGetWithHttpInfo(resourceGroupName, accountName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the specified Data Lake Store account.
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param accountName The name of the Data Lake Store account to retrieve. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;DataLakeStoreAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataLakeStoreAccount> accountGetWithHttpInfo(String resourceGroupName, String accountName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = accountGetValidateBeforeCall(resourceGroupName, accountName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<DataLakeStoreAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the specified Data Lake Store account.
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param accountName The name of the Data Lake Store account to retrieve. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetAsync(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, final ApiCallback<DataLakeStoreAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountGetValidateBeforeCall(resourceGroupName, accountName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<DataLakeStoreAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountGetFirewallRule
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param accountName The name of the Data Lake Store account from which to get the firewall rule. (required)
     * @param firewallRuleName The name of the firewall rule to retrieve. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetFirewallRuleCall(String resourceGroupName, String accountName, String firewallRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/firewallRules/{firewallRuleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "firewallRuleName" + "}", localVarApiClient.escapeString(firewallRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountGetFirewallRuleValidateBeforeCall(String resourceGroupName, String accountName, String firewallRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accountGetFirewallRule(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling accountGetFirewallRule(Async)");
        }

        // verify the required parameter 'firewallRuleName' is set
        if (firewallRuleName == null) {
            throw new ApiException("Missing the required parameter 'firewallRuleName' when calling accountGetFirewallRule(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountGetFirewallRule(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountGetFirewallRule(Async)");
        }

        return accountGetFirewallRuleCall(resourceGroupName, accountName, firewallRuleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the specified Data Lake Store firewall rule.
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param accountName The name of the Data Lake Store account from which to get the firewall rule. (required)
     * @param firewallRuleName The name of the firewall rule to retrieve. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return FirewallRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FirewallRule accountGetFirewallRule(String resourceGroupName, String accountName, String firewallRuleName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<FirewallRule> localVarResp = accountGetFirewallRuleWithHttpInfo(resourceGroupName, accountName, firewallRuleName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the specified Data Lake Store firewall rule.
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param accountName The name of the Data Lake Store account from which to get the firewall rule. (required)
     * @param firewallRuleName The name of the firewall rule to retrieve. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;FirewallRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallRule> accountGetFirewallRuleWithHttpInfo(String resourceGroupName, String accountName, String firewallRuleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = accountGetFirewallRuleValidateBeforeCall(resourceGroupName, accountName, firewallRuleName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<FirewallRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the specified Data Lake Store firewall rule.
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param accountName The name of the Data Lake Store account from which to get the firewall rule. (required)
     * @param firewallRuleName The name of the firewall rule to retrieve. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetFirewallRuleAsync(String resourceGroupName, String accountName, String firewallRuleName, String apiVersion, String subscriptionId, final ApiCallback<FirewallRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountGetFirewallRuleValidateBeforeCall(resourceGroupName, accountName, firewallRuleName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<FirewallRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountList
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $expand OData expansion. Expand related resources in line with the retrieved resources, e.g. Categories/$expand&#x3D;Products would expand Product data in line with each Category entry. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param $search A free form search. A free-text search expression to match for whether a particular entry should be included in the feed, e.g. Categories?$search&#x3D;blue OR green. Optional. (optional)
     * @param $format The desired return format. Return the response in particular format without access to request headers for standard content-type negotiation (e.g Orders?$format&#x3D;json). Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountListCall(String apiVersion, String subscriptionId, String $filter, Integer $top, Integer $skip, String $expand, String $select, String $orderby, Boolean $count, String $search, String $format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.DataLakeStore/accounts"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        if ($search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$search", $search));
        }

        if ($format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$format", $format));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountListValidateBeforeCall(String apiVersion, String subscriptionId, String $filter, Integer $top, Integer $skip, String $expand, String $select, String $orderby, Boolean $count, String $search, String $format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountList(Async)");
        }

        return accountListCall(apiVersion, subscriptionId, $filter, $top, $skip, $expand, $select, $orderby, $count, $search, $format, _callback);

    }

    /**
     * 
     * Lists the Data Lake Store accounts within the subscription. The response includes a link to the next page of results, if any.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $expand OData expansion. Expand related resources in line with the retrieved resources, e.g. Categories/$expand&#x3D;Products would expand Product data in line with each Category entry. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param $search A free form search. A free-text search expression to match for whether a particular entry should be included in the feed, e.g. Categories?$search&#x3D;blue OR green. Optional. (optional)
     * @param $format The desired return format. Return the response in particular format without access to request headers for standard content-type negotiation (e.g Orders?$format&#x3D;json). Optional. (optional)
     * @return DataLakeStoreAccountListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DataLakeStoreAccountListResult accountList(String apiVersion, String subscriptionId, String $filter, Integer $top, Integer $skip, String $expand, String $select, String $orderby, Boolean $count, String $search, String $format) throws ApiException {
        ApiResponse<DataLakeStoreAccountListResult> localVarResp = accountListWithHttpInfo(apiVersion, subscriptionId, $filter, $top, $skip, $expand, $select, $orderby, $count, $search, $format);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the Data Lake Store accounts within the subscription. The response includes a link to the next page of results, if any.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $expand OData expansion. Expand related resources in line with the retrieved resources, e.g. Categories/$expand&#x3D;Products would expand Product data in line with each Category entry. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param $search A free form search. A free-text search expression to match for whether a particular entry should be included in the feed, e.g. Categories?$search&#x3D;blue OR green. Optional. (optional)
     * @param $format The desired return format. Return the response in particular format without access to request headers for standard content-type negotiation (e.g Orders?$format&#x3D;json). Optional. (optional)
     * @return ApiResponse&lt;DataLakeStoreAccountListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataLakeStoreAccountListResult> accountListWithHttpInfo(String apiVersion, String subscriptionId, String $filter, Integer $top, Integer $skip, String $expand, String $select, String $orderby, Boolean $count, String $search, String $format) throws ApiException {
        okhttp3.Call localVarCall = accountListValidateBeforeCall(apiVersion, subscriptionId, $filter, $top, $skip, $expand, $select, $orderby, $count, $search, $format, null);
        Type localVarReturnType = new TypeToken<DataLakeStoreAccountListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the Data Lake Store accounts within the subscription. The response includes a link to the next page of results, if any.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $expand OData expansion. Expand related resources in line with the retrieved resources, e.g. Categories/$expand&#x3D;Products would expand Product data in line with each Category entry. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param $search A free form search. A free-text search expression to match for whether a particular entry should be included in the feed, e.g. Categories?$search&#x3D;blue OR green. Optional. (optional)
     * @param $format The desired return format. Return the response in particular format without access to request headers for standard content-type negotiation (e.g Orders?$format&#x3D;json). Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountListAsync(String apiVersion, String subscriptionId, String $filter, Integer $top, Integer $skip, String $expand, String $select, String $orderby, Boolean $count, String $search, String $format, final ApiCallback<DataLakeStoreAccountListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountListValidateBeforeCall(apiVersion, subscriptionId, $filter, $top, $skip, $expand, $select, $orderby, $count, $search, $format, _callback);
        Type localVarReturnType = new TypeToken<DataLakeStoreAccountListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountListByResourceGroup
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account(s). (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $expand OData expansion. Expand related resources in line with the retrieved resources, e.g. Categories/$expand&#x3D;Products would expand Product data in line with each Category entry. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count A Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param $search A free form search. A free-text search expression to match for whether a particular entry should be included in the feed, e.g. Categories?$search&#x3D;blue OR green. Optional. (optional)
     * @param $format The desired return format. Return the response in particular format without access to request headers for standard content-type negotiation (e.g Orders?$format&#x3D;json). Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountListByResourceGroupCall(String resourceGroupName, String apiVersion, String subscriptionId, String $filter, Integer $top, Integer $skip, String $expand, String $select, String $orderby, Boolean $count, String $search, String $format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        if ($search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$search", $search));
        }

        if ($format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$format", $format));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountListByResourceGroupValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, String $filter, Integer $top, Integer $skip, String $expand, String $select, String $orderby, Boolean $count, String $search, String $format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accountListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountListByResourceGroup(Async)");
        }

        return accountListByResourceGroupCall(resourceGroupName, apiVersion, subscriptionId, $filter, $top, $skip, $expand, $select, $orderby, $count, $search, $format, _callback);

    }

    /**
     * 
     * Lists the Data Lake Store accounts within a specific resource group. The response includes a link to the next page of results, if any.
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account(s). (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $expand OData expansion. Expand related resources in line with the retrieved resources, e.g. Categories/$expand&#x3D;Products would expand Product data in line with each Category entry. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count A Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param $search A free form search. A free-text search expression to match for whether a particular entry should be included in the feed, e.g. Categories?$search&#x3D;blue OR green. Optional. (optional)
     * @param $format The desired return format. Return the response in particular format without access to request headers for standard content-type negotiation (e.g Orders?$format&#x3D;json). Optional. (optional)
     * @return DataLakeStoreAccountListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DataLakeStoreAccountListResult accountListByResourceGroup(String resourceGroupName, String apiVersion, String subscriptionId, String $filter, Integer $top, Integer $skip, String $expand, String $select, String $orderby, Boolean $count, String $search, String $format) throws ApiException {
        ApiResponse<DataLakeStoreAccountListResult> localVarResp = accountListByResourceGroupWithHttpInfo(resourceGroupName, apiVersion, subscriptionId, $filter, $top, $skip, $expand, $select, $orderby, $count, $search, $format);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the Data Lake Store accounts within a specific resource group. The response includes a link to the next page of results, if any.
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account(s). (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $expand OData expansion. Expand related resources in line with the retrieved resources, e.g. Categories/$expand&#x3D;Products would expand Product data in line with each Category entry. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count A Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param $search A free form search. A free-text search expression to match for whether a particular entry should be included in the feed, e.g. Categories?$search&#x3D;blue OR green. Optional. (optional)
     * @param $format The desired return format. Return the response in particular format without access to request headers for standard content-type negotiation (e.g Orders?$format&#x3D;json). Optional. (optional)
     * @return ApiResponse&lt;DataLakeStoreAccountListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataLakeStoreAccountListResult> accountListByResourceGroupWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId, String $filter, Integer $top, Integer $skip, String $expand, String $select, String $orderby, Boolean $count, String $search, String $format) throws ApiException {
        okhttp3.Call localVarCall = accountListByResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, $filter, $top, $skip, $expand, $select, $orderby, $count, $search, $format, null);
        Type localVarReturnType = new TypeToken<DataLakeStoreAccountListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the Data Lake Store accounts within a specific resource group. The response includes a link to the next page of results, if any.
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account(s). (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $expand OData expansion. Expand related resources in line with the retrieved resources, e.g. Categories/$expand&#x3D;Products would expand Product data in line with each Category entry. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count A Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param $search A free form search. A free-text search expression to match for whether a particular entry should be included in the feed, e.g. Categories?$search&#x3D;blue OR green. Optional. (optional)
     * @param $format The desired return format. Return the response in particular format without access to request headers for standard content-type negotiation (e.g Orders?$format&#x3D;json). Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountListByResourceGroupAsync(String resourceGroupName, String apiVersion, String subscriptionId, String $filter, Integer $top, Integer $skip, String $expand, String $select, String $orderby, Boolean $count, String $search, String $format, final ApiCallback<DataLakeStoreAccountListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountListByResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, $filter, $top, $skip, $expand, $select, $orderby, $count, $search, $format, _callback);
        Type localVarReturnType = new TypeToken<DataLakeStoreAccountListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountListFirewallRules
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param accountName The name of the Data Lake Store account from which to get the firewall rules. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountListFirewallRulesCall(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/firewallRules"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountListFirewallRulesValidateBeforeCall(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accountListFirewallRules(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling accountListFirewallRules(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountListFirewallRules(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountListFirewallRules(Async)");
        }

        return accountListFirewallRulesCall(resourceGroupName, accountName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Lists the Data Lake Store firewall rules within the specified Data Lake Store account.
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param accountName The name of the Data Lake Store account from which to get the firewall rules. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return DataLakeStoreFirewallRuleListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DataLakeStoreFirewallRuleListResult accountListFirewallRules(String resourceGroupName, String accountName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<DataLakeStoreFirewallRuleListResult> localVarResp = accountListFirewallRulesWithHttpInfo(resourceGroupName, accountName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the Data Lake Store firewall rules within the specified Data Lake Store account.
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param accountName The name of the Data Lake Store account from which to get the firewall rules. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;DataLakeStoreFirewallRuleListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataLakeStoreFirewallRuleListResult> accountListFirewallRulesWithHttpInfo(String resourceGroupName, String accountName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = accountListFirewallRulesValidateBeforeCall(resourceGroupName, accountName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<DataLakeStoreFirewallRuleListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the Data Lake Store firewall rules within the specified Data Lake Store account.
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param accountName The name of the Data Lake Store account from which to get the firewall rules. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountListFirewallRulesAsync(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, final ApiCallback<DataLakeStoreFirewallRuleListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountListFirewallRulesValidateBeforeCall(resourceGroupName, accountName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<DataLakeStoreFirewallRuleListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountUpdate
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param name The name of the Data Lake Store account to update. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to update the Data Lake Store account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountUpdateCall(String resourceGroupName, String name, String apiVersion, String subscriptionId, DataLakeStoreAccount parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountUpdateValidateBeforeCall(String resourceGroupName, String name, String apiVersion, String subscriptionId, DataLakeStoreAccount parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accountUpdate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling accountUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling accountUpdate(Async)");
        }

        return accountUpdateCall(resourceGroupName, name, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Updates the specified Data Lake Store account information.
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param name The name of the Data Lake Store account to update. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to update the Data Lake Store account. (required)
     * @return DataLakeStoreAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DataLakeStoreAccount accountUpdate(String resourceGroupName, String name, String apiVersion, String subscriptionId, DataLakeStoreAccount parameters) throws ApiException {
        ApiResponse<DataLakeStoreAccount> localVarResp = accountUpdateWithHttpInfo(resourceGroupName, name, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the specified Data Lake Store account information.
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param name The name of the Data Lake Store account to update. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to update the Data Lake Store account. (required)
     * @return ApiResponse&lt;DataLakeStoreAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataLakeStoreAccount> accountUpdateWithHttpInfo(String resourceGroupName, String name, String apiVersion, String subscriptionId, DataLakeStoreAccount parameters) throws ApiException {
        okhttp3.Call localVarCall = accountUpdateValidateBeforeCall(resourceGroupName, name, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<DataLakeStoreAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the specified Data Lake Store account information.
     * @param resourceGroupName The name of the Azure resource group that contains the Data Lake Store account. (required)
     * @param name The name of the Data Lake Store account to update. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to update the Data Lake Store account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountUpdateAsync(String resourceGroupName, String name, String apiVersion, String subscriptionId, DataLakeStoreAccount parameters, final ApiCallback<DataLakeStoreAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountUpdateValidateBeforeCall(resourceGroupName, name, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<DataLakeStoreAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
