# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CapabilityInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_count: int=None, max_account_count: int=None, migration_state: bool=None, state: str=None, subscription_id: str=None):
        """CapabilityInformation - a model defined in OpenAPI

        :param account_count: The account_count of this CapabilityInformation.
        :param max_account_count: The max_account_count of this CapabilityInformation.
        :param migration_state: The migration_state of this CapabilityInformation.
        :param state: The state of this CapabilityInformation.
        :param subscription_id: The subscription_id of this CapabilityInformation.
        """
        self.openapi_types = {
            'account_count': int,
            'max_account_count': int,
            'migration_state': bool,
            'state': str,
            'subscription_id': str
        }

        self.attribute_map = {
            'account_count': 'accountCount',
            'max_account_count': 'maxAccountCount',
            'migration_state': 'migrationState',
            'state': 'state',
            'subscription_id': 'subscriptionId'
        }

        self._account_count = account_count
        self._max_account_count = max_account_count
        self._migration_state = migration_state
        self._state = state
        self._subscription_id = subscription_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CapabilityInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CapabilityInformation of this CapabilityInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_count(self):
        """Gets the account_count of this CapabilityInformation.

        The current number of accounts under this subscription.

        :return: The account_count of this CapabilityInformation.
        :rtype: int
        """
        return self._account_count

    @account_count.setter
    def account_count(self, account_count):
        """Sets the account_count of this CapabilityInformation.

        The current number of accounts under this subscription.

        :param account_count: The account_count of this CapabilityInformation.
        :type account_count: int
        """

        self._account_count = account_count

    @property
    def max_account_count(self):
        """Gets the max_account_count of this CapabilityInformation.

        The maximum supported number of accounts under this subscription.

        :return: The max_account_count of this CapabilityInformation.
        :rtype: int
        """
        return self._max_account_count

    @max_account_count.setter
    def max_account_count(self, max_account_count):
        """Sets the max_account_count of this CapabilityInformation.

        The maximum supported number of accounts under this subscription.

        :param max_account_count: The max_account_count of this CapabilityInformation.
        :type max_account_count: int
        """

        self._max_account_count = max_account_count

    @property
    def migration_state(self):
        """Gets the migration_state of this CapabilityInformation.

        The Boolean value of true or false to indicate the maintenance state.

        :return: The migration_state of this CapabilityInformation.
        :rtype: bool
        """
        return self._migration_state

    @migration_state.setter
    def migration_state(self, migration_state):
        """Sets the migration_state of this CapabilityInformation.

        The Boolean value of true or false to indicate the maintenance state.

        :param migration_state: The migration_state of this CapabilityInformation.
        :type migration_state: bool
        """

        self._migration_state = migration_state

    @property
    def state(self):
        """Gets the state of this CapabilityInformation.

        The subscription state.

        :return: The state of this CapabilityInformation.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CapabilityInformation.

        The subscription state.

        :param state: The state of this CapabilityInformation.
        :type state: str
        """
        allowed_values = ["Registered", "Suspended", "Deleted", "Unregistered", "Warned"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def subscription_id(self):
        """Gets the subscription_id of this CapabilityInformation.

        The subscription credentials that uniquely identifies the subscription.

        :return: The subscription_id of this CapabilityInformation.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this CapabilityInformation.

        The subscription credentials that uniquely identifies the subscription.

        :param subscription_id: The subscription_id of this CapabilityInformation.
        :type subscription_id: str
        """

        self._subscription_id = subscription_id
