# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataLakeStoreAccountPropertiesBasic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, creation_time: datetime=None, endpoint: str=None, last_modified_time: datetime=None, provisioning_state: str=None, state: str=None):
        """DataLakeStoreAccountPropertiesBasic - a model defined in OpenAPI

        :param account_id: The account_id of this DataLakeStoreAccountPropertiesBasic.
        :param creation_time: The creation_time of this DataLakeStoreAccountPropertiesBasic.
        :param endpoint: The endpoint of this DataLakeStoreAccountPropertiesBasic.
        :param last_modified_time: The last_modified_time of this DataLakeStoreAccountPropertiesBasic.
        :param provisioning_state: The provisioning_state of this DataLakeStoreAccountPropertiesBasic.
        :param state: The state of this DataLakeStoreAccountPropertiesBasic.
        """
        self.openapi_types = {
            'account_id': str,
            'creation_time': datetime,
            'endpoint': str,
            'last_modified_time': datetime,
            'provisioning_state': str,
            'state': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'creation_time': 'creationTime',
            'endpoint': 'endpoint',
            'last_modified_time': 'lastModifiedTime',
            'provisioning_state': 'provisioningState',
            'state': 'state'
        }

        self._account_id = account_id
        self._creation_time = creation_time
        self._endpoint = endpoint
        self._last_modified_time = last_modified_time
        self._provisioning_state = provisioning_state
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataLakeStoreAccountPropertiesBasic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataLakeStoreAccountPropertiesBasic of this DataLakeStoreAccountPropertiesBasic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this DataLakeStoreAccountPropertiesBasic.

        The unique identifier associated with this Data Lake Store account.

        :return: The account_id of this DataLakeStoreAccountPropertiesBasic.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this DataLakeStoreAccountPropertiesBasic.

        The unique identifier associated with this Data Lake Store account.

        :param account_id: The account_id of this DataLakeStoreAccountPropertiesBasic.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def creation_time(self):
        """Gets the creation_time of this DataLakeStoreAccountPropertiesBasic.

        The account creation time.

        :return: The creation_time of this DataLakeStoreAccountPropertiesBasic.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this DataLakeStoreAccountPropertiesBasic.

        The account creation time.

        :param creation_time: The creation_time of this DataLakeStoreAccountPropertiesBasic.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def endpoint(self):
        """Gets the endpoint of this DataLakeStoreAccountPropertiesBasic.

        The full CName endpoint for this account.

        :return: The endpoint of this DataLakeStoreAccountPropertiesBasic.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this DataLakeStoreAccountPropertiesBasic.

        The full CName endpoint for this account.

        :param endpoint: The endpoint of this DataLakeStoreAccountPropertiesBasic.
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this DataLakeStoreAccountPropertiesBasic.

        The account last modified time.

        :return: The last_modified_time of this DataLakeStoreAccountPropertiesBasic.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this DataLakeStoreAccountPropertiesBasic.

        The account last modified time.

        :param last_modified_time: The last_modified_time of this DataLakeStoreAccountPropertiesBasic.
        :type last_modified_time: datetime
        """

        self._last_modified_time = last_modified_time

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this DataLakeStoreAccountPropertiesBasic.

        The provisioning status of the Data Lake Store account.

        :return: The provisioning_state of this DataLakeStoreAccountPropertiesBasic.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this DataLakeStoreAccountPropertiesBasic.

        The provisioning status of the Data Lake Store account.

        :param provisioning_state: The provisioning_state of this DataLakeStoreAccountPropertiesBasic.
        :type provisioning_state: str
        """
        allowed_values = ["Failed", "Creating", "Running", "Succeeded", "Patching", "Suspending", "Resuming", "Deleting", "Deleted", "Undeleting", "Canceled"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def state(self):
        """Gets the state of this DataLakeStoreAccountPropertiesBasic.

        The state of the Data Lake Store account.

        :return: The state of this DataLakeStoreAccountPropertiesBasic.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DataLakeStoreAccountPropertiesBasic.

        The state of the Data Lake Store account.

        :param state: The state of this DataLakeStoreAccountPropertiesBasic.
        :type state: str
        """
        allowed_values = ["Active", "Suspended"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
