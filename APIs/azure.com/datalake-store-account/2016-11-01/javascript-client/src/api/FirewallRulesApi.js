/**
 * DataLakeStoreAccountManagementClient
 * Creates an Azure Data Lake Store account management client.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateOrUpdateFirewallRuleParameters from '../model/CreateOrUpdateFirewallRuleParameters';
import FirewallRule from '../model/FirewallRule';
import FirewallRuleListResult from '../model/FirewallRuleListResult';
import UpdateFirewallRuleParameters from '../model/UpdateFirewallRuleParameters';

/**
* FirewallRules service.
* @module api/FirewallRulesApi
* @version 2016-11-01
*/
export default class FirewallRulesApi {

    /**
    * Constructs a new FirewallRulesApi. 
    * @alias module:api/FirewallRulesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the firewallRulesCreateOrUpdate operation.
     * @callback module:api/FirewallRulesApi~firewallRulesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FirewallRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates the specified firewall rule. During update, the firewall rule with the specified name will be replaced with this new firewall rule.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the Azure resource group.
     * @param {String} accountName The name of the Data Lake Store account.
     * @param {String} firewallRuleName The name of the firewall rule to create or update.
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/CreateOrUpdateFirewallRuleParameters} parameters Parameters supplied to create or update the firewall rule.
     * @param {module:api/FirewallRulesApi~firewallRulesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FirewallRule}
     */
    firewallRulesCreateOrUpdate(subscriptionId, resourceGroupName, accountName, firewallRuleName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling firewallRulesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling firewallRulesCreateOrUpdate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling firewallRulesCreateOrUpdate");
      }
      // verify the required parameter 'firewallRuleName' is set
      if (firewallRuleName === undefined || firewallRuleName === null) {
        throw new Error("Missing the required parameter 'firewallRuleName' when calling firewallRulesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling firewallRulesCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling firewallRulesCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'firewallRuleName': firewallRuleName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FirewallRule;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/firewallRules/{firewallRuleName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the firewallRulesDelete operation.
     * @callback module:api/FirewallRulesApi~firewallRulesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified firewall rule from the specified Data Lake Store account.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the Azure resource group.
     * @param {String} accountName The name of the Data Lake Store account.
     * @param {String} firewallRuleName The name of the firewall rule to delete.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/FirewallRulesApi~firewallRulesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    firewallRulesDelete(subscriptionId, resourceGroupName, accountName, firewallRuleName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling firewallRulesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling firewallRulesDelete");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling firewallRulesDelete");
      }
      // verify the required parameter 'firewallRuleName' is set
      if (firewallRuleName === undefined || firewallRuleName === null) {
        throw new Error("Missing the required parameter 'firewallRuleName' when calling firewallRulesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling firewallRulesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'firewallRuleName': firewallRuleName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/firewallRules/{firewallRuleName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the firewallRulesGet operation.
     * @callback module:api/FirewallRulesApi~firewallRulesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FirewallRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified Data Lake Store firewall rule.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the Azure resource group.
     * @param {String} accountName The name of the Data Lake Store account.
     * @param {String} firewallRuleName The name of the firewall rule to retrieve.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/FirewallRulesApi~firewallRulesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FirewallRule}
     */
    firewallRulesGet(subscriptionId, resourceGroupName, accountName, firewallRuleName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling firewallRulesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling firewallRulesGet");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling firewallRulesGet");
      }
      // verify the required parameter 'firewallRuleName' is set
      if (firewallRuleName === undefined || firewallRuleName === null) {
        throw new Error("Missing the required parameter 'firewallRuleName' when calling firewallRulesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling firewallRulesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'firewallRuleName': firewallRuleName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FirewallRule;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/firewallRules/{firewallRuleName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the firewallRulesListByAccount operation.
     * @callback module:api/FirewallRulesApi~firewallRulesListByAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FirewallRuleListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the Data Lake Store firewall rules within the specified Data Lake Store account.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the Azure resource group.
     * @param {String} accountName The name of the Data Lake Store account.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/FirewallRulesApi~firewallRulesListByAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FirewallRuleListResult}
     */
    firewallRulesListByAccount(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling firewallRulesListByAccount");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling firewallRulesListByAccount");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling firewallRulesListByAccount");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling firewallRulesListByAccount");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FirewallRuleListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/firewallRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the firewallRulesUpdate operation.
     * @callback module:api/FirewallRulesApi~firewallRulesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FirewallRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified firewall rule.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the Azure resource group.
     * @param {String} accountName The name of the Data Lake Store account.
     * @param {String} firewallRuleName The name of the firewall rule to update.
     * @param {String} apiVersion Client Api Version.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateFirewallRuleParameters} [parameters] Parameters supplied to update the firewall rule.
     * @param {module:api/FirewallRulesApi~firewallRulesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FirewallRule}
     */
    firewallRulesUpdate(subscriptionId, resourceGroupName, accountName, firewallRuleName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = opts['parameters'];
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling firewallRulesUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling firewallRulesUpdate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling firewallRulesUpdate");
      }
      // verify the required parameter 'firewallRuleName' is set
      if (firewallRuleName === undefined || firewallRuleName === null) {
        throw new Error("Missing the required parameter 'firewallRuleName' when calling firewallRulesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling firewallRulesUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'firewallRuleName': firewallRuleName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FirewallRule;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/firewallRules/{firewallRuleName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
