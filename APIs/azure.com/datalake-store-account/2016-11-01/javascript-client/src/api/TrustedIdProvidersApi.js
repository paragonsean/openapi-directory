/**
 * DataLakeStoreAccountManagementClient
 * Creates an Azure Data Lake Store account management client.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateOrUpdateTrustedIdProviderParameters from '../model/CreateOrUpdateTrustedIdProviderParameters';
import TrustedIdProvider from '../model/TrustedIdProvider';
import TrustedIdProviderListResult from '../model/TrustedIdProviderListResult';
import UpdateTrustedIdProviderParameters from '../model/UpdateTrustedIdProviderParameters';

/**
* TrustedIdProviders service.
* @module api/TrustedIdProvidersApi
* @version 2016-11-01
*/
export default class TrustedIdProvidersApi {

    /**
    * Constructs a new TrustedIdProvidersApi. 
    * @alias module:api/TrustedIdProvidersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the trustedIdProvidersCreateOrUpdate operation.
     * @callback module:api/TrustedIdProvidersApi~trustedIdProvidersCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrustedIdProvider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates the specified trusted identity provider. During update, the trusted identity provider with the specified name will be replaced with this new provider
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the Azure resource group.
     * @param {String} accountName The name of the Data Lake Store account.
     * @param {String} trustedIdProviderName The name of the trusted identity provider. This is used for differentiation of providers in the account.
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/CreateOrUpdateTrustedIdProviderParameters} parameters Parameters supplied to create or replace the trusted identity provider.
     * @param {module:api/TrustedIdProvidersApi~trustedIdProvidersCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrustedIdProvider}
     */
    trustedIdProvidersCreateOrUpdate(subscriptionId, resourceGroupName, accountName, trustedIdProviderName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling trustedIdProvidersCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling trustedIdProvidersCreateOrUpdate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling trustedIdProvidersCreateOrUpdate");
      }
      // verify the required parameter 'trustedIdProviderName' is set
      if (trustedIdProviderName === undefined || trustedIdProviderName === null) {
        throw new Error("Missing the required parameter 'trustedIdProviderName' when calling trustedIdProvidersCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling trustedIdProvidersCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling trustedIdProvidersCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'trustedIdProviderName': trustedIdProviderName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TrustedIdProvider;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders/{trustedIdProviderName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the trustedIdProvidersDelete operation.
     * @callback module:api/TrustedIdProvidersApi~trustedIdProvidersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified trusted identity provider from the specified Data Lake Store account
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the Azure resource group.
     * @param {String} accountName The name of the Data Lake Store account.
     * @param {String} trustedIdProviderName The name of the trusted identity provider to delete.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/TrustedIdProvidersApi~trustedIdProvidersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    trustedIdProvidersDelete(subscriptionId, resourceGroupName, accountName, trustedIdProviderName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling trustedIdProvidersDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling trustedIdProvidersDelete");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling trustedIdProvidersDelete");
      }
      // verify the required parameter 'trustedIdProviderName' is set
      if (trustedIdProviderName === undefined || trustedIdProviderName === null) {
        throw new Error("Missing the required parameter 'trustedIdProviderName' when calling trustedIdProvidersDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling trustedIdProvidersDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'trustedIdProviderName': trustedIdProviderName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders/{trustedIdProviderName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the trustedIdProvidersGet operation.
     * @callback module:api/TrustedIdProvidersApi~trustedIdProvidersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrustedIdProvider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified Data Lake Store trusted identity provider.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the Azure resource group.
     * @param {String} accountName The name of the Data Lake Store account.
     * @param {String} trustedIdProviderName The name of the trusted identity provider to retrieve.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/TrustedIdProvidersApi~trustedIdProvidersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrustedIdProvider}
     */
    trustedIdProvidersGet(subscriptionId, resourceGroupName, accountName, trustedIdProviderName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling trustedIdProvidersGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling trustedIdProvidersGet");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling trustedIdProvidersGet");
      }
      // verify the required parameter 'trustedIdProviderName' is set
      if (trustedIdProviderName === undefined || trustedIdProviderName === null) {
        throw new Error("Missing the required parameter 'trustedIdProviderName' when calling trustedIdProvidersGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling trustedIdProvidersGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'trustedIdProviderName': trustedIdProviderName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrustedIdProvider;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders/{trustedIdProviderName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the trustedIdProvidersListByAccount operation.
     * @callback module:api/TrustedIdProvidersApi~trustedIdProvidersListByAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrustedIdProviderListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the Data Lake Store trusted identity providers within the specified Data Lake Store account.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the Azure resource group.
     * @param {String} accountName The name of the Data Lake Store account.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/TrustedIdProvidersApi~trustedIdProvidersListByAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrustedIdProviderListResult}
     */
    trustedIdProvidersListByAccount(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling trustedIdProvidersListByAccount");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling trustedIdProvidersListByAccount");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling trustedIdProvidersListByAccount");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling trustedIdProvidersListByAccount");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrustedIdProviderListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the trustedIdProvidersUpdate operation.
     * @callback module:api/TrustedIdProvidersApi~trustedIdProvidersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrustedIdProvider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified trusted identity provider.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the Azure resource group.
     * @param {String} accountName The name of the Data Lake Store account.
     * @param {String} trustedIdProviderName The name of the trusted identity provider. This is used for differentiation of providers in the account.
     * @param {String} apiVersion Client Api Version.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateTrustedIdProviderParameters} [parameters] Parameters supplied to update the trusted identity provider.
     * @param {module:api/TrustedIdProvidersApi~trustedIdProvidersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrustedIdProvider}
     */
    trustedIdProvidersUpdate(subscriptionId, resourceGroupName, accountName, trustedIdProviderName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = opts['parameters'];
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling trustedIdProvidersUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling trustedIdProvidersUpdate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling trustedIdProvidersUpdate");
      }
      // verify the required parameter 'trustedIdProviderName' is set
      if (trustedIdProviderName === undefined || trustedIdProviderName === null) {
        throw new Error("Missing the required parameter 'trustedIdProviderName' when calling trustedIdProvidersUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling trustedIdProvidersUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'trustedIdProviderName': trustedIdProviderName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TrustedIdProvider;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders/{trustedIdProviderName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
