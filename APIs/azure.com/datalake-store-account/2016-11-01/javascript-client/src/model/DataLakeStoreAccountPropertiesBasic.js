/**
 * DataLakeStoreAccountManagementClient
 * Creates an Azure Data Lake Store account management client.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DataLakeStoreAccountPropertiesBasic model module.
 * @module model/DataLakeStoreAccountPropertiesBasic
 * @version 2016-11-01
 */
class DataLakeStoreAccountPropertiesBasic {
    /**
     * Constructs a new <code>DataLakeStoreAccountPropertiesBasic</code>.
     * The basic account specific properties that are associated with an underlying Data Lake Store account.
     * @alias module:model/DataLakeStoreAccountPropertiesBasic
     */
    constructor() { 
        
        DataLakeStoreAccountPropertiesBasic.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataLakeStoreAccountPropertiesBasic</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataLakeStoreAccountPropertiesBasic} obj Optional instance to populate.
     * @return {module:model/DataLakeStoreAccountPropertiesBasic} The populated <code>DataLakeStoreAccountPropertiesBasic</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataLakeStoreAccountPropertiesBasic();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Date');
            }
            if (data.hasOwnProperty('endpoint')) {
                obj['endpoint'] = ApiClient.convertToType(data['endpoint'], 'String');
            }
            if (data.hasOwnProperty('lastModifiedTime')) {
                obj['lastModifiedTime'] = ApiClient.convertToType(data['lastModifiedTime'], 'Date');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataLakeStoreAccountPropertiesBasic</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataLakeStoreAccountPropertiesBasic</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['endpoint'] && !(typeof data['endpoint'] === 'string' || data['endpoint'] instanceof String)) {
            throw new Error("Expected the field `endpoint` to be a primitive type in the JSON string but got " + data['endpoint']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * The unique identifier associated with this Data Lake Store account.
 * @member {String} accountId
 */
DataLakeStoreAccountPropertiesBasic.prototype['accountId'] = undefined;

/**
 * The account creation time.
 * @member {Date} creationTime
 */
DataLakeStoreAccountPropertiesBasic.prototype['creationTime'] = undefined;

/**
 * The full CName endpoint for this account.
 * @member {String} endpoint
 */
DataLakeStoreAccountPropertiesBasic.prototype['endpoint'] = undefined;

/**
 * The account last modified time.
 * @member {Date} lastModifiedTime
 */
DataLakeStoreAccountPropertiesBasic.prototype['lastModifiedTime'] = undefined;

/**
 * The provisioning status of the Data Lake Store account.
 * @member {module:model/DataLakeStoreAccountPropertiesBasic.ProvisioningStateEnum} provisioningState
 */
DataLakeStoreAccountPropertiesBasic.prototype['provisioningState'] = undefined;

/**
 * The state of the Data Lake Store account.
 * @member {module:model/DataLakeStoreAccountPropertiesBasic.StateEnum} state
 */
DataLakeStoreAccountPropertiesBasic.prototype['state'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
DataLakeStoreAccountPropertiesBasic['ProvisioningStateEnum'] = {

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Running"
     * @const
     */
    "Running": "Running",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Patching"
     * @const
     */
    "Patching": "Patching",

    /**
     * value: "Suspending"
     * @const
     */
    "Suspending": "Suspending",

    /**
     * value: "Resuming"
     * @const
     */
    "Resuming": "Resuming",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Deleted"
     * @const
     */
    "Deleted": "Deleted",

    /**
     * value: "Undeleting"
     * @const
     */
    "Undeleting": "Undeleting",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
DataLakeStoreAccountPropertiesBasic['StateEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Suspended"
     * @const
     */
    "Suspended": "Suspended"
};



export default DataLakeStoreAccountPropertiesBasic;

