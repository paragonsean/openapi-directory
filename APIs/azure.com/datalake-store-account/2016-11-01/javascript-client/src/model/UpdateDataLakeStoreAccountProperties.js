/**
 * DataLakeStoreAccountManagementClient
 * Creates an Azure Data Lake Store account management client.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UpdateEncryptionConfig from './UpdateEncryptionConfig';
import UpdateFirewallRuleWithAccountParameters from './UpdateFirewallRuleWithAccountParameters';
import UpdateTrustedIdProviderWithAccountParameters from './UpdateTrustedIdProviderWithAccountParameters';
import UpdateVirtualNetworkRuleWithAccountParameters from './UpdateVirtualNetworkRuleWithAccountParameters';

/**
 * The UpdateDataLakeStoreAccountProperties model module.
 * @module model/UpdateDataLakeStoreAccountProperties
 * @version 2016-11-01
 */
class UpdateDataLakeStoreAccountProperties {
    /**
     * Constructs a new <code>UpdateDataLakeStoreAccountProperties</code>.
     * Data Lake Store account properties information to be updated.
     * @alias module:model/UpdateDataLakeStoreAccountProperties
     */
    constructor() { 
        
        UpdateDataLakeStoreAccountProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateDataLakeStoreAccountProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateDataLakeStoreAccountProperties} obj Optional instance to populate.
     * @return {module:model/UpdateDataLakeStoreAccountProperties} The populated <code>UpdateDataLakeStoreAccountProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateDataLakeStoreAccountProperties();

            if (data.hasOwnProperty('defaultGroup')) {
                obj['defaultGroup'] = ApiClient.convertToType(data['defaultGroup'], 'String');
            }
            if (data.hasOwnProperty('encryptionConfig')) {
                obj['encryptionConfig'] = UpdateEncryptionConfig.constructFromObject(data['encryptionConfig']);
            }
            if (data.hasOwnProperty('firewallAllowAzureIps')) {
                obj['firewallAllowAzureIps'] = ApiClient.convertToType(data['firewallAllowAzureIps'], 'String');
            }
            if (data.hasOwnProperty('firewallRules')) {
                obj['firewallRules'] = ApiClient.convertToType(data['firewallRules'], [UpdateFirewallRuleWithAccountParameters]);
            }
            if (data.hasOwnProperty('firewallState')) {
                obj['firewallState'] = ApiClient.convertToType(data['firewallState'], 'String');
            }
            if (data.hasOwnProperty('newTier')) {
                obj['newTier'] = ApiClient.convertToType(data['newTier'], 'String');
            }
            if (data.hasOwnProperty('trustedIdProviderState')) {
                obj['trustedIdProviderState'] = ApiClient.convertToType(data['trustedIdProviderState'], 'String');
            }
            if (data.hasOwnProperty('trustedIdProviders')) {
                obj['trustedIdProviders'] = ApiClient.convertToType(data['trustedIdProviders'], [UpdateTrustedIdProviderWithAccountParameters]);
            }
            if (data.hasOwnProperty('virtualNetworkRules')) {
                obj['virtualNetworkRules'] = ApiClient.convertToType(data['virtualNetworkRules'], [UpdateVirtualNetworkRuleWithAccountParameters]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateDataLakeStoreAccountProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateDataLakeStoreAccountProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['defaultGroup'] && !(typeof data['defaultGroup'] === 'string' || data['defaultGroup'] instanceof String)) {
            throw new Error("Expected the field `defaultGroup` to be a primitive type in the JSON string but got " + data['defaultGroup']);
        }
        // validate the optional field `encryptionConfig`
        if (data['encryptionConfig']) { // data not null
          UpdateEncryptionConfig.validateJSON(data['encryptionConfig']);
        }
        // ensure the json data is a string
        if (data['firewallAllowAzureIps'] && !(typeof data['firewallAllowAzureIps'] === 'string' || data['firewallAllowAzureIps'] instanceof String)) {
            throw new Error("Expected the field `firewallAllowAzureIps` to be a primitive type in the JSON string but got " + data['firewallAllowAzureIps']);
        }
        if (data['firewallRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['firewallRules'])) {
                throw new Error("Expected the field `firewallRules` to be an array in the JSON data but got " + data['firewallRules']);
            }
            // validate the optional field `firewallRules` (array)
            for (const item of data['firewallRules']) {
                UpdateFirewallRuleWithAccountParameters.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['firewallState'] && !(typeof data['firewallState'] === 'string' || data['firewallState'] instanceof String)) {
            throw new Error("Expected the field `firewallState` to be a primitive type in the JSON string but got " + data['firewallState']);
        }
        // ensure the json data is a string
        if (data['newTier'] && !(typeof data['newTier'] === 'string' || data['newTier'] instanceof String)) {
            throw new Error("Expected the field `newTier` to be a primitive type in the JSON string but got " + data['newTier']);
        }
        // ensure the json data is a string
        if (data['trustedIdProviderState'] && !(typeof data['trustedIdProviderState'] === 'string' || data['trustedIdProviderState'] instanceof String)) {
            throw new Error("Expected the field `trustedIdProviderState` to be a primitive type in the JSON string but got " + data['trustedIdProviderState']);
        }
        if (data['trustedIdProviders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['trustedIdProviders'])) {
                throw new Error("Expected the field `trustedIdProviders` to be an array in the JSON data but got " + data['trustedIdProviders']);
            }
            // validate the optional field `trustedIdProviders` (array)
            for (const item of data['trustedIdProviders']) {
                UpdateTrustedIdProviderWithAccountParameters.validateJSON(item);
            };
        }
        if (data['virtualNetworkRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['virtualNetworkRules'])) {
                throw new Error("Expected the field `virtualNetworkRules` to be an array in the JSON data but got " + data['virtualNetworkRules']);
            }
            // validate the optional field `virtualNetworkRules` (array)
            for (const item of data['virtualNetworkRules']) {
                UpdateVirtualNetworkRuleWithAccountParameters.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The default owner group for all new folders and files created in the Data Lake Store account.
 * @member {String} defaultGroup
 */
UpdateDataLakeStoreAccountProperties.prototype['defaultGroup'] = undefined;

/**
 * @member {module:model/UpdateEncryptionConfig} encryptionConfig
 */
UpdateDataLakeStoreAccountProperties.prototype['encryptionConfig'] = undefined;

/**
 * The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.
 * @member {module:model/UpdateDataLakeStoreAccountProperties.FirewallAllowAzureIpsEnum} firewallAllowAzureIps
 */
UpdateDataLakeStoreAccountProperties.prototype['firewallAllowAzureIps'] = undefined;

/**
 * The list of firewall rules associated with this Data Lake Store account.
 * @member {Array.<module:model/UpdateFirewallRuleWithAccountParameters>} firewallRules
 */
UpdateDataLakeStoreAccountProperties.prototype['firewallRules'] = undefined;

/**
 * The current state of the IP address firewall for this Data Lake Store account. Disabling the firewall does not remove existing rules, they will just be ignored until the firewall is re-enabled.
 * @member {module:model/UpdateDataLakeStoreAccountProperties.FirewallStateEnum} firewallState
 */
UpdateDataLakeStoreAccountProperties.prototype['firewallState'] = undefined;

/**
 * The commitment tier to use for next month.
 * @member {module:model/UpdateDataLakeStoreAccountProperties.NewTierEnum} newTier
 */
UpdateDataLakeStoreAccountProperties.prototype['newTier'] = undefined;

/**
 * The current state of the trusted identity provider feature for this Data Lake Store account. Disabling trusted identity provider functionality does not remove the providers, they will just be ignored until this feature is re-enabled.
 * @member {module:model/UpdateDataLakeStoreAccountProperties.TrustedIdProviderStateEnum} trustedIdProviderState
 */
UpdateDataLakeStoreAccountProperties.prototype['trustedIdProviderState'] = undefined;

/**
 * The list of trusted identity providers associated with this Data Lake Store account.
 * @member {Array.<module:model/UpdateTrustedIdProviderWithAccountParameters>} trustedIdProviders
 */
UpdateDataLakeStoreAccountProperties.prototype['trustedIdProviders'] = undefined;

/**
 * The list of virtual network rules associated with this Data Lake Store account.
 * @member {Array.<module:model/UpdateVirtualNetworkRuleWithAccountParameters>} virtualNetworkRules
 */
UpdateDataLakeStoreAccountProperties.prototype['virtualNetworkRules'] = undefined;





/**
 * Allowed values for the <code>firewallAllowAzureIps</code> property.
 * @enum {String}
 * @readonly
 */
UpdateDataLakeStoreAccountProperties['FirewallAllowAzureIpsEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};


/**
 * Allowed values for the <code>firewallState</code> property.
 * @enum {String}
 * @readonly
 */
UpdateDataLakeStoreAccountProperties['FirewallStateEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};


/**
 * Allowed values for the <code>newTier</code> property.
 * @enum {String}
 * @readonly
 */
UpdateDataLakeStoreAccountProperties['NewTierEnum'] = {

    /**
     * value: "Consumption"
     * @const
     */
    "Consumption": "Consumption",

    /**
     * value: "Commitment_1TB"
     * @const
     */
    "Commitment_1TB": "Commitment_1TB",

    /**
     * value: "Commitment_10TB"
     * @const
     */
    "Commitment_10TB": "Commitment_10TB",

    /**
     * value: "Commitment_100TB"
     * @const
     */
    "Commitment_100TB": "Commitment_100TB",

    /**
     * value: "Commitment_500TB"
     * @const
     */
    "Commitment_500TB": "Commitment_500TB",

    /**
     * value: "Commitment_1PB"
     * @const
     */
    "Commitment_1PB": "Commitment_1PB",

    /**
     * value: "Commitment_5PB"
     * @const
     */
    "Commitment_5PB": "Commitment_5PB"
};


/**
 * Allowed values for the <code>trustedIdProviderState</code> property.
 * @enum {String}
 * @readonly
 */
UpdateDataLakeStoreAccountProperties['TrustedIdProviderStateEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default UpdateDataLakeStoreAccountProperties;

