/**
 * DataLakeStoreAccountManagementClient
 * Creates an Azure Data Lake Store account management client.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateFirewallRuleWithAccountParameters from './CreateFirewallRuleWithAccountParameters';
import CreateTrustedIdProviderWithAccountParameters from './CreateTrustedIdProviderWithAccountParameters';
import CreateVirtualNetworkRuleWithAccountParameters from './CreateVirtualNetworkRuleWithAccountParameters';
import EncryptionConfig from './EncryptionConfig';

/**
 * The CreateDataLakeStoreAccountProperties model module.
 * @module model/CreateDataLakeStoreAccountProperties
 * @version 2016-11-01
 */
class CreateDataLakeStoreAccountProperties {
    /**
     * Constructs a new <code>CreateDataLakeStoreAccountProperties</code>.
     * @alias module:model/CreateDataLakeStoreAccountProperties
     */
    constructor() { 
        
        CreateDataLakeStoreAccountProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateDataLakeStoreAccountProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateDataLakeStoreAccountProperties} obj Optional instance to populate.
     * @return {module:model/CreateDataLakeStoreAccountProperties} The populated <code>CreateDataLakeStoreAccountProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateDataLakeStoreAccountProperties();

            if (data.hasOwnProperty('defaultGroup')) {
                obj['defaultGroup'] = ApiClient.convertToType(data['defaultGroup'], 'String');
            }
            if (data.hasOwnProperty('encryptionConfig')) {
                obj['encryptionConfig'] = EncryptionConfig.constructFromObject(data['encryptionConfig']);
            }
            if (data.hasOwnProperty('encryptionState')) {
                obj['encryptionState'] = ApiClient.convertToType(data['encryptionState'], 'String');
            }
            if (data.hasOwnProperty('firewallAllowAzureIps')) {
                obj['firewallAllowAzureIps'] = ApiClient.convertToType(data['firewallAllowAzureIps'], 'String');
            }
            if (data.hasOwnProperty('firewallRules')) {
                obj['firewallRules'] = ApiClient.convertToType(data['firewallRules'], [CreateFirewallRuleWithAccountParameters]);
            }
            if (data.hasOwnProperty('firewallState')) {
                obj['firewallState'] = ApiClient.convertToType(data['firewallState'], 'String');
            }
            if (data.hasOwnProperty('newTier')) {
                obj['newTier'] = ApiClient.convertToType(data['newTier'], 'String');
            }
            if (data.hasOwnProperty('trustedIdProviderState')) {
                obj['trustedIdProviderState'] = ApiClient.convertToType(data['trustedIdProviderState'], 'String');
            }
            if (data.hasOwnProperty('trustedIdProviders')) {
                obj['trustedIdProviders'] = ApiClient.convertToType(data['trustedIdProviders'], [CreateTrustedIdProviderWithAccountParameters]);
            }
            if (data.hasOwnProperty('virtualNetworkRules')) {
                obj['virtualNetworkRules'] = ApiClient.convertToType(data['virtualNetworkRules'], [CreateVirtualNetworkRuleWithAccountParameters]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateDataLakeStoreAccountProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateDataLakeStoreAccountProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['defaultGroup'] && !(typeof data['defaultGroup'] === 'string' || data['defaultGroup'] instanceof String)) {
            throw new Error("Expected the field `defaultGroup` to be a primitive type in the JSON string but got " + data['defaultGroup']);
        }
        // validate the optional field `encryptionConfig`
        if (data['encryptionConfig']) { // data not null
          EncryptionConfig.validateJSON(data['encryptionConfig']);
        }
        // ensure the json data is a string
        if (data['encryptionState'] && !(typeof data['encryptionState'] === 'string' || data['encryptionState'] instanceof String)) {
            throw new Error("Expected the field `encryptionState` to be a primitive type in the JSON string but got " + data['encryptionState']);
        }
        // ensure the json data is a string
        if (data['firewallAllowAzureIps'] && !(typeof data['firewallAllowAzureIps'] === 'string' || data['firewallAllowAzureIps'] instanceof String)) {
            throw new Error("Expected the field `firewallAllowAzureIps` to be a primitive type in the JSON string but got " + data['firewallAllowAzureIps']);
        }
        if (data['firewallRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['firewallRules'])) {
                throw new Error("Expected the field `firewallRules` to be an array in the JSON data but got " + data['firewallRules']);
            }
            // validate the optional field `firewallRules` (array)
            for (const item of data['firewallRules']) {
                CreateFirewallRuleWithAccountParameters.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['firewallState'] && !(typeof data['firewallState'] === 'string' || data['firewallState'] instanceof String)) {
            throw new Error("Expected the field `firewallState` to be a primitive type in the JSON string but got " + data['firewallState']);
        }
        // ensure the json data is a string
        if (data['newTier'] && !(typeof data['newTier'] === 'string' || data['newTier'] instanceof String)) {
            throw new Error("Expected the field `newTier` to be a primitive type in the JSON string but got " + data['newTier']);
        }
        // ensure the json data is a string
        if (data['trustedIdProviderState'] && !(typeof data['trustedIdProviderState'] === 'string' || data['trustedIdProviderState'] instanceof String)) {
            throw new Error("Expected the field `trustedIdProviderState` to be a primitive type in the JSON string but got " + data['trustedIdProviderState']);
        }
        if (data['trustedIdProviders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['trustedIdProviders'])) {
                throw new Error("Expected the field `trustedIdProviders` to be an array in the JSON data but got " + data['trustedIdProviders']);
            }
            // validate the optional field `trustedIdProviders` (array)
            for (const item of data['trustedIdProviders']) {
                CreateTrustedIdProviderWithAccountParameters.validateJSON(item);
            };
        }
        if (data['virtualNetworkRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['virtualNetworkRules'])) {
                throw new Error("Expected the field `virtualNetworkRules` to be an array in the JSON data but got " + data['virtualNetworkRules']);
            }
            // validate the optional field `virtualNetworkRules` (array)
            for (const item of data['virtualNetworkRules']) {
                CreateVirtualNetworkRuleWithAccountParameters.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The default owner group for all new folders and files created in the Data Lake Store account.
 * @member {String} defaultGroup
 */
CreateDataLakeStoreAccountProperties.prototype['defaultGroup'] = undefined;

/**
 * @member {module:model/EncryptionConfig} encryptionConfig
 */
CreateDataLakeStoreAccountProperties.prototype['encryptionConfig'] = undefined;

/**
 * The current state of encryption for this Data Lake Store account.
 * @member {module:model/CreateDataLakeStoreAccountProperties.EncryptionStateEnum} encryptionState
 */
CreateDataLakeStoreAccountProperties.prototype['encryptionState'] = undefined;

/**
 * The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.
 * @member {module:model/CreateDataLakeStoreAccountProperties.FirewallAllowAzureIpsEnum} firewallAllowAzureIps
 */
CreateDataLakeStoreAccountProperties.prototype['firewallAllowAzureIps'] = undefined;

/**
 * The list of firewall rules associated with this Data Lake Store account.
 * @member {Array.<module:model/CreateFirewallRuleWithAccountParameters>} firewallRules
 */
CreateDataLakeStoreAccountProperties.prototype['firewallRules'] = undefined;

/**
 * The current state of the IP address firewall for this Data Lake Store account.
 * @member {module:model/CreateDataLakeStoreAccountProperties.FirewallStateEnum} firewallState
 */
CreateDataLakeStoreAccountProperties.prototype['firewallState'] = undefined;

/**
 * The commitment tier to use for next month.
 * @member {module:model/CreateDataLakeStoreAccountProperties.NewTierEnum} newTier
 */
CreateDataLakeStoreAccountProperties.prototype['newTier'] = undefined;

/**
 * The current state of the trusted identity provider feature for this Data Lake Store account.
 * @member {module:model/CreateDataLakeStoreAccountProperties.TrustedIdProviderStateEnum} trustedIdProviderState
 */
CreateDataLakeStoreAccountProperties.prototype['trustedIdProviderState'] = undefined;

/**
 * The list of trusted identity providers associated with this Data Lake Store account.
 * @member {Array.<module:model/CreateTrustedIdProviderWithAccountParameters>} trustedIdProviders
 */
CreateDataLakeStoreAccountProperties.prototype['trustedIdProviders'] = undefined;

/**
 * The list of virtual network rules associated with this Data Lake Store account.
 * @member {Array.<module:model/CreateVirtualNetworkRuleWithAccountParameters>} virtualNetworkRules
 */
CreateDataLakeStoreAccountProperties.prototype['virtualNetworkRules'] = undefined;





/**
 * Allowed values for the <code>encryptionState</code> property.
 * @enum {String}
 * @readonly
 */
CreateDataLakeStoreAccountProperties['EncryptionStateEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};


/**
 * Allowed values for the <code>firewallAllowAzureIps</code> property.
 * @enum {String}
 * @readonly
 */
CreateDataLakeStoreAccountProperties['FirewallAllowAzureIpsEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};


/**
 * Allowed values for the <code>firewallState</code> property.
 * @enum {String}
 * @readonly
 */
CreateDataLakeStoreAccountProperties['FirewallStateEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};


/**
 * Allowed values for the <code>newTier</code> property.
 * @enum {String}
 * @readonly
 */
CreateDataLakeStoreAccountProperties['NewTierEnum'] = {

    /**
     * value: "Consumption"
     * @const
     */
    "Consumption": "Consumption",

    /**
     * value: "Commitment_1TB"
     * @const
     */
    "Commitment_1TB": "Commitment_1TB",

    /**
     * value: "Commitment_10TB"
     * @const
     */
    "Commitment_10TB": "Commitment_10TB",

    /**
     * value: "Commitment_100TB"
     * @const
     */
    "Commitment_100TB": "Commitment_100TB",

    /**
     * value: "Commitment_500TB"
     * @const
     */
    "Commitment_500TB": "Commitment_500TB",

    /**
     * value: "Commitment_1PB"
     * @const
     */
    "Commitment_1PB": "Commitment_1PB",

    /**
     * value: "Commitment_5PB"
     * @const
     */
    "Commitment_5PB": "Commitment_5PB"
};


/**
 * Allowed values for the <code>trustedIdProviderState</code> property.
 * @enum {String}
 * @readonly
 */
CreateDataLakeStoreAccountProperties['TrustedIdProviderStateEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default CreateDataLakeStoreAccountProperties;

