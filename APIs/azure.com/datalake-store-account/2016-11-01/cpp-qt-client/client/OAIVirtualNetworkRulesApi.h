/**
 * DataLakeStoreAccountManagementClient
 * Creates an Azure Data Lake Store account management client.
 *
 * The version of the OpenAPI document: 2016-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVirtualNetworkRulesApi_H
#define OAI_OAIVirtualNetworkRulesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateOrUpdateVirtualNetworkRuleParameters.h"
#include "OAIUpdateVirtualNetworkRuleParameters.h"
#include "OAIVirtualNetworkRule.h"
#include "OAIVirtualNetworkRuleListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVirtualNetworkRulesApi : public QObject {
    Q_OBJECT

public:
    OAIVirtualNetworkRulesApi(const int timeOut = 0);
    ~OAIVirtualNetworkRulesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  virtual_network_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAICreateOrUpdateVirtualNetworkRuleParameters [required]
    */
    virtual void virtualNetworkRulesCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &virtual_network_rule_name, const QString &api_version, const OAICreateOrUpdateVirtualNetworkRuleParameters &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  virtual_network_rule_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualNetworkRulesDelete(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &virtual_network_rule_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  virtual_network_rule_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualNetworkRulesGet(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &virtual_network_rule_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualNetworkRulesListByAccount(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  virtual_network_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIUpdateVirtualNetworkRuleParameters [optional]
    */
    virtual void virtualNetworkRulesUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &virtual_network_rule_name, const QString &api_version, const ::OpenAPI::OptionalParam<OAIUpdateVirtualNetworkRuleParameters> &parameters = ::OpenAPI::OptionalParam<OAIUpdateVirtualNetworkRuleParameters>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void virtualNetworkRulesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkRulesDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkRulesGetCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkRulesListByAccountCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkRulesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void virtualNetworkRulesCreateOrUpdateSignal(OAIVirtualNetworkRule summary);
    void virtualNetworkRulesDeleteSignal();
    void virtualNetworkRulesGetSignal(OAIVirtualNetworkRule summary);
    void virtualNetworkRulesListByAccountSignal(OAIVirtualNetworkRuleListResult summary);
    void virtualNetworkRulesUpdateSignal(OAIVirtualNetworkRule summary);


    void virtualNetworkRulesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetworkRule summary);
    void virtualNetworkRulesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualNetworkRulesGetSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetworkRule summary);
    void virtualNetworkRulesListByAccountSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetworkRuleListResult summary);
    void virtualNetworkRulesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetworkRule summary);

    Q_DECL_DEPRECATED_X("Use virtualNetworkRulesCreateOrUpdateSignalError() instead")
    void virtualNetworkRulesCreateOrUpdateSignalE(OAIVirtualNetworkRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkRulesCreateOrUpdateSignalError(OAIVirtualNetworkRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkRulesDeleteSignalError() instead")
    void virtualNetworkRulesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkRulesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkRulesGetSignalError() instead")
    void virtualNetworkRulesGetSignalE(OAIVirtualNetworkRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkRulesGetSignalError(OAIVirtualNetworkRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkRulesListByAccountSignalError() instead")
    void virtualNetworkRulesListByAccountSignalE(OAIVirtualNetworkRuleListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkRulesListByAccountSignalError(OAIVirtualNetworkRuleListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkRulesUpdateSignalError() instead")
    void virtualNetworkRulesUpdateSignalE(OAIVirtualNetworkRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkRulesUpdateSignalError(OAIVirtualNetworkRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use virtualNetworkRulesCreateOrUpdateSignalErrorFull() instead")
    void virtualNetworkRulesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkRulesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkRulesDeleteSignalErrorFull() instead")
    void virtualNetworkRulesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkRulesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkRulesGetSignalErrorFull() instead")
    void virtualNetworkRulesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkRulesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkRulesListByAccountSignalErrorFull() instead")
    void virtualNetworkRulesListByAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkRulesListByAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkRulesUpdateSignalErrorFull() instead")
    void virtualNetworkRulesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkRulesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
