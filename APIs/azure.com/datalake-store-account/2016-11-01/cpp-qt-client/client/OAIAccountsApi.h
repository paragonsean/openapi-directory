/**
 * DataLakeStoreAccountManagementClient
 * Creates an Azure Data Lake Store account management client.
 *
 * The version of the OpenAPI document: 2016-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountsApi_H
#define OAI_OAIAccountsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICheckNameAvailabilityParameters.h"
#include "OAICreateDataLakeStoreAccountParameters.h"
#include "OAIDataLakeStoreAccount.h"
#include "OAIDataLakeStoreAccountListResult.h"
#include "OAINameAvailabilityInformation.h"
#include "OAIUpdateDataLakeStoreAccountParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountsApi : public QObject {
    Q_OBJECT

public:
    OAIAccountsApi(const int timeOut = 0);
    ~OAIAccountsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAICheckNameAvailabilityParameters [required]
    */
    virtual void accountsCheckNameAvailability(const QString &subscription_id, const QString &location, const QString &api_version, const OAICheckNameAvailabilityParameters &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAICreateDataLakeStoreAccountParameters [required]
    */
    virtual void accountsCreate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const OAICreateDataLakeStoreAccountParameters &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void accountsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void accountsEnableKeyVault(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void accountsGet(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  select QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  count bool [optional]
    */
    virtual void accountsList(const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  select QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  count bool [optional]
    */
    virtual void accountsListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIUpdateDataLakeStoreAccountParameters [required]
    */
    virtual void accountsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const OAIUpdateDataLakeStoreAccountParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void accountsCheckNameAvailabilityCallback(OAIHttpRequestWorker *worker);
    void accountsCreateCallback(OAIHttpRequestWorker *worker);
    void accountsDeleteCallback(OAIHttpRequestWorker *worker);
    void accountsEnableKeyVaultCallback(OAIHttpRequestWorker *worker);
    void accountsGetCallback(OAIHttpRequestWorker *worker);
    void accountsListCallback(OAIHttpRequestWorker *worker);
    void accountsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void accountsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void accountsCheckNameAvailabilitySignal(OAINameAvailabilityInformation summary);
    void accountsCreateSignal(OAIDataLakeStoreAccount summary);
    void accountsDeleteSignal();
    void accountsEnableKeyVaultSignal();
    void accountsGetSignal(OAIDataLakeStoreAccount summary);
    void accountsListSignal(OAIDataLakeStoreAccountListResult summary);
    void accountsListByResourceGroupSignal(OAIDataLakeStoreAccountListResult summary);
    void accountsUpdateSignal(OAIDataLakeStoreAccount summary);


    void accountsCheckNameAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAINameAvailabilityInformation summary);
    void accountsCreateSignalFull(OAIHttpRequestWorker *worker, OAIDataLakeStoreAccount summary);
    void accountsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void accountsEnableKeyVaultSignalFull(OAIHttpRequestWorker *worker);
    void accountsGetSignalFull(OAIHttpRequestWorker *worker, OAIDataLakeStoreAccount summary);
    void accountsListSignalFull(OAIHttpRequestWorker *worker, OAIDataLakeStoreAccountListResult summary);
    void accountsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIDataLakeStoreAccountListResult summary);
    void accountsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDataLakeStoreAccount summary);

    Q_DECL_DEPRECATED_X("Use accountsCheckNameAvailabilitySignalError() instead")
    void accountsCheckNameAvailabilitySignalE(OAINameAvailabilityInformation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsCheckNameAvailabilitySignalError(OAINameAvailabilityInformation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsCreateSignalError() instead")
    void accountsCreateSignalE(OAIDataLakeStoreAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsCreateSignalError(OAIDataLakeStoreAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsDeleteSignalError() instead")
    void accountsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void accountsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsEnableKeyVaultSignalError() instead")
    void accountsEnableKeyVaultSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void accountsEnableKeyVaultSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsGetSignalError() instead")
    void accountsGetSignalE(OAIDataLakeStoreAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsGetSignalError(OAIDataLakeStoreAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsListSignalError() instead")
    void accountsListSignalE(OAIDataLakeStoreAccountListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsListSignalError(OAIDataLakeStoreAccountListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsListByResourceGroupSignalError() instead")
    void accountsListByResourceGroupSignalE(OAIDataLakeStoreAccountListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsListByResourceGroupSignalError(OAIDataLakeStoreAccountListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsUpdateSignalError() instead")
    void accountsUpdateSignalE(OAIDataLakeStoreAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsUpdateSignalError(OAIDataLakeStoreAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use accountsCheckNameAvailabilitySignalErrorFull() instead")
    void accountsCheckNameAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsCheckNameAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsCreateSignalErrorFull() instead")
    void accountsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsDeleteSignalErrorFull() instead")
    void accountsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsEnableKeyVaultSignalErrorFull() instead")
    void accountsEnableKeyVaultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsEnableKeyVaultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsGetSignalErrorFull() instead")
    void accountsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsListSignalErrorFull() instead")
    void accountsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsListByResourceGroupSignalErrorFull() instead")
    void accountsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsUpdateSignalErrorFull() instead")
    void accountsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
