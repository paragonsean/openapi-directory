/**
 * DataLakeStoreAccountManagementClient
 * Creates an Azure Data Lake Store account management client.
 *
 * The version of the OpenAPI document: 2016-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITrustedIdProvidersApi_H
#define OAI_OAITrustedIdProvidersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateOrUpdateTrustedIdProviderParameters.h"
#include "OAITrustedIdProvider.h"
#include "OAITrustedIdProviderListResult.h"
#include "OAIUpdateTrustedIdProviderParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITrustedIdProvidersApi : public QObject {
    Q_OBJECT

public:
    OAITrustedIdProvidersApi(const int timeOut = 0);
    ~OAITrustedIdProvidersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  trusted_id_provider_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAICreateOrUpdateTrustedIdProviderParameters [required]
    */
    virtual void trustedIdProvidersCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &trusted_id_provider_name, const QString &api_version, const OAICreateOrUpdateTrustedIdProviderParameters &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  trusted_id_provider_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void trustedIdProvidersDelete(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &trusted_id_provider_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  trusted_id_provider_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void trustedIdProvidersGet(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &trusted_id_provider_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void trustedIdProvidersListByAccount(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  trusted_id_provider_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIUpdateTrustedIdProviderParameters [optional]
    */
    virtual void trustedIdProvidersUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &trusted_id_provider_name, const QString &api_version, const ::OpenAPI::OptionalParam<OAIUpdateTrustedIdProviderParameters> &parameters = ::OpenAPI::OptionalParam<OAIUpdateTrustedIdProviderParameters>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void trustedIdProvidersCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void trustedIdProvidersDeleteCallback(OAIHttpRequestWorker *worker);
    void trustedIdProvidersGetCallback(OAIHttpRequestWorker *worker);
    void trustedIdProvidersListByAccountCallback(OAIHttpRequestWorker *worker);
    void trustedIdProvidersUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void trustedIdProvidersCreateOrUpdateSignal(OAITrustedIdProvider summary);
    void trustedIdProvidersDeleteSignal();
    void trustedIdProvidersGetSignal(OAITrustedIdProvider summary);
    void trustedIdProvidersListByAccountSignal(OAITrustedIdProviderListResult summary);
    void trustedIdProvidersUpdateSignal(OAITrustedIdProvider summary);


    void trustedIdProvidersCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAITrustedIdProvider summary);
    void trustedIdProvidersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void trustedIdProvidersGetSignalFull(OAIHttpRequestWorker *worker, OAITrustedIdProvider summary);
    void trustedIdProvidersListByAccountSignalFull(OAIHttpRequestWorker *worker, OAITrustedIdProviderListResult summary);
    void trustedIdProvidersUpdateSignalFull(OAIHttpRequestWorker *worker, OAITrustedIdProvider summary);

    Q_DECL_DEPRECATED_X("Use trustedIdProvidersCreateOrUpdateSignalError() instead")
    void trustedIdProvidersCreateOrUpdateSignalE(OAITrustedIdProvider summary, QNetworkReply::NetworkError error_type, QString error_str);
    void trustedIdProvidersCreateOrUpdateSignalError(OAITrustedIdProvider summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trustedIdProvidersDeleteSignalError() instead")
    void trustedIdProvidersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void trustedIdProvidersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trustedIdProvidersGetSignalError() instead")
    void trustedIdProvidersGetSignalE(OAITrustedIdProvider summary, QNetworkReply::NetworkError error_type, QString error_str);
    void trustedIdProvidersGetSignalError(OAITrustedIdProvider summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trustedIdProvidersListByAccountSignalError() instead")
    void trustedIdProvidersListByAccountSignalE(OAITrustedIdProviderListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void trustedIdProvidersListByAccountSignalError(OAITrustedIdProviderListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trustedIdProvidersUpdateSignalError() instead")
    void trustedIdProvidersUpdateSignalE(OAITrustedIdProvider summary, QNetworkReply::NetworkError error_type, QString error_str);
    void trustedIdProvidersUpdateSignalError(OAITrustedIdProvider summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use trustedIdProvidersCreateOrUpdateSignalErrorFull() instead")
    void trustedIdProvidersCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void trustedIdProvidersCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trustedIdProvidersDeleteSignalErrorFull() instead")
    void trustedIdProvidersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void trustedIdProvidersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trustedIdProvidersGetSignalErrorFull() instead")
    void trustedIdProvidersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void trustedIdProvidersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trustedIdProvidersListByAccountSignalErrorFull() instead")
    void trustedIdProvidersListByAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void trustedIdProvidersListByAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trustedIdProvidersUpdateSignalErrorFull() instead")
    void trustedIdProvidersUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void trustedIdProvidersUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
