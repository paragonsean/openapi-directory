/**
 * DataLakeStoreAccountManagementClient
 * Creates an Azure Data Lake Store account management client.
 *
 * The version of the OpenAPI document: 2016-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataLakeStoreAccountProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataLakeStoreAccountProperties::OAIDataLakeStoreAccountProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataLakeStoreAccountProperties::OAIDataLakeStoreAccountProperties() {
    this->initializeModel();
}

OAIDataLakeStoreAccountProperties::~OAIDataLakeStoreAccountProperties() {}

void OAIDataLakeStoreAccountProperties::initializeModel() {

    m_current_tier_isSet = false;
    m_current_tier_isValid = false;

    m_default_group_isSet = false;
    m_default_group_isValid = false;

    m_encryption_config_isSet = false;
    m_encryption_config_isValid = false;

    m_encryption_provisioning_state_isSet = false;
    m_encryption_provisioning_state_isValid = false;

    m_encryption_state_isSet = false;
    m_encryption_state_isValid = false;

    m_firewall_allow_azure_ips_isSet = false;
    m_firewall_allow_azure_ips_isValid = false;

    m_firewall_rules_isSet = false;
    m_firewall_rules_isValid = false;

    m_firewall_state_isSet = false;
    m_firewall_state_isValid = false;

    m_new_tier_isSet = false;
    m_new_tier_isValid = false;

    m_trusted_id_provider_state_isSet = false;
    m_trusted_id_provider_state_isValid = false;

    m_trusted_id_providers_isSet = false;
    m_trusted_id_providers_isValid = false;

    m_virtual_network_rules_isSet = false;
    m_virtual_network_rules_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIDataLakeStoreAccountProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataLakeStoreAccountProperties::fromJsonObject(QJsonObject json) {

    m_current_tier_isValid = ::OpenAPI::fromJsonValue(m_current_tier, json[QString("currentTier")]);
    m_current_tier_isSet = !json[QString("currentTier")].isNull() && m_current_tier_isValid;

    m_default_group_isValid = ::OpenAPI::fromJsonValue(m_default_group, json[QString("defaultGroup")]);
    m_default_group_isSet = !json[QString("defaultGroup")].isNull() && m_default_group_isValid;

    m_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_encryption_config, json[QString("encryptionConfig")]);
    m_encryption_config_isSet = !json[QString("encryptionConfig")].isNull() && m_encryption_config_isValid;

    m_encryption_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_encryption_provisioning_state, json[QString("encryptionProvisioningState")]);
    m_encryption_provisioning_state_isSet = !json[QString("encryptionProvisioningState")].isNull() && m_encryption_provisioning_state_isValid;

    m_encryption_state_isValid = ::OpenAPI::fromJsonValue(m_encryption_state, json[QString("encryptionState")]);
    m_encryption_state_isSet = !json[QString("encryptionState")].isNull() && m_encryption_state_isValid;

    m_firewall_allow_azure_ips_isValid = ::OpenAPI::fromJsonValue(m_firewall_allow_azure_ips, json[QString("firewallAllowAzureIps")]);
    m_firewall_allow_azure_ips_isSet = !json[QString("firewallAllowAzureIps")].isNull() && m_firewall_allow_azure_ips_isValid;

    m_firewall_rules_isValid = ::OpenAPI::fromJsonValue(m_firewall_rules, json[QString("firewallRules")]);
    m_firewall_rules_isSet = !json[QString("firewallRules")].isNull() && m_firewall_rules_isValid;

    m_firewall_state_isValid = ::OpenAPI::fromJsonValue(m_firewall_state, json[QString("firewallState")]);
    m_firewall_state_isSet = !json[QString("firewallState")].isNull() && m_firewall_state_isValid;

    m_new_tier_isValid = ::OpenAPI::fromJsonValue(m_new_tier, json[QString("newTier")]);
    m_new_tier_isSet = !json[QString("newTier")].isNull() && m_new_tier_isValid;

    m_trusted_id_provider_state_isValid = ::OpenAPI::fromJsonValue(m_trusted_id_provider_state, json[QString("trustedIdProviderState")]);
    m_trusted_id_provider_state_isSet = !json[QString("trustedIdProviderState")].isNull() && m_trusted_id_provider_state_isValid;

    m_trusted_id_providers_isValid = ::OpenAPI::fromJsonValue(m_trusted_id_providers, json[QString("trustedIdProviders")]);
    m_trusted_id_providers_isSet = !json[QString("trustedIdProviders")].isNull() && m_trusted_id_providers_isValid;

    m_virtual_network_rules_isValid = ::OpenAPI::fromJsonValue(m_virtual_network_rules, json[QString("virtualNetworkRules")]);
    m_virtual_network_rules_isSet = !json[QString("virtualNetworkRules")].isNull() && m_virtual_network_rules_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("lastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("lastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIDataLakeStoreAccountProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataLakeStoreAccountProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_current_tier_isSet) {
        obj.insert(QString("currentTier"), ::OpenAPI::toJsonValue(m_current_tier));
    }
    if (m_default_group_isSet) {
        obj.insert(QString("defaultGroup"), ::OpenAPI::toJsonValue(m_default_group));
    }
    if (m_encryption_config.isSet()) {
        obj.insert(QString("encryptionConfig"), ::OpenAPI::toJsonValue(m_encryption_config));
    }
    if (m_encryption_provisioning_state_isSet) {
        obj.insert(QString("encryptionProvisioningState"), ::OpenAPI::toJsonValue(m_encryption_provisioning_state));
    }
    if (m_encryption_state_isSet) {
        obj.insert(QString("encryptionState"), ::OpenAPI::toJsonValue(m_encryption_state));
    }
    if (m_firewall_allow_azure_ips_isSet) {
        obj.insert(QString("firewallAllowAzureIps"), ::OpenAPI::toJsonValue(m_firewall_allow_azure_ips));
    }
    if (m_firewall_rules.size() > 0) {
        obj.insert(QString("firewallRules"), ::OpenAPI::toJsonValue(m_firewall_rules));
    }
    if (m_firewall_state_isSet) {
        obj.insert(QString("firewallState"), ::OpenAPI::toJsonValue(m_firewall_state));
    }
    if (m_new_tier_isSet) {
        obj.insert(QString("newTier"), ::OpenAPI::toJsonValue(m_new_tier));
    }
    if (m_trusted_id_provider_state_isSet) {
        obj.insert(QString("trustedIdProviderState"), ::OpenAPI::toJsonValue(m_trusted_id_provider_state));
    }
    if (m_trusted_id_providers.size() > 0) {
        obj.insert(QString("trustedIdProviders"), ::OpenAPI::toJsonValue(m_trusted_id_providers));
    }
    if (m_virtual_network_rules.size() > 0) {
        obj.insert(QString("virtualNetworkRules"), ::OpenAPI::toJsonValue(m_virtual_network_rules));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("lastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIDataLakeStoreAccountProperties::getCurrentTier() const {
    return m_current_tier;
}
void OAIDataLakeStoreAccountProperties::setCurrentTier(const QString &current_tier) {
    m_current_tier = current_tier;
    m_current_tier_isSet = true;
}

bool OAIDataLakeStoreAccountProperties::is_current_tier_Set() const{
    return m_current_tier_isSet;
}

bool OAIDataLakeStoreAccountProperties::is_current_tier_Valid() const{
    return m_current_tier_isValid;
}

QString OAIDataLakeStoreAccountProperties::getDefaultGroup() const {
    return m_default_group;
}
void OAIDataLakeStoreAccountProperties::setDefaultGroup(const QString &default_group) {
    m_default_group = default_group;
    m_default_group_isSet = true;
}

bool OAIDataLakeStoreAccountProperties::is_default_group_Set() const{
    return m_default_group_isSet;
}

bool OAIDataLakeStoreAccountProperties::is_default_group_Valid() const{
    return m_default_group_isValid;
}

OAIEncryptionConfig OAIDataLakeStoreAccountProperties::getEncryptionConfig() const {
    return m_encryption_config;
}
void OAIDataLakeStoreAccountProperties::setEncryptionConfig(const OAIEncryptionConfig &encryption_config) {
    m_encryption_config = encryption_config;
    m_encryption_config_isSet = true;
}

bool OAIDataLakeStoreAccountProperties::is_encryption_config_Set() const{
    return m_encryption_config_isSet;
}

bool OAIDataLakeStoreAccountProperties::is_encryption_config_Valid() const{
    return m_encryption_config_isValid;
}

QString OAIDataLakeStoreAccountProperties::getEncryptionProvisioningState() const {
    return m_encryption_provisioning_state;
}
void OAIDataLakeStoreAccountProperties::setEncryptionProvisioningState(const QString &encryption_provisioning_state) {
    m_encryption_provisioning_state = encryption_provisioning_state;
    m_encryption_provisioning_state_isSet = true;
}

bool OAIDataLakeStoreAccountProperties::is_encryption_provisioning_state_Set() const{
    return m_encryption_provisioning_state_isSet;
}

bool OAIDataLakeStoreAccountProperties::is_encryption_provisioning_state_Valid() const{
    return m_encryption_provisioning_state_isValid;
}

QString OAIDataLakeStoreAccountProperties::getEncryptionState() const {
    return m_encryption_state;
}
void OAIDataLakeStoreAccountProperties::setEncryptionState(const QString &encryption_state) {
    m_encryption_state = encryption_state;
    m_encryption_state_isSet = true;
}

bool OAIDataLakeStoreAccountProperties::is_encryption_state_Set() const{
    return m_encryption_state_isSet;
}

bool OAIDataLakeStoreAccountProperties::is_encryption_state_Valid() const{
    return m_encryption_state_isValid;
}

QString OAIDataLakeStoreAccountProperties::getFirewallAllowAzureIps() const {
    return m_firewall_allow_azure_ips;
}
void OAIDataLakeStoreAccountProperties::setFirewallAllowAzureIps(const QString &firewall_allow_azure_ips) {
    m_firewall_allow_azure_ips = firewall_allow_azure_ips;
    m_firewall_allow_azure_ips_isSet = true;
}

bool OAIDataLakeStoreAccountProperties::is_firewall_allow_azure_ips_Set() const{
    return m_firewall_allow_azure_ips_isSet;
}

bool OAIDataLakeStoreAccountProperties::is_firewall_allow_azure_ips_Valid() const{
    return m_firewall_allow_azure_ips_isValid;
}

QList<OAIFirewallRule> OAIDataLakeStoreAccountProperties::getFirewallRules() const {
    return m_firewall_rules;
}
void OAIDataLakeStoreAccountProperties::setFirewallRules(const QList<OAIFirewallRule> &firewall_rules) {
    m_firewall_rules = firewall_rules;
    m_firewall_rules_isSet = true;
}

bool OAIDataLakeStoreAccountProperties::is_firewall_rules_Set() const{
    return m_firewall_rules_isSet;
}

bool OAIDataLakeStoreAccountProperties::is_firewall_rules_Valid() const{
    return m_firewall_rules_isValid;
}

QString OAIDataLakeStoreAccountProperties::getFirewallState() const {
    return m_firewall_state;
}
void OAIDataLakeStoreAccountProperties::setFirewallState(const QString &firewall_state) {
    m_firewall_state = firewall_state;
    m_firewall_state_isSet = true;
}

bool OAIDataLakeStoreAccountProperties::is_firewall_state_Set() const{
    return m_firewall_state_isSet;
}

bool OAIDataLakeStoreAccountProperties::is_firewall_state_Valid() const{
    return m_firewall_state_isValid;
}

QString OAIDataLakeStoreAccountProperties::getNewTier() const {
    return m_new_tier;
}
void OAIDataLakeStoreAccountProperties::setNewTier(const QString &new_tier) {
    m_new_tier = new_tier;
    m_new_tier_isSet = true;
}

bool OAIDataLakeStoreAccountProperties::is_new_tier_Set() const{
    return m_new_tier_isSet;
}

bool OAIDataLakeStoreAccountProperties::is_new_tier_Valid() const{
    return m_new_tier_isValid;
}

QString OAIDataLakeStoreAccountProperties::getTrustedIdProviderState() const {
    return m_trusted_id_provider_state;
}
void OAIDataLakeStoreAccountProperties::setTrustedIdProviderState(const QString &trusted_id_provider_state) {
    m_trusted_id_provider_state = trusted_id_provider_state;
    m_trusted_id_provider_state_isSet = true;
}

bool OAIDataLakeStoreAccountProperties::is_trusted_id_provider_state_Set() const{
    return m_trusted_id_provider_state_isSet;
}

bool OAIDataLakeStoreAccountProperties::is_trusted_id_provider_state_Valid() const{
    return m_trusted_id_provider_state_isValid;
}

QList<OAITrustedIdProvider> OAIDataLakeStoreAccountProperties::getTrustedIdProviders() const {
    return m_trusted_id_providers;
}
void OAIDataLakeStoreAccountProperties::setTrustedIdProviders(const QList<OAITrustedIdProvider> &trusted_id_providers) {
    m_trusted_id_providers = trusted_id_providers;
    m_trusted_id_providers_isSet = true;
}

bool OAIDataLakeStoreAccountProperties::is_trusted_id_providers_Set() const{
    return m_trusted_id_providers_isSet;
}

bool OAIDataLakeStoreAccountProperties::is_trusted_id_providers_Valid() const{
    return m_trusted_id_providers_isValid;
}

QList<OAIVirtualNetworkRule> OAIDataLakeStoreAccountProperties::getVirtualNetworkRules() const {
    return m_virtual_network_rules;
}
void OAIDataLakeStoreAccountProperties::setVirtualNetworkRules(const QList<OAIVirtualNetworkRule> &virtual_network_rules) {
    m_virtual_network_rules = virtual_network_rules;
    m_virtual_network_rules_isSet = true;
}

bool OAIDataLakeStoreAccountProperties::is_virtual_network_rules_Set() const{
    return m_virtual_network_rules_isSet;
}

bool OAIDataLakeStoreAccountProperties::is_virtual_network_rules_Valid() const{
    return m_virtual_network_rules_isValid;
}

QString OAIDataLakeStoreAccountProperties::getAccountId() const {
    return m_account_id;
}
void OAIDataLakeStoreAccountProperties::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIDataLakeStoreAccountProperties::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIDataLakeStoreAccountProperties::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QDateTime OAIDataLakeStoreAccountProperties::getCreationTime() const {
    return m_creation_time;
}
void OAIDataLakeStoreAccountProperties::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDataLakeStoreAccountProperties::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDataLakeStoreAccountProperties::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIDataLakeStoreAccountProperties::getEndpoint() const {
    return m_endpoint;
}
void OAIDataLakeStoreAccountProperties::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIDataLakeStoreAccountProperties::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIDataLakeStoreAccountProperties::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QDateTime OAIDataLakeStoreAccountProperties::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIDataLakeStoreAccountProperties::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIDataLakeStoreAccountProperties::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIDataLakeStoreAccountProperties::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QString OAIDataLakeStoreAccountProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIDataLakeStoreAccountProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIDataLakeStoreAccountProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIDataLakeStoreAccountProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIDataLakeStoreAccountProperties::getState() const {
    return m_state;
}
void OAIDataLakeStoreAccountProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDataLakeStoreAccountProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDataLakeStoreAccountProperties::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIDataLakeStoreAccountProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firewall_allow_azure_ips_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firewall_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_firewall_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trusted_id_provider_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trusted_id_providers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_network_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataLakeStoreAccountProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
