/**
 * DataLakeStoreAccountManagementClient
 * Creates an Azure Data Lake Store account management client.
 *
 * The version of the OpenAPI document: 2016-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataLakeStoreAccountPropertiesBasic.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataLakeStoreAccountPropertiesBasic::OAIDataLakeStoreAccountPropertiesBasic(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataLakeStoreAccountPropertiesBasic::OAIDataLakeStoreAccountPropertiesBasic() {
    this->initializeModel();
}

OAIDataLakeStoreAccountPropertiesBasic::~OAIDataLakeStoreAccountPropertiesBasic() {}

void OAIDataLakeStoreAccountPropertiesBasic::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIDataLakeStoreAccountPropertiesBasic::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataLakeStoreAccountPropertiesBasic::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("lastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("lastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIDataLakeStoreAccountPropertiesBasic::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataLakeStoreAccountPropertiesBasic::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("lastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIDataLakeStoreAccountPropertiesBasic::getAccountId() const {
    return m_account_id;
}
void OAIDataLakeStoreAccountPropertiesBasic::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIDataLakeStoreAccountPropertiesBasic::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIDataLakeStoreAccountPropertiesBasic::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QDateTime OAIDataLakeStoreAccountPropertiesBasic::getCreationTime() const {
    return m_creation_time;
}
void OAIDataLakeStoreAccountPropertiesBasic::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDataLakeStoreAccountPropertiesBasic::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDataLakeStoreAccountPropertiesBasic::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIDataLakeStoreAccountPropertiesBasic::getEndpoint() const {
    return m_endpoint;
}
void OAIDataLakeStoreAccountPropertiesBasic::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIDataLakeStoreAccountPropertiesBasic::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIDataLakeStoreAccountPropertiesBasic::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QDateTime OAIDataLakeStoreAccountPropertiesBasic::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIDataLakeStoreAccountPropertiesBasic::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIDataLakeStoreAccountPropertiesBasic::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIDataLakeStoreAccountPropertiesBasic::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QString OAIDataLakeStoreAccountPropertiesBasic::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIDataLakeStoreAccountPropertiesBasic::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIDataLakeStoreAccountPropertiesBasic::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIDataLakeStoreAccountPropertiesBasic::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIDataLakeStoreAccountPropertiesBasic::getState() const {
    return m_state;
}
void OAIDataLakeStoreAccountPropertiesBasic::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDataLakeStoreAccountPropertiesBasic::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDataLakeStoreAccountPropertiesBasic::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIDataLakeStoreAccountPropertiesBasic::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataLakeStoreAccountPropertiesBasic::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
