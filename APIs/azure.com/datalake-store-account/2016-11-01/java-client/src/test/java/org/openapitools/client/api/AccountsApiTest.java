/*
 * DataLakeStoreAccountManagementClient
 * Creates an Azure Data Lake Store account management client.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CheckNameAvailabilityParameters;
import org.openapitools.client.model.CreateDataLakeStoreAccountParameters;
import org.openapitools.client.model.DataLakeStoreAccount;
import org.openapitools.client.model.DataLakeStoreAccountListResult;
import org.openapitools.client.model.NameAvailabilityInformation;
import org.openapitools.client.model.UpdateDataLakeStoreAccountParameters;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsApi
 */
@Disabled
public class AccountsApiTest {

    private final AccountsApi api = new AccountsApi();

    /**
     * Checks whether the specified account name is available or taken.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsCheckNameAvailabilityTest() throws ApiException {
        String subscriptionId = null;
        String location = null;
        String apiVersion = null;
        CheckNameAvailabilityParameters parameters = null;
        NameAvailabilityInformation response = api.accountsCheckNameAvailability(subscriptionId, location, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Creates the specified Data Lake Store account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsCreateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        CreateDataLakeStoreAccountParameters parameters = null;
        DataLakeStoreAccount response = api.accountsCreate(subscriptionId, resourceGroupName, accountName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Deletes the specified Data Lake Store account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        api.accountsDelete(subscriptionId, resourceGroupName, accountName, apiVersion);
        // TODO: test validations
    }

    /**
     * Attempts to enable a user managed Key Vault for encryption of the specified Data Lake Store account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsEnableKeyVaultTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        api.accountsEnableKeyVault(subscriptionId, resourceGroupName, accountName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the specified Data Lake Store account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        DataLakeStoreAccount response = api.accountsGet(subscriptionId, resourceGroupName, accountName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists the Data Lake Store accounts within the subscription. The response includes a link to the next page of results, if any.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsListTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        String $select = null;
        String $orderby = null;
        Boolean $count = null;
        DataLakeStoreAccountListResult response = api.accountsList(subscriptionId, apiVersion, $filter, $top, $skip, $select, $orderby, $count);
        // TODO: test validations
    }

    /**
     * Lists the Data Lake Store accounts within a specific resource group. The response includes a link to the next page of results, if any.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsListByResourceGroupTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        String $select = null;
        String $orderby = null;
        Boolean $count = null;
        DataLakeStoreAccountListResult response = api.accountsListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, $filter, $top, $skip, $select, $orderby, $count);
        // TODO: test validations
    }

    /**
     * Updates the specified Data Lake Store account information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        UpdateDataLakeStoreAccountParameters parameters = null;
        DataLakeStoreAccount response = api.accountsUpdate(subscriptionId, resourceGroupName, accountName, apiVersion, parameters);
        // TODO: test validations
    }

}
