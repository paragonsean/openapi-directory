/*
 * DataLakeStoreAccountManagementClient
 * Creates an Azure Data Lake Store account management client.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UpdateEncryptionConfig;
import org.openapitools.client.model.UpdateFirewallRuleWithAccountParameters;
import org.openapitools.client.model.UpdateTrustedIdProviderWithAccountParameters;
import org.openapitools.client.model.UpdateVirtualNetworkRuleWithAccountParameters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Data Lake Store account properties information to be updated.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:01.006106-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateDataLakeStoreAccountProperties {
  public static final String SERIALIZED_NAME_DEFAULT_GROUP = "defaultGroup";
  @SerializedName(SERIALIZED_NAME_DEFAULT_GROUP)
  private String defaultGroup;

  public static final String SERIALIZED_NAME_ENCRYPTION_CONFIG = "encryptionConfig";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_CONFIG)
  private UpdateEncryptionConfig encryptionConfig;

  /**
   * The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.
   */
  @JsonAdapter(FirewallAllowAzureIpsEnum.Adapter.class)
  public enum FirewallAllowAzureIpsEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    FirewallAllowAzureIpsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FirewallAllowAzureIpsEnum fromValue(String value) {
      for (FirewallAllowAzureIpsEnum b : FirewallAllowAzureIpsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FirewallAllowAzureIpsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FirewallAllowAzureIpsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FirewallAllowAzureIpsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FirewallAllowAzureIpsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FirewallAllowAzureIpsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FIREWALL_ALLOW_AZURE_IPS = "firewallAllowAzureIps";
  @SerializedName(SERIALIZED_NAME_FIREWALL_ALLOW_AZURE_IPS)
  private FirewallAllowAzureIpsEnum firewallAllowAzureIps;

  public static final String SERIALIZED_NAME_FIREWALL_RULES = "firewallRules";
  @SerializedName(SERIALIZED_NAME_FIREWALL_RULES)
  private List<UpdateFirewallRuleWithAccountParameters> firewallRules = new ArrayList<>();

  /**
   * The current state of the IP address firewall for this Data Lake Store account. Disabling the firewall does not remove existing rules, they will just be ignored until the firewall is re-enabled.
   */
  @JsonAdapter(FirewallStateEnum.Adapter.class)
  public enum FirewallStateEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    FirewallStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FirewallStateEnum fromValue(String value) {
      for (FirewallStateEnum b : FirewallStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FirewallStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FirewallStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FirewallStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FirewallStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FirewallStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FIREWALL_STATE = "firewallState";
  @SerializedName(SERIALIZED_NAME_FIREWALL_STATE)
  private FirewallStateEnum firewallState;

  /**
   * The commitment tier to use for next month.
   */
  @JsonAdapter(NewTierEnum.Adapter.class)
  public enum NewTierEnum {
    CONSUMPTION("Consumption"),
    
    COMMITMENT_1_TB("Commitment_1TB"),
    
    COMMITMENT_10_TB("Commitment_10TB"),
    
    COMMITMENT_100_TB("Commitment_100TB"),
    
    COMMITMENT_500_TB("Commitment_500TB"),
    
    COMMITMENT_1_PB("Commitment_1PB"),
    
    COMMITMENT_5_PB("Commitment_5PB");

    private String value;

    NewTierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NewTierEnum fromValue(String value) {
      for (NewTierEnum b : NewTierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NewTierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NewTierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NewTierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NewTierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NewTierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NEW_TIER = "newTier";
  @SerializedName(SERIALIZED_NAME_NEW_TIER)
  private NewTierEnum newTier;

  /**
   * The current state of the trusted identity provider feature for this Data Lake Store account. Disabling trusted identity provider functionality does not remove the providers, they will just be ignored until this feature is re-enabled.
   */
  @JsonAdapter(TrustedIdProviderStateEnum.Adapter.class)
  public enum TrustedIdProviderStateEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    TrustedIdProviderStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrustedIdProviderStateEnum fromValue(String value) {
      for (TrustedIdProviderStateEnum b : TrustedIdProviderStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TrustedIdProviderStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrustedIdProviderStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrustedIdProviderStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TrustedIdProviderStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TrustedIdProviderStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRUSTED_ID_PROVIDER_STATE = "trustedIdProviderState";
  @SerializedName(SERIALIZED_NAME_TRUSTED_ID_PROVIDER_STATE)
  private TrustedIdProviderStateEnum trustedIdProviderState;

  public static final String SERIALIZED_NAME_TRUSTED_ID_PROVIDERS = "trustedIdProviders";
  @SerializedName(SERIALIZED_NAME_TRUSTED_ID_PROVIDERS)
  private List<UpdateTrustedIdProviderWithAccountParameters> trustedIdProviders = new ArrayList<>();

  public static final String SERIALIZED_NAME_VIRTUAL_NETWORK_RULES = "virtualNetworkRules";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NETWORK_RULES)
  private List<UpdateVirtualNetworkRuleWithAccountParameters> virtualNetworkRules = new ArrayList<>();

  public UpdateDataLakeStoreAccountProperties() {
  }

  public UpdateDataLakeStoreAccountProperties defaultGroup(String defaultGroup) {
    this.defaultGroup = defaultGroup;
    return this;
  }

  /**
   * The default owner group for all new folders and files created in the Data Lake Store account.
   * @return defaultGroup
   */
  @javax.annotation.Nullable
  public String getDefaultGroup() {
    return defaultGroup;
  }

  public void setDefaultGroup(String defaultGroup) {
    this.defaultGroup = defaultGroup;
  }


  public UpdateDataLakeStoreAccountProperties encryptionConfig(UpdateEncryptionConfig encryptionConfig) {
    this.encryptionConfig = encryptionConfig;
    return this;
  }

  /**
   * Get encryptionConfig
   * @return encryptionConfig
   */
  @javax.annotation.Nullable
  public UpdateEncryptionConfig getEncryptionConfig() {
    return encryptionConfig;
  }

  public void setEncryptionConfig(UpdateEncryptionConfig encryptionConfig) {
    this.encryptionConfig = encryptionConfig;
  }


  public UpdateDataLakeStoreAccountProperties firewallAllowAzureIps(FirewallAllowAzureIpsEnum firewallAllowAzureIps) {
    this.firewallAllowAzureIps = firewallAllowAzureIps;
    return this;
  }

  /**
   * The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.
   * @return firewallAllowAzureIps
   */
  @javax.annotation.Nullable
  public FirewallAllowAzureIpsEnum getFirewallAllowAzureIps() {
    return firewallAllowAzureIps;
  }

  public void setFirewallAllowAzureIps(FirewallAllowAzureIpsEnum firewallAllowAzureIps) {
    this.firewallAllowAzureIps = firewallAllowAzureIps;
  }


  public UpdateDataLakeStoreAccountProperties firewallRules(List<UpdateFirewallRuleWithAccountParameters> firewallRules) {
    this.firewallRules = firewallRules;
    return this;
  }

  public UpdateDataLakeStoreAccountProperties addFirewallRulesItem(UpdateFirewallRuleWithAccountParameters firewallRulesItem) {
    if (this.firewallRules == null) {
      this.firewallRules = new ArrayList<>();
    }
    this.firewallRules.add(firewallRulesItem);
    return this;
  }

  /**
   * The list of firewall rules associated with this Data Lake Store account.
   * @return firewallRules
   */
  @javax.annotation.Nullable
  public List<UpdateFirewallRuleWithAccountParameters> getFirewallRules() {
    return firewallRules;
  }

  public void setFirewallRules(List<UpdateFirewallRuleWithAccountParameters> firewallRules) {
    this.firewallRules = firewallRules;
  }


  public UpdateDataLakeStoreAccountProperties firewallState(FirewallStateEnum firewallState) {
    this.firewallState = firewallState;
    return this;
  }

  /**
   * The current state of the IP address firewall for this Data Lake Store account. Disabling the firewall does not remove existing rules, they will just be ignored until the firewall is re-enabled.
   * @return firewallState
   */
  @javax.annotation.Nullable
  public FirewallStateEnum getFirewallState() {
    return firewallState;
  }

  public void setFirewallState(FirewallStateEnum firewallState) {
    this.firewallState = firewallState;
  }


  public UpdateDataLakeStoreAccountProperties newTier(NewTierEnum newTier) {
    this.newTier = newTier;
    return this;
  }

  /**
   * The commitment tier to use for next month.
   * @return newTier
   */
  @javax.annotation.Nullable
  public NewTierEnum getNewTier() {
    return newTier;
  }

  public void setNewTier(NewTierEnum newTier) {
    this.newTier = newTier;
  }


  public UpdateDataLakeStoreAccountProperties trustedIdProviderState(TrustedIdProviderStateEnum trustedIdProviderState) {
    this.trustedIdProviderState = trustedIdProviderState;
    return this;
  }

  /**
   * The current state of the trusted identity provider feature for this Data Lake Store account. Disabling trusted identity provider functionality does not remove the providers, they will just be ignored until this feature is re-enabled.
   * @return trustedIdProviderState
   */
  @javax.annotation.Nullable
  public TrustedIdProviderStateEnum getTrustedIdProviderState() {
    return trustedIdProviderState;
  }

  public void setTrustedIdProviderState(TrustedIdProviderStateEnum trustedIdProviderState) {
    this.trustedIdProviderState = trustedIdProviderState;
  }


  public UpdateDataLakeStoreAccountProperties trustedIdProviders(List<UpdateTrustedIdProviderWithAccountParameters> trustedIdProviders) {
    this.trustedIdProviders = trustedIdProviders;
    return this;
  }

  public UpdateDataLakeStoreAccountProperties addTrustedIdProvidersItem(UpdateTrustedIdProviderWithAccountParameters trustedIdProvidersItem) {
    if (this.trustedIdProviders == null) {
      this.trustedIdProviders = new ArrayList<>();
    }
    this.trustedIdProviders.add(trustedIdProvidersItem);
    return this;
  }

  /**
   * The list of trusted identity providers associated with this Data Lake Store account.
   * @return trustedIdProviders
   */
  @javax.annotation.Nullable
  public List<UpdateTrustedIdProviderWithAccountParameters> getTrustedIdProviders() {
    return trustedIdProviders;
  }

  public void setTrustedIdProviders(List<UpdateTrustedIdProviderWithAccountParameters> trustedIdProviders) {
    this.trustedIdProviders = trustedIdProviders;
  }


  public UpdateDataLakeStoreAccountProperties virtualNetworkRules(List<UpdateVirtualNetworkRuleWithAccountParameters> virtualNetworkRules) {
    this.virtualNetworkRules = virtualNetworkRules;
    return this;
  }

  public UpdateDataLakeStoreAccountProperties addVirtualNetworkRulesItem(UpdateVirtualNetworkRuleWithAccountParameters virtualNetworkRulesItem) {
    if (this.virtualNetworkRules == null) {
      this.virtualNetworkRules = new ArrayList<>();
    }
    this.virtualNetworkRules.add(virtualNetworkRulesItem);
    return this;
  }

  /**
   * The list of virtual network rules associated with this Data Lake Store account.
   * @return virtualNetworkRules
   */
  @javax.annotation.Nullable
  public List<UpdateVirtualNetworkRuleWithAccountParameters> getVirtualNetworkRules() {
    return virtualNetworkRules;
  }

  public void setVirtualNetworkRules(List<UpdateVirtualNetworkRuleWithAccountParameters> virtualNetworkRules) {
    this.virtualNetworkRules = virtualNetworkRules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateDataLakeStoreAccountProperties updateDataLakeStoreAccountProperties = (UpdateDataLakeStoreAccountProperties) o;
    return Objects.equals(this.defaultGroup, updateDataLakeStoreAccountProperties.defaultGroup) &&
        Objects.equals(this.encryptionConfig, updateDataLakeStoreAccountProperties.encryptionConfig) &&
        Objects.equals(this.firewallAllowAzureIps, updateDataLakeStoreAccountProperties.firewallAllowAzureIps) &&
        Objects.equals(this.firewallRules, updateDataLakeStoreAccountProperties.firewallRules) &&
        Objects.equals(this.firewallState, updateDataLakeStoreAccountProperties.firewallState) &&
        Objects.equals(this.newTier, updateDataLakeStoreAccountProperties.newTier) &&
        Objects.equals(this.trustedIdProviderState, updateDataLakeStoreAccountProperties.trustedIdProviderState) &&
        Objects.equals(this.trustedIdProviders, updateDataLakeStoreAccountProperties.trustedIdProviders) &&
        Objects.equals(this.virtualNetworkRules, updateDataLakeStoreAccountProperties.virtualNetworkRules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultGroup, encryptionConfig, firewallAllowAzureIps, firewallRules, firewallState, newTier, trustedIdProviderState, trustedIdProviders, virtualNetworkRules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateDataLakeStoreAccountProperties {\n");
    sb.append("    defaultGroup: ").append(toIndentedString(defaultGroup)).append("\n");
    sb.append("    encryptionConfig: ").append(toIndentedString(encryptionConfig)).append("\n");
    sb.append("    firewallAllowAzureIps: ").append(toIndentedString(firewallAllowAzureIps)).append("\n");
    sb.append("    firewallRules: ").append(toIndentedString(firewallRules)).append("\n");
    sb.append("    firewallState: ").append(toIndentedString(firewallState)).append("\n");
    sb.append("    newTier: ").append(toIndentedString(newTier)).append("\n");
    sb.append("    trustedIdProviderState: ").append(toIndentedString(trustedIdProviderState)).append("\n");
    sb.append("    trustedIdProviders: ").append(toIndentedString(trustedIdProviders)).append("\n");
    sb.append("    virtualNetworkRules: ").append(toIndentedString(virtualNetworkRules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defaultGroup");
    openapiFields.add("encryptionConfig");
    openapiFields.add("firewallAllowAzureIps");
    openapiFields.add("firewallRules");
    openapiFields.add("firewallState");
    openapiFields.add("newTier");
    openapiFields.add("trustedIdProviderState");
    openapiFields.add("trustedIdProviders");
    openapiFields.add("virtualNetworkRules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateDataLakeStoreAccountProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateDataLakeStoreAccountProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateDataLakeStoreAccountProperties is not found in the empty JSON string", UpdateDataLakeStoreAccountProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateDataLakeStoreAccountProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateDataLakeStoreAccountProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("defaultGroup") != null && !jsonObj.get("defaultGroup").isJsonNull()) && !jsonObj.get("defaultGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultGroup").toString()));
      }
      // validate the optional field `encryptionConfig`
      if (jsonObj.get("encryptionConfig") != null && !jsonObj.get("encryptionConfig").isJsonNull()) {
        UpdateEncryptionConfig.validateJsonElement(jsonObj.get("encryptionConfig"));
      }
      if ((jsonObj.get("firewallAllowAzureIps") != null && !jsonObj.get("firewallAllowAzureIps").isJsonNull()) && !jsonObj.get("firewallAllowAzureIps").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firewallAllowAzureIps` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firewallAllowAzureIps").toString()));
      }
      // validate the optional field `firewallAllowAzureIps`
      if (jsonObj.get("firewallAllowAzureIps") != null && !jsonObj.get("firewallAllowAzureIps").isJsonNull()) {
        FirewallAllowAzureIpsEnum.validateJsonElement(jsonObj.get("firewallAllowAzureIps"));
      }
      if (jsonObj.get("firewallRules") != null && !jsonObj.get("firewallRules").isJsonNull()) {
        JsonArray jsonArrayfirewallRules = jsonObj.getAsJsonArray("firewallRules");
        if (jsonArrayfirewallRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("firewallRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `firewallRules` to be an array in the JSON string but got `%s`", jsonObj.get("firewallRules").toString()));
          }

          // validate the optional field `firewallRules` (array)
          for (int i = 0; i < jsonArrayfirewallRules.size(); i++) {
            UpdateFirewallRuleWithAccountParameters.validateJsonElement(jsonArrayfirewallRules.get(i));
          };
        }
      }
      if ((jsonObj.get("firewallState") != null && !jsonObj.get("firewallState").isJsonNull()) && !jsonObj.get("firewallState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firewallState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firewallState").toString()));
      }
      // validate the optional field `firewallState`
      if (jsonObj.get("firewallState") != null && !jsonObj.get("firewallState").isJsonNull()) {
        FirewallStateEnum.validateJsonElement(jsonObj.get("firewallState"));
      }
      if ((jsonObj.get("newTier") != null && !jsonObj.get("newTier").isJsonNull()) && !jsonObj.get("newTier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newTier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newTier").toString()));
      }
      // validate the optional field `newTier`
      if (jsonObj.get("newTier") != null && !jsonObj.get("newTier").isJsonNull()) {
        NewTierEnum.validateJsonElement(jsonObj.get("newTier"));
      }
      if ((jsonObj.get("trustedIdProviderState") != null && !jsonObj.get("trustedIdProviderState").isJsonNull()) && !jsonObj.get("trustedIdProviderState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trustedIdProviderState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trustedIdProviderState").toString()));
      }
      // validate the optional field `trustedIdProviderState`
      if (jsonObj.get("trustedIdProviderState") != null && !jsonObj.get("trustedIdProviderState").isJsonNull()) {
        TrustedIdProviderStateEnum.validateJsonElement(jsonObj.get("trustedIdProviderState"));
      }
      if (jsonObj.get("trustedIdProviders") != null && !jsonObj.get("trustedIdProviders").isJsonNull()) {
        JsonArray jsonArraytrustedIdProviders = jsonObj.getAsJsonArray("trustedIdProviders");
        if (jsonArraytrustedIdProviders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("trustedIdProviders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `trustedIdProviders` to be an array in the JSON string but got `%s`", jsonObj.get("trustedIdProviders").toString()));
          }

          // validate the optional field `trustedIdProviders` (array)
          for (int i = 0; i < jsonArraytrustedIdProviders.size(); i++) {
            UpdateTrustedIdProviderWithAccountParameters.validateJsonElement(jsonArraytrustedIdProviders.get(i));
          };
        }
      }
      if (jsonObj.get("virtualNetworkRules") != null && !jsonObj.get("virtualNetworkRules").isJsonNull()) {
        JsonArray jsonArrayvirtualNetworkRules = jsonObj.getAsJsonArray("virtualNetworkRules");
        if (jsonArrayvirtualNetworkRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("virtualNetworkRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `virtualNetworkRules` to be an array in the JSON string but got `%s`", jsonObj.get("virtualNetworkRules").toString()));
          }

          // validate the optional field `virtualNetworkRules` (array)
          for (int i = 0; i < jsonArrayvirtualNetworkRules.size(); i++) {
            UpdateVirtualNetworkRuleWithAccountParameters.validateJsonElement(jsonArrayvirtualNetworkRules.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateDataLakeStoreAccountProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateDataLakeStoreAccountProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateDataLakeStoreAccountProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateDataLakeStoreAccountProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateDataLakeStoreAccountProperties>() {
           @Override
           public void write(JsonWriter out, UpdateDataLakeStoreAccountProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateDataLakeStoreAccountProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateDataLakeStoreAccountProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateDataLakeStoreAccountProperties
   * @throws IOException if the JSON string is invalid with respect to UpdateDataLakeStoreAccountProperties
   */
  public static UpdateDataLakeStoreAccountProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateDataLakeStoreAccountProperties.class);
  }

  /**
   * Convert an instance of UpdateDataLakeStoreAccountProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

