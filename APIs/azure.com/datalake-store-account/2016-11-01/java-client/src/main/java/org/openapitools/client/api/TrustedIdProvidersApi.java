/*
 * DataLakeStoreAccountManagementClient
 * Creates an Azure Data Lake Store account management client.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateOrUpdateTrustedIdProviderParameters;
import org.openapitools.client.model.TrustedIdProvider;
import org.openapitools.client.model.TrustedIdProviderListResult;
import org.openapitools.client.model.UpdateTrustedIdProviderParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TrustedIdProvidersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TrustedIdProvidersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TrustedIdProvidersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for trustedIdProvidersCreateOrUpdate
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param trustedIdProviderName The name of the trusted identity provider. This is used for differentiation of providers in the account. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters Parameters supplied to create or replace the trusted identity provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the trusted identity provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trustedIdProvidersCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String accountName, String trustedIdProviderName, String apiVersion, CreateOrUpdateTrustedIdProviderParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders/{trustedIdProviderName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "trustedIdProviderName" + "}", localVarApiClient.escapeString(trustedIdProviderName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trustedIdProvidersCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String trustedIdProviderName, String apiVersion, CreateOrUpdateTrustedIdProviderParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling trustedIdProvidersCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling trustedIdProvidersCreateOrUpdate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling trustedIdProvidersCreateOrUpdate(Async)");
        }

        // verify the required parameter 'trustedIdProviderName' is set
        if (trustedIdProviderName == null) {
            throw new ApiException("Missing the required parameter 'trustedIdProviderName' when calling trustedIdProvidersCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling trustedIdProvidersCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling trustedIdProvidersCreateOrUpdate(Async)");
        }

        return trustedIdProvidersCreateOrUpdateCall(subscriptionId, resourceGroupName, accountName, trustedIdProviderName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates or updates the specified trusted identity provider. During update, the trusted identity provider with the specified name will be replaced with this new provider
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param trustedIdProviderName The name of the trusted identity provider. This is used for differentiation of providers in the account. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters Parameters supplied to create or replace the trusted identity provider. (required)
     * @return TrustedIdProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the trusted identity provider. </td><td>  -  </td></tr>
     </table>
     */
    public TrustedIdProvider trustedIdProvidersCreateOrUpdate(String subscriptionId, String resourceGroupName, String accountName, String trustedIdProviderName, String apiVersion, CreateOrUpdateTrustedIdProviderParameters parameters) throws ApiException {
        ApiResponse<TrustedIdProvider> localVarResp = trustedIdProvidersCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, accountName, trustedIdProviderName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates the specified trusted identity provider. During update, the trusted identity provider with the specified name will be replaced with this new provider
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param trustedIdProviderName The name of the trusted identity provider. This is used for differentiation of providers in the account. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters Parameters supplied to create or replace the trusted identity provider. (required)
     * @return ApiResponse&lt;TrustedIdProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the trusted identity provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrustedIdProvider> trustedIdProvidersCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String trustedIdProviderName, String apiVersion, CreateOrUpdateTrustedIdProviderParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = trustedIdProvidersCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, trustedIdProviderName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<TrustedIdProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates the specified trusted identity provider. During update, the trusted identity provider with the specified name will be replaced with this new provider
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param trustedIdProviderName The name of the trusted identity provider. This is used for differentiation of providers in the account. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters Parameters supplied to create or replace the trusted identity provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the trusted identity provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trustedIdProvidersCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String accountName, String trustedIdProviderName, String apiVersion, CreateOrUpdateTrustedIdProviderParameters parameters, final ApiCallback<TrustedIdProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = trustedIdProvidersCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, trustedIdProviderName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<TrustedIdProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for trustedIdProvidersDelete
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param trustedIdProviderName The name of the trusted identity provider to delete. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified trusted identity provider details. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified trusted identity provider was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trustedIdProvidersDeleteCall(String subscriptionId, String resourceGroupName, String accountName, String trustedIdProviderName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders/{trustedIdProviderName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "trustedIdProviderName" + "}", localVarApiClient.escapeString(trustedIdProviderName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trustedIdProvidersDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String trustedIdProviderName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling trustedIdProvidersDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling trustedIdProvidersDelete(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling trustedIdProvidersDelete(Async)");
        }

        // verify the required parameter 'trustedIdProviderName' is set
        if (trustedIdProviderName == null) {
            throw new ApiException("Missing the required parameter 'trustedIdProviderName' when calling trustedIdProvidersDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling trustedIdProvidersDelete(Async)");
        }

        return trustedIdProvidersDeleteCall(subscriptionId, resourceGroupName, accountName, trustedIdProviderName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes the specified trusted identity provider from the specified Data Lake Store account
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param trustedIdProviderName The name of the trusted identity provider to delete. (required)
     * @param apiVersion Client Api Version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified trusted identity provider details. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified trusted identity provider was not found. </td><td>  -  </td></tr>
     </table>
     */
    public void trustedIdProvidersDelete(String subscriptionId, String resourceGroupName, String accountName, String trustedIdProviderName, String apiVersion) throws ApiException {
        trustedIdProvidersDeleteWithHttpInfo(subscriptionId, resourceGroupName, accountName, trustedIdProviderName, apiVersion);
    }

    /**
     * 
     * Deletes the specified trusted identity provider from the specified Data Lake Store account
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param trustedIdProviderName The name of the trusted identity provider to delete. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified trusted identity provider details. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified trusted identity provider was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> trustedIdProvidersDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String trustedIdProviderName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = trustedIdProvidersDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, trustedIdProviderName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified trusted identity provider from the specified Data Lake Store account
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param trustedIdProviderName The name of the trusted identity provider to delete. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified trusted identity provider details. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified trusted identity provider was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trustedIdProvidersDeleteAsync(String subscriptionId, String resourceGroupName, String accountName, String trustedIdProviderName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = trustedIdProvidersDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, trustedIdProviderName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for trustedIdProvidersGet
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param trustedIdProviderName The name of the trusted identity provider to retrieve. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved details of the specified trusted identity provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trustedIdProvidersGetCall(String subscriptionId, String resourceGroupName, String accountName, String trustedIdProviderName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders/{trustedIdProviderName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "trustedIdProviderName" + "}", localVarApiClient.escapeString(trustedIdProviderName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trustedIdProvidersGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String trustedIdProviderName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling trustedIdProvidersGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling trustedIdProvidersGet(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling trustedIdProvidersGet(Async)");
        }

        // verify the required parameter 'trustedIdProviderName' is set
        if (trustedIdProviderName == null) {
            throw new ApiException("Missing the required parameter 'trustedIdProviderName' when calling trustedIdProvidersGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling trustedIdProvidersGet(Async)");
        }

        return trustedIdProvidersGetCall(subscriptionId, resourceGroupName, accountName, trustedIdProviderName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the specified Data Lake Store trusted identity provider.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param trustedIdProviderName The name of the trusted identity provider to retrieve. (required)
     * @param apiVersion Client Api Version. (required)
     * @return TrustedIdProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved details of the specified trusted identity provider. </td><td>  -  </td></tr>
     </table>
     */
    public TrustedIdProvider trustedIdProvidersGet(String subscriptionId, String resourceGroupName, String accountName, String trustedIdProviderName, String apiVersion) throws ApiException {
        ApiResponse<TrustedIdProvider> localVarResp = trustedIdProvidersGetWithHttpInfo(subscriptionId, resourceGroupName, accountName, trustedIdProviderName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the specified Data Lake Store trusted identity provider.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param trustedIdProviderName The name of the trusted identity provider to retrieve. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;TrustedIdProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved details of the specified trusted identity provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrustedIdProvider> trustedIdProvidersGetWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String trustedIdProviderName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = trustedIdProvidersGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, trustedIdProviderName, apiVersion, null);
        Type localVarReturnType = new TypeToken<TrustedIdProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the specified Data Lake Store trusted identity provider.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param trustedIdProviderName The name of the trusted identity provider to retrieve. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved details of the specified trusted identity provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trustedIdProvidersGetAsync(String subscriptionId, String resourceGroupName, String accountName, String trustedIdProviderName, String apiVersion, final ApiCallback<TrustedIdProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = trustedIdProvidersGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, trustedIdProviderName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<TrustedIdProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for trustedIdProvidersListByAccount
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of trusted identity providers. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trustedIdProvidersListByAccountCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trustedIdProvidersListByAccountValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling trustedIdProvidersListByAccount(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling trustedIdProvidersListByAccount(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling trustedIdProvidersListByAccount(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling trustedIdProvidersListByAccount(Async)");
        }

        return trustedIdProvidersListByAccountCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Lists the Data Lake Store trusted identity providers within the specified Data Lake Store account.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param apiVersion Client Api Version. (required)
     * @return TrustedIdProviderListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of trusted identity providers. </td><td>  -  </td></tr>
     </table>
     */
    public TrustedIdProviderListResult trustedIdProvidersListByAccount(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        ApiResponse<TrustedIdProviderListResult> localVarResp = trustedIdProvidersListByAccountWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the Data Lake Store trusted identity providers within the specified Data Lake Store account.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;TrustedIdProviderListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of trusted identity providers. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrustedIdProviderListResult> trustedIdProvidersListByAccountWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = trustedIdProvidersListByAccountValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<TrustedIdProviderListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the Data Lake Store trusted identity providers within the specified Data Lake Store account.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of trusted identity providers. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trustedIdProvidersListByAccountAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<TrustedIdProviderListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = trustedIdProvidersListByAccountValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<TrustedIdProviderListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for trustedIdProvidersUpdate
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param trustedIdProviderName The name of the trusted identity provider. This is used for differentiation of providers in the account. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters Parameters supplied to update the trusted identity provider. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the trusted identity provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trustedIdProvidersUpdateCall(String subscriptionId, String resourceGroupName, String accountName, String trustedIdProviderName, String apiVersion, UpdateTrustedIdProviderParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders/{trustedIdProviderName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "trustedIdProviderName" + "}", localVarApiClient.escapeString(trustedIdProviderName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trustedIdProvidersUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String trustedIdProviderName, String apiVersion, UpdateTrustedIdProviderParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling trustedIdProvidersUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling trustedIdProvidersUpdate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling trustedIdProvidersUpdate(Async)");
        }

        // verify the required parameter 'trustedIdProviderName' is set
        if (trustedIdProviderName == null) {
            throw new ApiException("Missing the required parameter 'trustedIdProviderName' when calling trustedIdProvidersUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling trustedIdProvidersUpdate(Async)");
        }

        return trustedIdProvidersUpdateCall(subscriptionId, resourceGroupName, accountName, trustedIdProviderName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Updates the specified trusted identity provider.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param trustedIdProviderName The name of the trusted identity provider. This is used for differentiation of providers in the account. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters Parameters supplied to update the trusted identity provider. (optional)
     * @return TrustedIdProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the trusted identity provider. </td><td>  -  </td></tr>
     </table>
     */
    public TrustedIdProvider trustedIdProvidersUpdate(String subscriptionId, String resourceGroupName, String accountName, String trustedIdProviderName, String apiVersion, UpdateTrustedIdProviderParameters parameters) throws ApiException {
        ApiResponse<TrustedIdProvider> localVarResp = trustedIdProvidersUpdateWithHttpInfo(subscriptionId, resourceGroupName, accountName, trustedIdProviderName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the specified trusted identity provider.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param trustedIdProviderName The name of the trusted identity provider. This is used for differentiation of providers in the account. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters Parameters supplied to update the trusted identity provider. (optional)
     * @return ApiResponse&lt;TrustedIdProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the trusted identity provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrustedIdProvider> trustedIdProvidersUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String trustedIdProviderName, String apiVersion, UpdateTrustedIdProviderParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = trustedIdProvidersUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, trustedIdProviderName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<TrustedIdProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the specified trusted identity provider.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param trustedIdProviderName The name of the trusted identity provider. This is used for differentiation of providers in the account. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters Parameters supplied to update the trusted identity provider. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the trusted identity provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trustedIdProvidersUpdateAsync(String subscriptionId, String resourceGroupName, String accountName, String trustedIdProviderName, String apiVersion, UpdateTrustedIdProviderParameters parameters, final ApiCallback<TrustedIdProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = trustedIdProvidersUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, trustedIdProviderName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<TrustedIdProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
