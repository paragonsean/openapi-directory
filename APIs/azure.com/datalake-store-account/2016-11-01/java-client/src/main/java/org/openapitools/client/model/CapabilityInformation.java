/*
 * DataLakeStoreAccountManagementClient
 * Creates an Azure Data Lake Store account management client.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Subscription-level properties and limits for Data Lake Store.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:01.006106-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CapabilityInformation {
  public static final String SERIALIZED_NAME_ACCOUNT_COUNT = "accountCount";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_COUNT)
  private Integer accountCount;

  public static final String SERIALIZED_NAME_MAX_ACCOUNT_COUNT = "maxAccountCount";
  @SerializedName(SERIALIZED_NAME_MAX_ACCOUNT_COUNT)
  private Integer maxAccountCount;

  public static final String SERIALIZED_NAME_MIGRATION_STATE = "migrationState";
  @SerializedName(SERIALIZED_NAME_MIGRATION_STATE)
  private Boolean migrationState;

  /**
   * The subscription state.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    REGISTERED("Registered"),
    
    SUSPENDED("Suspended"),
    
    DELETED("Deleted"),
    
    UNREGISTERED("Unregistered"),
    
    WARNED("Warned");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private UUID subscriptionId;

  public CapabilityInformation() {
  }

  public CapabilityInformation(
     Integer accountCount, 
     Integer maxAccountCount, 
     Boolean migrationState, 
     StateEnum state, 
     UUID subscriptionId
  ) {
    this();
    this.accountCount = accountCount;
    this.maxAccountCount = maxAccountCount;
    this.migrationState = migrationState;
    this.state = state;
    this.subscriptionId = subscriptionId;
  }

  /**
   * The current number of accounts under this subscription.
   * @return accountCount
   */
  @javax.annotation.Nullable
  public Integer getAccountCount() {
    return accountCount;
  }



  /**
   * The maximum supported number of accounts under this subscription.
   * @return maxAccountCount
   */
  @javax.annotation.Nullable
  public Integer getMaxAccountCount() {
    return maxAccountCount;
  }



  /**
   * The Boolean value of true or false to indicate the maintenance state.
   * @return migrationState
   */
  @javax.annotation.Nullable
  public Boolean getMigrationState() {
    return migrationState;
  }



  /**
   * The subscription state.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * The subscription credentials that uniquely identifies the subscription.
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public UUID getSubscriptionId() {
    return subscriptionId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CapabilityInformation capabilityInformation = (CapabilityInformation) o;
    return Objects.equals(this.accountCount, capabilityInformation.accountCount) &&
        Objects.equals(this.maxAccountCount, capabilityInformation.maxAccountCount) &&
        Objects.equals(this.migrationState, capabilityInformation.migrationState) &&
        Objects.equals(this.state, capabilityInformation.state) &&
        Objects.equals(this.subscriptionId, capabilityInformation.subscriptionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountCount, maxAccountCount, migrationState, state, subscriptionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CapabilityInformation {\n");
    sb.append("    accountCount: ").append(toIndentedString(accountCount)).append("\n");
    sb.append("    maxAccountCount: ").append(toIndentedString(maxAccountCount)).append("\n");
    sb.append("    migrationState: ").append(toIndentedString(migrationState)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountCount");
    openapiFields.add("maxAccountCount");
    openapiFields.add("migrationState");
    openapiFields.add("state");
    openapiFields.add("subscriptionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CapabilityInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CapabilityInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CapabilityInformation is not found in the empty JSON string", CapabilityInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CapabilityInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CapabilityInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("subscriptionId") != null && !jsonObj.get("subscriptionId").isJsonNull()) && !jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CapabilityInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CapabilityInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CapabilityInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CapabilityInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<CapabilityInformation>() {
           @Override
           public void write(JsonWriter out, CapabilityInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CapabilityInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CapabilityInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CapabilityInformation
   * @throws IOException if the JSON string is invalid with respect to CapabilityInformation
   */
  public static CapabilityInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CapabilityInformation.class);
  }

  /**
   * Convert an instance of CapabilityInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

