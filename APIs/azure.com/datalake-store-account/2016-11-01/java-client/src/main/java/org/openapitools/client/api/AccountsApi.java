/*
 * DataLakeStoreAccountManagementClient
 * Creates an Azure Data Lake Store account management client.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CheckNameAvailabilityParameters;
import org.openapitools.client.model.CreateDataLakeStoreAccountParameters;
import org.openapitools.client.model.DataLakeStoreAccount;
import org.openapitools.client.model.DataLakeStoreAccountListResult;
import org.openapitools.client.model.NameAvailabilityInformation;
import org.openapitools.client.model.UpdateDataLakeStoreAccountParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accountsCheckNameAvailability
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location The resource location without whitespace. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters Parameters supplied to check the Data Lake Store account name availability. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the Data Lake Store account name availability information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsCheckNameAvailabilityCall(String subscriptionId, String location, String apiVersion, CheckNameAvailabilityParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.DataLakeStore/locations/{location}/checkNameAvailability"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsCheckNameAvailabilityValidateBeforeCall(String subscriptionId, String location, String apiVersion, CheckNameAvailabilityParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountsCheckNameAvailability(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling accountsCheckNameAvailability(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountsCheckNameAvailability(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling accountsCheckNameAvailability(Async)");
        }

        return accountsCheckNameAvailabilityCall(subscriptionId, location, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Checks whether the specified account name is available or taken.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location The resource location without whitespace. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters Parameters supplied to check the Data Lake Store account name availability. (required)
     * @return NameAvailabilityInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the Data Lake Store account name availability information. </td><td>  -  </td></tr>
     </table>
     */
    public NameAvailabilityInformation accountsCheckNameAvailability(String subscriptionId, String location, String apiVersion, CheckNameAvailabilityParameters parameters) throws ApiException {
        ApiResponse<NameAvailabilityInformation> localVarResp = accountsCheckNameAvailabilityWithHttpInfo(subscriptionId, location, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Checks whether the specified account name is available or taken.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location The resource location without whitespace. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters Parameters supplied to check the Data Lake Store account name availability. (required)
     * @return ApiResponse&lt;NameAvailabilityInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the Data Lake Store account name availability information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NameAvailabilityInformation> accountsCheckNameAvailabilityWithHttpInfo(String subscriptionId, String location, String apiVersion, CheckNameAvailabilityParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = accountsCheckNameAvailabilityValidateBeforeCall(subscriptionId, location, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<NameAvailabilityInformation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Checks whether the specified account name is available or taken.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location The resource location without whitespace. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters Parameters supplied to check the Data Lake Store account name availability. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the Data Lake Store account name availability information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsCheckNameAvailabilityAsync(String subscriptionId, String location, String apiVersion, CheckNameAvailabilityParameters parameters, final ApiCallback<NameAvailabilityInformation> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsCheckNameAvailabilityValidateBeforeCall(subscriptionId, location, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<NameAvailabilityInformation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsCreate
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters Parameters supplied to create the Data Lake Store account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created the account. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully initiated creation of the account. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsCreateCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, CreateDataLakeStoreAccountParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, CreateDataLakeStoreAccountParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accountsCreate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling accountsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountsCreate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling accountsCreate(Async)");
        }

        return accountsCreateCall(subscriptionId, resourceGroupName, accountName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates the specified Data Lake Store account.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters Parameters supplied to create the Data Lake Store account. (required)
     * @return DataLakeStoreAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created the account. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully initiated creation of the account. </td><td>  -  </td></tr>
     </table>
     */
    public DataLakeStoreAccount accountsCreate(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, CreateDataLakeStoreAccountParameters parameters) throws ApiException {
        ApiResponse<DataLakeStoreAccount> localVarResp = accountsCreateWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates the specified Data Lake Store account.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters Parameters supplied to create the Data Lake Store account. (required)
     * @return ApiResponse&lt;DataLakeStoreAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created the account. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully initiated creation of the account. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataLakeStoreAccount> accountsCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, CreateDataLakeStoreAccountParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = accountsCreateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<DataLakeStoreAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates the specified Data Lake Store account.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters Parameters supplied to create the Data Lake Store account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created the account. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully initiated creation of the account. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsCreateAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, CreateDataLakeStoreAccountParameters parameters, final ApiCallback<DataLakeStoreAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsCreateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<DataLakeStoreAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsDelete
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified account. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Successfully initiated the deletion of the specified account. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified account was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsDeleteCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accountsDelete(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling accountsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountsDelete(Async)");
        }

        return accountsDeleteCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes the specified Data Lake Store account.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param apiVersion Client Api Version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified account. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Successfully initiated the deletion of the specified account. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified account was not found. </td><td>  -  </td></tr>
     </table>
     */
    public void accountsDelete(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        accountsDeleteWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
    }

    /**
     * 
     * Deletes the specified Data Lake Store account.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified account. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Successfully initiated the deletion of the specified account. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified account was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> accountsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = accountsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified Data Lake Store account.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified account. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Successfully initiated the deletion of the specified account. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified account was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsDeleteAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsEnableKeyVault
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully enabled the user-managed Key Vault settings used for encrypting this Data Lake Store account. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsEnableKeyVaultCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/enableKeyVault"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsEnableKeyVaultValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountsEnableKeyVault(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accountsEnableKeyVault(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling accountsEnableKeyVault(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountsEnableKeyVault(Async)");
        }

        return accountsEnableKeyVaultCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Attempts to enable a user managed Key Vault for encryption of the specified Data Lake Store account.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param apiVersion Client Api Version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully enabled the user-managed Key Vault settings used for encrypting this Data Lake Store account. </td><td>  -  </td></tr>
     </table>
     */
    public void accountsEnableKeyVault(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        accountsEnableKeyVaultWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
    }

    /**
     * 
     * Attempts to enable a user managed Key Vault for encryption of the specified Data Lake Store account.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully enabled the user-managed Key Vault settings used for encrypting this Data Lake Store account. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> accountsEnableKeyVaultWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = accountsEnableKeyVaultValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Attempts to enable a user managed Key Vault for encryption of the specified Data Lake Store account.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully enabled the user-managed Key Vault settings used for encrypting this Data Lake Store account. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsEnableKeyVaultAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsEnableKeyVaultValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsGet
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved details of the specified account. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsGetCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accountsGet(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling accountsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountsGet(Async)");
        }

        return accountsGetCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the specified Data Lake Store account.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param apiVersion Client Api Version. (required)
     * @return DataLakeStoreAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved details of the specified account. </td><td>  -  </td></tr>
     </table>
     */
    public DataLakeStoreAccount accountsGet(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        ApiResponse<DataLakeStoreAccount> localVarResp = accountsGetWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the specified Data Lake Store account.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;DataLakeStoreAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved details of the specified account. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataLakeStoreAccount> accountsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = accountsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DataLakeStoreAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the specified Data Lake Store account.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved details of the specified account. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsGetAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<DataLakeStoreAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DataLakeStoreAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsList
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of accounts. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsListCall(String subscriptionId, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.DataLakeStore/accounts"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsListValidateBeforeCall(String subscriptionId, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountsList(Async)");
        }

        return accountsListCall(subscriptionId, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);

    }

    /**
     * 
     * Lists the Data Lake Store accounts within the subscription. The response includes a link to the next page of results, if any.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return DataLakeStoreAccountListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of accounts. </td><td>  -  </td></tr>
     </table>
     */
    public DataLakeStoreAccountListResult accountsList(String subscriptionId, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        ApiResponse<DataLakeStoreAccountListResult> localVarResp = accountsListWithHttpInfo(subscriptionId, apiVersion, $filter, $top, $skip, $select, $orderby, $count);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the Data Lake Store accounts within the subscription. The response includes a link to the next page of results, if any.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return ApiResponse&lt;DataLakeStoreAccountListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of accounts. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataLakeStoreAccountListResult> accountsListWithHttpInfo(String subscriptionId, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        okhttp3.Call localVarCall = accountsListValidateBeforeCall(subscriptionId, apiVersion, $filter, $top, $skip, $select, $orderby, $count, null);
        Type localVarReturnType = new TypeToken<DataLakeStoreAccountListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the Data Lake Store accounts within the subscription. The response includes a link to the next page of results, if any.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of accounts. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsListAsync(String subscriptionId, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback<DataLakeStoreAccountListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsListValidateBeforeCall(subscriptionId, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);
        Type localVarReturnType = new TypeToken<DataLakeStoreAccountListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsListByResourceGroup
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count A Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of accounts in the specified resource group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountsListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accountsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountsListByResourceGroup(Async)");
        }

        return accountsListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);

    }

    /**
     * 
     * Lists the Data Lake Store accounts within a specific resource group. The response includes a link to the next page of results, if any.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count A Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return DataLakeStoreAccountListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of accounts in the specified resource group. </td><td>  -  </td></tr>
     </table>
     */
    public DataLakeStoreAccountListResult accountsListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        ApiResponse<DataLakeStoreAccountListResult> localVarResp = accountsListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, $filter, $top, $skip, $select, $orderby, $count);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the Data Lake Store accounts within a specific resource group. The response includes a link to the next page of results, if any.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count A Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return ApiResponse&lt;DataLakeStoreAccountListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of accounts in the specified resource group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataLakeStoreAccountListResult> accountsListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        okhttp3.Call localVarCall = accountsListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, null);
        Type localVarReturnType = new TypeToken<DataLakeStoreAccountListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the Data Lake Store accounts within a specific resource group. The response includes a link to the next page of results, if any.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count A Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of accounts in the specified resource group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback<DataLakeStoreAccountListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);
        Type localVarReturnType = new TypeToken<DataLakeStoreAccountListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsUpdate
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters Parameters supplied to update the Data Lake Store account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the account details. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully initiated the update of the account details. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Successfully initiated the update of the account details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsUpdateCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, UpdateDataLakeStoreAccountParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, UpdateDataLakeStoreAccountParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accountsUpdate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling accountsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountsUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling accountsUpdate(Async)");
        }

        return accountsUpdateCall(subscriptionId, resourceGroupName, accountName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Updates the specified Data Lake Store account information.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters Parameters supplied to update the Data Lake Store account. (required)
     * @return DataLakeStoreAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the account details. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully initiated the update of the account details. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Successfully initiated the update of the account details. </td><td>  -  </td></tr>
     </table>
     */
    public DataLakeStoreAccount accountsUpdate(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, UpdateDataLakeStoreAccountParameters parameters) throws ApiException {
        ApiResponse<DataLakeStoreAccount> localVarResp = accountsUpdateWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the specified Data Lake Store account information.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters Parameters supplied to update the Data Lake Store account. (required)
     * @return ApiResponse&lt;DataLakeStoreAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the account details. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully initiated the update of the account details. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Successfully initiated the update of the account details. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataLakeStoreAccount> accountsUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, UpdateDataLakeStoreAccountParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = accountsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<DataLakeStoreAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the specified Data Lake Store account information.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure resource group. (required)
     * @param accountName The name of the Data Lake Store account. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters Parameters supplied to update the Data Lake Store account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the account details. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully initiated the update of the account details. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Successfully initiated the update of the account details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsUpdateAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, UpdateDataLakeStoreAccountParameters parameters, final ApiCallback<DataLakeStoreAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<DataLakeStoreAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
