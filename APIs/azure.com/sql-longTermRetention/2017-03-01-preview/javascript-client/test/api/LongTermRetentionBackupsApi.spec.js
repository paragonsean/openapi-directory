/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SqlManagementClient);
  }
}(this, function(expect, SqlManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SqlManagementClient.LongTermRetentionBackupsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('LongTermRetentionBackupsApi', function() {
    describe('longTermRetentionBackupsDelete', function() {
      it('should call longTermRetentionBackupsDelete successfully', function(done) {
        //uncomment below and update the code to test longTermRetentionBackupsDelete
        //instance.longTermRetentionBackupsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('longTermRetentionBackupsDeleteByResourceGroup', function() {
      it('should call longTermRetentionBackupsDeleteByResourceGroup successfully', function(done) {
        //uncomment below and update the code to test longTermRetentionBackupsDeleteByResourceGroup
        //instance.longTermRetentionBackupsDeleteByResourceGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('longTermRetentionBackupsGet', function() {
      it('should call longTermRetentionBackupsGet successfully', function(done) {
        //uncomment below and update the code to test longTermRetentionBackupsGet
        //instance.longTermRetentionBackupsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('longTermRetentionBackupsGetByResourceGroup', function() {
      it('should call longTermRetentionBackupsGetByResourceGroup successfully', function(done) {
        //uncomment below and update the code to test longTermRetentionBackupsGetByResourceGroup
        //instance.longTermRetentionBackupsGetByResourceGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('longTermRetentionBackupsListByDatabase', function() {
      it('should call longTermRetentionBackupsListByDatabase successfully', function(done) {
        //uncomment below and update the code to test longTermRetentionBackupsListByDatabase
        //instance.longTermRetentionBackupsListByDatabase(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('longTermRetentionBackupsListByLocation', function() {
      it('should call longTermRetentionBackupsListByLocation successfully', function(done) {
        //uncomment below and update the code to test longTermRetentionBackupsListByLocation
        //instance.longTermRetentionBackupsListByLocation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('longTermRetentionBackupsListByResourceGroupDatabase', function() {
      it('should call longTermRetentionBackupsListByResourceGroupDatabase successfully', function(done) {
        //uncomment below and update the code to test longTermRetentionBackupsListByResourceGroupDatabase
        //instance.longTermRetentionBackupsListByResourceGroupDatabase(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('longTermRetentionBackupsListByResourceGroupLocation', function() {
      it('should call longTermRetentionBackupsListByResourceGroupLocation successfully', function(done) {
        //uncomment below and update the code to test longTermRetentionBackupsListByResourceGroupLocation
        //instance.longTermRetentionBackupsListByResourceGroupLocation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('longTermRetentionBackupsListByResourceGroupServer', function() {
      it('should call longTermRetentionBackupsListByResourceGroupServer successfully', function(done) {
        //uncomment below and update the code to test longTermRetentionBackupsListByResourceGroupServer
        //instance.longTermRetentionBackupsListByResourceGroupServer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('longTermRetentionBackupsListByServer', function() {
      it('should call longTermRetentionBackupsListByServer successfully', function(done) {
        //uncomment below and update the code to test longTermRetentionBackupsListByServer
        //instance.longTermRetentionBackupsListByServer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
