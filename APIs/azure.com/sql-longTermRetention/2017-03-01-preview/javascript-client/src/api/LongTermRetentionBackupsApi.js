/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LongTermRetentionBackup from '../model/LongTermRetentionBackup';
import LongTermRetentionBackupListResult from '../model/LongTermRetentionBackupListResult';

/**
* LongTermRetentionBackups service.
* @module api/LongTermRetentionBackupsApi
* @version 2017-03-01-preview
*/
export default class LongTermRetentionBackupsApi {

    /**
    * Constructs a new LongTermRetentionBackupsApi. 
    * @alias module:api/LongTermRetentionBackupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the longTermRetentionBackupsDelete operation.
     * @callback module:api/LongTermRetentionBackupsApi~longTermRetentionBackupsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a long term retention backup.
     * @param {String} locationName The location of the database
     * @param {String} longTermRetentionServerName The name of the server
     * @param {String} longTermRetentionDatabaseName The name of the database
     * @param {String} backupName The backup name.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/LongTermRetentionBackupsApi~longTermRetentionBackupsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    longTermRetentionBackupsDelete(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'locationName' is set
      if (locationName === undefined || locationName === null) {
        throw new Error("Missing the required parameter 'locationName' when calling longTermRetentionBackupsDelete");
      }
      // verify the required parameter 'longTermRetentionServerName' is set
      if (longTermRetentionServerName === undefined || longTermRetentionServerName === null) {
        throw new Error("Missing the required parameter 'longTermRetentionServerName' when calling longTermRetentionBackupsDelete");
      }
      // verify the required parameter 'longTermRetentionDatabaseName' is set
      if (longTermRetentionDatabaseName === undefined || longTermRetentionDatabaseName === null) {
        throw new Error("Missing the required parameter 'longTermRetentionDatabaseName' when calling longTermRetentionBackupsDelete");
      }
      // verify the required parameter 'backupName' is set
      if (backupName === undefined || backupName === null) {
        throw new Error("Missing the required parameter 'backupName' when calling longTermRetentionBackupsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling longTermRetentionBackupsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling longTermRetentionBackupsDelete");
      }

      let pathParams = {
        'locationName': locationName,
        'longTermRetentionServerName': longTermRetentionServerName,
        'longTermRetentionDatabaseName': longTermRetentionDatabaseName,
        'backupName': backupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the longTermRetentionBackupsDeleteByResourceGroup operation.
     * @callback module:api/LongTermRetentionBackupsApi~longTermRetentionBackupsDeleteByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a long term retention backup.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} locationName The location of the database
     * @param {String} longTermRetentionServerName The name of the server
     * @param {String} longTermRetentionDatabaseName The name of the database
     * @param {String} backupName The backup name.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/LongTermRetentionBackupsApi~longTermRetentionBackupsDeleteByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    longTermRetentionBackupsDeleteByResourceGroup(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling longTermRetentionBackupsDeleteByResourceGroup");
      }
      // verify the required parameter 'locationName' is set
      if (locationName === undefined || locationName === null) {
        throw new Error("Missing the required parameter 'locationName' when calling longTermRetentionBackupsDeleteByResourceGroup");
      }
      // verify the required parameter 'longTermRetentionServerName' is set
      if (longTermRetentionServerName === undefined || longTermRetentionServerName === null) {
        throw new Error("Missing the required parameter 'longTermRetentionServerName' when calling longTermRetentionBackupsDeleteByResourceGroup");
      }
      // verify the required parameter 'longTermRetentionDatabaseName' is set
      if (longTermRetentionDatabaseName === undefined || longTermRetentionDatabaseName === null) {
        throw new Error("Missing the required parameter 'longTermRetentionDatabaseName' when calling longTermRetentionBackupsDeleteByResourceGroup");
      }
      // verify the required parameter 'backupName' is set
      if (backupName === undefined || backupName === null) {
        throw new Error("Missing the required parameter 'backupName' when calling longTermRetentionBackupsDeleteByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling longTermRetentionBackupsDeleteByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling longTermRetentionBackupsDeleteByResourceGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'locationName': locationName,
        'longTermRetentionServerName': longTermRetentionServerName,
        'longTermRetentionDatabaseName': longTermRetentionDatabaseName,
        'backupName': backupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the longTermRetentionBackupsGet operation.
     * @callback module:api/LongTermRetentionBackupsApi~longTermRetentionBackupsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LongTermRetentionBackup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a long term retention backup.
     * @param {String} locationName The location of the database.
     * @param {String} longTermRetentionServerName The name of the server
     * @param {String} longTermRetentionDatabaseName The name of the database
     * @param {String} backupName The backup name.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/LongTermRetentionBackupsApi~longTermRetentionBackupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LongTermRetentionBackup}
     */
    longTermRetentionBackupsGet(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'locationName' is set
      if (locationName === undefined || locationName === null) {
        throw new Error("Missing the required parameter 'locationName' when calling longTermRetentionBackupsGet");
      }
      // verify the required parameter 'longTermRetentionServerName' is set
      if (longTermRetentionServerName === undefined || longTermRetentionServerName === null) {
        throw new Error("Missing the required parameter 'longTermRetentionServerName' when calling longTermRetentionBackupsGet");
      }
      // verify the required parameter 'longTermRetentionDatabaseName' is set
      if (longTermRetentionDatabaseName === undefined || longTermRetentionDatabaseName === null) {
        throw new Error("Missing the required parameter 'longTermRetentionDatabaseName' when calling longTermRetentionBackupsGet");
      }
      // verify the required parameter 'backupName' is set
      if (backupName === undefined || backupName === null) {
        throw new Error("Missing the required parameter 'backupName' when calling longTermRetentionBackupsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling longTermRetentionBackupsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling longTermRetentionBackupsGet");
      }

      let pathParams = {
        'locationName': locationName,
        'longTermRetentionServerName': longTermRetentionServerName,
        'longTermRetentionDatabaseName': longTermRetentionDatabaseName,
        'backupName': backupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LongTermRetentionBackup;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the longTermRetentionBackupsGetByResourceGroup operation.
     * @callback module:api/LongTermRetentionBackupsApi~longTermRetentionBackupsGetByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LongTermRetentionBackup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a long term retention backup.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} locationName The location of the database.
     * @param {String} longTermRetentionServerName The name of the server
     * @param {String} longTermRetentionDatabaseName The name of the database
     * @param {String} backupName The backup name.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/LongTermRetentionBackupsApi~longTermRetentionBackupsGetByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LongTermRetentionBackup}
     */
    longTermRetentionBackupsGetByResourceGroup(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling longTermRetentionBackupsGetByResourceGroup");
      }
      // verify the required parameter 'locationName' is set
      if (locationName === undefined || locationName === null) {
        throw new Error("Missing the required parameter 'locationName' when calling longTermRetentionBackupsGetByResourceGroup");
      }
      // verify the required parameter 'longTermRetentionServerName' is set
      if (longTermRetentionServerName === undefined || longTermRetentionServerName === null) {
        throw new Error("Missing the required parameter 'longTermRetentionServerName' when calling longTermRetentionBackupsGetByResourceGroup");
      }
      // verify the required parameter 'longTermRetentionDatabaseName' is set
      if (longTermRetentionDatabaseName === undefined || longTermRetentionDatabaseName === null) {
        throw new Error("Missing the required parameter 'longTermRetentionDatabaseName' when calling longTermRetentionBackupsGetByResourceGroup");
      }
      // verify the required parameter 'backupName' is set
      if (backupName === undefined || backupName === null) {
        throw new Error("Missing the required parameter 'backupName' when calling longTermRetentionBackupsGetByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling longTermRetentionBackupsGetByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling longTermRetentionBackupsGetByResourceGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'locationName': locationName,
        'longTermRetentionServerName': longTermRetentionServerName,
        'longTermRetentionDatabaseName': longTermRetentionDatabaseName,
        'backupName': backupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LongTermRetentionBackup;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the longTermRetentionBackupsListByDatabase operation.
     * @callback module:api/LongTermRetentionBackupsApi~longTermRetentionBackupsListByDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LongTermRetentionBackupListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all long term retention backups for a database.
     * @param {String} locationName The location of the database
     * @param {String} longTermRetentionServerName The name of the server
     * @param {String} longTermRetentionDatabaseName The name of the database
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [onlyLatestPerDatabase] Whether or not to only get the latest backup for each database.
     * @param {module:model/String} [databaseState] Whether to query against just live databases, just deleted databases, or all databases.
     * @param {module:api/LongTermRetentionBackupsApi~longTermRetentionBackupsListByDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LongTermRetentionBackupListResult}
     */
    longTermRetentionBackupsListByDatabase(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'locationName' is set
      if (locationName === undefined || locationName === null) {
        throw new Error("Missing the required parameter 'locationName' when calling longTermRetentionBackupsListByDatabase");
      }
      // verify the required parameter 'longTermRetentionServerName' is set
      if (longTermRetentionServerName === undefined || longTermRetentionServerName === null) {
        throw new Error("Missing the required parameter 'longTermRetentionServerName' when calling longTermRetentionBackupsListByDatabase");
      }
      // verify the required parameter 'longTermRetentionDatabaseName' is set
      if (longTermRetentionDatabaseName === undefined || longTermRetentionDatabaseName === null) {
        throw new Error("Missing the required parameter 'longTermRetentionDatabaseName' when calling longTermRetentionBackupsListByDatabase");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling longTermRetentionBackupsListByDatabase");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling longTermRetentionBackupsListByDatabase");
      }

      let pathParams = {
        'locationName': locationName,
        'longTermRetentionServerName': longTermRetentionServerName,
        'longTermRetentionDatabaseName': longTermRetentionDatabaseName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'onlyLatestPerDatabase': opts['onlyLatestPerDatabase'],
        'databaseState': opts['databaseState'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LongTermRetentionBackupListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the longTermRetentionBackupsListByLocation operation.
     * @callback module:api/LongTermRetentionBackupsApi~longTermRetentionBackupsListByLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LongTermRetentionBackupListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the long term retention backups for a given location.
     * @param {String} locationName The location of the database
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [onlyLatestPerDatabase] Whether or not to only get the latest backup for each database.
     * @param {module:model/String} [databaseState] Whether to query against just live databases, just deleted databases, or all databases.
     * @param {module:api/LongTermRetentionBackupsApi~longTermRetentionBackupsListByLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LongTermRetentionBackupListResult}
     */
    longTermRetentionBackupsListByLocation(locationName, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'locationName' is set
      if (locationName === undefined || locationName === null) {
        throw new Error("Missing the required parameter 'locationName' when calling longTermRetentionBackupsListByLocation");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling longTermRetentionBackupsListByLocation");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling longTermRetentionBackupsListByLocation");
      }

      let pathParams = {
        'locationName': locationName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'onlyLatestPerDatabase': opts['onlyLatestPerDatabase'],
        'databaseState': opts['databaseState'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LongTermRetentionBackupListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the longTermRetentionBackupsListByResourceGroupDatabase operation.
     * @callback module:api/LongTermRetentionBackupsApi~longTermRetentionBackupsListByResourceGroupDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LongTermRetentionBackupListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all long term retention backups for a database.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} locationName The location of the database
     * @param {String} longTermRetentionServerName The name of the server
     * @param {String} longTermRetentionDatabaseName The name of the database
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [onlyLatestPerDatabase] Whether or not to only get the latest backup for each database.
     * @param {module:model/String} [databaseState] Whether to query against just live databases, just deleted databases, or all databases.
     * @param {module:api/LongTermRetentionBackupsApi~longTermRetentionBackupsListByResourceGroupDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LongTermRetentionBackupListResult}
     */
    longTermRetentionBackupsListByResourceGroupDatabase(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling longTermRetentionBackupsListByResourceGroupDatabase");
      }
      // verify the required parameter 'locationName' is set
      if (locationName === undefined || locationName === null) {
        throw new Error("Missing the required parameter 'locationName' when calling longTermRetentionBackupsListByResourceGroupDatabase");
      }
      // verify the required parameter 'longTermRetentionServerName' is set
      if (longTermRetentionServerName === undefined || longTermRetentionServerName === null) {
        throw new Error("Missing the required parameter 'longTermRetentionServerName' when calling longTermRetentionBackupsListByResourceGroupDatabase");
      }
      // verify the required parameter 'longTermRetentionDatabaseName' is set
      if (longTermRetentionDatabaseName === undefined || longTermRetentionDatabaseName === null) {
        throw new Error("Missing the required parameter 'longTermRetentionDatabaseName' when calling longTermRetentionBackupsListByResourceGroupDatabase");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling longTermRetentionBackupsListByResourceGroupDatabase");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling longTermRetentionBackupsListByResourceGroupDatabase");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'locationName': locationName,
        'longTermRetentionServerName': longTermRetentionServerName,
        'longTermRetentionDatabaseName': longTermRetentionDatabaseName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'onlyLatestPerDatabase': opts['onlyLatestPerDatabase'],
        'databaseState': opts['databaseState'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LongTermRetentionBackupListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the longTermRetentionBackupsListByResourceGroupLocation operation.
     * @callback module:api/LongTermRetentionBackupsApi~longTermRetentionBackupsListByResourceGroupLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LongTermRetentionBackupListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the long term retention backups for a given location.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} locationName The location of the database
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [onlyLatestPerDatabase] Whether or not to only get the latest backup for each database.
     * @param {module:model/String} [databaseState] Whether to query against just live databases, just deleted databases, or all databases.
     * @param {module:api/LongTermRetentionBackupsApi~longTermRetentionBackupsListByResourceGroupLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LongTermRetentionBackupListResult}
     */
    longTermRetentionBackupsListByResourceGroupLocation(resourceGroupName, locationName, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling longTermRetentionBackupsListByResourceGroupLocation");
      }
      // verify the required parameter 'locationName' is set
      if (locationName === undefined || locationName === null) {
        throw new Error("Missing the required parameter 'locationName' when calling longTermRetentionBackupsListByResourceGroupLocation");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling longTermRetentionBackupsListByResourceGroupLocation");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling longTermRetentionBackupsListByResourceGroupLocation");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'locationName': locationName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'onlyLatestPerDatabase': opts['onlyLatestPerDatabase'],
        'databaseState': opts['databaseState'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LongTermRetentionBackupListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the longTermRetentionBackupsListByResourceGroupServer operation.
     * @callback module:api/LongTermRetentionBackupsApi~longTermRetentionBackupsListByResourceGroupServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LongTermRetentionBackupListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the long term retention backups for a given server.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} locationName The location of the database
     * @param {String} longTermRetentionServerName The name of the server
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [onlyLatestPerDatabase] Whether or not to only get the latest backup for each database.
     * @param {module:model/String} [databaseState] Whether to query against just live databases, just deleted databases, or all databases.
     * @param {module:api/LongTermRetentionBackupsApi~longTermRetentionBackupsListByResourceGroupServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LongTermRetentionBackupListResult}
     */
    longTermRetentionBackupsListByResourceGroupServer(resourceGroupName, locationName, longTermRetentionServerName, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling longTermRetentionBackupsListByResourceGroupServer");
      }
      // verify the required parameter 'locationName' is set
      if (locationName === undefined || locationName === null) {
        throw new Error("Missing the required parameter 'locationName' when calling longTermRetentionBackupsListByResourceGroupServer");
      }
      // verify the required parameter 'longTermRetentionServerName' is set
      if (longTermRetentionServerName === undefined || longTermRetentionServerName === null) {
        throw new Error("Missing the required parameter 'longTermRetentionServerName' when calling longTermRetentionBackupsListByResourceGroupServer");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling longTermRetentionBackupsListByResourceGroupServer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling longTermRetentionBackupsListByResourceGroupServer");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'locationName': locationName,
        'longTermRetentionServerName': longTermRetentionServerName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'onlyLatestPerDatabase': opts['onlyLatestPerDatabase'],
        'databaseState': opts['databaseState'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LongTermRetentionBackupListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the longTermRetentionBackupsListByServer operation.
     * @callback module:api/LongTermRetentionBackupsApi~longTermRetentionBackupsListByServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LongTermRetentionBackupListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the long term retention backups for a given server.
     * @param {String} locationName The location of the database
     * @param {String} longTermRetentionServerName The name of the server
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [onlyLatestPerDatabase] Whether or not to only get the latest backup for each database.
     * @param {module:model/String} [databaseState] Whether to query against just live databases, just deleted databases, or all databases.
     * @param {module:api/LongTermRetentionBackupsApi~longTermRetentionBackupsListByServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LongTermRetentionBackupListResult}
     */
    longTermRetentionBackupsListByServer(locationName, longTermRetentionServerName, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'locationName' is set
      if (locationName === undefined || locationName === null) {
        throw new Error("Missing the required parameter 'locationName' when calling longTermRetentionBackupsListByServer");
      }
      // verify the required parameter 'longTermRetentionServerName' is set
      if (longTermRetentionServerName === undefined || longTermRetentionServerName === null) {
        throw new Error("Missing the required parameter 'longTermRetentionServerName' when calling longTermRetentionBackupsListByServer");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling longTermRetentionBackupsListByServer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling longTermRetentionBackupsListByServer");
      }

      let pathParams = {
        'locationName': locationName,
        'longTermRetentionServerName': longTermRetentionServerName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'onlyLatestPerDatabase': opts['onlyLatestPerDatabase'],
        'databaseState': opts['databaseState'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LongTermRetentionBackupListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
