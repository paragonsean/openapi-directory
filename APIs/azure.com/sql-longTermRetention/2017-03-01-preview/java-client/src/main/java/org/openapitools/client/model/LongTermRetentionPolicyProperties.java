/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a long term retention policy
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:37:51.944897-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LongTermRetentionPolicyProperties {
  public static final String SERIALIZED_NAME_MONTHLY_RETENTION = "monthlyRetention";
  @SerializedName(SERIALIZED_NAME_MONTHLY_RETENTION)
  private String monthlyRetention;

  public static final String SERIALIZED_NAME_WEEK_OF_YEAR = "weekOfYear";
  @SerializedName(SERIALIZED_NAME_WEEK_OF_YEAR)
  private Integer weekOfYear;

  public static final String SERIALIZED_NAME_WEEKLY_RETENTION = "weeklyRetention";
  @SerializedName(SERIALIZED_NAME_WEEKLY_RETENTION)
  private String weeklyRetention;

  public static final String SERIALIZED_NAME_YEARLY_RETENTION = "yearlyRetention";
  @SerializedName(SERIALIZED_NAME_YEARLY_RETENTION)
  private String yearlyRetention;

  public LongTermRetentionPolicyProperties() {
  }

  public LongTermRetentionPolicyProperties monthlyRetention(String monthlyRetention) {
    this.monthlyRetention = monthlyRetention;
    return this;
  }

  /**
   * The monthly retention policy for an LTR backup in an ISO 8601 format.
   * @return monthlyRetention
   */
  @javax.annotation.Nullable
  public String getMonthlyRetention() {
    return monthlyRetention;
  }

  public void setMonthlyRetention(String monthlyRetention) {
    this.monthlyRetention = monthlyRetention;
  }


  public LongTermRetentionPolicyProperties weekOfYear(Integer weekOfYear) {
    this.weekOfYear = weekOfYear;
    return this;
  }

  /**
   * The week of year to take the yearly backup in an ISO 8601 format.
   * @return weekOfYear
   */
  @javax.annotation.Nullable
  public Integer getWeekOfYear() {
    return weekOfYear;
  }

  public void setWeekOfYear(Integer weekOfYear) {
    this.weekOfYear = weekOfYear;
  }


  public LongTermRetentionPolicyProperties weeklyRetention(String weeklyRetention) {
    this.weeklyRetention = weeklyRetention;
    return this;
  }

  /**
   * The weekly retention policy for an LTR backup in an ISO 8601 format.
   * @return weeklyRetention
   */
  @javax.annotation.Nullable
  public String getWeeklyRetention() {
    return weeklyRetention;
  }

  public void setWeeklyRetention(String weeklyRetention) {
    this.weeklyRetention = weeklyRetention;
  }


  public LongTermRetentionPolicyProperties yearlyRetention(String yearlyRetention) {
    this.yearlyRetention = yearlyRetention;
    return this;
  }

  /**
   * The yearly retention policy for an LTR backup in an ISO 8601 format.
   * @return yearlyRetention
   */
  @javax.annotation.Nullable
  public String getYearlyRetention() {
    return yearlyRetention;
  }

  public void setYearlyRetention(String yearlyRetention) {
    this.yearlyRetention = yearlyRetention;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LongTermRetentionPolicyProperties longTermRetentionPolicyProperties = (LongTermRetentionPolicyProperties) o;
    return Objects.equals(this.monthlyRetention, longTermRetentionPolicyProperties.monthlyRetention) &&
        Objects.equals(this.weekOfYear, longTermRetentionPolicyProperties.weekOfYear) &&
        Objects.equals(this.weeklyRetention, longTermRetentionPolicyProperties.weeklyRetention) &&
        Objects.equals(this.yearlyRetention, longTermRetentionPolicyProperties.yearlyRetention);
  }

  @Override
  public int hashCode() {
    return Objects.hash(monthlyRetention, weekOfYear, weeklyRetention, yearlyRetention);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LongTermRetentionPolicyProperties {\n");
    sb.append("    monthlyRetention: ").append(toIndentedString(monthlyRetention)).append("\n");
    sb.append("    weekOfYear: ").append(toIndentedString(weekOfYear)).append("\n");
    sb.append("    weeklyRetention: ").append(toIndentedString(weeklyRetention)).append("\n");
    sb.append("    yearlyRetention: ").append(toIndentedString(yearlyRetention)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("monthlyRetention");
    openapiFields.add("weekOfYear");
    openapiFields.add("weeklyRetention");
    openapiFields.add("yearlyRetention");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LongTermRetentionPolicyProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LongTermRetentionPolicyProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LongTermRetentionPolicyProperties is not found in the empty JSON string", LongTermRetentionPolicyProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LongTermRetentionPolicyProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LongTermRetentionPolicyProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("monthlyRetention") != null && !jsonObj.get("monthlyRetention").isJsonNull()) && !jsonObj.get("monthlyRetention").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `monthlyRetention` to be a primitive type in the JSON string but got `%s`", jsonObj.get("monthlyRetention").toString()));
      }
      if ((jsonObj.get("weeklyRetention") != null && !jsonObj.get("weeklyRetention").isJsonNull()) && !jsonObj.get("weeklyRetention").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `weeklyRetention` to be a primitive type in the JSON string but got `%s`", jsonObj.get("weeklyRetention").toString()));
      }
      if ((jsonObj.get("yearlyRetention") != null && !jsonObj.get("yearlyRetention").isJsonNull()) && !jsonObj.get("yearlyRetention").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yearlyRetention` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yearlyRetention").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LongTermRetentionPolicyProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LongTermRetentionPolicyProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LongTermRetentionPolicyProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LongTermRetentionPolicyProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<LongTermRetentionPolicyProperties>() {
           @Override
           public void write(JsonWriter out, LongTermRetentionPolicyProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LongTermRetentionPolicyProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LongTermRetentionPolicyProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LongTermRetentionPolicyProperties
   * @throws IOException if the JSON string is invalid with respect to LongTermRetentionPolicyProperties
   */
  public static LongTermRetentionPolicyProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LongTermRetentionPolicyProperties.class);
  }

  /**
   * Convert an instance of LongTermRetentionPolicyProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

