/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a long term retention backup
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:37:51.944897-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LongTermRetentionBackupProperties {
  public static final String SERIALIZED_NAME_BACKUP_EXPIRATION_TIME = "backupExpirationTime";
  @SerializedName(SERIALIZED_NAME_BACKUP_EXPIRATION_TIME)
  private OffsetDateTime backupExpirationTime;

  public static final String SERIALIZED_NAME_BACKUP_TIME = "backupTime";
  @SerializedName(SERIALIZED_NAME_BACKUP_TIME)
  private OffsetDateTime backupTime;

  public static final String SERIALIZED_NAME_DATABASE_DELETION_TIME = "databaseDeletionTime";
  @SerializedName(SERIALIZED_NAME_DATABASE_DELETION_TIME)
  private OffsetDateTime databaseDeletionTime;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "databaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_SERVER_CREATE_TIME = "serverCreateTime";
  @SerializedName(SERIALIZED_NAME_SERVER_CREATE_TIME)
  private OffsetDateTime serverCreateTime;

  public static final String SERIALIZED_NAME_SERVER_NAME = "serverName";
  @SerializedName(SERIALIZED_NAME_SERVER_NAME)
  private String serverName;

  public LongTermRetentionBackupProperties() {
  }

  public LongTermRetentionBackupProperties(
     OffsetDateTime backupExpirationTime, 
     OffsetDateTime backupTime, 
     OffsetDateTime databaseDeletionTime, 
     String databaseName, 
     OffsetDateTime serverCreateTime, 
     String serverName
  ) {
    this();
    this.backupExpirationTime = backupExpirationTime;
    this.backupTime = backupTime;
    this.databaseDeletionTime = databaseDeletionTime;
    this.databaseName = databaseName;
    this.serverCreateTime = serverCreateTime;
    this.serverName = serverName;
  }

  /**
   * The time the long term retention backup will expire.
   * @return backupExpirationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBackupExpirationTime() {
    return backupExpirationTime;
  }



  /**
   * The time the backup was taken
   * @return backupTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBackupTime() {
    return backupTime;
  }



  /**
   * The delete time of the database
   * @return databaseDeletionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDatabaseDeletionTime() {
    return databaseDeletionTime;
  }



  /**
   * The name of the database the backup belong to
   * @return databaseName
   */
  @javax.annotation.Nullable
  public String getDatabaseName() {
    return databaseName;
  }



  /**
   * The create time of the server.
   * @return serverCreateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getServerCreateTime() {
    return serverCreateTime;
  }



  /**
   * The server name that the backup database belong to.
   * @return serverName
   */
  @javax.annotation.Nullable
  public String getServerName() {
    return serverName;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LongTermRetentionBackupProperties longTermRetentionBackupProperties = (LongTermRetentionBackupProperties) o;
    return Objects.equals(this.backupExpirationTime, longTermRetentionBackupProperties.backupExpirationTime) &&
        Objects.equals(this.backupTime, longTermRetentionBackupProperties.backupTime) &&
        Objects.equals(this.databaseDeletionTime, longTermRetentionBackupProperties.databaseDeletionTime) &&
        Objects.equals(this.databaseName, longTermRetentionBackupProperties.databaseName) &&
        Objects.equals(this.serverCreateTime, longTermRetentionBackupProperties.serverCreateTime) &&
        Objects.equals(this.serverName, longTermRetentionBackupProperties.serverName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupExpirationTime, backupTime, databaseDeletionTime, databaseName, serverCreateTime, serverName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LongTermRetentionBackupProperties {\n");
    sb.append("    backupExpirationTime: ").append(toIndentedString(backupExpirationTime)).append("\n");
    sb.append("    backupTime: ").append(toIndentedString(backupTime)).append("\n");
    sb.append("    databaseDeletionTime: ").append(toIndentedString(databaseDeletionTime)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    serverCreateTime: ").append(toIndentedString(serverCreateTime)).append("\n");
    sb.append("    serverName: ").append(toIndentedString(serverName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupExpirationTime");
    openapiFields.add("backupTime");
    openapiFields.add("databaseDeletionTime");
    openapiFields.add("databaseName");
    openapiFields.add("serverCreateTime");
    openapiFields.add("serverName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LongTermRetentionBackupProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LongTermRetentionBackupProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LongTermRetentionBackupProperties is not found in the empty JSON string", LongTermRetentionBackupProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LongTermRetentionBackupProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LongTermRetentionBackupProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("databaseName") != null && !jsonObj.get("databaseName").isJsonNull()) && !jsonObj.get("databaseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseName").toString()));
      }
      if ((jsonObj.get("serverName") != null && !jsonObj.get("serverName").isJsonNull()) && !jsonObj.get("serverName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LongTermRetentionBackupProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LongTermRetentionBackupProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LongTermRetentionBackupProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LongTermRetentionBackupProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<LongTermRetentionBackupProperties>() {
           @Override
           public void write(JsonWriter out, LongTermRetentionBackupProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LongTermRetentionBackupProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LongTermRetentionBackupProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LongTermRetentionBackupProperties
   * @throws IOException if the JSON string is invalid with respect to LongTermRetentionBackupProperties
   */
  public static LongTermRetentionBackupProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LongTermRetentionBackupProperties.class);
  }

  /**
   * Convert an instance of LongTermRetentionBackupProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

