/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.LongTermRetentionBackup;
import org.openapitools.client.model.LongTermRetentionBackupListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LongTermRetentionBackupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LongTermRetentionBackupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LongTermRetentionBackupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for longTermRetentionBackupsDelete
     * @param locationName The location of the database (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param longTermRetentionDatabaseName The name of the database (required)
     * @param backupName The backup name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the backup. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidLongTermRetentionBackupId - Invalid long term retention backup identifier.   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call longTermRetentionBackupsDeleteCall(String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String backupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}"
            .replace("{" + "locationName" + "}", localVarApiClient.escapeString(locationName.toString()))
            .replace("{" + "longTermRetentionServerName" + "}", localVarApiClient.escapeString(longTermRetentionServerName.toString()))
            .replace("{" + "longTermRetentionDatabaseName" + "}", localVarApiClient.escapeString(longTermRetentionDatabaseName.toString()))
            .replace("{" + "backupName" + "}", localVarApiClient.escapeString(backupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call longTermRetentionBackupsDeleteValidateBeforeCall(String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String backupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'locationName' is set
        if (locationName == null) {
            throw new ApiException("Missing the required parameter 'locationName' when calling longTermRetentionBackupsDelete(Async)");
        }

        // verify the required parameter 'longTermRetentionServerName' is set
        if (longTermRetentionServerName == null) {
            throw new ApiException("Missing the required parameter 'longTermRetentionServerName' when calling longTermRetentionBackupsDelete(Async)");
        }

        // verify the required parameter 'longTermRetentionDatabaseName' is set
        if (longTermRetentionDatabaseName == null) {
            throw new ApiException("Missing the required parameter 'longTermRetentionDatabaseName' when calling longTermRetentionBackupsDelete(Async)");
        }

        // verify the required parameter 'backupName' is set
        if (backupName == null) {
            throw new ApiException("Missing the required parameter 'backupName' when calling longTermRetentionBackupsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling longTermRetentionBackupsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling longTermRetentionBackupsDelete(Async)");
        }

        return longTermRetentionBackupsDeleteCall(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a long term retention backup.
     * @param locationName The location of the database (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param longTermRetentionDatabaseName The name of the database (required)
     * @param backupName The backup name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the backup. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidLongTermRetentionBackupId - Invalid long term retention backup identifier.   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public void longTermRetentionBackupsDelete(String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String backupName, String subscriptionId, String apiVersion) throws ApiException {
        longTermRetentionBackupsDeleteWithHttpInfo(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, subscriptionId, apiVersion);
    }

    /**
     * 
     * Deletes a long term retention backup.
     * @param locationName The location of the database (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param longTermRetentionDatabaseName The name of the database (required)
     * @param backupName The backup name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the backup. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidLongTermRetentionBackupId - Invalid long term retention backup identifier.   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> longTermRetentionBackupsDeleteWithHttpInfo(String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String backupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = longTermRetentionBackupsDeleteValidateBeforeCall(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a long term retention backup.
     * @param locationName The location of the database (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param longTermRetentionDatabaseName The name of the database (required)
     * @param backupName The backup name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the backup. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidLongTermRetentionBackupId - Invalid long term retention backup identifier.   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call longTermRetentionBackupsDeleteAsync(String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String backupName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = longTermRetentionBackupsDeleteValidateBeforeCall(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for longTermRetentionBackupsDeleteByResourceGroup
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param locationName The location of the database (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param longTermRetentionDatabaseName The name of the database (required)
     * @param backupName The backup name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the backup. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidLongTermRetentionBackupId - Invalid long term retention backup identifier.   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call longTermRetentionBackupsDeleteByResourceGroupCall(String resourceGroupName, String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String backupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "locationName" + "}", localVarApiClient.escapeString(locationName.toString()))
            .replace("{" + "longTermRetentionServerName" + "}", localVarApiClient.escapeString(longTermRetentionServerName.toString()))
            .replace("{" + "longTermRetentionDatabaseName" + "}", localVarApiClient.escapeString(longTermRetentionDatabaseName.toString()))
            .replace("{" + "backupName" + "}", localVarApiClient.escapeString(backupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call longTermRetentionBackupsDeleteByResourceGroupValidateBeforeCall(String resourceGroupName, String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String backupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling longTermRetentionBackupsDeleteByResourceGroup(Async)");
        }

        // verify the required parameter 'locationName' is set
        if (locationName == null) {
            throw new ApiException("Missing the required parameter 'locationName' when calling longTermRetentionBackupsDeleteByResourceGroup(Async)");
        }

        // verify the required parameter 'longTermRetentionServerName' is set
        if (longTermRetentionServerName == null) {
            throw new ApiException("Missing the required parameter 'longTermRetentionServerName' when calling longTermRetentionBackupsDeleteByResourceGroup(Async)");
        }

        // verify the required parameter 'longTermRetentionDatabaseName' is set
        if (longTermRetentionDatabaseName == null) {
            throw new ApiException("Missing the required parameter 'longTermRetentionDatabaseName' when calling longTermRetentionBackupsDeleteByResourceGroup(Async)");
        }

        // verify the required parameter 'backupName' is set
        if (backupName == null) {
            throw new ApiException("Missing the required parameter 'backupName' when calling longTermRetentionBackupsDeleteByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling longTermRetentionBackupsDeleteByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling longTermRetentionBackupsDeleteByResourceGroup(Async)");
        }

        return longTermRetentionBackupsDeleteByResourceGroupCall(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a long term retention backup.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param locationName The location of the database (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param longTermRetentionDatabaseName The name of the database (required)
     * @param backupName The backup name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the backup. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidLongTermRetentionBackupId - Invalid long term retention backup identifier.   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public void longTermRetentionBackupsDeleteByResourceGroup(String resourceGroupName, String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String backupName, String subscriptionId, String apiVersion) throws ApiException {
        longTermRetentionBackupsDeleteByResourceGroupWithHttpInfo(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, subscriptionId, apiVersion);
    }

    /**
     * 
     * Deletes a long term retention backup.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param locationName The location of the database (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param longTermRetentionDatabaseName The name of the database (required)
     * @param backupName The backup name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the backup. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidLongTermRetentionBackupId - Invalid long term retention backup identifier.   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> longTermRetentionBackupsDeleteByResourceGroupWithHttpInfo(String resourceGroupName, String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String backupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = longTermRetentionBackupsDeleteByResourceGroupValidateBeforeCall(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a long term retention backup.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param locationName The location of the database (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param longTermRetentionDatabaseName The name of the database (required)
     * @param backupName The backup name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the backup. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidLongTermRetentionBackupId - Invalid long term retention backup identifier.   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call longTermRetentionBackupsDeleteByResourceGroupAsync(String resourceGroupName, String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String backupName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = longTermRetentionBackupsDeleteByResourceGroupValidateBeforeCall(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for longTermRetentionBackupsGet
     * @param locationName The location of the database. (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param longTermRetentionDatabaseName The name of the database (required)
     * @param backupName The backup name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the backup. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidLongTermRetentionBackupId - Invalid long term retention backup identifier.   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call longTermRetentionBackupsGetCall(String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String backupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}"
            .replace("{" + "locationName" + "}", localVarApiClient.escapeString(locationName.toString()))
            .replace("{" + "longTermRetentionServerName" + "}", localVarApiClient.escapeString(longTermRetentionServerName.toString()))
            .replace("{" + "longTermRetentionDatabaseName" + "}", localVarApiClient.escapeString(longTermRetentionDatabaseName.toString()))
            .replace("{" + "backupName" + "}", localVarApiClient.escapeString(backupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call longTermRetentionBackupsGetValidateBeforeCall(String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String backupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'locationName' is set
        if (locationName == null) {
            throw new ApiException("Missing the required parameter 'locationName' when calling longTermRetentionBackupsGet(Async)");
        }

        // verify the required parameter 'longTermRetentionServerName' is set
        if (longTermRetentionServerName == null) {
            throw new ApiException("Missing the required parameter 'longTermRetentionServerName' when calling longTermRetentionBackupsGet(Async)");
        }

        // verify the required parameter 'longTermRetentionDatabaseName' is set
        if (longTermRetentionDatabaseName == null) {
            throw new ApiException("Missing the required parameter 'longTermRetentionDatabaseName' when calling longTermRetentionBackupsGet(Async)");
        }

        // verify the required parameter 'backupName' is set
        if (backupName == null) {
            throw new ApiException("Missing the required parameter 'backupName' when calling longTermRetentionBackupsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling longTermRetentionBackupsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling longTermRetentionBackupsGet(Async)");
        }

        return longTermRetentionBackupsGetCall(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets a long term retention backup.
     * @param locationName The location of the database. (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param longTermRetentionDatabaseName The name of the database (required)
     * @param backupName The backup name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return LongTermRetentionBackup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the backup. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidLongTermRetentionBackupId - Invalid long term retention backup identifier.   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public LongTermRetentionBackup longTermRetentionBackupsGet(String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String backupName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<LongTermRetentionBackup> localVarResp = longTermRetentionBackupsGetWithHttpInfo(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a long term retention backup.
     * @param locationName The location of the database. (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param longTermRetentionDatabaseName The name of the database (required)
     * @param backupName The backup name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;LongTermRetentionBackup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the backup. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidLongTermRetentionBackupId - Invalid long term retention backup identifier.   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LongTermRetentionBackup> longTermRetentionBackupsGetWithHttpInfo(String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String backupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = longTermRetentionBackupsGetValidateBeforeCall(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<LongTermRetentionBackup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a long term retention backup.
     * @param locationName The location of the database. (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param longTermRetentionDatabaseName The name of the database (required)
     * @param backupName The backup name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the backup. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidLongTermRetentionBackupId - Invalid long term retention backup identifier.   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call longTermRetentionBackupsGetAsync(String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String backupName, String subscriptionId, String apiVersion, final ApiCallback<LongTermRetentionBackup> _callback) throws ApiException {

        okhttp3.Call localVarCall = longTermRetentionBackupsGetValidateBeforeCall(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<LongTermRetentionBackup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for longTermRetentionBackupsGetByResourceGroup
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param locationName The location of the database. (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param longTermRetentionDatabaseName The name of the database (required)
     * @param backupName The backup name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the backup. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidLongTermRetentionBackupId - Invalid long term retention backup identifier.   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call longTermRetentionBackupsGetByResourceGroupCall(String resourceGroupName, String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String backupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "locationName" + "}", localVarApiClient.escapeString(locationName.toString()))
            .replace("{" + "longTermRetentionServerName" + "}", localVarApiClient.escapeString(longTermRetentionServerName.toString()))
            .replace("{" + "longTermRetentionDatabaseName" + "}", localVarApiClient.escapeString(longTermRetentionDatabaseName.toString()))
            .replace("{" + "backupName" + "}", localVarApiClient.escapeString(backupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call longTermRetentionBackupsGetByResourceGroupValidateBeforeCall(String resourceGroupName, String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String backupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling longTermRetentionBackupsGetByResourceGroup(Async)");
        }

        // verify the required parameter 'locationName' is set
        if (locationName == null) {
            throw new ApiException("Missing the required parameter 'locationName' when calling longTermRetentionBackupsGetByResourceGroup(Async)");
        }

        // verify the required parameter 'longTermRetentionServerName' is set
        if (longTermRetentionServerName == null) {
            throw new ApiException("Missing the required parameter 'longTermRetentionServerName' when calling longTermRetentionBackupsGetByResourceGroup(Async)");
        }

        // verify the required parameter 'longTermRetentionDatabaseName' is set
        if (longTermRetentionDatabaseName == null) {
            throw new ApiException("Missing the required parameter 'longTermRetentionDatabaseName' when calling longTermRetentionBackupsGetByResourceGroup(Async)");
        }

        // verify the required parameter 'backupName' is set
        if (backupName == null) {
            throw new ApiException("Missing the required parameter 'backupName' when calling longTermRetentionBackupsGetByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling longTermRetentionBackupsGetByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling longTermRetentionBackupsGetByResourceGroup(Async)");
        }

        return longTermRetentionBackupsGetByResourceGroupCall(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets a long term retention backup.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param locationName The location of the database. (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param longTermRetentionDatabaseName The name of the database (required)
     * @param backupName The backup name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return LongTermRetentionBackup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the backup. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidLongTermRetentionBackupId - Invalid long term retention backup identifier.   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public LongTermRetentionBackup longTermRetentionBackupsGetByResourceGroup(String resourceGroupName, String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String backupName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<LongTermRetentionBackup> localVarResp = longTermRetentionBackupsGetByResourceGroupWithHttpInfo(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a long term retention backup.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param locationName The location of the database. (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param longTermRetentionDatabaseName The name of the database (required)
     * @param backupName The backup name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;LongTermRetentionBackup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the backup. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidLongTermRetentionBackupId - Invalid long term retention backup identifier.   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LongTermRetentionBackup> longTermRetentionBackupsGetByResourceGroupWithHttpInfo(String resourceGroupName, String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String backupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = longTermRetentionBackupsGetByResourceGroupValidateBeforeCall(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<LongTermRetentionBackup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a long term retention backup.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param locationName The location of the database. (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param longTermRetentionDatabaseName The name of the database (required)
     * @param backupName The backup name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the backup. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidLongTermRetentionBackupId - Invalid long term retention backup identifier.   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 ResourceNotFound - The requested resource was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call longTermRetentionBackupsGetByResourceGroupAsync(String resourceGroupName, String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String backupName, String subscriptionId, String apiVersion, final ApiCallback<LongTermRetentionBackup> _callback) throws ApiException {

        okhttp3.Call localVarCall = longTermRetentionBackupsGetByResourceGroupValidateBeforeCall(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<LongTermRetentionBackup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for longTermRetentionBackupsListByDatabase
     * @param locationName The location of the database (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param longTermRetentionDatabaseName The name of the database (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database. (optional)
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call longTermRetentionBackupsListByDatabaseCall(String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups"
            .replace("{" + "locationName" + "}", localVarApiClient.escapeString(locationName.toString()))
            .replace("{" + "longTermRetentionServerName" + "}", localVarApiClient.escapeString(longTermRetentionServerName.toString()))
            .replace("{" + "longTermRetentionDatabaseName" + "}", localVarApiClient.escapeString(longTermRetentionDatabaseName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (onlyLatestPerDatabase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyLatestPerDatabase", onlyLatestPerDatabase));
        }

        if (databaseState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("databaseState", databaseState));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call longTermRetentionBackupsListByDatabaseValidateBeforeCall(String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'locationName' is set
        if (locationName == null) {
            throw new ApiException("Missing the required parameter 'locationName' when calling longTermRetentionBackupsListByDatabase(Async)");
        }

        // verify the required parameter 'longTermRetentionServerName' is set
        if (longTermRetentionServerName == null) {
            throw new ApiException("Missing the required parameter 'longTermRetentionServerName' when calling longTermRetentionBackupsListByDatabase(Async)");
        }

        // verify the required parameter 'longTermRetentionDatabaseName' is set
        if (longTermRetentionDatabaseName == null) {
            throw new ApiException("Missing the required parameter 'longTermRetentionDatabaseName' when calling longTermRetentionBackupsListByDatabase(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling longTermRetentionBackupsListByDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling longTermRetentionBackupsListByDatabase(Async)");
        }

        return longTermRetentionBackupsListByDatabaseCall(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, subscriptionId, apiVersion, onlyLatestPerDatabase, databaseState, _callback);

    }

    /**
     * 
     * Lists all long term retention backups for a database.
     * @param locationName The location of the database (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param longTermRetentionDatabaseName The name of the database (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database. (optional)
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. (optional)
     * @return LongTermRetentionBackupListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public LongTermRetentionBackupListResult longTermRetentionBackupsListByDatabase(String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState) throws ApiException {
        ApiResponse<LongTermRetentionBackupListResult> localVarResp = longTermRetentionBackupsListByDatabaseWithHttpInfo(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, subscriptionId, apiVersion, onlyLatestPerDatabase, databaseState);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all long term retention backups for a database.
     * @param locationName The location of the database (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param longTermRetentionDatabaseName The name of the database (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database. (optional)
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. (optional)
     * @return ApiResponse&lt;LongTermRetentionBackupListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LongTermRetentionBackupListResult> longTermRetentionBackupsListByDatabaseWithHttpInfo(String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState) throws ApiException {
        okhttp3.Call localVarCall = longTermRetentionBackupsListByDatabaseValidateBeforeCall(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, subscriptionId, apiVersion, onlyLatestPerDatabase, databaseState, null);
        Type localVarReturnType = new TypeToken<LongTermRetentionBackupListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all long term retention backups for a database.
     * @param locationName The location of the database (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param longTermRetentionDatabaseName The name of the database (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database. (optional)
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call longTermRetentionBackupsListByDatabaseAsync(String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState, final ApiCallback<LongTermRetentionBackupListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = longTermRetentionBackupsListByDatabaseValidateBeforeCall(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, subscriptionId, apiVersion, onlyLatestPerDatabase, databaseState, _callback);
        Type localVarReturnType = new TypeToken<LongTermRetentionBackupListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for longTermRetentionBackupsListByLocation
     * @param locationName The location of the database (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database. (optional)
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call longTermRetentionBackupsListByLocationCall(String locationName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups"
            .replace("{" + "locationName" + "}", localVarApiClient.escapeString(locationName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (onlyLatestPerDatabase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyLatestPerDatabase", onlyLatestPerDatabase));
        }

        if (databaseState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("databaseState", databaseState));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call longTermRetentionBackupsListByLocationValidateBeforeCall(String locationName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'locationName' is set
        if (locationName == null) {
            throw new ApiException("Missing the required parameter 'locationName' when calling longTermRetentionBackupsListByLocation(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling longTermRetentionBackupsListByLocation(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling longTermRetentionBackupsListByLocation(Async)");
        }

        return longTermRetentionBackupsListByLocationCall(locationName, subscriptionId, apiVersion, onlyLatestPerDatabase, databaseState, _callback);

    }

    /**
     * 
     * Lists the long term retention backups for a given location.
     * @param locationName The location of the database (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database. (optional)
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. (optional)
     * @return LongTermRetentionBackupListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public LongTermRetentionBackupListResult longTermRetentionBackupsListByLocation(String locationName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState) throws ApiException {
        ApiResponse<LongTermRetentionBackupListResult> localVarResp = longTermRetentionBackupsListByLocationWithHttpInfo(locationName, subscriptionId, apiVersion, onlyLatestPerDatabase, databaseState);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the long term retention backups for a given location.
     * @param locationName The location of the database (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database. (optional)
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. (optional)
     * @return ApiResponse&lt;LongTermRetentionBackupListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LongTermRetentionBackupListResult> longTermRetentionBackupsListByLocationWithHttpInfo(String locationName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState) throws ApiException {
        okhttp3.Call localVarCall = longTermRetentionBackupsListByLocationValidateBeforeCall(locationName, subscriptionId, apiVersion, onlyLatestPerDatabase, databaseState, null);
        Type localVarReturnType = new TypeToken<LongTermRetentionBackupListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the long term retention backups for a given location.
     * @param locationName The location of the database (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database. (optional)
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call longTermRetentionBackupsListByLocationAsync(String locationName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState, final ApiCallback<LongTermRetentionBackupListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = longTermRetentionBackupsListByLocationValidateBeforeCall(locationName, subscriptionId, apiVersion, onlyLatestPerDatabase, databaseState, _callback);
        Type localVarReturnType = new TypeToken<LongTermRetentionBackupListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for longTermRetentionBackupsListByResourceGroupDatabase
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param locationName The location of the database (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param longTermRetentionDatabaseName The name of the database (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database. (optional)
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call longTermRetentionBackupsListByResourceGroupDatabaseCall(String resourceGroupName, String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "locationName" + "}", localVarApiClient.escapeString(locationName.toString()))
            .replace("{" + "longTermRetentionServerName" + "}", localVarApiClient.escapeString(longTermRetentionServerName.toString()))
            .replace("{" + "longTermRetentionDatabaseName" + "}", localVarApiClient.escapeString(longTermRetentionDatabaseName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (onlyLatestPerDatabase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyLatestPerDatabase", onlyLatestPerDatabase));
        }

        if (databaseState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("databaseState", databaseState));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call longTermRetentionBackupsListByResourceGroupDatabaseValidateBeforeCall(String resourceGroupName, String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling longTermRetentionBackupsListByResourceGroupDatabase(Async)");
        }

        // verify the required parameter 'locationName' is set
        if (locationName == null) {
            throw new ApiException("Missing the required parameter 'locationName' when calling longTermRetentionBackupsListByResourceGroupDatabase(Async)");
        }

        // verify the required parameter 'longTermRetentionServerName' is set
        if (longTermRetentionServerName == null) {
            throw new ApiException("Missing the required parameter 'longTermRetentionServerName' when calling longTermRetentionBackupsListByResourceGroupDatabase(Async)");
        }

        // verify the required parameter 'longTermRetentionDatabaseName' is set
        if (longTermRetentionDatabaseName == null) {
            throw new ApiException("Missing the required parameter 'longTermRetentionDatabaseName' when calling longTermRetentionBackupsListByResourceGroupDatabase(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling longTermRetentionBackupsListByResourceGroupDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling longTermRetentionBackupsListByResourceGroupDatabase(Async)");
        }

        return longTermRetentionBackupsListByResourceGroupDatabaseCall(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, subscriptionId, apiVersion, onlyLatestPerDatabase, databaseState, _callback);

    }

    /**
     * 
     * Lists all long term retention backups for a database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param locationName The location of the database (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param longTermRetentionDatabaseName The name of the database (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database. (optional)
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. (optional)
     * @return LongTermRetentionBackupListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public LongTermRetentionBackupListResult longTermRetentionBackupsListByResourceGroupDatabase(String resourceGroupName, String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState) throws ApiException {
        ApiResponse<LongTermRetentionBackupListResult> localVarResp = longTermRetentionBackupsListByResourceGroupDatabaseWithHttpInfo(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, subscriptionId, apiVersion, onlyLatestPerDatabase, databaseState);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all long term retention backups for a database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param locationName The location of the database (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param longTermRetentionDatabaseName The name of the database (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database. (optional)
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. (optional)
     * @return ApiResponse&lt;LongTermRetentionBackupListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LongTermRetentionBackupListResult> longTermRetentionBackupsListByResourceGroupDatabaseWithHttpInfo(String resourceGroupName, String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState) throws ApiException {
        okhttp3.Call localVarCall = longTermRetentionBackupsListByResourceGroupDatabaseValidateBeforeCall(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, subscriptionId, apiVersion, onlyLatestPerDatabase, databaseState, null);
        Type localVarReturnType = new TypeToken<LongTermRetentionBackupListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all long term retention backups for a database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param locationName The location of the database (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param longTermRetentionDatabaseName The name of the database (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database. (optional)
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call longTermRetentionBackupsListByResourceGroupDatabaseAsync(String resourceGroupName, String locationName, String longTermRetentionServerName, String longTermRetentionDatabaseName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState, final ApiCallback<LongTermRetentionBackupListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = longTermRetentionBackupsListByResourceGroupDatabaseValidateBeforeCall(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, subscriptionId, apiVersion, onlyLatestPerDatabase, databaseState, _callback);
        Type localVarReturnType = new TypeToken<LongTermRetentionBackupListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for longTermRetentionBackupsListByResourceGroupLocation
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param locationName The location of the database (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database. (optional)
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call longTermRetentionBackupsListByResourceGroupLocationCall(String resourceGroupName, String locationName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "locationName" + "}", localVarApiClient.escapeString(locationName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (onlyLatestPerDatabase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyLatestPerDatabase", onlyLatestPerDatabase));
        }

        if (databaseState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("databaseState", databaseState));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call longTermRetentionBackupsListByResourceGroupLocationValidateBeforeCall(String resourceGroupName, String locationName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling longTermRetentionBackupsListByResourceGroupLocation(Async)");
        }

        // verify the required parameter 'locationName' is set
        if (locationName == null) {
            throw new ApiException("Missing the required parameter 'locationName' when calling longTermRetentionBackupsListByResourceGroupLocation(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling longTermRetentionBackupsListByResourceGroupLocation(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling longTermRetentionBackupsListByResourceGroupLocation(Async)");
        }

        return longTermRetentionBackupsListByResourceGroupLocationCall(resourceGroupName, locationName, subscriptionId, apiVersion, onlyLatestPerDatabase, databaseState, _callback);

    }

    /**
     * 
     * Lists the long term retention backups for a given location.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param locationName The location of the database (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database. (optional)
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. (optional)
     * @return LongTermRetentionBackupListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public LongTermRetentionBackupListResult longTermRetentionBackupsListByResourceGroupLocation(String resourceGroupName, String locationName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState) throws ApiException {
        ApiResponse<LongTermRetentionBackupListResult> localVarResp = longTermRetentionBackupsListByResourceGroupLocationWithHttpInfo(resourceGroupName, locationName, subscriptionId, apiVersion, onlyLatestPerDatabase, databaseState);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the long term retention backups for a given location.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param locationName The location of the database (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database. (optional)
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. (optional)
     * @return ApiResponse&lt;LongTermRetentionBackupListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LongTermRetentionBackupListResult> longTermRetentionBackupsListByResourceGroupLocationWithHttpInfo(String resourceGroupName, String locationName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState) throws ApiException {
        okhttp3.Call localVarCall = longTermRetentionBackupsListByResourceGroupLocationValidateBeforeCall(resourceGroupName, locationName, subscriptionId, apiVersion, onlyLatestPerDatabase, databaseState, null);
        Type localVarReturnType = new TypeToken<LongTermRetentionBackupListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the long term retention backups for a given location.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param locationName The location of the database (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database. (optional)
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call longTermRetentionBackupsListByResourceGroupLocationAsync(String resourceGroupName, String locationName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState, final ApiCallback<LongTermRetentionBackupListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = longTermRetentionBackupsListByResourceGroupLocationValidateBeforeCall(resourceGroupName, locationName, subscriptionId, apiVersion, onlyLatestPerDatabase, databaseState, _callback);
        Type localVarReturnType = new TypeToken<LongTermRetentionBackupListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for longTermRetentionBackupsListByResourceGroupServer
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param locationName The location of the database (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database. (optional)
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call longTermRetentionBackupsListByResourceGroupServerCall(String resourceGroupName, String locationName, String longTermRetentionServerName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "locationName" + "}", localVarApiClient.escapeString(locationName.toString()))
            .replace("{" + "longTermRetentionServerName" + "}", localVarApiClient.escapeString(longTermRetentionServerName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (onlyLatestPerDatabase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyLatestPerDatabase", onlyLatestPerDatabase));
        }

        if (databaseState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("databaseState", databaseState));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call longTermRetentionBackupsListByResourceGroupServerValidateBeforeCall(String resourceGroupName, String locationName, String longTermRetentionServerName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling longTermRetentionBackupsListByResourceGroupServer(Async)");
        }

        // verify the required parameter 'locationName' is set
        if (locationName == null) {
            throw new ApiException("Missing the required parameter 'locationName' when calling longTermRetentionBackupsListByResourceGroupServer(Async)");
        }

        // verify the required parameter 'longTermRetentionServerName' is set
        if (longTermRetentionServerName == null) {
            throw new ApiException("Missing the required parameter 'longTermRetentionServerName' when calling longTermRetentionBackupsListByResourceGroupServer(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling longTermRetentionBackupsListByResourceGroupServer(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling longTermRetentionBackupsListByResourceGroupServer(Async)");
        }

        return longTermRetentionBackupsListByResourceGroupServerCall(resourceGroupName, locationName, longTermRetentionServerName, subscriptionId, apiVersion, onlyLatestPerDatabase, databaseState, _callback);

    }

    /**
     * 
     * Lists the long term retention backups for a given server.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param locationName The location of the database (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database. (optional)
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. (optional)
     * @return LongTermRetentionBackupListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public LongTermRetentionBackupListResult longTermRetentionBackupsListByResourceGroupServer(String resourceGroupName, String locationName, String longTermRetentionServerName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState) throws ApiException {
        ApiResponse<LongTermRetentionBackupListResult> localVarResp = longTermRetentionBackupsListByResourceGroupServerWithHttpInfo(resourceGroupName, locationName, longTermRetentionServerName, subscriptionId, apiVersion, onlyLatestPerDatabase, databaseState);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the long term retention backups for a given server.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param locationName The location of the database (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database. (optional)
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. (optional)
     * @return ApiResponse&lt;LongTermRetentionBackupListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LongTermRetentionBackupListResult> longTermRetentionBackupsListByResourceGroupServerWithHttpInfo(String resourceGroupName, String locationName, String longTermRetentionServerName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState) throws ApiException {
        okhttp3.Call localVarCall = longTermRetentionBackupsListByResourceGroupServerValidateBeforeCall(resourceGroupName, locationName, longTermRetentionServerName, subscriptionId, apiVersion, onlyLatestPerDatabase, databaseState, null);
        Type localVarReturnType = new TypeToken<LongTermRetentionBackupListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the long term retention backups for a given server.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param locationName The location of the database (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database. (optional)
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call longTermRetentionBackupsListByResourceGroupServerAsync(String resourceGroupName, String locationName, String longTermRetentionServerName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState, final ApiCallback<LongTermRetentionBackupListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = longTermRetentionBackupsListByResourceGroupServerValidateBeforeCall(resourceGroupName, locationName, longTermRetentionServerName, subscriptionId, apiVersion, onlyLatestPerDatabase, databaseState, _callback);
        Type localVarReturnType = new TypeToken<LongTermRetentionBackupListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for longTermRetentionBackupsListByServer
     * @param locationName The location of the database (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database. (optional)
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call longTermRetentionBackupsListByServerCall(String locationName, String longTermRetentionServerName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups"
            .replace("{" + "locationName" + "}", localVarApiClient.escapeString(locationName.toString()))
            .replace("{" + "longTermRetentionServerName" + "}", localVarApiClient.escapeString(longTermRetentionServerName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (onlyLatestPerDatabase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyLatestPerDatabase", onlyLatestPerDatabase));
        }

        if (databaseState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("databaseState", databaseState));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call longTermRetentionBackupsListByServerValidateBeforeCall(String locationName, String longTermRetentionServerName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'locationName' is set
        if (locationName == null) {
            throw new ApiException("Missing the required parameter 'locationName' when calling longTermRetentionBackupsListByServer(Async)");
        }

        // verify the required parameter 'longTermRetentionServerName' is set
        if (longTermRetentionServerName == null) {
            throw new ApiException("Missing the required parameter 'longTermRetentionServerName' when calling longTermRetentionBackupsListByServer(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling longTermRetentionBackupsListByServer(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling longTermRetentionBackupsListByServer(Async)");
        }

        return longTermRetentionBackupsListByServerCall(locationName, longTermRetentionServerName, subscriptionId, apiVersion, onlyLatestPerDatabase, databaseState, _callback);

    }

    /**
     * 
     * Lists the long term retention backups for a given server.
     * @param locationName The location of the database (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database. (optional)
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. (optional)
     * @return LongTermRetentionBackupListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public LongTermRetentionBackupListResult longTermRetentionBackupsListByServer(String locationName, String longTermRetentionServerName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState) throws ApiException {
        ApiResponse<LongTermRetentionBackupListResult> localVarResp = longTermRetentionBackupsListByServerWithHttpInfo(locationName, longTermRetentionServerName, subscriptionId, apiVersion, onlyLatestPerDatabase, databaseState);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the long term retention backups for a given server.
     * @param locationName The location of the database (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database. (optional)
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. (optional)
     * @return ApiResponse&lt;LongTermRetentionBackupListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LongTermRetentionBackupListResult> longTermRetentionBackupsListByServerWithHttpInfo(String locationName, String longTermRetentionServerName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState) throws ApiException {
        okhttp3.Call localVarCall = longTermRetentionBackupsListByServerValidateBeforeCall(locationName, longTermRetentionServerName, subscriptionId, apiVersion, onlyLatestPerDatabase, databaseState, null);
        Type localVarReturnType = new TypeToken<LongTermRetentionBackupListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the long term retention backups for a given server.
     * @param locationName The location of the database (required)
     * @param longTermRetentionServerName The name of the server (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database. (optional)
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of backups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call longTermRetentionBackupsListByServerAsync(String locationName, String longTermRetentionServerName, String subscriptionId, String apiVersion, Boolean onlyLatestPerDatabase, String databaseState, final ApiCallback<LongTermRetentionBackupListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = longTermRetentionBackupsListByServerValidateBeforeCall(locationName, longTermRetentionServerName, subscriptionId, apiVersion, onlyLatestPerDatabase, databaseState, _callback);
        Type localVarReturnType = new TypeToken<LongTermRetentionBackupListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
