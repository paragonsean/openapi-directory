/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILongTermRetentionBackupProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILongTermRetentionBackupProperties::OAILongTermRetentionBackupProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILongTermRetentionBackupProperties::OAILongTermRetentionBackupProperties() {
    this->initializeModel();
}

OAILongTermRetentionBackupProperties::~OAILongTermRetentionBackupProperties() {}

void OAILongTermRetentionBackupProperties::initializeModel() {

    m_backup_expiration_time_isSet = false;
    m_backup_expiration_time_isValid = false;

    m_backup_time_isSet = false;
    m_backup_time_isValid = false;

    m_database_deletion_time_isSet = false;
    m_database_deletion_time_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_server_create_time_isSet = false;
    m_server_create_time_isValid = false;

    m_server_name_isSet = false;
    m_server_name_isValid = false;
}

void OAILongTermRetentionBackupProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILongTermRetentionBackupProperties::fromJsonObject(QJsonObject json) {

    m_backup_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_backup_expiration_time, json[QString("backupExpirationTime")]);
    m_backup_expiration_time_isSet = !json[QString("backupExpirationTime")].isNull() && m_backup_expiration_time_isValid;

    m_backup_time_isValid = ::OpenAPI::fromJsonValue(m_backup_time, json[QString("backupTime")]);
    m_backup_time_isSet = !json[QString("backupTime")].isNull() && m_backup_time_isValid;

    m_database_deletion_time_isValid = ::OpenAPI::fromJsonValue(m_database_deletion_time, json[QString("databaseDeletionTime")]);
    m_database_deletion_time_isSet = !json[QString("databaseDeletionTime")].isNull() && m_database_deletion_time_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("databaseName")]);
    m_database_name_isSet = !json[QString("databaseName")].isNull() && m_database_name_isValid;

    m_server_create_time_isValid = ::OpenAPI::fromJsonValue(m_server_create_time, json[QString("serverCreateTime")]);
    m_server_create_time_isSet = !json[QString("serverCreateTime")].isNull() && m_server_create_time_isValid;

    m_server_name_isValid = ::OpenAPI::fromJsonValue(m_server_name, json[QString("serverName")]);
    m_server_name_isSet = !json[QString("serverName")].isNull() && m_server_name_isValid;
}

QString OAILongTermRetentionBackupProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILongTermRetentionBackupProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_expiration_time_isSet) {
        obj.insert(QString("backupExpirationTime"), ::OpenAPI::toJsonValue(m_backup_expiration_time));
    }
    if (m_backup_time_isSet) {
        obj.insert(QString("backupTime"), ::OpenAPI::toJsonValue(m_backup_time));
    }
    if (m_database_deletion_time_isSet) {
        obj.insert(QString("databaseDeletionTime"), ::OpenAPI::toJsonValue(m_database_deletion_time));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("databaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_server_create_time_isSet) {
        obj.insert(QString("serverCreateTime"), ::OpenAPI::toJsonValue(m_server_create_time));
    }
    if (m_server_name_isSet) {
        obj.insert(QString("serverName"), ::OpenAPI::toJsonValue(m_server_name));
    }
    return obj;
}

QDateTime OAILongTermRetentionBackupProperties::getBackupExpirationTime() const {
    return m_backup_expiration_time;
}
void OAILongTermRetentionBackupProperties::setBackupExpirationTime(const QDateTime &backup_expiration_time) {
    m_backup_expiration_time = backup_expiration_time;
    m_backup_expiration_time_isSet = true;
}

bool OAILongTermRetentionBackupProperties::is_backup_expiration_time_Set() const{
    return m_backup_expiration_time_isSet;
}

bool OAILongTermRetentionBackupProperties::is_backup_expiration_time_Valid() const{
    return m_backup_expiration_time_isValid;
}

QDateTime OAILongTermRetentionBackupProperties::getBackupTime() const {
    return m_backup_time;
}
void OAILongTermRetentionBackupProperties::setBackupTime(const QDateTime &backup_time) {
    m_backup_time = backup_time;
    m_backup_time_isSet = true;
}

bool OAILongTermRetentionBackupProperties::is_backup_time_Set() const{
    return m_backup_time_isSet;
}

bool OAILongTermRetentionBackupProperties::is_backup_time_Valid() const{
    return m_backup_time_isValid;
}

QDateTime OAILongTermRetentionBackupProperties::getDatabaseDeletionTime() const {
    return m_database_deletion_time;
}
void OAILongTermRetentionBackupProperties::setDatabaseDeletionTime(const QDateTime &database_deletion_time) {
    m_database_deletion_time = database_deletion_time;
    m_database_deletion_time_isSet = true;
}

bool OAILongTermRetentionBackupProperties::is_database_deletion_time_Set() const{
    return m_database_deletion_time_isSet;
}

bool OAILongTermRetentionBackupProperties::is_database_deletion_time_Valid() const{
    return m_database_deletion_time_isValid;
}

QString OAILongTermRetentionBackupProperties::getDatabaseName() const {
    return m_database_name;
}
void OAILongTermRetentionBackupProperties::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAILongTermRetentionBackupProperties::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAILongTermRetentionBackupProperties::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QDateTime OAILongTermRetentionBackupProperties::getServerCreateTime() const {
    return m_server_create_time;
}
void OAILongTermRetentionBackupProperties::setServerCreateTime(const QDateTime &server_create_time) {
    m_server_create_time = server_create_time;
    m_server_create_time_isSet = true;
}

bool OAILongTermRetentionBackupProperties::is_server_create_time_Set() const{
    return m_server_create_time_isSet;
}

bool OAILongTermRetentionBackupProperties::is_server_create_time_Valid() const{
    return m_server_create_time_isValid;
}

QString OAILongTermRetentionBackupProperties::getServerName() const {
    return m_server_name;
}
void OAILongTermRetentionBackupProperties::setServerName(const QString &server_name) {
    m_server_name = server_name;
    m_server_name_isSet = true;
}

bool OAILongTermRetentionBackupProperties::is_server_name_Set() const{
    return m_server_name_isSet;
}

bool OAILongTermRetentionBackupProperties::is_server_name_Valid() const{
    return m_server_name_isValid;
}

bool OAILongTermRetentionBackupProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_deletion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILongTermRetentionBackupProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
