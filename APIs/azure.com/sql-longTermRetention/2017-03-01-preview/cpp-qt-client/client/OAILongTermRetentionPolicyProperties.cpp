/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILongTermRetentionPolicyProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILongTermRetentionPolicyProperties::OAILongTermRetentionPolicyProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILongTermRetentionPolicyProperties::OAILongTermRetentionPolicyProperties() {
    this->initializeModel();
}

OAILongTermRetentionPolicyProperties::~OAILongTermRetentionPolicyProperties() {}

void OAILongTermRetentionPolicyProperties::initializeModel() {

    m_monthly_retention_isSet = false;
    m_monthly_retention_isValid = false;

    m_week_of_year_isSet = false;
    m_week_of_year_isValid = false;

    m_weekly_retention_isSet = false;
    m_weekly_retention_isValid = false;

    m_yearly_retention_isSet = false;
    m_yearly_retention_isValid = false;
}

void OAILongTermRetentionPolicyProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILongTermRetentionPolicyProperties::fromJsonObject(QJsonObject json) {

    m_monthly_retention_isValid = ::OpenAPI::fromJsonValue(m_monthly_retention, json[QString("monthlyRetention")]);
    m_monthly_retention_isSet = !json[QString("monthlyRetention")].isNull() && m_monthly_retention_isValid;

    m_week_of_year_isValid = ::OpenAPI::fromJsonValue(m_week_of_year, json[QString("weekOfYear")]);
    m_week_of_year_isSet = !json[QString("weekOfYear")].isNull() && m_week_of_year_isValid;

    m_weekly_retention_isValid = ::OpenAPI::fromJsonValue(m_weekly_retention, json[QString("weeklyRetention")]);
    m_weekly_retention_isSet = !json[QString("weeklyRetention")].isNull() && m_weekly_retention_isValid;

    m_yearly_retention_isValid = ::OpenAPI::fromJsonValue(m_yearly_retention, json[QString("yearlyRetention")]);
    m_yearly_retention_isSet = !json[QString("yearlyRetention")].isNull() && m_yearly_retention_isValid;
}

QString OAILongTermRetentionPolicyProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILongTermRetentionPolicyProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_monthly_retention_isSet) {
        obj.insert(QString("monthlyRetention"), ::OpenAPI::toJsonValue(m_monthly_retention));
    }
    if (m_week_of_year_isSet) {
        obj.insert(QString("weekOfYear"), ::OpenAPI::toJsonValue(m_week_of_year));
    }
    if (m_weekly_retention_isSet) {
        obj.insert(QString("weeklyRetention"), ::OpenAPI::toJsonValue(m_weekly_retention));
    }
    if (m_yearly_retention_isSet) {
        obj.insert(QString("yearlyRetention"), ::OpenAPI::toJsonValue(m_yearly_retention));
    }
    return obj;
}

QString OAILongTermRetentionPolicyProperties::getMonthlyRetention() const {
    return m_monthly_retention;
}
void OAILongTermRetentionPolicyProperties::setMonthlyRetention(const QString &monthly_retention) {
    m_monthly_retention = monthly_retention;
    m_monthly_retention_isSet = true;
}

bool OAILongTermRetentionPolicyProperties::is_monthly_retention_Set() const{
    return m_monthly_retention_isSet;
}

bool OAILongTermRetentionPolicyProperties::is_monthly_retention_Valid() const{
    return m_monthly_retention_isValid;
}

qint32 OAILongTermRetentionPolicyProperties::getWeekOfYear() const {
    return m_week_of_year;
}
void OAILongTermRetentionPolicyProperties::setWeekOfYear(const qint32 &week_of_year) {
    m_week_of_year = week_of_year;
    m_week_of_year_isSet = true;
}

bool OAILongTermRetentionPolicyProperties::is_week_of_year_Set() const{
    return m_week_of_year_isSet;
}

bool OAILongTermRetentionPolicyProperties::is_week_of_year_Valid() const{
    return m_week_of_year_isValid;
}

QString OAILongTermRetentionPolicyProperties::getWeeklyRetention() const {
    return m_weekly_retention;
}
void OAILongTermRetentionPolicyProperties::setWeeklyRetention(const QString &weekly_retention) {
    m_weekly_retention = weekly_retention;
    m_weekly_retention_isSet = true;
}

bool OAILongTermRetentionPolicyProperties::is_weekly_retention_Set() const{
    return m_weekly_retention_isSet;
}

bool OAILongTermRetentionPolicyProperties::is_weekly_retention_Valid() const{
    return m_weekly_retention_isValid;
}

QString OAILongTermRetentionPolicyProperties::getYearlyRetention() const {
    return m_yearly_retention;
}
void OAILongTermRetentionPolicyProperties::setYearlyRetention(const QString &yearly_retention) {
    m_yearly_retention = yearly_retention;
    m_yearly_retention_isSet = true;
}

bool OAILongTermRetentionPolicyProperties::is_yearly_retention_Set() const{
    return m_yearly_retention_isSet;
}

bool OAILongTermRetentionPolicyProperties::is_yearly_retention_Valid() const{
    return m_yearly_retention_isValid;
}

bool OAILongTermRetentionPolicyProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_monthly_retention_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_of_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekly_retention_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yearly_retention_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILongTermRetentionPolicyProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
