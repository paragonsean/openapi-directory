/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILongTermRetentionBackupsApi_H
#define OAI_OAILongTermRetentionBackupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILongTermRetentionBackup.h"
#include "OAILongTermRetentionBackupListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILongTermRetentionBackupsApi : public QObject {
    Q_OBJECT

public:
    OAILongTermRetentionBackupsApi(const int timeOut = 0);
    ~OAILongTermRetentionBackupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  location_name QString [required]
    * @param[in]  long_term_retention_server_name QString [required]
    * @param[in]  long_term_retention_database_name QString [required]
    * @param[in]  backup_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void longTermRetentionBackupsDelete(const QString &location_name, const QString &long_term_retention_server_name, const QString &long_term_retention_database_name, const QString &backup_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  location_name QString [required]
    * @param[in]  long_term_retention_server_name QString [required]
    * @param[in]  long_term_retention_database_name QString [required]
    * @param[in]  backup_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void longTermRetentionBackupsDeleteByResourceGroup(const QString &resource_group_name, const QString &location_name, const QString &long_term_retention_server_name, const QString &long_term_retention_database_name, const QString &backup_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  location_name QString [required]
    * @param[in]  long_term_retention_server_name QString [required]
    * @param[in]  long_term_retention_database_name QString [required]
    * @param[in]  backup_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void longTermRetentionBackupsGet(const QString &location_name, const QString &long_term_retention_server_name, const QString &long_term_retention_database_name, const QString &backup_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  location_name QString [required]
    * @param[in]  long_term_retention_server_name QString [required]
    * @param[in]  long_term_retention_database_name QString [required]
    * @param[in]  backup_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void longTermRetentionBackupsGetByResourceGroup(const QString &resource_group_name, const QString &location_name, const QString &long_term_retention_server_name, const QString &long_term_retention_database_name, const QString &backup_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  location_name QString [required]
    * @param[in]  long_term_retention_server_name QString [required]
    * @param[in]  long_term_retention_database_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  only_latest_per_database bool [optional]
    * @param[in]  database_state QString [optional]
    */
    virtual void longTermRetentionBackupsListByDatabase(const QString &location_name, const QString &long_term_retention_server_name, const QString &long_term_retention_database_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &only_latest_per_database = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &database_state = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  location_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  only_latest_per_database bool [optional]
    * @param[in]  database_state QString [optional]
    */
    virtual void longTermRetentionBackupsListByLocation(const QString &location_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &only_latest_per_database = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &database_state = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  location_name QString [required]
    * @param[in]  long_term_retention_server_name QString [required]
    * @param[in]  long_term_retention_database_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  only_latest_per_database bool [optional]
    * @param[in]  database_state QString [optional]
    */
    virtual void longTermRetentionBackupsListByResourceGroupDatabase(const QString &resource_group_name, const QString &location_name, const QString &long_term_retention_server_name, const QString &long_term_retention_database_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &only_latest_per_database = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &database_state = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  location_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  only_latest_per_database bool [optional]
    * @param[in]  database_state QString [optional]
    */
    virtual void longTermRetentionBackupsListByResourceGroupLocation(const QString &resource_group_name, const QString &location_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &only_latest_per_database = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &database_state = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  location_name QString [required]
    * @param[in]  long_term_retention_server_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  only_latest_per_database bool [optional]
    * @param[in]  database_state QString [optional]
    */
    virtual void longTermRetentionBackupsListByResourceGroupServer(const QString &resource_group_name, const QString &location_name, const QString &long_term_retention_server_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &only_latest_per_database = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &database_state = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  location_name QString [required]
    * @param[in]  long_term_retention_server_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  only_latest_per_database bool [optional]
    * @param[in]  database_state QString [optional]
    */
    virtual void longTermRetentionBackupsListByServer(const QString &location_name, const QString &long_term_retention_server_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &only_latest_per_database = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &database_state = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void longTermRetentionBackupsDeleteCallback(OAIHttpRequestWorker *worker);
    void longTermRetentionBackupsDeleteByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void longTermRetentionBackupsGetCallback(OAIHttpRequestWorker *worker);
    void longTermRetentionBackupsGetByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void longTermRetentionBackupsListByDatabaseCallback(OAIHttpRequestWorker *worker);
    void longTermRetentionBackupsListByLocationCallback(OAIHttpRequestWorker *worker);
    void longTermRetentionBackupsListByResourceGroupDatabaseCallback(OAIHttpRequestWorker *worker);
    void longTermRetentionBackupsListByResourceGroupLocationCallback(OAIHttpRequestWorker *worker);
    void longTermRetentionBackupsListByResourceGroupServerCallback(OAIHttpRequestWorker *worker);
    void longTermRetentionBackupsListByServerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void longTermRetentionBackupsDeleteSignal();
    void longTermRetentionBackupsDeleteByResourceGroupSignal();
    void longTermRetentionBackupsGetSignal(OAILongTermRetentionBackup summary);
    void longTermRetentionBackupsGetByResourceGroupSignal(OAILongTermRetentionBackup summary);
    void longTermRetentionBackupsListByDatabaseSignal(OAILongTermRetentionBackupListResult summary);
    void longTermRetentionBackupsListByLocationSignal(OAILongTermRetentionBackupListResult summary);
    void longTermRetentionBackupsListByResourceGroupDatabaseSignal(OAILongTermRetentionBackupListResult summary);
    void longTermRetentionBackupsListByResourceGroupLocationSignal(OAILongTermRetentionBackupListResult summary);
    void longTermRetentionBackupsListByResourceGroupServerSignal(OAILongTermRetentionBackupListResult summary);
    void longTermRetentionBackupsListByServerSignal(OAILongTermRetentionBackupListResult summary);


    void longTermRetentionBackupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void longTermRetentionBackupsDeleteByResourceGroupSignalFull(OAIHttpRequestWorker *worker);
    void longTermRetentionBackupsGetSignalFull(OAIHttpRequestWorker *worker, OAILongTermRetentionBackup summary);
    void longTermRetentionBackupsGetByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAILongTermRetentionBackup summary);
    void longTermRetentionBackupsListByDatabaseSignalFull(OAIHttpRequestWorker *worker, OAILongTermRetentionBackupListResult summary);
    void longTermRetentionBackupsListByLocationSignalFull(OAIHttpRequestWorker *worker, OAILongTermRetentionBackupListResult summary);
    void longTermRetentionBackupsListByResourceGroupDatabaseSignalFull(OAIHttpRequestWorker *worker, OAILongTermRetentionBackupListResult summary);
    void longTermRetentionBackupsListByResourceGroupLocationSignalFull(OAIHttpRequestWorker *worker, OAILongTermRetentionBackupListResult summary);
    void longTermRetentionBackupsListByResourceGroupServerSignalFull(OAIHttpRequestWorker *worker, OAILongTermRetentionBackupListResult summary);
    void longTermRetentionBackupsListByServerSignalFull(OAIHttpRequestWorker *worker, OAILongTermRetentionBackupListResult summary);

    Q_DECL_DEPRECATED_X("Use longTermRetentionBackupsDeleteSignalError() instead")
    void longTermRetentionBackupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void longTermRetentionBackupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use longTermRetentionBackupsDeleteByResourceGroupSignalError() instead")
    void longTermRetentionBackupsDeleteByResourceGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void longTermRetentionBackupsDeleteByResourceGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use longTermRetentionBackupsGetSignalError() instead")
    void longTermRetentionBackupsGetSignalE(OAILongTermRetentionBackup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void longTermRetentionBackupsGetSignalError(OAILongTermRetentionBackup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use longTermRetentionBackupsGetByResourceGroupSignalError() instead")
    void longTermRetentionBackupsGetByResourceGroupSignalE(OAILongTermRetentionBackup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void longTermRetentionBackupsGetByResourceGroupSignalError(OAILongTermRetentionBackup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use longTermRetentionBackupsListByDatabaseSignalError() instead")
    void longTermRetentionBackupsListByDatabaseSignalE(OAILongTermRetentionBackupListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void longTermRetentionBackupsListByDatabaseSignalError(OAILongTermRetentionBackupListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use longTermRetentionBackupsListByLocationSignalError() instead")
    void longTermRetentionBackupsListByLocationSignalE(OAILongTermRetentionBackupListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void longTermRetentionBackupsListByLocationSignalError(OAILongTermRetentionBackupListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use longTermRetentionBackupsListByResourceGroupDatabaseSignalError() instead")
    void longTermRetentionBackupsListByResourceGroupDatabaseSignalE(OAILongTermRetentionBackupListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void longTermRetentionBackupsListByResourceGroupDatabaseSignalError(OAILongTermRetentionBackupListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use longTermRetentionBackupsListByResourceGroupLocationSignalError() instead")
    void longTermRetentionBackupsListByResourceGroupLocationSignalE(OAILongTermRetentionBackupListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void longTermRetentionBackupsListByResourceGroupLocationSignalError(OAILongTermRetentionBackupListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use longTermRetentionBackupsListByResourceGroupServerSignalError() instead")
    void longTermRetentionBackupsListByResourceGroupServerSignalE(OAILongTermRetentionBackupListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void longTermRetentionBackupsListByResourceGroupServerSignalError(OAILongTermRetentionBackupListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use longTermRetentionBackupsListByServerSignalError() instead")
    void longTermRetentionBackupsListByServerSignalE(OAILongTermRetentionBackupListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void longTermRetentionBackupsListByServerSignalError(OAILongTermRetentionBackupListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use longTermRetentionBackupsDeleteSignalErrorFull() instead")
    void longTermRetentionBackupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void longTermRetentionBackupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use longTermRetentionBackupsDeleteByResourceGroupSignalErrorFull() instead")
    void longTermRetentionBackupsDeleteByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void longTermRetentionBackupsDeleteByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use longTermRetentionBackupsGetSignalErrorFull() instead")
    void longTermRetentionBackupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void longTermRetentionBackupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use longTermRetentionBackupsGetByResourceGroupSignalErrorFull() instead")
    void longTermRetentionBackupsGetByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void longTermRetentionBackupsGetByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use longTermRetentionBackupsListByDatabaseSignalErrorFull() instead")
    void longTermRetentionBackupsListByDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void longTermRetentionBackupsListByDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use longTermRetentionBackupsListByLocationSignalErrorFull() instead")
    void longTermRetentionBackupsListByLocationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void longTermRetentionBackupsListByLocationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use longTermRetentionBackupsListByResourceGroupDatabaseSignalErrorFull() instead")
    void longTermRetentionBackupsListByResourceGroupDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void longTermRetentionBackupsListByResourceGroupDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use longTermRetentionBackupsListByResourceGroupLocationSignalErrorFull() instead")
    void longTermRetentionBackupsListByResourceGroupLocationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void longTermRetentionBackupsListByResourceGroupLocationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use longTermRetentionBackupsListByResourceGroupServerSignalErrorFull() instead")
    void longTermRetentionBackupsListByResourceGroupServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void longTermRetentionBackupsListByResourceGroupServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use longTermRetentionBackupsListByServerSignalErrorFull() instead")
    void longTermRetentionBackupsListByServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void longTermRetentionBackupsListByServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
