/*
 * Compute Admin Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PlatformImage;
import org.openapitools.client.model.PlatformImageParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlatformImagesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PlatformImagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlatformImagesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for platformImagesCreate
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param publisher Name of the publisher. (required)
     * @param offer Name of the offer. (required)
     * @param sku Name of the SKU. (required)
     * @param version The version of the resource. (required)
     * @param apiVersion Client API Version. (required)
     * @param newImage New platform image. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call platformImagesCreateCall(String subscriptionId, String location, String publisher, String offer, String sku, String version, String apiVersion, PlatformImageParameters newImage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newImage;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/artifactTypes/platformImage/publishers/{publisher}/offers/{offer}/skus/{sku}/versions/{version}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "publisher" + "}", localVarApiClient.escapeString(publisher.toString()))
            .replace("{" + "offer" + "}", localVarApiClient.escapeString(offer.toString()))
            .replace("{" + "sku" + "}", localVarApiClient.escapeString(sku.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call platformImagesCreateValidateBeforeCall(String subscriptionId, String location, String publisher, String offer, String sku, String version, String apiVersion, PlatformImageParameters newImage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling platformImagesCreate(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling platformImagesCreate(Async)");
        }

        // verify the required parameter 'publisher' is set
        if (publisher == null) {
            throw new ApiException("Missing the required parameter 'publisher' when calling platformImagesCreate(Async)");
        }

        // verify the required parameter 'offer' is set
        if (offer == null) {
            throw new ApiException("Missing the required parameter 'offer' when calling platformImagesCreate(Async)");
        }

        // verify the required parameter 'sku' is set
        if (sku == null) {
            throw new ApiException("Missing the required parameter 'sku' when calling platformImagesCreate(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling platformImagesCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling platformImagesCreate(Async)");
        }

        // verify the required parameter 'newImage' is set
        if (newImage == null) {
            throw new ApiException("Missing the required parameter 'newImage' when calling platformImagesCreate(Async)");
        }

        return platformImagesCreateCall(subscriptionId, location, publisher, offer, sku, version, apiVersion, newImage, _callback);

    }

    /**
     * Creates a platform image.
     * Creates a new platform image with given publisher, offer, skus and version.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param publisher Name of the publisher. (required)
     * @param offer Name of the offer. (required)
     * @param sku Name of the SKU. (required)
     * @param version The version of the resource. (required)
     * @param apiVersion Client API Version. (required)
     * @param newImage New platform image. (required)
     * @return PlatformImage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
     </table>
     */
    public PlatformImage platformImagesCreate(String subscriptionId, String location, String publisher, String offer, String sku, String version, String apiVersion, PlatformImageParameters newImage) throws ApiException {
        ApiResponse<PlatformImage> localVarResp = platformImagesCreateWithHttpInfo(subscriptionId, location, publisher, offer, sku, version, apiVersion, newImage);
        return localVarResp.getData();
    }

    /**
     * Creates a platform image.
     * Creates a new platform image with given publisher, offer, skus and version.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param publisher Name of the publisher. (required)
     * @param offer Name of the offer. (required)
     * @param sku Name of the SKU. (required)
     * @param version The version of the resource. (required)
     * @param apiVersion Client API Version. (required)
     * @param newImage New platform image. (required)
     * @return ApiResponse&lt;PlatformImage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlatformImage> platformImagesCreateWithHttpInfo(String subscriptionId, String location, String publisher, String offer, String sku, String version, String apiVersion, PlatformImageParameters newImage) throws ApiException {
        okhttp3.Call localVarCall = platformImagesCreateValidateBeforeCall(subscriptionId, location, publisher, offer, sku, version, apiVersion, newImage, null);
        Type localVarReturnType = new TypeToken<PlatformImage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a platform image. (asynchronously)
     * Creates a new platform image with given publisher, offer, skus and version.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param publisher Name of the publisher. (required)
     * @param offer Name of the offer. (required)
     * @param sku Name of the SKU. (required)
     * @param version The version of the resource. (required)
     * @param apiVersion Client API Version. (required)
     * @param newImage New platform image. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call platformImagesCreateAsync(String subscriptionId, String location, String publisher, String offer, String sku, String version, String apiVersion, PlatformImageParameters newImage, final ApiCallback<PlatformImage> _callback) throws ApiException {

        okhttp3.Call localVarCall = platformImagesCreateValidateBeforeCall(subscriptionId, location, publisher, offer, sku, version, apiVersion, newImage, _callback);
        Type localVarReturnType = new TypeToken<PlatformImage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for platformImagesDelete
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param publisher Name of the publisher. (required)
     * @param offer Name of the offer. (required)
     * @param sku Name of the SKU. (required)
     * @param version The version of the resource. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call platformImagesDeleteCall(String subscriptionId, String location, String publisher, String offer, String sku, String version, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/artifactTypes/platformImage/publishers/{publisher}/offers/{offer}/skus/{sku}/versions/{version}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "publisher" + "}", localVarApiClient.escapeString(publisher.toString()))
            .replace("{" + "offer" + "}", localVarApiClient.escapeString(offer.toString()))
            .replace("{" + "sku" + "}", localVarApiClient.escapeString(sku.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call platformImagesDeleteValidateBeforeCall(String subscriptionId, String location, String publisher, String offer, String sku, String version, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling platformImagesDelete(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling platformImagesDelete(Async)");
        }

        // verify the required parameter 'publisher' is set
        if (publisher == null) {
            throw new ApiException("Missing the required parameter 'publisher' when calling platformImagesDelete(Async)");
        }

        // verify the required parameter 'offer' is set
        if (offer == null) {
            throw new ApiException("Missing the required parameter 'offer' when calling platformImagesDelete(Async)");
        }

        // verify the required parameter 'sku' is set
        if (sku == null) {
            throw new ApiException("Missing the required parameter 'sku' when calling platformImagesDelete(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling platformImagesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling platformImagesDelete(Async)");
        }

        return platformImagesDeleteCall(subscriptionId, location, publisher, offer, sku, version, apiVersion, _callback);

    }

    /**
     * Deletes a platform image matching publisher, offer, skus and version
     * Delete a platform image
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param publisher Name of the publisher. (required)
     * @param offer Name of the offer. (required)
     * @param sku Name of the SKU. (required)
     * @param version The version of the resource. (required)
     * @param apiVersion Client API Version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void platformImagesDelete(String subscriptionId, String location, String publisher, String offer, String sku, String version, String apiVersion) throws ApiException {
        platformImagesDeleteWithHttpInfo(subscriptionId, location, publisher, offer, sku, version, apiVersion);
    }

    /**
     * Deletes a platform image matching publisher, offer, skus and version
     * Delete a platform image
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param publisher Name of the publisher. (required)
     * @param offer Name of the offer. (required)
     * @param sku Name of the SKU. (required)
     * @param version The version of the resource. (required)
     * @param apiVersion Client API Version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> platformImagesDeleteWithHttpInfo(String subscriptionId, String location, String publisher, String offer, String sku, String version, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = platformImagesDeleteValidateBeforeCall(subscriptionId, location, publisher, offer, sku, version, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a platform image matching publisher, offer, skus and version (asynchronously)
     * Delete a platform image
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param publisher Name of the publisher. (required)
     * @param offer Name of the offer. (required)
     * @param sku Name of the SKU. (required)
     * @param version The version of the resource. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call platformImagesDeleteAsync(String subscriptionId, String location, String publisher, String offer, String sku, String version, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = platformImagesDeleteValidateBeforeCall(subscriptionId, location, publisher, offer, sku, version, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for platformImagesGet
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param publisher Name of the publisher. (required)
     * @param offer Name of the offer. (required)
     * @param sku Name of the SKU. (required)
     * @param version The version of the resource. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call platformImagesGetCall(String subscriptionId, String location, String publisher, String offer, String sku, String version, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/artifactTypes/platformImage/publishers/{publisher}/offers/{offer}/skus/{sku}/versions/{version}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "publisher" + "}", localVarApiClient.escapeString(publisher.toString()))
            .replace("{" + "offer" + "}", localVarApiClient.escapeString(offer.toString()))
            .replace("{" + "sku" + "}", localVarApiClient.escapeString(sku.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call platformImagesGetValidateBeforeCall(String subscriptionId, String location, String publisher, String offer, String sku, String version, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling platformImagesGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling platformImagesGet(Async)");
        }

        // verify the required parameter 'publisher' is set
        if (publisher == null) {
            throw new ApiException("Missing the required parameter 'publisher' when calling platformImagesGet(Async)");
        }

        // verify the required parameter 'offer' is set
        if (offer == null) {
            throw new ApiException("Missing the required parameter 'offer' when calling platformImagesGet(Async)");
        }

        // verify the required parameter 'sku' is set
        if (sku == null) {
            throw new ApiException("Missing the required parameter 'sku' when calling platformImagesGet(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling platformImagesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling platformImagesGet(Async)");
        }

        return platformImagesGetCall(subscriptionId, location, publisher, offer, sku, version, apiVersion, _callback);

    }

    /**
     * Returns the requested platform image.
     * Returns the specific platform image matching publisher, offer, skus and version.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param publisher Name of the publisher. (required)
     * @param offer Name of the offer. (required)
     * @param sku Name of the SKU. (required)
     * @param version The version of the resource. (required)
     * @param apiVersion Client API Version. (required)
     * @return PlatformImage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PlatformImage platformImagesGet(String subscriptionId, String location, String publisher, String offer, String sku, String version, String apiVersion) throws ApiException {
        ApiResponse<PlatformImage> localVarResp = platformImagesGetWithHttpInfo(subscriptionId, location, publisher, offer, sku, version, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Returns the requested platform image.
     * Returns the specific platform image matching publisher, offer, skus and version.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param publisher Name of the publisher. (required)
     * @param offer Name of the offer. (required)
     * @param sku Name of the SKU. (required)
     * @param version The version of the resource. (required)
     * @param apiVersion Client API Version. (required)
     * @return ApiResponse&lt;PlatformImage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlatformImage> platformImagesGetWithHttpInfo(String subscriptionId, String location, String publisher, String offer, String sku, String version, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = platformImagesGetValidateBeforeCall(subscriptionId, location, publisher, offer, sku, version, apiVersion, null);
        Type localVarReturnType = new TypeToken<PlatformImage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the requested platform image. (asynchronously)
     * Returns the specific platform image matching publisher, offer, skus and version.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param publisher Name of the publisher. (required)
     * @param offer Name of the offer. (required)
     * @param sku Name of the SKU. (required)
     * @param version The version of the resource. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call platformImagesGetAsync(String subscriptionId, String location, String publisher, String offer, String sku, String version, String apiVersion, final ApiCallback<PlatformImage> _callback) throws ApiException {

        okhttp3.Call localVarCall = platformImagesGetValidateBeforeCall(subscriptionId, location, publisher, offer, sku, version, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PlatformImage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for platformImagesList
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call platformImagesListCall(String subscriptionId, String location, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/artifactTypes/platformImage"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call platformImagesListValidateBeforeCall(String subscriptionId, String location, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling platformImagesList(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling platformImagesList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling platformImagesList(Async)");
        }

        return platformImagesListCall(subscriptionId, location, apiVersion, _callback);

    }

    /**
     * Returns all platform images.
     * Returns a list of all platform images.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param apiVersion Client API Version. (required)
     * @return List&lt;PlatformImage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<PlatformImage> platformImagesList(String subscriptionId, String location, String apiVersion) throws ApiException {
        ApiResponse<List<PlatformImage>> localVarResp = platformImagesListWithHttpInfo(subscriptionId, location, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Returns all platform images.
     * Returns a list of all platform images.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param apiVersion Client API Version. (required)
     * @return ApiResponse&lt;List&lt;PlatformImage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PlatformImage>> platformImagesListWithHttpInfo(String subscriptionId, String location, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = platformImagesListValidateBeforeCall(subscriptionId, location, apiVersion, null);
        Type localVarReturnType = new TypeToken<List<PlatformImage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all platform images. (asynchronously)
     * Returns a list of all platform images.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call platformImagesListAsync(String subscriptionId, String location, String apiVersion, final ApiCallback<List<PlatformImage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = platformImagesListValidateBeforeCall(subscriptionId, location, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<PlatformImage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
