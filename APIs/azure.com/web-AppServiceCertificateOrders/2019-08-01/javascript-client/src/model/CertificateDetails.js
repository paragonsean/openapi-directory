/**
 * AppServiceCertificateOrders API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CertificateDetails model module.
 * @module model/CertificateDetails
 * @version 2019-08-01
 */
class CertificateDetails {
    /**
     * Constructs a new <code>CertificateDetails</code>.
     * SSL certificate details.
     * @alias module:model/CertificateDetails
     */
    constructor() { 
        
        CertificateDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CertificateDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateDetails} obj Optional instance to populate.
     * @return {module:model/CertificateDetails} The populated <code>CertificateDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateDetails();

            if (data.hasOwnProperty('issuer')) {
                obj['issuer'] = ApiClient.convertToType(data['issuer'], 'String');
            }
            if (data.hasOwnProperty('notAfter')) {
                obj['notAfter'] = ApiClient.convertToType(data['notAfter'], 'Date');
            }
            if (data.hasOwnProperty('notBefore')) {
                obj['notBefore'] = ApiClient.convertToType(data['notBefore'], 'Date');
            }
            if (data.hasOwnProperty('rawData')) {
                obj['rawData'] = ApiClient.convertToType(data['rawData'], 'String');
            }
            if (data.hasOwnProperty('serialNumber')) {
                obj['serialNumber'] = ApiClient.convertToType(data['serialNumber'], 'String');
            }
            if (data.hasOwnProperty('signatureAlgorithm')) {
                obj['signatureAlgorithm'] = ApiClient.convertToType(data['signatureAlgorithm'], 'String');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('thumbprint')) {
                obj['thumbprint'] = ApiClient.convertToType(data['thumbprint'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['issuer'] && !(typeof data['issuer'] === 'string' || data['issuer'] instanceof String)) {
            throw new Error("Expected the field `issuer` to be a primitive type in the JSON string but got " + data['issuer']);
        }
        // ensure the json data is a string
        if (data['rawData'] && !(typeof data['rawData'] === 'string' || data['rawData'] instanceof String)) {
            throw new Error("Expected the field `rawData` to be a primitive type in the JSON string but got " + data['rawData']);
        }
        // ensure the json data is a string
        if (data['serialNumber'] && !(typeof data['serialNumber'] === 'string' || data['serialNumber'] instanceof String)) {
            throw new Error("Expected the field `serialNumber` to be a primitive type in the JSON string but got " + data['serialNumber']);
        }
        // ensure the json data is a string
        if (data['signatureAlgorithm'] && !(typeof data['signatureAlgorithm'] === 'string' || data['signatureAlgorithm'] instanceof String)) {
            throw new Error("Expected the field `signatureAlgorithm` to be a primitive type in the JSON string but got " + data['signatureAlgorithm']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }
        // ensure the json data is a string
        if (data['thumbprint'] && !(typeof data['thumbprint'] === 'string' || data['thumbprint'] instanceof String)) {
            throw new Error("Expected the field `thumbprint` to be a primitive type in the JSON string but got " + data['thumbprint']);
        }

        return true;
    }


}



/**
 * Certificate Issuer.
 * @member {String} issuer
 */
CertificateDetails.prototype['issuer'] = undefined;

/**
 * Date Certificate is valid to.
 * @member {Date} notAfter
 */
CertificateDetails.prototype['notAfter'] = undefined;

/**
 * Date Certificate is valid from.
 * @member {Date} notBefore
 */
CertificateDetails.prototype['notBefore'] = undefined;

/**
 * Raw certificate data.
 * @member {String} rawData
 */
CertificateDetails.prototype['rawData'] = undefined;

/**
 * Certificate Serial Number.
 * @member {String} serialNumber
 */
CertificateDetails.prototype['serialNumber'] = undefined;

/**
 * Certificate Signature algorithm.
 * @member {String} signatureAlgorithm
 */
CertificateDetails.prototype['signatureAlgorithm'] = undefined;

/**
 * Certificate Subject.
 * @member {String} subject
 */
CertificateDetails.prototype['subject'] = undefined;

/**
 * Certificate Thumbprint.
 * @member {String} thumbprint
 */
CertificateDetails.prototype['thumbprint'] = undefined;

/**
 * Certificate Version.
 * @member {Number} version
 */
CertificateDetails.prototype['version'] = undefined;






export default CertificateDetails;

