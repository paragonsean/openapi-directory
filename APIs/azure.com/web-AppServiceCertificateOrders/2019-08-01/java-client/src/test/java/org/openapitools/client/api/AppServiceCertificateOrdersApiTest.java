/*
 * AppServiceCertificateOrders API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AppServiceCertificateCollection;
import org.openapitools.client.model.AppServiceCertificateOrder;
import org.openapitools.client.model.AppServiceCertificateOrderCollection;
import org.openapitools.client.model.AppServiceCertificateOrderPatchResource;
import org.openapitools.client.model.AppServiceCertificateOrdersListDefaultResponse;
import org.openapitools.client.model.AppServiceCertificateOrdersResendRequestEmailsRequest;
import org.openapitools.client.model.AppServiceCertificatePatchResource;
import org.openapitools.client.model.AppServiceCertificateResource;
import org.openapitools.client.model.CertificateEmail;
import org.openapitools.client.model.CertificateOrderAction;
import org.openapitools.client.model.ReissueCertificateOrderRequest;
import org.openapitools.client.model.RenewCertificateOrderRequest;
import org.openapitools.client.model.SiteSeal;
import org.openapitools.client.model.SiteSealRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AppServiceCertificateOrdersApi
 */
@Disabled
public class AppServiceCertificateOrdersApiTest {

    private final AppServiceCertificateOrdersApi api = new AppServiceCertificateOrdersApi();

    /**
     * Create or update a certificate purchase order.
     *
     * Description for Create or update a certificate purchase order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceCertificateOrdersCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String certificateOrderName = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServiceCertificateOrder certificateDistinguishedName = null;
        AppServiceCertificateOrder response = api.appServiceCertificateOrdersCreateOrUpdate(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, certificateDistinguishedName);
        // TODO: test validations
    }

    /**
     * Creates or updates a certificate and associates with key vault secret.
     *
     * Description for Creates or updates a certificate and associates with key vault secret.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceCertificateOrdersCreateOrUpdateCertificateTest() throws ApiException {
        String resourceGroupName = null;
        String certificateOrderName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServiceCertificateResource keyVaultCertificate = null;
        AppServiceCertificateResource response = api.appServiceCertificateOrdersCreateOrUpdateCertificate(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, keyVaultCertificate);
        // TODO: test validations
    }

    /**
     * Delete an existing certificate order.
     *
     * Description for Delete an existing certificate order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceCertificateOrdersDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String certificateOrderName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.appServiceCertificateOrdersDelete(resourceGroupName, certificateOrderName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete the certificate associated with a certificate order.
     *
     * Description for Delete the certificate associated with a certificate order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceCertificateOrdersDeleteCertificateTest() throws ApiException {
        String resourceGroupName = null;
        String certificateOrderName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.appServiceCertificateOrdersDeleteCertificate(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a certificate order.
     *
     * Description for Get a certificate order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceCertificateOrdersGetTest() throws ApiException {
        String resourceGroupName = null;
        String certificateOrderName = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServiceCertificateOrder response = api.appServiceCertificateOrdersGet(resourceGroupName, certificateOrderName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the certificate associated with a certificate order.
     *
     * Description for Get the certificate associated with a certificate order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceCertificateOrdersGetCertificateTest() throws ApiException {
        String resourceGroupName = null;
        String certificateOrderName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServiceCertificateResource response = api.appServiceCertificateOrdersGetCertificate(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List all certificate orders in a subscription.
     *
     * Description for List all certificate orders in a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceCertificateOrdersListTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        AppServiceCertificateOrderCollection response = api.appServiceCertificateOrdersList(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get certificate orders in a resource group.
     *
     * Description for Get certificate orders in a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceCertificateOrdersListByResourceGroupTest() throws ApiException {
        String resourceGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServiceCertificateOrderCollection response = api.appServiceCertificateOrdersListByResourceGroup(resourceGroupName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List all certificates associated with a certificate order.
     *
     * Description for List all certificates associated with a certificate order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceCertificateOrdersListCertificatesTest() throws ApiException {
        String resourceGroupName = null;
        String certificateOrderName = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServiceCertificateCollection response = api.appServiceCertificateOrdersListCertificates(resourceGroupName, certificateOrderName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Reissue an existing certificate order.
     *
     * Description for Reissue an existing certificate order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceCertificateOrdersReissueTest() throws ApiException {
        String resourceGroupName = null;
        String certificateOrderName = null;
        String subscriptionId = null;
        String apiVersion = null;
        ReissueCertificateOrderRequest reissueCertificateOrderRequest = null;
        api.appServiceCertificateOrdersReissue(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, reissueCertificateOrderRequest);
        // TODO: test validations
    }

    /**
     * Renew an existing certificate order.
     *
     * Description for Renew an existing certificate order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceCertificateOrdersRenewTest() throws ApiException {
        String resourceGroupName = null;
        String certificateOrderName = null;
        String subscriptionId = null;
        String apiVersion = null;
        RenewCertificateOrderRequest renewCertificateOrderRequest = null;
        api.appServiceCertificateOrdersRenew(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, renewCertificateOrderRequest);
        // TODO: test validations
    }

    /**
     * Resend certificate email.
     *
     * Description for Resend certificate email.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceCertificateOrdersResendEmailTest() throws ApiException {
        String resourceGroupName = null;
        String certificateOrderName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.appServiceCertificateOrdersResendEmail(resourceGroupName, certificateOrderName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Verify domain ownership for this certificate order.
     *
     * Description for Verify domain ownership for this certificate order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceCertificateOrdersResendRequestEmailsTest() throws ApiException {
        String resourceGroupName = null;
        String certificateOrderName = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServiceCertificateOrdersResendRequestEmailsRequest nameIdentifier = null;
        api.appServiceCertificateOrdersResendRequestEmails(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, nameIdentifier);
        // TODO: test validations
    }

    /**
     * Retrieve the list of certificate actions.
     *
     * Description for Retrieve the list of certificate actions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceCertificateOrdersRetrieveCertificateActionsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        List<CertificateOrderAction> response = api.appServiceCertificateOrdersRetrieveCertificateActions(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieve email history.
     *
     * Description for Retrieve email history.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceCertificateOrdersRetrieveCertificateEmailHistoryTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        List<CertificateEmail> response = api.appServiceCertificateOrdersRetrieveCertificateEmailHistory(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Verify domain ownership for this certificate order.
     *
     * Description for Verify domain ownership for this certificate order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceCertificateOrdersRetrieveSiteSealTest() throws ApiException {
        String resourceGroupName = null;
        String certificateOrderName = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteSealRequest siteSealRequest = null;
        SiteSeal response = api.appServiceCertificateOrdersRetrieveSiteSeal(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, siteSealRequest);
        // TODO: test validations
    }

    /**
     * Create or update a certificate purchase order.
     *
     * Description for Create or update a certificate purchase order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceCertificateOrdersUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String certificateOrderName = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServiceCertificateOrderPatchResource certificateDistinguishedName = null;
        AppServiceCertificateOrder response = api.appServiceCertificateOrdersUpdate(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, certificateDistinguishedName);
        // TODO: test validations
    }

    /**
     * Creates or updates a certificate and associates with key vault secret.
     *
     * Description for Creates or updates a certificate and associates with key vault secret.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceCertificateOrdersUpdateCertificateTest() throws ApiException {
        String resourceGroupName = null;
        String certificateOrderName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServiceCertificatePatchResource keyVaultCertificate = null;
        AppServiceCertificateResource response = api.appServiceCertificateOrdersUpdateCertificate(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, keyVaultCertificate);
        // TODO: test validations
    }

    /**
     * Validate information for a certificate order.
     *
     * Description for Validate information for a certificate order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceCertificateOrdersValidatePurchaseInformationTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        AppServiceCertificateOrder appServiceCertificateOrder = null;
        api.appServiceCertificateOrdersValidatePurchaseInformation(subscriptionId, apiVersion, appServiceCertificateOrder);
        // TODO: test validations
    }

    /**
     * Verify domain ownership for this certificate order.
     *
     * Description for Verify domain ownership for this certificate order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceCertificateOrdersVerifyDomainOwnershipTest() throws ApiException {
        String resourceGroupName = null;
        String certificateOrderName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.appServiceCertificateOrdersVerifyDomainOwnership(resourceGroupName, certificateOrderName, subscriptionId, apiVersion);
        // TODO: test validations
    }

}
