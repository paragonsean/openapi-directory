# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SiteSealRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, light_theme: bool=None, locale: str=None):
        """SiteSealRequest - a model defined in OpenAPI

        :param light_theme: The light_theme of this SiteSealRequest.
        :param locale: The locale of this SiteSealRequest.
        """
        self.openapi_types = {
            'light_theme': bool,
            'locale': str
        }

        self.attribute_map = {
            'light_theme': 'lightTheme',
            'locale': 'locale'
        }

        self._light_theme = light_theme
        self._locale = locale

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SiteSealRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SiteSealRequest of this SiteSealRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def light_theme(self):
        """Gets the light_theme of this SiteSealRequest.

        If <code>true</code> use the light color theme for site seal; otherwise, use the default color theme.

        :return: The light_theme of this SiteSealRequest.
        :rtype: bool
        """
        return self._light_theme

    @light_theme.setter
    def light_theme(self, light_theme):
        """Sets the light_theme of this SiteSealRequest.

        If <code>true</code> use the light color theme for site seal; otherwise, use the default color theme.

        :param light_theme: The light_theme of this SiteSealRequest.
        :type light_theme: bool
        """

        self._light_theme = light_theme

    @property
    def locale(self):
        """Gets the locale of this SiteSealRequest.

        Locale of site seal.

        :return: The locale of this SiteSealRequest.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this SiteSealRequest.

        Locale of site seal.

        :param locale: The locale of this SiteSealRequest.
        :type locale: str
        """

        self._locale = locale
