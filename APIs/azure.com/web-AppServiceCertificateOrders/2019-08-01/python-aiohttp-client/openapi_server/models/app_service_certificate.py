# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AppServiceCertificate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_vault_id: str=None, key_vault_secret_name: str=None, provisioning_state: str=None):
        """AppServiceCertificate - a model defined in OpenAPI

        :param key_vault_id: The key_vault_id of this AppServiceCertificate.
        :param key_vault_secret_name: The key_vault_secret_name of this AppServiceCertificate.
        :param provisioning_state: The provisioning_state of this AppServiceCertificate.
        """
        self.openapi_types = {
            'key_vault_id': str,
            'key_vault_secret_name': str,
            'provisioning_state': str
        }

        self.attribute_map = {
            'key_vault_id': 'keyVaultId',
            'key_vault_secret_name': 'keyVaultSecretName',
            'provisioning_state': 'provisioningState'
        }

        self._key_vault_id = key_vault_id
        self._key_vault_secret_name = key_vault_secret_name
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppServiceCertificate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppServiceCertificate of this AppServiceCertificate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_vault_id(self):
        """Gets the key_vault_id of this AppServiceCertificate.

        Key Vault resource Id.

        :return: The key_vault_id of this AppServiceCertificate.
        :rtype: str
        """
        return self._key_vault_id

    @key_vault_id.setter
    def key_vault_id(self, key_vault_id):
        """Sets the key_vault_id of this AppServiceCertificate.

        Key Vault resource Id.

        :param key_vault_id: The key_vault_id of this AppServiceCertificate.
        :type key_vault_id: str
        """

        self._key_vault_id = key_vault_id

    @property
    def key_vault_secret_name(self):
        """Gets the key_vault_secret_name of this AppServiceCertificate.

        Key Vault secret name.

        :return: The key_vault_secret_name of this AppServiceCertificate.
        :rtype: str
        """
        return self._key_vault_secret_name

    @key_vault_secret_name.setter
    def key_vault_secret_name(self, key_vault_secret_name):
        """Sets the key_vault_secret_name of this AppServiceCertificate.

        Key Vault secret name.

        :param key_vault_secret_name: The key_vault_secret_name of this AppServiceCertificate.
        :type key_vault_secret_name: str
        """

        self._key_vault_secret_name = key_vault_secret_name

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this AppServiceCertificate.

        Status of the Key Vault secret.

        :return: The provisioning_state of this AppServiceCertificate.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this AppServiceCertificate.

        Status of the Key Vault secret.

        :param provisioning_state: The provisioning_state of this AppServiceCertificate.
        :type provisioning_state: str
        """
        allowed_values = ["Initialized", "WaitingOnCertificateOrder", "Succeeded", "CertificateOrderFailed", "OperationNotPermittedOnKeyVault", "AzureServiceUnauthorizedToAccessKeyVault", "KeyVaultDoesNotExist", "KeyVaultSecretDoesNotExist", "UnknownError", "ExternalPrivateKey", "Unknown"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state
