/**
 * AppServiceCertificateOrders API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAppServiceCertificateOrdersApi_H
#define OAI_OAIAppServiceCertificateOrdersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppServiceCertificateCollection.h"
#include "OAIAppServiceCertificateOrder.h"
#include "OAIAppServiceCertificateOrderCollection.h"
#include "OAIAppServiceCertificateOrderPatchResource.h"
#include "OAIAppServiceCertificateOrders_List_default_response.h"
#include "OAIAppServiceCertificateOrders_ResendRequestEmails_request.h"
#include "OAIAppServiceCertificatePatchResource.h"
#include "OAIAppServiceCertificateResource.h"
#include "OAICertificateEmail.h"
#include "OAICertificateOrderAction.h"
#include "OAIReissueCertificateOrderRequest.h"
#include "OAIRenewCertificateOrderRequest.h"
#include "OAISiteSeal.h"
#include "OAISiteSealRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAppServiceCertificateOrdersApi : public QObject {
    Q_OBJECT

public:
    OAIAppServiceCertificateOrdersApi(const int timeOut = 0);
    ~OAIAppServiceCertificateOrdersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  certificate_order_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  certificate_distinguished_name OAIAppServiceCertificateOrder [required]
    */
    virtual void appServiceCertificateOrdersCreateOrUpdate(const QString &resource_group_name, const QString &certificate_order_name, const QString &subscription_id, const QString &api_version, const OAIAppServiceCertificateOrder &certificate_distinguished_name);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  certificate_order_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  key_vault_certificate OAIAppServiceCertificateResource [required]
    */
    virtual void appServiceCertificateOrdersCreateOrUpdateCertificate(const QString &resource_group_name, const QString &certificate_order_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIAppServiceCertificateResource &key_vault_certificate);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  certificate_order_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceCertificateOrdersDelete(const QString &resource_group_name, const QString &certificate_order_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  certificate_order_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceCertificateOrdersDeleteCertificate(const QString &resource_group_name, const QString &certificate_order_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  certificate_order_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceCertificateOrdersGet(const QString &resource_group_name, const QString &certificate_order_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  certificate_order_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceCertificateOrdersGetCertificate(const QString &resource_group_name, const QString &certificate_order_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceCertificateOrdersList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceCertificateOrdersListByResourceGroup(const QString &resource_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  certificate_order_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceCertificateOrdersListCertificates(const QString &resource_group_name, const QString &certificate_order_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  certificate_order_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  reissue_certificate_order_request OAIReissueCertificateOrderRequest [required]
    */
    virtual void appServiceCertificateOrdersReissue(const QString &resource_group_name, const QString &certificate_order_name, const QString &subscription_id, const QString &api_version, const OAIReissueCertificateOrderRequest &reissue_certificate_order_request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  certificate_order_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  renew_certificate_order_request OAIRenewCertificateOrderRequest [required]
    */
    virtual void appServiceCertificateOrdersRenew(const QString &resource_group_name, const QString &certificate_order_name, const QString &subscription_id, const QString &api_version, const OAIRenewCertificateOrderRequest &renew_certificate_order_request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  certificate_order_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceCertificateOrdersResendEmail(const QString &resource_group_name, const QString &certificate_order_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  certificate_order_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  name_identifier OAIAppServiceCertificateOrders_ResendRequestEmails_request [required]
    */
    virtual void appServiceCertificateOrdersResendRequestEmails(const QString &resource_group_name, const QString &certificate_order_name, const QString &subscription_id, const QString &api_version, const OAIAppServiceCertificateOrders_ResendRequestEmails_request &name_identifier);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceCertificateOrdersRetrieveCertificateActions(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceCertificateOrdersRetrieveCertificateEmailHistory(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  certificate_order_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_seal_request OAISiteSealRequest [required]
    */
    virtual void appServiceCertificateOrdersRetrieveSiteSeal(const QString &resource_group_name, const QString &certificate_order_name, const QString &subscription_id, const QString &api_version, const OAISiteSealRequest &site_seal_request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  certificate_order_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  certificate_distinguished_name OAIAppServiceCertificateOrderPatchResource [required]
    */
    virtual void appServiceCertificateOrdersUpdate(const QString &resource_group_name, const QString &certificate_order_name, const QString &subscription_id, const QString &api_version, const OAIAppServiceCertificateOrderPatchResource &certificate_distinguished_name);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  certificate_order_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  key_vault_certificate OAIAppServiceCertificatePatchResource [required]
    */
    virtual void appServiceCertificateOrdersUpdateCertificate(const QString &resource_group_name, const QString &certificate_order_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIAppServiceCertificatePatchResource &key_vault_certificate);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  app_service_certificate_order OAIAppServiceCertificateOrder [required]
    */
    virtual void appServiceCertificateOrdersValidatePurchaseInformation(const QString &subscription_id, const QString &api_version, const OAIAppServiceCertificateOrder &app_service_certificate_order);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  certificate_order_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceCertificateOrdersVerifyDomainOwnership(const QString &resource_group_name, const QString &certificate_order_name, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void appServiceCertificateOrdersCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void appServiceCertificateOrdersCreateOrUpdateCertificateCallback(OAIHttpRequestWorker *worker);
    void appServiceCertificateOrdersDeleteCallback(OAIHttpRequestWorker *worker);
    void appServiceCertificateOrdersDeleteCertificateCallback(OAIHttpRequestWorker *worker);
    void appServiceCertificateOrdersGetCallback(OAIHttpRequestWorker *worker);
    void appServiceCertificateOrdersGetCertificateCallback(OAIHttpRequestWorker *worker);
    void appServiceCertificateOrdersListCallback(OAIHttpRequestWorker *worker);
    void appServiceCertificateOrdersListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void appServiceCertificateOrdersListCertificatesCallback(OAIHttpRequestWorker *worker);
    void appServiceCertificateOrdersReissueCallback(OAIHttpRequestWorker *worker);
    void appServiceCertificateOrdersRenewCallback(OAIHttpRequestWorker *worker);
    void appServiceCertificateOrdersResendEmailCallback(OAIHttpRequestWorker *worker);
    void appServiceCertificateOrdersResendRequestEmailsCallback(OAIHttpRequestWorker *worker);
    void appServiceCertificateOrdersRetrieveCertificateActionsCallback(OAIHttpRequestWorker *worker);
    void appServiceCertificateOrdersRetrieveCertificateEmailHistoryCallback(OAIHttpRequestWorker *worker);
    void appServiceCertificateOrdersRetrieveSiteSealCallback(OAIHttpRequestWorker *worker);
    void appServiceCertificateOrdersUpdateCallback(OAIHttpRequestWorker *worker);
    void appServiceCertificateOrdersUpdateCertificateCallback(OAIHttpRequestWorker *worker);
    void appServiceCertificateOrdersValidatePurchaseInformationCallback(OAIHttpRequestWorker *worker);
    void appServiceCertificateOrdersVerifyDomainOwnershipCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void appServiceCertificateOrdersCreateOrUpdateSignal(OAIAppServiceCertificateOrder summary);
    void appServiceCertificateOrdersCreateOrUpdateCertificateSignal(OAIAppServiceCertificateResource summary);
    void appServiceCertificateOrdersDeleteSignal();
    void appServiceCertificateOrdersDeleteCertificateSignal();
    void appServiceCertificateOrdersGetSignal(OAIAppServiceCertificateOrder summary);
    void appServiceCertificateOrdersGetCertificateSignal(OAIAppServiceCertificateResource summary);
    void appServiceCertificateOrdersListSignal(OAIAppServiceCertificateOrderCollection summary);
    void appServiceCertificateOrdersListByResourceGroupSignal(OAIAppServiceCertificateOrderCollection summary);
    void appServiceCertificateOrdersListCertificatesSignal(OAIAppServiceCertificateCollection summary);
    void appServiceCertificateOrdersReissueSignal();
    void appServiceCertificateOrdersRenewSignal();
    void appServiceCertificateOrdersResendEmailSignal();
    void appServiceCertificateOrdersResendRequestEmailsSignal();
    void appServiceCertificateOrdersRetrieveCertificateActionsSignal(QList<OAICertificateOrderAction> summary);
    void appServiceCertificateOrdersRetrieveCertificateEmailHistorySignal(QList<OAICertificateEmail> summary);
    void appServiceCertificateOrdersRetrieveSiteSealSignal(OAISiteSeal summary);
    void appServiceCertificateOrdersUpdateSignal(OAIAppServiceCertificateOrder summary);
    void appServiceCertificateOrdersUpdateCertificateSignal(OAIAppServiceCertificateResource summary);
    void appServiceCertificateOrdersValidatePurchaseInformationSignal();
    void appServiceCertificateOrdersVerifyDomainOwnershipSignal();


    void appServiceCertificateOrdersCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAppServiceCertificateOrder summary);
    void appServiceCertificateOrdersCreateOrUpdateCertificateSignalFull(OAIHttpRequestWorker *worker, OAIAppServiceCertificateResource summary);
    void appServiceCertificateOrdersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void appServiceCertificateOrdersDeleteCertificateSignalFull(OAIHttpRequestWorker *worker);
    void appServiceCertificateOrdersGetSignalFull(OAIHttpRequestWorker *worker, OAIAppServiceCertificateOrder summary);
    void appServiceCertificateOrdersGetCertificateSignalFull(OAIHttpRequestWorker *worker, OAIAppServiceCertificateResource summary);
    void appServiceCertificateOrdersListSignalFull(OAIHttpRequestWorker *worker, OAIAppServiceCertificateOrderCollection summary);
    void appServiceCertificateOrdersListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIAppServiceCertificateOrderCollection summary);
    void appServiceCertificateOrdersListCertificatesSignalFull(OAIHttpRequestWorker *worker, OAIAppServiceCertificateCollection summary);
    void appServiceCertificateOrdersReissueSignalFull(OAIHttpRequestWorker *worker);
    void appServiceCertificateOrdersRenewSignalFull(OAIHttpRequestWorker *worker);
    void appServiceCertificateOrdersResendEmailSignalFull(OAIHttpRequestWorker *worker);
    void appServiceCertificateOrdersResendRequestEmailsSignalFull(OAIHttpRequestWorker *worker);
    void appServiceCertificateOrdersRetrieveCertificateActionsSignalFull(OAIHttpRequestWorker *worker, QList<OAICertificateOrderAction> summary);
    void appServiceCertificateOrdersRetrieveCertificateEmailHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAICertificateEmail> summary);
    void appServiceCertificateOrdersRetrieveSiteSealSignalFull(OAIHttpRequestWorker *worker, OAISiteSeal summary);
    void appServiceCertificateOrdersUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAppServiceCertificateOrder summary);
    void appServiceCertificateOrdersUpdateCertificateSignalFull(OAIHttpRequestWorker *worker, OAIAppServiceCertificateResource summary);
    void appServiceCertificateOrdersValidatePurchaseInformationSignalFull(OAIHttpRequestWorker *worker);
    void appServiceCertificateOrdersVerifyDomainOwnershipSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersCreateOrUpdateSignalError() instead")
    void appServiceCertificateOrdersCreateOrUpdateSignalE(OAIAppServiceCertificateOrder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersCreateOrUpdateSignalError(OAIAppServiceCertificateOrder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersCreateOrUpdateCertificateSignalError() instead")
    void appServiceCertificateOrdersCreateOrUpdateCertificateSignalE(OAIAppServiceCertificateResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersCreateOrUpdateCertificateSignalError(OAIAppServiceCertificateResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersDeleteSignalError() instead")
    void appServiceCertificateOrdersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersDeleteCertificateSignalError() instead")
    void appServiceCertificateOrdersDeleteCertificateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersDeleteCertificateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersGetSignalError() instead")
    void appServiceCertificateOrdersGetSignalE(OAIAppServiceCertificateOrder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersGetSignalError(OAIAppServiceCertificateOrder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersGetCertificateSignalError() instead")
    void appServiceCertificateOrdersGetCertificateSignalE(OAIAppServiceCertificateResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersGetCertificateSignalError(OAIAppServiceCertificateResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersListSignalError() instead")
    void appServiceCertificateOrdersListSignalE(OAIAppServiceCertificateOrderCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersListSignalError(OAIAppServiceCertificateOrderCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersListByResourceGroupSignalError() instead")
    void appServiceCertificateOrdersListByResourceGroupSignalE(OAIAppServiceCertificateOrderCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersListByResourceGroupSignalError(OAIAppServiceCertificateOrderCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersListCertificatesSignalError() instead")
    void appServiceCertificateOrdersListCertificatesSignalE(OAIAppServiceCertificateCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersListCertificatesSignalError(OAIAppServiceCertificateCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersReissueSignalError() instead")
    void appServiceCertificateOrdersReissueSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersReissueSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersRenewSignalError() instead")
    void appServiceCertificateOrdersRenewSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersRenewSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersResendEmailSignalError() instead")
    void appServiceCertificateOrdersResendEmailSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersResendEmailSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersResendRequestEmailsSignalError() instead")
    void appServiceCertificateOrdersResendRequestEmailsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersResendRequestEmailsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersRetrieveCertificateActionsSignalError() instead")
    void appServiceCertificateOrdersRetrieveCertificateActionsSignalE(QList<OAICertificateOrderAction> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersRetrieveCertificateActionsSignalError(QList<OAICertificateOrderAction> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersRetrieveCertificateEmailHistorySignalError() instead")
    void appServiceCertificateOrdersRetrieveCertificateEmailHistorySignalE(QList<OAICertificateEmail> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersRetrieveCertificateEmailHistorySignalError(QList<OAICertificateEmail> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersRetrieveSiteSealSignalError() instead")
    void appServiceCertificateOrdersRetrieveSiteSealSignalE(OAISiteSeal summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersRetrieveSiteSealSignalError(OAISiteSeal summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersUpdateSignalError() instead")
    void appServiceCertificateOrdersUpdateSignalE(OAIAppServiceCertificateOrder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersUpdateSignalError(OAIAppServiceCertificateOrder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersUpdateCertificateSignalError() instead")
    void appServiceCertificateOrdersUpdateCertificateSignalE(OAIAppServiceCertificateResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersUpdateCertificateSignalError(OAIAppServiceCertificateResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersValidatePurchaseInformationSignalError() instead")
    void appServiceCertificateOrdersValidatePurchaseInformationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersValidatePurchaseInformationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersVerifyDomainOwnershipSignalError() instead")
    void appServiceCertificateOrdersVerifyDomainOwnershipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersVerifyDomainOwnershipSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersCreateOrUpdateSignalErrorFull() instead")
    void appServiceCertificateOrdersCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersCreateOrUpdateCertificateSignalErrorFull() instead")
    void appServiceCertificateOrdersCreateOrUpdateCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersCreateOrUpdateCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersDeleteSignalErrorFull() instead")
    void appServiceCertificateOrdersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersDeleteCertificateSignalErrorFull() instead")
    void appServiceCertificateOrdersDeleteCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersDeleteCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersGetSignalErrorFull() instead")
    void appServiceCertificateOrdersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersGetCertificateSignalErrorFull() instead")
    void appServiceCertificateOrdersGetCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersGetCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersListSignalErrorFull() instead")
    void appServiceCertificateOrdersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersListByResourceGroupSignalErrorFull() instead")
    void appServiceCertificateOrdersListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersListCertificatesSignalErrorFull() instead")
    void appServiceCertificateOrdersListCertificatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersListCertificatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersReissueSignalErrorFull() instead")
    void appServiceCertificateOrdersReissueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersReissueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersRenewSignalErrorFull() instead")
    void appServiceCertificateOrdersRenewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersRenewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersResendEmailSignalErrorFull() instead")
    void appServiceCertificateOrdersResendEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersResendEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersResendRequestEmailsSignalErrorFull() instead")
    void appServiceCertificateOrdersResendRequestEmailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersResendRequestEmailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersRetrieveCertificateActionsSignalErrorFull() instead")
    void appServiceCertificateOrdersRetrieveCertificateActionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersRetrieveCertificateActionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersRetrieveCertificateEmailHistorySignalErrorFull() instead")
    void appServiceCertificateOrdersRetrieveCertificateEmailHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersRetrieveCertificateEmailHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersRetrieveSiteSealSignalErrorFull() instead")
    void appServiceCertificateOrdersRetrieveSiteSealSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersRetrieveSiteSealSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersUpdateSignalErrorFull() instead")
    void appServiceCertificateOrdersUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersUpdateCertificateSignalErrorFull() instead")
    void appServiceCertificateOrdersUpdateCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersUpdateCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersValidatePurchaseInformationSignalErrorFull() instead")
    void appServiceCertificateOrdersValidatePurchaseInformationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersValidatePurchaseInformationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceCertificateOrdersVerifyDomainOwnershipSignalErrorFull() instead")
    void appServiceCertificateOrdersVerifyDomainOwnershipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceCertificateOrdersVerifyDomainOwnershipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
