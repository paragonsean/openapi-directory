/**
 * AppServiceCertificateOrders API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISiteSealRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISiteSealRequest::OAISiteSealRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISiteSealRequest::OAISiteSealRequest() {
    this->initializeModel();
}

OAISiteSealRequest::~OAISiteSealRequest() {}

void OAISiteSealRequest::initializeModel() {

    m_light_theme_isSet = false;
    m_light_theme_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;
}

void OAISiteSealRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISiteSealRequest::fromJsonObject(QJsonObject json) {

    m_light_theme_isValid = ::OpenAPI::fromJsonValue(m_light_theme, json[QString("lightTheme")]);
    m_light_theme_isSet = !json[QString("lightTheme")].isNull() && m_light_theme_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;
}

QString OAISiteSealRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISiteSealRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_light_theme_isSet) {
        obj.insert(QString("lightTheme"), ::OpenAPI::toJsonValue(m_light_theme));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    return obj;
}

bool OAISiteSealRequest::isLightTheme() const {
    return m_light_theme;
}
void OAISiteSealRequest::setLightTheme(const bool &light_theme) {
    m_light_theme = light_theme;
    m_light_theme_isSet = true;
}

bool OAISiteSealRequest::is_light_theme_Set() const{
    return m_light_theme_isSet;
}

bool OAISiteSealRequest::is_light_theme_Valid() const{
    return m_light_theme_isValid;
}

QString OAISiteSealRequest::getLocale() const {
    return m_locale;
}
void OAISiteSealRequest::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAISiteSealRequest::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAISiteSealRequest::is_locale_Valid() const{
    return m_locale_isValid;
}

bool OAISiteSealRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_light_theme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISiteSealRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
