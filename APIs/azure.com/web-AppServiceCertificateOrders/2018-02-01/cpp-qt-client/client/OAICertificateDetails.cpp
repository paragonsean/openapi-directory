/**
 * AppServiceCertificateOrders API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateDetails::OAICertificateDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateDetails::OAICertificateDetails() {
    this->initializeModel();
}

OAICertificateDetails::~OAICertificateDetails() {}

void OAICertificateDetails::initializeModel() {

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_not_after_isSet = false;
    m_not_after_isValid = false;

    m_not_before_isSet = false;
    m_not_before_isValid = false;

    m_raw_data_isSet = false;
    m_raw_data_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_signature_algorithm_isSet = false;
    m_signature_algorithm_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_thumbprint_isSet = false;
    m_thumbprint_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAICertificateDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateDetails::fromJsonObject(QJsonObject json) {

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("issuer")]);
    m_issuer_isSet = !json[QString("issuer")].isNull() && m_issuer_isValid;

    m_not_after_isValid = ::OpenAPI::fromJsonValue(m_not_after, json[QString("notAfter")]);
    m_not_after_isSet = !json[QString("notAfter")].isNull() && m_not_after_isValid;

    m_not_before_isValid = ::OpenAPI::fromJsonValue(m_not_before, json[QString("notBefore")]);
    m_not_before_isSet = !json[QString("notBefore")].isNull() && m_not_before_isValid;

    m_raw_data_isValid = ::OpenAPI::fromJsonValue(m_raw_data, json[QString("rawData")]);
    m_raw_data_isSet = !json[QString("rawData")].isNull() && m_raw_data_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;

    m_signature_algorithm_isValid = ::OpenAPI::fromJsonValue(m_signature_algorithm, json[QString("signatureAlgorithm")]);
    m_signature_algorithm_isSet = !json[QString("signatureAlgorithm")].isNull() && m_signature_algorithm_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_thumbprint_isValid = ::OpenAPI::fromJsonValue(m_thumbprint, json[QString("thumbprint")]);
    m_thumbprint_isSet = !json[QString("thumbprint")].isNull() && m_thumbprint_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAICertificateDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_issuer_isSet) {
        obj.insert(QString("issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_not_after_isSet) {
        obj.insert(QString("notAfter"), ::OpenAPI::toJsonValue(m_not_after));
    }
    if (m_not_before_isSet) {
        obj.insert(QString("notBefore"), ::OpenAPI::toJsonValue(m_not_before));
    }
    if (m_raw_data_isSet) {
        obj.insert(QString("rawData"), ::OpenAPI::toJsonValue(m_raw_data));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    if (m_signature_algorithm_isSet) {
        obj.insert(QString("signatureAlgorithm"), ::OpenAPI::toJsonValue(m_signature_algorithm));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_thumbprint_isSet) {
        obj.insert(QString("thumbprint"), ::OpenAPI::toJsonValue(m_thumbprint));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAICertificateDetails::getIssuer() const {
    return m_issuer;
}
void OAICertificateDetails::setIssuer(const QString &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAICertificateDetails::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAICertificateDetails::is_issuer_Valid() const{
    return m_issuer_isValid;
}

QDateTime OAICertificateDetails::getNotAfter() const {
    return m_not_after;
}
void OAICertificateDetails::setNotAfter(const QDateTime &not_after) {
    m_not_after = not_after;
    m_not_after_isSet = true;
}

bool OAICertificateDetails::is_not_after_Set() const{
    return m_not_after_isSet;
}

bool OAICertificateDetails::is_not_after_Valid() const{
    return m_not_after_isValid;
}

QDateTime OAICertificateDetails::getNotBefore() const {
    return m_not_before;
}
void OAICertificateDetails::setNotBefore(const QDateTime &not_before) {
    m_not_before = not_before;
    m_not_before_isSet = true;
}

bool OAICertificateDetails::is_not_before_Set() const{
    return m_not_before_isSet;
}

bool OAICertificateDetails::is_not_before_Valid() const{
    return m_not_before_isValid;
}

QString OAICertificateDetails::getRawData() const {
    return m_raw_data;
}
void OAICertificateDetails::setRawData(const QString &raw_data) {
    m_raw_data = raw_data;
    m_raw_data_isSet = true;
}

bool OAICertificateDetails::is_raw_data_Set() const{
    return m_raw_data_isSet;
}

bool OAICertificateDetails::is_raw_data_Valid() const{
    return m_raw_data_isValid;
}

QString OAICertificateDetails::getSerialNumber() const {
    return m_serial_number;
}
void OAICertificateDetails::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAICertificateDetails::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAICertificateDetails::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

QString OAICertificateDetails::getSignatureAlgorithm() const {
    return m_signature_algorithm;
}
void OAICertificateDetails::setSignatureAlgorithm(const QString &signature_algorithm) {
    m_signature_algorithm = signature_algorithm;
    m_signature_algorithm_isSet = true;
}

bool OAICertificateDetails::is_signature_algorithm_Set() const{
    return m_signature_algorithm_isSet;
}

bool OAICertificateDetails::is_signature_algorithm_Valid() const{
    return m_signature_algorithm_isValid;
}

QString OAICertificateDetails::getSubject() const {
    return m_subject;
}
void OAICertificateDetails::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAICertificateDetails::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAICertificateDetails::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAICertificateDetails::getThumbprint() const {
    return m_thumbprint;
}
void OAICertificateDetails::setThumbprint(const QString &thumbprint) {
    m_thumbprint = thumbprint;
    m_thumbprint_isSet = true;
}

bool OAICertificateDetails::is_thumbprint_Set() const{
    return m_thumbprint_isSet;
}

bool OAICertificateDetails::is_thumbprint_Valid() const{
    return m_thumbprint_isValid;
}

qint32 OAICertificateDetails::getVersion() const {
    return m_version;
}
void OAICertificateDetails::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAICertificateDetails::is_version_Set() const{
    return m_version_isSet;
}

bool OAICertificateDetails::is_version_Valid() const{
    return m_version_isValid;
}

bool OAICertificateDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
