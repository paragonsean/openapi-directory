/**
 * AppServiceCertificateOrders API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AppServiceCertificate model module.
 * @module model/AppServiceCertificate
 * @version 2018-02-01
 */
class AppServiceCertificate {
    /**
     * Constructs a new <code>AppServiceCertificate</code>.
     * Key Vault container for a certificate that is purchased through Azure.
     * @alias module:model/AppServiceCertificate
     */
    constructor() { 
        
        AppServiceCertificate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AppServiceCertificate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppServiceCertificate} obj Optional instance to populate.
     * @return {module:model/AppServiceCertificate} The populated <code>AppServiceCertificate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AppServiceCertificate();

            if (data.hasOwnProperty('keyVaultId')) {
                obj['keyVaultId'] = ApiClient.convertToType(data['keyVaultId'], 'String');
            }
            if (data.hasOwnProperty('keyVaultSecretName')) {
                obj['keyVaultSecretName'] = ApiClient.convertToType(data['keyVaultSecretName'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AppServiceCertificate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AppServiceCertificate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['keyVaultId'] && !(typeof data['keyVaultId'] === 'string' || data['keyVaultId'] instanceof String)) {
            throw new Error("Expected the field `keyVaultId` to be a primitive type in the JSON string but got " + data['keyVaultId']);
        }
        // ensure the json data is a string
        if (data['keyVaultSecretName'] && !(typeof data['keyVaultSecretName'] === 'string' || data['keyVaultSecretName'] instanceof String)) {
            throw new Error("Expected the field `keyVaultSecretName` to be a primitive type in the JSON string but got " + data['keyVaultSecretName']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }

        return true;
    }


}



/**
 * Key Vault resource Id.
 * @member {String} keyVaultId
 */
AppServiceCertificate.prototype['keyVaultId'] = undefined;

/**
 * Key Vault secret name.
 * @member {String} keyVaultSecretName
 */
AppServiceCertificate.prototype['keyVaultSecretName'] = undefined;

/**
 * Status of the Key Vault secret.
 * @member {module:model/AppServiceCertificate.ProvisioningStateEnum} provisioningState
 */
AppServiceCertificate.prototype['provisioningState'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
AppServiceCertificate['ProvisioningStateEnum'] = {

    /**
     * value: "Initialized"
     * @const
     */
    "Initialized": "Initialized",

    /**
     * value: "WaitingOnCertificateOrder"
     * @const
     */
    "WaitingOnCertificateOrder": "WaitingOnCertificateOrder",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "CertificateOrderFailed"
     * @const
     */
    "CertificateOrderFailed": "CertificateOrderFailed",

    /**
     * value: "OperationNotPermittedOnKeyVault"
     * @const
     */
    "OperationNotPermittedOnKeyVault": "OperationNotPermittedOnKeyVault",

    /**
     * value: "AzureServiceUnauthorizedToAccessKeyVault"
     * @const
     */
    "AzureServiceUnauthorizedToAccessKeyVault": "AzureServiceUnauthorizedToAccessKeyVault",

    /**
     * value: "KeyVaultDoesNotExist"
     * @const
     */
    "KeyVaultDoesNotExist": "KeyVaultDoesNotExist",

    /**
     * value: "KeyVaultSecretDoesNotExist"
     * @const
     */
    "KeyVaultSecretDoesNotExist": "KeyVaultSecretDoesNotExist",

    /**
     * value: "UnknownError"
     * @const
     */
    "UnknownError": "UnknownError",

    /**
     * value: "ExternalPrivateKey"
     * @const
     */
    "ExternalPrivateKey": "ExternalPrivateKey",

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown"
};



export default AppServiceCertificate;

