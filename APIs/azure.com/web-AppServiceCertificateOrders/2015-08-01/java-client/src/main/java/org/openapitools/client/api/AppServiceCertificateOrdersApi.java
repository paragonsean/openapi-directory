/*
 * AppServiceCertificateOrders API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppServiceCertificateCollection;
import org.openapitools.client.model.AppServiceCertificateOrder;
import org.openapitools.client.model.AppServiceCertificateOrderCollection;
import org.openapitools.client.model.AppServiceCertificateOrderPatchResource;
import org.openapitools.client.model.AppServiceCertificateOrdersResendRequestEmailsRequest;
import org.openapitools.client.model.AppServiceCertificatePatchResource;
import org.openapitools.client.model.AppServiceCertificateResource;
import org.openapitools.client.model.CertificateEmail;
import org.openapitools.client.model.CertificateOrderAction;
import org.openapitools.client.model.ReissueCertificateOrderRequest;
import org.openapitools.client.model.RenewCertificateOrderRequest;
import org.openapitools.client.model.SiteSeal;
import org.openapitools.client.model.SiteSealRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppServiceCertificateOrdersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppServiceCertificateOrdersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppServiceCertificateOrdersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appServiceCertificateOrdersCreateOrUpdate
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param certificateDistinguishedName Distinguished name to use for the certificate order. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> App Service Certificate Order is created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> App Service Certificate Order creation operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersCreateOrUpdateCall(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, AppServiceCertificateOrder certificateDistinguishedName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = certificateDistinguishedName;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "certificateOrderName" + "}", localVarApiClient.escapeString(certificateOrderName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceCertificateOrdersCreateOrUpdateValidateBeforeCall(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, AppServiceCertificateOrder certificateDistinguishedName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersCreateOrUpdate(Async)");
        }

        // verify the required parameter 'certificateOrderName' is set
        if (certificateOrderName == null) {
            throw new ApiException("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersCreateOrUpdate(Async)");
        }

        // verify the required parameter 'certificateDistinguishedName' is set
        if (certificateDistinguishedName == null) {
            throw new ApiException("Missing the required parameter 'certificateDistinguishedName' when calling appServiceCertificateOrdersCreateOrUpdate(Async)");
        }

        return appServiceCertificateOrdersCreateOrUpdateCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, certificateDistinguishedName, _callback);

    }

    /**
     * Create or update a certificate purchase order.
     * Create or update a certificate purchase order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param certificateDistinguishedName Distinguished name to use for the certificate order. (required)
     * @return AppServiceCertificateOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> App Service Certificate Order is created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> App Service Certificate Order creation operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public AppServiceCertificateOrder appServiceCertificateOrdersCreateOrUpdate(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, AppServiceCertificateOrder certificateDistinguishedName) throws ApiException {
        ApiResponse<AppServiceCertificateOrder> localVarResp = appServiceCertificateOrdersCreateOrUpdateWithHttpInfo(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, certificateDistinguishedName);
        return localVarResp.getData();
    }

    /**
     * Create or update a certificate purchase order.
     * Create or update a certificate purchase order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param certificateDistinguishedName Distinguished name to use for the certificate order. (required)
     * @return ApiResponse&lt;AppServiceCertificateOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> App Service Certificate Order is created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> App Service Certificate Order creation operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServiceCertificateOrder> appServiceCertificateOrdersCreateOrUpdateWithHttpInfo(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, AppServiceCertificateOrder certificateDistinguishedName) throws ApiException {
        okhttp3.Call localVarCall = appServiceCertificateOrdersCreateOrUpdateValidateBeforeCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, certificateDistinguishedName, null);
        Type localVarReturnType = new TypeToken<AppServiceCertificateOrder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a certificate purchase order. (asynchronously)
     * Create or update a certificate purchase order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param certificateDistinguishedName Distinguished name to use for the certificate order. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> App Service Certificate Order is created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> App Service Certificate Order creation operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersCreateOrUpdateAsync(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, AppServiceCertificateOrder certificateDistinguishedName, final ApiCallback<AppServiceCertificateOrder> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceCertificateOrdersCreateOrUpdateValidateBeforeCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, certificateDistinguishedName, _callback);
        Type localVarReturnType = new TypeToken<AppServiceCertificateOrder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceCertificateOrdersCreateOrUpdateCertificate
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param keyVaultCertificate Key vault certificate resource Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> App Service Certificate is created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> App Service Certificate creation operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersCreateOrUpdateCertificateCall(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, AppServiceCertificateResource keyVaultCertificate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keyVaultCertificate;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "certificateOrderName" + "}", localVarApiClient.escapeString(certificateOrderName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceCertificateOrdersCreateOrUpdateCertificateValidateBeforeCall(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, AppServiceCertificateResource keyVaultCertificate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersCreateOrUpdateCertificate(Async)");
        }

        // verify the required parameter 'certificateOrderName' is set
        if (certificateOrderName == null) {
            throw new ApiException("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersCreateOrUpdateCertificate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceCertificateOrdersCreateOrUpdateCertificate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersCreateOrUpdateCertificate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersCreateOrUpdateCertificate(Async)");
        }

        // verify the required parameter 'keyVaultCertificate' is set
        if (keyVaultCertificate == null) {
            throw new ApiException("Missing the required parameter 'keyVaultCertificate' when calling appServiceCertificateOrdersCreateOrUpdateCertificate(Async)");
        }

        return appServiceCertificateOrdersCreateOrUpdateCertificateCall(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, keyVaultCertificate, _callback);

    }

    /**
     * Creates or updates a certificate and associates with key vault secret.
     * Creates or updates a certificate and associates with key vault secret.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param keyVaultCertificate Key vault certificate resource Id. (required)
     * @return AppServiceCertificateResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> App Service Certificate is created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> App Service Certificate creation operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public AppServiceCertificateResource appServiceCertificateOrdersCreateOrUpdateCertificate(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, AppServiceCertificateResource keyVaultCertificate) throws ApiException {
        ApiResponse<AppServiceCertificateResource> localVarResp = appServiceCertificateOrdersCreateOrUpdateCertificateWithHttpInfo(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, keyVaultCertificate);
        return localVarResp.getData();
    }

    /**
     * Creates or updates a certificate and associates with key vault secret.
     * Creates or updates a certificate and associates with key vault secret.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param keyVaultCertificate Key vault certificate resource Id. (required)
     * @return ApiResponse&lt;AppServiceCertificateResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> App Service Certificate is created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> App Service Certificate creation operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServiceCertificateResource> appServiceCertificateOrdersCreateOrUpdateCertificateWithHttpInfo(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, AppServiceCertificateResource keyVaultCertificate) throws ApiException {
        okhttp3.Call localVarCall = appServiceCertificateOrdersCreateOrUpdateCertificateValidateBeforeCall(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, keyVaultCertificate, null);
        Type localVarReturnType = new TypeToken<AppServiceCertificateResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates or updates a certificate and associates with key vault secret. (asynchronously)
     * Creates or updates a certificate and associates with key vault secret.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param keyVaultCertificate Key vault certificate resource Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> App Service Certificate is created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> App Service Certificate creation operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersCreateOrUpdateCertificateAsync(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, AppServiceCertificateResource keyVaultCertificate, final ApiCallback<AppServiceCertificateResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceCertificateOrdersCreateOrUpdateCertificateValidateBeforeCall(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, keyVaultCertificate, _callback);
        Type localVarReturnType = new TypeToken<AppServiceCertificateResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceCertificateOrdersDelete
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted certificate order. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Certificate order does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersDeleteCall(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "certificateOrderName" + "}", localVarApiClient.escapeString(certificateOrderName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceCertificateOrdersDeleteValidateBeforeCall(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersDelete(Async)");
        }

        // verify the required parameter 'certificateOrderName' is set
        if (certificateOrderName == null) {
            throw new ApiException("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersDelete(Async)");
        }

        return appServiceCertificateOrdersDeleteCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Delete an existing certificate order.
     * Delete an existing certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted certificate order. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Certificate order does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void appServiceCertificateOrdersDelete(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion) throws ApiException {
        appServiceCertificateOrdersDeleteWithHttpInfo(resourceGroupName, certificateOrderName, subscriptionId, apiVersion);
    }

    /**
     * Delete an existing certificate order.
     * Delete an existing certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted certificate order. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Certificate order does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appServiceCertificateOrdersDeleteWithHttpInfo(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceCertificateOrdersDeleteValidateBeforeCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an existing certificate order. (asynchronously)
     * Delete an existing certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted certificate order. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Certificate order does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersDeleteAsync(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceCertificateOrdersDeleteValidateBeforeCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceCertificateOrdersDeleteCertificate
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted certificate. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Certificate does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersDeleteCertificateCall(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "certificateOrderName" + "}", localVarApiClient.escapeString(certificateOrderName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceCertificateOrdersDeleteCertificateValidateBeforeCall(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersDeleteCertificate(Async)");
        }

        // verify the required parameter 'certificateOrderName' is set
        if (certificateOrderName == null) {
            throw new ApiException("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersDeleteCertificate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceCertificateOrdersDeleteCertificate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersDeleteCertificate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersDeleteCertificate(Async)");
        }

        return appServiceCertificateOrdersDeleteCertificateCall(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Delete the certificate associated with a certificate order.
     * Delete the certificate associated with a certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted certificate. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Certificate does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void appServiceCertificateOrdersDeleteCertificate(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion) throws ApiException {
        appServiceCertificateOrdersDeleteCertificateWithHttpInfo(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion);
    }

    /**
     * Delete the certificate associated with a certificate order.
     * Delete the certificate associated with a certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted certificate. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Certificate does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appServiceCertificateOrdersDeleteCertificateWithHttpInfo(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceCertificateOrdersDeleteCertificateValidateBeforeCall(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the certificate associated with a certificate order. (asynchronously)
     * Delete the certificate associated with a certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted certificate. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Certificate does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersDeleteCertificateAsync(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceCertificateOrdersDeleteCertificateValidateBeforeCall(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceCertificateOrdersGet
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order.. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersGetCall(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "certificateOrderName" + "}", localVarApiClient.escapeString(certificateOrderName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceCertificateOrdersGetValidateBeforeCall(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersGet(Async)");
        }

        // verify the required parameter 'certificateOrderName' is set
        if (certificateOrderName == null) {
            throw new ApiException("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersGet(Async)");
        }

        return appServiceCertificateOrdersGetCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get a certificate order.
     * Get a certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order.. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return AppServiceCertificateOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AppServiceCertificateOrder appServiceCertificateOrdersGet(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<AppServiceCertificateOrder> localVarResp = appServiceCertificateOrdersGetWithHttpInfo(resourceGroupName, certificateOrderName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a certificate order.
     * Get a certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order.. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;AppServiceCertificateOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServiceCertificateOrder> appServiceCertificateOrdersGetWithHttpInfo(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceCertificateOrdersGetValidateBeforeCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<AppServiceCertificateOrder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a certificate order. (asynchronously)
     * Get a certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order.. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersGetAsync(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, final ApiCallback<AppServiceCertificateOrder> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceCertificateOrdersGetValidateBeforeCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AppServiceCertificateOrder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceCertificateOrdersGetCertificate
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersGetCertificateCall(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "certificateOrderName" + "}", localVarApiClient.escapeString(certificateOrderName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceCertificateOrdersGetCertificateValidateBeforeCall(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersGetCertificate(Async)");
        }

        // verify the required parameter 'certificateOrderName' is set
        if (certificateOrderName == null) {
            throw new ApiException("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersGetCertificate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceCertificateOrdersGetCertificate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersGetCertificate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersGetCertificate(Async)");
        }

        return appServiceCertificateOrdersGetCertificateCall(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get the certificate associated with a certificate order.
     * Get the certificate associated with a certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return AppServiceCertificateResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AppServiceCertificateResource appServiceCertificateOrdersGetCertificate(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<AppServiceCertificateResource> localVarResp = appServiceCertificateOrdersGetCertificateWithHttpInfo(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the certificate associated with a certificate order.
     * Get the certificate associated with a certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;AppServiceCertificateResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServiceCertificateResource> appServiceCertificateOrdersGetCertificateWithHttpInfo(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceCertificateOrdersGetCertificateValidateBeforeCall(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<AppServiceCertificateResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the certificate associated with a certificate order. (asynchronously)
     * Get the certificate associated with a certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersGetCertificateAsync(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, final ApiCallback<AppServiceCertificateResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceCertificateOrdersGetCertificateValidateBeforeCall(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AppServiceCertificateResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceCertificateOrdersList
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersListCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/certificateOrders"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceCertificateOrdersListValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersList(Async)");
        }

        return appServiceCertificateOrdersListCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * List all certificate orders in a subscription.
     * List all certificate orders in a subscription.
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return AppServiceCertificateOrderCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AppServiceCertificateOrderCollection appServiceCertificateOrdersList(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<AppServiceCertificateOrderCollection> localVarResp = appServiceCertificateOrdersListWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List all certificate orders in a subscription.
     * List all certificate orders in a subscription.
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;AppServiceCertificateOrderCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServiceCertificateOrderCollection> appServiceCertificateOrdersListWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceCertificateOrdersListValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<AppServiceCertificateOrderCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all certificate orders in a subscription. (asynchronously)
     * List all certificate orders in a subscription.
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersListAsync(String subscriptionId, String apiVersion, final ApiCallback<AppServiceCertificateOrderCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceCertificateOrdersListValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AppServiceCertificateOrderCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceCertificateOrdersListByResourceGroup
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersListByResourceGroupCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceCertificateOrdersListByResourceGroupValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersListByResourceGroup(Async)");
        }

        return appServiceCertificateOrdersListByResourceGroupCall(resourceGroupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get certificate orders in a resource group.
     * Get certificate orders in a resource group.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return AppServiceCertificateOrderCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AppServiceCertificateOrderCollection appServiceCertificateOrdersListByResourceGroup(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<AppServiceCertificateOrderCollection> localVarResp = appServiceCertificateOrdersListByResourceGroupWithHttpInfo(resourceGroupName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get certificate orders in a resource group.
     * Get certificate orders in a resource group.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;AppServiceCertificateOrderCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServiceCertificateOrderCollection> appServiceCertificateOrdersListByResourceGroupWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceCertificateOrdersListByResourceGroupValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<AppServiceCertificateOrderCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get certificate orders in a resource group. (asynchronously)
     * Get certificate orders in a resource group.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersListByResourceGroupAsync(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback<AppServiceCertificateOrderCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceCertificateOrdersListByResourceGroupValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AppServiceCertificateOrderCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceCertificateOrdersListCertificates
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersListCertificatesCall(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "certificateOrderName" + "}", localVarApiClient.escapeString(certificateOrderName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceCertificateOrdersListCertificatesValidateBeforeCall(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersListCertificates(Async)");
        }

        // verify the required parameter 'certificateOrderName' is set
        if (certificateOrderName == null) {
            throw new ApiException("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersListCertificates(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersListCertificates(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersListCertificates(Async)");
        }

        return appServiceCertificateOrdersListCertificatesCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, _callback);

    }

    /**
     * List all certificates associated with a certificate order.
     * List all certificates associated with a certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return AppServiceCertificateCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AppServiceCertificateCollection appServiceCertificateOrdersListCertificates(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<AppServiceCertificateCollection> localVarResp = appServiceCertificateOrdersListCertificatesWithHttpInfo(resourceGroupName, certificateOrderName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List all certificates associated with a certificate order.
     * List all certificates associated with a certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;AppServiceCertificateCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServiceCertificateCollection> appServiceCertificateOrdersListCertificatesWithHttpInfo(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceCertificateOrdersListCertificatesValidateBeforeCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<AppServiceCertificateCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all certificates associated with a certificate order. (asynchronously)
     * List all certificates associated with a certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersListCertificatesAsync(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, final ApiCallback<AppServiceCertificateCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceCertificateOrdersListCertificatesValidateBeforeCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AppServiceCertificateCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceCertificateOrdersReissue
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param reissueCertificateOrderRequest Parameters for the reissue. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersReissueCall(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, ReissueCertificateOrderRequest reissueCertificateOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reissueCertificateOrderRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/reissue"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "certificateOrderName" + "}", localVarApiClient.escapeString(certificateOrderName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceCertificateOrdersReissueValidateBeforeCall(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, ReissueCertificateOrderRequest reissueCertificateOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersReissue(Async)");
        }

        // verify the required parameter 'certificateOrderName' is set
        if (certificateOrderName == null) {
            throw new ApiException("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersReissue(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersReissue(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersReissue(Async)");
        }

        // verify the required parameter 'reissueCertificateOrderRequest' is set
        if (reissueCertificateOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'reissueCertificateOrderRequest' when calling appServiceCertificateOrdersReissue(Async)");
        }

        return appServiceCertificateOrdersReissueCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, reissueCertificateOrderRequest, _callback);

    }

    /**
     * Reissue an existing certificate order.
     * Reissue an existing certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param reissueCertificateOrderRequest Parameters for the reissue. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void appServiceCertificateOrdersReissue(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, ReissueCertificateOrderRequest reissueCertificateOrderRequest) throws ApiException {
        appServiceCertificateOrdersReissueWithHttpInfo(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, reissueCertificateOrderRequest);
    }

    /**
     * Reissue an existing certificate order.
     * Reissue an existing certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param reissueCertificateOrderRequest Parameters for the reissue. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appServiceCertificateOrdersReissueWithHttpInfo(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, ReissueCertificateOrderRequest reissueCertificateOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = appServiceCertificateOrdersReissueValidateBeforeCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, reissueCertificateOrderRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reissue an existing certificate order. (asynchronously)
     * Reissue an existing certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param reissueCertificateOrderRequest Parameters for the reissue. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersReissueAsync(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, ReissueCertificateOrderRequest reissueCertificateOrderRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceCertificateOrdersReissueValidateBeforeCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, reissueCertificateOrderRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceCertificateOrdersRenew
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param renewCertificateOrderRequest Renew parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersRenewCall(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, RenewCertificateOrderRequest renewCertificateOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = renewCertificateOrderRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/renew"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "certificateOrderName" + "}", localVarApiClient.escapeString(certificateOrderName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceCertificateOrdersRenewValidateBeforeCall(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, RenewCertificateOrderRequest renewCertificateOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersRenew(Async)");
        }

        // verify the required parameter 'certificateOrderName' is set
        if (certificateOrderName == null) {
            throw new ApiException("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersRenew(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersRenew(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersRenew(Async)");
        }

        // verify the required parameter 'renewCertificateOrderRequest' is set
        if (renewCertificateOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'renewCertificateOrderRequest' when calling appServiceCertificateOrdersRenew(Async)");
        }

        return appServiceCertificateOrdersRenewCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, renewCertificateOrderRequest, _callback);

    }

    /**
     * Renew an existing certificate order.
     * Renew an existing certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param renewCertificateOrderRequest Renew parameters (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void appServiceCertificateOrdersRenew(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, RenewCertificateOrderRequest renewCertificateOrderRequest) throws ApiException {
        appServiceCertificateOrdersRenewWithHttpInfo(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, renewCertificateOrderRequest);
    }

    /**
     * Renew an existing certificate order.
     * Renew an existing certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param renewCertificateOrderRequest Renew parameters (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appServiceCertificateOrdersRenewWithHttpInfo(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, RenewCertificateOrderRequest renewCertificateOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = appServiceCertificateOrdersRenewValidateBeforeCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, renewCertificateOrderRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Renew an existing certificate order. (asynchronously)
     * Renew an existing certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param renewCertificateOrderRequest Renew parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersRenewAsync(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, RenewCertificateOrderRequest renewCertificateOrderRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceCertificateOrdersRenewValidateBeforeCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, renewCertificateOrderRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceCertificateOrdersResendEmail
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersResendEmailCall(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/resendEmail"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "certificateOrderName" + "}", localVarApiClient.escapeString(certificateOrderName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceCertificateOrdersResendEmailValidateBeforeCall(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersResendEmail(Async)");
        }

        // verify the required parameter 'certificateOrderName' is set
        if (certificateOrderName == null) {
            throw new ApiException("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersResendEmail(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersResendEmail(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersResendEmail(Async)");
        }

        return appServiceCertificateOrdersResendEmailCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Resend certificate email.
     * Resend certificate email.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void appServiceCertificateOrdersResendEmail(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion) throws ApiException {
        appServiceCertificateOrdersResendEmailWithHttpInfo(resourceGroupName, certificateOrderName, subscriptionId, apiVersion);
    }

    /**
     * Resend certificate email.
     * Resend certificate email.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appServiceCertificateOrdersResendEmailWithHttpInfo(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceCertificateOrdersResendEmailValidateBeforeCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Resend certificate email. (asynchronously)
     * Resend certificate email.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersResendEmailAsync(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceCertificateOrdersResendEmailValidateBeforeCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceCertificateOrdersResendRequestEmails
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param nameIdentifier Email address (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersResendRequestEmailsCall(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, AppServiceCertificateOrdersResendRequestEmailsRequest nameIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = nameIdentifier;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/resendRequestEmails"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "certificateOrderName" + "}", localVarApiClient.escapeString(certificateOrderName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceCertificateOrdersResendRequestEmailsValidateBeforeCall(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, AppServiceCertificateOrdersResendRequestEmailsRequest nameIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersResendRequestEmails(Async)");
        }

        // verify the required parameter 'certificateOrderName' is set
        if (certificateOrderName == null) {
            throw new ApiException("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersResendRequestEmails(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersResendRequestEmails(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersResendRequestEmails(Async)");
        }

        // verify the required parameter 'nameIdentifier' is set
        if (nameIdentifier == null) {
            throw new ApiException("Missing the required parameter 'nameIdentifier' when calling appServiceCertificateOrdersResendRequestEmails(Async)");
        }

        return appServiceCertificateOrdersResendRequestEmailsCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, nameIdentifier, _callback);

    }

    /**
     * Verify domain ownership for this certificate order.
     * Verify domain ownership for this certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param nameIdentifier Email address (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void appServiceCertificateOrdersResendRequestEmails(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, AppServiceCertificateOrdersResendRequestEmailsRequest nameIdentifier) throws ApiException {
        appServiceCertificateOrdersResendRequestEmailsWithHttpInfo(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, nameIdentifier);
    }

    /**
     * Verify domain ownership for this certificate order.
     * Verify domain ownership for this certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param nameIdentifier Email address (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appServiceCertificateOrdersResendRequestEmailsWithHttpInfo(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, AppServiceCertificateOrdersResendRequestEmailsRequest nameIdentifier) throws ApiException {
        okhttp3.Call localVarCall = appServiceCertificateOrdersResendRequestEmailsValidateBeforeCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, nameIdentifier, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Verify domain ownership for this certificate order. (asynchronously)
     * Verify domain ownership for this certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param nameIdentifier Email address (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersResendRequestEmailsAsync(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, AppServiceCertificateOrdersResendRequestEmailsRequest nameIdentifier, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceCertificateOrdersResendRequestEmailsValidateBeforeCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, nameIdentifier, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceCertificateOrdersRetrieveCertificateActions
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersRetrieveCertificateActionsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveCertificateActions"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceCertificateOrdersRetrieveCertificateActionsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersRetrieveCertificateActions(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceCertificateOrdersRetrieveCertificateActions(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersRetrieveCertificateActions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersRetrieveCertificateActions(Async)");
        }

        return appServiceCertificateOrdersRetrieveCertificateActionsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Retrieve the list of certificate actions.
     * Retrieve the list of certificate actions.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return List&lt;CertificateOrderAction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<CertificateOrderAction> appServiceCertificateOrdersRetrieveCertificateActions(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<List<CertificateOrderAction>> localVarResp = appServiceCertificateOrdersRetrieveCertificateActionsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Retrieve the list of certificate actions.
     * Retrieve the list of certificate actions.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;List&lt;CertificateOrderAction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CertificateOrderAction>> appServiceCertificateOrdersRetrieveCertificateActionsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceCertificateOrdersRetrieveCertificateActionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<List<CertificateOrderAction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the list of certificate actions. (asynchronously)
     * Retrieve the list of certificate actions.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersRetrieveCertificateActionsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<List<CertificateOrderAction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceCertificateOrdersRetrieveCertificateActionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<CertificateOrderAction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceCertificateOrdersRetrieveCertificateEmailHistory
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersRetrieveCertificateEmailHistoryCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveEmailHistory"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceCertificateOrdersRetrieveCertificateEmailHistoryValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersRetrieveCertificateEmailHistory(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceCertificateOrdersRetrieveCertificateEmailHistory(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersRetrieveCertificateEmailHistory(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersRetrieveCertificateEmailHistory(Async)");
        }

        return appServiceCertificateOrdersRetrieveCertificateEmailHistoryCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Retrieve email history.
     * Retrieve email history.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return List&lt;CertificateEmail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<CertificateEmail> appServiceCertificateOrdersRetrieveCertificateEmailHistory(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<List<CertificateEmail>> localVarResp = appServiceCertificateOrdersRetrieveCertificateEmailHistoryWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Retrieve email history.
     * Retrieve email history.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;List&lt;CertificateEmail&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CertificateEmail>> appServiceCertificateOrdersRetrieveCertificateEmailHistoryWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceCertificateOrdersRetrieveCertificateEmailHistoryValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<List<CertificateEmail>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve email history. (asynchronously)
     * Retrieve email history.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersRetrieveCertificateEmailHistoryAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<List<CertificateEmail>> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceCertificateOrdersRetrieveCertificateEmailHistoryValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<CertificateEmail>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceCertificateOrdersRetrieveSiteSeal
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteSealRequest Site seal request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersRetrieveSiteSealCall(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, SiteSealRequest siteSealRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteSealRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/retrieveSiteSeal"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "certificateOrderName" + "}", localVarApiClient.escapeString(certificateOrderName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceCertificateOrdersRetrieveSiteSealValidateBeforeCall(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, SiteSealRequest siteSealRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersRetrieveSiteSeal(Async)");
        }

        // verify the required parameter 'certificateOrderName' is set
        if (certificateOrderName == null) {
            throw new ApiException("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersRetrieveSiteSeal(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersRetrieveSiteSeal(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersRetrieveSiteSeal(Async)");
        }

        // verify the required parameter 'siteSealRequest' is set
        if (siteSealRequest == null) {
            throw new ApiException("Missing the required parameter 'siteSealRequest' when calling appServiceCertificateOrdersRetrieveSiteSeal(Async)");
        }

        return appServiceCertificateOrdersRetrieveSiteSealCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, siteSealRequest, _callback);

    }

    /**
     * Verify domain ownership for this certificate order.
     * Verify domain ownership for this certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteSealRequest Site seal request. (required)
     * @return SiteSeal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SiteSeal appServiceCertificateOrdersRetrieveSiteSeal(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, SiteSealRequest siteSealRequest) throws ApiException {
        ApiResponse<SiteSeal> localVarResp = appServiceCertificateOrdersRetrieveSiteSealWithHttpInfo(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, siteSealRequest);
        return localVarResp.getData();
    }

    /**
     * Verify domain ownership for this certificate order.
     * Verify domain ownership for this certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteSealRequest Site seal request. (required)
     * @return ApiResponse&lt;SiteSeal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteSeal> appServiceCertificateOrdersRetrieveSiteSealWithHttpInfo(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, SiteSealRequest siteSealRequest) throws ApiException {
        okhttp3.Call localVarCall = appServiceCertificateOrdersRetrieveSiteSealValidateBeforeCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, siteSealRequest, null);
        Type localVarReturnType = new TypeToken<SiteSeal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify domain ownership for this certificate order. (asynchronously)
     * Verify domain ownership for this certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteSealRequest Site seal request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersRetrieveSiteSealAsync(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, SiteSealRequest siteSealRequest, final ApiCallback<SiteSeal> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceCertificateOrdersRetrieveSiteSealValidateBeforeCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, siteSealRequest, _callback);
        Type localVarReturnType = new TypeToken<SiteSeal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceCertificateOrdersUpdate
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param certificateDistinguishedName Distinguished name to use for the certificate order. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> App Service Certificate Order is created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> App Service Certificate Order creation operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersUpdateCall(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, AppServiceCertificateOrderPatchResource certificateDistinguishedName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = certificateDistinguishedName;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "certificateOrderName" + "}", localVarApiClient.escapeString(certificateOrderName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceCertificateOrdersUpdateValidateBeforeCall(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, AppServiceCertificateOrderPatchResource certificateDistinguishedName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersUpdate(Async)");
        }

        // verify the required parameter 'certificateOrderName' is set
        if (certificateOrderName == null) {
            throw new ApiException("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersUpdate(Async)");
        }

        // verify the required parameter 'certificateDistinguishedName' is set
        if (certificateDistinguishedName == null) {
            throw new ApiException("Missing the required parameter 'certificateDistinguishedName' when calling appServiceCertificateOrdersUpdate(Async)");
        }

        return appServiceCertificateOrdersUpdateCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, certificateDistinguishedName, _callback);

    }

    /**
     * Create or update a certificate purchase order.
     * Create or update a certificate purchase order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param certificateDistinguishedName Distinguished name to use for the certificate order. (required)
     * @return AppServiceCertificateOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> App Service Certificate Order is created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> App Service Certificate Order creation operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public AppServiceCertificateOrder appServiceCertificateOrdersUpdate(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, AppServiceCertificateOrderPatchResource certificateDistinguishedName) throws ApiException {
        ApiResponse<AppServiceCertificateOrder> localVarResp = appServiceCertificateOrdersUpdateWithHttpInfo(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, certificateDistinguishedName);
        return localVarResp.getData();
    }

    /**
     * Create or update a certificate purchase order.
     * Create or update a certificate purchase order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param certificateDistinguishedName Distinguished name to use for the certificate order. (required)
     * @return ApiResponse&lt;AppServiceCertificateOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> App Service Certificate Order is created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> App Service Certificate Order creation operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServiceCertificateOrder> appServiceCertificateOrdersUpdateWithHttpInfo(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, AppServiceCertificateOrderPatchResource certificateDistinguishedName) throws ApiException {
        okhttp3.Call localVarCall = appServiceCertificateOrdersUpdateValidateBeforeCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, certificateDistinguishedName, null);
        Type localVarReturnType = new TypeToken<AppServiceCertificateOrder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a certificate purchase order. (asynchronously)
     * Create or update a certificate purchase order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param certificateDistinguishedName Distinguished name to use for the certificate order. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> App Service Certificate Order is created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> App Service Certificate Order creation operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersUpdateAsync(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, AppServiceCertificateOrderPatchResource certificateDistinguishedName, final ApiCallback<AppServiceCertificateOrder> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceCertificateOrdersUpdateValidateBeforeCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, certificateDistinguishedName, _callback);
        Type localVarReturnType = new TypeToken<AppServiceCertificateOrder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceCertificateOrdersUpdateCertificate
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param keyVaultCertificate Key vault certificate resource Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> App Service Certificate is created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> App Service Certificate creation operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersUpdateCertificateCall(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, AppServiceCertificatePatchResource keyVaultCertificate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keyVaultCertificate;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "certificateOrderName" + "}", localVarApiClient.escapeString(certificateOrderName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceCertificateOrdersUpdateCertificateValidateBeforeCall(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, AppServiceCertificatePatchResource keyVaultCertificate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersUpdateCertificate(Async)");
        }

        // verify the required parameter 'certificateOrderName' is set
        if (certificateOrderName == null) {
            throw new ApiException("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersUpdateCertificate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceCertificateOrdersUpdateCertificate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersUpdateCertificate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersUpdateCertificate(Async)");
        }

        // verify the required parameter 'keyVaultCertificate' is set
        if (keyVaultCertificate == null) {
            throw new ApiException("Missing the required parameter 'keyVaultCertificate' when calling appServiceCertificateOrdersUpdateCertificate(Async)");
        }

        return appServiceCertificateOrdersUpdateCertificateCall(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, keyVaultCertificate, _callback);

    }

    /**
     * Creates or updates a certificate and associates with key vault secret.
     * Creates or updates a certificate and associates with key vault secret.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param keyVaultCertificate Key vault certificate resource Id. (required)
     * @return AppServiceCertificateResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> App Service Certificate is created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> App Service Certificate creation operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public AppServiceCertificateResource appServiceCertificateOrdersUpdateCertificate(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, AppServiceCertificatePatchResource keyVaultCertificate) throws ApiException {
        ApiResponse<AppServiceCertificateResource> localVarResp = appServiceCertificateOrdersUpdateCertificateWithHttpInfo(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, keyVaultCertificate);
        return localVarResp.getData();
    }

    /**
     * Creates or updates a certificate and associates with key vault secret.
     * Creates or updates a certificate and associates with key vault secret.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param keyVaultCertificate Key vault certificate resource Id. (required)
     * @return ApiResponse&lt;AppServiceCertificateResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> App Service Certificate is created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> App Service Certificate creation operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServiceCertificateResource> appServiceCertificateOrdersUpdateCertificateWithHttpInfo(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, AppServiceCertificatePatchResource keyVaultCertificate) throws ApiException {
        okhttp3.Call localVarCall = appServiceCertificateOrdersUpdateCertificateValidateBeforeCall(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, keyVaultCertificate, null);
        Type localVarReturnType = new TypeToken<AppServiceCertificateResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates or updates a certificate and associates with key vault secret. (asynchronously)
     * Creates or updates a certificate and associates with key vault secret.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param keyVaultCertificate Key vault certificate resource Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> App Service Certificate is created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> App Service Certificate creation operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersUpdateCertificateAsync(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, AppServiceCertificatePatchResource keyVaultCertificate, final ApiCallback<AppServiceCertificateResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceCertificateOrdersUpdateCertificateValidateBeforeCall(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, keyVaultCertificate, _callback);
        Type localVarReturnType = new TypeToken<AppServiceCertificateResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceCertificateOrdersValidatePurchaseInformation
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param appServiceCertificateOrder Information for a certificate order. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersValidatePurchaseInformationCall(String subscriptionId, String apiVersion, AppServiceCertificateOrder appServiceCertificateOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appServiceCertificateOrder;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/validateCertificateRegistrationInformation"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceCertificateOrdersValidatePurchaseInformationValidateBeforeCall(String subscriptionId, String apiVersion, AppServiceCertificateOrder appServiceCertificateOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersValidatePurchaseInformation(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersValidatePurchaseInformation(Async)");
        }

        // verify the required parameter 'appServiceCertificateOrder' is set
        if (appServiceCertificateOrder == null) {
            throw new ApiException("Missing the required parameter 'appServiceCertificateOrder' when calling appServiceCertificateOrdersValidatePurchaseInformation(Async)");
        }

        return appServiceCertificateOrdersValidatePurchaseInformationCall(subscriptionId, apiVersion, appServiceCertificateOrder, _callback);

    }

    /**
     * Validate information for a certificate order.
     * Validate information for a certificate order.
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param appServiceCertificateOrder Information for a certificate order. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void appServiceCertificateOrdersValidatePurchaseInformation(String subscriptionId, String apiVersion, AppServiceCertificateOrder appServiceCertificateOrder) throws ApiException {
        appServiceCertificateOrdersValidatePurchaseInformationWithHttpInfo(subscriptionId, apiVersion, appServiceCertificateOrder);
    }

    /**
     * Validate information for a certificate order.
     * Validate information for a certificate order.
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param appServiceCertificateOrder Information for a certificate order. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appServiceCertificateOrdersValidatePurchaseInformationWithHttpInfo(String subscriptionId, String apiVersion, AppServiceCertificateOrder appServiceCertificateOrder) throws ApiException {
        okhttp3.Call localVarCall = appServiceCertificateOrdersValidatePurchaseInformationValidateBeforeCall(subscriptionId, apiVersion, appServiceCertificateOrder, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Validate information for a certificate order. (asynchronously)
     * Validate information for a certificate order.
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param appServiceCertificateOrder Information for a certificate order. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersValidatePurchaseInformationAsync(String subscriptionId, String apiVersion, AppServiceCertificateOrder appServiceCertificateOrder, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceCertificateOrdersValidatePurchaseInformationValidateBeforeCall(subscriptionId, apiVersion, appServiceCertificateOrder, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceCertificateOrdersVerifyDomainOwnership
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersVerifyDomainOwnershipCall(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/verifyDomainOwnership"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "certificateOrderName" + "}", localVarApiClient.escapeString(certificateOrderName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceCertificateOrdersVerifyDomainOwnershipValidateBeforeCall(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersVerifyDomainOwnership(Async)");
        }

        // verify the required parameter 'certificateOrderName' is set
        if (certificateOrderName == null) {
            throw new ApiException("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersVerifyDomainOwnership(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersVerifyDomainOwnership(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersVerifyDomainOwnership(Async)");
        }

        return appServiceCertificateOrdersVerifyDomainOwnershipCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Verify domain ownership for this certificate order.
     * Verify domain ownership for this certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void appServiceCertificateOrdersVerifyDomainOwnership(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion) throws ApiException {
        appServiceCertificateOrdersVerifyDomainOwnershipWithHttpInfo(resourceGroupName, certificateOrderName, subscriptionId, apiVersion);
    }

    /**
     * Verify domain ownership for this certificate order.
     * Verify domain ownership for this certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appServiceCertificateOrdersVerifyDomainOwnershipWithHttpInfo(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceCertificateOrdersVerifyDomainOwnershipValidateBeforeCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Verify domain ownership for this certificate order. (asynchronously)
     * Verify domain ownership for this certificate order.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param certificateOrderName Name of the certificate order. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceCertificateOrdersVerifyDomainOwnershipAsync(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceCertificateOrdersVerifyDomainOwnershipValidateBeforeCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
