/**
 * AppServiceCertificateOrders API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppServiceCertificateCollection from '../model/AppServiceCertificateCollection';
import AppServiceCertificateOrder from '../model/AppServiceCertificateOrder';
import AppServiceCertificateOrderCollection from '../model/AppServiceCertificateOrderCollection';
import AppServiceCertificateOrderPatchResource from '../model/AppServiceCertificateOrderPatchResource';
import AppServiceCertificateOrdersResendRequestEmailsRequest from '../model/AppServiceCertificateOrdersResendRequestEmailsRequest';
import AppServiceCertificatePatchResource from '../model/AppServiceCertificatePatchResource';
import AppServiceCertificateResource from '../model/AppServiceCertificateResource';
import CertificateEmail from '../model/CertificateEmail';
import CertificateOrderAction from '../model/CertificateOrderAction';
import ReissueCertificateOrderRequest from '../model/ReissueCertificateOrderRequest';
import RenewCertificateOrderRequest from '../model/RenewCertificateOrderRequest';
import SiteSeal from '../model/SiteSeal';
import SiteSealRequest from '../model/SiteSealRequest';

/**
* AppServiceCertificateOrders service.
* @module api/AppServiceCertificateOrdersApi
* @version 2015-08-01
*/
export default class AppServiceCertificateOrdersApi {

    /**
    * Constructs a new AppServiceCertificateOrdersApi. 
    * @alias module:api/AppServiceCertificateOrdersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appServiceCertificateOrdersCreateOrUpdate operation.
     * @callback module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServiceCertificateOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a certificate purchase order.
     * Create or update a certificate purchase order.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} certificateOrderName Name of the certificate order.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/AppServiceCertificateOrder} certificateDistinguishedName Distinguished name to use for the certificate order.
     * @param {module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServiceCertificateOrder}
     */
    appServiceCertificateOrdersCreateOrUpdate(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, certificateDistinguishedName, callback) {
      let postBody = certificateDistinguishedName;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersCreateOrUpdate");
      }
      // verify the required parameter 'certificateOrderName' is set
      if (certificateOrderName === undefined || certificateOrderName === null) {
        throw new Error("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersCreateOrUpdate");
      }
      // verify the required parameter 'certificateDistinguishedName' is set
      if (certificateDistinguishedName === undefined || certificateDistinguishedName === null) {
        throw new Error("Missing the required parameter 'certificateDistinguishedName' when calling appServiceCertificateOrdersCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'certificateOrderName': certificateOrderName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppServiceCertificateOrder;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceCertificateOrdersCreateOrUpdateCertificate operation.
     * @callback module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersCreateOrUpdateCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServiceCertificateResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a certificate and associates with key vault secret.
     * Creates or updates a certificate and associates with key vault secret.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} certificateOrderName Name of the certificate order.
     * @param {String} name Name of the certificate.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/AppServiceCertificateResource} keyVaultCertificate Key vault certificate resource Id.
     * @param {module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersCreateOrUpdateCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServiceCertificateResource}
     */
    appServiceCertificateOrdersCreateOrUpdateCertificate(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, keyVaultCertificate, callback) {
      let postBody = keyVaultCertificate;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersCreateOrUpdateCertificate");
      }
      // verify the required parameter 'certificateOrderName' is set
      if (certificateOrderName === undefined || certificateOrderName === null) {
        throw new Error("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersCreateOrUpdateCertificate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceCertificateOrdersCreateOrUpdateCertificate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersCreateOrUpdateCertificate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersCreateOrUpdateCertificate");
      }
      // verify the required parameter 'keyVaultCertificate' is set
      if (keyVaultCertificate === undefined || keyVaultCertificate === null) {
        throw new Error("Missing the required parameter 'keyVaultCertificate' when calling appServiceCertificateOrdersCreateOrUpdateCertificate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'certificateOrderName': certificateOrderName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppServiceCertificateResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceCertificateOrdersDelete operation.
     * @callback module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing certificate order.
     * Delete an existing certificate order.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} certificateOrderName Name of the certificate order.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appServiceCertificateOrdersDelete(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersDelete");
      }
      // verify the required parameter 'certificateOrderName' is set
      if (certificateOrderName === undefined || certificateOrderName === null) {
        throw new Error("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'certificateOrderName': certificateOrderName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceCertificateOrdersDeleteCertificate operation.
     * @callback module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersDeleteCertificateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the certificate associated with a certificate order.
     * Delete the certificate associated with a certificate order.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} certificateOrderName Name of the certificate order.
     * @param {String} name Name of the certificate.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersDeleteCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appServiceCertificateOrdersDeleteCertificate(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersDeleteCertificate");
      }
      // verify the required parameter 'certificateOrderName' is set
      if (certificateOrderName === undefined || certificateOrderName === null) {
        throw new Error("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersDeleteCertificate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceCertificateOrdersDeleteCertificate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersDeleteCertificate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersDeleteCertificate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'certificateOrderName': certificateOrderName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceCertificateOrdersGet operation.
     * @callback module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServiceCertificateOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a certificate order.
     * Get a certificate order.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} certificateOrderName Name of the certificate order..
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServiceCertificateOrder}
     */
    appServiceCertificateOrdersGet(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersGet");
      }
      // verify the required parameter 'certificateOrderName' is set
      if (certificateOrderName === undefined || certificateOrderName === null) {
        throw new Error("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'certificateOrderName': certificateOrderName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppServiceCertificateOrder;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceCertificateOrdersGetCertificate operation.
     * @callback module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersGetCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServiceCertificateResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the certificate associated with a certificate order.
     * Get the certificate associated with a certificate order.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} certificateOrderName Name of the certificate order.
     * @param {String} name Name of the certificate.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersGetCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServiceCertificateResource}
     */
    appServiceCertificateOrdersGetCertificate(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersGetCertificate");
      }
      // verify the required parameter 'certificateOrderName' is set
      if (certificateOrderName === undefined || certificateOrderName === null) {
        throw new Error("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersGetCertificate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceCertificateOrdersGetCertificate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersGetCertificate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersGetCertificate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'certificateOrderName': certificateOrderName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppServiceCertificateResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceCertificateOrdersList operation.
     * @callback module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServiceCertificateOrderCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all certificate orders in a subscription.
     * List all certificate orders in a subscription.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServiceCertificateOrderCollection}
     */
    appServiceCertificateOrdersList(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppServiceCertificateOrderCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/certificateOrders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceCertificateOrdersListByResourceGroup operation.
     * @callback module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServiceCertificateOrderCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get certificate orders in a resource group.
     * Get certificate orders in a resource group.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServiceCertificateOrderCollection}
     */
    appServiceCertificateOrdersListByResourceGroup(resourceGroupName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersListByResourceGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppServiceCertificateOrderCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceCertificateOrdersListCertificates operation.
     * @callback module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersListCertificatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServiceCertificateCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all certificates associated with a certificate order.
     * List all certificates associated with a certificate order.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} certificateOrderName Name of the certificate order.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersListCertificatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServiceCertificateCollection}
     */
    appServiceCertificateOrdersListCertificates(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersListCertificates");
      }
      // verify the required parameter 'certificateOrderName' is set
      if (certificateOrderName === undefined || certificateOrderName === null) {
        throw new Error("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersListCertificates");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersListCertificates");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersListCertificates");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'certificateOrderName': certificateOrderName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppServiceCertificateCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceCertificateOrdersReissue operation.
     * @callback module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersReissueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reissue an existing certificate order.
     * Reissue an existing certificate order.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} certificateOrderName Name of the certificate order.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/ReissueCertificateOrderRequest} reissueCertificateOrderRequest Parameters for the reissue.
     * @param {module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersReissueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appServiceCertificateOrdersReissue(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, reissueCertificateOrderRequest, callback) {
      let postBody = reissueCertificateOrderRequest;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersReissue");
      }
      // verify the required parameter 'certificateOrderName' is set
      if (certificateOrderName === undefined || certificateOrderName === null) {
        throw new Error("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersReissue");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersReissue");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersReissue");
      }
      // verify the required parameter 'reissueCertificateOrderRequest' is set
      if (reissueCertificateOrderRequest === undefined || reissueCertificateOrderRequest === null) {
        throw new Error("Missing the required parameter 'reissueCertificateOrderRequest' when calling appServiceCertificateOrdersReissue");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'certificateOrderName': certificateOrderName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/reissue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceCertificateOrdersRenew operation.
     * @callback module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersRenewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Renew an existing certificate order.
     * Renew an existing certificate order.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} certificateOrderName Name of the certificate order.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/RenewCertificateOrderRequest} renewCertificateOrderRequest Renew parameters
     * @param {module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersRenewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appServiceCertificateOrdersRenew(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, renewCertificateOrderRequest, callback) {
      let postBody = renewCertificateOrderRequest;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersRenew");
      }
      // verify the required parameter 'certificateOrderName' is set
      if (certificateOrderName === undefined || certificateOrderName === null) {
        throw new Error("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersRenew");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersRenew");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersRenew");
      }
      // verify the required parameter 'renewCertificateOrderRequest' is set
      if (renewCertificateOrderRequest === undefined || renewCertificateOrderRequest === null) {
        throw new Error("Missing the required parameter 'renewCertificateOrderRequest' when calling appServiceCertificateOrdersRenew");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'certificateOrderName': certificateOrderName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/renew', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceCertificateOrdersResendEmail operation.
     * @callback module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersResendEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resend certificate email.
     * Resend certificate email.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} certificateOrderName Name of the certificate order.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersResendEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appServiceCertificateOrdersResendEmail(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersResendEmail");
      }
      // verify the required parameter 'certificateOrderName' is set
      if (certificateOrderName === undefined || certificateOrderName === null) {
        throw new Error("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersResendEmail");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersResendEmail");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersResendEmail");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'certificateOrderName': certificateOrderName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/resendEmail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceCertificateOrdersResendRequestEmails operation.
     * @callback module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersResendRequestEmailsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify domain ownership for this certificate order.
     * Verify domain ownership for this certificate order.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} certificateOrderName Name of the certificate order.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/AppServiceCertificateOrdersResendRequestEmailsRequest} nameIdentifier Email address
     * @param {module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersResendRequestEmailsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appServiceCertificateOrdersResendRequestEmails(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, nameIdentifier, callback) {
      let postBody = nameIdentifier;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersResendRequestEmails");
      }
      // verify the required parameter 'certificateOrderName' is set
      if (certificateOrderName === undefined || certificateOrderName === null) {
        throw new Error("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersResendRequestEmails");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersResendRequestEmails");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersResendRequestEmails");
      }
      // verify the required parameter 'nameIdentifier' is set
      if (nameIdentifier === undefined || nameIdentifier === null) {
        throw new Error("Missing the required parameter 'nameIdentifier' when calling appServiceCertificateOrdersResendRequestEmails");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'certificateOrderName': certificateOrderName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/resendRequestEmails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceCertificateOrdersRetrieveCertificateActions operation.
     * @callback module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersRetrieveCertificateActionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CertificateOrderAction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the list of certificate actions.
     * Retrieve the list of certificate actions.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the certificate order.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersRetrieveCertificateActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CertificateOrderAction>}
     */
    appServiceCertificateOrdersRetrieveCertificateActions(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersRetrieveCertificateActions");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceCertificateOrdersRetrieveCertificateActions");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersRetrieveCertificateActions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersRetrieveCertificateActions");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CertificateOrderAction];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveCertificateActions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceCertificateOrdersRetrieveCertificateEmailHistory operation.
     * @callback module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersRetrieveCertificateEmailHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CertificateEmail>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve email history.
     * Retrieve email history.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the certificate order.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersRetrieveCertificateEmailHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CertificateEmail>}
     */
    appServiceCertificateOrdersRetrieveCertificateEmailHistory(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersRetrieveCertificateEmailHistory");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceCertificateOrdersRetrieveCertificateEmailHistory");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersRetrieveCertificateEmailHistory");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersRetrieveCertificateEmailHistory");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CertificateEmail];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveEmailHistory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceCertificateOrdersRetrieveSiteSeal operation.
     * @callback module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersRetrieveSiteSealCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteSeal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify domain ownership for this certificate order.
     * Verify domain ownership for this certificate order.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} certificateOrderName Name of the certificate order.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/SiteSealRequest} siteSealRequest Site seal request.
     * @param {module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersRetrieveSiteSealCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteSeal}
     */
    appServiceCertificateOrdersRetrieveSiteSeal(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, siteSealRequest, callback) {
      let postBody = siteSealRequest;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersRetrieveSiteSeal");
      }
      // verify the required parameter 'certificateOrderName' is set
      if (certificateOrderName === undefined || certificateOrderName === null) {
        throw new Error("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersRetrieveSiteSeal");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersRetrieveSiteSeal");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersRetrieveSiteSeal");
      }
      // verify the required parameter 'siteSealRequest' is set
      if (siteSealRequest === undefined || siteSealRequest === null) {
        throw new Error("Missing the required parameter 'siteSealRequest' when calling appServiceCertificateOrdersRetrieveSiteSeal");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'certificateOrderName': certificateOrderName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SiteSeal;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/retrieveSiteSeal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceCertificateOrdersUpdate operation.
     * @callback module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServiceCertificateOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a certificate purchase order.
     * Create or update a certificate purchase order.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} certificateOrderName Name of the certificate order.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/AppServiceCertificateOrderPatchResource} certificateDistinguishedName Distinguished name to use for the certificate order.
     * @param {module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServiceCertificateOrder}
     */
    appServiceCertificateOrdersUpdate(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, certificateDistinguishedName, callback) {
      let postBody = certificateDistinguishedName;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersUpdate");
      }
      // verify the required parameter 'certificateOrderName' is set
      if (certificateOrderName === undefined || certificateOrderName === null) {
        throw new Error("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersUpdate");
      }
      // verify the required parameter 'certificateDistinguishedName' is set
      if (certificateDistinguishedName === undefined || certificateDistinguishedName === null) {
        throw new Error("Missing the required parameter 'certificateDistinguishedName' when calling appServiceCertificateOrdersUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'certificateOrderName': certificateOrderName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppServiceCertificateOrder;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceCertificateOrdersUpdateCertificate operation.
     * @callback module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersUpdateCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServiceCertificateResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a certificate and associates with key vault secret.
     * Creates or updates a certificate and associates with key vault secret.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} certificateOrderName Name of the certificate order.
     * @param {String} name Name of the certificate.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/AppServiceCertificatePatchResource} keyVaultCertificate Key vault certificate resource Id.
     * @param {module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersUpdateCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServiceCertificateResource}
     */
    appServiceCertificateOrdersUpdateCertificate(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, keyVaultCertificate, callback) {
      let postBody = keyVaultCertificate;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersUpdateCertificate");
      }
      // verify the required parameter 'certificateOrderName' is set
      if (certificateOrderName === undefined || certificateOrderName === null) {
        throw new Error("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersUpdateCertificate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceCertificateOrdersUpdateCertificate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersUpdateCertificate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersUpdateCertificate");
      }
      // verify the required parameter 'keyVaultCertificate' is set
      if (keyVaultCertificate === undefined || keyVaultCertificate === null) {
        throw new Error("Missing the required parameter 'keyVaultCertificate' when calling appServiceCertificateOrdersUpdateCertificate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'certificateOrderName': certificateOrderName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppServiceCertificateResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceCertificateOrdersValidatePurchaseInformation operation.
     * @callback module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersValidatePurchaseInformationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate information for a certificate order.
     * Validate information for a certificate order.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/AppServiceCertificateOrder} appServiceCertificateOrder Information for a certificate order.
     * @param {module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersValidatePurchaseInformationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appServiceCertificateOrdersValidatePurchaseInformation(subscriptionId, apiVersion, appServiceCertificateOrder, callback) {
      let postBody = appServiceCertificateOrder;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersValidatePurchaseInformation");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersValidatePurchaseInformation");
      }
      // verify the required parameter 'appServiceCertificateOrder' is set
      if (appServiceCertificateOrder === undefined || appServiceCertificateOrder === null) {
        throw new Error("Missing the required parameter 'appServiceCertificateOrder' when calling appServiceCertificateOrdersValidatePurchaseInformation");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/validateCertificateRegistrationInformation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceCertificateOrdersVerifyDomainOwnership operation.
     * @callback module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersVerifyDomainOwnershipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify domain ownership for this certificate order.
     * Verify domain ownership for this certificate order.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} certificateOrderName Name of the certificate order.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceCertificateOrdersApi~appServiceCertificateOrdersVerifyDomainOwnershipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appServiceCertificateOrdersVerifyDomainOwnership(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceCertificateOrdersVerifyDomainOwnership");
      }
      // verify the required parameter 'certificateOrderName' is set
      if (certificateOrderName === undefined || certificateOrderName === null) {
        throw new Error("Missing the required parameter 'certificateOrderName' when calling appServiceCertificateOrdersVerifyDomainOwnership");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceCertificateOrdersVerifyDomainOwnership");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceCertificateOrdersVerifyDomainOwnership");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'certificateOrderName': certificateOrderName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/verifyDomainOwnership', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
