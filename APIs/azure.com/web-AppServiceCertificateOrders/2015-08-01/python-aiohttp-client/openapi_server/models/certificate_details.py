# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CertificateDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, issuer: str=None, not_after: datetime=None, not_before: datetime=None, raw_data: str=None, serial_number: str=None, signature_algorithm: str=None, subject: str=None, thumbprint: str=None, version: int=None):
        """CertificateDetails - a model defined in OpenAPI

        :param issuer: The issuer of this CertificateDetails.
        :param not_after: The not_after of this CertificateDetails.
        :param not_before: The not_before of this CertificateDetails.
        :param raw_data: The raw_data of this CertificateDetails.
        :param serial_number: The serial_number of this CertificateDetails.
        :param signature_algorithm: The signature_algorithm of this CertificateDetails.
        :param subject: The subject of this CertificateDetails.
        :param thumbprint: The thumbprint of this CertificateDetails.
        :param version: The version of this CertificateDetails.
        """
        self.openapi_types = {
            'issuer': str,
            'not_after': datetime,
            'not_before': datetime,
            'raw_data': str,
            'serial_number': str,
            'signature_algorithm': str,
            'subject': str,
            'thumbprint': str,
            'version': int
        }

        self.attribute_map = {
            'issuer': 'issuer',
            'not_after': 'notAfter',
            'not_before': 'notBefore',
            'raw_data': 'rawData',
            'serial_number': 'serialNumber',
            'signature_algorithm': 'signatureAlgorithm',
            'subject': 'subject',
            'thumbprint': 'thumbprint',
            'version': 'version'
        }

        self._issuer = issuer
        self._not_after = not_after
        self._not_before = not_before
        self._raw_data = raw_data
        self._serial_number = serial_number
        self._signature_algorithm = signature_algorithm
        self._subject = subject
        self._thumbprint = thumbprint
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateDetails of this CertificateDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issuer(self):
        """Gets the issuer of this CertificateDetails.

        Certificate Issuer.

        :return: The issuer of this CertificateDetails.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this CertificateDetails.

        Certificate Issuer.

        :param issuer: The issuer of this CertificateDetails.
        :type issuer: str
        """

        self._issuer = issuer

    @property
    def not_after(self):
        """Gets the not_after of this CertificateDetails.

        Date Certificate is valid to.

        :return: The not_after of this CertificateDetails.
        :rtype: datetime
        """
        return self._not_after

    @not_after.setter
    def not_after(self, not_after):
        """Sets the not_after of this CertificateDetails.

        Date Certificate is valid to.

        :param not_after: The not_after of this CertificateDetails.
        :type not_after: datetime
        """

        self._not_after = not_after

    @property
    def not_before(self):
        """Gets the not_before of this CertificateDetails.

        Date Certificate is valid from.

        :return: The not_before of this CertificateDetails.
        :rtype: datetime
        """
        return self._not_before

    @not_before.setter
    def not_before(self, not_before):
        """Sets the not_before of this CertificateDetails.

        Date Certificate is valid from.

        :param not_before: The not_before of this CertificateDetails.
        :type not_before: datetime
        """

        self._not_before = not_before

    @property
    def raw_data(self):
        """Gets the raw_data of this CertificateDetails.

        Raw certificate data.

        :return: The raw_data of this CertificateDetails.
        :rtype: str
        """
        return self._raw_data

    @raw_data.setter
    def raw_data(self, raw_data):
        """Sets the raw_data of this CertificateDetails.

        Raw certificate data.

        :param raw_data: The raw_data of this CertificateDetails.
        :type raw_data: str
        """

        self._raw_data = raw_data

    @property
    def serial_number(self):
        """Gets the serial_number of this CertificateDetails.

        Certificate Serial Number.

        :return: The serial_number of this CertificateDetails.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this CertificateDetails.

        Certificate Serial Number.

        :param serial_number: The serial_number of this CertificateDetails.
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def signature_algorithm(self):
        """Gets the signature_algorithm of this CertificateDetails.

        Certificate Signature algorithm.

        :return: The signature_algorithm of this CertificateDetails.
        :rtype: str
        """
        return self._signature_algorithm

    @signature_algorithm.setter
    def signature_algorithm(self, signature_algorithm):
        """Sets the signature_algorithm of this CertificateDetails.

        Certificate Signature algorithm.

        :param signature_algorithm: The signature_algorithm of this CertificateDetails.
        :type signature_algorithm: str
        """

        self._signature_algorithm = signature_algorithm

    @property
    def subject(self):
        """Gets the subject of this CertificateDetails.

        Certificate Subject.

        :return: The subject of this CertificateDetails.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CertificateDetails.

        Certificate Subject.

        :param subject: The subject of this CertificateDetails.
        :type subject: str
        """

        self._subject = subject

    @property
    def thumbprint(self):
        """Gets the thumbprint of this CertificateDetails.

        Certificate Thumbprint.

        :return: The thumbprint of this CertificateDetails.
        :rtype: str
        """
        return self._thumbprint

    @thumbprint.setter
    def thumbprint(self, thumbprint):
        """Sets the thumbprint of this CertificateDetails.

        Certificate Thumbprint.

        :param thumbprint: The thumbprint of this CertificateDetails.
        :type thumbprint: str
        """

        self._thumbprint = thumbprint

    @property
    def version(self):
        """Gets the version of this CertificateDetails.

        Certificate Version.

        :return: The version of this CertificateDetails.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CertificateDetails.

        Certificate Version.

        :param version: The version of this CertificateDetails.
        :type version: int
        """

        self._version = version
