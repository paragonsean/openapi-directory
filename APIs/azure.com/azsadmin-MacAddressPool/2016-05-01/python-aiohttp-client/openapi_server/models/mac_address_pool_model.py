# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MacAddressPoolModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_mac_address: str=None, metadata: Dict[str, str]=None, number_of_allocated_mac_addresses: int=None, number_of_available_mac_addresses: int=None, start_mac_address: str=None):
        """MacAddressPoolModel - a model defined in OpenAPI

        :param end_mac_address: The end_mac_address of this MacAddressPoolModel.
        :param metadata: The metadata of this MacAddressPoolModel.
        :param number_of_allocated_mac_addresses: The number_of_allocated_mac_addresses of this MacAddressPoolModel.
        :param number_of_available_mac_addresses: The number_of_available_mac_addresses of this MacAddressPoolModel.
        :param start_mac_address: The start_mac_address of this MacAddressPoolModel.
        """
        self.openapi_types = {
            'end_mac_address': str,
            'metadata': Dict[str, str],
            'number_of_allocated_mac_addresses': int,
            'number_of_available_mac_addresses': int,
            'start_mac_address': str
        }

        self.attribute_map = {
            'end_mac_address': 'endMacAddress',
            'metadata': 'metadata',
            'number_of_allocated_mac_addresses': 'numberOfAllocatedMacAddresses',
            'number_of_available_mac_addresses': 'numberOfAvailableMacAddresses',
            'start_mac_address': 'startMacAddress'
        }

        self._end_mac_address = end_mac_address
        self._metadata = metadata
        self._number_of_allocated_mac_addresses = number_of_allocated_mac_addresses
        self._number_of_available_mac_addresses = number_of_available_mac_addresses
        self._start_mac_address = start_mac_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MacAddressPoolModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MacAddressPoolModel of this MacAddressPoolModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_mac_address(self):
        """Gets the end_mac_address of this MacAddressPoolModel.

        Ending MAC address.

        :return: The end_mac_address of this MacAddressPoolModel.
        :rtype: str
        """
        return self._end_mac_address

    @end_mac_address.setter
    def end_mac_address(self, end_mac_address):
        """Sets the end_mac_address of this MacAddressPoolModel.

        Ending MAC address.

        :param end_mac_address: The end_mac_address of this MacAddressPoolModel.
        :type end_mac_address: str
        """

        self._end_mac_address = end_mac_address

    @property
    def metadata(self):
        """Gets the metadata of this MacAddressPoolModel.

        Metadata related to the MAC pool.

        :return: The metadata of this MacAddressPoolModel.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this MacAddressPoolModel.

        Metadata related to the MAC pool.

        :param metadata: The metadata of this MacAddressPoolModel.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def number_of_allocated_mac_addresses(self):
        """Gets the number_of_allocated_mac_addresses of this MacAddressPoolModel.

        Number of MAC addresses allocated.

        :return: The number_of_allocated_mac_addresses of this MacAddressPoolModel.
        :rtype: int
        """
        return self._number_of_allocated_mac_addresses

    @number_of_allocated_mac_addresses.setter
    def number_of_allocated_mac_addresses(self, number_of_allocated_mac_addresses):
        """Sets the number_of_allocated_mac_addresses of this MacAddressPoolModel.

        Number of MAC addresses allocated.

        :param number_of_allocated_mac_addresses: The number_of_allocated_mac_addresses of this MacAddressPoolModel.
        :type number_of_allocated_mac_addresses: int
        """

        self._number_of_allocated_mac_addresses = number_of_allocated_mac_addresses

    @property
    def number_of_available_mac_addresses(self):
        """Gets the number_of_available_mac_addresses of this MacAddressPoolModel.

        Number of MAC addresses available.

        :return: The number_of_available_mac_addresses of this MacAddressPoolModel.
        :rtype: int
        """
        return self._number_of_available_mac_addresses

    @number_of_available_mac_addresses.setter
    def number_of_available_mac_addresses(self, number_of_available_mac_addresses):
        """Sets the number_of_available_mac_addresses of this MacAddressPoolModel.

        Number of MAC addresses available.

        :param number_of_available_mac_addresses: The number_of_available_mac_addresses of this MacAddressPoolModel.
        :type number_of_available_mac_addresses: int
        """

        self._number_of_available_mac_addresses = number_of_available_mac_addresses

    @property
    def start_mac_address(self):
        """Gets the start_mac_address of this MacAddressPoolModel.

        Starting MAC address.

        :return: The start_mac_address of this MacAddressPoolModel.
        :rtype: str
        """
        return self._start_mac_address

    @start_mac_address.setter
    def start_mac_address(self, start_mac_address):
        """Sets the start_mac_address of this MacAddressPoolModel.

        Starting MAC address.

        :param start_mac_address: The start_mac_address of this MacAddressPoolModel.
        :type start_mac_address: str
        """

        self._start_mac_address = start_mac_address
