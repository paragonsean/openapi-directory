/**
 * FabricAdminClient
 * MAC address pool operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2016-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMacAddressPoolModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMacAddressPoolModel::OAIMacAddressPoolModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMacAddressPoolModel::OAIMacAddressPoolModel() {
    this->initializeModel();
}

OAIMacAddressPoolModel::~OAIMacAddressPoolModel() {}

void OAIMacAddressPoolModel::initializeModel() {

    m_end_mac_address_isSet = false;
    m_end_mac_address_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_number_of_allocated_mac_addresses_isSet = false;
    m_number_of_allocated_mac_addresses_isValid = false;

    m_number_of_available_mac_addresses_isSet = false;
    m_number_of_available_mac_addresses_isValid = false;

    m_start_mac_address_isSet = false;
    m_start_mac_address_isValid = false;
}

void OAIMacAddressPoolModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMacAddressPoolModel::fromJsonObject(QJsonObject json) {

    m_end_mac_address_isValid = ::OpenAPI::fromJsonValue(m_end_mac_address, json[QString("endMacAddress")]);
    m_end_mac_address_isSet = !json[QString("endMacAddress")].isNull() && m_end_mac_address_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_number_of_allocated_mac_addresses_isValid = ::OpenAPI::fromJsonValue(m_number_of_allocated_mac_addresses, json[QString("numberOfAllocatedMacAddresses")]);
    m_number_of_allocated_mac_addresses_isSet = !json[QString("numberOfAllocatedMacAddresses")].isNull() && m_number_of_allocated_mac_addresses_isValid;

    m_number_of_available_mac_addresses_isValid = ::OpenAPI::fromJsonValue(m_number_of_available_mac_addresses, json[QString("numberOfAvailableMacAddresses")]);
    m_number_of_available_mac_addresses_isSet = !json[QString("numberOfAvailableMacAddresses")].isNull() && m_number_of_available_mac_addresses_isValid;

    m_start_mac_address_isValid = ::OpenAPI::fromJsonValue(m_start_mac_address, json[QString("startMacAddress")]);
    m_start_mac_address_isSet = !json[QString("startMacAddress")].isNull() && m_start_mac_address_isValid;
}

QString OAIMacAddressPoolModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMacAddressPoolModel::asJsonObject() const {
    QJsonObject obj;
    if (m_end_mac_address_isSet) {
        obj.insert(QString("endMacAddress"), ::OpenAPI::toJsonValue(m_end_mac_address));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_number_of_allocated_mac_addresses_isSet) {
        obj.insert(QString("numberOfAllocatedMacAddresses"), ::OpenAPI::toJsonValue(m_number_of_allocated_mac_addresses));
    }
    if (m_number_of_available_mac_addresses_isSet) {
        obj.insert(QString("numberOfAvailableMacAddresses"), ::OpenAPI::toJsonValue(m_number_of_available_mac_addresses));
    }
    if (m_start_mac_address_isSet) {
        obj.insert(QString("startMacAddress"), ::OpenAPI::toJsonValue(m_start_mac_address));
    }
    return obj;
}

QString OAIMacAddressPoolModel::getEndMacAddress() const {
    return m_end_mac_address;
}
void OAIMacAddressPoolModel::setEndMacAddress(const QString &end_mac_address) {
    m_end_mac_address = end_mac_address;
    m_end_mac_address_isSet = true;
}

bool OAIMacAddressPoolModel::is_end_mac_address_Set() const{
    return m_end_mac_address_isSet;
}

bool OAIMacAddressPoolModel::is_end_mac_address_Valid() const{
    return m_end_mac_address_isValid;
}

QMap<QString, QString> OAIMacAddressPoolModel::getMetadata() const {
    return m_metadata;
}
void OAIMacAddressPoolModel::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIMacAddressPoolModel::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIMacAddressPoolModel::is_metadata_Valid() const{
    return m_metadata_isValid;
}

qint64 OAIMacAddressPoolModel::getNumberOfAllocatedMacAddresses() const {
    return m_number_of_allocated_mac_addresses;
}
void OAIMacAddressPoolModel::setNumberOfAllocatedMacAddresses(const qint64 &number_of_allocated_mac_addresses) {
    m_number_of_allocated_mac_addresses = number_of_allocated_mac_addresses;
    m_number_of_allocated_mac_addresses_isSet = true;
}

bool OAIMacAddressPoolModel::is_number_of_allocated_mac_addresses_Set() const{
    return m_number_of_allocated_mac_addresses_isSet;
}

bool OAIMacAddressPoolModel::is_number_of_allocated_mac_addresses_Valid() const{
    return m_number_of_allocated_mac_addresses_isValid;
}

qint64 OAIMacAddressPoolModel::getNumberOfAvailableMacAddresses() const {
    return m_number_of_available_mac_addresses;
}
void OAIMacAddressPoolModel::setNumberOfAvailableMacAddresses(const qint64 &number_of_available_mac_addresses) {
    m_number_of_available_mac_addresses = number_of_available_mac_addresses;
    m_number_of_available_mac_addresses_isSet = true;
}

bool OAIMacAddressPoolModel::is_number_of_available_mac_addresses_Set() const{
    return m_number_of_available_mac_addresses_isSet;
}

bool OAIMacAddressPoolModel::is_number_of_available_mac_addresses_Valid() const{
    return m_number_of_available_mac_addresses_isValid;
}

QString OAIMacAddressPoolModel::getStartMacAddress() const {
    return m_start_mac_address;
}
void OAIMacAddressPoolModel::setStartMacAddress(const QString &start_mac_address) {
    m_start_mac_address = start_mac_address;
    m_start_mac_address_isSet = true;
}

bool OAIMacAddressPoolModel::is_start_mac_address_Set() const{
    return m_start_mac_address_isSet;
}

bool OAIMacAddressPoolModel::is_start_mac_address_Valid() const{
    return m_start_mac_address_isValid;
}

bool OAIMacAddressPoolModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_mac_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_allocated_mac_addresses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_available_mac_addresses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_mac_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMacAddressPoolModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
