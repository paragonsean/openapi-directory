# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.input_descriptor import InputDescriptor
from openapi_server import util


class PipelineTemplateDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, id: str=None, inputs: List[InputDescriptor]=None):
        """PipelineTemplateDefinition - a model defined in OpenAPI

        :param description: The description of this PipelineTemplateDefinition.
        :param id: The id of this PipelineTemplateDefinition.
        :param inputs: The inputs of this PipelineTemplateDefinition.
        """
        self.openapi_types = {
            'description': str,
            'id': str,
            'inputs': List[InputDescriptor]
        }

        self.attribute_map = {
            'description': 'description',
            'id': 'id',
            'inputs': 'inputs'
        }

        self._description = description
        self._id = id
        self._inputs = inputs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PipelineTemplateDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PipelineTemplateDefinition of this PipelineTemplateDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this PipelineTemplateDefinition.

        Description of the pipeline enabled by the template.

        :return: The description of this PipelineTemplateDefinition.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PipelineTemplateDefinition.

        Description of the pipeline enabled by the template.

        :param description: The description of this PipelineTemplateDefinition.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this PipelineTemplateDefinition.

        Unique identifier of the pipeline template.

        :return: The id of this PipelineTemplateDefinition.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PipelineTemplateDefinition.

        Unique identifier of the pipeline template.

        :param id: The id of this PipelineTemplateDefinition.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def inputs(self):
        """Gets the inputs of this PipelineTemplateDefinition.

        List of input parameters required by the template to create a pipeline.

        :return: The inputs of this PipelineTemplateDefinition.
        :rtype: List[InputDescriptor]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this PipelineTemplateDefinition.

        List of input parameters required by the template to create a pipeline.

        :param inputs: The inputs of this PipelineTemplateDefinition.
        :type inputs: List[InputDescriptor]
        """

        self._inputs = inputs
