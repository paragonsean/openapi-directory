# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bootstrap_configuration import BootstrapConfiguration
from openapi_server.models.organization_reference import OrganizationReference
from openapi_server.models.project_reference import ProjectReference
from openapi_server import util


class PipelineProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bootstrap_configuration: BootstrapConfiguration=None, organization: OrganizationReference=None, pipeline_id: int=None, project: ProjectReference=None):
        """PipelineProperties - a model defined in OpenAPI

        :param bootstrap_configuration: The bootstrap_configuration of this PipelineProperties.
        :param organization: The organization of this PipelineProperties.
        :param pipeline_id: The pipeline_id of this PipelineProperties.
        :param project: The project of this PipelineProperties.
        """
        self.openapi_types = {
            'bootstrap_configuration': BootstrapConfiguration,
            'organization': OrganizationReference,
            'pipeline_id': int,
            'project': ProjectReference
        }

        self.attribute_map = {
            'bootstrap_configuration': 'bootstrapConfiguration',
            'organization': 'organization',
            'pipeline_id': 'pipelineId',
            'project': 'project'
        }

        self._bootstrap_configuration = bootstrap_configuration
        self._organization = organization
        self._pipeline_id = pipeline_id
        self._project = project

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PipelineProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PipelineProperties of this PipelineProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bootstrap_configuration(self):
        """Gets the bootstrap_configuration of this PipelineProperties.


        :return: The bootstrap_configuration of this PipelineProperties.
        :rtype: BootstrapConfiguration
        """
        return self._bootstrap_configuration

    @bootstrap_configuration.setter
    def bootstrap_configuration(self, bootstrap_configuration):
        """Sets the bootstrap_configuration of this PipelineProperties.


        :param bootstrap_configuration: The bootstrap_configuration of this PipelineProperties.
        :type bootstrap_configuration: BootstrapConfiguration
        """
        if bootstrap_configuration is None:
            raise ValueError("Invalid value for `bootstrap_configuration`, must not be `None`")

        self._bootstrap_configuration = bootstrap_configuration

    @property
    def organization(self):
        """Gets the organization of this PipelineProperties.


        :return: The organization of this PipelineProperties.
        :rtype: OrganizationReference
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this PipelineProperties.


        :param organization: The organization of this PipelineProperties.
        :type organization: OrganizationReference
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")

        self._organization = organization

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this PipelineProperties.

        Unique identifier of the Azure Pipeline within the Azure DevOps Project.

        :return: The pipeline_id of this PipelineProperties.
        :rtype: int
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this PipelineProperties.

        Unique identifier of the Azure Pipeline within the Azure DevOps Project.

        :param pipeline_id: The pipeline_id of this PipelineProperties.
        :type pipeline_id: int
        """

        self._pipeline_id = pipeline_id

    @property
    def project(self):
        """Gets the project of this PipelineProperties.


        :return: The project of this PipelineProperties.
        :rtype: ProjectReference
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this PipelineProperties.


        :param project: The project of this PipelineProperties.
        :type project: ProjectReference
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")

        self._project = project
