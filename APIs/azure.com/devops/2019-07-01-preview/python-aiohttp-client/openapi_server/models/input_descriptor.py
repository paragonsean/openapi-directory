# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.input_value import InputValue
from openapi_server import util


class InputDescriptor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, id: str=None, possible_values: List[InputValue]=None, type: str=None):
        """InputDescriptor - a model defined in OpenAPI

        :param description: The description of this InputDescriptor.
        :param id: The id of this InputDescriptor.
        :param possible_values: The possible_values of this InputDescriptor.
        :param type: The type of this InputDescriptor.
        """
        self.openapi_types = {
            'description': str,
            'id': str,
            'possible_values': List[InputValue],
            'type': str
        }

        self.attribute_map = {
            'description': 'description',
            'id': 'id',
            'possible_values': 'possibleValues',
            'type': 'type'
        }

        self._description = description
        self._id = id
        self._possible_values = possible_values
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputDescriptor of this InputDescriptor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this InputDescriptor.

        Description of the input parameter.

        :return: The description of this InputDescriptor.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InputDescriptor.

        Description of the input parameter.

        :param description: The description of this InputDescriptor.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this InputDescriptor.

        Identifier of the input parameter.

        :return: The id of this InputDescriptor.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InputDescriptor.

        Identifier of the input parameter.

        :param id: The id of this InputDescriptor.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def possible_values(self):
        """Gets the possible_values of this InputDescriptor.

        List of possible values for the input parameter.

        :return: The possible_values of this InputDescriptor.
        :rtype: List[InputValue]
        """
        return self._possible_values

    @possible_values.setter
    def possible_values(self, possible_values):
        """Sets the possible_values of this InputDescriptor.

        List of possible values for the input parameter.

        :param possible_values: The possible_values of this InputDescriptor.
        :type possible_values: List[InputValue]
        """

        self._possible_values = possible_values

    @property
    def type(self):
        """Gets the type of this InputDescriptor.

        Data type of the value of the input parameter.

        :return: The type of this InputDescriptor.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InputDescriptor.

        Data type of the value of the input parameter.

        :param type: The type of this InputDescriptor.
        :type type: str
        """
        allowed_values = ["String", "SecureString", "Int", "Bool", "Authorization"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
