# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authorization import Authorization
from openapi_server import util


class CodeRepository(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization: Authorization=None, default_branch: str=None, id: str=None, properties: Dict[str, str]=None, repository_type: str=None):
        """CodeRepository - a model defined in OpenAPI

        :param authorization: The authorization of this CodeRepository.
        :param default_branch: The default_branch of this CodeRepository.
        :param id: The id of this CodeRepository.
        :param properties: The properties of this CodeRepository.
        :param repository_type: The repository_type of this CodeRepository.
        """
        self.openapi_types = {
            'authorization': Authorization,
            'default_branch': str,
            'id': str,
            'properties': Dict[str, str],
            'repository_type': str
        }

        self.attribute_map = {
            'authorization': 'authorization',
            'default_branch': 'defaultBranch',
            'id': 'id',
            'properties': 'properties',
            'repository_type': 'repositoryType'
        }

        self._authorization = authorization
        self._default_branch = default_branch
        self._id = id
        self._properties = properties
        self._repository_type = repository_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodeRepository':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodeRepository of this CodeRepository.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization(self):
        """Gets the authorization of this CodeRepository.


        :return: The authorization of this CodeRepository.
        :rtype: Authorization
        """
        return self._authorization

    @authorization.setter
    def authorization(self, authorization):
        """Sets the authorization of this CodeRepository.


        :param authorization: The authorization of this CodeRepository.
        :type authorization: Authorization
        """

        self._authorization = authorization

    @property
    def default_branch(self):
        """Gets the default_branch of this CodeRepository.

        Default branch used to configure Continuous Integration (CI) in the pipeline.

        :return: The default_branch of this CodeRepository.
        :rtype: str
        """
        return self._default_branch

    @default_branch.setter
    def default_branch(self, default_branch):
        """Sets the default_branch of this CodeRepository.

        Default branch used to configure Continuous Integration (CI) in the pipeline.

        :param default_branch: The default_branch of this CodeRepository.
        :type default_branch: str
        """
        if default_branch is None:
            raise ValueError("Invalid value for `default_branch`, must not be `None`")

        self._default_branch = default_branch

    @property
    def id(self):
        """Gets the id of this CodeRepository.

        Unique immutable identifier of the code repository.

        :return: The id of this CodeRepository.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CodeRepository.

        Unique immutable identifier of the code repository.

        :param id: The id of this CodeRepository.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def properties(self):
        """Gets the properties of this CodeRepository.

        Repository-specific properties.

        :return: The properties of this CodeRepository.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this CodeRepository.

        Repository-specific properties.

        :param properties: The properties of this CodeRepository.
        :type properties: Dict[str, str]
        """

        self._properties = properties

    @property
    def repository_type(self):
        """Gets the repository_type of this CodeRepository.

        Type of code repository.

        :return: The repository_type of this CodeRepository.
        :rtype: str
        """
        return self._repository_type

    @repository_type.setter
    def repository_type(self, repository_type):
        """Sets the repository_type of this CodeRepository.

        Type of code repository.

        :param repository_type: The repository_type of this CodeRepository.
        :type repository_type: str
        """
        allowed_values = ["gitHub", "vstsGit"]  # noqa: E501
        if repository_type not in allowed_values:
            raise ValueError(
                "Invalid value for `repository_type` ({0}), must be one of {1}"
                .format(repository_type, allowed_values)
            )

        self._repository_type = repository_type
