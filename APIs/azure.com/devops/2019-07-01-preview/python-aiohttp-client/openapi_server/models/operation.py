# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.operation_display_value import OperationDisplayValue
from openapi_server import util


class Operation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display: OperationDisplayValue=None, is_data_action: str=None, name: str=None):
        """Operation - a model defined in OpenAPI

        :param display: The display of this Operation.
        :param is_data_action: The is_data_action of this Operation.
        :param name: The name of this Operation.
        """
        self.openapi_types = {
            'display': OperationDisplayValue,
            'is_data_action': str,
            'name': str
        }

        self.attribute_map = {
            'display': 'display',
            'is_data_action': 'isDataAction',
            'name': 'name'
        }

        self._display = display
        self._is_data_action = is_data_action
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Operation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Operation of this Operation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display(self):
        """Gets the display of this Operation.


        :return: The display of this Operation.
        :rtype: OperationDisplayValue
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this Operation.


        :param display: The display of this Operation.
        :type display: OperationDisplayValue
        """

        self._display = display

    @property
    def is_data_action(self):
        """Gets the is_data_action of this Operation.

        Indicates whether the operation applies to data-plane.

        :return: The is_data_action of this Operation.
        :rtype: str
        """
        return self._is_data_action

    @is_data_action.setter
    def is_data_action(self, is_data_action):
        """Sets the is_data_action of this Operation.

        Indicates whether the operation applies to data-plane.

        :param is_data_action: The is_data_action of this Operation.
        :type is_data_action: str
        """

        self._is_data_action = is_data_action

    @property
    def name(self):
        """Gets the name of this Operation.

        Name of the operation.

        :return: The name of this Operation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Operation.

        Name of the operation.

        :param name: The name of this Operation.
        :type name: str
        """

        self._name = name
