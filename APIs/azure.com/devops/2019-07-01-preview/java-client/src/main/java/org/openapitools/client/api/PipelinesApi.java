/*
 * Azure DevOps
 * Azure DevOps Resource Provider
 *
 * The version of the OpenAPI document: 2019-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.Pipeline;
import org.openapitools.client.model.PipelineListResult;
import org.openapitools.client.model.PipelineUpdateParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PipelinesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PipelinesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PipelinesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for pipelinesCreateOrUpdate
     * @param subscriptionId Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param apiVersion API version to be used with the HTTP request. (required)
     * @param pipelineName The name of the Azure Pipeline resource in ARM. (required)
     * @param createOperationParameters The request payload to create the Azure Pipeline. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Azure Pipeline has been configured successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request has been accepted for processing and the Azure Pipeline will be configured asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pipelinesCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String apiVersion, String pipelineName, Pipeline createOperationParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOperationParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevOps/pipelines/{pipelineName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "pipelineName" + "}", localVarApiClient.escapeString(pipelineName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pipelinesCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String pipelineName, Pipeline createOperationParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling pipelinesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling pipelinesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling pipelinesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'pipelineName' is set
        if (pipelineName == null) {
            throw new ApiException("Missing the required parameter 'pipelineName' when calling pipelinesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'createOperationParameters' is set
        if (createOperationParameters == null) {
            throw new ApiException("Missing the required parameter 'createOperationParameters' when calling pipelinesCreateOrUpdate(Async)");
        }

        return pipelinesCreateOrUpdateCall(subscriptionId, resourceGroupName, apiVersion, pipelineName, createOperationParameters, _callback);

    }

    /**
     * 
     * Creates or updates an Azure Pipeline.
     * @param subscriptionId Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param apiVersion API version to be used with the HTTP request. (required)
     * @param pipelineName The name of the Azure Pipeline resource in ARM. (required)
     * @param createOperationParameters The request payload to create the Azure Pipeline. (required)
     * @return Pipeline
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Azure Pipeline has been configured successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request has been accepted for processing and the Azure Pipeline will be configured asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Pipeline pipelinesCreateOrUpdate(String subscriptionId, String resourceGroupName, String apiVersion, String pipelineName, Pipeline createOperationParameters) throws ApiException {
        ApiResponse<Pipeline> localVarResp = pipelinesCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, pipelineName, createOperationParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates an Azure Pipeline.
     * @param subscriptionId Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param apiVersion API version to be used with the HTTP request. (required)
     * @param pipelineName The name of the Azure Pipeline resource in ARM. (required)
     * @param createOperationParameters The request payload to create the Azure Pipeline. (required)
     * @return ApiResponse&lt;Pipeline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Azure Pipeline has been configured successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request has been accepted for processing and the Azure Pipeline will be configured asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pipeline> pipelinesCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String pipelineName, Pipeline createOperationParameters) throws ApiException {
        okhttp3.Call localVarCall = pipelinesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, pipelineName, createOperationParameters, null);
        Type localVarReturnType = new TypeToken<Pipeline>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates an Azure Pipeline.
     * @param subscriptionId Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param apiVersion API version to be used with the HTTP request. (required)
     * @param pipelineName The name of the Azure Pipeline resource in ARM. (required)
     * @param createOperationParameters The request payload to create the Azure Pipeline. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Azure Pipeline has been configured successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request has been accepted for processing and the Azure Pipeline will be configured asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pipelinesCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String apiVersion, String pipelineName, Pipeline createOperationParameters, final ApiCallback<Pipeline> _callback) throws ApiException {

        okhttp3.Call localVarCall = pipelinesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, pipelineName, createOperationParameters, _callback);
        Type localVarReturnType = new TypeToken<Pipeline>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pipelinesDelete
     * @param subscriptionId Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param apiVersion API version to be used with the HTTP request. (required)
     * @param pipelineName The name of the Azure Pipeline resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Azure Pipeline has been deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Azure Pipeline is not found or has been deleted already. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pipelinesDeleteCall(String subscriptionId, String resourceGroupName, String apiVersion, String pipelineName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevOps/pipelines/{pipelineName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "pipelineName" + "}", localVarApiClient.escapeString(pipelineName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pipelinesDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String pipelineName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling pipelinesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling pipelinesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling pipelinesDelete(Async)");
        }

        // verify the required parameter 'pipelineName' is set
        if (pipelineName == null) {
            throw new ApiException("Missing the required parameter 'pipelineName' when calling pipelinesDelete(Async)");
        }

        return pipelinesDeleteCall(subscriptionId, resourceGroupName, apiVersion, pipelineName, _callback);

    }

    /**
     * 
     * Deletes an Azure Pipeline.
     * @param subscriptionId Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param apiVersion API version to be used with the HTTP request. (required)
     * @param pipelineName The name of the Azure Pipeline resource. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Azure Pipeline has been deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Azure Pipeline is not found or has been deleted already. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void pipelinesDelete(String subscriptionId, String resourceGroupName, String apiVersion, String pipelineName) throws ApiException {
        pipelinesDeleteWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, pipelineName);
    }

    /**
     * 
     * Deletes an Azure Pipeline.
     * @param subscriptionId Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param apiVersion API version to be used with the HTTP request. (required)
     * @param pipelineName The name of the Azure Pipeline resource. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Azure Pipeline has been deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Azure Pipeline is not found or has been deleted already. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pipelinesDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String pipelineName) throws ApiException {
        okhttp3.Call localVarCall = pipelinesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, pipelineName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an Azure Pipeline.
     * @param subscriptionId Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param apiVersion API version to be used with the HTTP request. (required)
     * @param pipelineName The name of the Azure Pipeline resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Azure Pipeline has been deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Azure Pipeline is not found or has been deleted already. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pipelinesDeleteAsync(String subscriptionId, String resourceGroupName, String apiVersion, String pipelineName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pipelinesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, pipelineName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pipelinesGet
     * @param subscriptionId Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param apiVersion API version to be used with the HTTP request. (required)
     * @param pipelineName The name of the Azure Pipeline resource in ARM. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Azure Pipeline has been fetched successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pipelinesGetCall(String subscriptionId, String resourceGroupName, String apiVersion, String pipelineName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevOps/pipelines/{pipelineName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "pipelineName" + "}", localVarApiClient.escapeString(pipelineName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pipelinesGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String pipelineName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling pipelinesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling pipelinesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling pipelinesGet(Async)");
        }

        // verify the required parameter 'pipelineName' is set
        if (pipelineName == null) {
            throw new ApiException("Missing the required parameter 'pipelineName' when calling pipelinesGet(Async)");
        }

        return pipelinesGetCall(subscriptionId, resourceGroupName, apiVersion, pipelineName, _callback);

    }

    /**
     * 
     * Gets an existing Azure Pipeline.
     * @param subscriptionId Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param apiVersion API version to be used with the HTTP request. (required)
     * @param pipelineName The name of the Azure Pipeline resource in ARM. (required)
     * @return Pipeline
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Azure Pipeline has been fetched successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Pipeline pipelinesGet(String subscriptionId, String resourceGroupName, String apiVersion, String pipelineName) throws ApiException {
        ApiResponse<Pipeline> localVarResp = pipelinesGetWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, pipelineName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets an existing Azure Pipeline.
     * @param subscriptionId Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param apiVersion API version to be used with the HTTP request. (required)
     * @param pipelineName The name of the Azure Pipeline resource in ARM. (required)
     * @return ApiResponse&lt;Pipeline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Azure Pipeline has been fetched successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pipeline> pipelinesGetWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String pipelineName) throws ApiException {
        okhttp3.Call localVarCall = pipelinesGetValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, pipelineName, null);
        Type localVarReturnType = new TypeToken<Pipeline>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets an existing Azure Pipeline.
     * @param subscriptionId Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param apiVersion API version to be used with the HTTP request. (required)
     * @param pipelineName The name of the Azure Pipeline resource in ARM. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Azure Pipeline has been fetched successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pipelinesGetAsync(String subscriptionId, String resourceGroupName, String apiVersion, String pipelineName, final ApiCallback<Pipeline> _callback) throws ApiException {

        okhttp3.Call localVarCall = pipelinesGetValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, pipelineName, _callback);
        Type localVarReturnType = new TypeToken<Pipeline>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pipelinesListByResourceGroup
     * @param subscriptionId Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param apiVersion API version to be used with the HTTP request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Azure Pipelines have been fetched successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pipelinesListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevOps/pipelines"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pipelinesListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling pipelinesListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling pipelinesListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling pipelinesListByResourceGroup(Async)");
        }

        return pipelinesListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * 
     * Lists all Azure Pipelines under the specified resource group.
     * @param subscriptionId Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param apiVersion API version to be used with the HTTP request. (required)
     * @return PipelineListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Azure Pipelines have been fetched successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PipelineListResult pipelinesListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<PipelineListResult> localVarResp = pipelinesListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all Azure Pipelines under the specified resource group.
     * @param subscriptionId Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param apiVersion API version to be used with the HTTP request. (required)
     * @return ApiResponse&lt;PipelineListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Azure Pipelines have been fetched successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineListResult> pipelinesListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = pipelinesListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<PipelineListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all Azure Pipelines under the specified resource group.
     * @param subscriptionId Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param apiVersion API version to be used with the HTTP request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Azure Pipelines have been fetched successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pipelinesListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<PipelineListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pipelinesListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PipelineListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pipelinesListBySubscription
     * @param subscriptionId Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API version to be used with the HTTP request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Azure Pipelines have been fetched successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pipelinesListBySubscriptionCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.DevOps/pipelines"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pipelinesListBySubscriptionValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling pipelinesListBySubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling pipelinesListBySubscription(Async)");
        }

        return pipelinesListBySubscriptionCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Lists all Azure Pipelines under the specified subscription.
     * @param subscriptionId Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API version to be used with the HTTP request. (required)
     * @return PipelineListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Azure Pipelines have been fetched successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PipelineListResult pipelinesListBySubscription(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<PipelineListResult> localVarResp = pipelinesListBySubscriptionWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all Azure Pipelines under the specified subscription.
     * @param subscriptionId Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API version to be used with the HTTP request. (required)
     * @return ApiResponse&lt;PipelineListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Azure Pipelines have been fetched successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineListResult> pipelinesListBySubscriptionWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = pipelinesListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<PipelineListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all Azure Pipelines under the specified subscription.
     * @param subscriptionId Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API version to be used with the HTTP request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Azure Pipelines have been fetched successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pipelinesListBySubscriptionAsync(String subscriptionId, String apiVersion, final ApiCallback<PipelineListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pipelinesListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PipelineListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pipelinesUpdate
     * @param subscriptionId Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param apiVersion API version to be used with the HTTP request. (required)
     * @param pipelineName The name of the Azure Pipeline resource. (required)
     * @param updateOperationParameters The request payload containing the properties to update in the Azure Pipeline. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Azure Pipeline has been updated successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pipelinesUpdateCall(String subscriptionId, String resourceGroupName, String apiVersion, String pipelineName, PipelineUpdateParameters updateOperationParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOperationParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevOps/pipelines/{pipelineName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "pipelineName" + "}", localVarApiClient.escapeString(pipelineName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pipelinesUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String pipelineName, PipelineUpdateParameters updateOperationParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling pipelinesUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling pipelinesUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling pipelinesUpdate(Async)");
        }

        // verify the required parameter 'pipelineName' is set
        if (pipelineName == null) {
            throw new ApiException("Missing the required parameter 'pipelineName' when calling pipelinesUpdate(Async)");
        }

        // verify the required parameter 'updateOperationParameters' is set
        if (updateOperationParameters == null) {
            throw new ApiException("Missing the required parameter 'updateOperationParameters' when calling pipelinesUpdate(Async)");
        }

        return pipelinesUpdateCall(subscriptionId, resourceGroupName, apiVersion, pipelineName, updateOperationParameters, _callback);

    }

    /**
     * 
     * Updates the properties of an Azure Pipeline. Currently, only tags can be updated.
     * @param subscriptionId Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param apiVersion API version to be used with the HTTP request. (required)
     * @param pipelineName The name of the Azure Pipeline resource. (required)
     * @param updateOperationParameters The request payload containing the properties to update in the Azure Pipeline. (required)
     * @return Pipeline
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Azure Pipeline has been updated successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Pipeline pipelinesUpdate(String subscriptionId, String resourceGroupName, String apiVersion, String pipelineName, PipelineUpdateParameters updateOperationParameters) throws ApiException {
        ApiResponse<Pipeline> localVarResp = pipelinesUpdateWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, pipelineName, updateOperationParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the properties of an Azure Pipeline. Currently, only tags can be updated.
     * @param subscriptionId Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param apiVersion API version to be used with the HTTP request. (required)
     * @param pipelineName The name of the Azure Pipeline resource. (required)
     * @param updateOperationParameters The request payload containing the properties to update in the Azure Pipeline. (required)
     * @return ApiResponse&lt;Pipeline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Azure Pipeline has been updated successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pipeline> pipelinesUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String pipelineName, PipelineUpdateParameters updateOperationParameters) throws ApiException {
        okhttp3.Call localVarCall = pipelinesUpdateValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, pipelineName, updateOperationParameters, null);
        Type localVarReturnType = new TypeToken<Pipeline>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the properties of an Azure Pipeline. Currently, only tags can be updated.
     * @param subscriptionId Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param apiVersion API version to be used with the HTTP request. (required)
     * @param pipelineName The name of the Azure Pipeline resource. (required)
     * @param updateOperationParameters The request payload containing the properties to update in the Azure Pipeline. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Azure Pipeline has been updated successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pipelinesUpdateAsync(String subscriptionId, String resourceGroupName, String apiVersion, String pipelineName, PipelineUpdateParameters updateOperationParameters, final ApiCallback<Pipeline> _callback) throws ApiException {

        okhttp3.Call localVarCall = pipelinesUpdateValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, pipelineName, updateOperationParameters, _callback);
        Type localVarReturnType = new TypeToken<Pipeline>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
