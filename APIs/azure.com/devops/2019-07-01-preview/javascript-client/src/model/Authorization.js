/**
 * Azure DevOps
 * Azure DevOps Resource Provider
 *
 * The version of the OpenAPI document: 2019-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Authorization model module.
 * @module model/Authorization
 * @version 2019-07-01-preview
 */
class Authorization {
    /**
     * Constructs a new <code>Authorization</code>.
     * Authorization info used to access a resource (like code repository).
     * @alias module:model/Authorization
     * @param authorizationType {module:model/Authorization.AuthorizationTypeEnum} Type of authorization.
     */
    constructor(authorizationType) { 
        
        Authorization.initialize(this, authorizationType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, authorizationType) { 
        obj['authorizationType'] = authorizationType;
    }

    /**
     * Constructs a <code>Authorization</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Authorization} obj Optional instance to populate.
     * @return {module:model/Authorization} The populated <code>Authorization</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Authorization();

            if (data.hasOwnProperty('authorizationType')) {
                obj['authorizationType'] = ApiClient.convertToType(data['authorizationType'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Authorization</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Authorization</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Authorization.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['authorizationType'] && !(typeof data['authorizationType'] === 'string' || data['authorizationType'] instanceof String)) {
            throw new Error("Expected the field `authorizationType` to be a primitive type in the JSON string but got " + data['authorizationType']);
        }

        return true;
    }


}

Authorization.RequiredProperties = ["authorizationType"];

/**
 * Type of authorization.
 * @member {module:model/Authorization.AuthorizationTypeEnum} authorizationType
 */
Authorization.prototype['authorizationType'] = undefined;

/**
 * Authorization parameters corresponding to the authorization type.
 * @member {Object.<String, String>} parameters
 */
Authorization.prototype['parameters'] = undefined;





/**
 * Allowed values for the <code>authorizationType</code> property.
 * @enum {String}
 * @readonly
 */
Authorization['AuthorizationTypeEnum'] = {

    /**
     * value: "personalAccessToken"
     * @const
     */
    "personalAccessToken": "personalAccessToken"
};



export default Authorization;

