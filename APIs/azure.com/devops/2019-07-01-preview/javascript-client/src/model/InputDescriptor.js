/**
 * Azure DevOps
 * Azure DevOps Resource Provider
 *
 * The version of the OpenAPI document: 2019-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InputValue from './InputValue';

/**
 * The InputDescriptor model module.
 * @module model/InputDescriptor
 * @version 2019-07-01-preview
 */
class InputDescriptor {
    /**
     * Constructs a new <code>InputDescriptor</code>.
     * Representation of a pipeline template input parameter.
     * @alias module:model/InputDescriptor
     * @param id {String} Identifier of the input parameter.
     * @param type {module:model/InputDescriptor.TypeEnum} Data type of the value of the input parameter.
     */
    constructor(id, type) { 
        
        InputDescriptor.initialize(this, id, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, type) { 
        obj['id'] = id;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>InputDescriptor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InputDescriptor} obj Optional instance to populate.
     * @return {module:model/InputDescriptor} The populated <code>InputDescriptor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InputDescriptor();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('possibleValues')) {
                obj['possibleValues'] = ApiClient.convertToType(data['possibleValues'], [InputValue]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InputDescriptor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InputDescriptor</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InputDescriptor.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['possibleValues']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['possibleValues'])) {
                throw new Error("Expected the field `possibleValues` to be an array in the JSON data but got " + data['possibleValues']);
            }
            // validate the optional field `possibleValues` (array)
            for (const item of data['possibleValues']) {
                InputValue.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

InputDescriptor.RequiredProperties = ["id", "type"];

/**
 * Description of the input parameter.
 * @member {String} description
 */
InputDescriptor.prototype['description'] = undefined;

/**
 * Identifier of the input parameter.
 * @member {String} id
 */
InputDescriptor.prototype['id'] = undefined;

/**
 * List of possible values for the input parameter.
 * @member {Array.<module:model/InputValue>} possibleValues
 */
InputDescriptor.prototype['possibleValues'] = undefined;

/**
 * Data type of the value of the input parameter.
 * @member {module:model/InputDescriptor.TypeEnum} type
 */
InputDescriptor.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
InputDescriptor['TypeEnum'] = {

    /**
     * value: "String"
     * @const
     */
    "String": "String",

    /**
     * value: "SecureString"
     * @const
     */
    "SecureString": "SecureString",

    /**
     * value: "Int"
     * @const
     */
    "Int": "Int",

    /**
     * value: "Bool"
     * @const
     */
    "Bool": "Bool",

    /**
     * value: "Authorization"
     * @const
     */
    "Authorization": "Authorization"
};



export default InputDescriptor;

