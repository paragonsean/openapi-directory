/**
 * Azure DevOps
 * Azure DevOps Resource Provider
 *
 * The version of the OpenAPI document: 2019-07-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipelineProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipelineProperties::OAIPipelineProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipelineProperties::OAIPipelineProperties() {
    this->initializeModel();
}

OAIPipelineProperties::~OAIPipelineProperties() {}

void OAIPipelineProperties::initializeModel() {

    m_bootstrap_configuration_isSet = false;
    m_bootstrap_configuration_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_pipeline_id_isSet = false;
    m_pipeline_id_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;
}

void OAIPipelineProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipelineProperties::fromJsonObject(QJsonObject json) {

    m_bootstrap_configuration_isValid = ::OpenAPI::fromJsonValue(m_bootstrap_configuration, json[QString("bootstrapConfiguration")]);
    m_bootstrap_configuration_isSet = !json[QString("bootstrapConfiguration")].isNull() && m_bootstrap_configuration_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_pipeline_id_isValid = ::OpenAPI::fromJsonValue(m_pipeline_id, json[QString("pipelineId")]);
    m_pipeline_id_isSet = !json[QString("pipelineId")].isNull() && m_pipeline_id_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;
}

QString OAIPipelineProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipelineProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_bootstrap_configuration.isSet()) {
        obj.insert(QString("bootstrapConfiguration"), ::OpenAPI::toJsonValue(m_bootstrap_configuration));
    }
    if (m_organization.isSet()) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_pipeline_id_isSet) {
        obj.insert(QString("pipelineId"), ::OpenAPI::toJsonValue(m_pipeline_id));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    return obj;
}

OAIBootstrapConfiguration OAIPipelineProperties::getBootstrapConfiguration() const {
    return m_bootstrap_configuration;
}
void OAIPipelineProperties::setBootstrapConfiguration(const OAIBootstrapConfiguration &bootstrap_configuration) {
    m_bootstrap_configuration = bootstrap_configuration;
    m_bootstrap_configuration_isSet = true;
}

bool OAIPipelineProperties::is_bootstrap_configuration_Set() const{
    return m_bootstrap_configuration_isSet;
}

bool OAIPipelineProperties::is_bootstrap_configuration_Valid() const{
    return m_bootstrap_configuration_isValid;
}

OAIOrganizationReference OAIPipelineProperties::getOrganization() const {
    return m_organization;
}
void OAIPipelineProperties::setOrganization(const OAIOrganizationReference &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIPipelineProperties::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIPipelineProperties::is_organization_Valid() const{
    return m_organization_isValid;
}

qint32 OAIPipelineProperties::getPipelineId() const {
    return m_pipeline_id;
}
void OAIPipelineProperties::setPipelineId(const qint32 &pipeline_id) {
    m_pipeline_id = pipeline_id;
    m_pipeline_id_isSet = true;
}

bool OAIPipelineProperties::is_pipeline_id_Set() const{
    return m_pipeline_id_isSet;
}

bool OAIPipelineProperties::is_pipeline_id_Valid() const{
    return m_pipeline_id_isValid;
}

OAIProjectReference OAIPipelineProperties::getProject() const {
    return m_project;
}
void OAIPipelineProperties::setProject(const OAIProjectReference &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIPipelineProperties::is_project_Set() const{
    return m_project_isSet;
}

bool OAIPipelineProperties::is_project_Valid() const{
    return m_project_isValid;
}

bool OAIPipelineProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bootstrap_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipelineProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bootstrap_configuration_isValid && m_organization_isValid && m_project_isValid && true;
}

} // namespace OpenAPI
