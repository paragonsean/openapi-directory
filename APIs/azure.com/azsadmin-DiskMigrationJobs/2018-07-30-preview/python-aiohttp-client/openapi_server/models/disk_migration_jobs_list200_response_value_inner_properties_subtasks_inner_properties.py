# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disk_id: str=None, end_time: datetime=None, migration_subtask_status: str=None, reason: str=None, source_share: str=None, start_time: datetime=None, target_disk_state_for_migration: str=None, target_share: str=None):
        """DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties - a model defined in OpenAPI

        :param disk_id: The disk_id of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.
        :param end_time: The end_time of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.
        :param migration_subtask_status: The migration_subtask_status of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.
        :param reason: The reason of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.
        :param source_share: The source_share of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.
        :param start_time: The start_time of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.
        :param target_disk_state_for_migration: The target_disk_state_for_migration of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.
        :param target_share: The target_share of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.
        """
        self.openapi_types = {
            'disk_id': str,
            'end_time': datetime,
            'migration_subtask_status': str,
            'reason': str,
            'source_share': str,
            'start_time': datetime,
            'target_disk_state_for_migration': str,
            'target_share': str
        }

        self.attribute_map = {
            'disk_id': 'diskId',
            'end_time': 'endTime',
            'migration_subtask_status': 'migrationSubtaskStatus',
            'reason': 'reason',
            'source_share': 'sourceShare',
            'start_time': 'startTime',
            'target_disk_state_for_migration': 'targetDiskStateForMigration',
            'target_share': 'targetShare'
        }

        self._disk_id = disk_id
        self._end_time = end_time
        self._migration_subtask_status = migration_subtask_status
        self._reason = reason
        self._source_share = source_share
        self._start_time = start_time
        self._target_disk_state_for_migration = target_disk_state_for_migration
        self._target_share = target_share

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiskMigrationJobs_List_200_response_value_inner_properties_subtasks_inner_properties of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disk_id(self):
        """Gets the disk_id of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.

        The id of disk.

        :return: The disk_id of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.
        :rtype: str
        """
        return self._disk_id

    @disk_id.setter
    def disk_id(self, disk_id):
        """Sets the disk_id of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.

        The id of disk.

        :param disk_id: The disk_id of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.
        :type disk_id: str
        """

        self._disk_id = disk_id

    @property
    def end_time(self):
        """Gets the end_time of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.

        The task end time.

        :return: The end_time of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.

        The task end time.

        :param end_time: The end_time of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def migration_subtask_status(self):
        """Gets the migration_subtask_status of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.

        Migration child task status.

        :return: The migration_subtask_status of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.
        :rtype: str
        """
        return self._migration_subtask_status

    @migration_subtask_status.setter
    def migration_subtask_status(self, migration_subtask_status):
        """Sets the migration_subtask_status of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.

        Migration child task status.

        :param migration_subtask_status: The migration_subtask_status of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.
        :type migration_subtask_status: str
        """
        allowed_values = ["Undefined", "Running", "Succeeded", "Failed", "Canceled", "Pending", "Skipped"]  # noqa: E501
        if migration_subtask_status not in allowed_values:
            raise ValueError(
                "Invalid value for `migration_subtask_status` ({0}), must be one of {1}"
                .format(migration_subtask_status, allowed_values)
            )

        self._migration_subtask_status = migration_subtask_status

    @property
    def reason(self):
        """Gets the reason of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.

        The reason of task failure.

        :return: The reason of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.

        The reason of task failure.

        :param reason: The reason of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.
        :type reason: str
        """

        self._reason = reason

    @property
    def source_share(self):
        """Gets the source_share of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.

        The source share of migration task.

        :return: The source_share of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.
        :rtype: str
        """
        return self._source_share

    @source_share.setter
    def source_share(self, source_share):
        """Sets the source_share of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.

        The source share of migration task.

        :param source_share: The source_share of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.
        :type source_share: str
        """

        self._source_share = source_share

    @property
    def start_time(self):
        """Gets the start_time of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.

        The task start time.

        :return: The start_time of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.

        The task start time.

        :param start_time: The start_time of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def target_disk_state_for_migration(self):
        """Gets the target_disk_state_for_migration of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.

        Disk State.

        :return: The target_disk_state_for_migration of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.
        :rtype: str
        """
        return self._target_disk_state_for_migration

    @target_disk_state_for_migration.setter
    def target_disk_state_for_migration(self, target_disk_state_for_migration):
        """Sets the target_disk_state_for_migration of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.

        Disk State.

        :param target_disk_state_for_migration: The target_disk_state_for_migration of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.
        :type target_disk_state_for_migration: str
        """
        allowed_values = ["Undefined", "Unattached", "Attached", "Reserved", "ActiveSAS", "Unknown", "All", "Recommended", "OfflineMigration", "OnlineMigration"]  # noqa: E501
        if target_disk_state_for_migration not in allowed_values:
            raise ValueError(
                "Invalid value for `target_disk_state_for_migration` ({0}), must be one of {1}"
                .format(target_disk_state_for_migration, allowed_values)
            )

        self._target_disk_state_for_migration = target_disk_state_for_migration

    @property
    def target_share(self):
        """Gets the target_share of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.

        The target share of migration task.

        :return: The target_share of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.
        :rtype: str
        """
        return self._target_share

    @target_share.setter
    def target_share(self, target_share):
        """Sets the target_share of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.

        The target share of migration task.

        :param target_share: The target_share of this DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties.
        :type target_share: str
        """

        self._target_share = target_share
